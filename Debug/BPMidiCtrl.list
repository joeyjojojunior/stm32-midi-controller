
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a338  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001590  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba68  0800ba68  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba68  0800ba68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba70  0800ba70  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba70  0800ba70  0001ba70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba74  0800ba74  0001ba74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800ba78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a5c  20000190  0800bc08  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bec  0800bc08  00022bec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b979  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9e  00000000  00000000  0003bb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001cb62  00000000  00000000  00040b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018636  00000000  00000000  0005d6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a125e  00000000  00000000  00075d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00116f5e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000fe8  00000000  00000000  00116fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005240  00000000  00000000  00117fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4c0 	.word	0x0800a4c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	0800a4c0 	.word	0x0800a4c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <KnobMap>:
//uint8_t Knob_Map(Knob *k) {
//	return k->value * k->max_range / (k->max_values - 1);
//}

// Maps values from (0, max_values-1) to (0, m)
uint8_t KnobMap(Knob *k, uint8_t value, uint8_t m) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	fb02 f203 	mul.w	r2, r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7edb      	ldrb	r3, [r3, #27]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <ADC_Read_Knobs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Polls each channel NUM_ADC_SAMPLES times and saves the average ADC reading
void ADC_Read_Knobs() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
 8000f4e:	e051      	b.n	8000ff4 <ADC_Read_Knobs+0xb0>


        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	4a29      	ldr	r2, [pc, #164]	; (8001004 <ADC_Read_Knobs+0xc0>)
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	603b      	str	r3, [r7, #0]
        sConfig.Rank = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	4825      	ldr	r0, [pc, #148]	; (8001008 <ADC_Read_Knobs+0xc4>)
 8000f74:	f001 fdd6 	bl	8002b24 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <ADC_Read_Knobs+0x3e>
            Error_Handler();
 8000f7e:	f000 fc9f 	bl	80018c0 <Error_Handler>
        }

        HAL_ADC_Start(&hadc1);
 8000f82:	4821      	ldr	r0, [pc, #132]	; (8001008 <ADC_Read_Knobs+0xc4>)
 8000f84:	f001 fc4e 	bl	8002824 <HAL_ADC_Start>
        // Sample the channel NUM_ADC_SAMPLES times
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75bb      	strb	r3, [r7, #22]
 8000f8c:	e010      	b.n	8000fb0 <ADC_Read_Knobs+0x6c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f92:	481d      	ldr	r0, [pc, #116]	; (8001008 <ADC_Read_Knobs+0xc4>)
 8000f94:	f001 fd2d 	bl	80029f2 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 8000f98:	481b      	ldr	r0, [pc, #108]	; (8001008 <ADC_Read_Knobs+0xc4>)
 8000f9a:	f001 fdb5 	bl	8002b08 <HAL_ADC_GetValue>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	b291      	uxth	r1, r2
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <ADC_Read_Knobs+0xc8>)
 8000fa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8000faa:	7dbb      	ldrb	r3, [r7, #22]
 8000fac:	3301      	adds	r3, #1
 8000fae:	75bb      	strb	r3, [r7, #22]
 8000fb0:	7dbb      	ldrb	r3, [r7, #22]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d9eb      	bls.n	8000f8e <ADC_Read_Knobs+0x4a>
        }
        HAL_ADC_Stop(&hadc1);
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <ADC_Read_Knobs+0xc4>)
 8000fb8:	f001 fce8 	bl	800298c <HAL_ADC_Stop>

        // Calculate average of all samples for this channel
        uint16_t adc_sum = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	82bb      	strh	r3, [r7, #20]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	74fb      	strb	r3, [r7, #19]
 8000fc4:	e009      	b.n	8000fda <ADC_Read_Knobs+0x96>
            adc_sum += adcBuf[i];
 8000fc6:	7cfb      	ldrb	r3, [r7, #19]
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <ADC_Read_Knobs+0xc8>)
 8000fca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fce:	8abb      	ldrh	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	82bb      	strh	r3, [r7, #20]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8000fd4:	7cfb      	ldrb	r3, [r7, #19]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	74fb      	strb	r3, [r7, #19]
 8000fda:	7cfb      	ldrb	r3, [r7, #19]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d9f2      	bls.n	8000fc6 <ADC_Read_Knobs+0x82>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	8aba      	ldrh	r2, [r7, #20]
 8000fe4:	0912      	lsrs	r2, r2, #4
 8000fe6:	b291      	uxth	r1, r2
 8000fe8:	4a09      	ldr	r2, [pc, #36]	; (8001010 <ADC_Read_Knobs+0xcc>)
 8000fea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 8000fee:	7dfb      	ldrb	r3, [r7, #23]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	75fb      	strb	r3, [r7, #23]
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d9aa      	bls.n	8000f50 <ADC_Read_Knobs+0xc>
    }
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000010 	.word	0x20000010
 8001008:	20002214 	.word	0x20002214
 800100c:	200021f4 	.word	0x200021f4
 8001010:	200001ac 	.word	0x200001ac

08001014 <MIDI_Send>:

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, KnobMap(k, value, k->max_range));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7e1c      	ldrb	r4, [r3, #24]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7e5d      	ldrb	r5, [r3, #25]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7f1a      	ldrb	r2, [r3, #28]
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff6f 	bl	8000f14 <KnobMap>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4629      	mov	r1, r5
 800103c:	4620      	mov	r0, r4
 800103e:	f007 fd4f 	bl	8008ae0 <MX_USB_Send_Midi>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800104c <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7edb      	ldrb	r3, [r3, #27]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa69 	bl	8000534 <__aeabi_i2d>
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b45      	ldr	r3, [pc, #276]	; (800117c <MIDI_Scale_And_Filter+0x130>)
 8001068:	f7ff fbf8 	bl	800085c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd82 	bl	8000b7c <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff fa6b 	bl	8000558 <__aeabi_f2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <MIDI_Scale_And_Filter+0x134>)
 8001088:	f7ff fabe 	bl	8000608 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4614      	mov	r4, r2
 8001092:	461d      	mov	r5, r3
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa4c 	bl	8000534 <__aeabi_i2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4620      	mov	r0, r4
 80010a2:	4629      	mov	r1, r5
 80010a4:	f7ff fab0 	bl	8000608 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4614      	mov	r4, r2
 80010ae:	461d      	mov	r5, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7e9b      	ldrb	r3, [r3, #26]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa3d 	bl	8000534 <__aeabi_i2d>
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <MIDI_Scale_And_Filter+0x134>)
 80010c0:	f7ff faa2 	bl	8000608 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4620      	mov	r0, r4
 80010ca:	4629      	mov	r1, r5
 80010cc:	f7ff f8e6 	bl	800029c <__adddf3>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4614      	mov	r4, r2
 80010d6:	461d      	mov	r5, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7f1b      	ldrb	r3, [r3, #28]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa29 	bl	8000534 <__aeabi_i2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4620      	mov	r0, r4
 80010e8:	4629      	mov	r1, r5
 80010ea:	f7ff fcff 	bl	8000aec <__aeabi_dcmplt>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d032      	beq.n	800115a <MIDI_Scale_And_Filter+0x10e>
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f7ff fa2f 	bl	8000558 <__aeabi_f2d>
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <MIDI_Scale_And_Filter+0x134>)
 8001100:	f7ff fa82 	bl	8000608 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4614      	mov	r4, r2
 800110a:	461d      	mov	r5, r3
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa10 	bl	8000534 <__aeabi_i2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff fa74 	bl	8000608 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4614      	mov	r4, r2
 8001126:	461d      	mov	r5, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7e9b      	ldrb	r3, [r3, #26]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa01 	bl	8000534 <__aeabi_i2d>
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MIDI_Scale_And_Filter+0x134>)
 8001138:	f7ff fa66 	bl	8000608 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff f8aa 	bl	800029c <__adddf3>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fcf4 	bl	8000b3c <__aeabi_d2uiz>
 8001154:	4603      	mov	r3, r0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	e00c      	b.n	8001174 <MIDI_Scale_And_Filter+0x128>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7f1b      	ldrb	r3, [r3, #28]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9e8 	bl	8000534 <__aeabi_i2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fce6 	bl	8000b3c <__aeabi_d2uiz>
 8001170:	4603      	mov	r3, r0
 8001172:	b2db      	uxtb	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bdb0      	pop	{r4, r5, r7, pc}
 800117c:	406f4000 	.word	0x406f4000
 8001180:	3fe00000 	.word	0x3fe00000

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0a2      	sub	sp, #136	; 0x88
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    Knob knobs[4] = { { .init_value = 63, .row = 0, .col = 0, .label = "Cutoff", .channel = 0, .cc = 17, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 1 },
 800118a:	463b      	mov	r3, r7
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f008 f939 	bl	8009408 <memset>
 8001196:	233f      	movs	r3, #63	; 0x3f
 8001198:	703b      	strb	r3, [r7, #0]
 800119a:	4ac9      	ldr	r2, [pc, #804]	; (80014c0 <main+0x33c>)
 800119c:	1cfb      	adds	r3, r7, #3
 800119e:	6810      	ldr	r0, [r2, #0]
 80011a0:	6018      	str	r0, [r3, #0]
 80011a2:	8891      	ldrh	r1, [r2, #4]
 80011a4:	7992      	ldrb	r2, [r2, #6]
 80011a6:	8099      	strh	r1, [r3, #4]
 80011a8:	719a      	strb	r2, [r3, #6]
 80011aa:	f107 030a 	add.w	r3, r7, #10
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	2311      	movs	r3, #17
 80011b6:	767b      	strb	r3, [r7, #25]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	76fb      	strb	r3, [r7, #27]
 80011bc:	237f      	movs	r3, #127	; 0x7f
 80011be:	773b      	strb	r3, [r7, #28]
 80011c0:	2301      	movs	r3, #1
 80011c2:	777b      	strb	r3, [r7, #29]
 80011c4:	237f      	movs	r3, #127	; 0x7f
 80011c6:	f887 3020 	strb.w	r3, [r7, #32]
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011d0:	4bbc      	ldr	r3, [pc, #752]	; (80014c4 <main+0x340>)
 80011d2:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80011d6:	cb03      	ldmia	r3!, {r0, r1}
 80011d8:	6010      	str	r0, [r2, #0]
 80011da:	6051      	str	r1, [r2, #4]
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	8113      	strh	r3, [r2, #8]
 80011e0:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	711a      	strb	r2, [r3, #4]
 80011ea:	2301      	movs	r3, #1
 80011ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80011f0:	2312      	movs	r3, #18
 80011f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80011fc:	237f      	movs	r3, #127	; 0x7f
 80011fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001202:	2305      	movs	r3, #5
 8001204:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8001208:	2301      	movs	r3, #1
 800120a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800120e:	4aae      	ldr	r2, [pc, #696]	; (80014c8 <main+0x344>)
 8001210:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001214:	6810      	ldr	r0, [r2, #0]
 8001216:	6018      	str	r0, [r3, #0]
 8001218:	8892      	ldrh	r2, [r2, #4]
 800121a:	809a      	strh	r2, [r3, #4]
 800121c:	f107 0349 	add.w	r3, r7, #73	; 0x49
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	721a      	strb	r2, [r3, #8]
 8001228:	2302      	movs	r3, #2
 800122a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 800122e:	2313      	movs	r3, #19
 8001230:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8001234:	230c      	movs	r3, #12
 8001236:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800123a:	237f      	movs	r3, #127	; 0x7f
 800123c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8001240:	2301      	movs	r3, #1
 8001242:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001246:	230b      	movs	r3, #11
 8001248:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800124c:	2301      	movs	r3, #1
 800124e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8001252:	2301      	movs	r3, #1
 8001254:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8001258:	4a9c      	ldr	r2, [pc, #624]	; (80014cc <main+0x348>)
 800125a:	f107 0363 	add.w	r3, r7, #99	; 0x63
 800125e:	6810      	ldr	r0, [r2, #0]
 8001260:	6018      	str	r0, [r3, #0]
 8001262:	8892      	ldrh	r2, [r2, #4]
 8001264:	809a      	strh	r2, [r3, #4]
 8001266:	f107 0369 	add.w	r3, r7, #105	; 0x69
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	721a      	strb	r2, [r3, #8]
 8001272:	2303      	movs	r3, #3
 8001274:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8001278:	2314      	movs	r3, #20
 800127a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 800127e:	230c      	movs	r3, #12
 8001280:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001284:	230b      	movs	r3, #11
 8001286:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 800128a:	2301      	movs	r3, #1
 800128c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
            { .init_value = 127, .row = 0, .col = 1, .label = "Resonance", .channel = 1, .cc = 18, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 0 },
            { .init_value = 5, .row = 1, .col = 0, .label = "Osc 0", .channel = 2, .cc = 19, .value = 0, .max_values = 12, .max_range = 127, .isLocked = 1 },
            { .init_value = 11, .row = 1, .col = 1, .label = "Osc 1", .channel = 3, .cc = 20, .value = 0, .max_values = 12, .max_range = 11, .isLocked = 1 } };

    for (int i = 2; i < 4; i++) {
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001296:	e0c4      	b.n	8001422 <main+0x29e>
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012a2:	4413      	add	r3, r2
 80012a4:	3b6d      	subs	r3, #109	; 0x6d
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4613      	mov	r3, r2
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	1a9b      	subs	r3, r3, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f008 f8a1 	bl	80093f8 <malloc>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012be:	015b      	lsls	r3, r3, #5
 80012c0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80012c4:	440b      	add	r3, r1
 80012c6:	3b74      	subs	r3, #116	; 0x74
 80012c8:	601a      	str	r2, [r3, #0]
        strncpy(knobs[i].sub_labels[0], "MultiSaw", MAX_LABEL_CHARS);
 80012ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012ce:	015b      	lsls	r3, r3, #5
 80012d0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012d4:	4413      	add	r3, r2
 80012d6:	3b74      	subs	r3, #116	; 0x74
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	220e      	movs	r2, #14
 80012dc:	497c      	ldr	r1, [pc, #496]	; (80014d0 <main+0x34c>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f008 f9fe 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[1], "TriWrap", MAX_LABEL_CHARS);
 80012e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012e8:	015b      	lsls	r3, r3, #5
 80012ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012ee:	4413      	add	r3, r2
 80012f0:	3b74      	subs	r3, #116	; 0x74
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	330f      	adds	r3, #15
 80012f6:	220e      	movs	r2, #14
 80012f8:	4976      	ldr	r1, [pc, #472]	; (80014d4 <main+0x350>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f008 f9f0 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[2], "Noise", MAX_LABEL_CHARS);
 8001300:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001304:	015b      	lsls	r3, r3, #5
 8001306:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800130a:	4413      	add	r3, r2
 800130c:	3b74      	subs	r3, #116	; 0x74
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	331e      	adds	r3, #30
 8001312:	220e      	movs	r2, #14
 8001314:	4970      	ldr	r1, [pc, #448]	; (80014d8 <main+0x354>)
 8001316:	4618      	mov	r0, r3
 8001318:	f008 f9e2 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[3], "Feedback", MAX_LABEL_CHARS);
 800131c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001326:	4413      	add	r3, r2
 8001328:	3b74      	subs	r3, #116	; 0x74
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	332d      	adds	r3, #45	; 0x2d
 800132e:	220e      	movs	r2, #14
 8001330:	496a      	ldr	r1, [pc, #424]	; (80014dc <main+0x358>)
 8001332:	4618      	mov	r0, r3
 8001334:	f008 f9d4 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[4], "Pulse", MAX_LABEL_CHARS);
 8001338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800133c:	015b      	lsls	r3, r3, #5
 800133e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001342:	4413      	add	r3, r2
 8001344:	3b74      	subs	r3, #116	; 0x74
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	333c      	adds	r3, #60	; 0x3c
 800134a:	220e      	movs	r2, #14
 800134c:	4964      	ldr	r1, [pc, #400]	; (80014e0 <main+0x35c>)
 800134e:	4618      	mov	r0, r3
 8001350:	f008 f9c6 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[5], "Saw", MAX_LABEL_CHARS);
 8001354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800135e:	4413      	add	r3, r2
 8001360:	3b74      	subs	r3, #116	; 0x74
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	334b      	adds	r3, #75	; 0x4b
 8001366:	220e      	movs	r2, #14
 8001368:	495e      	ldr	r1, [pc, #376]	; (80014e4 <main+0x360>)
 800136a:	4618      	mov	r0, r3
 800136c:	f008 f9b8 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[6], "Triangle", MAX_LABEL_CHARS);
 8001370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001374:	015b      	lsls	r3, r3, #5
 8001376:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800137a:	4413      	add	r3, r2
 800137c:	3b74      	subs	r3, #116	; 0x74
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	335a      	adds	r3, #90	; 0x5a
 8001382:	220e      	movs	r2, #14
 8001384:	4958      	ldr	r1, [pc, #352]	; (80014e8 <main+0x364>)
 8001386:	4618      	mov	r0, r3
 8001388:	f008 f9aa 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[7], "Pulse5", MAX_LABEL_CHARS);
 800138c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001390:	015b      	lsls	r3, r3, #5
 8001392:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001396:	4413      	add	r3, r2
 8001398:	3b74      	subs	r3, #116	; 0x74
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3369      	adds	r3, #105	; 0x69
 800139e:	220e      	movs	r2, #14
 80013a0:	4952      	ldr	r1, [pc, #328]	; (80014ec <main+0x368>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f008 f99c 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[8], "Pulse6", MAX_LABEL_CHARS);
 80013a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013b2:	4413      	add	r3, r2
 80013b4:	3b74      	subs	r3, #116	; 0x74
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3378      	adds	r3, #120	; 0x78
 80013ba:	220e      	movs	r2, #14
 80013bc:	494c      	ldr	r1, [pc, #304]	; (80014f0 <main+0x36c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f008 f98e 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[9], "Pulse7", MAX_LABEL_CHARS);
 80013c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013c8:	015b      	lsls	r3, r3, #5
 80013ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013ce:	4413      	add	r3, r2
 80013d0:	3b74      	subs	r3, #116	; 0x74
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3387      	adds	r3, #135	; 0x87
 80013d6:	220e      	movs	r2, #14
 80013d8:	4946      	ldr	r1, [pc, #280]	; (80014f4 <main+0x370>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f008 f980 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[10], "Pulse8", MAX_LABEL_CHARS);
 80013e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013e4:	015b      	lsls	r3, r3, #5
 80013e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013ea:	4413      	add	r3, r2
 80013ec:	3b74      	subs	r3, #116	; 0x74
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3396      	adds	r3, #150	; 0x96
 80013f2:	220e      	movs	r2, #14
 80013f4:	4940      	ldr	r1, [pc, #256]	; (80014f8 <main+0x374>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f008 f972 	bl	80096e0 <strncpy>
        strncpy(knobs[i].sub_labels[11], "Pulse9", MAX_LABEL_CHARS);
 80013fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001400:	015b      	lsls	r3, r3, #5
 8001402:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001406:	4413      	add	r3, r2
 8001408:	3b74      	subs	r3, #116	; 0x74
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	33a5      	adds	r3, #165	; 0xa5
 800140e:	220e      	movs	r2, #14
 8001410:	493a      	ldr	r1, [pc, #232]	; (80014fc <main+0x378>)
 8001412:	4618      	mov	r0, r3
 8001414:	f008 f964 	bl	80096e0 <strncpy>
    for (int i = 2; i < 4; i++) {
 8001418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800141c:	3301      	adds	r3, #1
 800141e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001426:	2b03      	cmp	r3, #3
 8001428:	f77f af36 	ble.w	8001298 <main+0x114>
    }

    knobs[0].sub_labels = malloc(sizeof(*knobs[0].sub_labels));
 800142c:	200f      	movs	r0, #15
 800142e:	f007 ffe3 	bl	80093f8 <malloc>
 8001432:	4603      	mov	r3, r0
 8001434:	617b      	str	r3, [r7, #20]
    strncpy(knobs[0].sub_labels[0], "Filter 1", MAX_LABEL_CHARS);
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	220e      	movs	r2, #14
 800143a:	4931      	ldr	r1, [pc, #196]	; (8001500 <main+0x37c>)
 800143c:	4618      	mov	r0, r3
 800143e:	f008 f94f 	bl	80096e0 <strncpy>

    knobs[1].sub_labels = malloc(sizeof(*knobs[1].sub_labels));
 8001442:	200f      	movs	r0, #15
 8001444:	f007 ffd8 	bl	80093f8 <malloc>
 8001448:	4603      	mov	r3, r0
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
    strncpy(knobs[1].sub_labels[0], "Filter 2", MAX_LABEL_CHARS);
 800144c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144e:	220e      	movs	r2, #14
 8001450:	492c      	ldr	r1, [pc, #176]	; (8001504 <main+0x380>)
 8001452:	4618      	mov	r0, r3
 8001454:	f008 f944 	bl	80096e0 <strncpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001458:	f001 f90a 	bl	8002670 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145c:	f000 f8d0 	bl	8001600 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001460:	f000 f9f8 	bl	8001854 <MX_GPIO_Init>
  MX_RTC_Init();
 8001464:	f000 f9d0 	bl	8001808 <MX_RTC_Init>
  MX_ADC1_Init();
 8001468:	f000 f94c 	bl	8001704 <MX_ADC1_Init>
  MX_I2C1_Init();
 800146c:	f000 f99e 	bl	80017ac <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001470:	f007 fb06 	bl	8008a80 <MX_USB_DEVICE_Init>
  //MX_SDIO_SD_Init();
  /* USER CODE BEGIN 2 */
    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800147a:	e017      	b.n	80014ac <main+0x328>
        ssd1306_Init(&hi2c1, &knobs[i]);
 800147c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001480:	463a      	mov	r2, r7
 8001482:	015b      	lsls	r3, r3, #5
 8001484:	4413      	add	r3, r2
 8001486:	4619      	mov	r1, r3
 8001488:	481f      	ldr	r0, [pc, #124]	; (8001508 <main+0x384>)
 800148a:	f000 fa35 	bl	80018f8 <ssd1306_Init>
        ssd1306_WriteKnob(&hi2c1, &knobs[i], 0);
 800148e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001492:	463a      	mov	r2, r7
 8001494:	015b      	lsls	r3, r3, #5
 8001496:	4413      	add	r3, r2
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	481a      	ldr	r0, [pc, #104]	; (8001508 <main+0x384>)
 800149e:	f000 fba7 	bl	8001bf0 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80014a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014a6:	3301      	adds	r3, #1
 80014a8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80014ac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d9e3      	bls.n	800147c <main+0x2f8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
        ADC_Read_Knobs();
 80014b4:	f7ff fd46 	bl	8000f44 <ADC_Read_Knobs>

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80014be:	e096      	b.n	80015ee <main+0x46a>
 80014c0:	0800a558 	.word	0x0800a558
 80014c4:	0800a568 	.word	0x0800a568
 80014c8:	0800a578 	.word	0x0800a578
 80014cc:	0800a588 	.word	0x0800a588
 80014d0:	0800a4d8 	.word	0x0800a4d8
 80014d4:	0800a4e4 	.word	0x0800a4e4
 80014d8:	0800a4ec 	.word	0x0800a4ec
 80014dc:	0800a4f4 	.word	0x0800a4f4
 80014e0:	0800a500 	.word	0x0800a500
 80014e4:	0800a508 	.word	0x0800a508
 80014e8:	0800a50c 	.word	0x0800a50c
 80014ec:	0800a518 	.word	0x0800a518
 80014f0:	0800a520 	.word	0x0800a520
 80014f4:	0800a528 	.word	0x0800a528
 80014f8:	0800a530 	.word	0x0800a530
 80014fc:	0800a538 	.word	0x0800a538
 8001500:	0800a540 	.word	0x0800a540
 8001504:	0800a54c 	.word	0x0800a54c
 8001508:	200021a0 	.word	0x200021a0
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 800150c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001510:	463a      	mov	r2, r7
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	441a      	add	r2, r3
 8001516:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800151a:	4937      	ldr	r1, [pc, #220]	; (80015f8 <main+0x474>)
 800151c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	4610      	mov	r0, r2
 8001526:	f7ff fd91 	bl	800104c <MIDI_Scale_And_Filter>
 800152a:	4603      	mov	r3, r0
 800152c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

            if (curr_MIDI_val != knobs[i].value) {
 8001530:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001534:	015b      	lsls	r3, r3, #5
 8001536:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800153a:	4413      	add	r3, r2
 800153c:	3b6e      	subs	r3, #110	; 0x6e
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8001544:	429a      	cmp	r2, r3
 8001546:	d04d      	beq.n	80015e4 <main+0x460>
                knobs[i].value = curr_MIDI_val;
 8001548:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800154c:	015b      	lsls	r3, r3, #5
 800154e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001552:	4413      	add	r3, r2
 8001554:	3b6e      	subs	r3, #110	; 0x6e
 8001556:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 800155a:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&hi2c1, &knobs[i], adcAveraged[i]);
 800155c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001560:	463a      	mov	r2, r7
 8001562:	015b      	lsls	r3, r3, #5
 8001564:	18d1      	adds	r1, r2, r3
 8001566:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800156a:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <main+0x474>)
 800156c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001570:	461a      	mov	r2, r3
 8001572:	4822      	ldr	r0, [pc, #136]	; (80015fc <main+0x478>)
 8001574:	f000 fb3c 	bl	8001bf0 <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 8001578:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800157c:	015b      	lsls	r3, r3, #5
 800157e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001582:	4413      	add	r3, r2
 8001584:	3b6e      	subs	r3, #110	; 0x6e
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800158c:	015b      	lsls	r3, r3, #5
 800158e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001592:	440b      	add	r3, r1
 8001594:	3b88      	subs	r3, #136	; 0x88
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d108      	bne.n	80015ae <main+0x42a>
 800159c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80015a0:	015b      	lsls	r3, r3, #5
 80015a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015a6:	4413      	add	r3, r2
 80015a8:	3b6b      	subs	r3, #107	; 0x6b
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80015ae:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015b8:	4413      	add	r3, r2
 80015ba:	3b6b      	subs	r3, #107	; 0x6b
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d110      	bne.n	80015e4 <main+0x460>
 80015c2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80015c6:	463a      	mov	r2, r7
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	441a      	add	r2, r3
 80015cc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80015d0:	015b      	lsls	r3, r3, #5
 80015d2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80015d6:	440b      	add	r3, r1
 80015d8:	3b6e      	subs	r3, #110	; 0x6e
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4610      	mov	r0, r2
 80015e0:	f7ff fd18 	bl	8001014 <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80015e4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80015e8:	3301      	adds	r3, #1
 80015ea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80015ee:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d98a      	bls.n	800150c <main+0x388>
        ADC_Read_Knobs();
 80015f6:	e75d      	b.n	80014b4 <main+0x330>
 80015f8:	200001ac 	.word	0x200001ac
 80015fc:	200021a0 	.word	0x200021a0

08001600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09a      	sub	sp, #104	; 0x68
 8001604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001606:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800160a:	2230      	movs	r2, #48	; 0x30
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f007 fefa 	bl	8009408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <SystemClock_Config+0xfc>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <SystemClock_Config+0xfc>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <SystemClock_Config+0xfc>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <SystemClock_Config+0x100>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a29      	ldr	r2, [pc, #164]	; (8001700 <SystemClock_Config+0x100>)
 800165c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <SystemClock_Config+0x100>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800166e:	2309      	movs	r3, #9
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001678:	2301      	movs	r3, #1
 800167a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001680:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001684:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001686:	2319      	movs	r3, #25
 8001688:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800168a:	23c0      	movs	r3, #192	; 0xc0
 800168c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168e:	2302      	movs	r3, #2
 8001690:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001692:	2304      	movs	r3, #4
 8001694:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fe64 	bl	8005368 <HAL_RCC_OscConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80016a6:	f000 f90b 	bl	80018c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	230f      	movs	r3, #15
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	2103      	movs	r1, #3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 f8c6 	bl	8005858 <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80016d2:	f000 f8f5 	bl	80018c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016d6:	2302      	movs	r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fa73 	bl	8005bd0 <HAL_RCCEx_PeriphCLKConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80016f0:	f000 f8e6 	bl	80018c0 <Error_Handler>
  }
}
 80016f4:	bf00      	nop
 80016f6:	3768      	adds	r7, #104	; 0x68
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <MX_ADC1_Init+0x9c>)
 8001718:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <MX_ADC1_Init+0xa0>)
 800171a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <MX_ADC1_Init+0x9c>)
 800171e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_ADC1_Init+0x9c>)
 8001726:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800172a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_ADC1_Init+0x9c>)
 800172e:	2201      	movs	r2, #1
 8001730:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_ADC1_Init+0x9c>)
 8001734:	2201      	movs	r2, #1
 8001736:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_ADC1_Init+0x9c>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_ADC1_Init+0x9c>)
 8001742:	2200      	movs	r2, #0
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_ADC1_Init+0x9c>)
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <MX_ADC1_Init+0xa4>)
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_ADC1_Init+0x9c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <MX_ADC1_Init+0x9c>)
 8001754:	2201      	movs	r2, #1
 8001756:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_ADC1_Init+0x9c>)
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_ADC1_Init+0x9c>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <MX_ADC1_Init+0x9c>)
 8001768:	f001 f818 	bl	800279c <HAL_ADC_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001772:	f000 f8a5 	bl	80018c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800177a:	2301      	movs	r3, #1
 800177c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_ADC1_Init+0x9c>)
 8001788:	f001 f9cc 	bl	8002b24 <HAL_ADC_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001792:	f000 f895 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20002214 	.word	0x20002214
 80017a4:	40012000 	.word	0x40012000
 80017a8:	0f000001 	.word	0x0f000001

080017ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_I2C1_Init+0x50>)
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <MX_I2C1_Init+0x54>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_I2C1_Init+0x50>)
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_I2C1_Init+0x58>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_I2C1_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_I2C1_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_I2C1_Init+0x50>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <MX_I2C1_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_I2C1_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_I2C1_Init+0x50>)
 80017ea:	f001 fe5f 	bl	80034ac <HAL_I2C_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017f4:	f000 f864 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200021a0 	.word	0x200021a0
 8001800:	40005400 	.word	0x40005400
 8001804:	00061a80 	.word	0x00061a80

08001808 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_RTC_Init+0x44>)
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <MX_RTC_Init+0x48>)
 8001810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_RTC_Init+0x44>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_RTC_Init+0x44>)
 800181a:	227f      	movs	r2, #127	; 0x7f
 800181c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_RTC_Init+0x44>)
 8001820:	22ff      	movs	r2, #255	; 0xff
 8001822:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_RTC_Init+0x44>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_RTC_Init+0x44>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_RTC_Init+0x44>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_RTC_Init+0x44>)
 8001838:	f004 faba 	bl	8005db0 <HAL_RTC_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001842:	f000 f83d 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000225c 	.word	0x2000225c
 8001850:	40002800 	.word	0x40002800

08001854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_GPIO_Init+0x68>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a16      	ldr	r2, [pc, #88]	; (80018bc <MX_GPIO_Init+0x68>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_GPIO_Init+0x68>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_GPIO_Init+0x68>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <MX_GPIO_Init+0x68>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <MX_GPIO_Init+0x68>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_GPIO_Init+0x68>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <MX_GPIO_Init+0x68>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_GPIO_Init+0x68>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80018c8:	e7fe      	b.n	80018c8 <Error_Handler+0x8>

080018ca <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af04      	add	r7, sp, #16
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80018d6:	230a      	movs	r3, #10
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	2301      	movs	r3, #1
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	1cfb      	adds	r3, r7, #3
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2301      	movs	r3, #1
 80018e4:	2200      	movs	r2, #0
 80018e6:	2178      	movs	r1, #120	; 0x78
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f002 f821 	bl	8003930 <HAL_I2C_Mem_Write>
 80018ee:	4603      	mov	r3, r0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, Knob *k) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001902:	2064      	movs	r0, #100	; 0x64
 8001904:	f000 ff26 	bl	8002754 <HAL_Delay>
    int status = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(hi2c, k);
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fbdc 	bl	80020cc <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001914:	21ae      	movs	r1, #174	; 0xae
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffd7 	bl	80018ca <ssd1306_WriteCommand>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001926:	2120      	movs	r1, #32
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffce 	bl	80018ca <ssd1306_WriteCommand>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10); // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001938:	2110      	movs	r1, #16
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffc5 	bl	80018ca <ssd1306_WriteCommand>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800194a:	21b0      	movs	r1, #176	; 0xb0
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ffbc 	bl	80018ca <ssd1306_WriteCommand>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800195c:	21c8      	movs	r1, #200	; 0xc8
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffb3 	bl	80018ca <ssd1306_WriteCommand>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ffaa 	bl	80018ca <ssd1306_WriteCommand>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4413      	add	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001980:	2110      	movs	r1, #16
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa1 	bl	80018ca <ssd1306_WriteCommand>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001992:	2140      	movs	r1, #64	; 0x40
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff98 	bl	80018ca <ssd1306_WriteCommand>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4413      	add	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80019a4:	2181      	movs	r1, #129	; 0x81
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff8f 	bl	80018ca <ssd1306_WriteCommand>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 80019b6:	2140      	movs	r1, #64	; 0x40
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff86 	bl	80018ca <ssd1306_WriteCommand>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80019c8:	21a1      	movs	r1, #161	; 0xa1
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff7d 	bl	80018ca <ssd1306_WriteCommand>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80019da:	21a6      	movs	r1, #166	; 0xa6
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff74 	bl	80018ca <ssd1306_WriteCommand>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80019ec:	21a8      	movs	r1, #168	; 0xa8
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff6b 	bl	80018ca <ssd1306_WriteCommand>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80019fe:	213f      	movs	r1, #63	; 0x3f
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff62 	bl	80018ca <ssd1306_WriteCommand>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a10:	21a4      	movs	r1, #164	; 0xa4
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff59 	bl	80018ca <ssd1306_WriteCommand>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001a22:	21d3      	movs	r1, #211	; 0xd3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff50 	bl	80018ca <ssd1306_WriteCommand>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001a34:	2100      	movs	r1, #0
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff47 	bl	80018ca <ssd1306_WriteCommand>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001a46:	21d5      	movs	r1, #213	; 0xd5
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff3e 	bl	80018ca <ssd1306_WriteCommand>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4413      	add	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001a58:	21f0      	movs	r1, #240	; 0xf0
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ff35 	bl	80018ca <ssd1306_WriteCommand>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001a6a:	21d9      	movs	r1, #217	; 0xd9
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff2c 	bl	80018ca <ssd1306_WriteCommand>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4413      	add	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001a7c:	2122      	movs	r1, #34	; 0x22
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff23 	bl	80018ca <ssd1306_WriteCommand>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001a8e:	21da      	movs	r1, #218	; 0xda
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff1a 	bl	80018ca <ssd1306_WriteCommand>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001aa0:	2112      	movs	r1, #18
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff11 	bl	80018ca <ssd1306_WriteCommand>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001ab2:	21db      	movs	r1, #219	; 0xdb
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff08 	bl	80018ca <ssd1306_WriteCommand>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff feff 	bl	80018ca <ssd1306_WriteCommand>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001ad6:	218d      	movs	r1, #141	; 0x8d
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fef6 	bl	80018ca <ssd1306_WriteCommand>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001ae8:	2114      	movs	r1, #20
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff feed 	bl	80018ca <ssd1306_WriteCommand>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001afa:	21af      	movs	r1, #175	; 0xaf
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fee4 	bl	80018ca <ssd1306_WriteCommand>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <ssd1306_Init+0x21e>
        return 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <ssd1306_Init+0x23e>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f814 	bl	8001b44 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f835 	bl	8001b8c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <ssd1306_Init+0x248>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <ssd1306_Init+0x248>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <ssd1306_Init+0x248>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	715a      	strb	r2, [r3, #5]

    return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200005b4 	.word	0x200005b4

08001b44 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e00d      	b.n	8001b70 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <ssd1306_Fill+0x1a>
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	e000      	b.n	8001b60 <ssd1306_Fill+0x1c>
 8001b5e:	21ff      	movs	r1, #255	; 0xff
 8001b60:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <ssd1306_Fill+0x44>)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	460a      	mov	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b76:	d3ed      	bcc.n	8001b54 <ssd1306_Fill+0x10>
    }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200001b4 	.word	0x200001b4

08001b8c <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e020      	b.n	8001bdc <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	3b50      	subs	r3, #80	; 0x50
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fe91 	bl	80018ca <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe8d 	bl	80018ca <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fe89 	bl	80018ca <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	01db      	lsls	r3, r3, #7
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <ssd1306_UpdateScreen+0x60>)
 8001bbe:	4413      	add	r3, r2
 8001bc0:	2264      	movs	r2, #100	; 0x64
 8001bc2:	9202      	str	r2, [sp, #8]
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	9201      	str	r2, [sp, #4]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	2178      	movs	r1, #120	; 0x78
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f001 fead 	bl	8003930 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b07      	cmp	r3, #7
 8001be0:	d9db      	bls.n	8001b9a <ssd1306_UpdateScreen+0xe>
    }
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200001b4 	.word	0x200001b4

08001bf0 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob *k, uint16_t adc) {
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b08d      	sub	sp, #52	; 0x34
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	80fb      	strh	r3, [r7, #6]
    ssd1306_Select(hi2c, k);
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 fa63 	bl	80020cc <ssd1306_Select>
    ssd1306_Fill(Black);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff ff9c 	bl	8001b44 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001c0c:	4b9a      	ldr	r3, [pc, #616]	; (8001e78 <ssd1306_WriteKnob+0x288>)
 8001c0e:	f107 0414 	add.w	r4, r7, #20
 8001c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel + 1);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	7e1b      	ldrb	r3, [r3, #24]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001c22:	4a96      	ldr	r2, [pc, #600]	; (8001e7c <ssd1306_WriteKnob+0x28c>)
 8001c24:	2103      	movs	r1, #3
 8001c26:	f007 fd27 	bl	8009678 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	7e5b      	ldrb	r3, [r3, #25]
 8001c2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001c32:	4a93      	ldr	r2, [pc, #588]	; (8001e80 <ssd1306_WriteKnob+0x290>)
 8001c34:	2104      	movs	r1, #4
 8001c36:	f007 fd1f 	bl	8009678 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe face 	bl	80001e0 <strlen>
 8001c44:	4604      	mov	r4, r0
 8001c46:	68b8      	ldr	r0, [r7, #8]
 8001c48:	f000 fa78 	bl	800213c <update_init_indicator>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f107 0014 	add.w	r0, r7, #20
 8001c52:	4a8c      	ldr	r2, [pc, #560]	; (8001e84 <ssd1306_WriteKnob+0x294>)
 8001c54:	4621      	mov	r1, r4
 8001c56:	f007 fd0f 	bl	8009678 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) KnobMap(k, k->value, k->max_range));
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	7e99      	ldrb	r1, [r3, #26]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	7f1b      	ldrb	r3, [r3, #28]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f7ff f955 	bl	8000f14 <KnobMap>
 8001c6a:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8001c6c:	f107 0010 	add.w	r0, r7, #16
 8001c70:	4a83      	ldr	r2, [pc, #524]	; (8001e80 <ssd1306_WriteKnob+0x290>)
 8001c72:	2104      	movs	r1, #4
 8001c74:	f007 fd00 	bl	8009678 <sniprintf>

    ssd1306_SetCursor(0, 0);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 fa0e 	bl	800209c <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8001c80:	4a81      	ldr	r2, [pc, #516]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001c82:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001c86:	2301      	movs	r3, #1
 8001c88:	ca06      	ldmia	r2, {r1, r2}
 8001c8a:	f000 f9e1 	bl	8002050 <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8001c8e:	4b7e      	ldr	r3, [pc, #504]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4619      	mov	r1, r3
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f000 f9ff 	bl	800209c <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8001c9e:	4a7a      	ldr	r2, [pc, #488]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001ca0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	ca06      	ldmia	r2, {r1, r2}
 8001ca8:	f000 f9d2 	bl	8002050 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fa95 	bl	80001e0 <strlen>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a73      	ldr	r2, [pc, #460]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001cba:	7812      	ldrb	r2, [r2, #0]
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	b2d8      	uxtb	r0, r3
 8001cc8:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	0fda      	lsrs	r2, r3, #31
 8001cd0:	4413      	add	r3, r2
 8001cd2:	105b      	asrs	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f000 f9e0 	bl	800209c <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8001cdc:	4a6a      	ldr	r2, [pc, #424]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001cde:	f107 0014 	add.w	r0, r7, #20
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	ca06      	ldmia	r2, {r1, r2}
 8001ce6:	f000 f9b3 	bl	8002050 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	f1c3 0320 	rsb	r3, r3, #32
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b2d8      	uxtb	r0, r3
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	3301      	adds	r3, #1
 8001d02:	0fda      	lsrs	r2, r3, #31
 8001d04:	4413      	add	r3, r2
 8001d06:	105b      	asrs	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f000 f9c6 	bl	800209c <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8001d10:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001d12:	f107 0010 	add.w	r0, r7, #16
 8001d16:	2301      	movs	r3, #1
 8001d18:	ca06      	ldmia	r2, {r1, r2}
 8001d1a:	f000 f999 	bl	8002050 <ssd1306_WriteString>

    uint8_t len_label = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t y = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t y_remaining = SSD1306_WIDTH - (NumFont_5x7.FontHeight + 1);
 8001d30:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <ssd1306_WriteKnob+0x298>)
 8001d32:	785b      	ldrb	r3, [r3, #1]
 8001d34:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001d38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Draw main label
    len_label = strlen(k->label);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fa4d 	bl	80001e0 <strlen>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001d4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d50:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <ssd1306_WriteKnob+0x29c>)
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d5c:	0fda      	lsrs	r2, r3, #31
 8001d5e:	4413      	add	r3, r2
 8001d60:	105b      	asrs	r3, r3, #1
 8001d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    y = (float) y_remaining / 3;
 8001d66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d72:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d7e:	edc7 7a00 	vstr	s15, [r7]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    if (len_label % 2 != 0) x += 5;
 8001d88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <ssd1306_WriteKnob+0x1b0>
 8001d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d9a:	3305      	adds	r3, #5
 8001d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ssd1306_SetCursor(x, 16);
 8001da0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001da4:	2110      	movs	r1, #16
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f978 	bl	800209c <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1cd8      	adds	r0, r3, #3
 8001db0:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <ssd1306_WriteKnob+0x29c>)
 8001db2:	2301      	movs	r3, #1
 8001db4:	ca06      	ldmia	r2, {r1, r2}
 8001db6:	f000 f94b 	bl	8002050 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	7edb      	ldrb	r3, [r3, #27]
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db02      	blt.n	8001dca <ssd1306_WriteKnob+0x1da>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	7e9b      	ldrb	r3, [r3, #26]
 8001dc8:	e000      	b.n	8001dcc <ssd1306_WriteKnob+0x1dc>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    len_label = strlen(k->sub_labels[sl_index]);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	6959      	ldr	r1, [r3, #20]
 8001dd4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001dd8:	4613      	mov	r3, r2
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe f9fd 	bl	80001e0 <strlen>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001dec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <ssd1306_WriteKnob+0x29c>)
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001dfc:	0fda      	lsrs	r2, r3, #31
 8001dfe:	4413      	add	r3, r2
 8001e00:	105b      	asrs	r3, r3, #1
 8001e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    y = (float) 2 * y_remaining / 3;
 8001e06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e12:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e16:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e22:	edc7 7a00 	vstr	s15, [r7]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    if (len_label % 2 != 0) x += 5;
 8001e2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <ssd1306_WriteKnob+0x254>
 8001e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e3e:	3305      	adds	r3, #5
 8001e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ssd1306_SetCursor(x, 40);
 8001e44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e48:	2128      	movs	r1, #40	; 0x28
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f926 	bl	800209c <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	6959      	ldr	r1, [r3, #20]
 8001e54:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	18c8      	adds	r0, r1, r3
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <ssd1306_WriteKnob+0x29c>)
 8001e62:	2301      	movs	r3, #1
 8001e64:	ca06      	ldmia	r2, {r1, r2}
 8001e66:	f000 f8f3 	bl	8002050 <ssd1306_WriteString>

    ssd1306_UpdateScreen(hi2c);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff fe8e 	bl	8001b8c <ssd1306_UpdateScreen>
}
 8001e70:	bf00      	nop
 8001e72:	3734      	adds	r7, #52	; 0x34
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	0800a5ac 	.word	0x0800a5ac
 8001e7c:	0800a598 	.word	0x0800a598
 8001e80:	0800a5a0 	.word	0x0800a5a0
 8001e84:	0800a5a8 	.word	0x0800a5a8
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000008 	.word	0x20000008

08001e90 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	71bb      	strb	r3, [r7, #6]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db48      	blt.n	8001f3c <ssd1306_DrawPixel+0xac>
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	2b3f      	cmp	r3, #63	; 0x3f
 8001eae:	d845      	bhi.n	8001f3c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <ssd1306_DrawPixel+0xb8>)
 8001eb2:	791b      	ldrb	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8001eb8:	797b      	ldrb	r3, [r7, #5]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf0c      	ite	eq
 8001ebe:	2301      	moveq	r3, #1
 8001ec0:	2300      	movne	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 8001ec6:	797b      	ldrb	r3, [r7, #5]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d11a      	bne.n	8001f02 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ecc:	79fa      	ldrb	r2, [r7, #7]
 8001ece:	79bb      	ldrb	r3, [r7, #6]
 8001ed0:	08db      	lsrs	r3, r3, #3
 8001ed2:	b2d8      	uxtb	r0, r3
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	01db      	lsls	r3, r3, #7
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <ssd1306_DrawPixel+0xbc>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	b25a      	sxtb	r2, r3
 8001ee0:	79bb      	ldrb	r3, [r7, #6]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	b25b      	sxtb	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b259      	sxtb	r1, r3
 8001ef2:	79fa      	ldrb	r2, [r7, #7]
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	01db      	lsls	r3, r3, #7
 8001ef8:	4413      	add	r3, r2
 8001efa:	b2c9      	uxtb	r1, r1
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <ssd1306_DrawPixel+0xbc>)
 8001efe:	54d1      	strb	r1, [r2, r3]
 8001f00:	e01d      	b.n	8001f3e <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f02:	79fa      	ldrb	r2, [r7, #7]
 8001f04:	79bb      	ldrb	r3, [r7, #6]
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	01db      	lsls	r3, r3, #7
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <ssd1306_DrawPixel+0xbc>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	b25a      	sxtb	r2, r3
 8001f16:	79bb      	ldrb	r3, [r7, #6]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b259      	sxtb	r1, r3
 8001f2c:	79fa      	ldrb	r2, [r7, #7]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	01db      	lsls	r3, r3, #7
 8001f32:	4413      	add	r3, r2
 8001f34:	b2c9      	uxtb	r1, r1
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <ssd1306_DrawPixel+0xbc>)
 8001f38:	54d1      	strb	r1, [r2, r3]
 8001f3a:	e000      	b.n	8001f3e <ssd1306_DrawPixel+0xae>
        return;
 8001f3c:	bf00      	nop
    }
}
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	200005b4 	.word	0x200005b4
 8001f4c:	200001b4 	.word	0x200001b4

08001f50 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4604      	mov	r4, r0
 8001f58:	1d38      	adds	r0, r7, #4
 8001f5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4623      	mov	r3, r4
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	4613      	mov	r3, r2
 8001f66:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001f68:	4b38      	ldr	r3, [pc, #224]	; (800204c <ssd1306_WriteChar+0xfc>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	793b      	ldrb	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	2b7f      	cmp	r3, #127	; 0x7f
 8001f74:	dc06      	bgt.n	8001f84 <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 8001f76:	4b35      	ldr	r3, [pc, #212]	; (800204c <ssd1306_WriteChar+0xfc>)
 8001f78:	885b      	ldrh	r3, [r3, #2]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	797b      	ldrb	r3, [r7, #5]
 8001f7e:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001f80:	2b3f      	cmp	r3, #63	; 0x3f
 8001f82:	dd01      	ble.n	8001f88 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e05d      	b.n	8002044 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
 8001f8c:	e04c      	b.n	8002028 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	3b20      	subs	r3, #32
 8001f94:	7979      	ldrb	r1, [r7, #5]
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	e034      	b.n	8002018 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <ssd1306_WriteChar+0xfc>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	b2d8      	uxtb	r0, r3
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <ssd1306_WriteChar+0xfc>)
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	7bba      	ldrb	r2, [r7, #14]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7ff ff57 	bl	8001e90 <ssd1306_DrawPixel>
 8001fe2:	e016      	b.n	8002012 <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <ssd1306_WriteChar+0xfc>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2d8      	uxtb	r0, r3
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <ssd1306_WriteChar+0xfc>)
 8001ff4:	885b      	ldrh	r3, [r3, #2]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b2d9      	uxtb	r1, r3
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	f7ff ff3f 	bl	8001e90 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	3301      	adds	r3, #1
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	793b      	ldrb	r3, [r7, #4]
 800201a:	461a      	mov	r2, r3
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	4293      	cmp	r3, r2
 8002020:	d3c5      	bcc.n	8001fae <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	797b      	ldrb	r3, [r7, #5]
 800202a:	461a      	mov	r2, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4293      	cmp	r3, r2
 8002030:	d3ad      	bcc.n	8001f8e <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <ssd1306_WriteChar+0xfc>)
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	793b      	ldrb	r3, [r7, #4]
 8002038:	b29b      	uxth	r3, r3
 800203a:	4413      	add	r3, r2
 800203c:	b29a      	uxth	r2, r3
 800203e:	4b03      	ldr	r3, [pc, #12]	; (800204c <ssd1306_WriteChar+0xfc>)
 8002040:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3724      	adds	r7, #36	; 0x24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}
 800204c:	200005b4 	.word	0x200005b4

08002050 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	1d38      	adds	r0, r7, #4
 800205a:	e880 0006 	stmia.w	r0, {r1, r2}
 800205e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002060:	e012      	b.n	8002088 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	7818      	ldrb	r0, [r3, #0]
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	1d3a      	adds	r2, r7, #4
 800206a:	ca06      	ldmia	r2, {r1, r2}
 800206c:	f7ff ff70 	bl	8001f50 <ssd1306_WriteChar>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d002      	beq.n	8002082 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	e008      	b.n	8002094 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e8      	bne.n	8002062 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	781b      	ldrb	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	460a      	mov	r2, r1
 80020a6:	71fb      	strb	r3, [r7, #7]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <ssd1306_SetCursor+0x2c>)
 80020b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020b4:	79bb      	ldrb	r3, [r7, #6]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <ssd1306_SetCursor+0x2c>)
 80020ba:	805a      	strh	r2, [r3, #2]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	200005b4 	.word	0x200005b4

080020cc <ssd1306_Select>:

// Select a display
void ssd1306_Select(I2C_HandleTypeDef *hi2c, Knob *k) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
    i2c_Select(hi2c, I2C_MUX_MASTER_ADDR, k->row);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	785b      	ldrb	r3, [r3, #1]
 80020da:	461a      	mov	r2, r3
 80020dc:	21e2      	movs	r1, #226	; 0xe2
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f80b 	bl	80020fa <i2c_Select>
    i2c_Select(hi2c, I2C_MUX_SLAVE_ADDR, k->col);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	789b      	ldrb	r3, [r3, #2]
 80020e8:	461a      	mov	r2, r3
 80020ea:	21e0      	movs	r1, #224	; 0xe0
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f804 	bl	80020fa <i2c_Select>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(I2C_HandleTypeDef *hi2c, uint8_t mux_addr, uint8_t i) {
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af02      	add	r7, sp, #8
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	70fb      	strb	r3, [r7, #3]
 8002106:	4613      	mov	r3, r2
 8002108:	70bb      	strb	r3, [r7, #2]
    if (i > 7) return;
 800210a:	78bb      	ldrb	r3, [r7, #2]
 800210c:	2b07      	cmp	r3, #7
 800210e:	d810      	bhi.n	8002132 <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 8002110:	78bb      	ldrb	r3, [r7, #2]
 8002112:	2201      	movs	r2, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(hi2c, mux_addr, temp, 1, 100);
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	b299      	uxth	r1, r3
 8002120:	f107 020c 	add.w	r2, r7, #12
 8002124:	2364      	movs	r3, #100	; 0x64
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2301      	movs	r3, #1
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f001 fb02 	bl	8003734 <HAL_I2C_Master_Transmit>
 8002130:	e000      	b.n	8002134 <i2c_Select+0x3a>
    if (i > 7) return;
 8002132:	bf00      	nop
}
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    int8_t init_diff = KnobMap(k, k->init_value, MIDI_MAX) - KnobMap(k, k->value, MIDI_MAX);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	227f      	movs	r2, #127	; 0x7f
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7fe fee1 	bl	8000f14 <KnobMap>
 8002152:	4603      	mov	r3, r0
 8002154:	461c      	mov	r4, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7e9b      	ldrb	r3, [r3, #26]
 800215a:	227f      	movs	r2, #127	; 0x7f
 800215c:	4619      	mov	r1, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fed8 	bl	8000f14 <KnobMap>
 8002164:	4603      	mov	r3, r0
 8002166:	1ae3      	subs	r3, r4, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 800216c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	bfb8      	it	lt
 8002174:	425b      	neglt	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	ee07 3a90 	vmov	s15, r3
 800217c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002180:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800226c <update_init_indicator+0x130>
 8002184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002188:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002270 <update_init_indicator+0x134>
 800218c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002194:	edc7 7a00 	vstr	s15, [r7]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 800219c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <update_init_indicator+0x6c>
 80021a4:	4b33      	ldr	r3, [pc, #204]	; (8002274 <update_init_indicator+0x138>)
 80021a6:	e05c      	b.n	8002262 <update_init_indicator+0x126>

    if (init_pct < 15) {
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	2b0e      	cmp	r3, #14
 80021ac:	d807      	bhi.n	80021be <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	dd01      	ble.n	80021ba <update_init_indicator+0x7e>
 80021b6:	4b30      	ldr	r3, [pc, #192]	; (8002278 <update_init_indicator+0x13c>)
 80021b8:	e053      	b.n	8002262 <update_init_indicator+0x126>
        else return "        <      ";
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <update_init_indicator+0x140>)
 80021bc:	e051      	b.n	8002262 <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 80021be:	7bbb      	ldrb	r3, [r7, #14]
 80021c0:	2b0e      	cmp	r3, #14
 80021c2:	d90a      	bls.n	80021da <update_init_indicator+0x9e>
 80021c4:	7bbb      	ldrb	r3, [r7, #14]
 80021c6:	2b1d      	cmp	r3, #29
 80021c8:	d807      	bhi.n	80021da <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	dd01      	ble.n	80021d6 <update_init_indicator+0x9a>
 80021d2:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <update_init_indicator+0x144>)
 80021d4:	e045      	b.n	8002262 <update_init_indicator+0x126>
        else return "        <<     ";
 80021d6:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <update_init_indicator+0x148>)
 80021d8:	e043      	b.n	8002262 <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 80021da:	7bbb      	ldrb	r3, [r7, #14]
 80021dc:	2b1d      	cmp	r3, #29
 80021de:	d90a      	bls.n	80021f6 <update_init_indicator+0xba>
 80021e0:	7bbb      	ldrb	r3, [r7, #14]
 80021e2:	2b2c      	cmp	r3, #44	; 0x2c
 80021e4:	d807      	bhi.n	80021f6 <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	dd01      	ble.n	80021f2 <update_init_indicator+0xb6>
 80021ee:	4b26      	ldr	r3, [pc, #152]	; (8002288 <update_init_indicator+0x14c>)
 80021f0:	e037      	b.n	8002262 <update_init_indicator+0x126>
        else return "        <<<    ";
 80021f2:	4b26      	ldr	r3, [pc, #152]	; (800228c <update_init_indicator+0x150>)
 80021f4:	e035      	b.n	8002262 <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 80021f6:	7bbb      	ldrb	r3, [r7, #14]
 80021f8:	2b2c      	cmp	r3, #44	; 0x2c
 80021fa:	d90a      	bls.n	8002212 <update_init_indicator+0xd6>
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	2b3c      	cmp	r3, #60	; 0x3c
 8002200:	d807      	bhi.n	8002212 <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	dd01      	ble.n	800220e <update_init_indicator+0xd2>
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <update_init_indicator+0x154>)
 800220c:	e029      	b.n	8002262 <update_init_indicator+0x126>
        else return "        <<<<   ";
 800220e:	4b21      	ldr	r3, [pc, #132]	; (8002294 <update_init_indicator+0x158>)
 8002210:	e027      	b.n	8002262 <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 8002212:	7bbb      	ldrb	r3, [r7, #14]
 8002214:	2b3c      	cmp	r3, #60	; 0x3c
 8002216:	d90a      	bls.n	800222e <update_init_indicator+0xf2>
 8002218:	7bbb      	ldrb	r3, [r7, #14]
 800221a:	2b4c      	cmp	r3, #76	; 0x4c
 800221c:	d807      	bhi.n	800222e <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	dd01      	ble.n	800222a <update_init_indicator+0xee>
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <update_init_indicator+0x15c>)
 8002228:	e01b      	b.n	8002262 <update_init_indicator+0x126>
        else return "        <<<<<  ";
 800222a:	4b1c      	ldr	r3, [pc, #112]	; (800229c <update_init_indicator+0x160>)
 800222c:	e019      	b.n	8002262 <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 800222e:	7bbb      	ldrb	r3, [r7, #14]
 8002230:	2b4c      	cmp	r3, #76	; 0x4c
 8002232:	d90a      	bls.n	800224a <update_init_indicator+0x10e>
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	2b5c      	cmp	r3, #92	; 0x5c
 8002238:	d807      	bhi.n	800224a <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	dd01      	ble.n	8002246 <update_init_indicator+0x10a>
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <update_init_indicator+0x164>)
 8002244:	e00d      	b.n	8002262 <update_init_indicator+0x126>
        else return "        <<<<<< ";
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <update_init_indicator+0x168>)
 8002248:	e00b      	b.n	8002262 <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 800224a:	7bbb      	ldrb	r3, [r7, #14]
 800224c:	2b5c      	cmp	r3, #92	; 0x5c
 800224e:	d907      	bls.n	8002260 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 8002250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002254:	2b00      	cmp	r3, #0
 8002256:	dd01      	ble.n	800225c <update_init_indicator+0x120>
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <update_init_indicator+0x16c>)
 800225a:	e002      	b.n	8002262 <update_init_indicator+0x126>
        else return "        <<<<<<<";
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <update_init_indicator+0x170>)
 800225e:	e000      	b.n	8002262 <update_init_indicator+0x126>
    } else {
        return " ";
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <update_init_indicator+0x174>)
    }
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}
 800226a:	bf00      	nop
 800226c:	42fe0000 	.word	0x42fe0000
 8002270:	42c80000 	.word	0x42c80000
 8002274:	0800a5ac 	.word	0x0800a5ac
 8002278:	0800a5bc 	.word	0x0800a5bc
 800227c:	0800a5cc 	.word	0x0800a5cc
 8002280:	0800a5dc 	.word	0x0800a5dc
 8002284:	0800a5ec 	.word	0x0800a5ec
 8002288:	0800a5fc 	.word	0x0800a5fc
 800228c:	0800a60c 	.word	0x0800a60c
 8002290:	0800a61c 	.word	0x0800a61c
 8002294:	0800a62c 	.word	0x0800a62c
 8002298:	0800a63c 	.word	0x0800a63c
 800229c:	0800a64c 	.word	0x0800a64c
 80022a0:	0800a65c 	.word	0x0800a65c
 80022a4:	0800a66c 	.word	0x0800a66c
 80022a8:	0800a67c 	.word	0x0800a67c
 80022ac:	0800a68c 	.word	0x0800a68c
 80022b0:	0800a69c 	.word	0x0800a69c

080022b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_MspInit+0x4c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <HAL_MspInit+0x4c>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_MspInit+0x4c>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_MspInit+0x4c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <HAL_MspInit+0x4c>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_MspInit+0x4c>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800

08002304 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a17      	ldr	r2, [pc, #92]	; (8002380 <HAL_ADC_MspInit+0x7c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d127      	bne.n	8002376 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_ADC_MspInit+0x80>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a15      	ldr	r2, [pc, #84]	; (8002384 <HAL_ADC_MspInit+0x80>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_ADC_MspInit+0x80>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_ADC_MspInit+0x80>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_ADC_MspInit+0x80>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_ADC_MspInit+0x80>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800235e:	230f      	movs	r3, #15
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002362:	2303      	movs	r3, #3
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_ADC_MspInit+0x84>)
 8002372:	f000 ff17 	bl	80031a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40012000 	.word	0x40012000
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000

0800238c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_I2C_MspInit+0x84>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d12b      	bne.n	8002406 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023ca:	23c0      	movs	r3, #192	; 0xc0
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ce:	2312      	movs	r3, #18
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023da:	2304      	movs	r3, #4
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <HAL_I2C_MspInit+0x8c>)
 80023e6:	f000 fedd 	bl	80031a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_I2C_MspInit+0x88>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40005400 	.word	0x40005400
 8002414:	40023800 	.word	0x40023800
 8002418:	40020400 	.word	0x40020400

0800241c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a05      	ldr	r2, [pc, #20]	; (8002440 <HAL_RTC_MspInit+0x24>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d102      	bne.n	8002434 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RTC_MspInit+0x28>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40002800 	.word	0x40002800
 8002444:	42470e3c 	.word	0x42470e3c

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800244c:	e7fe      	b.n	800244c <NMI_Handler+0x4>

0800244e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <HardFault_Handler+0x4>

08002454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <MemManage_Handler+0x4>

0800245a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <UsageFault_Handler+0x4>

08002466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002494:	f000 f93e 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <OTG_FS_IRQHandler+0x10>)
 80024a2:	f001 ff2e 	bl	8004302 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200027d4 	.word	0x200027d4

080024b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e00a      	b.n	80024d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024c2:	f3af 8000 	nop.w
 80024c6:	4601      	mov	r1, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	60ba      	str	r2, [r7, #8]
 80024ce:	b2ca      	uxtb	r2, r1
 80024d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	dbf0      	blt.n	80024c2 <_read+0x12>
	}

return len;
 80024e0:	687b      	ldr	r3, [r7, #4]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e009      	b.n	8002510 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	60ba      	str	r2, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	dbf1      	blt.n	80024fc <_write+0x12>
	}
	return len;
 8002518:	687b      	ldr	r3, [r7, #4]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_close>:

int _close(int file)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
	return -1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254a:	605a      	str	r2, [r3, #4]
	return 0;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_isatty>:

int _isatty(int file)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
	return 1;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <_sbrk+0x5c>)
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <_sbrk+0x60>)
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_sbrk+0x64>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <_sbrk+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d207      	bcs.n	80025cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025bc:	f006 fef2 	bl	80093a4 <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	220c      	movs	r2, #12
 80025c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e009      	b.n	80025e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <_sbrk+0x64>)
 80025dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20020000 	.word	0x20020000
 80025ec:	00000400 	.word	0x00000400
 80025f0:	200005bc 	.word	0x200005bc
 80025f4:	20002bf0 	.word	0x20002bf0

080025f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SystemInit+0x20>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SystemInit+0x20>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800261c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002620:	480d      	ldr	r0, [pc, #52]	; (8002658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002622:	490e      	ldr	r1, [pc, #56]	; (800265c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002628:	e002      	b.n	8002630 <LoopCopyDataInit>

0800262a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800262c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262e:	3304      	adds	r3, #4

08002630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002634:	d3f9      	bcc.n	800262a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002638:	4c0b      	ldr	r4, [pc, #44]	; (8002668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800263c:	e001      	b.n	8002642 <LoopFillZerobss>

0800263e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002640:	3204      	adds	r2, #4

08002642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002644:	d3fb      	bcc.n	800263e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002646:	f7ff ffd7 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264a:	f006 feb1 	bl	80093b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264e:	f7fe fd99 	bl	8001184 <main>
  bx  lr    
 8002652:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800265c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002660:	0800ba78 	.word	0x0800ba78
  ldr r2, =_sbss
 8002664:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002668:	20002bec 	.word	0x20002bec

0800266c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC_IRQHandler>
	...

08002670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <HAL_Init+0x40>)
 800267a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_Init+0x40>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_Init+0x40>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f000 fd41 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 f808 	bl	80026b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a4:	f7ff fe06 	bl	80022b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x54>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_InitTick+0x58>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fd59 	bl	800318a <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00e      	b.n	8002700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d80a      	bhi.n	80026fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e8:	2200      	movs	r2, #0
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f000 fd21 	bl	8003136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_InitTick+0x5c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000020 	.word	0x20000020
 800270c:	20000028 	.word	0x20000028
 8002710:	20000024 	.word	0x20000024

08002714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_IncTick+0x20>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_IncTick+0x24>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_IncTick+0x24>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000028 	.word	0x20000028
 8002738:	20002300 	.word	0x20002300

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_GetTick+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20002300 	.word	0x20002300

08002754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff ffee 	bl	800273c <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d005      	beq.n	800277a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_Delay+0x44>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277a:	bf00      	nop
 800277c:	f7ff ffde 	bl	800273c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	429a      	cmp	r2, r3
 800278a:	d8f7      	bhi.n	800277c <HAL_Delay+0x28>
  {
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000028 	.word	0x20000028

0800279c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e033      	b.n	800281a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fda2 	bl	8002304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d118      	bne.n	800280c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027e2:	f023 0302 	bic.w	r3, r3, #2
 80027e6:	f043 0202 	orr.w	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 faca 	bl	8002d88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f023 0303 	bic.w	r3, r3, #3
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
 800280a:	e001      	b.n	8002810 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADC_Start+0x1a>
 800283a:	2302      	movs	r3, #2
 800283c:	e097      	b.n	800296e <HAL_ADC_Start+0x14a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d018      	beq.n	8002886 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002864:	4b45      	ldr	r3, [pc, #276]	; (800297c <HAL_ADC_Start+0x158>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a45      	ldr	r2, [pc, #276]	; (8002980 <HAL_ADC_Start+0x15c>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0c9a      	lsrs	r2, r3, #18
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002878:	e002      	b.n	8002880 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3b01      	subs	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f9      	bne.n	800287a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d15f      	bne.n	8002954 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d2:	d106      	bne.n	80028e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	f023 0206 	bic.w	r2, r3, #6
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	645a      	str	r2, [r3, #68]	; 0x44
 80028e0:	e002      	b.n	80028e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_ADC_Start+0x160>)
 80028f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10f      	bne.n	800292a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d129      	bne.n	800296c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	e020      	b.n	800296c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a16      	ldr	r2, [pc, #88]	; (8002988 <HAL_ADC_Start+0x164>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d11b      	bne.n	800296c <HAL_ADC_Start+0x148>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d114      	bne.n	800296c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	e00b      	b.n	800296c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f043 0210 	orr.w	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000020 	.word	0x20000020
 8002980:	431bde83 	.word	0x431bde83
 8002984:	40012300 	.word	0x40012300
 8002988:	40012000 	.word	0x40012000

0800298c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Stop+0x16>
 800299e:	2302      	movs	r3, #2
 80029a0:	e021      	b.n	80029e6 <HAL_ADC_Stop+0x5a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d113      	bne.n	8002a38 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1e:	d10b      	bne.n	8002a38 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e063      	b.n	8002b00 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002a38:	f7ff fe80 	bl	800273c <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a3e:	e021      	b.n	8002a84 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d01d      	beq.n	8002a84 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_ADC_PollForConversion+0x6c>
 8002a4e:	f7ff fe75 	bl	800273c <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d212      	bcs.n	8002a84 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d00b      	beq.n	8002a84 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e03d      	b.n	8002b00 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d1d6      	bne.n	8002a40 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f06f 0212 	mvn.w	r2, #18
 8002a9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d123      	bne.n	8002afe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11f      	bne.n	8002afe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d111      	bne.n	8002afe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d105      	bne.n	8002afe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1c>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e113      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x244>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b09      	cmp	r3, #9
 8002b4e:	d925      	bls.n	8002b9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68d9      	ldr	r1, [r3, #12]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	3b1e      	subs	r3, #30
 8002b66:	2207      	movs	r2, #7
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	400a      	ands	r2, r1
 8002b74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68d9      	ldr	r1, [r3, #12]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4403      	add	r3, r0
 8002b8e:	3b1e      	subs	r3, #30
 8002b90:	409a      	lsls	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	e022      	b.n	8002be2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6919      	ldr	r1, [r3, #16]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6919      	ldr	r1, [r3, #16]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4403      	add	r3, r0
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d824      	bhi.n	8002c34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b05      	subs	r3, #5
 8002bfc:	221f      	movs	r2, #31
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	400a      	ands	r2, r1
 8002c0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b05      	subs	r3, #5
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34
 8002c32:	e04c      	b.n	8002cce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d824      	bhi.n	8002c86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b23      	subs	r3, #35	; 0x23
 8002c4e:	221f      	movs	r2, #31
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43da      	mvns	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	3b23      	subs	r3, #35	; 0x23
 8002c78:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
 8002c84:	e023      	b.n	8002cce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	3b41      	subs	r3, #65	; 0x41
 8002c98:	221f      	movs	r2, #31
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b41      	subs	r3, #65	; 0x41
 8002cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cce:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_ADC_ConfigChannel+0x250>)
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a28      	ldr	r2, [pc, #160]	; (8002d78 <HAL_ADC_ConfigChannel+0x254>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d10f      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x1d8>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b12      	cmp	r3, #18
 8002ce2:	d10b      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <HAL_ADC_ConfigChannel+0x254>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d12b      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x23a>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <HAL_ADC_ConfigChannel+0x258>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <HAL_ADC_ConfigChannel+0x1f4>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b11      	cmp	r3, #17
 8002d16:	d122      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_ADC_ConfigChannel+0x258>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d111      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_ADC_ConfigChannel+0x25c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <HAL_ADC_ConfigChannel+0x260>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	0c9a      	lsrs	r2, r3, #18
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d50:	e002      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f9      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012300 	.word	0x40012300
 8002d78:	40012000 	.word	0x40012000
 8002d7c:	10000012 	.word	0x10000012
 8002d80:	20000020 	.word	0x20000020
 8002d84:	431bde83 	.word	0x431bde83

08002d88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d90:	4b79      	ldr	r3, [pc, #484]	; (8002f78 <ADC_Init+0x1f0>)
 8002d92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	021a      	lsls	r2, r3, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6899      	ldr	r1, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	4a58      	ldr	r2, [pc, #352]	; (8002f7c <ADC_Init+0x1f4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d022      	beq.n	8002e66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6899      	ldr	r1, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	e00f      	b.n	8002e86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0202 	bic.w	r2, r2, #2
 8002e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6899      	ldr	r1, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ea0:	005a      	lsls	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01b      	beq.n	8002eec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ed2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	035a      	lsls	r2, r3, #13
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	e007      	b.n	8002efc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	051a      	lsls	r2, r3, #20
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6899      	ldr	r1, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f3e:	025a      	lsls	r2, r3, #9
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6899      	ldr	r1, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	029a      	lsls	r2, r3, #10
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40012300 	.word	0x40012300
 8002f7c:	0f000001 	.word	0x0f000001

08002f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb2:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	60d3      	str	r3, [r2, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 0307 	and.w	r3, r3, #7
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	db0b      	blt.n	800300e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4907      	ldr	r1, [pc, #28]	; (800301c <__NVIC_EnableIRQ+0x38>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2001      	movs	r0, #1
 8003006:	fa00 f202 	lsl.w	r2, r0, r2
 800300a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	e000e100 	.word	0xe000e100

08003020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	2b00      	cmp	r3, #0
 8003032:	db0a      	blt.n	800304a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	490c      	ldr	r1, [pc, #48]	; (800306c <__NVIC_SetPriority+0x4c>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	440b      	add	r3, r1
 8003044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003048:	e00a      	b.n	8003060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4908      	ldr	r1, [pc, #32]	; (8003070 <__NVIC_SetPriority+0x50>)
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3b04      	subs	r3, #4
 8003058:	0112      	lsls	r2, r2, #4
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	440b      	add	r3, r1
 800305e:	761a      	strb	r2, [r3, #24]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f1c3 0307 	rsb	r3, r3, #7
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf28      	it	cs
 8003092:	2304      	movcs	r3, #4
 8003094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3304      	adds	r3, #4
 800309a:	2b06      	cmp	r3, #6
 800309c:	d902      	bls.n	80030a4 <NVIC_EncodePriority+0x30>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3b03      	subs	r3, #3
 80030a2:	e000      	b.n	80030a6 <NVIC_EncodePriority+0x32>
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	f04f 32ff 	mov.w	r2, #4294967295
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	401a      	ands	r2, r3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030bc:	f04f 31ff 	mov.w	r1, #4294967295
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43d9      	mvns	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	4313      	orrs	r3, r2
         );
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ec:	d301      	bcc.n	80030f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00f      	b.n	8003112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <SysTick_Config+0x40>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fa:	210f      	movs	r1, #15
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f7ff ff8e 	bl	8003020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <SysTick_Config+0x40>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <SysTick_Config+0x40>)
 800310c:	2207      	movs	r2, #7
 800310e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000e010 	.word	0xe000e010

08003120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff29 	bl	8002f80 <__NVIC_SetPriorityGrouping>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003148:	f7ff ff3e 	bl	8002fc8 <__NVIC_GetPriorityGrouping>
 800314c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f7ff ff8e 	bl	8003074 <NVIC_EncodePriority>
 8003158:	4602      	mov	r2, r0
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff5d 	bl	8003020 <__NVIC_SetPriority>
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff31 	bl	8002fe4 <__NVIC_EnableIRQ>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ffa2 	bl	80030dc <SysTick_Config>
 8003198:	4603      	mov	r3, r0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e159      	b.n	8003474 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	f040 8148 	bne.w	800346e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d005      	beq.n	80031f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d130      	bne.n	8003258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 0201 	and.w	r2, r3, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b03      	cmp	r3, #3
 8003262:	d017      	beq.n	8003294 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d123      	bne.n	80032e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	08da      	lsrs	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3208      	adds	r2, #8
 80032a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	220f      	movs	r2, #15
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	08da      	lsrs	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3208      	adds	r2, #8
 80032e2:	69b9      	ldr	r1, [r7, #24]
 80032e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2203      	movs	r2, #3
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0203 	and.w	r2, r3, #3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a2 	beq.w	800346e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	4b57      	ldr	r3, [pc, #348]	; (800348c <HAL_GPIO_Init+0x2e8>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	4a56      	ldr	r2, [pc, #344]	; (800348c <HAL_GPIO_Init+0x2e8>)
 8003334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003338:	6453      	str	r3, [r2, #68]	; 0x44
 800333a:	4b54      	ldr	r3, [pc, #336]	; (800348c <HAL_GPIO_Init+0x2e8>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003346:	4a52      	ldr	r2, [pc, #328]	; (8003490 <HAL_GPIO_Init+0x2ec>)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a49      	ldr	r2, [pc, #292]	; (8003494 <HAL_GPIO_Init+0x2f0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d019      	beq.n	80033a6 <HAL_GPIO_Init+0x202>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a48      	ldr	r2, [pc, #288]	; (8003498 <HAL_GPIO_Init+0x2f4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_GPIO_Init+0x1fe>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a47      	ldr	r2, [pc, #284]	; (800349c <HAL_GPIO_Init+0x2f8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00d      	beq.n	800339e <HAL_GPIO_Init+0x1fa>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a46      	ldr	r2, [pc, #280]	; (80034a0 <HAL_GPIO_Init+0x2fc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <HAL_GPIO_Init+0x1f6>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a45      	ldr	r2, [pc, #276]	; (80034a4 <HAL_GPIO_Init+0x300>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_GPIO_Init+0x1f2>
 8003392:	2304      	movs	r3, #4
 8003394:	e008      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 8003396:	2307      	movs	r3, #7
 8003398:	e006      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 800339a:	2303      	movs	r3, #3
 800339c:	e004      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 800339e:	2302      	movs	r3, #2
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 80033a6:	2300      	movs	r3, #0
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f002 0203 	and.w	r2, r2, #3
 80033ae:	0092      	lsls	r2, r2, #2
 80033b0:	4093      	lsls	r3, r2
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b8:	4935      	ldr	r1, [pc, #212]	; (8003490 <HAL_GPIO_Init+0x2ec>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c6:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <HAL_GPIO_Init+0x304>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ea:	4a2f      	ldr	r2, [pc, #188]	; (80034a8 <HAL_GPIO_Init+0x304>)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033f0:	4b2d      	ldr	r3, [pc, #180]	; (80034a8 <HAL_GPIO_Init+0x304>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003414:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <HAL_GPIO_Init+0x304>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_GPIO_Init+0x304>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800343e:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <HAL_GPIO_Init+0x304>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003444:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <HAL_GPIO_Init+0x304>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003468:	4a0f      	ldr	r2, [pc, #60]	; (80034a8 <HAL_GPIO_Init+0x304>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3301      	adds	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	f67f aea2 	bls.w	80031c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40013800 	.word	0x40013800
 8003494:	40020000 	.word	0x40020000
 8003498:	40020400 	.word	0x40020400
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020c00 	.word	0x40020c00
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40013c00 	.word	0x40013c00

080034ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e12b      	b.n	8003716 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fe ff5a 	bl	800238c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800350e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003510:	f002 fb4a 	bl	8005ba8 <HAL_RCC_GetPCLK1Freq>
 8003514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4a81      	ldr	r2, [pc, #516]	; (8003720 <HAL_I2C_Init+0x274>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d807      	bhi.n	8003530 <HAL_I2C_Init+0x84>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a80      	ldr	r2, [pc, #512]	; (8003724 <HAL_I2C_Init+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	bf94      	ite	ls
 8003528:	2301      	movls	r3, #1
 800352a:	2300      	movhi	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e006      	b.n	800353e <HAL_I2C_Init+0x92>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a7d      	ldr	r2, [pc, #500]	; (8003728 <HAL_I2C_Init+0x27c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	bf94      	ite	ls
 8003538:	2301      	movls	r3, #1
 800353a:	2300      	movhi	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e0e7      	b.n	8003716 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a78      	ldr	r2, [pc, #480]	; (800372c <HAL_I2C_Init+0x280>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0c9b      	lsrs	r3, r3, #18
 8003550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a6a      	ldr	r2, [pc, #424]	; (8003720 <HAL_I2C_Init+0x274>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d802      	bhi.n	8003580 <HAL_I2C_Init+0xd4>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3301      	adds	r3, #1
 800357e:	e009      	b.n	8003594 <HAL_I2C_Init+0xe8>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	4a69      	ldr	r2, [pc, #420]	; (8003730 <HAL_I2C_Init+0x284>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	3301      	adds	r3, #1
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	495c      	ldr	r1, [pc, #368]	; (8003720 <HAL_I2C_Init+0x274>)
 80035b0:	428b      	cmp	r3, r1
 80035b2:	d819      	bhi.n	80035e8 <HAL_I2C_Init+0x13c>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e59      	subs	r1, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c2:	1c59      	adds	r1, r3, #1
 80035c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035c8:	400b      	ands	r3, r1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_I2C_Init+0x138>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1e59      	subs	r1, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e2:	e051      	b.n	8003688 <HAL_I2C_Init+0x1dc>
 80035e4:	2304      	movs	r3, #4
 80035e6:	e04f      	b.n	8003688 <HAL_I2C_Init+0x1dc>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d111      	bne.n	8003614 <HAL_I2C_Init+0x168>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1e58      	subs	r0, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	440b      	add	r3, r1
 80035fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003602:	3301      	adds	r3, #1
 8003604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e012      	b.n	800363a <HAL_I2C_Init+0x18e>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	0099      	lsls	r1, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	fbb0 f3f3 	udiv	r3, r0, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Init+0x196>
 800363e:	2301      	movs	r3, #1
 8003640:	e022      	b.n	8003688 <HAL_I2C_Init+0x1dc>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10e      	bne.n	8003668 <HAL_I2C_Init+0x1bc>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1e58      	subs	r0, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6859      	ldr	r1, [r3, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	440b      	add	r3, r1
 8003658:	fbb0 f3f3 	udiv	r3, r0, r3
 800365c:	3301      	adds	r3, #1
 800365e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003666:	e00f      	b.n	8003688 <HAL_I2C_Init+0x1dc>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1e58      	subs	r0, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	0099      	lsls	r1, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	fbb0 f3f3 	udiv	r3, r0, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	6809      	ldr	r1, [r1, #0]
 800368c:	4313      	orrs	r3, r2
 800368e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6911      	ldr	r1, [r2, #16]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68d2      	ldr	r2, [r2, #12]
 80036c2:	4311      	orrs	r1, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	000186a0 	.word	0x000186a0
 8003724:	001e847f 	.word	0x001e847f
 8003728:	003d08ff 	.word	0x003d08ff
 800372c:	431bde83 	.word	0x431bde83
 8003730:	10624dd3 	.word	0x10624dd3

08003734 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	461a      	mov	r2, r3
 8003740:	460b      	mov	r3, r1
 8003742:	817b      	strh	r3, [r7, #10]
 8003744:	4613      	mov	r3, r2
 8003746:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003748:	f7fe fff8 	bl	800273c <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b20      	cmp	r3, #32
 8003758:	f040 80e0 	bne.w	800391c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2319      	movs	r3, #25
 8003762:	2201      	movs	r2, #1
 8003764:	4970      	ldr	r1, [pc, #448]	; (8003928 <HAL_I2C_Master_Transmit+0x1f4>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 faf4 	bl	8003d54 <I2C_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	e0d3      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_I2C_Master_Transmit+0x50>
 8003780:	2302      	movs	r3, #2
 8003782:	e0cc      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d007      	beq.n	80037aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2221      	movs	r2, #33	; 0x21
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2210      	movs	r2, #16
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	893a      	ldrh	r2, [r7, #8]
 80037da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a50      	ldr	r2, [pc, #320]	; (800392c <HAL_I2C_Master_Transmit+0x1f8>)
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037ec:	8979      	ldrh	r1, [r7, #10]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f996 	bl	8003b24 <I2C_MasterRequestWrite>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e08d      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003818:	e066      	b.n	80038e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	6a39      	ldr	r1, [r7, #32]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fb6e 	bl	8003f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	2b04      	cmp	r3, #4
 8003830:	d107      	bne.n	8003842 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e06b      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d11b      	bne.n	80038bc <HAL_I2C_Master_Transmit+0x188>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	d017      	beq.n	80038bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	6a39      	ldr	r1, [r7, #32]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fb5e 	bl	8003f82 <I2C_WaitOnBTFFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00d      	beq.n	80038e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d107      	bne.n	80038e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e01a      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d194      	bne.n	800381a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	00100002 	.word	0x00100002
 800392c:	ffff0000 	.word	0xffff0000

08003930 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4603      	mov	r3, r0
 8003940:	817b      	strh	r3, [r7, #10]
 8003942:	460b      	mov	r3, r1
 8003944:	813b      	strh	r3, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394a:	f7fe fef7 	bl	800273c <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	f040 80d9 	bne.w	8003b10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2319      	movs	r3, #25
 8003964:	2201      	movs	r2, #1
 8003966:	496d      	ldr	r1, [pc, #436]	; (8003b1c <HAL_I2C_Mem_Write+0x1ec>)
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f9f3 	bl	8003d54 <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
 8003976:	e0cc      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Mem_Write+0x56>
 8003982:	2302      	movs	r3, #2
 8003984:	e0c5      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d007      	beq.n	80039ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2221      	movs	r2, #33	; 0x21
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2240      	movs	r2, #64	; 0x40
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a3a      	ldr	r2, [r7, #32]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a4d      	ldr	r2, [pc, #308]	; (8003b20 <HAL_I2C_Mem_Write+0x1f0>)
 80039ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ee:	88f8      	ldrh	r0, [r7, #6]
 80039f0:	893a      	ldrh	r2, [r7, #8]
 80039f2:	8979      	ldrh	r1, [r7, #10]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	4603      	mov	r3, r0
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f912 	bl	8003c28 <I2C_RequestMemoryWrite>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d052      	beq.n	8003ab0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e081      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fa74 	bl	8003f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d107      	bne.n	8003a36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06b      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11b      	bne.n	8003ab0 <HAL_I2C_Mem_Write+0x180>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d017      	beq.n	8003ab0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1aa      	bne.n	8003a0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fa60 	bl	8003f82 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d107      	bne.n	8003ae0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e016      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	00100002 	.word	0x00100002
 8003b20:	ffff0000 	.word	0xffff0000

08003b24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	460b      	mov	r3, r1
 8003b32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d006      	beq.n	8003b4e <I2C_MasterRequestWrite+0x2a>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d003      	beq.n	8003b4e <I2C_MasterRequestWrite+0x2a>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b4c:	d108      	bne.n	8003b60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e00b      	b.n	8003b78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	2b12      	cmp	r3, #18
 8003b66:	d107      	bne.n	8003b78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f8e5 	bl	8003d54 <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9e:	d103      	bne.n	8003ba8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e035      	b.n	8003c18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb4:	d108      	bne.n	8003bc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bb6:	897b      	ldrh	r3, [r7, #10]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bc4:	611a      	str	r2, [r3, #16]
 8003bc6:	e01b      	b.n	8003c00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bc8:	897b      	ldrh	r3, [r7, #10]
 8003bca:	11db      	asrs	r3, r3, #7
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f003 0306 	and.w	r3, r3, #6
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f063 030f 	orn	r3, r3, #15
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	490e      	ldr	r1, [pc, #56]	; (8003c20 <I2C_MasterRequestWrite+0xfc>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f90b 	bl	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e010      	b.n	8003c18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4907      	ldr	r1, [pc, #28]	; (8003c24 <I2C_MasterRequestWrite+0x100>)
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f8fb 	bl	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	00010008 	.word	0x00010008
 8003c24:	00010002 	.word	0x00010002

08003c28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	4608      	mov	r0, r1
 8003c32:	4611      	mov	r1, r2
 8003c34:	461a      	mov	r2, r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	817b      	strh	r3, [r7, #10]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	813b      	strh	r3, [r7, #8]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f878 	bl	8003d54 <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c78:	d103      	bne.n	8003c82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e05f      	b.n	8003d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c86:	897b      	ldrh	r3, [r7, #10]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	6a3a      	ldr	r2, [r7, #32]
 8003c9a:	492d      	ldr	r1, [pc, #180]	; (8003d50 <I2C_RequestMemoryWrite+0x128>)
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f8b0 	bl	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e04c      	b.n	8003d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc4:	6a39      	ldr	r1, [r7, #32]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f91a 	bl	8003f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d107      	bne.n	8003cea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e02b      	b.n	8003d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cee:	88fb      	ldrh	r3, [r7, #6]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf4:	893b      	ldrh	r3, [r7, #8]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	611a      	str	r2, [r3, #16]
 8003cfe:	e021      	b.n	8003d44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d00:	893b      	ldrh	r3, [r7, #8]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d10:	6a39      	ldr	r1, [r7, #32]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f8f4 	bl	8003f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d107      	bne.n	8003d36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e005      	b.n	8003d46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d3a:	893b      	ldrh	r3, [r7, #8]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	00010002 	.word	0x00010002

08003d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d64:	e025      	b.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d021      	beq.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6e:	f7fe fce5 	bl	800273c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d302      	bcc.n	8003d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d116      	bne.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e023      	b.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d10d      	bne.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf0c      	ite	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	2300      	movne	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	e00c      	b.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	43da      	mvns	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4013      	ands	r3, r2
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d0b6      	beq.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e10:	e051      	b.n	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e20:	d123      	bne.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0204 	orr.w	r2, r3, #4
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e046      	b.n	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d021      	beq.n	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e72:	f7fe fc63 	bl	800273c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d302      	bcc.n	8003e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d116      	bne.n	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f043 0220 	orr.w	r2, r3, #32
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e020      	b.n	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	0c1b      	lsrs	r3, r3, #16
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d10c      	bne.n	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	e00b      	b.n	8003ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	2300      	moveq	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d18d      	bne.n	8003e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f0c:	e02d      	b.n	8003f6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f878 	bl	8004004 <I2C_IsAcknowledgeFailed>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e02d      	b.n	8003f7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d021      	beq.n	8003f6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7fe fc09 	bl	800273c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d116      	bne.n	8003f6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e007      	b.n	8003f7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b80      	cmp	r3, #128	; 0x80
 8003f76:	d1ca      	bne.n	8003f0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f8e:	e02d      	b.n	8003fec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f837 	bl	8004004 <I2C_IsAcknowledgeFailed>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e02d      	b.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa6:	d021      	beq.n	8003fec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa8:	f7fe fbc8 	bl	800273c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d302      	bcc.n	8003fbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e007      	b.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d1ca      	bne.n	8003f90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401a:	d11b      	bne.n	8004054 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004024:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f043 0204 	orr.w	r2, r3, #4
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004064:	b08f      	sub	sp, #60	; 0x3c
 8004066:	af0a      	add	r7, sp, #40	; 0x28
 8004068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e10f      	b.n	8004294 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f004 fe88 	bl	8008da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2203      	movs	r2, #3
 8004098:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f002 f875 	bl	80061a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	687e      	ldr	r6, [r7, #4]
 80040c0:	466d      	mov	r5, sp
 80040c2:	f106 0410 	add.w	r4, r6, #16
 80040c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80040d6:	1d33      	adds	r3, r6, #4
 80040d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040da:	6838      	ldr	r0, [r7, #0]
 80040dc:	f001 ff4d 	bl	8005f7a <USB_CoreInit>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0d0      	b.n	8004294 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f002 f863 	bl	80061c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	e04a      	b.n	800419a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	333d      	adds	r3, #61	; 0x3d
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	333c      	adds	r3, #60	; 0x3c
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	7bfb      	ldrb	r3, [r7, #15]
 8004130:	b298      	uxth	r0, r3
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3342      	adds	r3, #66	; 0x42
 8004140:	4602      	mov	r2, r0
 8004142:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004144:	7bfa      	ldrb	r2, [r7, #15]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	333f      	adds	r3, #63	; 0x3f
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004158:	7bfa      	ldrb	r2, [r7, #15]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3344      	adds	r3, #68	; 0x44
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	3348      	adds	r3, #72	; 0x48
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3350      	adds	r3, #80	; 0x50
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	3301      	adds	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d3af      	bcc.n	8004104 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]
 80041a8:	e044      	b.n	8004234 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041d6:	7bfa      	ldrb	r2, [r7, #15]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004202:	7bfa      	ldrb	r2, [r7, #15]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	3301      	adds	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d3b5      	bcc.n	80041aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	687e      	ldr	r6, [r7, #4]
 8004246:	466d      	mov	r5, sp
 8004248:	f106 0410 	add.w	r4, r6, #16
 800424c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800424e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004258:	e885 0003 	stmia.w	r5, {r0, r1}
 800425c:	1d33      	adds	r3, r6, #4
 800425e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004260:	6838      	ldr	r0, [r7, #0]
 8004262:	f001 ffd9 	bl	8006218 <USB_DevInit>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e00d      	b.n	8004294 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f003 f821 	bl	80072d4 <USB_DevDisconnect>

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800429c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_PCD_Start+0x1c>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e020      	b.n	80042fa <HAL_PCD_Start+0x5e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d109      	bne.n	80042dc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d005      	beq.n	80042dc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 ff4d 	bl	8006180 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f002 ffd1 	bl	8007292 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004302:	b590      	push	{r4, r7, lr}
 8004304:	b08d      	sub	sp, #52	; 0x34
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f003 f88f 	bl	800743c <USB_GetMode>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 839d 	bne.w	8004a60 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f002 fff3 	bl	8007316 <USB_ReadInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8393 	beq.w	8004a5e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f002 ffea 	bl	8007316 <USB_ReadInterrupts>
 8004342:	4603      	mov	r3, r0
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b02      	cmp	r3, #2
 800434a:	d107      	bne.n	800435c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f002 0202 	and.w	r2, r2, #2
 800435a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f002 ffd8 	bl	8007316 <USB_ReadInterrupts>
 8004366:	4603      	mov	r3, r0
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b10      	cmp	r3, #16
 800436e:	d161      	bne.n	8004434 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0210 	bic.w	r2, r2, #16
 800437e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4413      	add	r3, r2
 800439c:	3304      	adds	r3, #4
 800439e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	0c5b      	lsrs	r3, r3, #17
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d124      	bne.n	80043f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d035      	beq.n	8004424 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	461a      	mov	r2, r3
 80043ca:	6a38      	ldr	r0, [r7, #32]
 80043cc:	f002 fe3e 	bl	800704c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043dc:	441a      	add	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043ee:	441a      	add	r2, r3
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	619a      	str	r2, [r3, #24]
 80043f4:	e016      	b.n	8004424 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	0c5b      	lsrs	r3, r3, #17
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	2b06      	cmp	r3, #6
 8004400:	d110      	bne.n	8004424 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004408:	2208      	movs	r2, #8
 800440a:	4619      	mov	r1, r3
 800440c:	6a38      	ldr	r0, [r7, #32]
 800440e:	f002 fe1d 	bl	800704c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800441e:	441a      	add	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0210 	orr.w	r2, r2, #16
 8004432:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f002 ff6c 	bl	8007316 <USB_ReadInterrupts>
 800443e:	4603      	mov	r3, r0
 8004440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004448:	d16e      	bne.n	8004528 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f002 ff72 	bl	800733c <USB_ReadDevAllOutEpInterrupt>
 8004458:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800445a:	e062      	b.n	8004522 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d057      	beq.n	8004516 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f002 ff97 	bl	80073a4 <USB_ReadDevOutEPInterrupt>
 8004476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448e:	461a      	mov	r2, r3
 8004490:	2301      	movs	r3, #1
 8004492:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fdb0 	bl	8004ffc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b2:	461a      	mov	r2, r3
 80044b4:	2308      	movs	r3, #8
 80044b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 feaa 	bl	8005214 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d6:	461a      	mov	r2, r3
 80044d8:	2310      	movs	r3, #16
 80044da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	2320      	movs	r3, #32
 80044f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	461a      	mov	r2, r3
 8004510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004514:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	3301      	adds	r3, #1
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d199      	bne.n	800445c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f002 fef2 	bl	8007316 <USB_ReadInterrupts>
 8004532:	4603      	mov	r3, r0
 8004534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800453c:	f040 80c0 	bne.w	80046c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f002 ff13 	bl	8007370 <USB_ReadDevAllInEpInterrupt>
 800454a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004550:	e0b2      	b.n	80046b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a7 	beq.w	80046ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	4611      	mov	r1, r2
 8004568:	4618      	mov	r0, r3
 800456a:	f002 ff39 	bl	80073e0 <USB_ReadDevInEPInterrupt>
 800456e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d057      	beq.n	800462a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	2201      	movs	r2, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43db      	mvns	r3, r3
 8004594:	69f9      	ldr	r1, [r7, #28]
 8004596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800459a:	4013      	ands	r3, r2
 800459c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	461a      	mov	r2, r3
 80045ac:	2301      	movs	r3, #1
 80045ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d132      	bne.n	800461e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	3348      	adds	r3, #72	; 0x48
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4403      	add	r3, r0
 80045d8:	3344      	adds	r3, #68	; 0x44
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4419      	add	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4403      	add	r3, r0
 80045ec:	3348      	adds	r3, #72	; 0x48
 80045ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d113      	bne.n	800461e <HAL_PCD_IRQHandler+0x31c>
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3350      	adds	r3, #80	; 0x50
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d108      	bne.n	800461e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004616:	461a      	mov	r2, r3
 8004618:	2101      	movs	r1, #1
 800461a:	f002 ff41 	bl	80074a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	b2db      	uxtb	r3, r3
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f004 fc3e 	bl	8008ea6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	461a      	mov	r2, r3
 8004642:	2308      	movs	r3, #8
 8004644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	461a      	mov	r2, r3
 800465e:	2310      	movs	r3, #16
 8004660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	461a      	mov	r2, r3
 800467a:	2340      	movs	r3, #64	; 0x40
 800467c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	461a      	mov	r2, r3
 8004696:	2302      	movs	r3, #2
 8004698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80046a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fc1b 	bl	8004ee2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	3301      	adds	r3, #1
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f47f af49 	bne.w	8004552 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f002 fe26 	bl	8007316 <USB_ReadInterrupts>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d4:	d122      	bne.n	800471c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d108      	bne.n	8004706 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80046fc:	2100      	movs	r1, #0
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fe26 	bl	8005350 <HAL_PCDEx_LPM_Callback>
 8004704:	e002      	b.n	800470c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f004 fc3a 	bl	8008f80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800471a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f002 fdf8 	bl	8007316 <USB_ReadInterrupts>
 8004726:	4603      	mov	r3, r0
 8004728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004730:	d112      	bne.n	8004758 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f004 fbf6 	bl	8008f34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004756:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f002 fdda 	bl	8007316 <USB_ReadInterrupts>
 8004762:	4603      	mov	r3, r0
 8004764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476c:	f040 80c7 	bne.w	80048fe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2110      	movs	r1, #16
 800478a:	4618      	mov	r0, r3
 800478c:	f001 fea8 	bl	80064e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004790:	2300      	movs	r3, #0
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004794:	e056      	b.n	8004844 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a2:	461a      	mov	r2, r3
 80047a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047da:	0151      	lsls	r1, r2, #5
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	440a      	add	r2, r1
 80047e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	461a      	mov	r2, r3
 80047f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004818:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800481c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800483c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	3301      	adds	r3, #1
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800484a:	429a      	cmp	r2, r3
 800484c:	d3a3      	bcc.n	8004796 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800485c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004860:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800487a:	f043 030b 	orr.w	r3, r3, #11
 800487e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004890:	f043 030b 	orr.w	r3, r3, #11
 8004894:	6453      	str	r3, [r2, #68]	; 0x44
 8004896:	e015      	b.n	80048c4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80048ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048be:	f043 030b 	orr.w	r3, r3, #11
 80048c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048e8:	461a      	mov	r2, r3
 80048ea:	f002 fdd9 	bl	80074a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80048fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f002 fd07 	bl	8007316 <USB_ReadInterrupts>
 8004908:	4603      	mov	r3, r0
 800490a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800490e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004912:	d124      	bne.n	800495e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f002 fd9d 	bl	8007458 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f001 fe3d 	bl	80065a2 <USB_GetDevSpeed>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681c      	ldr	r4, [r3, #0]
 8004934:	f001 f92c 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8004938:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800493e:	b2db      	uxtb	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	4620      	mov	r0, r4
 8004944:	f001 fb7a 	bl	800603c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f004 fad4 	bl	8008ef6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800495c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f002 fcd7 	bl	8007316 <USB_ReadInterrupts>
 8004968:	4603      	mov	r3, r0
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b08      	cmp	r3, #8
 8004970:	d10a      	bne.n	8004988 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f004 fab1 	bl	8008eda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f002 0208 	and.w	r2, r2, #8
 8004986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f002 fcc2 	bl	8007316 <USB_ReadInterrupts>
 8004992:	4603      	mov	r3, r0
 8004994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499c:	d10f      	bne.n	80049be <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f004 fb09 	bl	8008fc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80049bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f002 fca7 	bl	8007316 <USB_ReadInterrupts>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d2:	d10f      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f004 fadc 	bl	8008f9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80049f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f002 fc8c 	bl	8007316 <USB_ReadInterrupts>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a08:	d10a      	bne.n	8004a20 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f004 faea 	bl	8008fe4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f002 fc76 	bl	8007316 <USB_ReadInterrupts>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d115      	bne.n	8004a60 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f004 fada 	bl	8009000 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
 8004a5c:	e000      	b.n	8004a60 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004a5e:	bf00      	nop
    }
  }
}
 8004a60:	3734      	adds	r7, #52	; 0x34
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd90      	pop	{r4, r7, pc}

08004a66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_PCD_SetAddress+0x1a>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e013      	b.n	8004aa8 <HAL_PCD_SetAddress+0x42>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	4611      	mov	r1, r2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f002 fbd4 	bl	8007246 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	70fb      	strb	r3, [r7, #3]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	803b      	strh	r3, [r7, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da0f      	bge.n	8004af6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	f003 020f 	and.w	r2, r3, #15
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	3338      	adds	r3, #56	; 0x38
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	3304      	adds	r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	705a      	strb	r2, [r3, #1]
 8004af4:	e00f      	b.n	8004b16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b22:	883a      	ldrh	r2, [r7, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	78ba      	ldrb	r2, [r7, #2]
 8004b2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b40:	78bb      	ldrb	r3, [r7, #2]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d102      	bne.n	8004b4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_PCD_EP_Open+0xaa>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e00e      	b.n	8004b78 <HAL_PCD_EP_Open+0xc8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 fd3f 	bl	80065ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004b76:	7afb      	ldrb	r3, [r7, #11]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da0f      	bge.n	8004bb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	f003 020f 	and.w	r2, r3, #15
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	3338      	adds	r3, #56	; 0x38
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3304      	adds	r3, #4
 8004baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	705a      	strb	r2, [r3, #1]
 8004bb2:	e00f      	b.n	8004bd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 020f 	and.w	r2, r3, #15
 8004bba:	4613      	mov	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4413      	add	r3, r2
 8004bca:	3304      	adds	r3, #4
 8004bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_PCD_EP_Close+0x6e>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e00e      	b.n	8004c0c <HAL_PCD_EP_Close+0x8c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 fd7d 	bl	80066fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	460b      	mov	r3, r1
 8004c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c24:	7afb      	ldrb	r3, [r7, #11]
 8004c26:	f003 020f 	and.w	r2, r3, #15
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c56:	7afb      	ldrb	r3, [r7, #11]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d102      	bne.n	8004c70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c70:	7afb      	ldrb	r3, [r7, #11]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	f002 f858 	bl	8006d3c <USB_EP0StartXfer>
 8004c8c:	e008      	b.n	8004ca0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6979      	ldr	r1, [r7, #20]
 8004c9c:	f001 fe0a 	bl	80068b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004ccc:	681b      	ldr	r3, [r3, #0]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cea:	7afb      	ldrb	r3, [r7, #11]
 8004cec:	f003 020f 	and.w	r2, r3, #15
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	3338      	adds	r3, #56	; 0x38
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3304      	adds	r3, #4
 8004d00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2201      	movs	r2, #1
 8004d18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d1a:	7afb      	ldrb	r3, [r7, #11]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d102      	bne.n	8004d34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6979      	ldr	r1, [r7, #20]
 8004d4c:	f001 fff6 	bl	8006d3c <USB_EP0StartXfer>
 8004d50:	e008      	b.n	8004d64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6979      	ldr	r1, [r7, #20]
 8004d60:	f001 fda8 	bl	80068b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	460b      	mov	r3, r1
 8004d78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	f003 020f 	and.w	r2, r3, #15
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d901      	bls.n	8004d8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e050      	b.n	8004e2e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da0f      	bge.n	8004db4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	3338      	adds	r3, #56	; 0x38
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	3304      	adds	r3, #4
 8004daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	705a      	strb	r2, [r3, #1]
 8004db2:	e00d      	b.n	8004dd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	4613      	mov	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_PCD_EP_SetStall+0x82>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e01e      	b.n	8004e2e <HAL_PCD_EP_SetStall+0xc0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68f9      	ldr	r1, [r7, #12]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f002 f94d 	bl	800709e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	b2d9      	uxtb	r1, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f002 fb3e 	bl	80074a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 020f 	and.w	r2, r3, #15
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d901      	bls.n	8004e54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e042      	b.n	8004eda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	da0f      	bge.n	8004e7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	f003 020f 	and.w	r2, r3, #15
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	3338      	adds	r3, #56	; 0x38
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4413      	add	r3, r2
 8004e70:	3304      	adds	r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	705a      	strb	r2, [r3, #1]
 8004e7a:	e00f      	b.n	8004e9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	f003 020f 	and.w	r2, r3, #15
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	3304      	adds	r3, #4
 8004e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_PCD_EP_ClrStall+0x86>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e00e      	b.n	8004eda <HAL_PCD_EP_ClrStall+0xa4>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f002 f955 	bl	800717a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b08a      	sub	sp, #40	; 0x28
 8004ee6:	af02      	add	r7, sp, #8
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	3338      	adds	r3, #56	; 0x38
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	3304      	adds	r3, #4
 8004f08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d901      	bls.n	8004f1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e06c      	b.n	8004ff4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d902      	bls.n	8004f36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3303      	adds	r3, #3
 8004f3a:	089b      	lsrs	r3, r3, #2
 8004f3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f3e:	e02b      	b.n	8004f98 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d902      	bls.n	8004f5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	3303      	adds	r3, #3
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68d9      	ldr	r1, [r3, #12]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4603      	mov	r3, r0
 8004f7a:	6978      	ldr	r0, [r7, #20]
 8004f7c:	f002 f831 	bl	8006fe2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	441a      	add	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d809      	bhi.n	8004fc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d203      	bcs.n	8004fc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1be      	bne.n	8004f40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d811      	bhi.n	8004ff2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	6939      	ldr	r1, [r7, #16]
 8004fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fee:	4013      	ands	r3, r2
 8004ff0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	333c      	adds	r3, #60	; 0x3c
 8005014:	3304      	adds	r3, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b01      	cmp	r3, #1
 8005030:	f040 80a0 	bne.w	8005174 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d015      	beq.n	800506a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a72      	ldr	r2, [pc, #456]	; (800520c <PCD_EP_OutXfrComplete_int+0x210>)
 8005042:	4293      	cmp	r3, r2
 8005044:	f240 80dd 	bls.w	8005202 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80d7 	beq.w	8005202 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005066:	6093      	str	r3, [r2, #8]
 8005068:	e0cb      	b.n	8005202 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d009      	beq.n	8005088 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	461a      	mov	r2, r3
 8005082:	2320      	movs	r3, #32
 8005084:	6093      	str	r3, [r2, #8]
 8005086:	e0bc      	b.n	8005202 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 80b7 	bne.w	8005202 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a5d      	ldr	r2, [pc, #372]	; (800520c <PCD_EP_OutXfrComplete_int+0x210>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d90f      	bls.n	80050bc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	461a      	mov	r2, r3
 80050b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b8:	6093      	str	r3, [r2, #8]
 80050ba:	e0a2      	b.n	8005202 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050ce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	0159      	lsls	r1, r3, #5
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	440b      	add	r3, r1
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80050e2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4403      	add	r3, r0
 80050f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80050f6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800510a:	6819      	ldr	r1, [r3, #0]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4403      	add	r3, r0
 800511a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4419      	add	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4403      	add	r3, r0
 8005130:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005134:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d114      	bne.n	8005166 <PCD_EP_OutXfrComplete_int+0x16a>
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800515e:	461a      	mov	r2, r3
 8005160:	2101      	movs	r1, #1
 8005162:	f002 f99d 	bl	80074a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f003 fe7f 	bl	8008e70 <HAL_PCD_DataOutStageCallback>
 8005172:	e046      	b.n	8005202 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a26      	ldr	r2, [pc, #152]	; (8005210 <PCD_EP_OutXfrComplete_int+0x214>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d124      	bne.n	80051c6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005198:	6093      	str	r3, [r2, #8]
 800519a:	e032      	b.n	8005202 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b2:	461a      	mov	r2, r3
 80051b4:	2320      	movs	r3, #32
 80051b6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f003 fe56 	bl	8008e70 <HAL_PCD_DataOutStageCallback>
 80051c4:	e01d      	b.n	8005202 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d114      	bne.n	80051f6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051ee:	461a      	mov	r2, r3
 80051f0:	2100      	movs	r1, #0
 80051f2:	f002 f955 	bl	80074a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f003 fe37 	bl	8008e70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	4f54300a 	.word	0x4f54300a
 8005210:	4f54310a 	.word	0x4f54310a

08005214 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	333c      	adds	r3, #60	; 0x3c
 800522c:	3304      	adds	r3, #4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <PCD_EP_OutSetupPacket_int+0x88>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d90e      	bls.n	8005268 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	461a      	mov	r2, r3
 8005262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005266:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f003 fdef 	bl	8008e4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4a0a      	ldr	r2, [pc, #40]	; (800529c <PCD_EP_OutSetupPacket_int+0x88>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d90c      	bls.n	8005290 <PCD_EP_OutSetupPacket_int+0x7c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d108      	bne.n	8005290 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005288:	461a      	mov	r2, r3
 800528a:	2101      	movs	r1, #1
 800528c:	f002 f908 	bl	80074a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	4f54300a 	.word	0x4f54300a

080052a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
 80052ac:	4613      	mov	r3, r2
 80052ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d107      	bne.n	80052ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80052be:	883b      	ldrh	r3, [r7, #0]
 80052c0:	0419      	lsls	r1, r3, #16
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28
 80052cc:	e028      	b.n	8005320 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	4413      	add	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052dc:	2300      	movs	r3, #0
 80052de:	73fb      	strb	r3, [r7, #15]
 80052e0:	e00d      	b.n	80052fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	3340      	adds	r3, #64	; 0x40
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	4413      	add	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	3301      	adds	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
 80052fe:	7bfa      	ldrb	r2, [r7, #15]
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	3b01      	subs	r3, #1
 8005304:	429a      	cmp	r2, r3
 8005306:	d3ec      	bcc.n	80052e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005308:	883b      	ldrh	r3, [r7, #0]
 800530a:	0418      	lsls	r0, r3, #16
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	3b01      	subs	r3, #1
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	4302      	orrs	r2, r0
 8005318:	3340      	adds	r3, #64	; 0x40
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	460b      	mov	r3, r1
 8005338:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	887a      	ldrh	r2, [r7, #2]
 8005340:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e264      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d075      	beq.n	8005472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005386:	4ba3      	ldr	r3, [pc, #652]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b04      	cmp	r3, #4
 8005390:	d00c      	beq.n	80053ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005392:	4ba0      	ldr	r3, [pc, #640]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800539a:	2b08      	cmp	r3, #8
 800539c:	d112      	bne.n	80053c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539e:	4b9d      	ldr	r3, [pc, #628]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053aa:	d10b      	bne.n	80053c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ac:	4b99      	ldr	r3, [pc, #612]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05b      	beq.n	8005470 <HAL_RCC_OscConfig+0x108>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d157      	bne.n	8005470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e23f      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053cc:	d106      	bne.n	80053dc <HAL_RCC_OscConfig+0x74>
 80053ce:	4b91      	ldr	r3, [pc, #580]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a90      	ldr	r2, [pc, #576]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e01d      	b.n	8005418 <HAL_RCC_OscConfig+0xb0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0x98>
 80053e6:	4b8b      	ldr	r3, [pc, #556]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a8a      	ldr	r2, [pc, #552]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4b88      	ldr	r3, [pc, #544]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a87      	ldr	r2, [pc, #540]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e00b      	b.n	8005418 <HAL_RCC_OscConfig+0xb0>
 8005400:	4b84      	ldr	r3, [pc, #528]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a83      	ldr	r2, [pc, #524]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	4b81      	ldr	r3, [pc, #516]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a80      	ldr	r2, [pc, #512]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fd f98c 	bl	800273c <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005428:	f7fd f988 	bl	800273c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e204      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543a:	4b76      	ldr	r3, [pc, #472]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0xc0>
 8005446:	e014      	b.n	8005472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005448:	f7fd f978 	bl	800273c <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005450:	f7fd f974 	bl	800273c <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	; 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e1f0      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005462:	4b6c      	ldr	r3, [pc, #432]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0xe8>
 800546e:	e000      	b.n	8005472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d063      	beq.n	8005546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800547e:	4b65      	ldr	r3, [pc, #404]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00b      	beq.n	80054a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800548a:	4b62      	ldr	r3, [pc, #392]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005492:	2b08      	cmp	r3, #8
 8005494:	d11c      	bne.n	80054d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005496:	4b5f      	ldr	r3, [pc, #380]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d116      	bne.n	80054d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054a2:	4b5c      	ldr	r3, [pc, #368]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d005      	beq.n	80054ba <HAL_RCC_OscConfig+0x152>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d001      	beq.n	80054ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e1c4      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ba:	4b56      	ldr	r3, [pc, #344]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4952      	ldr	r1, [pc, #328]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ce:	e03a      	b.n	8005546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d8:	4b4f      	ldr	r3, [pc, #316]	; (8005618 <HAL_RCC_OscConfig+0x2b0>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fd f92d 	bl	800273c <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e6:	f7fd f929 	bl	800273c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e1a5      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f8:	4b46      	ldr	r3, [pc, #280]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005504:	4b43      	ldr	r3, [pc, #268]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4940      	ldr	r1, [pc, #256]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]
 8005518:	e015      	b.n	8005546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800551a:	4b3f      	ldr	r3, [pc, #252]	; (8005618 <HAL_RCC_OscConfig+0x2b0>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fd f90c 	bl	800273c <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005528:	f7fd f908 	bl	800273c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e184      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553a:	4b36      	ldr	r3, [pc, #216]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f0      	bne.n	8005528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d030      	beq.n	80055b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800555a:	4b30      	ldr	r3, [pc, #192]	; (800561c <HAL_RCC_OscConfig+0x2b4>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005560:	f7fd f8ec 	bl	800273c <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005568:	f7fd f8e8 	bl	800273c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e164      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557a:	4b26      	ldr	r3, [pc, #152]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 800557c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0x200>
 8005586:	e015      	b.n	80055b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <HAL_RCC_OscConfig+0x2b4>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558e:	f7fd f8d5 	bl	800273c <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005596:	f7fd f8d1 	bl	800273c <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e14d      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a8:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f0      	bne.n	8005596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80a0 	beq.w	8005702 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c6:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10f      	bne.n	80055f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	4a0e      	ldr	r2, [pc, #56]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e0:	6413      	str	r3, [r2, #64]	; 0x40
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ee:	2301      	movs	r3, #1
 80055f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_RCC_OscConfig+0x2b8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d121      	bne.n	8005642 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055fe:	4b08      	ldr	r3, [pc, #32]	; (8005620 <HAL_RCC_OscConfig+0x2b8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a07      	ldr	r2, [pc, #28]	; (8005620 <HAL_RCC_OscConfig+0x2b8>)
 8005604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800560a:	f7fd f897 	bl	800273c <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005610:	e011      	b.n	8005636 <HAL_RCC_OscConfig+0x2ce>
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	42470000 	.word	0x42470000
 800561c:	42470e80 	.word	0x42470e80
 8005620:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005624:	f7fd f88a 	bl	800273c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e106      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005636:	4b85      	ldr	r3, [pc, #532]	; (800584c <HAL_RCC_OscConfig+0x4e4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d106      	bne.n	8005658 <HAL_RCC_OscConfig+0x2f0>
 800564a:	4b81      	ldr	r3, [pc, #516]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	4a80      	ldr	r2, [pc, #512]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6713      	str	r3, [r2, #112]	; 0x70
 8005656:	e01c      	b.n	8005692 <HAL_RCC_OscConfig+0x32a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b05      	cmp	r3, #5
 800565e:	d10c      	bne.n	800567a <HAL_RCC_OscConfig+0x312>
 8005660:	4b7b      	ldr	r3, [pc, #492]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	4a7a      	ldr	r2, [pc, #488]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 8005666:	f043 0304 	orr.w	r3, r3, #4
 800566a:	6713      	str	r3, [r2, #112]	; 0x70
 800566c:	4b78      	ldr	r3, [pc, #480]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a77      	ldr	r2, [pc, #476]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
 8005678:	e00b      	b.n	8005692 <HAL_RCC_OscConfig+0x32a>
 800567a:	4b75      	ldr	r3, [pc, #468]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	4a74      	ldr	r2, [pc, #464]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	6713      	str	r3, [r2, #112]	; 0x70
 8005686:	4b72      	ldr	r3, [pc, #456]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a71      	ldr	r2, [pc, #452]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d015      	beq.n	80056c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fd f84f 	bl	800273c <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a0:	e00a      	b.n	80056b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fd f84b 	bl	800273c <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e0c5      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b8:	4b65      	ldr	r3, [pc, #404]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ee      	beq.n	80056a2 <HAL_RCC_OscConfig+0x33a>
 80056c4:	e014      	b.n	80056f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c6:	f7fd f839 	bl	800273c <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056cc:	e00a      	b.n	80056e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fd f835 	bl	800273c <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e0af      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e4:	4b5a      	ldr	r3, [pc, #360]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1ee      	bne.n	80056ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d105      	bne.n	8005702 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f6:	4b56      	ldr	r3, [pc, #344]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	4a55      	ldr	r2, [pc, #340]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 80056fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 809b 	beq.w	8005842 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800570c:	4b50      	ldr	r3, [pc, #320]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b08      	cmp	r3, #8
 8005716:	d05c      	beq.n	80057d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d141      	bne.n	80057a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005720:	4b4c      	ldr	r3, [pc, #304]	; (8005854 <HAL_RCC_OscConfig+0x4ec>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fd f809 	bl	800273c <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572e:	f7fd f805 	bl	800273c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e081      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005740:	4b43      	ldr	r3, [pc, #268]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	019b      	lsls	r3, r3, #6
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	3b01      	subs	r3, #1
 8005766:	041b      	lsls	r3, r3, #16
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	4937      	ldr	r1, [pc, #220]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005776:	4b37      	ldr	r3, [pc, #220]	; (8005854 <HAL_RCC_OscConfig+0x4ec>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fc ffde 	bl	800273c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005784:	f7fc ffda 	bl	800273c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e056      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005796:	4b2e      	ldr	r3, [pc, #184]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x41c>
 80057a2:	e04e      	b.n	8005842 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a4:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <HAL_RCC_OscConfig+0x4ec>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fc ffc7 	bl	800273c <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fc ffc3 	bl	800273c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e03f      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c4:	4b22      	ldr	r3, [pc, #136]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0x44a>
 80057d0:	e037      	b.n	8005842 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e032      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057de:	4b1c      	ldr	r3, [pc, #112]	; (8005850 <HAL_RCC_OscConfig+0x4e8>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d028      	beq.n	800583e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d121      	bne.n	800583e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005804:	429a      	cmp	r2, r3
 8005806:	d11a      	bne.n	800583e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800580e:	4013      	ands	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005814:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005816:	4293      	cmp	r3, r2
 8005818:	d111      	bne.n	800583e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	3b01      	subs	r3, #1
 8005828:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800582a:	429a      	cmp	r2, r3
 800582c:	d107      	bne.n	800583e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800583a:	429a      	cmp	r2, r3
 800583c:	d001      	beq.n	8005842 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40007000 	.word	0x40007000
 8005850:	40023800 	.word	0x40023800
 8005854:	42470060 	.word	0x42470060

08005858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0cc      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800586c:	4b68      	ldr	r3, [pc, #416]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d90c      	bls.n	8005894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b65      	ldr	r3, [pc, #404]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b63      	ldr	r3, [pc, #396]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0b8      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d020      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ac:	4b59      	ldr	r3, [pc, #356]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a58      	ldr	r2, [pc, #352]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058c4:	4b53      	ldr	r3, [pc, #332]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a52      	ldr	r2, [pc, #328]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d0:	4b50      	ldr	r3, [pc, #320]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	494d      	ldr	r1, [pc, #308]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d044      	beq.n	8005978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d107      	bne.n	8005906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f6:	4b47      	ldr	r3, [pc, #284]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d119      	bne.n	8005936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e07f      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d003      	beq.n	8005916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005912:	2b03      	cmp	r3, #3
 8005914:	d107      	bne.n	8005926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005916:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d109      	bne.n	8005936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e06f      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005926:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e067      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005936:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f023 0203 	bic.w	r2, r3, #3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4934      	ldr	r1, [pc, #208]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	4313      	orrs	r3, r2
 8005946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005948:	f7fc fef8 	bl	800273c <HAL_GetTick>
 800594c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594e:	e00a      	b.n	8005966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005950:	f7fc fef4 	bl	800273c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	; 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e04f      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005966:	4b2b      	ldr	r3, [pc, #172]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 020c 	and.w	r2, r3, #12
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	429a      	cmp	r2, r3
 8005976:	d1eb      	bne.n	8005950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005978:	4b25      	ldr	r3, [pc, #148]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d20c      	bcs.n	80059a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800598e:	4b20      	ldr	r3, [pc, #128]	; (8005a10 <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e032      	b.n	8005a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	4916      	ldr	r1, [pc, #88]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	490e      	ldr	r1, [pc, #56]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059de:	f000 f821 	bl	8005a24 <HAL_RCC_GetSysClockFreq>
 80059e2:	4602      	mov	r2, r0
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	091b      	lsrs	r3, r3, #4
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	490a      	ldr	r1, [pc, #40]	; (8005a18 <HAL_RCC_ClockConfig+0x1c0>)
 80059f0:	5ccb      	ldrb	r3, [r1, r3]
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 80059f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fc fe58 	bl	80026b4 <HAL_InitTick>

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40023c00 	.word	0x40023c00
 8005a14:	40023800 	.word	0x40023800
 8005a18:	0800b9b8 	.word	0x0800b9b8
 8005a1c:	20000020 	.word	0x20000020
 8005a20:	20000024 	.word	0x20000024

08005a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a24:	b5b0      	push	{r4, r5, r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	6079      	str	r1, [r7, #4]
 8005a2e:	2100      	movs	r1, #0
 8005a30:	60f9      	str	r1, [r7, #12]
 8005a32:	2100      	movs	r1, #0
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a36:	2100      	movs	r1, #0
 8005a38:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a3a:	4952      	ldr	r1, [pc, #328]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a3c:	6889      	ldr	r1, [r1, #8]
 8005a3e:	f001 010c 	and.w	r1, r1, #12
 8005a42:	2908      	cmp	r1, #8
 8005a44:	d00d      	beq.n	8005a62 <HAL_RCC_GetSysClockFreq+0x3e>
 8005a46:	2908      	cmp	r1, #8
 8005a48:	f200 8094 	bhi.w	8005b74 <HAL_RCC_GetSysClockFreq+0x150>
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_RCC_GetSysClockFreq+0x32>
 8005a50:	2904      	cmp	r1, #4
 8005a52:	d003      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x38>
 8005a54:	e08e      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a56:	4b4c      	ldr	r3, [pc, #304]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x164>)
 8005a58:	60bb      	str	r3, [r7, #8]
       break;
 8005a5a:	e08e      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a5c:	4b4b      	ldr	r3, [pc, #300]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x168>)
 8005a5e:	60bb      	str	r3, [r7, #8]
      break;
 8005a60:	e08b      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a62:	4948      	ldr	r1, [pc, #288]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a64:	6849      	ldr	r1, [r1, #4]
 8005a66:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005a6a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a6c:	4945      	ldr	r1, [pc, #276]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a6e:	6849      	ldr	r1, [r1, #4]
 8005a70:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005a74:	2900      	cmp	r1, #0
 8005a76:	d024      	beq.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a78:	4942      	ldr	r1, [pc, #264]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a7a:	6849      	ldr	r1, [r1, #4]
 8005a7c:	0989      	lsrs	r1, r1, #6
 8005a7e:	4608      	mov	r0, r1
 8005a80:	f04f 0100 	mov.w	r1, #0
 8005a84:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005a88:	f04f 0500 	mov.w	r5, #0
 8005a8c:	ea00 0204 	and.w	r2, r0, r4
 8005a90:	ea01 0305 	and.w	r3, r1, r5
 8005a94:	493d      	ldr	r1, [pc, #244]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x168>)
 8005a96:	fb01 f003 	mul.w	r0, r1, r3
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	fb01 f102 	mul.w	r1, r1, r2
 8005aa0:	1844      	adds	r4, r0, r1
 8005aa2:	493a      	ldr	r1, [pc, #232]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x168>)
 8005aa4:	fba2 0101 	umull	r0, r1, r2, r1
 8005aa8:	1863      	adds	r3, r4, r1
 8005aaa:	4619      	mov	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	f7fb f8b2 	bl	8000c1c <__aeabi_uldivmod>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4613      	mov	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	e04a      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ac2:	4b30      	ldr	r3, [pc, #192]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	099b      	lsrs	r3, r3, #6
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ad2:	f04f 0100 	mov.w	r1, #0
 8005ad6:	ea02 0400 	and.w	r4, r2, r0
 8005ada:	ea03 0501 	and.w	r5, r3, r1
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	014b      	lsls	r3, r1, #5
 8005aec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005af0:	0142      	lsls	r2, r0, #5
 8005af2:	4610      	mov	r0, r2
 8005af4:	4619      	mov	r1, r3
 8005af6:	1b00      	subs	r0, r0, r4
 8005af8:	eb61 0105 	sbc.w	r1, r1, r5
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	018b      	lsls	r3, r1, #6
 8005b06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b0a:	0182      	lsls	r2, r0, #6
 8005b0c:	1a12      	subs	r2, r2, r0
 8005b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f04f 0100 	mov.w	r1, #0
 8005b1a:	00d9      	lsls	r1, r3, #3
 8005b1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b20:	00d0      	lsls	r0, r2, #3
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	1912      	adds	r2, r2, r4
 8005b28:	eb45 0303 	adc.w	r3, r5, r3
 8005b2c:	f04f 0000 	mov.w	r0, #0
 8005b30:	f04f 0100 	mov.w	r1, #0
 8005b34:	0299      	lsls	r1, r3, #10
 8005b36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b3a:	0290      	lsls	r0, r2, #10
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4610      	mov	r0, r2
 8005b42:	4619      	mov	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	f7fb f866 	bl	8000c1c <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4613      	mov	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b58:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	3301      	adds	r3, #1
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	60bb      	str	r3, [r7, #8]
      break;
 8005b72:	e002      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b74:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <HAL_RCC_GetSysClockFreq+0x164>)
 8005b76:	60bb      	str	r3, [r7, #8]
      break;
 8005b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bdb0      	pop	{r4, r5, r7, pc}
 8005b84:	40023800 	.word	0x40023800
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	017d7840 	.word	0x017d7840

08005b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b94:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b96:	681b      	ldr	r3, [r3, #0]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000020 	.word	0x20000020

08005ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bac:	f7ff fff0 	bl	8005b90 <HAL_RCC_GetHCLKFreq>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	0a9b      	lsrs	r3, r3, #10
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	4903      	ldr	r1, [pc, #12]	; (8005bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bbe:	5ccb      	ldrb	r3, [r1, r3]
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	0800b9c8 	.word	0x0800b9c8

08005bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d038      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bf8:	4b68      	ldr	r3, [pc, #416]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bfe:	f7fc fd9d 	bl	800273c <HAL_GetTick>
 8005c02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c04:	e008      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c06:	f7fc fd99 	bl	800273c <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e0bd      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c18:	4b61      	ldr	r3, [pc, #388]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f0      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	019b      	lsls	r3, r3, #6
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	071b      	lsls	r3, r3, #28
 8005c36:	495a      	ldr	r1, [pc, #360]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c3e:	4b57      	ldr	r3, [pc, #348]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c44:	f7fc fd7a 	bl	800273c <HAL_GetTick>
 8005c48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c4c:	f7fc fd76 	bl	800273c <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e09a      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c5e:	4b50      	ldr	r3, [pc, #320]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 8083 	beq.w	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	4b48      	ldr	r3, [pc, #288]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	4a47      	ldr	r2, [pc, #284]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c86:	6413      	str	r3, [r2, #64]	; 0x40
 8005c88:	4b45      	ldr	r3, [pc, #276]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c94:	4b43      	ldr	r3, [pc, #268]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a42      	ldr	r2, [pc, #264]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca0:	f7fc fd4c 	bl	800273c <HAL_GetTick>
 8005ca4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ca8:	f7fc fd48 	bl	800273c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e06c      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cba:	4b3a      	ldr	r3, [pc, #232]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cc6:	4b36      	ldr	r3, [pc, #216]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cce:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d02f      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d028      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ce4:	4b2e      	ldr	r3, [pc, #184]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cee:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cf4:	4b2c      	ldr	r3, [pc, #176]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005cfa:	4a29      	ldr	r2, [pc, #164]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d00:	4b27      	ldr	r3, [pc, #156]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d114      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d0c:	f7fc fd16 	bl	800273c <HAL_GetTick>
 8005d10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d12:	e00a      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d14:	f7fc fd12 	bl	800273c <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e034      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2a:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0ee      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d42:	d10d      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005d44:	4b16      	ldr	r3, [pc, #88]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d58:	4911      	ldr	r1, [pc, #68]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	608b      	str	r3, [r1, #8]
 8005d5e:	e005      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	4a0e      	ldr	r2, [pc, #56]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d6a:	6093      	str	r3, [r2, #8]
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d78:	4909      	ldr	r1, [pc, #36]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	7d1a      	ldrb	r2, [r3, #20]
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005d90:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	42470068 	.word	0x42470068
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40007000 	.word	0x40007000
 8005da8:	42470e40 	.word	0x42470e40
 8005dac:	424711e0 	.word	0x424711e0

08005db0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e083      	b.n	8005eca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	7f5b      	ldrb	r3, [r3, #29]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fc fb22 	bl	800241c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	22ca      	movs	r2, #202	; 0xca
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2253      	movs	r2, #83	; 0x53
 8005dec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f897 	bl	8005f22 <RTC_EnterInitMode>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	22ff      	movs	r2, #255	; 0xff
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2204      	movs	r2, #4
 8005e06:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e05e      	b.n	8005eca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6899      	ldr	r1, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68d2      	ldr	r2, [r2, #12]
 8005e46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6919      	ldr	r1, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	041a      	lsls	r2, r3, #16
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e6a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10e      	bne.n	8005e98 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f829 	bl	8005ed2 <HAL_RTC_WaitForSynchro>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	22ff      	movs	r2, #255	; 0xff
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2204      	movs	r2, #4
 8005e92:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e018      	b.n	8005eca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	22ff      	movs	r2, #255	; 0xff
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
  }
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005eec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eee:	f7fc fc25 	bl	800273c <HAL_GetTick>
 8005ef2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005ef4:	e009      	b.n	8005f0a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ef6:	f7fc fc21 	bl	800273c <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f04:	d901      	bls.n	8005f0a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e007      	b.n	8005f1a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0ee      	beq.n	8005ef6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d119      	bne.n	8005f70 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f04f 32ff 	mov.w	r2, #4294967295
 8005f44:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f46:	f7fc fbf9 	bl	800273c <HAL_GetTick>
 8005f4a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f4c:	e009      	b.n	8005f62 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f4e:	f7fc fbf5 	bl	800273c <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5c:	d901      	bls.n	8005f62 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e007      	b.n	8005f72 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0ee      	beq.n	8005f4e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	f107 001c 	add.w	r0, r7, #28
 8005f88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d122      	bne.n	8005fd8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d105      	bne.n	8005fcc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fac5 	bl	800755c <USB_CoreReset>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]
 8005fd6:	e01a      	b.n	800600e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 fab9 	bl	800755c <USB_CoreReset>
 8005fea:	4603      	mov	r3, r0
 8005fec:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
 8006000:	e005      	b.n	800600e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10b      	bne.n	800602c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f043 0206 	orr.w	r2, r3, #6
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006038:	b004      	add	sp, #16
 800603a:	4770      	bx	lr

0800603c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d165      	bne.n	800611c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4a41      	ldr	r2, [pc, #260]	; (8006158 <USB_SetTurnaroundTime+0x11c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d906      	bls.n	8006066 <USB_SetTurnaroundTime+0x2a>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4a40      	ldr	r2, [pc, #256]	; (800615c <USB_SetTurnaroundTime+0x120>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d202      	bcs.n	8006066 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006060:	230f      	movs	r3, #15
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	e062      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4a3c      	ldr	r2, [pc, #240]	; (800615c <USB_SetTurnaroundTime+0x120>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d306      	bcc.n	800607c <USB_SetTurnaroundTime+0x40>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4a3b      	ldr	r2, [pc, #236]	; (8006160 <USB_SetTurnaroundTime+0x124>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d202      	bcs.n	800607c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006076:	230e      	movs	r3, #14
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	e057      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4a38      	ldr	r2, [pc, #224]	; (8006160 <USB_SetTurnaroundTime+0x124>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d306      	bcc.n	8006092 <USB_SetTurnaroundTime+0x56>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4a37      	ldr	r2, [pc, #220]	; (8006164 <USB_SetTurnaroundTime+0x128>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d202      	bcs.n	8006092 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800608c:	230d      	movs	r3, #13
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	e04c      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4a33      	ldr	r2, [pc, #204]	; (8006164 <USB_SetTurnaroundTime+0x128>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d306      	bcc.n	80060a8 <USB_SetTurnaroundTime+0x6c>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4a32      	ldr	r2, [pc, #200]	; (8006168 <USB_SetTurnaroundTime+0x12c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d802      	bhi.n	80060a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80060a2:	230c      	movs	r3, #12
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	e041      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4a2f      	ldr	r2, [pc, #188]	; (8006168 <USB_SetTurnaroundTime+0x12c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d906      	bls.n	80060be <USB_SetTurnaroundTime+0x82>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4a2e      	ldr	r2, [pc, #184]	; (800616c <USB_SetTurnaroundTime+0x130>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d802      	bhi.n	80060be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80060b8:	230b      	movs	r3, #11
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e036      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4a2a      	ldr	r2, [pc, #168]	; (800616c <USB_SetTurnaroundTime+0x130>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d906      	bls.n	80060d4 <USB_SetTurnaroundTime+0x98>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4a29      	ldr	r2, [pc, #164]	; (8006170 <USB_SetTurnaroundTime+0x134>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d802      	bhi.n	80060d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80060ce:	230a      	movs	r3, #10
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e02b      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4a26      	ldr	r2, [pc, #152]	; (8006170 <USB_SetTurnaroundTime+0x134>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d906      	bls.n	80060ea <USB_SetTurnaroundTime+0xae>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4a25      	ldr	r2, [pc, #148]	; (8006174 <USB_SetTurnaroundTime+0x138>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d202      	bcs.n	80060ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80060e4:	2309      	movs	r3, #9
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e020      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4a21      	ldr	r2, [pc, #132]	; (8006174 <USB_SetTurnaroundTime+0x138>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d306      	bcc.n	8006100 <USB_SetTurnaroundTime+0xc4>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4a20      	ldr	r2, [pc, #128]	; (8006178 <USB_SetTurnaroundTime+0x13c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d802      	bhi.n	8006100 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80060fa:	2308      	movs	r3, #8
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e015      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <USB_SetTurnaroundTime+0x13c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d906      	bls.n	8006116 <USB_SetTurnaroundTime+0xda>
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4a1c      	ldr	r2, [pc, #112]	; (800617c <USB_SetTurnaroundTime+0x140>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d202      	bcs.n	8006116 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006110:	2307      	movs	r3, #7
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e00a      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006116:	2306      	movs	r3, #6
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e007      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006122:	2309      	movs	r3, #9
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	e001      	b.n	800612c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006128:	2309      	movs	r3, #9
 800612a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	029b      	lsls	r3, r3, #10
 8006140:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006144:	431a      	orrs	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	00d8acbf 	.word	0x00d8acbf
 800615c:	00e4e1c0 	.word	0x00e4e1c0
 8006160:	00f42400 	.word	0x00f42400
 8006164:	01067380 	.word	0x01067380
 8006168:	011a499f 	.word	0x011a499f
 800616c:	01312cff 	.word	0x01312cff
 8006170:	014ca43f 	.word	0x014ca43f
 8006174:	016e3600 	.word	0x016e3600
 8006178:	01a6ab1f 	.word	0x01a6ab1f
 800617c:	01e84800 	.word	0x01e84800

08006180 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f043 0201 	orr.w	r2, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d106      	bne.n	80061f0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]
 80061ee:	e00b      	b.n	8006208 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	e001      	b.n	8006208 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e003      	b.n	8006210 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006208:	2032      	movs	r0, #50	; 0x32
 800620a:	f7fc faa3 	bl	8002754 <HAL_Delay>

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006218:	b084      	sub	sp, #16
 800621a:	b580      	push	{r7, lr}
 800621c:	b086      	sub	sp, #24
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	e009      	b.n	800624c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3340      	adds	r3, #64	; 0x40
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	2200      	movs	r2, #0
 8006244:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	3301      	adds	r3, #1
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b0e      	cmp	r3, #14
 8006250:	d9f2      	bls.n	8006238 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d11c      	bne.n	8006292 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006266:	f043 0302 	orr.w	r3, r3, #2
 800626a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
 8006290:	e00b      	b.n	80062aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062b0:	461a      	mov	r2, r3
 80062b2:	2300      	movs	r3, #0
 80062b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	4619      	mov	r1, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	461a      	mov	r2, r3
 80062c6:	680b      	ldr	r3, [r1, #0]
 80062c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d10c      	bne.n	80062ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062d6:	2100      	movs	r1, #0
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f949 	bl	8006570 <USB_SetDevSpeed>
 80062de:	e008      	b.n	80062f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062e0:	2101      	movs	r1, #1
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f944 	bl	8006570 <USB_SetDevSpeed>
 80062e8:	e003      	b.n	80062f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062ea:	2103      	movs	r1, #3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f93f 	bl	8006570 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062f2:	2110      	movs	r1, #16
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f8f3 	bl	80064e0 <USB_FlushTxFifo>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f911 	bl	800652c <USB_FlushRxFifo>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631a:	461a      	mov	r2, r3
 800631c:	2300      	movs	r3, #0
 800631e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	461a      	mov	r2, r3
 8006328:	2300      	movs	r3, #0
 800632a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	461a      	mov	r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	e043      	b.n	80063c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006354:	d118      	bne.n	8006388 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006368:	461a      	mov	r2, r3
 800636a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	e013      	b.n	800639a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637e:	461a      	mov	r2, r3
 8006380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	e008      	b.n	800639a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	461a      	mov	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a6:	461a      	mov	r2, r3
 80063a8:	2300      	movs	r3, #0
 80063aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	461a      	mov	r2, r3
 80063ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	3301      	adds	r3, #1
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d3b7      	bcc.n	800633e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ce:	2300      	movs	r3, #0
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	e043      	b.n	800645c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ea:	d118      	bne.n	800641e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fe:	461a      	mov	r2, r3
 8006400:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	e013      	b.n	8006430 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006414:	461a      	mov	r2, r3
 8006416:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	e008      	b.n	8006430 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642a:	461a      	mov	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	461a      	mov	r2, r3
 800643e:	2300      	movs	r3, #0
 8006440:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644e:	461a      	mov	r2, r3
 8006450:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006454:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3301      	adds	r3, #1
 800645a:	613b      	str	r3, [r7, #16]
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	429a      	cmp	r2, r3
 8006462:	d3b7      	bcc.n	80063d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006476:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006484:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	d105      	bne.n	8006498 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f043 0210 	orr.w	r2, r3, #16
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <USB_DevInit+0x2c4>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80064a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f043 0208 	orr.w	r2, r3, #8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d107      	bne.n	80064cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064c4:	f043 0304 	orr.w	r3, r3, #4
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064d8:	b004      	add	sp, #16
 80064da:	4770      	bx	lr
 80064dc:	803c3800 	.word	0x803c3800

080064e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	019b      	lsls	r3, r3, #6
 80064f2:	f043 0220 	orr.w	r2, r3, #32
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a09      	ldr	r2, [pc, #36]	; (8006528 <USB_FlushTxFifo+0x48>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d901      	bls.n	800650c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e006      	b.n	800651a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b20      	cmp	r3, #32
 8006516:	d0f0      	beq.n	80064fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	00030d40 	.word	0x00030d40

0800652c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2210      	movs	r2, #16
 800653c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4a09      	ldr	r2, [pc, #36]	; (800656c <USB_FlushRxFifo+0x40>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e006      	b.n	800655e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b10      	cmp	r3, #16
 800655a:	d0f0      	beq.n	800653e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	00030d40 	.word	0x00030d40

08006570 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006590:	4313      	orrs	r3, r2
 8006592:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b087      	sub	sp, #28
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0306 	and.w	r3, r3, #6
 80065ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d102      	bne.n	80065c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80065c2:	2300      	movs	r3, #0
 80065c4:	75fb      	strb	r3, [r7, #23]
 80065c6:	e00a      	b.n	80065de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d002      	beq.n	80065d4 <USB_GetDevSpeed+0x32>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b06      	cmp	r3, #6
 80065d2:	d102      	bne.n	80065da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065d4:	2302      	movs	r3, #2
 80065d6:	75fb      	strb	r3, [r7, #23]
 80065d8:	e001      	b.n	80065de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065da:	230f      	movs	r3, #15
 80065dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d13a      	bne.n	800667e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	69da      	ldr	r2, [r3, #28]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	2101      	movs	r1, #1
 800661a:	fa01 f303 	lsl.w	r3, r1, r3
 800661e:	b29b      	uxth	r3, r3
 8006620:	68f9      	ldr	r1, [r7, #12]
 8006622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006626:	4313      	orrs	r3, r2
 8006628:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d155      	bne.n	80066ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	78db      	ldrb	r3, [r3, #3]
 800665a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800665c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	059b      	lsls	r3, r3, #22
 8006662:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006664:	4313      	orrs	r3, r2
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	e036      	b.n	80066ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	69da      	ldr	r2, [r3, #28]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	2101      	movs	r1, #1
 8006690:	fa01 f303 	lsl.w	r3, r1, r3
 8006694:	041b      	lsls	r3, r3, #16
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800669c:	4313      	orrs	r3, r2
 800669e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d11a      	bne.n	80066ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	78db      	ldrb	r3, [r3, #3]
 80066d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066d2:	430b      	orrs	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d161      	bne.n	80067dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800672a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800672e:	d11f      	bne.n	8006770 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	440a      	add	r2, r1
 8006746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800674e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800676e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	2101      	movs	r1, #1
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	43db      	mvns	r3, r3
 800678a:	68f9      	ldr	r1, [r7, #12]
 800678c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006790:	4013      	ands	r3, r2
 8006792:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	2101      	movs	r1, #1
 80067a6:	fa01 f303 	lsl.w	r3, r1, r3
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	43db      	mvns	r3, r3
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067b4:	4013      	ands	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	0159      	lsls	r1, r3, #5
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	440b      	add	r3, r1
 80067ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d2:	4619      	mov	r1, r3
 80067d4:	4b35      	ldr	r3, [pc, #212]	; (80068ac <USB_DeactivateEndpoint+0x1b0>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	600b      	str	r3, [r1, #0]
 80067da:	e060      	b.n	800689e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f2:	d11f      	bne.n	8006834 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	440a      	add	r2, r1
 800680a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800680e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006812:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006832:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	2101      	movs	r1, #1
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	43db      	mvns	r3, r3
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006854:	4013      	ands	r3, r2
 8006856:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	2101      	movs	r1, #1
 800686a:	fa01 f303 	lsl.w	r3, r1, r3
 800686e:	041b      	lsls	r3, r3, #16
 8006870:	43db      	mvns	r3, r3
 8006872:	68f9      	ldr	r1, [r7, #12]
 8006874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006878:	4013      	ands	r3, r2
 800687a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	0159      	lsls	r1, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	440b      	add	r3, r1
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	4619      	mov	r1, r3
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <USB_DeactivateEndpoint+0x1b4>)
 800689a:	4013      	ands	r3, r2
 800689c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	ec337800 	.word	0xec337800
 80068b0:	eff37800 	.word	0xeff37800

080068b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	; 0x28
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	4613      	mov	r3, r2
 80068c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	f040 815c 	bne.w	8006b8e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d132      	bne.n	8006944 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	0151      	lsls	r1, r2, #5
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	440a      	add	r2, r1
 80068f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006900:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006920:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693c:	0cdb      	lsrs	r3, r3, #19
 800693e:	04db      	lsls	r3, r3, #19
 8006940:	6113      	str	r3, [r2, #16]
 8006942:	e074      	b.n	8006a2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	0151      	lsls	r1, r2, #5
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	440a      	add	r2, r1
 800695a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695e:	0cdb      	lsrs	r3, r3, #19
 8006960:	04db      	lsls	r3, r3, #19
 8006962:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	440a      	add	r2, r1
 800697a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006982:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006986:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6959      	ldr	r1, [r3, #20]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	440b      	add	r3, r1
 80069a0:	1e59      	subs	r1, r3, #1
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80069aa:	04d9      	lsls	r1, r3, #19
 80069ac:	4b9d      	ldr	r3, [pc, #628]	; (8006c24 <USB_EPStartXfer+0x370>)
 80069ae:	400b      	ands	r3, r1
 80069b0:	69b9      	ldr	r1, [r7, #24]
 80069b2:	0148      	lsls	r0, r1, #5
 80069b4:	69f9      	ldr	r1, [r7, #28]
 80069b6:	4401      	add	r1, r0
 80069b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069bc:	4313      	orrs	r3, r2
 80069be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069d6:	69b9      	ldr	r1, [r7, #24]
 80069d8:	0148      	lsls	r0, r1, #5
 80069da:	69f9      	ldr	r1, [r7, #28]
 80069dc:	4401      	add	r1, r0
 80069de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069e2:	4313      	orrs	r3, r2
 80069e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	78db      	ldrb	r3, [r3, #3]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d11f      	bne.n	8006a2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006a0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d14b      	bne.n	8006acc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	78db      	ldrb	r3, [r3, #3]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d128      	bne.n	8006aaa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d110      	bne.n	8006a8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	e00f      	b.n	8006aaa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	e12f      	b.n	8006d2c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006aea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	78db      	ldrb	r3, [r3, #3]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d015      	beq.n	8006b20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 8117 	beq.w	8006d2c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	2101      	movs	r1, #1
 8006b10:	fa01 f303 	lsl.w	r3, r1, r3
 8006b14:	69f9      	ldr	r1, [r7, #28]
 8006b16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	634b      	str	r3, [r1, #52]	; 0x34
 8006b1e:	e105      	b.n	8006d2c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d110      	bne.n	8006b52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	0151      	lsls	r1, r2, #5
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	440a      	add	r2, r1
 8006b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	e00f      	b.n	8006b72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	68d9      	ldr	r1, [r3, #12]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	b298      	uxth	r0, r3
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4603      	mov	r3, r0
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fa2b 	bl	8006fe2 <USB_WritePacket>
 8006b8c:	e0ce      	b.n	8006d2c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	0151      	lsls	r1, r2, #5
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	440a      	add	r2, r1
 8006ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba8:	0cdb      	lsrs	r3, r3, #19
 8006baa:	04db      	lsls	r3, r3, #19
 8006bac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	0151      	lsls	r1, r2, #5
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bd0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d126      	bne.n	8006c28 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf0:	69b9      	ldr	r1, [r7, #24]
 8006bf2:	0148      	lsls	r0, r1, #5
 8006bf4:	69f9      	ldr	r1, [r7, #28]
 8006bf6:	4401      	add	r1, r0
 8006bf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	0151      	lsls	r1, r2, #5
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	440a      	add	r2, r1
 8006c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c1e:	6113      	str	r3, [r2, #16]
 8006c20:	e036      	b.n	8006c90 <USB_EPStartXfer+0x3dc>
 8006c22:	bf00      	nop
 8006c24:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	695a      	ldr	r2, [r3, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	4413      	add	r3, r2
 8006c32:	1e5a      	subs	r2, r3, #1
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	8afb      	ldrh	r3, [r7, #22]
 8006c4e:	04d9      	lsls	r1, r3, #19
 8006c50:	4b39      	ldr	r3, [pc, #228]	; (8006d38 <USB_EPStartXfer+0x484>)
 8006c52:	400b      	ands	r3, r1
 8006c54:	69b9      	ldr	r1, [r7, #24]
 8006c56:	0148      	lsls	r0, r1, #5
 8006c58:	69f9      	ldr	r1, [r7, #28]
 8006c5a:	4401      	add	r1, r0
 8006c5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c60:	4313      	orrs	r3, r2
 8006c62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	8af9      	ldrh	r1, [r7, #22]
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c80:	69b9      	ldr	r1, [r7, #24]
 8006c82:	0148      	lsls	r0, r1, #5
 8006c84:	69f9      	ldr	r1, [r7, #28]
 8006c86:	4401      	add	r1, r0
 8006c88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d10d      	bne.n	8006cb2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	68d9      	ldr	r1, [r3, #12]
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cae:	460a      	mov	r2, r1
 8006cb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	78db      	ldrb	r3, [r3, #3]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d128      	bne.n	8006d0c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d110      	bne.n	8006cec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ce8:	6013      	str	r3, [r2, #0]
 8006cea:	e00f      	b.n	8006d0c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	69fa      	ldr	r2, [r7, #28]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	1ff80000 	.word	0x1ff80000

08006d3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b087      	sub	sp, #28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	785b      	ldrb	r3, [r3, #1]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	f040 80cd 	bne.w	8006ef8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d132      	bne.n	8006dcc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc4:	0cdb      	lsrs	r3, r3, #19
 8006dc6:	04db      	lsls	r3, r3, #19
 8006dc8:	6113      	str	r3, [r2, #16]
 8006dca:	e04e      	b.n	8006e6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de6:	0cdb      	lsrs	r3, r3, #19
 8006de8:	04db      	lsls	r3, r3, #19
 8006dea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e0e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	695a      	ldr	r2, [r3, #20]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d903      	bls.n	8006e24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e50:	691a      	ldr	r2, [r3, #16]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e5a:	6939      	ldr	r1, [r7, #16]
 8006e5c:	0148      	lsls	r0, r1, #5
 8006e5e:	6979      	ldr	r1, [r7, #20]
 8006e60:	4401      	add	r1, r0
 8006e62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e66:	4313      	orrs	r3, r2
 8006e68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d11e      	bne.n	8006eae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	461a      	mov	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	e092      	b.n	8006fd4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ecc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d07e      	beq.n	8006fd4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eec:	6979      	ldr	r1, [r7, #20]
 8006eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	634b      	str	r3, [r1, #52]	; 0x34
 8006ef6:	e06d      	b.n	8006fd4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f12:	0cdb      	lsrs	r3, r3, #19
 8006f14:	04db      	lsls	r3, r3, #19
 8006f16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f3a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f82:	6939      	ldr	r1, [r7, #16]
 8006f84:	0148      	lsls	r0, r1, #5
 8006f86:	6979      	ldr	r1, [r7, #20]
 8006f88:	4401      	add	r1, r0
 8006f8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d10d      	bne.n	8006fb4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	68d9      	ldr	r1, [r3, #12]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb0:	460a      	mov	r2, r1
 8006fb2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b089      	sub	sp, #36	; 0x24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	4611      	mov	r1, r2
 8006fee:	461a      	mov	r2, r3
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	71fb      	strb	r3, [r7, #7]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007000:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11a      	bne.n	800703e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007008:	88bb      	ldrh	r3, [r7, #4]
 800700a:	3303      	adds	r3, #3
 800700c:	089b      	lsrs	r3, r3, #2
 800700e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007010:	2300      	movs	r3, #0
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	e00f      	b.n	8007036 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	031a      	lsls	r2, r3, #12
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	4413      	add	r3, r2
 800701e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007022:	461a      	mov	r2, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6013      	str	r3, [r2, #0]
      pSrc++;
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	3304      	adds	r3, #4
 800702e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	3301      	adds	r3, #1
 8007034:	61bb      	str	r3, [r7, #24]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	429a      	cmp	r2, r3
 800703c:	d3eb      	bcc.n	8007016 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3724      	adds	r7, #36	; 0x24
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800704c:	b480      	push	{r7}
 800704e:	b089      	sub	sp, #36	; 0x24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	3303      	adds	r3, #3
 8007066:	089b      	lsrs	r3, r3, #2
 8007068:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800706a:	2300      	movs	r3, #0
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	e00b      	b.n	8007088 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	601a      	str	r2, [r3, #0]
    pDest++;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	3304      	adds	r3, #4
 8007080:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	3301      	adds	r3, #1
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	d3ef      	bcc.n	8007070 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007090:	69fb      	ldr	r3, [r7, #28]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3724      	adds	r7, #36	; 0x24
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800709e:	b480      	push	{r7}
 80070a0:	b085      	sub	sp, #20
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d12c      	bne.n	8007114 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	db12      	blt.n	80070f2 <USB_EPSetStall+0x54>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00f      	beq.n	80070f2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070f0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	e02b      	b.n	800716c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	db12      	blt.n	800714c <USB_EPSetStall+0xae>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00f      	beq.n	800714c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	0151      	lsls	r1, r2, #5
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	440a      	add	r2, r1
 8007142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800714a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	440a      	add	r2, r1
 8007162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800716a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d128      	bne.n	80071e8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	78db      	ldrb	r3, [r3, #3]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d003      	beq.n	80071c6 <USB_EPClearStall+0x4c>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	78db      	ldrb	r3, [r3, #3]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d138      	bne.n	8007238 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	0151      	lsls	r1, r2, #5
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	440a      	add	r2, r1
 80071dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	e027      	b.n	8007238 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	0151      	lsls	r1, r2, #5
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	440a      	add	r2, r1
 80071fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007202:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007206:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	78db      	ldrb	r3, [r3, #3]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d003      	beq.n	8007218 <USB_EPClearStall+0x9e>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	78db      	ldrb	r3, [r3, #3]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d10f      	bne.n	8007238 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	440a      	add	r2, r1
 800722e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007236:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007264:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007268:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800727a:	68f9      	ldr	r1, [r7, #12]
 800727c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007280:	4313      	orrs	r3, r2
 8007282:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072ac:	f023 0303 	bic.w	r3, r3, #3
 80072b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072c0:	f023 0302 	bic.w	r3, r3, #2
 80072c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007302:	f043 0302 	orr.w	r3, r3, #2
 8007306:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4013      	ands	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800732e:	68fb      	ldr	r3, [r7, #12]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4013      	ands	r3, r2
 800735e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	0c1b      	lsrs	r3, r3, #16
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	4013      	ands	r3, r2
 8007392:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	b29b      	uxth	r3, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	4013      	ands	r3, r2
 80073d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073d2:	68bb      	ldr	r3, [r7, #8]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007402:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
 8007410:	01db      	lsls	r3, r3, #7
 8007412:	b2db      	uxtb	r3, r3
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4013      	ands	r3, r2
 800742c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800742e:	68bb      	ldr	r3, [r7, #8]
}
 8007430:	4618      	mov	r0, r3
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	f003 0301 	and.w	r3, r3, #1
}
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007472:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007476:	f023 0307 	bic.w	r3, r3, #7
 800747a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800748a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800748e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
	...

080074a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	460b      	mov	r3, r1
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	333c      	adds	r3, #60	; 0x3c
 80074b6:	3304      	adds	r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4a26      	ldr	r2, [pc, #152]	; (8007558 <USB_EP0_OutStart+0xb8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d90a      	bls.n	80074da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d4:	d101      	bne.n	80074da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	e037      	b.n	800754a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	461a      	mov	r2, r3
 80074e2:	2300      	movs	r3, #0
 80074e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007508:	f043 0318 	orr.w	r3, r3, #24
 800750c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800751c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007520:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d10f      	bne.n	8007548 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007542:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007546:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	4f54300a 	.word	0x4f54300a

0800755c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <USB_CoreReset+0x64>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d901      	bls.n	800757a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e01b      	b.n	80075b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	daf2      	bge.n	8007568 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f043 0201 	orr.w	r2, r3, #1
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3301      	adds	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <USB_CoreReset+0x64>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d901      	bls.n	80075a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e006      	b.n	80075b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d0f0      	beq.n	8007592 <USB_CoreReset+0x36>

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	00030d40 	.word	0x00030d40

080075c4 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 80075d0:	2044      	movs	r0, #68	; 0x44
 80075d2:	f001 fead 	bl	8009330 <USBD_static_malloc>
 80075d6:	4602      	mov	r2, r0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e016      	b.n	800761a <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 80075f4:	2340      	movs	r3, #64	; 0x40
 80075f6:	2202      	movs	r2, #2
 80075f8:	2181      	movs	r1, #129	; 0x81
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 fd75 	bl	80090ea <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 8007600:	2340      	movs	r3, #64	; 0x40
 8007602:	2202      	movs	r2, #2
 8007604:	2101      	movs	r1, #1
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fd6f 	bl	80090ea <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 800760c:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800760e:	2340      	movs	r3, #64	; 0x40
 8007610:	2101      	movs	r1, #1
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 fe58 	bl	80092c8 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800762e:	2181      	movs	r1, #129	; 0x81
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 fd80 	bl	8009136 <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 8007636:	2101      	movs	r1, #1
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 fd7c 	bl	8009136 <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <USBD_Midi_Setup+0x26>
 800765e:	2b20      	cmp	r3, #32
 8007660:	d10b      	bne.n	800767a <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f937 	bl	80088d8 <USBD_CtlError>
      return USBD_FAIL;
 800766a:	2303      	movs	r3, #3
 800766c:	e006      	b.n	800767c <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 f931 	bl	80088d8 <USBD_CtlError>
      return USBD_FAIL;
 8007676:	2303      	movs	r3, #3
 8007678:	e000      	b.n	800767c <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2265      	movs	r2, #101	; 0x65
 8007690:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 8007692:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <USBD_Midi_GetCfgDesc+0x1c>)
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	20000064 	.word	0x20000064

080076a4 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007746:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 fddc 	bl	800930a <USBD_LL_GetRxDataSize>
 8007752:	4602      	mov	r2, r0
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	e00c      	b.n	800777c <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68f9      	ldr	r1, [r7, #12]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	440a      	add	r2, r1
 8007770:	2104      	movs	r1, #4
 8007772:	4610      	mov	r0, r2
 8007774:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	3304      	adds	r3, #4
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	429a      	cmp	r2, r3
 8007784:	d3ed      	bcc.n	8007762 <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 8007786:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 8007788:	2340      	movs	r3, #64	; 0x40
 800778a:	2101      	movs	r1, #1
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fd9b 	bl	80092c8 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	220a      	movs	r2, #10
 80077a8:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 80077aa:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	200000cc 	.word	0x200000cc

080077bc <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80077c6:	2303      	movs	r3, #3
 80077c8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	4613      	mov	r3, r2
 80077f6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80077fe:	2303      	movs	r3, #3
 8007800:	e01f      	b.n	8007842 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	79fa      	ldrb	r2, [r7, #7]
 8007834:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f001 fbf0 	bl	800901c <USBD_LL_Init>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007840:	7dfb      	ldrb	r3, [r7, #23]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800785e:	2303      	movs	r3, #3
 8007860:	e016      	b.n	8007890 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	f107 020e 	add.w	r2, r7, #14
 8007882:	4610      	mov	r0, r2
 8007884:	4798      	blx	r3
 8007886:	4602      	mov	r2, r0
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 fc07 	bl	80090b4 <USBD_LL_Start>
 80078a6:	4603      	mov	r3, r0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	460b      	mov	r3, r1
 80078d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80078d2:	2303      	movs	r3, #3
 80078d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d009      	beq.n	80078f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	4611      	mov	r1, r2
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b082      	sub	sp, #8
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	78fa      	ldrb	r2, [r7, #3]
 800791e:	4611      	mov	r1, r2
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	4798      	blx	r3
  }

  return USBD_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 ff8f 	bl	8008864 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2b02      	cmp	r3, #2
 8007968:	d01a      	beq.n	80079a0 <USBD_LL_SetupStage+0x72>
 800796a:	2b02      	cmp	r3, #2
 800796c:	d822      	bhi.n	80079b4 <USBD_LL_SetupStage+0x86>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <USBD_LL_SetupStage+0x4a>
 8007972:	2b01      	cmp	r3, #1
 8007974:	d00a      	beq.n	800798c <USBD_LL_SetupStage+0x5e>
 8007976:	e01d      	b.n	80079b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fa61 	bl	8007e48 <USBD_StdDevReq>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
      break;
 800798a:	e020      	b.n	80079ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fac5 	bl	8007f24 <USBD_StdItfReq>
 800799a:	4603      	mov	r3, r0
 800799c:	73fb      	strb	r3, [r7, #15]
      break;
 800799e:	e016      	b.n	80079ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fb04 	bl	8007fb6 <USBD_StdEPReq>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
      break;
 80079b2:	e00c      	b.n	80079ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 fbd6 	bl	8009174 <USBD_LL_StallEP>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
      break;
 80079cc:	bf00      	nop
  }

  return ret;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	460b      	mov	r3, r1
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d138      	bne.n	8007a5e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d14a      	bne.n	8007a94 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d913      	bls.n	8007a32 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	1ad2      	subs	r2, r2, r3
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4293      	cmp	r3, r2
 8007a22:	bf28      	it	cs
 8007a24:	4613      	movcs	r3, r2
 8007a26:	461a      	mov	r2, r3
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 fff1 	bl	8008a12 <USBD_CtlContinueRx>
 8007a30:	e030      	b.n	8007a94 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d10b      	bne.n	8007a56 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 ffec 	bl	8008a34 <USBD_CtlSendStatus>
 8007a5c:	e01a      	b.n	8007a94 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d114      	bne.n	8007a94 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00e      	beq.n	8007a94 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	7afa      	ldrb	r2, [r7, #11]
 8007a80:	4611      	mov	r1, r2
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	4798      	blx	r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	e000      	b.n	8007a96 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d16b      	bne.n	8007b8a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3314      	adds	r3, #20
 8007ab6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d156      	bne.n	8007b70 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d914      	bls.n	8007af8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	1ad2      	subs	r2, r2, r3
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 ff83 	bl	80089f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aea:	2300      	movs	r3, #0
 8007aec:	2200      	movs	r2, #0
 8007aee:	2100      	movs	r1, #0
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f001 fbe9 	bl	80092c8 <USBD_LL_PrepareReceive>
 8007af6:	e03b      	b.n	8007b70 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d11c      	bne.n	8007b3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d316      	bcc.n	8007b3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d20f      	bcs.n	8007b3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2100      	movs	r1, #0
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 ff64 	bl	80089f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b30:	2300      	movs	r3, #0
 8007b32:	2200      	movs	r2, #0
 8007b34:	2100      	movs	r1, #0
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f001 fbc6 	bl	80092c8 <USBD_LL_PrepareReceive>
 8007b3c:	e018      	b.n	8007b70 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d10b      	bne.n	8007b62 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b62:	2180      	movs	r1, #128	; 0x80
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f001 fb05 	bl	8009174 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 ff75 	bl	8008a5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d122      	bne.n	8007bc0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f7ff fe98 	bl	80078b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b88:	e01a      	b.n	8007bc0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d114      	bne.n	8007bc0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00e      	beq.n	8007bc0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	7afa      	ldrb	r2, [r7, #11]
 8007bac:	4611      	mov	r1, r2
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	4798      	blx	r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	e000      	b.n	8007bc2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e02f      	b.n	8007c5e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00f      	beq.n	8007c28 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6852      	ldr	r2, [r2, #4]
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	4611      	mov	r1, r2
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 fa5b 	bl	80090ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2240      	movs	r2, #64	; 0x40
 8007c40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c44:	2340      	movs	r3, #64	; 0x40
 8007c46:	2200      	movs	r2, #0
 8007c48:	2180      	movs	r1, #128	; 0x80
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fa4d 	bl	80090ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2240      	movs	r2, #64	; 0x40
 8007c5a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	78fa      	ldrb	r2, [r7, #3]
 8007c76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2204      	movs	r2, #4
 8007ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d106      	bne.n	8007cd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e012      	b.n	8007d1e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d10b      	bne.n	8007d1c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e014      	b.n	8007d6a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d10d      	bne.n	8007d68 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	78fa      	ldrb	r2, [r7, #3]
 8007d62:	4611      	mov	r1, r2
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e014      	b.n	8007db6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d10d      	bne.n	8007db4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	4611      	mov	r1, r2
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d009      	beq.n	8007e02 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6852      	ldr	r2, [r2, #4]
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
  }

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	3301      	adds	r3, #1
 8007e22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e2a:	8a3b      	ldrh	r3, [r7, #16]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	b21a      	sxth	r2, r3
 8007e30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	b21b      	sxth	r3, r3
 8007e38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e3a:	89fb      	ldrh	r3, [r7, #14]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d005      	beq.n	8007e6e <USBD_StdDevReq+0x26>
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d853      	bhi.n	8007f0e <USBD_StdDevReq+0xc6>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <USBD_StdDevReq+0x3a>
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d14f      	bne.n	8007f0e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e80:	e04a      	b.n	8007f18 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d83b      	bhi.n	8007f02 <USBD_StdDevReq+0xba>
 8007e8a:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_StdDevReq+0x48>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007ee5 	.word	0x08007ee5
 8007e94:	08007ef9 	.word	0x08007ef9
 8007e98:	08007f03 	.word	0x08007f03
 8007e9c:	08007eef 	.word	0x08007eef
 8007ea0:	08007f03 	.word	0x08007f03
 8007ea4:	08007ec3 	.word	0x08007ec3
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007f03 	.word	0x08007f03
 8007eb0:	08007edb 	.word	0x08007edb
 8007eb4:	08007ecd 	.word	0x08007ecd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9de 	bl	800827c <USBD_GetDescriptor>
          break;
 8007ec0:	e024      	b.n	8007f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fb43 	bl	8008550 <USBD_SetAddress>
          break;
 8007eca:	e01f      	b.n	8007f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fb82 	bl	80085d8 <USBD_SetConfig>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]
          break;
 8007ed8:	e018      	b.n	8007f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fc21 	bl	8008724 <USBD_GetConfig>
          break;
 8007ee2:	e013      	b.n	8007f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fc52 	bl	8008790 <USBD_GetStatus>
          break;
 8007eec:	e00e      	b.n	8007f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fc81 	bl	80087f8 <USBD_SetFeature>
          break;
 8007ef6:	e009      	b.n	8007f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc90 	bl	8008820 <USBD_ClrFeature>
          break;
 8007f00:	e004      	b.n	8007f0c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fce7 	bl	80088d8 <USBD_CtlError>
          break;
 8007f0a:	bf00      	nop
      }
      break;
 8007f0c:	e004      	b.n	8007f18 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fce1 	bl	80088d8 <USBD_CtlError>
      break;
 8007f16:	bf00      	nop
  }

  return ret;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop

08007f24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f3a:	2b40      	cmp	r3, #64	; 0x40
 8007f3c:	d005      	beq.n	8007f4a <USBD_StdItfReq+0x26>
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d82f      	bhi.n	8007fa2 <USBD_StdItfReq+0x7e>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <USBD_StdItfReq+0x26>
 8007f46:	2b20      	cmp	r3, #32
 8007f48:	d12b      	bne.n	8007fa2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d81d      	bhi.n	8007f94 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	889b      	ldrh	r3, [r3, #4]
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d813      	bhi.n	8007f8a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4798      	blx	r3
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	88db      	ldrh	r3, [r3, #6]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d110      	bne.n	8007f9e <USBD_StdItfReq+0x7a>
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10d      	bne.n	8007f9e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fd56 	bl	8008a34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f88:	e009      	b.n	8007f9e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fca3 	bl	80088d8 <USBD_CtlError>
          break;
 8007f92:	e004      	b.n	8007f9e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fc9e 	bl	80088d8 <USBD_CtlError>
          break;
 8007f9c:	e000      	b.n	8007fa0 <USBD_StdItfReq+0x7c>
          break;
 8007f9e:	bf00      	nop
      }
      break;
 8007fa0:	e004      	b.n	8007fac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fc97 	bl	80088d8 <USBD_CtlError>
      break;
 8007faa:	bf00      	nop
  }

  return ret;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	889b      	ldrh	r3, [r3, #4]
 8007fc8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d007      	beq.n	8007fe6 <USBD_StdEPReq+0x30>
 8007fd6:	2b40      	cmp	r3, #64	; 0x40
 8007fd8:	f200 8145 	bhi.w	8008266 <USBD_StdEPReq+0x2b0>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00c      	beq.n	8007ffa <USBD_StdEPReq+0x44>
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	f040 8140 	bne.w	8008266 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	4798      	blx	r3
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff8:	e13a      	b.n	8008270 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d007      	beq.n	8008012 <USBD_StdEPReq+0x5c>
 8008002:	2b03      	cmp	r3, #3
 8008004:	f300 8129 	bgt.w	800825a <USBD_StdEPReq+0x2a4>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d07f      	beq.n	800810c <USBD_StdEPReq+0x156>
 800800c:	2b01      	cmp	r3, #1
 800800e:	d03c      	beq.n	800808a <USBD_StdEPReq+0xd4>
 8008010:	e123      	b.n	800825a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d002      	beq.n	8008024 <USBD_StdEPReq+0x6e>
 800801e:	2b03      	cmp	r3, #3
 8008020:	d016      	beq.n	8008050 <USBD_StdEPReq+0x9a>
 8008022:	e02c      	b.n	800807e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00d      	beq.n	8008046 <USBD_StdEPReq+0x90>
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	2b80      	cmp	r3, #128	; 0x80
 800802e:	d00a      	beq.n	8008046 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f89d 	bl	8009174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 f899 	bl	8009174 <USBD_LL_StallEP>
 8008042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008044:	e020      	b.n	8008088 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fc45 	bl	80088d8 <USBD_CtlError>
              break;
 800804e:	e01b      	b.n	8008088 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	885b      	ldrh	r3, [r3, #2]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10e      	bne.n	8008076 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00b      	beq.n	8008076 <USBD_StdEPReq+0xc0>
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b80      	cmp	r3, #128	; 0x80
 8008062:	d008      	beq.n	8008076 <USBD_StdEPReq+0xc0>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	88db      	ldrh	r3, [r3, #6]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d104      	bne.n	8008076 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f87f 	bl	8009174 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fcdc 	bl	8008a34 <USBD_CtlSendStatus>

              break;
 800807c:	e004      	b.n	8008088 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fc29 	bl	80088d8 <USBD_CtlError>
              break;
 8008086:	bf00      	nop
          }
          break;
 8008088:	e0ec      	b.n	8008264 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d002      	beq.n	800809c <USBD_StdEPReq+0xe6>
 8008096:	2b03      	cmp	r3, #3
 8008098:	d016      	beq.n	80080c8 <USBD_StdEPReq+0x112>
 800809a:	e030      	b.n	80080fe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00d      	beq.n	80080be <USBD_StdEPReq+0x108>
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b80      	cmp	r3, #128	; 0x80
 80080a6:	d00a      	beq.n	80080be <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 f861 	bl	8009174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080b2:	2180      	movs	r1, #128	; 0x80
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 f85d 	bl	8009174 <USBD_LL_StallEP>
 80080ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080bc:	e025      	b.n	800810a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fc09 	bl	80088d8 <USBD_CtlError>
              break;
 80080c6:	e020      	b.n	800810a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	885b      	ldrh	r3, [r3, #2]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d11b      	bne.n	8008108 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 f867 	bl	80091b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fca5 	bl	8008a34 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	4798      	blx	r3
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80080fc:	e004      	b.n	8008108 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fbe9 	bl	80088d8 <USBD_CtlError>
              break;
 8008106:	e000      	b.n	800810a <USBD_StdEPReq+0x154>
              break;
 8008108:	bf00      	nop
          }
          break;
 800810a:	e0ab      	b.n	8008264 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d002      	beq.n	800811e <USBD_StdEPReq+0x168>
 8008118:	2b03      	cmp	r3, #3
 800811a:	d032      	beq.n	8008182 <USBD_StdEPReq+0x1cc>
 800811c:	e097      	b.n	800824e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <USBD_StdEPReq+0x17e>
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b80      	cmp	r3, #128	; 0x80
 8008128:	d004      	beq.n	8008134 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fbd3 	bl	80088d8 <USBD_CtlError>
                break;
 8008132:	e091      	b.n	8008258 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008138:	2b00      	cmp	r3, #0
 800813a:	da0b      	bge.n	8008154 <USBD_StdEPReq+0x19e>
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	3310      	adds	r3, #16
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	4413      	add	r3, r2
 8008150:	3304      	adds	r3, #4
 8008152:	e00b      	b.n	800816c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	4413      	add	r3, r2
 800816a:	3304      	adds	r3, #4
 800816c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2202      	movs	r2, #2
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fc1d 	bl	80089ba <USBD_CtlSendData>
              break;
 8008180:	e06a      	b.n	8008258 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008186:	2b00      	cmp	r3, #0
 8008188:	da11      	bge.n	80081ae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	f003 020f 	and.w	r2, r3, #15
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	3324      	adds	r3, #36	; 0x24
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d117      	bne.n	80081d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb96 	bl	80088d8 <USBD_CtlError>
                  break;
 80081ac:	e054      	b.n	8008258 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	f003 020f 	and.w	r2, r3, #15
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d104      	bne.n	80081d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fb83 	bl	80088d8 <USBD_CtlError>
                  break;
 80081d2:	e041      	b.n	8008258 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da0b      	bge.n	80081f4 <USBD_StdEPReq+0x23e>
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	3310      	adds	r3, #16
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	3304      	adds	r3, #4
 80081f2:	e00b      	b.n	800820c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	4413      	add	r3, r2
 800820a:	3304      	adds	r3, #4
 800820c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <USBD_StdEPReq+0x264>
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b80      	cmp	r3, #128	; 0x80
 8008218:	d103      	bne.n	8008222 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e00e      	b.n	8008240 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 ffe2 	bl	80091f0 <USBD_LL_IsStallEP>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2201      	movs	r2, #1
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	e002      	b.n	8008240 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2202      	movs	r2, #2
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fbb7 	bl	80089ba <USBD_CtlSendData>
              break;
 800824c:	e004      	b.n	8008258 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fb41 	bl	80088d8 <USBD_CtlError>
              break;
 8008256:	bf00      	nop
          }
          break;
 8008258:	e004      	b.n	8008264 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fb3b 	bl	80088d8 <USBD_CtlError>
          break;
 8008262:	bf00      	nop
      }
      break;
 8008264:	e004      	b.n	8008270 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fb35 	bl	80088d8 <USBD_CtlError>
      break;
 800826e:	bf00      	nop
  }

  return ret;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	885b      	ldrh	r3, [r3, #2]
 8008296:	0a1b      	lsrs	r3, r3, #8
 8008298:	b29b      	uxth	r3, r3
 800829a:	3b01      	subs	r3, #1
 800829c:	2b06      	cmp	r3, #6
 800829e:	f200 8128 	bhi.w	80084f2 <USBD_GetDescriptor+0x276>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBD_GetDescriptor+0x2c>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082c5 	.word	0x080082c5
 80082ac:	080082dd 	.word	0x080082dd
 80082b0:	0800831d 	.word	0x0800831d
 80082b4:	080084f3 	.word	0x080084f3
 80082b8:	080084f3 	.word	0x080084f3
 80082bc:	08008493 	.word	0x08008493
 80082c0:	080084bf 	.word	0x080084bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	7c12      	ldrb	r2, [r2, #16]
 80082d0:	f107 0108 	add.w	r1, r7, #8
 80082d4:	4610      	mov	r0, r2
 80082d6:	4798      	blx	r3
 80082d8:	60f8      	str	r0, [r7, #12]
      break;
 80082da:	e112      	b.n	8008502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	7c1b      	ldrb	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10d      	bne.n	8008300 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	f107 0208 	add.w	r2, r7, #8
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
 80082f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3301      	adds	r3, #1
 80082fa:	2202      	movs	r2, #2
 80082fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082fe:	e100      	b.n	8008502 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	f107 0208 	add.w	r2, r7, #8
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	2202      	movs	r2, #2
 8008318:	701a      	strb	r2, [r3, #0]
      break;
 800831a:	e0f2      	b.n	8008502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	885b      	ldrh	r3, [r3, #2]
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b05      	cmp	r3, #5
 8008324:	f200 80ac 	bhi.w	8008480 <USBD_GetDescriptor+0x204>
 8008328:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <USBD_GetDescriptor+0xb4>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	08008349 	.word	0x08008349
 8008334:	0800837d 	.word	0x0800837d
 8008338:	080083b1 	.word	0x080083b1
 800833c:	080083e5 	.word	0x080083e5
 8008340:	08008419 	.word	0x08008419
 8008344:	0800844d 	.word	0x0800844d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7c12      	ldrb	r2, [r2, #16]
 8008360:	f107 0108 	add.w	r1, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800836a:	e091      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fab2 	bl	80088d8 <USBD_CtlError>
            err++;
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	3301      	adds	r3, #1
 8008378:	72fb      	strb	r3, [r7, #11]
          break;
 800837a:	e089      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	7c12      	ldrb	r2, [r2, #16]
 8008394:	f107 0108 	add.w	r1, r7, #8
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
 800839c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839e:	e077      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa98 	bl	80088d8 <USBD_CtlError>
            err++;
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	3301      	adds	r3, #1
 80083ac:	72fb      	strb	r3, [r7, #11]
          break;
 80083ae:	e06f      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7c12      	ldrb	r2, [r2, #16]
 80083c8:	f107 0108 	add.w	r1, r7, #8
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d2:	e05d      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa7e 	bl	80088d8 <USBD_CtlError>
            err++;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3301      	adds	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]
          break;
 80083e2:	e055      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7c12      	ldrb	r2, [r2, #16]
 80083fc:	f107 0108 	add.w	r1, r7, #8
 8008400:	4610      	mov	r0, r2
 8008402:	4798      	blx	r3
 8008404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008406:	e043      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa64 	bl	80088d8 <USBD_CtlError>
            err++;
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	3301      	adds	r3, #1
 8008414:	72fb      	strb	r3, [r7, #11]
          break;
 8008416:	e03b      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	7c12      	ldrb	r2, [r2, #16]
 8008430:	f107 0108 	add.w	r1, r7, #8
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
 8008438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800843a:	e029      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa4a 	bl	80088d8 <USBD_CtlError>
            err++;
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	3301      	adds	r3, #1
 8008448:	72fb      	strb	r3, [r7, #11]
          break;
 800844a:	e021      	b.n	8008490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00b      	beq.n	8008470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	7c12      	ldrb	r2, [r2, #16]
 8008464:	f107 0108 	add.w	r1, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846e:	e00f      	b.n	8008490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa30 	bl	80088d8 <USBD_CtlError>
            err++;
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	3301      	adds	r3, #1
 800847c:	72fb      	strb	r3, [r7, #11]
          break;
 800847e:	e007      	b.n	8008490 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa28 	bl	80088d8 <USBD_CtlError>
          err++;
 8008488:	7afb      	ldrb	r3, [r7, #11]
 800848a:	3301      	adds	r3, #1
 800848c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800848e:	bf00      	nop
      }
      break;
 8008490:	e037      	b.n	8008502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	7c1b      	ldrb	r3, [r3, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a2:	f107 0208 	add.w	r2, r7, #8
 80084a6:	4610      	mov	r0, r2
 80084a8:	4798      	blx	r3
 80084aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084ac:	e029      	b.n	8008502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fa11 	bl	80088d8 <USBD_CtlError>
        err++;
 80084b6:	7afb      	ldrb	r3, [r7, #11]
 80084b8:	3301      	adds	r3, #1
 80084ba:	72fb      	strb	r3, [r7, #11]
      break;
 80084bc:	e021      	b.n	8008502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	7c1b      	ldrb	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10d      	bne.n	80084e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	f107 0208 	add.w	r2, r7, #8
 80084d2:	4610      	mov	r0, r2
 80084d4:	4798      	blx	r3
 80084d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3301      	adds	r3, #1
 80084dc:	2207      	movs	r2, #7
 80084de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084e0:	e00f      	b.n	8008502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f9f7 	bl	80088d8 <USBD_CtlError>
        err++;
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	3301      	adds	r3, #1
 80084ee:	72fb      	strb	r3, [r7, #11]
      break;
 80084f0:	e007      	b.n	8008502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f9ef 	bl	80088d8 <USBD_CtlError>
      err++;
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	3301      	adds	r3, #1
 80084fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008500:	bf00      	nop
  }

  if (err != 0U)
 8008502:	7afb      	ldrb	r3, [r7, #11]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d11e      	bne.n	8008546 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	88db      	ldrh	r3, [r3, #6]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d016      	beq.n	800853e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008510:	893b      	ldrh	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00e      	beq.n	8008534 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	88da      	ldrh	r2, [r3, #6]
 800851a:	893b      	ldrh	r3, [r7, #8]
 800851c:	4293      	cmp	r3, r2
 800851e:	bf28      	it	cs
 8008520:	4613      	movcs	r3, r2
 8008522:	b29b      	uxth	r3, r3
 8008524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008526:	893b      	ldrh	r3, [r7, #8]
 8008528:	461a      	mov	r2, r3
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fa44 	bl	80089ba <USBD_CtlSendData>
 8008532:	e009      	b.n	8008548 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f9ce 	bl	80088d8 <USBD_CtlError>
 800853c:	e004      	b.n	8008548 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa78 	bl	8008a34 <USBD_CtlSendStatus>
 8008544:	e000      	b.n	8008548 <USBD_GetDescriptor+0x2cc>
    return;
 8008546:	bf00      	nop
  }
}
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop

08008550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	889b      	ldrh	r3, [r3, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d131      	bne.n	80085c6 <USBD_SetAddress+0x76>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	88db      	ldrh	r3, [r3, #6]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d12d      	bne.n	80085c6 <USBD_SetAddress+0x76>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	2b7f      	cmp	r3, #127	; 0x7f
 8008570:	d829      	bhi.n	80085c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	885b      	ldrh	r3, [r3, #2]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800857c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b03      	cmp	r3, #3
 8008588:	d104      	bne.n	8008594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f9a3 	bl	80088d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008592:	e01d      	b.n	80085d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	7bfa      	ldrb	r2, [r7, #15]
 8008598:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fe51 	bl	8009248 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa44 	bl	8008a34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2202      	movs	r2, #2
 80085b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ba:	e009      	b.n	80085d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c4:	e004      	b.n	80085d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f985 	bl	80088d8 <USBD_CtlError>
  }
}
 80085ce:	bf00      	nop
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	885b      	ldrh	r3, [r3, #2]
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	4b4c      	ldr	r3, [pc, #304]	; (8008720 <USBD_SetConfig+0x148>)
 80085ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085f0:	4b4b      	ldr	r3, [pc, #300]	; (8008720 <USBD_SetConfig+0x148>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d905      	bls.n	8008604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f96c 	bl	80088d8 <USBD_CtlError>
    return USBD_FAIL;
 8008600:	2303      	movs	r3, #3
 8008602:	e088      	b.n	8008716 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d002      	beq.n	8008616 <USBD_SetConfig+0x3e>
 8008610:	2b03      	cmp	r3, #3
 8008612:	d025      	beq.n	8008660 <USBD_SetConfig+0x88>
 8008614:	e071      	b.n	80086fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008616:	4b42      	ldr	r3, [pc, #264]	; (8008720 <USBD_SetConfig+0x148>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01c      	beq.n	8008658 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800861e:	4b40      	ldr	r3, [pc, #256]	; (8008720 <USBD_SetConfig+0x148>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008628:	4b3d      	ldr	r3, [pc, #244]	; (8008720 <USBD_SetConfig+0x148>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff f949 	bl	80078c6 <USBD_SetClassConfig>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d004      	beq.n	8008648 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f949 	bl	80088d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008646:	e065      	b.n	8008714 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f9f3 	bl	8008a34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2203      	movs	r2, #3
 8008652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008656:	e05d      	b.n	8008714 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f9eb 	bl	8008a34 <USBD_CtlSendStatus>
      break;
 800865e:	e059      	b.n	8008714 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008660:	4b2f      	ldr	r3, [pc, #188]	; (8008720 <USBD_SetConfig+0x148>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d112      	bne.n	800868e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008670:	4b2b      	ldr	r3, [pc, #172]	; (8008720 <USBD_SetConfig+0x148>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800867a:	4b29      	ldr	r3, [pc, #164]	; (8008720 <USBD_SetConfig+0x148>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7ff f93c 	bl	80078fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f9d4 	bl	8008a34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800868c:	e042      	b.n	8008714 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800868e:	4b24      	ldr	r3, [pc, #144]	; (8008720 <USBD_SetConfig+0x148>)
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	429a      	cmp	r2, r3
 800869a:	d02a      	beq.n	80086f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7ff f92a 	bl	80078fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80086aa:	4b1d      	ldr	r3, [pc, #116]	; (8008720 <USBD_SetConfig+0x148>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086b4:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <USBD_SetConfig+0x148>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff f903 	bl	80078c6 <USBD_SetClassConfig>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00f      	beq.n	80086ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f903 	bl	80088d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff f90f 	bl	80078fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086e8:	e014      	b.n	8008714 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f9a2 	bl	8008a34 <USBD_CtlSendStatus>
      break;
 80086f0:	e010      	b.n	8008714 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f99e 	bl	8008a34 <USBD_CtlSendStatus>
      break;
 80086f8:	e00c      	b.n	8008714 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f8eb 	bl	80088d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008702:	4b07      	ldr	r3, [pc, #28]	; (8008720 <USBD_SetConfig+0x148>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff f8f8 	bl	80078fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800870e:	2303      	movs	r3, #3
 8008710:	73fb      	strb	r3, [r7, #15]
      break;
 8008712:	bf00      	nop
  }

  return ret;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	200005c0 	.word	0x200005c0

08008724 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	88db      	ldrh	r3, [r3, #6]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d004      	beq.n	8008740 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f8cd 	bl	80088d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800873e:	e023      	b.n	8008788 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	dc02      	bgt.n	8008752 <USBD_GetConfig+0x2e>
 800874c:	2b00      	cmp	r3, #0
 800874e:	dc03      	bgt.n	8008758 <USBD_GetConfig+0x34>
 8008750:	e015      	b.n	800877e <USBD_GetConfig+0x5a>
 8008752:	2b03      	cmp	r3, #3
 8008754:	d00b      	beq.n	800876e <USBD_GetConfig+0x4a>
 8008756:	e012      	b.n	800877e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3308      	adds	r3, #8
 8008762:	2201      	movs	r2, #1
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f927 	bl	80089ba <USBD_CtlSendData>
        break;
 800876c:	e00c      	b.n	8008788 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3304      	adds	r3, #4
 8008772:	2201      	movs	r2, #1
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f91f 	bl	80089ba <USBD_CtlSendData>
        break;
 800877c:	e004      	b.n	8008788 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f8a9 	bl	80088d8 <USBD_CtlError>
        break;
 8008786:	bf00      	nop
}
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d81e      	bhi.n	80087e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	88db      	ldrh	r3, [r3, #6]
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d004      	beq.n	80087ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f890 	bl	80088d8 <USBD_CtlError>
        break;
 80087b8:	e01a      	b.n	80087f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d005      	beq.n	80087d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f043 0202 	orr.w	r2, r3, #2
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	330c      	adds	r3, #12
 80087da:	2202      	movs	r2, #2
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f8eb 	bl	80089ba <USBD_CtlSendData>
      break;
 80087e4:	e004      	b.n	80087f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f875 	bl	80088d8 <USBD_CtlError>
      break;
 80087ee:	bf00      	nop
  }
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	885b      	ldrh	r3, [r3, #2]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d106      	bne.n	8008818 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f90e 	bl	8008a34 <USBD_CtlSendStatus>
  }
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	3b01      	subs	r3, #1
 8008834:	2b02      	cmp	r3, #2
 8008836:	d80b      	bhi.n	8008850 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	885b      	ldrh	r3, [r3, #2]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d10c      	bne.n	800885a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f8f3 	bl	8008a34 <USBD_CtlSendStatus>
      }
      break;
 800884e:	e004      	b.n	800885a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f840 	bl	80088d8 <USBD_CtlError>
      break;
 8008858:	e000      	b.n	800885c <USBD_ClrFeature+0x3c>
      break;
 800885a:	bf00      	nop
  }
}
 800885c:	bf00      	nop
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f7ff fabc 	bl	8007e0c <SWAPBYTE>
 8008894:	4603      	mov	r3, r0
 8008896:	461a      	mov	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3301      	adds	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3301      	adds	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7ff faaf 	bl	8007e0c <SWAPBYTE>
 80088ae:	4603      	mov	r3, r0
 80088b0:	461a      	mov	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff faa2 	bl	8007e0c <SWAPBYTE>
 80088c8:	4603      	mov	r3, r0
 80088ca:	461a      	mov	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	80da      	strh	r2, [r3, #6]
}
 80088d0:	bf00      	nop
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088e2:	2180      	movs	r1, #128	; 0x80
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fc45 	bl	8009174 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088ea:	2100      	movs	r1, #0
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fc41 	bl	8009174 <USBD_LL_StallEP>
}
 80088f2:	bf00      	nop
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d036      	beq.n	800897e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008914:	6938      	ldr	r0, [r7, #16]
 8008916:	f000 f836 	bl	8008986 <USBD_GetLen>
 800891a:	4603      	mov	r3, r0
 800891c:	3301      	adds	r3, #1
 800891e:	b29b      	uxth	r3, r3
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	b29a      	uxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	4413      	add	r3, r2
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	7812      	ldrb	r2, [r2, #0]
 8008932:	701a      	strb	r2, [r3, #0]
  idx++;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	3301      	adds	r3, #1
 8008938:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800893a:	7dfb      	ldrb	r3, [r7, #23]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	4413      	add	r3, r2
 8008940:	2203      	movs	r2, #3
 8008942:	701a      	strb	r2, [r3, #0]
  idx++;
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	3301      	adds	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800894a:	e013      	b.n	8008974 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	4413      	add	r3, r2
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	7812      	ldrb	r2, [r2, #0]
 8008956:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	3301      	adds	r3, #1
 800895c:	613b      	str	r3, [r7, #16]
    idx++;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	3301      	adds	r3, #1
 8008962:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	4413      	add	r3, r2
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
    idx++;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	3301      	adds	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e7      	bne.n	800894c <USBD_GetString+0x52>
 800897c:	e000      	b.n	8008980 <USBD_GetString+0x86>
    return;
 800897e:	bf00      	nop
  }
}
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008986:	b480      	push	{r7}
 8008988:	b085      	sub	sp, #20
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008996:	e005      	b.n	80089a4 <USBD_GetLen+0x1e>
  {
    len++;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	3301      	adds	r3, #1
 800899c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1f5      	bne.n	8008998 <USBD_GetLen+0x12>
  }

  return len;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2202      	movs	r2, #2
 80089ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	2100      	movs	r1, #0
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 fc50 	bl	8009286 <USBD_LL_Transmit>

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	2100      	movs	r1, #0
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 fc3f 	bl	8009286 <USBD_LL_Transmit>

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	2100      	movs	r1, #0
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 fc4f 	bl	80092c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2204      	movs	r2, #4
 8008a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a44:	2300      	movs	r3, #0
 8008a46:	2200      	movs	r2, #0
 8008a48:	2100      	movs	r1, #0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fc1b 	bl	8009286 <USBD_LL_Transmit>

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2205      	movs	r2, #5
 8008a66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2100      	movs	r1, #0
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fc29 	bl	80092c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 8008a84:	2200      	movs	r2, #0
 8008a86:	4912      	ldr	r1, [pc, #72]	; (8008ad0 <MX_USB_DEVICE_Init+0x50>)
 8008a88:	4812      	ldr	r0, [pc, #72]	; (8008ad4 <MX_USB_DEVICE_Init+0x54>)
 8008a8a:	f7fe feae 	bl	80077ea <USBD_Init>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 8008a94:	f7f8 ff14 	bl	80018c0 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 8008a98:	490f      	ldr	r1, [pc, #60]	; (8008ad8 <MX_USB_DEVICE_Init+0x58>)
 8008a9a:	480e      	ldr	r0, [pc, #56]	; (8008ad4 <MX_USB_DEVICE_Init+0x54>)
 8008a9c:	f7fe fed5 	bl	800784a <USBD_RegisterClass>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 8008aa6:	f7f8 ff0b 	bl	80018c0 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 8008aaa:	490c      	ldr	r1, [pc, #48]	; (8008adc <MX_USB_DEVICE_Init+0x5c>)
 8008aac:	4809      	ldr	r0, [pc, #36]	; (8008ad4 <MX_USB_DEVICE_Init+0x54>)
 8008aae:	f7fe fe85 	bl	80077bc <USBD_Midi_RegisterInterface>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 8008ab8:	f7f8 ff02 	bl	80018c0 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008abc:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <MX_USB_DEVICE_Init+0x54>)
 8008abe:	f7fe feeb 	bl	8007898 <USBD_Start>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 8008ac8:	f7f8 fefa 	bl	80018c0 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008acc:	bf00      	nop
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	200000d8 	.word	0x200000d8
 8008ad4:	20002304 	.word	0x20002304
 8008ad8:	2000002c 	.word	0x2000002c
 8008adc:	20000128 	.word	0x20000128

08008ae0 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	71fb      	strb	r3, [r7, #7]
 8008aea:	460b      	mov	r3, r1
 8008aec:	71bb      	strb	r3, [r7, #6]
 8008aee:	4613      	mov	r3, r2
 8008af0:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 8008af2:	230b      	movs	r3, #11
 8008af4:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8008afc:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 8008b06:	79bb      	ldrb	r3, [r7, #6]
 8008b08:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 8008b0a:	797b      	ldrb	r3, [r7, #5]
 8008b0c:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 8008b0e:	f107 0208 	add.w	r2, r7, #8
 8008b12:	2304      	movs	r3, #4
 8008b14:	2181      	movs	r1, #129	; 0x81
 8008b16:	4810      	ldr	r0, [pc, #64]	; (8008b58 <MX_USB_Send_Midi+0x78>)
 8008b18:	f000 fbb5 	bl	8009286 <USBD_LL_Transmit>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d00a      	beq.n	8008b38 <MX_USB_Send_Midi+0x58>
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	dc10      	bgt.n	8008b48 <MX_USB_Send_Midi+0x68>
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <MX_USB_Send_Midi+0x50>
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d008      	beq.n	8008b40 <MX_USB_Send_Midi+0x60>
 8008b2e:	e00b      	b.n	8008b48 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 8008b30:	480a      	ldr	r0, [pc, #40]	; (8008b5c <MX_USB_Send_Midi+0x7c>)
 8008b32:	f000 fd89 	bl	8009648 <puts>
        break;
 8008b36:	e00b      	b.n	8008b50 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 8008b38:	4809      	ldr	r0, [pc, #36]	; (8008b60 <MX_USB_Send_Midi+0x80>)
 8008b3a:	f000 fd85 	bl	8009648 <puts>
        break;
 8008b3e:	e007      	b.n	8008b50 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 8008b40:	4808      	ldr	r0, [pc, #32]	; (8008b64 <MX_USB_Send_Midi+0x84>)
 8008b42:	f000 fd81 	bl	8009648 <puts>
        break;
 8008b46:	e003      	b.n	8008b50 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 8008b48:	4807      	ldr	r0, [pc, #28]	; (8008b68 <MX_USB_Send_Midi+0x88>)
 8008b4a:	f000 fd7d 	bl	8009648 <puts>
    }
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20002304 	.word	0x20002304
 8008b5c:	0800a6a0 	.word	0x0800a6a0
 8008b60:	0800a6a4 	.word	0x0800a6a4
 8008b64:	0800a6b4 	.word	0x0800a6b4
 8008b68:	0800a6c4 	.word	0x0800a6c4

08008b6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2212      	movs	r2, #18
 8008b7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b7e:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	200000f4 	.word	0x200000f4

08008b90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2204      	movs	r2, #4
 8008ba0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ba2:	4b03      	ldr	r3, [pc, #12]	; (8008bb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20000108 	.word	0x20000108

08008bb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d105      	bne.n	8008bd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	4907      	ldr	r1, [pc, #28]	; (8008be8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bca:	4808      	ldr	r0, [pc, #32]	; (8008bec <USBD_FS_ProductStrDescriptor+0x38>)
 8008bcc:	f7ff fe95 	bl	80088fa <USBD_GetString>
 8008bd0:	e004      	b.n	8008bdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4904      	ldr	r1, [pc, #16]	; (8008be8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bd6:	4805      	ldr	r0, [pc, #20]	; (8008bec <USBD_FS_ProductStrDescriptor+0x38>)
 8008bd8:	f7ff fe8f 	bl	80088fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	200025d4 	.word	0x200025d4
 8008bec:	0800a6e0 	.word	0x0800a6e0

08008bf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	4904      	ldr	r1, [pc, #16]	; (8008c10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c00:	4804      	ldr	r0, [pc, #16]	; (8008c14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c02:	f7ff fe7a 	bl	80088fa <USBD_GetString>
  return USBD_StrDesc;
 8008c06:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	200025d4 	.word	0x200025d4
 8008c14:	0800a6f4 	.word	0x0800a6f4

08008c18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	6039      	str	r1, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	221a      	movs	r2, #26
 8008c28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c2a:	f000 f843 	bl	8008cb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c2e:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	2000010c 	.word	0x2000010c

08008c3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	6039      	str	r1, [r7, #0]
 8008c46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	4907      	ldr	r1, [pc, #28]	; (8008c70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c52:	4808      	ldr	r0, [pc, #32]	; (8008c74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c54:	f7ff fe51 	bl	80088fa <USBD_GetString>
 8008c58:	e004      	b.n	8008c64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	4904      	ldr	r1, [pc, #16]	; (8008c70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c5e:	4805      	ldr	r0, [pc, #20]	; (8008c74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c60:	f7ff fe4b 	bl	80088fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c64:	4b02      	ldr	r3, [pc, #8]	; (8008c70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	200025d4 	.word	0x200025d4
 8008c74:	0800a708 	.word	0x0800a708

08008c78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	4907      	ldr	r1, [pc, #28]	; (8008cac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c8e:	4808      	ldr	r0, [pc, #32]	; (8008cb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c90:	f7ff fe33 	bl	80088fa <USBD_GetString>
 8008c94:	e004      	b.n	8008ca0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	4904      	ldr	r1, [pc, #16]	; (8008cac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c9a:	4805      	ldr	r0, [pc, #20]	; (8008cb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c9c:	f7ff fe2d 	bl	80088fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ca0:	4b02      	ldr	r3, [pc, #8]	; (8008cac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	200025d4 	.word	0x200025d4
 8008cb0:	0800a718 	.word	0x0800a718

08008cb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cba:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <Get_SerialNum+0x44>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cc0:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <Get_SerialNum+0x48>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cc6:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <Get_SerialNum+0x4c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d009      	beq.n	8008cee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cda:	2208      	movs	r2, #8
 8008cdc:	4909      	ldr	r1, [pc, #36]	; (8008d04 <Get_SerialNum+0x50>)
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 f814 	bl	8008d0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ce4:	2204      	movs	r2, #4
 8008ce6:	4908      	ldr	r1, [pc, #32]	; (8008d08 <Get_SerialNum+0x54>)
 8008ce8:	68b8      	ldr	r0, [r7, #8]
 8008cea:	f000 f80f 	bl	8008d0c <IntToUnicode>
  }
}
 8008cee:	bf00      	nop
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	1fff7a10 	.word	0x1fff7a10
 8008cfc:	1fff7a14 	.word	0x1fff7a14
 8008d00:	1fff7a18 	.word	0x1fff7a18
 8008d04:	2000010e 	.word	0x2000010e
 8008d08:	2000011e 	.word	0x2000011e

08008d0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d1e:	2300      	movs	r3, #0
 8008d20:	75fb      	strb	r3, [r7, #23]
 8008d22:	e027      	b.n	8008d74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	0f1b      	lsrs	r3, r3, #28
 8008d28:	2b09      	cmp	r3, #9
 8008d2a:	d80b      	bhi.n	8008d44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	0f1b      	lsrs	r3, r3, #28
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	005b      	lsls	r3, r3, #1
 8008d36:	4619      	mov	r1, r3
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	440b      	add	r3, r1
 8008d3c:	3230      	adds	r2, #48	; 0x30
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	e00a      	b.n	8008d5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	0f1b      	lsrs	r3, r3, #28
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	440b      	add	r3, r1
 8008d54:	3237      	adds	r2, #55	; 0x37
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	011b      	lsls	r3, r3, #4
 8008d5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	3301      	adds	r3, #1
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	4413      	add	r3, r2
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	3301      	adds	r3, #1
 8008d72:	75fb      	strb	r3, [r7, #23]
 8008d74:	7dfa      	ldrb	r2, [r7, #23]
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d3d3      	bcc.n	8008d24 <IntToUnicode+0x18>
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b08a      	sub	sp, #40	; 0x28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dac:	f107 0314 	add.w	r3, r7, #20
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	605a      	str	r2, [r3, #4]
 8008db6:	609a      	str	r2, [r3, #8]
 8008db8:	60da      	str	r2, [r3, #12]
 8008dba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dc4:	d13a      	bne.n	8008e3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	613b      	str	r3, [r7, #16]
 8008dca:	4b1e      	ldr	r3, [pc, #120]	; (8008e44 <HAL_PCD_MspInit+0xa0>)
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dce:	4a1d      	ldr	r2, [pc, #116]	; (8008e44 <HAL_PCD_MspInit+0xa0>)
 8008dd0:	f043 0301 	orr.w	r3, r3, #1
 8008dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8008dd6:	4b1b      	ldr	r3, [pc, #108]	; (8008e44 <HAL_PCD_MspInit+0xa0>)
 8008dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8008de2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de8:	2302      	movs	r3, #2
 8008dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008df0:	2300      	movs	r3, #0
 8008df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008df4:	230a      	movs	r3, #10
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008df8:	f107 0314 	add.w	r3, r7, #20
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4812      	ldr	r0, [pc, #72]	; (8008e48 <HAL_PCD_MspInit+0xa4>)
 8008e00:	f7fa f9d0 	bl	80031a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e04:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <HAL_PCD_MspInit+0xa0>)
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	4a0e      	ldr	r2, [pc, #56]	; (8008e44 <HAL_PCD_MspInit+0xa0>)
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0e:	6353      	str	r3, [r2, #52]	; 0x34
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <HAL_PCD_MspInit+0xa0>)
 8008e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e18:	4a0a      	ldr	r2, [pc, #40]	; (8008e44 <HAL_PCD_MspInit+0xa0>)
 8008e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8008e20:	4b08      	ldr	r3, [pc, #32]	; (8008e44 <HAL_PCD_MspInit+0xa0>)
 8008e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2100      	movs	r1, #0
 8008e30:	2043      	movs	r0, #67	; 0x43
 8008e32:	f7fa f980 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e36:	2043      	movs	r0, #67	; 0x43
 8008e38:	f7fa f999 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	3728      	adds	r7, #40	; 0x28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	40023800 	.word	0x40023800
 8008e48:	40020000 	.word	0x40020000

08008e4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f7fe fd63 	bl	800792e <USBD_LL_SetupStage>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	00db      	lsls	r3, r3, #3
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	f7fe fd9d 	bl	80079d8 <USBD_LL_DataOutStage>
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	3348      	adds	r3, #72	; 0x48
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	78fb      	ldrb	r3, [r7, #3]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	f7fe fde6 	bl	8007a9e <USBD_LL_DataInStage>
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe fefa 	bl	8007ce2 <USBD_LL_SOF>
}
 8008eee:	bf00      	nop
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008efe:	2301      	movs	r3, #1
 8008f00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d001      	beq.n	8008f0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f0a:	f7f8 fcd9 	bl	80018c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f14:	7bfa      	ldrb	r2, [r7, #15]
 8008f16:	4611      	mov	r1, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe fea4 	bl	8007c66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe fe50 	bl	8007bca <USBD_LL_Reset>
}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fe9f 	bl	8007c86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6812      	ldr	r2, [r2, #0]
 8008f56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f68:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <HAL_PCD_SuspendCallback+0x48>)
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	4a03      	ldr	r2, [pc, #12]	; (8008f7c <HAL_PCD_SuspendCallback+0x48>)
 8008f6e:	f043 0306 	orr.w	r3, r3, #6
 8008f72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	e000ed00 	.word	0xe000ed00

08008f80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fe8f 	bl	8007cb2 <USBD_LL_Resume>
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe fedd 	bl	8007d72 <USBD_LL_IsoOUTIncomplete>
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fea5 	bl	8007d26 <USBD_LL_IsoINIncomplete>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe fee3 	bl	8007dbe <USBD_LL_DevConnected>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fee0 	bl	8007dd4 <USBD_LL_DevDisconnected>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d13c      	bne.n	80090a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800902c:	4a20      	ldr	r2, [pc, #128]	; (80090b0 <USBD_LL_Init+0x94>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a1e      	ldr	r2, [pc, #120]	; (80090b0 <USBD_LL_Init+0x94>)
 8009038:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800903c:	4b1c      	ldr	r3, [pc, #112]	; (80090b0 <USBD_LL_Init+0x94>)
 800903e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009042:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009044:	4b1a      	ldr	r3, [pc, #104]	; (80090b0 <USBD_LL_Init+0x94>)
 8009046:	2204      	movs	r2, #4
 8009048:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800904a:	4b19      	ldr	r3, [pc, #100]	; (80090b0 <USBD_LL_Init+0x94>)
 800904c:	2202      	movs	r2, #2
 800904e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009050:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <USBD_LL_Init+0x94>)
 8009052:	2200      	movs	r2, #0
 8009054:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009056:	4b16      	ldr	r3, [pc, #88]	; (80090b0 <USBD_LL_Init+0x94>)
 8009058:	2202      	movs	r2, #2
 800905a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800905c:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <USBD_LL_Init+0x94>)
 800905e:	2200      	movs	r2, #0
 8009060:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009062:	4b13      	ldr	r3, [pc, #76]	; (80090b0 <USBD_LL_Init+0x94>)
 8009064:	2200      	movs	r2, #0
 8009066:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009068:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <USBD_LL_Init+0x94>)
 800906a:	2200      	movs	r2, #0
 800906c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800906e:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <USBD_LL_Init+0x94>)
 8009070:	2200      	movs	r2, #0
 8009072:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <USBD_LL_Init+0x94>)
 8009076:	2200      	movs	r2, #0
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800907a:	480d      	ldr	r0, [pc, #52]	; (80090b0 <USBD_LL_Init+0x94>)
 800907c:	f7fa fff1 	bl	8004062 <HAL_PCD_Init>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009086:	f7f8 fc1b 	bl	80018c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800908a:	2180      	movs	r1, #128	; 0x80
 800908c:	4808      	ldr	r0, [pc, #32]	; (80090b0 <USBD_LL_Init+0x94>)
 800908e:	f7fc f94e 	bl	800532e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009092:	2240      	movs	r2, #64	; 0x40
 8009094:	2100      	movs	r1, #0
 8009096:	4806      	ldr	r0, [pc, #24]	; (80090b0 <USBD_LL_Init+0x94>)
 8009098:	f7fc f902 	bl	80052a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800909c:	2280      	movs	r2, #128	; 0x80
 800909e:	2101      	movs	r1, #1
 80090a0:	4803      	ldr	r0, [pc, #12]	; (80090b0 <USBD_LL_Init+0x94>)
 80090a2:	f7fc f8fd 	bl	80052a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	200027d4 	.word	0x200027d4

080090b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fb f8e6 	bl	800429c <HAL_PCD_Start>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f938 	bl	800934c <USBD_Get_USB_Status>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	461a      	mov	r2, r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	70fb      	strb	r3, [r7, #3]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70bb      	strb	r3, [r7, #2]
 8009100:	4613      	mov	r3, r2
 8009102:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009112:	78bb      	ldrb	r3, [r7, #2]
 8009114:	883a      	ldrh	r2, [r7, #0]
 8009116:	78f9      	ldrb	r1, [r7, #3]
 8009118:	f7fb fcca 	bl	8004ab0 <HAL_PCD_EP_Open>
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f912 	bl	800934c <USBD_Get_USB_Status>
 8009128:	4603      	mov	r3, r0
 800912a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800912c:	7bbb      	ldrb	r3, [r7, #14]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009150:	78fa      	ldrb	r2, [r7, #3]
 8009152:	4611      	mov	r1, r2
 8009154:	4618      	mov	r0, r3
 8009156:	f7fb fd13 	bl	8004b80 <HAL_PCD_EP_Close>
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	4618      	mov	r0, r3
 8009162:	f000 f8f3 	bl	800934c <USBD_Get_USB_Status>
 8009166:	4603      	mov	r3, r0
 8009168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800916a:	7bbb      	ldrb	r3, [r7, #14]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f7fb fdeb 	bl	8004d6e <HAL_PCD_EP_SetStall>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 f8d4 	bl	800934c <USBD_Get_USB_Status>
 80091a4:	4603      	mov	r3, r0
 80091a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fb fe30 	bl	8004e36 <HAL_PCD_EP_ClrStall>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f8b5 	bl	800934c <USBD_Get_USB_Status>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009202:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009208:	2b00      	cmp	r3, #0
 800920a:	da0b      	bge.n	8009224 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009212:	68f9      	ldr	r1, [r7, #12]
 8009214:	4613      	mov	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	1a9b      	subs	r3, r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	440b      	add	r3, r1
 800921e:	333e      	adds	r3, #62	; 0x3e
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	e00b      	b.n	800923c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	4613      	mov	r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	1a9b      	subs	r3, r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800923a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	4611      	mov	r1, r2
 8009266:	4618      	mov	r0, r3
 8009268:	f7fb fbfd 	bl	8004a66 <HAL_PCD_SetAddress>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 f86a 	bl	800934c <USBD_Get_USB_Status>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800927c:	7bbb      	ldrb	r3, [r7, #14]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	603b      	str	r3, [r7, #0]
 8009292:	460b      	mov	r3, r1
 8009294:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092a4:	7af9      	ldrb	r1, [r7, #11]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	f7fb fd16 	bl	8004cda <HAL_PCD_EP_Transmit>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 f849 	bl	800934c <USBD_Get_USB_Status>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092be:	7dbb      	ldrb	r3, [r7, #22]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	607a      	str	r2, [r7, #4]
 80092d2:	603b      	str	r3, [r7, #0]
 80092d4:	460b      	mov	r3, r1
 80092d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092e6:	7af9      	ldrb	r1, [r7, #11]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	f7fb fc92 	bl	8004c14 <HAL_PCD_EP_Receive>
 80092f0:	4603      	mov	r3, r0
 80092f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f828 	bl	800934c <USBD_Get_USB_Status>
 80092fc:	4603      	mov	r3, r0
 80092fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009300:	7dbb      	ldrb	r3, [r7, #22]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800931c:	78fa      	ldrb	r2, [r7, #3]
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f7fb fcc2 	bl	8004caa <HAL_PCD_EP_GetRxCount>
 8009326:	4603      	mov	r3, r0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009338:	4b03      	ldr	r3, [pc, #12]	; (8009348 <USBD_static_malloc+0x18>)
}
 800933a:	4618      	mov	r0, r3
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	200005c4 	.word	0x200005c4

0800934c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	2b03      	cmp	r3, #3
 800935e:	d817      	bhi.n	8009390 <USBD_Get_USB_Status+0x44>
 8009360:	a201      	add	r2, pc, #4	; (adr r2, 8009368 <USBD_Get_USB_Status+0x1c>)
 8009362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009366:	bf00      	nop
 8009368:	08009379 	.word	0x08009379
 800936c:	0800937f 	.word	0x0800937f
 8009370:	08009385 	.word	0x08009385
 8009374:	0800938b 	.word	0x0800938b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
    break;
 800937c:	e00b      	b.n	8009396 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800937e:	2303      	movs	r3, #3
 8009380:	73fb      	strb	r3, [r7, #15]
    break;
 8009382:	e008      	b.n	8009396 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009384:	2301      	movs	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
    break;
 8009388:	e005      	b.n	8009396 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800938a:	2303      	movs	r3, #3
 800938c:	73fb      	strb	r3, [r7, #15]
    break;
 800938e:	e002      	b.n	8009396 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009390:	2303      	movs	r3, #3
 8009392:	73fb      	strb	r3, [r7, #15]
    break;
 8009394:	bf00      	nop
  }
  return usb_status;
 8009396:	7bfb      	ldrb	r3, [r7, #15]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <__errno>:
 80093a4:	4b01      	ldr	r3, [pc, #4]	; (80093ac <__errno+0x8>)
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	2000012c 	.word	0x2000012c

080093b0 <__libc_init_array>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	4d0d      	ldr	r5, [pc, #52]	; (80093e8 <__libc_init_array+0x38>)
 80093b4:	4c0d      	ldr	r4, [pc, #52]	; (80093ec <__libc_init_array+0x3c>)
 80093b6:	1b64      	subs	r4, r4, r5
 80093b8:	10a4      	asrs	r4, r4, #2
 80093ba:	2600      	movs	r6, #0
 80093bc:	42a6      	cmp	r6, r4
 80093be:	d109      	bne.n	80093d4 <__libc_init_array+0x24>
 80093c0:	4d0b      	ldr	r5, [pc, #44]	; (80093f0 <__libc_init_array+0x40>)
 80093c2:	4c0c      	ldr	r4, [pc, #48]	; (80093f4 <__libc_init_array+0x44>)
 80093c4:	f001 f87c 	bl	800a4c0 <_init>
 80093c8:	1b64      	subs	r4, r4, r5
 80093ca:	10a4      	asrs	r4, r4, #2
 80093cc:	2600      	movs	r6, #0
 80093ce:	42a6      	cmp	r6, r4
 80093d0:	d105      	bne.n	80093de <__libc_init_array+0x2e>
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d8:	4798      	blx	r3
 80093da:	3601      	adds	r6, #1
 80093dc:	e7ee      	b.n	80093bc <__libc_init_array+0xc>
 80093de:	f855 3b04 	ldr.w	r3, [r5], #4
 80093e2:	4798      	blx	r3
 80093e4:	3601      	adds	r6, #1
 80093e6:	e7f2      	b.n	80093ce <__libc_init_array+0x1e>
 80093e8:	0800ba70 	.word	0x0800ba70
 80093ec:	0800ba70 	.word	0x0800ba70
 80093f0:	0800ba70 	.word	0x0800ba70
 80093f4:	0800ba74 	.word	0x0800ba74

080093f8 <malloc>:
 80093f8:	4b02      	ldr	r3, [pc, #8]	; (8009404 <malloc+0xc>)
 80093fa:	4601      	mov	r1, r0
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	f000 b85b 	b.w	80094b8 <_malloc_r>
 8009402:	bf00      	nop
 8009404:	2000012c 	.word	0x2000012c

08009408 <memset>:
 8009408:	4402      	add	r2, r0
 800940a:	4603      	mov	r3, r0
 800940c:	4293      	cmp	r3, r2
 800940e:	d100      	bne.n	8009412 <memset+0xa>
 8009410:	4770      	bx	lr
 8009412:	f803 1b01 	strb.w	r1, [r3], #1
 8009416:	e7f9      	b.n	800940c <memset+0x4>

08009418 <_free_r>:
 8009418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800941a:	2900      	cmp	r1, #0
 800941c:	d048      	beq.n	80094b0 <_free_r+0x98>
 800941e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009422:	9001      	str	r0, [sp, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	f1a1 0404 	sub.w	r4, r1, #4
 800942a:	bfb8      	it	lt
 800942c:	18e4      	addlt	r4, r4, r3
 800942e:	f000 fc49 	bl	8009cc4 <__malloc_lock>
 8009432:	4a20      	ldr	r2, [pc, #128]	; (80094b4 <_free_r+0x9c>)
 8009434:	9801      	ldr	r0, [sp, #4]
 8009436:	6813      	ldr	r3, [r2, #0]
 8009438:	4615      	mov	r5, r2
 800943a:	b933      	cbnz	r3, 800944a <_free_r+0x32>
 800943c:	6063      	str	r3, [r4, #4]
 800943e:	6014      	str	r4, [r2, #0]
 8009440:	b003      	add	sp, #12
 8009442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009446:	f000 bc43 	b.w	8009cd0 <__malloc_unlock>
 800944a:	42a3      	cmp	r3, r4
 800944c:	d90b      	bls.n	8009466 <_free_r+0x4e>
 800944e:	6821      	ldr	r1, [r4, #0]
 8009450:	1862      	adds	r2, r4, r1
 8009452:	4293      	cmp	r3, r2
 8009454:	bf04      	itt	eq
 8009456:	681a      	ldreq	r2, [r3, #0]
 8009458:	685b      	ldreq	r3, [r3, #4]
 800945a:	6063      	str	r3, [r4, #4]
 800945c:	bf04      	itt	eq
 800945e:	1852      	addeq	r2, r2, r1
 8009460:	6022      	streq	r2, [r4, #0]
 8009462:	602c      	str	r4, [r5, #0]
 8009464:	e7ec      	b.n	8009440 <_free_r+0x28>
 8009466:	461a      	mov	r2, r3
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	b10b      	cbz	r3, 8009470 <_free_r+0x58>
 800946c:	42a3      	cmp	r3, r4
 800946e:	d9fa      	bls.n	8009466 <_free_r+0x4e>
 8009470:	6811      	ldr	r1, [r2, #0]
 8009472:	1855      	adds	r5, r2, r1
 8009474:	42a5      	cmp	r5, r4
 8009476:	d10b      	bne.n	8009490 <_free_r+0x78>
 8009478:	6824      	ldr	r4, [r4, #0]
 800947a:	4421      	add	r1, r4
 800947c:	1854      	adds	r4, r2, r1
 800947e:	42a3      	cmp	r3, r4
 8009480:	6011      	str	r1, [r2, #0]
 8009482:	d1dd      	bne.n	8009440 <_free_r+0x28>
 8009484:	681c      	ldr	r4, [r3, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	6053      	str	r3, [r2, #4]
 800948a:	4421      	add	r1, r4
 800948c:	6011      	str	r1, [r2, #0]
 800948e:	e7d7      	b.n	8009440 <_free_r+0x28>
 8009490:	d902      	bls.n	8009498 <_free_r+0x80>
 8009492:	230c      	movs	r3, #12
 8009494:	6003      	str	r3, [r0, #0]
 8009496:	e7d3      	b.n	8009440 <_free_r+0x28>
 8009498:	6825      	ldr	r5, [r4, #0]
 800949a:	1961      	adds	r1, r4, r5
 800949c:	428b      	cmp	r3, r1
 800949e:	bf04      	itt	eq
 80094a0:	6819      	ldreq	r1, [r3, #0]
 80094a2:	685b      	ldreq	r3, [r3, #4]
 80094a4:	6063      	str	r3, [r4, #4]
 80094a6:	bf04      	itt	eq
 80094a8:	1949      	addeq	r1, r1, r5
 80094aa:	6021      	streq	r1, [r4, #0]
 80094ac:	6054      	str	r4, [r2, #4]
 80094ae:	e7c7      	b.n	8009440 <_free_r+0x28>
 80094b0:	b003      	add	sp, #12
 80094b2:	bd30      	pop	{r4, r5, pc}
 80094b4:	20002198 	.word	0x20002198

080094b8 <_malloc_r>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	1ccd      	adds	r5, r1, #3
 80094bc:	f025 0503 	bic.w	r5, r5, #3
 80094c0:	3508      	adds	r5, #8
 80094c2:	2d0c      	cmp	r5, #12
 80094c4:	bf38      	it	cc
 80094c6:	250c      	movcc	r5, #12
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	4606      	mov	r6, r0
 80094cc:	db01      	blt.n	80094d2 <_malloc_r+0x1a>
 80094ce:	42a9      	cmp	r1, r5
 80094d0:	d903      	bls.n	80094da <_malloc_r+0x22>
 80094d2:	230c      	movs	r3, #12
 80094d4:	6033      	str	r3, [r6, #0]
 80094d6:	2000      	movs	r0, #0
 80094d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094da:	f000 fbf3 	bl	8009cc4 <__malloc_lock>
 80094de:	4921      	ldr	r1, [pc, #132]	; (8009564 <_malloc_r+0xac>)
 80094e0:	680a      	ldr	r2, [r1, #0]
 80094e2:	4614      	mov	r4, r2
 80094e4:	b99c      	cbnz	r4, 800950e <_malloc_r+0x56>
 80094e6:	4f20      	ldr	r7, [pc, #128]	; (8009568 <_malloc_r+0xb0>)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	b923      	cbnz	r3, 80094f6 <_malloc_r+0x3e>
 80094ec:	4621      	mov	r1, r4
 80094ee:	4630      	mov	r0, r6
 80094f0:	f000 f8b2 	bl	8009658 <_sbrk_r>
 80094f4:	6038      	str	r0, [r7, #0]
 80094f6:	4629      	mov	r1, r5
 80094f8:	4630      	mov	r0, r6
 80094fa:	f000 f8ad 	bl	8009658 <_sbrk_r>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d123      	bne.n	800954a <_malloc_r+0x92>
 8009502:	230c      	movs	r3, #12
 8009504:	6033      	str	r3, [r6, #0]
 8009506:	4630      	mov	r0, r6
 8009508:	f000 fbe2 	bl	8009cd0 <__malloc_unlock>
 800950c:	e7e3      	b.n	80094d6 <_malloc_r+0x1e>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	1b5b      	subs	r3, r3, r5
 8009512:	d417      	bmi.n	8009544 <_malloc_r+0x8c>
 8009514:	2b0b      	cmp	r3, #11
 8009516:	d903      	bls.n	8009520 <_malloc_r+0x68>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	441c      	add	r4, r3
 800951c:	6025      	str	r5, [r4, #0]
 800951e:	e004      	b.n	800952a <_malloc_r+0x72>
 8009520:	6863      	ldr	r3, [r4, #4]
 8009522:	42a2      	cmp	r2, r4
 8009524:	bf0c      	ite	eq
 8009526:	600b      	streq	r3, [r1, #0]
 8009528:	6053      	strne	r3, [r2, #4]
 800952a:	4630      	mov	r0, r6
 800952c:	f000 fbd0 	bl	8009cd0 <__malloc_unlock>
 8009530:	f104 000b 	add.w	r0, r4, #11
 8009534:	1d23      	adds	r3, r4, #4
 8009536:	f020 0007 	bic.w	r0, r0, #7
 800953a:	1ac2      	subs	r2, r0, r3
 800953c:	d0cc      	beq.n	80094d8 <_malloc_r+0x20>
 800953e:	1a1b      	subs	r3, r3, r0
 8009540:	50a3      	str	r3, [r4, r2]
 8009542:	e7c9      	b.n	80094d8 <_malloc_r+0x20>
 8009544:	4622      	mov	r2, r4
 8009546:	6864      	ldr	r4, [r4, #4]
 8009548:	e7cc      	b.n	80094e4 <_malloc_r+0x2c>
 800954a:	1cc4      	adds	r4, r0, #3
 800954c:	f024 0403 	bic.w	r4, r4, #3
 8009550:	42a0      	cmp	r0, r4
 8009552:	d0e3      	beq.n	800951c <_malloc_r+0x64>
 8009554:	1a21      	subs	r1, r4, r0
 8009556:	4630      	mov	r0, r6
 8009558:	f000 f87e 	bl	8009658 <_sbrk_r>
 800955c:	3001      	adds	r0, #1
 800955e:	d1dd      	bne.n	800951c <_malloc_r+0x64>
 8009560:	e7cf      	b.n	8009502 <_malloc_r+0x4a>
 8009562:	bf00      	nop
 8009564:	20002198 	.word	0x20002198
 8009568:	2000219c 	.word	0x2000219c

0800956c <_puts_r>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	460e      	mov	r6, r1
 8009570:	4605      	mov	r5, r0
 8009572:	b118      	cbz	r0, 800957c <_puts_r+0x10>
 8009574:	6983      	ldr	r3, [r0, #24]
 8009576:	b90b      	cbnz	r3, 800957c <_puts_r+0x10>
 8009578:	f000 faa0 	bl	8009abc <__sinit>
 800957c:	69ab      	ldr	r3, [r5, #24]
 800957e:	68ac      	ldr	r4, [r5, #8]
 8009580:	b913      	cbnz	r3, 8009588 <_puts_r+0x1c>
 8009582:	4628      	mov	r0, r5
 8009584:	f000 fa9a 	bl	8009abc <__sinit>
 8009588:	4b2c      	ldr	r3, [pc, #176]	; (800963c <_puts_r+0xd0>)
 800958a:	429c      	cmp	r4, r3
 800958c:	d120      	bne.n	80095d0 <_puts_r+0x64>
 800958e:	686c      	ldr	r4, [r5, #4]
 8009590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009592:	07db      	lsls	r3, r3, #31
 8009594:	d405      	bmi.n	80095a2 <_puts_r+0x36>
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	0598      	lsls	r0, r3, #22
 800959a:	d402      	bmi.n	80095a2 <_puts_r+0x36>
 800959c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800959e:	f000 fb2b 	bl	8009bf8 <__retarget_lock_acquire_recursive>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	0719      	lsls	r1, r3, #28
 80095a6:	d51d      	bpl.n	80095e4 <_puts_r+0x78>
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	b1db      	cbz	r3, 80095e4 <_puts_r+0x78>
 80095ac:	3e01      	subs	r6, #1
 80095ae:	68a3      	ldr	r3, [r4, #8]
 80095b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095b4:	3b01      	subs	r3, #1
 80095b6:	60a3      	str	r3, [r4, #8]
 80095b8:	bb39      	cbnz	r1, 800960a <_puts_r+0x9e>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	da38      	bge.n	8009630 <_puts_r+0xc4>
 80095be:	4622      	mov	r2, r4
 80095c0:	210a      	movs	r1, #10
 80095c2:	4628      	mov	r0, r5
 80095c4:	f000 f8a0 	bl	8009708 <__swbuf_r>
 80095c8:	3001      	adds	r0, #1
 80095ca:	d011      	beq.n	80095f0 <_puts_r+0x84>
 80095cc:	250a      	movs	r5, #10
 80095ce:	e011      	b.n	80095f4 <_puts_r+0x88>
 80095d0:	4b1b      	ldr	r3, [pc, #108]	; (8009640 <_puts_r+0xd4>)
 80095d2:	429c      	cmp	r4, r3
 80095d4:	d101      	bne.n	80095da <_puts_r+0x6e>
 80095d6:	68ac      	ldr	r4, [r5, #8]
 80095d8:	e7da      	b.n	8009590 <_puts_r+0x24>
 80095da:	4b1a      	ldr	r3, [pc, #104]	; (8009644 <_puts_r+0xd8>)
 80095dc:	429c      	cmp	r4, r3
 80095de:	bf08      	it	eq
 80095e0:	68ec      	ldreq	r4, [r5, #12]
 80095e2:	e7d5      	b.n	8009590 <_puts_r+0x24>
 80095e4:	4621      	mov	r1, r4
 80095e6:	4628      	mov	r0, r5
 80095e8:	f000 f8e0 	bl	80097ac <__swsetup_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d0dd      	beq.n	80095ac <_puts_r+0x40>
 80095f0:	f04f 35ff 	mov.w	r5, #4294967295
 80095f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095f6:	07da      	lsls	r2, r3, #31
 80095f8:	d405      	bmi.n	8009606 <_puts_r+0x9a>
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	059b      	lsls	r3, r3, #22
 80095fe:	d402      	bmi.n	8009606 <_puts_r+0x9a>
 8009600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009602:	f000 fafa 	bl	8009bfa <__retarget_lock_release_recursive>
 8009606:	4628      	mov	r0, r5
 8009608:	bd70      	pop	{r4, r5, r6, pc}
 800960a:	2b00      	cmp	r3, #0
 800960c:	da04      	bge.n	8009618 <_puts_r+0xac>
 800960e:	69a2      	ldr	r2, [r4, #24]
 8009610:	429a      	cmp	r2, r3
 8009612:	dc06      	bgt.n	8009622 <_puts_r+0xb6>
 8009614:	290a      	cmp	r1, #10
 8009616:	d004      	beq.n	8009622 <_puts_r+0xb6>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	6022      	str	r2, [r4, #0]
 800961e:	7019      	strb	r1, [r3, #0]
 8009620:	e7c5      	b.n	80095ae <_puts_r+0x42>
 8009622:	4622      	mov	r2, r4
 8009624:	4628      	mov	r0, r5
 8009626:	f000 f86f 	bl	8009708 <__swbuf_r>
 800962a:	3001      	adds	r0, #1
 800962c:	d1bf      	bne.n	80095ae <_puts_r+0x42>
 800962e:	e7df      	b.n	80095f0 <_puts_r+0x84>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	250a      	movs	r5, #10
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	6022      	str	r2, [r4, #0]
 8009638:	701d      	strb	r5, [r3, #0]
 800963a:	e7db      	b.n	80095f4 <_puts_r+0x88>
 800963c:	0800b9f4 	.word	0x0800b9f4
 8009640:	0800ba14 	.word	0x0800ba14
 8009644:	0800b9d4 	.word	0x0800b9d4

08009648 <puts>:
 8009648:	4b02      	ldr	r3, [pc, #8]	; (8009654 <puts+0xc>)
 800964a:	4601      	mov	r1, r0
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	f7ff bf8d 	b.w	800956c <_puts_r>
 8009652:	bf00      	nop
 8009654:	2000012c 	.word	0x2000012c

08009658 <_sbrk_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4d06      	ldr	r5, [pc, #24]	; (8009674 <_sbrk_r+0x1c>)
 800965c:	2300      	movs	r3, #0
 800965e:	4604      	mov	r4, r0
 8009660:	4608      	mov	r0, r1
 8009662:	602b      	str	r3, [r5, #0]
 8009664:	f7f8 ff92 	bl	800258c <_sbrk>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_sbrk_r+0x1a>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_sbrk_r+0x1a>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	20002be8 	.word	0x20002be8

08009678 <sniprintf>:
 8009678:	b40c      	push	{r2, r3}
 800967a:	b530      	push	{r4, r5, lr}
 800967c:	4b17      	ldr	r3, [pc, #92]	; (80096dc <sniprintf+0x64>)
 800967e:	1e0c      	subs	r4, r1, #0
 8009680:	681d      	ldr	r5, [r3, #0]
 8009682:	b09d      	sub	sp, #116	; 0x74
 8009684:	da08      	bge.n	8009698 <sniprintf+0x20>
 8009686:	238b      	movs	r3, #139	; 0x8b
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f04f 30ff 	mov.w	r0, #4294967295
 800968e:	b01d      	add	sp, #116	; 0x74
 8009690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009694:	b002      	add	sp, #8
 8009696:	4770      	bx	lr
 8009698:	f44f 7302 	mov.w	r3, #520	; 0x208
 800969c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80096a0:	bf14      	ite	ne
 80096a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80096a6:	4623      	moveq	r3, r4
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	9307      	str	r3, [sp, #28]
 80096ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096b0:	9002      	str	r0, [sp, #8]
 80096b2:	9006      	str	r0, [sp, #24]
 80096b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80096b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80096ba:	ab21      	add	r3, sp, #132	; 0x84
 80096bc:	a902      	add	r1, sp, #8
 80096be:	4628      	mov	r0, r5
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	f000 fb67 	bl	8009d94 <_svfiprintf_r>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	bfbc      	itt	lt
 80096ca:	238b      	movlt	r3, #139	; 0x8b
 80096cc:	602b      	strlt	r3, [r5, #0]
 80096ce:	2c00      	cmp	r4, #0
 80096d0:	d0dd      	beq.n	800968e <sniprintf+0x16>
 80096d2:	9b02      	ldr	r3, [sp, #8]
 80096d4:	2200      	movs	r2, #0
 80096d6:	701a      	strb	r2, [r3, #0]
 80096d8:	e7d9      	b.n	800968e <sniprintf+0x16>
 80096da:	bf00      	nop
 80096dc:	2000012c 	.word	0x2000012c

080096e0 <strncpy>:
 80096e0:	b510      	push	{r4, lr}
 80096e2:	3901      	subs	r1, #1
 80096e4:	4603      	mov	r3, r0
 80096e6:	b132      	cbz	r2, 80096f6 <strncpy+0x16>
 80096e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80096ec:	f803 4b01 	strb.w	r4, [r3], #1
 80096f0:	3a01      	subs	r2, #1
 80096f2:	2c00      	cmp	r4, #0
 80096f4:	d1f7      	bne.n	80096e6 <strncpy+0x6>
 80096f6:	441a      	add	r2, r3
 80096f8:	2100      	movs	r1, #0
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d100      	bne.n	8009700 <strncpy+0x20>
 80096fe:	bd10      	pop	{r4, pc}
 8009700:	f803 1b01 	strb.w	r1, [r3], #1
 8009704:	e7f9      	b.n	80096fa <strncpy+0x1a>
	...

08009708 <__swbuf_r>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	460e      	mov	r6, r1
 800970c:	4614      	mov	r4, r2
 800970e:	4605      	mov	r5, r0
 8009710:	b118      	cbz	r0, 800971a <__swbuf_r+0x12>
 8009712:	6983      	ldr	r3, [r0, #24]
 8009714:	b90b      	cbnz	r3, 800971a <__swbuf_r+0x12>
 8009716:	f000 f9d1 	bl	8009abc <__sinit>
 800971a:	4b21      	ldr	r3, [pc, #132]	; (80097a0 <__swbuf_r+0x98>)
 800971c:	429c      	cmp	r4, r3
 800971e:	d12b      	bne.n	8009778 <__swbuf_r+0x70>
 8009720:	686c      	ldr	r4, [r5, #4]
 8009722:	69a3      	ldr	r3, [r4, #24]
 8009724:	60a3      	str	r3, [r4, #8]
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	071a      	lsls	r2, r3, #28
 800972a:	d52f      	bpl.n	800978c <__swbuf_r+0x84>
 800972c:	6923      	ldr	r3, [r4, #16]
 800972e:	b36b      	cbz	r3, 800978c <__swbuf_r+0x84>
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	6820      	ldr	r0, [r4, #0]
 8009734:	1ac0      	subs	r0, r0, r3
 8009736:	6963      	ldr	r3, [r4, #20]
 8009738:	b2f6      	uxtb	r6, r6
 800973a:	4283      	cmp	r3, r0
 800973c:	4637      	mov	r7, r6
 800973e:	dc04      	bgt.n	800974a <__swbuf_r+0x42>
 8009740:	4621      	mov	r1, r4
 8009742:	4628      	mov	r0, r5
 8009744:	f000 f926 	bl	8009994 <_fflush_r>
 8009748:	bb30      	cbnz	r0, 8009798 <__swbuf_r+0x90>
 800974a:	68a3      	ldr	r3, [r4, #8]
 800974c:	3b01      	subs	r3, #1
 800974e:	60a3      	str	r3, [r4, #8]
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	6022      	str	r2, [r4, #0]
 8009756:	701e      	strb	r6, [r3, #0]
 8009758:	6963      	ldr	r3, [r4, #20]
 800975a:	3001      	adds	r0, #1
 800975c:	4283      	cmp	r3, r0
 800975e:	d004      	beq.n	800976a <__swbuf_r+0x62>
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	07db      	lsls	r3, r3, #31
 8009764:	d506      	bpl.n	8009774 <__swbuf_r+0x6c>
 8009766:	2e0a      	cmp	r6, #10
 8009768:	d104      	bne.n	8009774 <__swbuf_r+0x6c>
 800976a:	4621      	mov	r1, r4
 800976c:	4628      	mov	r0, r5
 800976e:	f000 f911 	bl	8009994 <_fflush_r>
 8009772:	b988      	cbnz	r0, 8009798 <__swbuf_r+0x90>
 8009774:	4638      	mov	r0, r7
 8009776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <__swbuf_r+0x9c>)
 800977a:	429c      	cmp	r4, r3
 800977c:	d101      	bne.n	8009782 <__swbuf_r+0x7a>
 800977e:	68ac      	ldr	r4, [r5, #8]
 8009780:	e7cf      	b.n	8009722 <__swbuf_r+0x1a>
 8009782:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <__swbuf_r+0xa0>)
 8009784:	429c      	cmp	r4, r3
 8009786:	bf08      	it	eq
 8009788:	68ec      	ldreq	r4, [r5, #12]
 800978a:	e7ca      	b.n	8009722 <__swbuf_r+0x1a>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f80c 	bl	80097ac <__swsetup_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	d0cb      	beq.n	8009730 <__swbuf_r+0x28>
 8009798:	f04f 37ff 	mov.w	r7, #4294967295
 800979c:	e7ea      	b.n	8009774 <__swbuf_r+0x6c>
 800979e:	bf00      	nop
 80097a0:	0800b9f4 	.word	0x0800b9f4
 80097a4:	0800ba14 	.word	0x0800ba14
 80097a8:	0800b9d4 	.word	0x0800b9d4

080097ac <__swsetup_r>:
 80097ac:	4b32      	ldr	r3, [pc, #200]	; (8009878 <__swsetup_r+0xcc>)
 80097ae:	b570      	push	{r4, r5, r6, lr}
 80097b0:	681d      	ldr	r5, [r3, #0]
 80097b2:	4606      	mov	r6, r0
 80097b4:	460c      	mov	r4, r1
 80097b6:	b125      	cbz	r5, 80097c2 <__swsetup_r+0x16>
 80097b8:	69ab      	ldr	r3, [r5, #24]
 80097ba:	b913      	cbnz	r3, 80097c2 <__swsetup_r+0x16>
 80097bc:	4628      	mov	r0, r5
 80097be:	f000 f97d 	bl	8009abc <__sinit>
 80097c2:	4b2e      	ldr	r3, [pc, #184]	; (800987c <__swsetup_r+0xd0>)
 80097c4:	429c      	cmp	r4, r3
 80097c6:	d10f      	bne.n	80097e8 <__swsetup_r+0x3c>
 80097c8:	686c      	ldr	r4, [r5, #4]
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097d0:	0719      	lsls	r1, r3, #28
 80097d2:	d42c      	bmi.n	800982e <__swsetup_r+0x82>
 80097d4:	06dd      	lsls	r5, r3, #27
 80097d6:	d411      	bmi.n	80097fc <__swsetup_r+0x50>
 80097d8:	2309      	movs	r3, #9
 80097da:	6033      	str	r3, [r6, #0]
 80097dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097e0:	81a3      	strh	r3, [r4, #12]
 80097e2:	f04f 30ff 	mov.w	r0, #4294967295
 80097e6:	e03e      	b.n	8009866 <__swsetup_r+0xba>
 80097e8:	4b25      	ldr	r3, [pc, #148]	; (8009880 <__swsetup_r+0xd4>)
 80097ea:	429c      	cmp	r4, r3
 80097ec:	d101      	bne.n	80097f2 <__swsetup_r+0x46>
 80097ee:	68ac      	ldr	r4, [r5, #8]
 80097f0:	e7eb      	b.n	80097ca <__swsetup_r+0x1e>
 80097f2:	4b24      	ldr	r3, [pc, #144]	; (8009884 <__swsetup_r+0xd8>)
 80097f4:	429c      	cmp	r4, r3
 80097f6:	bf08      	it	eq
 80097f8:	68ec      	ldreq	r4, [r5, #12]
 80097fa:	e7e6      	b.n	80097ca <__swsetup_r+0x1e>
 80097fc:	0758      	lsls	r0, r3, #29
 80097fe:	d512      	bpl.n	8009826 <__swsetup_r+0x7a>
 8009800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009802:	b141      	cbz	r1, 8009816 <__swsetup_r+0x6a>
 8009804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009808:	4299      	cmp	r1, r3
 800980a:	d002      	beq.n	8009812 <__swsetup_r+0x66>
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff fe03 	bl	8009418 <_free_r>
 8009812:	2300      	movs	r3, #0
 8009814:	6363      	str	r3, [r4, #52]	; 0x34
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	2300      	movs	r3, #0
 8009820:	6063      	str	r3, [r4, #4]
 8009822:	6923      	ldr	r3, [r4, #16]
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	f043 0308 	orr.w	r3, r3, #8
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	b94b      	cbnz	r3, 8009846 <__swsetup_r+0x9a>
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800983c:	d003      	beq.n	8009846 <__swsetup_r+0x9a>
 800983e:	4621      	mov	r1, r4
 8009840:	4630      	mov	r0, r6
 8009842:	f000 f9ff 	bl	8009c44 <__smakebuf_r>
 8009846:	89a0      	ldrh	r0, [r4, #12]
 8009848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800984c:	f010 0301 	ands.w	r3, r0, #1
 8009850:	d00a      	beq.n	8009868 <__swsetup_r+0xbc>
 8009852:	2300      	movs	r3, #0
 8009854:	60a3      	str	r3, [r4, #8]
 8009856:	6963      	ldr	r3, [r4, #20]
 8009858:	425b      	negs	r3, r3
 800985a:	61a3      	str	r3, [r4, #24]
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	b943      	cbnz	r3, 8009872 <__swsetup_r+0xc6>
 8009860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009864:	d1ba      	bne.n	80097dc <__swsetup_r+0x30>
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	0781      	lsls	r1, r0, #30
 800986a:	bf58      	it	pl
 800986c:	6963      	ldrpl	r3, [r4, #20]
 800986e:	60a3      	str	r3, [r4, #8]
 8009870:	e7f4      	b.n	800985c <__swsetup_r+0xb0>
 8009872:	2000      	movs	r0, #0
 8009874:	e7f7      	b.n	8009866 <__swsetup_r+0xba>
 8009876:	bf00      	nop
 8009878:	2000012c 	.word	0x2000012c
 800987c:	0800b9f4 	.word	0x0800b9f4
 8009880:	0800ba14 	.word	0x0800ba14
 8009884:	0800b9d4 	.word	0x0800b9d4

08009888 <__sflush_r>:
 8009888:	898a      	ldrh	r2, [r1, #12]
 800988a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800988e:	4605      	mov	r5, r0
 8009890:	0710      	lsls	r0, r2, #28
 8009892:	460c      	mov	r4, r1
 8009894:	d458      	bmi.n	8009948 <__sflush_r+0xc0>
 8009896:	684b      	ldr	r3, [r1, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	dc05      	bgt.n	80098a8 <__sflush_r+0x20>
 800989c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dc02      	bgt.n	80098a8 <__sflush_r+0x20>
 80098a2:	2000      	movs	r0, #0
 80098a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	d0f9      	beq.n	80098a2 <__sflush_r+0x1a>
 80098ae:	2300      	movs	r3, #0
 80098b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098b4:	682f      	ldr	r7, [r5, #0]
 80098b6:	602b      	str	r3, [r5, #0]
 80098b8:	d032      	beq.n	8009920 <__sflush_r+0x98>
 80098ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	075a      	lsls	r2, r3, #29
 80098c0:	d505      	bpl.n	80098ce <__sflush_r+0x46>
 80098c2:	6863      	ldr	r3, [r4, #4]
 80098c4:	1ac0      	subs	r0, r0, r3
 80098c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098c8:	b10b      	cbz	r3, 80098ce <__sflush_r+0x46>
 80098ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098cc:	1ac0      	subs	r0, r0, r3
 80098ce:	2300      	movs	r3, #0
 80098d0:	4602      	mov	r2, r0
 80098d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098d4:	6a21      	ldr	r1, [r4, #32]
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b0      	blx	r6
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	d106      	bne.n	80098ee <__sflush_r+0x66>
 80098e0:	6829      	ldr	r1, [r5, #0]
 80098e2:	291d      	cmp	r1, #29
 80098e4:	d82c      	bhi.n	8009940 <__sflush_r+0xb8>
 80098e6:	4a2a      	ldr	r2, [pc, #168]	; (8009990 <__sflush_r+0x108>)
 80098e8:	40ca      	lsrs	r2, r1
 80098ea:	07d6      	lsls	r6, r2, #31
 80098ec:	d528      	bpl.n	8009940 <__sflush_r+0xb8>
 80098ee:	2200      	movs	r2, #0
 80098f0:	6062      	str	r2, [r4, #4]
 80098f2:	04d9      	lsls	r1, r3, #19
 80098f4:	6922      	ldr	r2, [r4, #16]
 80098f6:	6022      	str	r2, [r4, #0]
 80098f8:	d504      	bpl.n	8009904 <__sflush_r+0x7c>
 80098fa:	1c42      	adds	r2, r0, #1
 80098fc:	d101      	bne.n	8009902 <__sflush_r+0x7a>
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	b903      	cbnz	r3, 8009904 <__sflush_r+0x7c>
 8009902:	6560      	str	r0, [r4, #84]	; 0x54
 8009904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009906:	602f      	str	r7, [r5, #0]
 8009908:	2900      	cmp	r1, #0
 800990a:	d0ca      	beq.n	80098a2 <__sflush_r+0x1a>
 800990c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009910:	4299      	cmp	r1, r3
 8009912:	d002      	beq.n	800991a <__sflush_r+0x92>
 8009914:	4628      	mov	r0, r5
 8009916:	f7ff fd7f 	bl	8009418 <_free_r>
 800991a:	2000      	movs	r0, #0
 800991c:	6360      	str	r0, [r4, #52]	; 0x34
 800991e:	e7c1      	b.n	80098a4 <__sflush_r+0x1c>
 8009920:	6a21      	ldr	r1, [r4, #32]
 8009922:	2301      	movs	r3, #1
 8009924:	4628      	mov	r0, r5
 8009926:	47b0      	blx	r6
 8009928:	1c41      	adds	r1, r0, #1
 800992a:	d1c7      	bne.n	80098bc <__sflush_r+0x34>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0c4      	beq.n	80098bc <__sflush_r+0x34>
 8009932:	2b1d      	cmp	r3, #29
 8009934:	d001      	beq.n	800993a <__sflush_r+0xb2>
 8009936:	2b16      	cmp	r3, #22
 8009938:	d101      	bne.n	800993e <__sflush_r+0xb6>
 800993a:	602f      	str	r7, [r5, #0]
 800993c:	e7b1      	b.n	80098a2 <__sflush_r+0x1a>
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	e7ad      	b.n	80098a4 <__sflush_r+0x1c>
 8009948:	690f      	ldr	r7, [r1, #16]
 800994a:	2f00      	cmp	r7, #0
 800994c:	d0a9      	beq.n	80098a2 <__sflush_r+0x1a>
 800994e:	0793      	lsls	r3, r2, #30
 8009950:	680e      	ldr	r6, [r1, #0]
 8009952:	bf08      	it	eq
 8009954:	694b      	ldreq	r3, [r1, #20]
 8009956:	600f      	str	r7, [r1, #0]
 8009958:	bf18      	it	ne
 800995a:	2300      	movne	r3, #0
 800995c:	eba6 0807 	sub.w	r8, r6, r7
 8009960:	608b      	str	r3, [r1, #8]
 8009962:	f1b8 0f00 	cmp.w	r8, #0
 8009966:	dd9c      	ble.n	80098a2 <__sflush_r+0x1a>
 8009968:	6a21      	ldr	r1, [r4, #32]
 800996a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800996c:	4643      	mov	r3, r8
 800996e:	463a      	mov	r2, r7
 8009970:	4628      	mov	r0, r5
 8009972:	47b0      	blx	r6
 8009974:	2800      	cmp	r0, #0
 8009976:	dc06      	bgt.n	8009986 <__sflush_r+0xfe>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800997e:	81a3      	strh	r3, [r4, #12]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	e78e      	b.n	80098a4 <__sflush_r+0x1c>
 8009986:	4407      	add	r7, r0
 8009988:	eba8 0800 	sub.w	r8, r8, r0
 800998c:	e7e9      	b.n	8009962 <__sflush_r+0xda>
 800998e:	bf00      	nop
 8009990:	20400001 	.word	0x20400001

08009994 <_fflush_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	690b      	ldr	r3, [r1, #16]
 8009998:	4605      	mov	r5, r0
 800999a:	460c      	mov	r4, r1
 800999c:	b913      	cbnz	r3, 80099a4 <_fflush_r+0x10>
 800999e:	2500      	movs	r5, #0
 80099a0:	4628      	mov	r0, r5
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	b118      	cbz	r0, 80099ae <_fflush_r+0x1a>
 80099a6:	6983      	ldr	r3, [r0, #24]
 80099a8:	b90b      	cbnz	r3, 80099ae <_fflush_r+0x1a>
 80099aa:	f000 f887 	bl	8009abc <__sinit>
 80099ae:	4b14      	ldr	r3, [pc, #80]	; (8009a00 <_fflush_r+0x6c>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	d11b      	bne.n	80099ec <_fflush_r+0x58>
 80099b4:	686c      	ldr	r4, [r5, #4]
 80099b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0ef      	beq.n	800999e <_fflush_r+0xa>
 80099be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099c0:	07d0      	lsls	r0, r2, #31
 80099c2:	d404      	bmi.n	80099ce <_fflush_r+0x3a>
 80099c4:	0599      	lsls	r1, r3, #22
 80099c6:	d402      	bmi.n	80099ce <_fflush_r+0x3a>
 80099c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ca:	f000 f915 	bl	8009bf8 <__retarget_lock_acquire_recursive>
 80099ce:	4628      	mov	r0, r5
 80099d0:	4621      	mov	r1, r4
 80099d2:	f7ff ff59 	bl	8009888 <__sflush_r>
 80099d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099d8:	07da      	lsls	r2, r3, #31
 80099da:	4605      	mov	r5, r0
 80099dc:	d4e0      	bmi.n	80099a0 <_fflush_r+0xc>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	059b      	lsls	r3, r3, #22
 80099e2:	d4dd      	bmi.n	80099a0 <_fflush_r+0xc>
 80099e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099e6:	f000 f908 	bl	8009bfa <__retarget_lock_release_recursive>
 80099ea:	e7d9      	b.n	80099a0 <_fflush_r+0xc>
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <_fflush_r+0x70>)
 80099ee:	429c      	cmp	r4, r3
 80099f0:	d101      	bne.n	80099f6 <_fflush_r+0x62>
 80099f2:	68ac      	ldr	r4, [r5, #8]
 80099f4:	e7df      	b.n	80099b6 <_fflush_r+0x22>
 80099f6:	4b04      	ldr	r3, [pc, #16]	; (8009a08 <_fflush_r+0x74>)
 80099f8:	429c      	cmp	r4, r3
 80099fa:	bf08      	it	eq
 80099fc:	68ec      	ldreq	r4, [r5, #12]
 80099fe:	e7da      	b.n	80099b6 <_fflush_r+0x22>
 8009a00:	0800b9f4 	.word	0x0800b9f4
 8009a04:	0800ba14 	.word	0x0800ba14
 8009a08:	0800b9d4 	.word	0x0800b9d4

08009a0c <std>:
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	4604      	mov	r4, r0
 8009a12:	e9c0 3300 	strd	r3, r3, [r0]
 8009a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a1a:	6083      	str	r3, [r0, #8]
 8009a1c:	8181      	strh	r1, [r0, #12]
 8009a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8009a20:	81c2      	strh	r2, [r0, #14]
 8009a22:	6183      	str	r3, [r0, #24]
 8009a24:	4619      	mov	r1, r3
 8009a26:	2208      	movs	r2, #8
 8009a28:	305c      	adds	r0, #92	; 0x5c
 8009a2a:	f7ff fced 	bl	8009408 <memset>
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <std+0x38>)
 8009a30:	6263      	str	r3, [r4, #36]	; 0x24
 8009a32:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <std+0x3c>)
 8009a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a36:	4b05      	ldr	r3, [pc, #20]	; (8009a4c <std+0x40>)
 8009a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a3a:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <std+0x44>)
 8009a3c:	6224      	str	r4, [r4, #32]
 8009a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a40:	bd10      	pop	{r4, pc}
 8009a42:	bf00      	nop
 8009a44:	0800a2bd 	.word	0x0800a2bd
 8009a48:	0800a2df 	.word	0x0800a2df
 8009a4c:	0800a317 	.word	0x0800a317
 8009a50:	0800a33b 	.word	0x0800a33b

08009a54 <_cleanup_r>:
 8009a54:	4901      	ldr	r1, [pc, #4]	; (8009a5c <_cleanup_r+0x8>)
 8009a56:	f000 b8af 	b.w	8009bb8 <_fwalk_reent>
 8009a5a:	bf00      	nop
 8009a5c:	08009995 	.word	0x08009995

08009a60 <__sfmoreglue>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	1e4a      	subs	r2, r1, #1
 8009a64:	2568      	movs	r5, #104	; 0x68
 8009a66:	4355      	muls	r5, r2
 8009a68:	460e      	mov	r6, r1
 8009a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a6e:	f7ff fd23 	bl	80094b8 <_malloc_r>
 8009a72:	4604      	mov	r4, r0
 8009a74:	b140      	cbz	r0, 8009a88 <__sfmoreglue+0x28>
 8009a76:	2100      	movs	r1, #0
 8009a78:	e9c0 1600 	strd	r1, r6, [r0]
 8009a7c:	300c      	adds	r0, #12
 8009a7e:	60a0      	str	r0, [r4, #8]
 8009a80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a84:	f7ff fcc0 	bl	8009408 <memset>
 8009a88:	4620      	mov	r0, r4
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}

08009a8c <__sfp_lock_acquire>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__sfp_lock_acquire+0x8>)
 8009a8e:	f000 b8b3 	b.w	8009bf8 <__retarget_lock_acquire_recursive>
 8009a92:	bf00      	nop
 8009a94:	20002be4 	.word	0x20002be4

08009a98 <__sfp_lock_release>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__sfp_lock_release+0x8>)
 8009a9a:	f000 b8ae 	b.w	8009bfa <__retarget_lock_release_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	20002be4 	.word	0x20002be4

08009aa4 <__sinit_lock_acquire>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__sinit_lock_acquire+0x8>)
 8009aa6:	f000 b8a7 	b.w	8009bf8 <__retarget_lock_acquire_recursive>
 8009aaa:	bf00      	nop
 8009aac:	20002bdf 	.word	0x20002bdf

08009ab0 <__sinit_lock_release>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	; (8009ab8 <__sinit_lock_release+0x8>)
 8009ab2:	f000 b8a2 	b.w	8009bfa <__retarget_lock_release_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	20002bdf 	.word	0x20002bdf

08009abc <__sinit>:
 8009abc:	b510      	push	{r4, lr}
 8009abe:	4604      	mov	r4, r0
 8009ac0:	f7ff fff0 	bl	8009aa4 <__sinit_lock_acquire>
 8009ac4:	69a3      	ldr	r3, [r4, #24]
 8009ac6:	b11b      	cbz	r3, 8009ad0 <__sinit+0x14>
 8009ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009acc:	f7ff bff0 	b.w	8009ab0 <__sinit_lock_release>
 8009ad0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ad4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ad6:	4b13      	ldr	r3, [pc, #76]	; (8009b24 <__sinit+0x68>)
 8009ad8:	4a13      	ldr	r2, [pc, #76]	; (8009b28 <__sinit+0x6c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ade:	42a3      	cmp	r3, r4
 8009ae0:	bf04      	itt	eq
 8009ae2:	2301      	moveq	r3, #1
 8009ae4:	61a3      	streq	r3, [r4, #24]
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 f820 	bl	8009b2c <__sfp>
 8009aec:	6060      	str	r0, [r4, #4]
 8009aee:	4620      	mov	r0, r4
 8009af0:	f000 f81c 	bl	8009b2c <__sfp>
 8009af4:	60a0      	str	r0, [r4, #8]
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 f818 	bl	8009b2c <__sfp>
 8009afc:	2200      	movs	r2, #0
 8009afe:	60e0      	str	r0, [r4, #12]
 8009b00:	2104      	movs	r1, #4
 8009b02:	6860      	ldr	r0, [r4, #4]
 8009b04:	f7ff ff82 	bl	8009a0c <std>
 8009b08:	68a0      	ldr	r0, [r4, #8]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	2109      	movs	r1, #9
 8009b0e:	f7ff ff7d 	bl	8009a0c <std>
 8009b12:	68e0      	ldr	r0, [r4, #12]
 8009b14:	2202      	movs	r2, #2
 8009b16:	2112      	movs	r1, #18
 8009b18:	f7ff ff78 	bl	8009a0c <std>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	61a3      	str	r3, [r4, #24]
 8009b20:	e7d2      	b.n	8009ac8 <__sinit+0xc>
 8009b22:	bf00      	nop
 8009b24:	0800b9d0 	.word	0x0800b9d0
 8009b28:	08009a55 	.word	0x08009a55

08009b2c <__sfp>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	4607      	mov	r7, r0
 8009b30:	f7ff ffac 	bl	8009a8c <__sfp_lock_acquire>
 8009b34:	4b1e      	ldr	r3, [pc, #120]	; (8009bb0 <__sfp+0x84>)
 8009b36:	681e      	ldr	r6, [r3, #0]
 8009b38:	69b3      	ldr	r3, [r6, #24]
 8009b3a:	b913      	cbnz	r3, 8009b42 <__sfp+0x16>
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f7ff ffbd 	bl	8009abc <__sinit>
 8009b42:	3648      	adds	r6, #72	; 0x48
 8009b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	d503      	bpl.n	8009b54 <__sfp+0x28>
 8009b4c:	6833      	ldr	r3, [r6, #0]
 8009b4e:	b30b      	cbz	r3, 8009b94 <__sfp+0x68>
 8009b50:	6836      	ldr	r6, [r6, #0]
 8009b52:	e7f7      	b.n	8009b44 <__sfp+0x18>
 8009b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b58:	b9d5      	cbnz	r5, 8009b90 <__sfp+0x64>
 8009b5a:	4b16      	ldr	r3, [pc, #88]	; (8009bb4 <__sfp+0x88>)
 8009b5c:	60e3      	str	r3, [r4, #12]
 8009b5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b62:	6665      	str	r5, [r4, #100]	; 0x64
 8009b64:	f000 f847 	bl	8009bf6 <__retarget_lock_init_recursive>
 8009b68:	f7ff ff96 	bl	8009a98 <__sfp_lock_release>
 8009b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b74:	6025      	str	r5, [r4, #0]
 8009b76:	61a5      	str	r5, [r4, #24]
 8009b78:	2208      	movs	r2, #8
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b80:	f7ff fc42 	bl	8009408 <memset>
 8009b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b90:	3468      	adds	r4, #104	; 0x68
 8009b92:	e7d9      	b.n	8009b48 <__sfp+0x1c>
 8009b94:	2104      	movs	r1, #4
 8009b96:	4638      	mov	r0, r7
 8009b98:	f7ff ff62 	bl	8009a60 <__sfmoreglue>
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	6030      	str	r0, [r6, #0]
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d1d5      	bne.n	8009b50 <__sfp+0x24>
 8009ba4:	f7ff ff78 	bl	8009a98 <__sfp_lock_release>
 8009ba8:	230c      	movs	r3, #12
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	e7ee      	b.n	8009b8c <__sfp+0x60>
 8009bae:	bf00      	nop
 8009bb0:	0800b9d0 	.word	0x0800b9d0
 8009bb4:	ffff0001 	.word	0xffff0001

08009bb8 <_fwalk_reent>:
 8009bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	4688      	mov	r8, r1
 8009bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bc4:	2700      	movs	r7, #0
 8009bc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bca:	f1b9 0901 	subs.w	r9, r9, #1
 8009bce:	d505      	bpl.n	8009bdc <_fwalk_reent+0x24>
 8009bd0:	6824      	ldr	r4, [r4, #0]
 8009bd2:	2c00      	cmp	r4, #0
 8009bd4:	d1f7      	bne.n	8009bc6 <_fwalk_reent+0xe>
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bdc:	89ab      	ldrh	r3, [r5, #12]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d907      	bls.n	8009bf2 <_fwalk_reent+0x3a>
 8009be2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009be6:	3301      	adds	r3, #1
 8009be8:	d003      	beq.n	8009bf2 <_fwalk_reent+0x3a>
 8009bea:	4629      	mov	r1, r5
 8009bec:	4630      	mov	r0, r6
 8009bee:	47c0      	blx	r8
 8009bf0:	4307      	orrs	r7, r0
 8009bf2:	3568      	adds	r5, #104	; 0x68
 8009bf4:	e7e9      	b.n	8009bca <_fwalk_reent+0x12>

08009bf6 <__retarget_lock_init_recursive>:
 8009bf6:	4770      	bx	lr

08009bf8 <__retarget_lock_acquire_recursive>:
 8009bf8:	4770      	bx	lr

08009bfa <__retarget_lock_release_recursive>:
 8009bfa:	4770      	bx	lr

08009bfc <__swhatbuf_r>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	460e      	mov	r6, r1
 8009c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c04:	2900      	cmp	r1, #0
 8009c06:	b096      	sub	sp, #88	; 0x58
 8009c08:	4614      	mov	r4, r2
 8009c0a:	461d      	mov	r5, r3
 8009c0c:	da07      	bge.n	8009c1e <__swhatbuf_r+0x22>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	602b      	str	r3, [r5, #0]
 8009c12:	89b3      	ldrh	r3, [r6, #12]
 8009c14:	061a      	lsls	r2, r3, #24
 8009c16:	d410      	bmi.n	8009c3a <__swhatbuf_r+0x3e>
 8009c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c1c:	e00e      	b.n	8009c3c <__swhatbuf_r+0x40>
 8009c1e:	466a      	mov	r2, sp
 8009c20:	f000 fbb2 	bl	800a388 <_fstat_r>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	dbf2      	blt.n	8009c0e <__swhatbuf_r+0x12>
 8009c28:	9a01      	ldr	r2, [sp, #4]
 8009c2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c32:	425a      	negs	r2, r3
 8009c34:	415a      	adcs	r2, r3
 8009c36:	602a      	str	r2, [r5, #0]
 8009c38:	e7ee      	b.n	8009c18 <__swhatbuf_r+0x1c>
 8009c3a:	2340      	movs	r3, #64	; 0x40
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	6023      	str	r3, [r4, #0]
 8009c40:	b016      	add	sp, #88	; 0x58
 8009c42:	bd70      	pop	{r4, r5, r6, pc}

08009c44 <__smakebuf_r>:
 8009c44:	898b      	ldrh	r3, [r1, #12]
 8009c46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c48:	079d      	lsls	r5, r3, #30
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	d507      	bpl.n	8009c60 <__smakebuf_r+0x1c>
 8009c50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	2301      	movs	r3, #1
 8009c5a:	6163      	str	r3, [r4, #20]
 8009c5c:	b002      	add	sp, #8
 8009c5e:	bd70      	pop	{r4, r5, r6, pc}
 8009c60:	ab01      	add	r3, sp, #4
 8009c62:	466a      	mov	r2, sp
 8009c64:	f7ff ffca 	bl	8009bfc <__swhatbuf_r>
 8009c68:	9900      	ldr	r1, [sp, #0]
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f7ff fc23 	bl	80094b8 <_malloc_r>
 8009c72:	b948      	cbnz	r0, 8009c88 <__smakebuf_r+0x44>
 8009c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c78:	059a      	lsls	r2, r3, #22
 8009c7a:	d4ef      	bmi.n	8009c5c <__smakebuf_r+0x18>
 8009c7c:	f023 0303 	bic.w	r3, r3, #3
 8009c80:	f043 0302 	orr.w	r3, r3, #2
 8009c84:	81a3      	strh	r3, [r4, #12]
 8009c86:	e7e3      	b.n	8009c50 <__smakebuf_r+0xc>
 8009c88:	4b0d      	ldr	r3, [pc, #52]	; (8009cc0 <__smakebuf_r+0x7c>)
 8009c8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c8c:	89a3      	ldrh	r3, [r4, #12]
 8009c8e:	6020      	str	r0, [r4, #0]
 8009c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	9b00      	ldr	r3, [sp, #0]
 8009c98:	6163      	str	r3, [r4, #20]
 8009c9a:	9b01      	ldr	r3, [sp, #4]
 8009c9c:	6120      	str	r0, [r4, #16]
 8009c9e:	b15b      	cbz	r3, 8009cb8 <__smakebuf_r+0x74>
 8009ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f000 fb81 	bl	800a3ac <_isatty_r>
 8009caa:	b128      	cbz	r0, 8009cb8 <__smakebuf_r+0x74>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	f043 0301 	orr.w	r3, r3, #1
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	89a0      	ldrh	r0, [r4, #12]
 8009cba:	4305      	orrs	r5, r0
 8009cbc:	81a5      	strh	r5, [r4, #12]
 8009cbe:	e7cd      	b.n	8009c5c <__smakebuf_r+0x18>
 8009cc0:	08009a55 	.word	0x08009a55

08009cc4 <__malloc_lock>:
 8009cc4:	4801      	ldr	r0, [pc, #4]	; (8009ccc <__malloc_lock+0x8>)
 8009cc6:	f7ff bf97 	b.w	8009bf8 <__retarget_lock_acquire_recursive>
 8009cca:	bf00      	nop
 8009ccc:	20002be0 	.word	0x20002be0

08009cd0 <__malloc_unlock>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	; (8009cd8 <__malloc_unlock+0x8>)
 8009cd2:	f7ff bf92 	b.w	8009bfa <__retarget_lock_release_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	20002be0 	.word	0x20002be0

08009cdc <__ssputs_r>:
 8009cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	688e      	ldr	r6, [r1, #8]
 8009ce2:	429e      	cmp	r6, r3
 8009ce4:	4682      	mov	sl, r0
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	4690      	mov	r8, r2
 8009cea:	461f      	mov	r7, r3
 8009cec:	d838      	bhi.n	8009d60 <__ssputs_r+0x84>
 8009cee:	898a      	ldrh	r2, [r1, #12]
 8009cf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cf4:	d032      	beq.n	8009d5c <__ssputs_r+0x80>
 8009cf6:	6825      	ldr	r5, [r4, #0]
 8009cf8:	6909      	ldr	r1, [r1, #16]
 8009cfa:	eba5 0901 	sub.w	r9, r5, r1
 8009cfe:	6965      	ldr	r5, [r4, #20]
 8009d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d08:	3301      	adds	r3, #1
 8009d0a:	444b      	add	r3, r9
 8009d0c:	106d      	asrs	r5, r5, #1
 8009d0e:	429d      	cmp	r5, r3
 8009d10:	bf38      	it	cc
 8009d12:	461d      	movcc	r5, r3
 8009d14:	0553      	lsls	r3, r2, #21
 8009d16:	d531      	bpl.n	8009d7c <__ssputs_r+0xa0>
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7ff fbcd 	bl	80094b8 <_malloc_r>
 8009d1e:	4606      	mov	r6, r0
 8009d20:	b950      	cbnz	r0, 8009d38 <__ssputs_r+0x5c>
 8009d22:	230c      	movs	r3, #12
 8009d24:	f8ca 3000 	str.w	r3, [sl]
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	f04f 30ff 	mov.w	r0, #4294967295
 8009d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d38:	6921      	ldr	r1, [r4, #16]
 8009d3a:	464a      	mov	r2, r9
 8009d3c:	f000 fb58 	bl	800a3f0 <memcpy>
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	6126      	str	r6, [r4, #16]
 8009d4e:	6165      	str	r5, [r4, #20]
 8009d50:	444e      	add	r6, r9
 8009d52:	eba5 0509 	sub.w	r5, r5, r9
 8009d56:	6026      	str	r6, [r4, #0]
 8009d58:	60a5      	str	r5, [r4, #8]
 8009d5a:	463e      	mov	r6, r7
 8009d5c:	42be      	cmp	r6, r7
 8009d5e:	d900      	bls.n	8009d62 <__ssputs_r+0x86>
 8009d60:	463e      	mov	r6, r7
 8009d62:	4632      	mov	r2, r6
 8009d64:	6820      	ldr	r0, [r4, #0]
 8009d66:	4641      	mov	r1, r8
 8009d68:	f000 fb50 	bl	800a40c <memmove>
 8009d6c:	68a3      	ldr	r3, [r4, #8]
 8009d6e:	6822      	ldr	r2, [r4, #0]
 8009d70:	1b9b      	subs	r3, r3, r6
 8009d72:	4432      	add	r2, r6
 8009d74:	60a3      	str	r3, [r4, #8]
 8009d76:	6022      	str	r2, [r4, #0]
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e7db      	b.n	8009d34 <__ssputs_r+0x58>
 8009d7c:	462a      	mov	r2, r5
 8009d7e:	f000 fb5f 	bl	800a440 <_realloc_r>
 8009d82:	4606      	mov	r6, r0
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d1e1      	bne.n	8009d4c <__ssputs_r+0x70>
 8009d88:	6921      	ldr	r1, [r4, #16]
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	f7ff fb44 	bl	8009418 <_free_r>
 8009d90:	e7c7      	b.n	8009d22 <__ssputs_r+0x46>
	...

08009d94 <_svfiprintf_r>:
 8009d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d98:	4698      	mov	r8, r3
 8009d9a:	898b      	ldrh	r3, [r1, #12]
 8009d9c:	061b      	lsls	r3, r3, #24
 8009d9e:	b09d      	sub	sp, #116	; 0x74
 8009da0:	4607      	mov	r7, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	4614      	mov	r4, r2
 8009da6:	d50e      	bpl.n	8009dc6 <_svfiprintf_r+0x32>
 8009da8:	690b      	ldr	r3, [r1, #16]
 8009daa:	b963      	cbnz	r3, 8009dc6 <_svfiprintf_r+0x32>
 8009dac:	2140      	movs	r1, #64	; 0x40
 8009dae:	f7ff fb83 	bl	80094b8 <_malloc_r>
 8009db2:	6028      	str	r0, [r5, #0]
 8009db4:	6128      	str	r0, [r5, #16]
 8009db6:	b920      	cbnz	r0, 8009dc2 <_svfiprintf_r+0x2e>
 8009db8:	230c      	movs	r3, #12
 8009dba:	603b      	str	r3, [r7, #0]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	e0d1      	b.n	8009f66 <_svfiprintf_r+0x1d2>
 8009dc2:	2340      	movs	r3, #64	; 0x40
 8009dc4:	616b      	str	r3, [r5, #20]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dca:	2320      	movs	r3, #32
 8009dcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dd4:	2330      	movs	r3, #48	; 0x30
 8009dd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f80 <_svfiprintf_r+0x1ec>
 8009dda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dde:	f04f 0901 	mov.w	r9, #1
 8009de2:	4623      	mov	r3, r4
 8009de4:	469a      	mov	sl, r3
 8009de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dea:	b10a      	cbz	r2, 8009df0 <_svfiprintf_r+0x5c>
 8009dec:	2a25      	cmp	r2, #37	; 0x25
 8009dee:	d1f9      	bne.n	8009de4 <_svfiprintf_r+0x50>
 8009df0:	ebba 0b04 	subs.w	fp, sl, r4
 8009df4:	d00b      	beq.n	8009e0e <_svfiprintf_r+0x7a>
 8009df6:	465b      	mov	r3, fp
 8009df8:	4622      	mov	r2, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff ff6d 	bl	8009cdc <__ssputs_r>
 8009e02:	3001      	adds	r0, #1
 8009e04:	f000 80aa 	beq.w	8009f5c <_svfiprintf_r+0x1c8>
 8009e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e0a:	445a      	add	r2, fp
 8009e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 80a2 	beq.w	8009f5c <_svfiprintf_r+0x1c8>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e22:	f10a 0a01 	add.w	sl, sl, #1
 8009e26:	9304      	str	r3, [sp, #16]
 8009e28:	9307      	str	r3, [sp, #28]
 8009e2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e2e:	931a      	str	r3, [sp, #104]	; 0x68
 8009e30:	4654      	mov	r4, sl
 8009e32:	2205      	movs	r2, #5
 8009e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e38:	4851      	ldr	r0, [pc, #324]	; (8009f80 <_svfiprintf_r+0x1ec>)
 8009e3a:	f7f6 f9d9 	bl	80001f0 <memchr>
 8009e3e:	9a04      	ldr	r2, [sp, #16]
 8009e40:	b9d8      	cbnz	r0, 8009e7a <_svfiprintf_r+0xe6>
 8009e42:	06d0      	lsls	r0, r2, #27
 8009e44:	bf44      	itt	mi
 8009e46:	2320      	movmi	r3, #32
 8009e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e4c:	0711      	lsls	r1, r2, #28
 8009e4e:	bf44      	itt	mi
 8009e50:	232b      	movmi	r3, #43	; 0x2b
 8009e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e56:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e5c:	d015      	beq.n	8009e8a <_svfiprintf_r+0xf6>
 8009e5e:	9a07      	ldr	r2, [sp, #28]
 8009e60:	4654      	mov	r4, sl
 8009e62:	2000      	movs	r0, #0
 8009e64:	f04f 0c0a 	mov.w	ip, #10
 8009e68:	4621      	mov	r1, r4
 8009e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e6e:	3b30      	subs	r3, #48	; 0x30
 8009e70:	2b09      	cmp	r3, #9
 8009e72:	d94e      	bls.n	8009f12 <_svfiprintf_r+0x17e>
 8009e74:	b1b0      	cbz	r0, 8009ea4 <_svfiprintf_r+0x110>
 8009e76:	9207      	str	r2, [sp, #28]
 8009e78:	e014      	b.n	8009ea4 <_svfiprintf_r+0x110>
 8009e7a:	eba0 0308 	sub.w	r3, r0, r8
 8009e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e82:	4313      	orrs	r3, r2
 8009e84:	9304      	str	r3, [sp, #16]
 8009e86:	46a2      	mov	sl, r4
 8009e88:	e7d2      	b.n	8009e30 <_svfiprintf_r+0x9c>
 8009e8a:	9b03      	ldr	r3, [sp, #12]
 8009e8c:	1d19      	adds	r1, r3, #4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	9103      	str	r1, [sp, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bfbb      	ittet	lt
 8009e96:	425b      	neglt	r3, r3
 8009e98:	f042 0202 	orrlt.w	r2, r2, #2
 8009e9c:	9307      	strge	r3, [sp, #28]
 8009e9e:	9307      	strlt	r3, [sp, #28]
 8009ea0:	bfb8      	it	lt
 8009ea2:	9204      	strlt	r2, [sp, #16]
 8009ea4:	7823      	ldrb	r3, [r4, #0]
 8009ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ea8:	d10c      	bne.n	8009ec4 <_svfiprintf_r+0x130>
 8009eaa:	7863      	ldrb	r3, [r4, #1]
 8009eac:	2b2a      	cmp	r3, #42	; 0x2a
 8009eae:	d135      	bne.n	8009f1c <_svfiprintf_r+0x188>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	1d1a      	adds	r2, r3, #4
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	9203      	str	r2, [sp, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bfb8      	it	lt
 8009ebc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ec0:	3402      	adds	r4, #2
 8009ec2:	9305      	str	r3, [sp, #20]
 8009ec4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f90 <_svfiprintf_r+0x1fc>
 8009ec8:	7821      	ldrb	r1, [r4, #0]
 8009eca:	2203      	movs	r2, #3
 8009ecc:	4650      	mov	r0, sl
 8009ece:	f7f6 f98f 	bl	80001f0 <memchr>
 8009ed2:	b140      	cbz	r0, 8009ee6 <_svfiprintf_r+0x152>
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	eba0 000a 	sub.w	r0, r0, sl
 8009eda:	fa03 f000 	lsl.w	r0, r3, r0
 8009ede:	9b04      	ldr	r3, [sp, #16]
 8009ee0:	4303      	orrs	r3, r0
 8009ee2:	3401      	adds	r4, #1
 8009ee4:	9304      	str	r3, [sp, #16]
 8009ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eea:	4826      	ldr	r0, [pc, #152]	; (8009f84 <_svfiprintf_r+0x1f0>)
 8009eec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ef0:	2206      	movs	r2, #6
 8009ef2:	f7f6 f97d 	bl	80001f0 <memchr>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d038      	beq.n	8009f6c <_svfiprintf_r+0x1d8>
 8009efa:	4b23      	ldr	r3, [pc, #140]	; (8009f88 <_svfiprintf_r+0x1f4>)
 8009efc:	bb1b      	cbnz	r3, 8009f46 <_svfiprintf_r+0x1b2>
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	3307      	adds	r3, #7
 8009f02:	f023 0307 	bic.w	r3, r3, #7
 8009f06:	3308      	adds	r3, #8
 8009f08:	9303      	str	r3, [sp, #12]
 8009f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0c:	4433      	add	r3, r6
 8009f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f10:	e767      	b.n	8009de2 <_svfiprintf_r+0x4e>
 8009f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f16:	460c      	mov	r4, r1
 8009f18:	2001      	movs	r0, #1
 8009f1a:	e7a5      	b.n	8009e68 <_svfiprintf_r+0xd4>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	3401      	adds	r4, #1
 8009f20:	9305      	str	r3, [sp, #20]
 8009f22:	4619      	mov	r1, r3
 8009f24:	f04f 0c0a 	mov.w	ip, #10
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f2e:	3a30      	subs	r2, #48	; 0x30
 8009f30:	2a09      	cmp	r2, #9
 8009f32:	d903      	bls.n	8009f3c <_svfiprintf_r+0x1a8>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d0c5      	beq.n	8009ec4 <_svfiprintf_r+0x130>
 8009f38:	9105      	str	r1, [sp, #20]
 8009f3a:	e7c3      	b.n	8009ec4 <_svfiprintf_r+0x130>
 8009f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f40:	4604      	mov	r4, r0
 8009f42:	2301      	movs	r3, #1
 8009f44:	e7f0      	b.n	8009f28 <_svfiprintf_r+0x194>
 8009f46:	ab03      	add	r3, sp, #12
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	4b0f      	ldr	r3, [pc, #60]	; (8009f8c <_svfiprintf_r+0x1f8>)
 8009f4e:	a904      	add	r1, sp, #16
 8009f50:	4638      	mov	r0, r7
 8009f52:	f3af 8000 	nop.w
 8009f56:	1c42      	adds	r2, r0, #1
 8009f58:	4606      	mov	r6, r0
 8009f5a:	d1d6      	bne.n	8009f0a <_svfiprintf_r+0x176>
 8009f5c:	89ab      	ldrh	r3, [r5, #12]
 8009f5e:	065b      	lsls	r3, r3, #25
 8009f60:	f53f af2c 	bmi.w	8009dbc <_svfiprintf_r+0x28>
 8009f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f66:	b01d      	add	sp, #116	; 0x74
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	ab03      	add	r3, sp, #12
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	462a      	mov	r2, r5
 8009f72:	4b06      	ldr	r3, [pc, #24]	; (8009f8c <_svfiprintf_r+0x1f8>)
 8009f74:	a904      	add	r1, sp, #16
 8009f76:	4638      	mov	r0, r7
 8009f78:	f000 f87a 	bl	800a070 <_printf_i>
 8009f7c:	e7eb      	b.n	8009f56 <_svfiprintf_r+0x1c2>
 8009f7e:	bf00      	nop
 8009f80:	0800ba34 	.word	0x0800ba34
 8009f84:	0800ba3e 	.word	0x0800ba3e
 8009f88:	00000000 	.word	0x00000000
 8009f8c:	08009cdd 	.word	0x08009cdd
 8009f90:	0800ba3a 	.word	0x0800ba3a

08009f94 <_printf_common>:
 8009f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	4616      	mov	r6, r2
 8009f9a:	4699      	mov	r9, r3
 8009f9c:	688a      	ldr	r2, [r1, #8]
 8009f9e:	690b      	ldr	r3, [r1, #16]
 8009fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	bfb8      	it	lt
 8009fa8:	4613      	movlt	r3, r2
 8009faa:	6033      	str	r3, [r6, #0]
 8009fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	b10a      	cbz	r2, 8009fba <_printf_common+0x26>
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	6033      	str	r3, [r6, #0]
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	0699      	lsls	r1, r3, #26
 8009fbe:	bf42      	ittt	mi
 8009fc0:	6833      	ldrmi	r3, [r6, #0]
 8009fc2:	3302      	addmi	r3, #2
 8009fc4:	6033      	strmi	r3, [r6, #0]
 8009fc6:	6825      	ldr	r5, [r4, #0]
 8009fc8:	f015 0506 	ands.w	r5, r5, #6
 8009fcc:	d106      	bne.n	8009fdc <_printf_common+0x48>
 8009fce:	f104 0a19 	add.w	sl, r4, #25
 8009fd2:	68e3      	ldr	r3, [r4, #12]
 8009fd4:	6832      	ldr	r2, [r6, #0]
 8009fd6:	1a9b      	subs	r3, r3, r2
 8009fd8:	42ab      	cmp	r3, r5
 8009fda:	dc26      	bgt.n	800a02a <_printf_common+0x96>
 8009fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fe0:	1e13      	subs	r3, r2, #0
 8009fe2:	6822      	ldr	r2, [r4, #0]
 8009fe4:	bf18      	it	ne
 8009fe6:	2301      	movne	r3, #1
 8009fe8:	0692      	lsls	r2, r2, #26
 8009fea:	d42b      	bmi.n	800a044 <_printf_common+0xb0>
 8009fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ff0:	4649      	mov	r1, r9
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	47c0      	blx	r8
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	d01e      	beq.n	800a038 <_printf_common+0xa4>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	68e5      	ldr	r5, [r4, #12]
 8009ffe:	6832      	ldr	r2, [r6, #0]
 800a000:	f003 0306 	and.w	r3, r3, #6
 800a004:	2b04      	cmp	r3, #4
 800a006:	bf08      	it	eq
 800a008:	1aad      	subeq	r5, r5, r2
 800a00a:	68a3      	ldr	r3, [r4, #8]
 800a00c:	6922      	ldr	r2, [r4, #16]
 800a00e:	bf0c      	ite	eq
 800a010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a014:	2500      	movne	r5, #0
 800a016:	4293      	cmp	r3, r2
 800a018:	bfc4      	itt	gt
 800a01a:	1a9b      	subgt	r3, r3, r2
 800a01c:	18ed      	addgt	r5, r5, r3
 800a01e:	2600      	movs	r6, #0
 800a020:	341a      	adds	r4, #26
 800a022:	42b5      	cmp	r5, r6
 800a024:	d11a      	bne.n	800a05c <_printf_common+0xc8>
 800a026:	2000      	movs	r0, #0
 800a028:	e008      	b.n	800a03c <_printf_common+0xa8>
 800a02a:	2301      	movs	r3, #1
 800a02c:	4652      	mov	r2, sl
 800a02e:	4649      	mov	r1, r9
 800a030:	4638      	mov	r0, r7
 800a032:	47c0      	blx	r8
 800a034:	3001      	adds	r0, #1
 800a036:	d103      	bne.n	800a040 <_printf_common+0xac>
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a040:	3501      	adds	r5, #1
 800a042:	e7c6      	b.n	8009fd2 <_printf_common+0x3e>
 800a044:	18e1      	adds	r1, r4, r3
 800a046:	1c5a      	adds	r2, r3, #1
 800a048:	2030      	movs	r0, #48	; 0x30
 800a04a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a04e:	4422      	add	r2, r4
 800a050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a058:	3302      	adds	r3, #2
 800a05a:	e7c7      	b.n	8009fec <_printf_common+0x58>
 800a05c:	2301      	movs	r3, #1
 800a05e:	4622      	mov	r2, r4
 800a060:	4649      	mov	r1, r9
 800a062:	4638      	mov	r0, r7
 800a064:	47c0      	blx	r8
 800a066:	3001      	adds	r0, #1
 800a068:	d0e6      	beq.n	800a038 <_printf_common+0xa4>
 800a06a:	3601      	adds	r6, #1
 800a06c:	e7d9      	b.n	800a022 <_printf_common+0x8e>
	...

0800a070 <_printf_i>:
 800a070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a074:	460c      	mov	r4, r1
 800a076:	4691      	mov	r9, r2
 800a078:	7e27      	ldrb	r7, [r4, #24]
 800a07a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a07c:	2f78      	cmp	r7, #120	; 0x78
 800a07e:	4680      	mov	r8, r0
 800a080:	469a      	mov	sl, r3
 800a082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a086:	d807      	bhi.n	800a098 <_printf_i+0x28>
 800a088:	2f62      	cmp	r7, #98	; 0x62
 800a08a:	d80a      	bhi.n	800a0a2 <_printf_i+0x32>
 800a08c:	2f00      	cmp	r7, #0
 800a08e:	f000 80d8 	beq.w	800a242 <_printf_i+0x1d2>
 800a092:	2f58      	cmp	r7, #88	; 0x58
 800a094:	f000 80a3 	beq.w	800a1de <_printf_i+0x16e>
 800a098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a09c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0a0:	e03a      	b.n	800a118 <_printf_i+0xa8>
 800a0a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0a6:	2b15      	cmp	r3, #21
 800a0a8:	d8f6      	bhi.n	800a098 <_printf_i+0x28>
 800a0aa:	a001      	add	r0, pc, #4	; (adr r0, 800a0b0 <_printf_i+0x40>)
 800a0ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a0b0:	0800a109 	.word	0x0800a109
 800a0b4:	0800a11d 	.word	0x0800a11d
 800a0b8:	0800a099 	.word	0x0800a099
 800a0bc:	0800a099 	.word	0x0800a099
 800a0c0:	0800a099 	.word	0x0800a099
 800a0c4:	0800a099 	.word	0x0800a099
 800a0c8:	0800a11d 	.word	0x0800a11d
 800a0cc:	0800a099 	.word	0x0800a099
 800a0d0:	0800a099 	.word	0x0800a099
 800a0d4:	0800a099 	.word	0x0800a099
 800a0d8:	0800a099 	.word	0x0800a099
 800a0dc:	0800a229 	.word	0x0800a229
 800a0e0:	0800a14d 	.word	0x0800a14d
 800a0e4:	0800a20b 	.word	0x0800a20b
 800a0e8:	0800a099 	.word	0x0800a099
 800a0ec:	0800a099 	.word	0x0800a099
 800a0f0:	0800a24b 	.word	0x0800a24b
 800a0f4:	0800a099 	.word	0x0800a099
 800a0f8:	0800a14d 	.word	0x0800a14d
 800a0fc:	0800a099 	.word	0x0800a099
 800a100:	0800a099 	.word	0x0800a099
 800a104:	0800a213 	.word	0x0800a213
 800a108:	680b      	ldr	r3, [r1, #0]
 800a10a:	1d1a      	adds	r2, r3, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	600a      	str	r2, [r1, #0]
 800a110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a118:	2301      	movs	r3, #1
 800a11a:	e0a3      	b.n	800a264 <_printf_i+0x1f4>
 800a11c:	6825      	ldr	r5, [r4, #0]
 800a11e:	6808      	ldr	r0, [r1, #0]
 800a120:	062e      	lsls	r6, r5, #24
 800a122:	f100 0304 	add.w	r3, r0, #4
 800a126:	d50a      	bpl.n	800a13e <_printf_i+0xce>
 800a128:	6805      	ldr	r5, [r0, #0]
 800a12a:	600b      	str	r3, [r1, #0]
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	da03      	bge.n	800a138 <_printf_i+0xc8>
 800a130:	232d      	movs	r3, #45	; 0x2d
 800a132:	426d      	negs	r5, r5
 800a134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a138:	485e      	ldr	r0, [pc, #376]	; (800a2b4 <_printf_i+0x244>)
 800a13a:	230a      	movs	r3, #10
 800a13c:	e019      	b.n	800a172 <_printf_i+0x102>
 800a13e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a142:	6805      	ldr	r5, [r0, #0]
 800a144:	600b      	str	r3, [r1, #0]
 800a146:	bf18      	it	ne
 800a148:	b22d      	sxthne	r5, r5
 800a14a:	e7ef      	b.n	800a12c <_printf_i+0xbc>
 800a14c:	680b      	ldr	r3, [r1, #0]
 800a14e:	6825      	ldr	r5, [r4, #0]
 800a150:	1d18      	adds	r0, r3, #4
 800a152:	6008      	str	r0, [r1, #0]
 800a154:	0628      	lsls	r0, r5, #24
 800a156:	d501      	bpl.n	800a15c <_printf_i+0xec>
 800a158:	681d      	ldr	r5, [r3, #0]
 800a15a:	e002      	b.n	800a162 <_printf_i+0xf2>
 800a15c:	0669      	lsls	r1, r5, #25
 800a15e:	d5fb      	bpl.n	800a158 <_printf_i+0xe8>
 800a160:	881d      	ldrh	r5, [r3, #0]
 800a162:	4854      	ldr	r0, [pc, #336]	; (800a2b4 <_printf_i+0x244>)
 800a164:	2f6f      	cmp	r7, #111	; 0x6f
 800a166:	bf0c      	ite	eq
 800a168:	2308      	moveq	r3, #8
 800a16a:	230a      	movne	r3, #10
 800a16c:	2100      	movs	r1, #0
 800a16e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a172:	6866      	ldr	r6, [r4, #4]
 800a174:	60a6      	str	r6, [r4, #8]
 800a176:	2e00      	cmp	r6, #0
 800a178:	bfa2      	ittt	ge
 800a17a:	6821      	ldrge	r1, [r4, #0]
 800a17c:	f021 0104 	bicge.w	r1, r1, #4
 800a180:	6021      	strge	r1, [r4, #0]
 800a182:	b90d      	cbnz	r5, 800a188 <_printf_i+0x118>
 800a184:	2e00      	cmp	r6, #0
 800a186:	d04d      	beq.n	800a224 <_printf_i+0x1b4>
 800a188:	4616      	mov	r6, r2
 800a18a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a18e:	fb03 5711 	mls	r7, r3, r1, r5
 800a192:	5dc7      	ldrb	r7, [r0, r7]
 800a194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a198:	462f      	mov	r7, r5
 800a19a:	42bb      	cmp	r3, r7
 800a19c:	460d      	mov	r5, r1
 800a19e:	d9f4      	bls.n	800a18a <_printf_i+0x11a>
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	d10b      	bne.n	800a1bc <_printf_i+0x14c>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	07df      	lsls	r7, r3, #31
 800a1a8:	d508      	bpl.n	800a1bc <_printf_i+0x14c>
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	6861      	ldr	r1, [r4, #4]
 800a1ae:	4299      	cmp	r1, r3
 800a1b0:	bfde      	ittt	le
 800a1b2:	2330      	movle	r3, #48	; 0x30
 800a1b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1bc:	1b92      	subs	r2, r2, r6
 800a1be:	6122      	str	r2, [r4, #16]
 800a1c0:	f8cd a000 	str.w	sl, [sp]
 800a1c4:	464b      	mov	r3, r9
 800a1c6:	aa03      	add	r2, sp, #12
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	f7ff fee2 	bl	8009f94 <_printf_common>
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d14c      	bne.n	800a26e <_printf_i+0x1fe>
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	b004      	add	sp, #16
 800a1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1de:	4835      	ldr	r0, [pc, #212]	; (800a2b4 <_printf_i+0x244>)
 800a1e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	680e      	ldr	r6, [r1, #0]
 800a1e8:	061f      	lsls	r7, r3, #24
 800a1ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800a1ee:	600e      	str	r6, [r1, #0]
 800a1f0:	d514      	bpl.n	800a21c <_printf_i+0x1ac>
 800a1f2:	07d9      	lsls	r1, r3, #31
 800a1f4:	bf44      	itt	mi
 800a1f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a1fa:	6023      	strmi	r3, [r4, #0]
 800a1fc:	b91d      	cbnz	r5, 800a206 <_printf_i+0x196>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	f023 0320 	bic.w	r3, r3, #32
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	2310      	movs	r3, #16
 800a208:	e7b0      	b.n	800a16c <_printf_i+0xfc>
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	f043 0320 	orr.w	r3, r3, #32
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	2378      	movs	r3, #120	; 0x78
 800a214:	4828      	ldr	r0, [pc, #160]	; (800a2b8 <_printf_i+0x248>)
 800a216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a21a:	e7e3      	b.n	800a1e4 <_printf_i+0x174>
 800a21c:	065e      	lsls	r6, r3, #25
 800a21e:	bf48      	it	mi
 800a220:	b2ad      	uxthmi	r5, r5
 800a222:	e7e6      	b.n	800a1f2 <_printf_i+0x182>
 800a224:	4616      	mov	r6, r2
 800a226:	e7bb      	b.n	800a1a0 <_printf_i+0x130>
 800a228:	680b      	ldr	r3, [r1, #0]
 800a22a:	6826      	ldr	r6, [r4, #0]
 800a22c:	6960      	ldr	r0, [r4, #20]
 800a22e:	1d1d      	adds	r5, r3, #4
 800a230:	600d      	str	r5, [r1, #0]
 800a232:	0635      	lsls	r5, r6, #24
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	d501      	bpl.n	800a23c <_printf_i+0x1cc>
 800a238:	6018      	str	r0, [r3, #0]
 800a23a:	e002      	b.n	800a242 <_printf_i+0x1d2>
 800a23c:	0671      	lsls	r1, r6, #25
 800a23e:	d5fb      	bpl.n	800a238 <_printf_i+0x1c8>
 800a240:	8018      	strh	r0, [r3, #0]
 800a242:	2300      	movs	r3, #0
 800a244:	6123      	str	r3, [r4, #16]
 800a246:	4616      	mov	r6, r2
 800a248:	e7ba      	b.n	800a1c0 <_printf_i+0x150>
 800a24a:	680b      	ldr	r3, [r1, #0]
 800a24c:	1d1a      	adds	r2, r3, #4
 800a24e:	600a      	str	r2, [r1, #0]
 800a250:	681e      	ldr	r6, [r3, #0]
 800a252:	6862      	ldr	r2, [r4, #4]
 800a254:	2100      	movs	r1, #0
 800a256:	4630      	mov	r0, r6
 800a258:	f7f5 ffca 	bl	80001f0 <memchr>
 800a25c:	b108      	cbz	r0, 800a262 <_printf_i+0x1f2>
 800a25e:	1b80      	subs	r0, r0, r6
 800a260:	6060      	str	r0, [r4, #4]
 800a262:	6863      	ldr	r3, [r4, #4]
 800a264:	6123      	str	r3, [r4, #16]
 800a266:	2300      	movs	r3, #0
 800a268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a26c:	e7a8      	b.n	800a1c0 <_printf_i+0x150>
 800a26e:	6923      	ldr	r3, [r4, #16]
 800a270:	4632      	mov	r2, r6
 800a272:	4649      	mov	r1, r9
 800a274:	4640      	mov	r0, r8
 800a276:	47d0      	blx	sl
 800a278:	3001      	adds	r0, #1
 800a27a:	d0ab      	beq.n	800a1d4 <_printf_i+0x164>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	079b      	lsls	r3, r3, #30
 800a280:	d413      	bmi.n	800a2aa <_printf_i+0x23a>
 800a282:	68e0      	ldr	r0, [r4, #12]
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	4298      	cmp	r0, r3
 800a288:	bfb8      	it	lt
 800a28a:	4618      	movlt	r0, r3
 800a28c:	e7a4      	b.n	800a1d8 <_printf_i+0x168>
 800a28e:	2301      	movs	r3, #1
 800a290:	4632      	mov	r2, r6
 800a292:	4649      	mov	r1, r9
 800a294:	4640      	mov	r0, r8
 800a296:	47d0      	blx	sl
 800a298:	3001      	adds	r0, #1
 800a29a:	d09b      	beq.n	800a1d4 <_printf_i+0x164>
 800a29c:	3501      	adds	r5, #1
 800a29e:	68e3      	ldr	r3, [r4, #12]
 800a2a0:	9903      	ldr	r1, [sp, #12]
 800a2a2:	1a5b      	subs	r3, r3, r1
 800a2a4:	42ab      	cmp	r3, r5
 800a2a6:	dcf2      	bgt.n	800a28e <_printf_i+0x21e>
 800a2a8:	e7eb      	b.n	800a282 <_printf_i+0x212>
 800a2aa:	2500      	movs	r5, #0
 800a2ac:	f104 0619 	add.w	r6, r4, #25
 800a2b0:	e7f5      	b.n	800a29e <_printf_i+0x22e>
 800a2b2:	bf00      	nop
 800a2b4:	0800ba45 	.word	0x0800ba45
 800a2b8:	0800ba56 	.word	0x0800ba56

0800a2bc <__sread>:
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	460c      	mov	r4, r1
 800a2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c4:	f000 f8e2 	bl	800a48c <_read_r>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	bfab      	itete	ge
 800a2cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a2d0:	181b      	addge	r3, r3, r0
 800a2d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2d6:	bfac      	ite	ge
 800a2d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2da:	81a3      	strhlt	r3, [r4, #12]
 800a2dc:	bd10      	pop	{r4, pc}

0800a2de <__swrite>:
 800a2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e2:	461f      	mov	r7, r3
 800a2e4:	898b      	ldrh	r3, [r1, #12]
 800a2e6:	05db      	lsls	r3, r3, #23
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	4616      	mov	r6, r2
 800a2ee:	d505      	bpl.n	800a2fc <__swrite+0x1e>
 800a2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f000 f868 	bl	800a3cc <_lseek_r>
 800a2fc:	89a3      	ldrh	r3, [r4, #12]
 800a2fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a306:	81a3      	strh	r3, [r4, #12]
 800a308:	4632      	mov	r2, r6
 800a30a:	463b      	mov	r3, r7
 800a30c:	4628      	mov	r0, r5
 800a30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a312:	f000 b817 	b.w	800a344 <_write_r>

0800a316 <__sseek>:
 800a316:	b510      	push	{r4, lr}
 800a318:	460c      	mov	r4, r1
 800a31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31e:	f000 f855 	bl	800a3cc <_lseek_r>
 800a322:	1c43      	adds	r3, r0, #1
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	bf15      	itete	ne
 800a328:	6560      	strne	r0, [r4, #84]	; 0x54
 800a32a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a32e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a332:	81a3      	strheq	r3, [r4, #12]
 800a334:	bf18      	it	ne
 800a336:	81a3      	strhne	r3, [r4, #12]
 800a338:	bd10      	pop	{r4, pc}

0800a33a <__sclose>:
 800a33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33e:	f000 b813 	b.w	800a368 <_close_r>
	...

0800a344 <_write_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4d07      	ldr	r5, [pc, #28]	; (800a364 <_write_r+0x20>)
 800a348:	4604      	mov	r4, r0
 800a34a:	4608      	mov	r0, r1
 800a34c:	4611      	mov	r1, r2
 800a34e:	2200      	movs	r2, #0
 800a350:	602a      	str	r2, [r5, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	f7f8 f8c9 	bl	80024ea <_write>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_write_r+0x1e>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_write_r+0x1e>
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	20002be8 	.word	0x20002be8

0800a368 <_close_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d06      	ldr	r5, [pc, #24]	; (800a384 <_close_r+0x1c>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	f7f8 f8d5 	bl	8002522 <_close>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_close_r+0x1a>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_close_r+0x1a>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	20002be8 	.word	0x20002be8

0800a388 <_fstat_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d07      	ldr	r5, [pc, #28]	; (800a3a8 <_fstat_r+0x20>)
 800a38c:	2300      	movs	r3, #0
 800a38e:	4604      	mov	r4, r0
 800a390:	4608      	mov	r0, r1
 800a392:	4611      	mov	r1, r2
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	f7f8 f8d0 	bl	800253a <_fstat>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	d102      	bne.n	800a3a4 <_fstat_r+0x1c>
 800a39e:	682b      	ldr	r3, [r5, #0]
 800a3a0:	b103      	cbz	r3, 800a3a4 <_fstat_r+0x1c>
 800a3a2:	6023      	str	r3, [r4, #0]
 800a3a4:	bd38      	pop	{r3, r4, r5, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20002be8 	.word	0x20002be8

0800a3ac <_isatty_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d06      	ldr	r5, [pc, #24]	; (800a3c8 <_isatty_r+0x1c>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	602b      	str	r3, [r5, #0]
 800a3b8:	f7f8 f8cf 	bl	800255a <_isatty>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_isatty_r+0x1a>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_isatty_r+0x1a>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	20002be8 	.word	0x20002be8

0800a3cc <_lseek_r>:
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	4d07      	ldr	r5, [pc, #28]	; (800a3ec <_lseek_r+0x20>)
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	602a      	str	r2, [r5, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f7f8 f8c8 	bl	8002570 <_lseek>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_lseek_r+0x1e>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_lseek_r+0x1e>
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	20002be8 	.word	0x20002be8

0800a3f0 <memcpy>:
 800a3f0:	440a      	add	r2, r1
 800a3f2:	4291      	cmp	r1, r2
 800a3f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3f8:	d100      	bne.n	800a3fc <memcpy+0xc>
 800a3fa:	4770      	bx	lr
 800a3fc:	b510      	push	{r4, lr}
 800a3fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a402:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a406:	4291      	cmp	r1, r2
 800a408:	d1f9      	bne.n	800a3fe <memcpy+0xe>
 800a40a:	bd10      	pop	{r4, pc}

0800a40c <memmove>:
 800a40c:	4288      	cmp	r0, r1
 800a40e:	b510      	push	{r4, lr}
 800a410:	eb01 0402 	add.w	r4, r1, r2
 800a414:	d902      	bls.n	800a41c <memmove+0x10>
 800a416:	4284      	cmp	r4, r0
 800a418:	4623      	mov	r3, r4
 800a41a:	d807      	bhi.n	800a42c <memmove+0x20>
 800a41c:	1e43      	subs	r3, r0, #1
 800a41e:	42a1      	cmp	r1, r4
 800a420:	d008      	beq.n	800a434 <memmove+0x28>
 800a422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a42a:	e7f8      	b.n	800a41e <memmove+0x12>
 800a42c:	4402      	add	r2, r0
 800a42e:	4601      	mov	r1, r0
 800a430:	428a      	cmp	r2, r1
 800a432:	d100      	bne.n	800a436 <memmove+0x2a>
 800a434:	bd10      	pop	{r4, pc}
 800a436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a43e:	e7f7      	b.n	800a430 <memmove+0x24>

0800a440 <_realloc_r>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	4607      	mov	r7, r0
 800a444:	4614      	mov	r4, r2
 800a446:	460e      	mov	r6, r1
 800a448:	b921      	cbnz	r1, 800a454 <_realloc_r+0x14>
 800a44a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a44e:	4611      	mov	r1, r2
 800a450:	f7ff b832 	b.w	80094b8 <_malloc_r>
 800a454:	b922      	cbnz	r2, 800a460 <_realloc_r+0x20>
 800a456:	f7fe ffdf 	bl	8009418 <_free_r>
 800a45a:	4625      	mov	r5, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a460:	f000 f826 	bl	800a4b0 <_malloc_usable_size_r>
 800a464:	42a0      	cmp	r0, r4
 800a466:	d20f      	bcs.n	800a488 <_realloc_r+0x48>
 800a468:	4621      	mov	r1, r4
 800a46a:	4638      	mov	r0, r7
 800a46c:	f7ff f824 	bl	80094b8 <_malloc_r>
 800a470:	4605      	mov	r5, r0
 800a472:	2800      	cmp	r0, #0
 800a474:	d0f2      	beq.n	800a45c <_realloc_r+0x1c>
 800a476:	4631      	mov	r1, r6
 800a478:	4622      	mov	r2, r4
 800a47a:	f7ff ffb9 	bl	800a3f0 <memcpy>
 800a47e:	4631      	mov	r1, r6
 800a480:	4638      	mov	r0, r7
 800a482:	f7fe ffc9 	bl	8009418 <_free_r>
 800a486:	e7e9      	b.n	800a45c <_realloc_r+0x1c>
 800a488:	4635      	mov	r5, r6
 800a48a:	e7e7      	b.n	800a45c <_realloc_r+0x1c>

0800a48c <_read_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d07      	ldr	r5, [pc, #28]	; (800a4ac <_read_r+0x20>)
 800a490:	4604      	mov	r4, r0
 800a492:	4608      	mov	r0, r1
 800a494:	4611      	mov	r1, r2
 800a496:	2200      	movs	r2, #0
 800a498:	602a      	str	r2, [r5, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	f7f8 f808 	bl	80024b0 <_read>
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	d102      	bne.n	800a4aa <_read_r+0x1e>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	b103      	cbz	r3, 800a4aa <_read_r+0x1e>
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	bd38      	pop	{r3, r4, r5, pc}
 800a4ac:	20002be8 	.word	0x20002be8

0800a4b0 <_malloc_usable_size_r>:
 800a4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b4:	1f18      	subs	r0, r3, #4
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfbc      	itt	lt
 800a4ba:	580b      	ldrlt	r3, [r1, r0]
 800a4bc:	18c0      	addlt	r0, r0, r3
 800a4be:	4770      	bx	lr

0800a4c0 <_init>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr

0800a4cc <_fini>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr
