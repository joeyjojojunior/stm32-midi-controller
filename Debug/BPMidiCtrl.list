
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013834  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002574  080139d8  080139d8  000239d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f4c  08015f4c  0003033c  2**0
                  CONTENTS
  4 .ARM          00000008  08015f4c  08015f4c  00025f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f54  08015f54  0003033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f54  08015f54  00025f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f58  08015f58  00025f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08015f5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a4  2000033c  08016298  0003033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034e0  08016298  000334e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e973  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006330  00000000  00000000  0005ecdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  00065010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021123  00000000  00000000  00066d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000289f5  00000000  00000000  00087e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6da7  00000000  00000000  000b0828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001575cf  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001b08  00000000  00000000  00157628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c2c  00000000  00000000  00159130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000033c 	.word	0x2000033c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080139bc 	.word	0x080139bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000340 	.word	0x20000340
 80001dc:	080139bc 	.word	0x080139bc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a4 	b.w	8000fec <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <Knob_Map>:
void Knob_Free(Knob *k) {
    free(k->sub_labels);
}

// Maps values from (0, max_values-1) to (0, m)
uint8_t Knob_Map(Knob *k, uint8_t value, uint8_t m) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	78ba      	ldrb	r2, [r7, #2]
 8001004:	fb02 f203 	mul.w	r2, r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	3b01      	subs	r3, #1
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ffc2 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80010be:	f001 ffdf 	bl	8003080 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80010c2:	f000 f8bb 	bl	800123c <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80010c6:	f000 fa03 	bl	80014d0 <MX_GPIO_Init>
    MX_ADC1_Init();
 80010ca:	f000 f939 	bl	8001340 <MX_ADC1_Init>
    MX_I2C1_Init();
 80010ce:	f000 f98b 	bl	80013e8 <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 80010d2:	f00d fca5 	bl	800ea20 <MX_USB_DEVICE_Init>
    MX_SDIO_SD_Init();
 80010d6:	f000 f9db 	bl	8001490 <MX_SDIO_SD_Init>
    MX_RTC_Init();
 80010da:	f000 f9b3 	bl	8001444 <MX_RTC_Init>
    MX_FATFS_Init();
 80010de:	f008 fec3 	bl	8009e68 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80010e2:	f001 ff23 	bl	8002f2c <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80010e6:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <main+0x16c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <main+0x170>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffbe 	bl	8001074 <SysTick_Config>

    SD_LoadPreset(knobs, "knobs1.json");
 80010f8:	494c      	ldr	r1, [pc, #304]	; (800122c <main+0x174>)
 80010fa:	484d      	ldr	r0, [pc, #308]	; (8001230 <main+0x178>)
 80010fc:	f000 fe74 	bl	8001de8 <SD_LoadPreset>

    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	e010      	b.n	8001128 <main+0x70>
        ssd1306_Init(&knobs[i]);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	015b      	lsls	r3, r3, #5
 800110a:	4a49      	ldr	r2, [pc, #292]	; (8001230 <main+0x178>)
 800110c:	4413      	add	r3, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fefe 	bl	8001f10 <ssd1306_Init>
        ssd1306_WriteKnob(&knobs[i]);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	015b      	lsls	r3, r3, #5
 8001118:	4a45      	ldr	r2, [pc, #276]	; (8001230 <main+0x178>)
 800111a:	4413      	add	r3, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f001 f855 	bl	80021cc <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3301      	adds	r3, #1
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d9eb      	bls.n	8001106 <main+0x4e>
    }

    while (1) {
        ADC_Read_Knobs();
 800112e:	f000 fa91 	bl	8001654 <ADC_Read_Knobs>

        if (isMenuActive) {
 8001132:	4b40      	ldr	r3, [pc, #256]	; (8001234 <main+0x17c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d019      	beq.n	800116e <main+0xb6>
            SD_FetchPresets();
 800113a:	f000 fd11 	bl	8001b60 <SD_FetchPresets>

            ssd1306_WritePresets(knobs);
 800113e:	483c      	ldr	r0, [pc, #240]	; (8001230 <main+0x178>)
 8001140:	f001 f998 	bl	8002474 <ssd1306_WritePresets>

            while (isMenuActive) {
 8001144:	bf00      	nop
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <main+0x17c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1fb      	bne.n	8001146 <main+0x8e>
            }

            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 800114e:	2300      	movs	r3, #0
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	e009      	b.n	8001168 <main+0xb0>
                ssd1306_WriteKnob(&knobs[i]);
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	015b      	lsls	r3, r3, #5
 8001158:	4a35      	ldr	r2, [pc, #212]	; (8001230 <main+0x178>)
 800115a:	4413      	add	r3, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f001 f835 	bl	80021cc <ssd1306_WriteKnob>
            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	3301      	adds	r3, #1
 8001166:	71bb      	strb	r3, [r7, #6]
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d9f2      	bls.n	8001154 <main+0x9c>
            }
        }

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 800116e:	2300      	movs	r3, #0
 8001170:	717b      	strb	r3, [r7, #5]
 8001172:	e053      	b.n	800121c <main+0x164>
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	015b      	lsls	r3, r3, #5
 8001178:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <main+0x178>)
 800117a:	441a      	add	r2, r3
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	492e      	ldr	r1, [pc, #184]	; (8001238 <main+0x180>)
 8001180:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f000 fb0b 	bl	80017a4 <MIDI_Scale_And_Filter>
 800118e:	4603      	mov	r3, r0
 8001190:	713b      	strb	r3, [r7, #4]

            if (curr_MIDI_val != knobs[i].value) {
 8001192:	797b      	ldrb	r3, [r7, #5]
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <main+0x178>)
 8001196:	015b      	lsls	r3, r3, #5
 8001198:	4413      	add	r3, r2
 800119a:	331b      	adds	r3, #27
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	793a      	ldrb	r2, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d038      	beq.n	8001216 <main+0x15e>
                knobs[i].value = curr_MIDI_val;
 80011a4:	797b      	ldrb	r3, [r7, #5]
 80011a6:	4a22      	ldr	r2, [pc, #136]	; (8001230 <main+0x178>)
 80011a8:	015b      	lsls	r3, r3, #5
 80011aa:	4413      	add	r3, r2
 80011ac:	331b      	adds	r3, #27
 80011ae:	793a      	ldrb	r2, [r7, #4]
 80011b0:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&knobs[i]);
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <main+0x178>)
 80011b8:	4413      	add	r3, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 f806 	bl	80021cc <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <main+0x178>)
 80011c4:	015b      	lsls	r3, r3, #5
 80011c6:	4413      	add	r3, r2
 80011c8:	331b      	adds	r3, #27
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	797b      	ldrb	r3, [r7, #5]
 80011ce:	4918      	ldr	r1, [pc, #96]	; (8001230 <main+0x178>)
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	440b      	add	r3, r1
 80011d4:	331a      	adds	r3, #26
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d106      	bne.n	80011ea <main+0x132>
 80011dc:	797b      	ldrb	r3, [r7, #5]
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <main+0x178>)
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	4413      	add	r3, r2
 80011e4:	331e      	adds	r3, #30
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	4a10      	ldr	r2, [pc, #64]	; (8001230 <main+0x178>)
 80011ee:	015b      	lsls	r3, r3, #5
 80011f0:	4413      	add	r3, r2
 80011f2:	331e      	adds	r3, #30
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <main+0x15e>
 80011fa:	797b      	ldrb	r3, [r7, #5]
 80011fc:	015b      	lsls	r3, r3, #5
 80011fe:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <main+0x178>)
 8001200:	441a      	add	r2, r3
 8001202:	797b      	ldrb	r3, [r7, #5]
 8001204:	490a      	ldr	r1, [pc, #40]	; (8001230 <main+0x178>)
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	440b      	add	r3, r1
 800120a:	331b      	adds	r3, #27
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4610      	mov	r0, r2
 8001212:	f000 faac 	bl	800176e <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001216:	797b      	ldrb	r3, [r7, #5]
 8001218:	3301      	adds	r3, #1
 800121a:	717b      	strb	r3, [r7, #5]
 800121c:	797b      	ldrb	r3, [r7, #5]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d9a8      	bls.n	8001174 <main+0xbc>
        ADC_Read_Knobs();
 8001222:	e784      	b.n	800112e <main+0x76>
 8001224:	20000050 	.word	0x20000050
 8001228:	cccccccd 	.word	0xcccccccd
 800122c:	080139d8 	.word	0x080139d8
 8001230:	20002628 	.word	0x20002628
 8001234:	20002624 	.word	0x20002624
 8001238:	20000358 	.word	0x20000358

0800123c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09a      	sub	sp, #104	; 0x68
 8001240:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001242:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001246:	2230      	movs	r2, #48	; 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f00f f954 	bl	80104f8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <SystemClock_Config+0xfc>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <SystemClock_Config+0xfc>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <SystemClock_Config+0xfc>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <SystemClock_Config+0x100>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a29      	ldr	r2, [pc, #164]	; (800133c <SystemClock_Config+0x100>)
 8001298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <SystemClock_Config+0x100>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80012aa:	2309      	movs	r3, #9
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c0:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 80012c2:	2319      	movs	r3, #25
 80012c4:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 80012c6:	23c0      	movs	r3, #192	; 0xc0
 80012c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ce:	2304      	movs	r3, #4
 80012d0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d6:	4618      	mov	r0, r3
 80012d8:	f004 fd9a 	bl	8005e10 <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xaa>
            {
        Error_Handler();
 80012e2:	f000 fa3f 	bl	8001764 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012e6:	230f      	movs	r3, #15
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2103      	movs	r1, #3
 8001302:	4618      	mov	r0, r3
 8001304:	f004 fffc 	bl	8006300 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xd6>
            {
        Error_Handler();
 800130e:	f000 fa29 	bl	8001764 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001312:	2302      	movs	r3, #2
 8001314:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4618      	mov	r0, r3
 8001322:	f005 f9a9 	bl	8006678 <HAL_RCCEx_PeriphCLKConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0xf4>
            {
        Error_Handler();
 800132c:	f000 fa1a 	bl	8001764 <Error_Handler>
    }
}
 8001330:	bf00      	nop
 8001332:	3768      	adds	r7, #104	; 0x68
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000

08001340 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8001352:	4b22      	ldr	r3, [pc, #136]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <MX_ADC1_Init+0xa0>)
 8001356:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <MX_ADC1_Init+0x9c>)
 800135a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800135e:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001366:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_ADC1_Init+0x9c>)
 800136a:	2201      	movs	r2, #1
 800136c:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001370:	2201      	movs	r2, #1
 8001372:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_ADC1_Init+0x9c>)
 800137e:	2200      	movs	r2, #0
 8001380:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001384:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <MX_ADC1_Init+0xa4>)
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_ADC1_Init+0x9c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001390:	2201      	movs	r2, #1
 8001392:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_ADC1_Init+0x9c>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_ADC1_Init+0x9c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a2:	480e      	ldr	r0, [pc, #56]	; (80013dc <MX_ADC1_Init+0x9c>)
 80013a4:	f001 ff02 	bl	80031ac <HAL_ADC_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0x72>
            {
        Error_Handler();
 80013ae:	f000 f9d9 	bl	8001764 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_ADC1_Init+0x9c>)
 80013c4:	f002 f8b6 	bl	8003534 <HAL_ADC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_ADC1_Init+0x92>
            {
        Error_Handler();
 80013ce:	f000 f9c9 	bl	8001764 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200025dc 	.word	0x200025dc
 80013e0:	40012000 	.word	0x40012000
 80013e4:	0f000001 	.word	0x0f000001

080013e8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_I2C1_Init+0x50>)
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <MX_I2C1_Init+0x54>)
 80013f0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_I2C1_Init+0x50>)
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_I2C1_Init+0x58>)
 80013f6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_I2C1_Init+0x50>)
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_I2C1_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_I2C1_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_I2C1_Init+0x50>)
 8001426:	f002 fd95 	bl	8003f54 <HAL_I2C_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 8001430:	f000 f998 	bl	8001764 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20002588 	.word	0x20002588
 800143c:	40005400 	.word	0x40005400
 8001440:	000c3500 	.word	0x000c3500

08001444 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_RTC_Init+0x44>)
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <MX_RTC_Init+0x48>)
 800144c:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_RTC_Init+0x44>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_RTC_Init+0x44>)
 8001456:	227f      	movs	r2, #127	; 0x7f
 8001458:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_RTC_Init+0x44>)
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_RTC_Init+0x44>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_RTC_Init+0x44>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_RTC_Init+0x44>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_RTC_Init+0x44>)
 8001474:	f005 f9f0 	bl	8006858 <HAL_RTC_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_RTC_Init+0x3e>
            {
        Error_Handler();
 800147e:	f000 f971 	bl	8001764 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200026a8 	.word	0x200026a8
 800148c:	40002800 	.word	0x40002800

08001490 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <MX_SDIO_SD_Init+0x3c>)
 8001498:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 12;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <MX_SDIO_SD_Init+0x38>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20002704 	.word	0x20002704
 80014cc:	40012c00 	.word	0x40012c00

080014d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <MX_GPIO_Init+0x108>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a3a      	ldr	r2, [pc, #232]	; (80015d8 <MX_GPIO_Init+0x108>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <MX_GPIO_Init+0x108>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a33      	ldr	r2, [pc, #204]	; (80015d8 <MX_GPIO_Init+0x108>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a2c      	ldr	r2, [pc, #176]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <MX_GPIO_Init+0x108>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <MX_GPIO_Init+0x108>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001556:	2200      	movs	r2, #0
 8001558:	f247 710f 	movw	r1, #30479	; 0x770f
 800155c:	481f      	ldr	r0, [pc, #124]	; (80015dc <MX_GPIO_Init+0x10c>)
 800155e:	f002 fcc5 	bl	8003eec <HAL_GPIO_WritePin>
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : Detect_SDIO_Pin */
    GPIO_InitStruct.Pin = Detect_SDIO_Pin;
 8001562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Detect_SDIO_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	481a      	ldr	r0, [pc, #104]	; (80015e0 <MX_GPIO_Init+0x110>)
 8001578:	f002 fb1c 	bl	8003bb4 <HAL_GPIO_Init>

    /*Configure GPIO pin : Button_6_Pin */
    GPIO_InitStruct.Pin = Button_6_Pin;
 800157c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001586:	2301      	movs	r3, #1
 8001588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <MX_GPIO_Init+0x110>)
 8001592:	f002 fb0f 	bl	8003bb4 <HAL_GPIO_Init>

    /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
     Button_5_Pin */
    GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin | Button_4_Pin
 8001596:	f248 43b0 	movw	r3, #33968	; 0x84b0
 800159a:	617b      	str	r3, [r7, #20]
            | Button_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480e      	ldr	r0, [pc, #56]	; (80015e4 <MX_GPIO_Init+0x114>)
 80015ac:	f002 fb02 	bl	8003bb4 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
     LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
     AMUX_S2_Pin AMUX_S3_Pin */
    GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 80015b0:	f247 730f 	movw	r3, #30479	; 0x770f
 80015b4:	617b      	str	r3, [r7, #20]
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_GPIO_Init+0x10c>)
 80015ca:	f002 faf3 	bl	8003bb4 <HAL_GPIO_Init>

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020000 	.word	0x40020000

080015e8 <ADC_Mux_Select>:

/* USER CODE BEGIN 4 */
void ADC_Mux_Select(uint8_t c) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d824      	bhi.n	8001642 <ADC_Mux_Select+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e01d      	b.n	800163a <ADC_Mux_Select+0x52>
        if (c & (1 << i)) {
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	fa42 f303 	asr.w	r3, r2, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <ADC_Mux_Select+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <ADC_Mux_Select+0x64>)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <ADC_Mux_Select+0x68>)
 800161c:	f002 fc66 	bl	8003eec <HAL_GPIO_WritePin>
 8001620:	e008      	b.n	8001634 <ADC_Mux_Select+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <ADC_Mux_Select+0x64>)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <ADC_Mux_Select+0x68>)
 8001630:	f002 fc5c 	bl	8003eec <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b03      	cmp	r3, #3
 800163e:	ddde      	ble.n	80015fe <ADC_Mux_Select+0x16>
 8001640:	e000      	b.n	8001644 <ADC_Mux_Select+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 8001642:	bf00      	nop
        }
    }
}
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	0801569c 	.word	0x0801569c
 8001650:	40020400 	.word	0x40020400

08001654 <ADC_Read_Knobs>:

void ADC_Read_Knobs() {
 8001654:	b580      	push	{r7, lr}
 8001656:	b096      	sub	sp, #88	; 0x58
 8001658:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001660:	e070      	b.n	8001744 <ADC_Read_Knobs+0xf0>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_Mux_Select(channel);
 8001662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ffbe 	bl	80015e8 <ADC_Mux_Select>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 800166c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 800167a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800167e:	4a36      	ldr	r2, [pc, #216]	; (8001758 <ADC_Read_Knobs+0x104>)
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	643b      	str	r3, [r7, #64]	; 0x40
        sConfig.Rank = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	647b      	str	r3, [r7, #68]	; 0x44
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800168a:	2300      	movs	r3, #0
 800168c:	64bb      	str	r3, [r7, #72]	; 0x48
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800168e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001692:	4619      	mov	r1, r3
 8001694:	4831      	ldr	r0, [pc, #196]	; (800175c <ADC_Read_Knobs+0x108>)
 8001696:	f001 ff4d 	bl	8003534 <HAL_ADC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <ADC_Read_Knobs+0x50>
            Error_Handler();
 80016a0:	f000 f860 	bl	8001764 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 80016a4:	482d      	ldr	r0, [pc, #180]	; (800175c <ADC_Read_Knobs+0x108>)
 80016a6:	f001 fdc5 	bl	8003234 <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80016b0:	e016      	b.n	80016e0 <ADC_Read_Knobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 80016b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b6:	4829      	ldr	r0, [pc, #164]	; (800175c <ADC_Read_Knobs+0x108>)
 80016b8:	f001 fea3 	bl	8003402 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 80016bc:	4827      	ldr	r0, [pc, #156]	; (800175c <ADC_Read_Knobs+0x108>)
 80016be:	f001 ff2b 	bl	8003518 <HAL_ADC_GetValue>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016c8:	b292      	uxth	r2, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80016d0:	440b      	add	r3, r1
 80016d2:	f823 2c58 	strh.w	r2, [r3, #-88]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80016d6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016da:	3301      	adds	r3, #1
 80016dc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80016e0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	d9e4      	bls.n	80016b2 <ADC_Read_Knobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 80016e8:	481c      	ldr	r0, [pc, #112]	; (800175c <ADC_Read_Knobs+0x108>)
 80016ea:	f001 fe57 	bl	800339c <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80016fa:	e011      	b.n	8001720 <ADC_Read_Knobs+0xcc>
            adc_sum += adcBuf[i];
 80016fc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001706:	4413      	add	r3, r2
 8001708:	f833 2c58 	ldrh.w	r2, [r3, #-88]
 800170c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001710:	4413      	add	r3, r2
 8001712:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001716:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800171a:	3301      	adds	r3, #1
 800171c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8001720:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001724:	2b1f      	cmp	r3, #31
 8001726:	d9e9      	bls.n	80016fc <ADC_Read_Knobs+0xa8>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 8001728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800172c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001730:	0952      	lsrs	r2, r2, #5
 8001732:	b291      	uxth	r1, r2
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <ADC_Read_Knobs+0x10c>)
 8001736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 800173a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800173e:	3301      	adds	r3, #1
 8001740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001748:	2b03      	cmp	r3, #3
 800174a:	d98a      	bls.n	8001662 <ADC_Read_Knobs+0xe>
    }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3758      	adds	r7, #88	; 0x58
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000018 	.word	0x20000018
 800175c:	200025dc 	.word	0x200025dc
 8001760:	20000358 	.word	0x20000358

08001764 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    __disable_irq();
    while (1) {
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>

0800176e <MIDI_Send>:

#include "midi.h"
#include "usb_device.h"

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 800176e:	b5b0      	push	{r4, r5, r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, Knob_Map(k, value, k->max_range));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e1c      	ldrb	r4, [r3, #24]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7e5d      	ldrb	r5, [r3, #25]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7f5a      	ldrb	r2, [r3, #29]
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fc30 	bl	8000ff0 <Knob_Map>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	4629      	mov	r1, r5
 8001796:	4620      	mov	r0, r4
 8001798:	f00d f972 	bl	800ea80 <MX_USB_Send_Midi>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}

080017a4 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7f1b      	ldrb	r3, [r3, #28]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fecd 	bl	8000554 <__aeabi_i2d>
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <MIDI_Scale_And_Filter+0x130>)
 80017c0:	f7ff f85c 	bl	800087c <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff fa0e 	bl	8000bec <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7fe fecf 	bl	8000578 <__aeabi_f2d>
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b3e      	ldr	r3, [pc, #248]	; (80018d8 <MIDI_Scale_And_Filter+0x134>)
 80017e0:	f7fe ff22 	bl	8000628 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	461d      	mov	r5, r3
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe feb0 	bl	8000554 <__aeabi_i2d>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4620      	mov	r0, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	f7fe ff14 	bl	8000628 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4614      	mov	r4, r2
 8001806:	461d      	mov	r5, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7edb      	ldrb	r3, [r3, #27]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fea1 	bl	8000554 <__aeabi_i2d>
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <MIDI_Scale_And_Filter+0x134>)
 8001818:	f7fe ff06 	bl	8000628 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4620      	mov	r0, r4
 8001822:	4629      	mov	r1, r5
 8001824:	f7fe fd4a 	bl	80002bc <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4614      	mov	r4, r2
 800182e:	461d      	mov	r5, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7f5b      	ldrb	r3, [r3, #29]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe8d 	bl	8000554 <__aeabi_i2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7ff f963 	bl	8000b0c <__aeabi_dcmplt>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d032      	beq.n	80018b2 <MIDI_Scale_And_Filter+0x10e>
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7fe fe93 	bl	8000578 <__aeabi_f2d>
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <MIDI_Scale_And_Filter+0x134>)
 8001858:	f7fe fee6 	bl	8000628 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4614      	mov	r4, r2
 8001862:	461d      	mov	r5, r3
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe74 	bl	8000554 <__aeabi_i2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fed8 	bl	8000628 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7edb      	ldrb	r3, [r3, #27]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe65 	bl	8000554 <__aeabi_i2d>
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MIDI_Scale_And_Filter+0x134>)
 8001890:	f7fe feca 	bl	8000628 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fd0e 	bl	80002bc <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f980 	bl	8000bac <__aeabi_d2uiz>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	e00c      	b.n	80018cc <MIDI_Scale_And_Filter+0x128>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7f5b      	ldrb	r3, [r3, #29]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe4c 	bl	8000554 <__aeabi_i2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f972 	bl	8000bac <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b2db      	uxtb	r3, r3
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bdb0      	pop	{r4, r5, r7, pc}
 80018d4:	406f4000 	.word	0x406f4000
 80018d8:	3fe00000 	.word	0x3fe00000

080018dc <Preset_GetName>:
#include "preset.h"

void Preset_GetName(char *file_buffer, char *name_buffer) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    cJSON *preset_json = cJSON_Parse(file_buffer);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f00e faaa 	bl	800fe40 <cJSON_Parse>
 80018ec:	60f8      	str	r0, [r7, #12]
    if (preset_json == NULL) return;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d012      	beq.n	800191a <Preset_GetName+0x3e>
    printf("test");
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <Preset_GetName+0x48>)
 80018f6:	f00e feb1 	bl	801065c <iprintf>
    const cJSON *name = cJSON_GetObjectItemCaseSensitive(preset_json, "name");
 80018fa:	490b      	ldr	r1, [pc, #44]	; (8001928 <Preset_GetName+0x4c>)
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f00e fda4 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 8001902:	60b8      	str	r0, [r7, #8]
    snprintf(name_buffer, MAX_LABEL_CHARS+1, "%s", name->valuestring);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4a08      	ldr	r2, [pc, #32]	; (800192c <Preset_GetName+0x50>)
 800190a:	210f      	movs	r1, #15
 800190c:	6838      	ldr	r0, [r7, #0]
 800190e:	f00f f8d5 	bl	8010abc <sniprintf>

    cJSON_Delete(preset_json);
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f00d fd98 	bl	800f448 <cJSON_Delete>
 8001918:	e000      	b.n	800191c <Preset_GetName+0x40>
    if (preset_json == NULL) return;
 800191a:	bf00      	nop
}
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	080139e4 	.word	0x080139e4
 8001928:	080139ec 	.word	0x080139ec
 800192c:	080139f4 	.word	0x080139f4

08001930 <Preset_Load>:

void Preset_Load(Knob *knobs, char *buffer) {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b093      	sub	sp, #76	; 0x4c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
    cJSON *preset_json = cJSON_Parse(buffer);
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	f00e fa80 	bl	800fe40 <cJSON_Parse>
 8001940:	6378      	str	r0, [r7, #52]	; 0x34
    if (preset_json == NULL) return;
 8001942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80ed 	beq.w	8001b24 <Preset_Load+0x1f4>

    const cJSON *knobs_json = cJSON_GetObjectItemCaseSensitive(preset_json, "knobs");
 800194a:	4979      	ldr	r1, [pc, #484]	; (8001b30 <Preset_Load+0x200>)
 800194c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800194e:	f00e fd7c 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 8001952:	6338      	str	r0, [r7, #48]	; 0x30
    const cJSON *knob_json = NULL;
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	; 0x44

    uint8_t i = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <Preset_Load+0x3a>
 8001964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	e000      	b.n	800196c <Preset_Load+0x3c>
 800196a:	2300      	movs	r3, #0
 800196c:	647b      	str	r3, [r7, #68]	; 0x44
 800196e:	e0d1      	b.n	8001b14 <Preset_Load+0x1e4>
    {
        if (i >= NUM_KNOBS) return;
 8001970:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001974:	2b03      	cmp	r3, #3
 8001976:	f200 80d7 	bhi.w	8001b28 <Preset_Load+0x1f8>

        const cJSON *row = cJSON_GetObjectItemCaseSensitive(knob_json, "row");
 800197a:	496e      	ldr	r1, [pc, #440]	; (8001b34 <Preset_Load+0x204>)
 800197c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800197e:	f00e fd64 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 8001982:	62f8      	str	r0, [r7, #44]	; 0x2c
        const cJSON *col = cJSON_GetObjectItemCaseSensitive(knob_json, "col");
 8001984:	496c      	ldr	r1, [pc, #432]	; (8001b38 <Preset_Load+0x208>)
 8001986:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001988:	f00e fd5f 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 800198c:	62b8      	str	r0, [r7, #40]	; 0x28
        const cJSON *label = cJSON_GetObjectItemCaseSensitive(knob_json, "label");
 800198e:	496b      	ldr	r1, [pc, #428]	; (8001b3c <Preset_Load+0x20c>)
 8001990:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001992:	f00e fd5a 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 8001996:	6278      	str	r0, [r7, #36]	; 0x24
        const cJSON *channel = cJSON_GetObjectItemCaseSensitive(knob_json, "channel");
 8001998:	4969      	ldr	r1, [pc, #420]	; (8001b40 <Preset_Load+0x210>)
 800199a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800199c:	f00e fd55 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 80019a0:	6238      	str	r0, [r7, #32]
        const cJSON *cc = cJSON_GetObjectItemCaseSensitive(knob_json, "cc");
 80019a2:	4968      	ldr	r1, [pc, #416]	; (8001b44 <Preset_Load+0x214>)
 80019a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019a6:	f00e fd50 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 80019aa:	61f8      	str	r0, [r7, #28]
        const cJSON *init_value = cJSON_GetObjectItemCaseSensitive(knob_json, "init_value");
 80019ac:	4966      	ldr	r1, [pc, #408]	; (8001b48 <Preset_Load+0x218>)
 80019ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019b0:	f00e fd4b 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 80019b4:	61b8      	str	r0, [r7, #24]
        const cJSON *max_values = cJSON_GetObjectItemCaseSensitive(knob_json, "max_values");
 80019b6:	4965      	ldr	r1, [pc, #404]	; (8001b4c <Preset_Load+0x21c>)
 80019b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019ba:	f00e fd46 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 80019be:	6178      	str	r0, [r7, #20]
        const cJSON *max_range = cJSON_GetObjectItemCaseSensitive(knob_json, "max_range");
 80019c0:	4963      	ldr	r1, [pc, #396]	; (8001b50 <Preset_Load+0x220>)
 80019c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019c4:	f00e fd41 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 80019c8:	6138      	str	r0, [r7, #16]
        const cJSON *isLocked = cJSON_GetObjectItemCaseSensitive(knob_json, "isLocked");
 80019ca:	4962      	ldr	r1, [pc, #392]	; (8001b54 <Preset_Load+0x224>)
 80019cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019ce:	f00e fd3c 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 80019d2:	60f8      	str	r0, [r7, #12]

        knobs[i].row = row->valueint;
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	6959      	ldr	r1, [r3, #20]
 80019d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019dc:	015b      	lsls	r3, r3, #5
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
        knobs[i].col = col->valueint;
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	6959      	ldr	r1, [r3, #20]
 80019ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019ee:	015b      	lsls	r3, r3, #5
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	b2ca      	uxtb	r2, r1
 80019f6:	705a      	strb	r2, [r3, #1]
        snprintf(knobs[i].label, sizeof(knobs[i].label) / sizeof(knobs[i].label[0]), "%s", label->valuestring);
 80019f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80019fc:	015b      	lsls	r3, r3, #5
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	1c98      	adds	r0, r3, #2
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4a53      	ldr	r2, [pc, #332]	; (8001b58 <Preset_Load+0x228>)
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f00f f856 	bl	8010abc <sniprintf>
        knobs[i].channel = channel->valueint;
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	6959      	ldr	r1, [r3, #20]
 8001a14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a18:	015b      	lsls	r3, r3, #5
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b2ca      	uxtb	r2, r1
 8001a20:	761a      	strb	r2, [r3, #24]
        knobs[i].cc = cc->valueint;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	6959      	ldr	r1, [r3, #20]
 8001a26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a2a:	015b      	lsls	r3, r3, #5
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b2ca      	uxtb	r2, r1
 8001a32:	765a      	strb	r2, [r3, #25]
        knobs[i].init_value = init_value->valueint;
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6959      	ldr	r1, [r3, #20]
 8001a38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a3c:	015b      	lsls	r3, r3, #5
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	b2ca      	uxtb	r2, r1
 8001a44:	769a      	strb	r2, [r3, #26]
        knobs[i].max_values = max_values->valueint;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	6959      	ldr	r1, [r3, #20]
 8001a4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a4e:	015b      	lsls	r3, r3, #5
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	b2ca      	uxtb	r2, r1
 8001a56:	771a      	strb	r2, [r3, #28]
        knobs[i].max_range = max_range->valueint;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6959      	ldr	r1, [r3, #20]
 8001a5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a60:	015b      	lsls	r3, r3, #5
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	775a      	strb	r2, [r3, #29]
        knobs[i].isLocked = isLocked->valueint;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6959      	ldr	r1, [r3, #20]
 8001a6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a72:	015b      	lsls	r3, r3, #5
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	b2ca      	uxtb	r2, r1
 8001a7a:	779a      	strb	r2, [r3, #30]

        const cJSON *sub_labels = cJSON_GetObjectItemCaseSensitive(knob_json, "sub_labels");
 8001a7c:	4937      	ldr	r1, [pc, #220]	; (8001b5c <Preset_Load+0x22c>)
 8001a7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a80:	f00e fce3 	bl	801044a <cJSON_GetObjectItemCaseSensitive>
 8001a84:	60b8      	str	r0, [r7, #8]
        const cJSON *sub_label = NULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a8e:	015b      	lsls	r3, r3, #5
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	7f1b      	ldrb	r3, [r3, #28]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a99      	subs	r1, r3, r2
 8001a9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001aa2:	015b      	lsls	r3, r3, #5
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	18d4      	adds	r4, r2, r3
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	f00e fd07 	bl	80104bc <malloc>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6163      	str	r3, [r4, #20]

        uint8_t label_index = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <Preset_Load+0x194>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	e000      	b.n	8001ac6 <Preset_Load+0x196>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ac8:	e019      	b.n	8001afe <Preset_Load+0x1ce>
        {
            snprintf(knobs[i].sub_labels[label_index], sizeof(knobs[i].sub_labels[0]) / sizeof(knobs[i].sub_labels[0][0]), "%s", sub_label->valuestring);
 8001aca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ace:	015b      	lsls	r3, r3, #5
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	6959      	ldr	r1, [r3, #20]
 8001ad6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001ada:	4613      	mov	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	18c8      	adds	r0, r1, r3
 8001ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <Preset_Load+0x228>)
 8001ae8:	210f      	movs	r1, #15
 8001aea:	f00e ffe7 	bl	8010abc <sniprintf>
            label_index++;
 8001aee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001af2:	3301      	adds	r3, #1
 8001af4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e2      	bne.n	8001aca <Preset_Load+0x19a>
        }
        i++;
 8001b04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 8001b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
 8001b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f47f af2a 	bne.w	8001970 <Preset_Load+0x40>
    }

    cJSON_Delete(preset_json);
 8001b1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b1e:	f00d fc93 	bl	800f448 <cJSON_Delete>
 8001b22:	e002      	b.n	8001b2a <Preset_Load+0x1fa>
    if (preset_json == NULL) return;
 8001b24:	bf00      	nop
 8001b26:	e000      	b.n	8001b2a <Preset_Load+0x1fa>
        if (i >= NUM_KNOBS) return;
 8001b28:	bf00      	nop
}
 8001b2a:	374c      	adds	r7, #76	; 0x4c
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}
 8001b30:	080139f8 	.word	0x080139f8
 8001b34:	08013a00 	.word	0x08013a00
 8001b38:	08013a04 	.word	0x08013a04
 8001b3c:	08013a08 	.word	0x08013a08
 8001b40:	08013a10 	.word	0x08013a10
 8001b44:	08013a18 	.word	0x08013a18
 8001b48:	08013a1c 	.word	0x08013a1c
 8001b4c:	08013a28 	.word	0x08013a28
 8001b50:	08013a34 	.word	0x08013a34
 8001b54:	08013a40 	.word	0x08013a40
 8001b58:	080139f4 	.word	0x080139f4
 8001b5c:	08013a4c 	.word	0x08013a4c

08001b60 <SD_FetchPresets>:
 * sd.c
 */
#include "stm32f4xx_hal.h"
#include "sd.h"

void SD_FetchPresets() {
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	b0df      	sub	sp, #380	; 0x17c
 8001b64:	af00      	add	r7, sp, #0
     ssd1306_UpdateScreen();
     */

    DIR root;
    FILINFO root_info;
    retSD = f_mount(&SDFatFS, "", 1);
 8001b66:	2201      	movs	r2, #1
 8001b68:	4996      	ldr	r1, [pc, #600]	; (8001dc4 <SD_FetchPresets+0x264>)
 8001b6a:	4897      	ldr	r0, [pc, #604]	; (8001dc8 <SD_FetchPresets+0x268>)
 8001b6c:	f00c f92e 	bl	800ddcc <f_mount>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b95      	ldr	r3, [pc, #596]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001b76:	701a      	strb	r2, [r3, #0]

    uint8_t presetCount = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
    retSD = f_findfirst(&root, &root_info, "", "*.json");
 8001b7e:	f107 0114 	add.w	r1, r7, #20
 8001b82:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001b86:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <SD_FetchPresets+0x270>)
 8001b88:	4a8e      	ldr	r2, [pc, #568]	; (8001dc4 <SD_FetchPresets+0x264>)
 8001b8a:	f00c fe08 	bl	800e79e <f_findfirst>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b8e      	ldr	r3, [pc, #568]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001b94:	701a      	strb	r2, [r3, #0]
    if (retSD != FR_OK) ssd1306_WriteErrorCode("findf", 0, retSD);
 8001b96:	4b8d      	ldr	r3, [pc, #564]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d018      	beq.n	8001bd0 <SD_FetchPresets+0x70>
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	488b      	ldr	r0, [pc, #556]	; (8001dd4 <SD_FetchPresets+0x274>)
 8001ba8:	f000 fdb6 	bl	8002718 <ssd1306_WriteErrorCode>

    while (retSD == FR_OK && root_info.fname[0]) {
 8001bac:	e010      	b.n	8001bd0 <SD_FetchPresets+0x70>
        presetCount++;
 8001bae:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
        retSD = f_findnext(&root, &root_info);
 8001bb8:	f107 0214 	add.w	r2, r7, #20
 8001bbc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f00c fdc3 	bl	800e74e <f_findnext>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001bce:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001bd0:	4b7e      	ldr	r3, [pc, #504]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <SD_FetchPresets+0x82>
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	7d9b      	ldrb	r3, [r3, #22]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1e5      	bne.n	8001bae <SD_FetchPresets+0x4e>
    }
    f_closedir(&root);
 8001be2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00c fd4e 	bl	800e688 <f_closedir>

    char filenames[presetCount][_MAX_LFN+1];
 8001bec:	f897 4176 	ldrb.w	r4, [r7, #374]	; 0x176
 8001bf0:	466b      	mov	r3, sp
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001bfc:	b2e0      	uxtb	r0, r4
 8001bfe:	f04f 0100 	mov.w	r1, #0
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	02cb      	lsls	r3, r1, #11
 8001c0c:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001c10:	02c2      	lsls	r2, r0, #11
 8001c12:	b2e0      	uxtb	r0, r4
 8001c14:	f04f 0100 	mov.w	r1, #0
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	02cb      	lsls	r3, r1, #11
 8001c22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001c26:	02c2      	lsls	r2, r0, #11
 8001c28:	4623      	mov	r3, r4
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	3307      	adds	r3, #7
 8001c2e:	08db      	lsrs	r3, r3, #3
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	ebad 0d03 	sub.w	sp, sp, r3
 8001c36:	466b      	mov	r3, sp
 8001c38:	3300      	adds	r3, #0
 8001c3a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    uint8_t i = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    retSD = f_findfirst(&root, &root_info, "", "*.json");
 8001c44:	f107 0114 	add.w	r1, r7, #20
 8001c48:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8001c4c:	4b60      	ldr	r3, [pc, #384]	; (8001dd0 <SD_FetchPresets+0x270>)
 8001c4e:	4a5d      	ldr	r2, [pc, #372]	; (8001dc4 <SD_FetchPresets+0x264>)
 8001c50:	f00c fda5 	bl	800e79e <f_findfirst>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001c5a:	701a      	strb	r2, [r3, #0]
    while (retSD == FR_OK && root_info.fname[0]) {
 8001c5c:	e01e      	b.n	8001c9c <SD_FetchPresets+0x13c>
        snprintf(filenames[i], _MAX_LFN+1, "%s", root_info.fname);
 8001c5e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001c68:	18d0      	adds	r0, r2, r3
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	3316      	adds	r3, #22
 8001c70:	4a59      	ldr	r2, [pc, #356]	; (8001dd8 <SD_FetchPresets+0x278>)
 8001c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c76:	f00e ff21 	bl	8010abc <sniprintf>
        retSD = f_findnext(&root, &root_info);
 8001c7a:	f107 0214 	add.w	r2, r7, #20
 8001c7e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00c fd62 	bl	800e74e <f_findnext>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001c90:	701a      	strb	r2, [r3, #0]
        i++;
 8001c92:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001c96:	3301      	adds	r3, #1
 8001c98:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    while (retSD == FR_OK && root_info.fname[0]) {
 8001c9c:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d104      	bne.n	8001cae <SD_FetchPresets+0x14e>
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	7d9b      	ldrb	r3, [r3, #22]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1d7      	bne.n	8001c5e <SD_FetchPresets+0xfe>
    }

    qsort(filenames, presetCount, sizeof(filenames[0]), qsort_cmp);
 8001cae:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8001cb2:	f897 1176 	ldrb.w	r1, [r7, #374]	; 0x176
 8001cb6:	4b49      	ldr	r3, [pc, #292]	; (8001ddc <SD_FetchPresets+0x27c>)
 8001cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cbc:	f00e fd95 	bl	80107ea <qsort>

    for (i = 0; i < presetCount; i++) {
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001cc6:	e067      	b.n	8001d98 <SD_FetchPresets+0x238>
 8001cc8:	466b      	mov	r3, sp
 8001cca:	461e      	mov	r6, r3
        retSD = f_open(&SDFile, filenames[i], FA_READ);
 8001ccc:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4840      	ldr	r0, [pc, #256]	; (8001de0 <SD_FetchPresets+0x280>)
 8001cde:	f00c f8bb 	bl	800de58 <f_open>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001ce8:	701a      	strb	r2, [r3, #0]

        char presetBuffer[f_size(&SDFile) + 1];
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <SD_FetchPresets+0x280>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	1c5c      	adds	r4, r3, #1
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	00cb      	lsls	r3, r1, #3
 8001d08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d0c:	00c2      	lsls	r2, r0, #3
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	00cb      	lsls	r3, r1, #3
 8001d1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d22:	00c2      	lsls	r2, r0, #3
 8001d24:	1de3      	adds	r3, r4, #7
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	ebad 0d03 	sub.w	sp, sp, r3
 8001d2e:	466b      	mov	r3, sp
 8001d30:	3300      	adds	r3, #0
 8001d32:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        char nameBuffer[MAX_LABEL_CHARS + 1];
        unsigned int bytesRead;
        retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001d36:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001d3a:	1e62      	subs	r2, r4, #1
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	4828      	ldr	r0, [pc, #160]	; (8001de0 <SD_FetchPresets+0x280>)
 8001d40:	f00c fa48 	bl	800e1d4 <f_read>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001d4a:	701a      	strb	r2, [r3, #0]
        presetBuffer[bytesRead] = '\0';
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001d54:	2100      	movs	r1, #0
 8001d56:	54d1      	strb	r1, [r2, r3]

        Preset_GetName(presetBuffer, nameBuffer);
 8001d58:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d5c:	1d3a      	adds	r2, r7, #4
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fdbb 	bl	80018dc <Preset_GetName>

        snprintf(presets[i], MAX_LABEL_CHARS + 1, "%s", nameBuffer);
 8001d66:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <SD_FetchPresets+0x284>)
 8001d72:	1898      	adds	r0, r3, r2
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <SD_FetchPresets+0x278>)
 8001d78:	210f      	movs	r1, #15
 8001d7a:	f00e fe9f 	bl	8010abc <sniprintf>
        retSD = f_close(&SDFile);
 8001d7e:	4818      	ldr	r0, [pc, #96]	; (8001de0 <SD_FetchPresets+0x280>)
 8001d80:	f00c fbe5 	bl	800e54e <f_close>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	46b5      	mov	sp, r6
    for (i = 0; i < presetCount; i++) {
 8001d8e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001d92:	3301      	adds	r3, #1
 8001d94:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001d98:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8001d9c:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d391      	bcc.n	8001cc8 <SD_FetchPresets+0x168>
    }

    retSD = f_mount(NULL, "", 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <SD_FetchPresets+0x264>)
 8001da8:	2000      	movs	r0, #0
 8001daa:	f00c f80f 	bl	800ddcc <f_mount>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <SD_FetchPresets+0x26c>)
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	46ad      	mov	sp, r5

}
 8001db8:	bf00      	nop
 8001dba:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	08013a58 	.word	0x08013a58
 8001dc8:	200029c4 	.word	0x200029c4
 8001dcc:	2000278c 	.word	0x2000278c
 8001dd0:	08013a5c 	.word	0x08013a5c
 8001dd4:	08013a64 	.word	0x08013a64
 8001dd8:	08013a6c 	.word	0x08013a6c
 8001ddc:	08001ec5 	.word	0x08001ec5
 8001de0:	20002794 	.word	0x20002794
 8001de4:	200026c8 	.word	0x200026c8

08001de8 <SD_LoadPreset>:

void SD_LoadPreset(Knob *knobs, char *filename) {
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	466b      	mov	r3, sp
 8001df4:	461d      	mov	r5, r3
    //SD_Enable();

    retSD = f_mount(&SDFatFS, "", 1);
 8001df6:	2201      	movs	r2, #1
 8001df8:	492e      	ldr	r1, [pc, #184]	; (8001eb4 <SD_LoadPreset+0xcc>)
 8001dfa:	482f      	ldr	r0, [pc, #188]	; (8001eb8 <SD_LoadPreset+0xd0>)
 8001dfc:	f00b ffe6 	bl	800ddcc <f_mount>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <SD_LoadPreset+0xd4>)
 8001e06:	701a      	strb	r2, [r3, #0]
    retSD = f_open(&SDFile, filename, FA_READ);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	482c      	ldr	r0, [pc, #176]	; (8001ec0 <SD_LoadPreset+0xd8>)
 8001e0e:	f00c f823 	bl	800de58 <f_open>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <SD_LoadPreset+0xd4>)
 8001e18:	701a      	strb	r2, [r3, #0]

    char presetBuffer[f_size(&SDFile) + 1];
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <SD_LoadPreset+0xd8>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	1c5c      	adds	r4, r3, #1
 8001e20:	4623      	mov	r3, r4
 8001e22:	3b01      	subs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	4620      	mov	r0, r4
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	00cb      	lsls	r3, r1, #3
 8001e36:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e3a:	00c2      	lsls	r2, r0, #3
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	00cb      	lsls	r3, r1, #3
 8001e4c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001e50:	00c2      	lsls	r2, r0, #3
 8001e52:	1de3      	adds	r3, r4, #7
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	ebad 0d03 	sub.w	sp, sp, r3
 8001e5c:	466b      	mov	r3, sp
 8001e5e:	3300      	adds	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
    unsigned int bytesRead;

    retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001e62:	6939      	ldr	r1, [r7, #16]
 8001e64:	1e62      	subs	r2, r4, #1
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	4815      	ldr	r0, [pc, #84]	; (8001ec0 <SD_LoadPreset+0xd8>)
 8001e6c:	f00c f9b2 	bl	800e1d4 <f_read>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <SD_LoadPreset+0xd4>)
 8001e76:	701a      	strb	r2, [r3, #0]
    presetBuffer[bytesRead] = '\0';
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	54d1      	strb	r1, [r2, r3]

    Preset_Load(knobs, presetBuffer);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fd53 	bl	8001930 <Preset_Load>

    retSD = f_close(&SDFile);
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <SD_LoadPreset+0xd8>)
 8001e8c:	f00c fb5f 	bl	800e54e <f_close>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <SD_LoadPreset+0xd4>)
 8001e96:	701a      	strb	r2, [r3, #0]
    retSD = f_mount(NULL, "", 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <SD_LoadPreset+0xcc>)
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f00b ff95 	bl	800ddcc <f_mount>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SD_LoadPreset+0xd4>)
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	46ad      	mov	sp, r5

    //SD_Disable();
}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb4:	08013a58 	.word	0x08013a58
 8001eb8:	200029c4 	.word	0x200029c4
 8001ebc:	2000278c 	.word	0x2000278c
 8001ec0:	20002794 	.word	0x20002794

08001ec4 <qsort_cmp>:
void SD_Disable() {
    __HAL_SD_DISABLE(hsd);
    hsd.State = HAL_SD_STATE_RESET;
}

int qsort_cmp(const void *lhs, const void *rhs) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
    return strcmp(lhs, rhs);
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7fe f985 	bl	80001e0 <strcmp>
 8001ed6:	4603      	mov	r3, r0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(uint8_t command) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af04      	add	r7, sp, #16
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001eea:	230a      	movs	r3, #10
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	1dfb      	adds	r3, r7, #7
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2178      	movs	r1, #120	; 0x78
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <ssd1306_WriteCommand+0x2c>)
 8001efe:	f002 fa6b 	bl	80043d8 <HAL_I2C_Mem_Write>
 8001f02:	4603      	mov	r3, r0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20002588 	.word	0x20002588

08001f10 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(Knob *k) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    int status = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(k);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fc73 	bl	8002808 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(0xAE);   // Display off
 8001f22:	20ae      	movs	r0, #174	; 0xae
 8001f24:	f7ff ffdc 	bl	8001ee0 <ssd1306_WriteCommand>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // Set Memory Addressing Mode
 8001f32:	2020      	movs	r0, #32
 8001f34:	f7ff ffd4 	bl	8001ee0 <ssd1306_WriteCommand>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f42:	2010      	movs	r0, #16
 8001f44:	f7ff ffcc 	bl	8001ee0 <ssd1306_WriteCommand>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001f52:	20b0      	movs	r0, #176	; 0xb0
 8001f54:	f7ff ffc4 	bl	8001ee0 <ssd1306_WriteCommand>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xC8);   // Set COM Output Scan Direction
 8001f62:	20c8      	movs	r0, #200	; 0xc8
 8001f64:	f7ff ffbc 	bl	8001ee0 <ssd1306_WriteCommand>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // Set low column address
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff ffb4 	bl	8001ee0 <ssd1306_WriteCommand>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // Set high column address
 8001f82:	2010      	movs	r0, #16
 8001f84:	f7ff ffac 	bl	8001ee0 <ssd1306_WriteCommand>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);   // Set start line address
 8001f92:	2040      	movs	r0, #64	; 0x40
 8001f94:	f7ff ffa4 	bl	8001ee0 <ssd1306_WriteCommand>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x81);   // set contrast control register
 8001fa2:	2081      	movs	r0, #129	; 0x81
 8001fa4:	f7ff ff9c 	bl	8001ee0 <ssd1306_WriteCommand>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);
 8001fb2:	2040      	movs	r0, #64	; 0x40
 8001fb4:	f7ff ff94 	bl	8001ee0 <ssd1306_WriteCommand>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA1);   // Set segment re-map 0 to 127
 8001fc2:	20a1      	movs	r0, #161	; 0xa1
 8001fc4:	f7ff ff8c 	bl	8001ee0 <ssd1306_WriteCommand>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA6);   // Set normal display
 8001fd2:	20a6      	movs	r0, #166	; 0xa6
 8001fd4:	f7ff ff84 	bl	8001ee0 <ssd1306_WriteCommand>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA8);   // Set multiplex ratio(1 to 64)
 8001fe2:	20a8      	movs	r0, #168	; 0xa8
 8001fe4:	f7ff ff7c 	bl	8001ee0 <ssd1306_WriteCommand>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(SSD1306_HEIGHT - 1);
 8001ff2:	203f      	movs	r0, #63	; 0x3f
 8001ff4:	f7ff ff74 	bl	8001ee0 <ssd1306_WriteCommand>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002002:	20a4      	movs	r0, #164	; 0xa4
 8002004:	f7ff ff6c 	bl	8001ee0 <ssd1306_WriteCommand>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD3);   // Set display offset
 8002012:	20d3      	movs	r0, #211	; 0xd3
 8002014:	f7ff ff64 	bl	8001ee0 <ssd1306_WriteCommand>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // No offset
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff ff5c 	bl	8001ee0 <ssd1306_WriteCommand>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD5);   // Set display clock divide ratio/oscillator frequency
 8002032:	20d5      	movs	r0, #213	; 0xd5
 8002034:	f7ff ff54 	bl	8001ee0 <ssd1306_WriteCommand>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xF0);   // Set divide ratio
 8002042:	20f0      	movs	r0, #240	; 0xf0
 8002044:	f7ff ff4c 	bl	8001ee0 <ssd1306_WriteCommand>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD9);   // Set pre-charge period
 8002052:	20d9      	movs	r0, #217	; 0xd9
 8002054:	f7ff ff44 	bl	8001ee0 <ssd1306_WriteCommand>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x22);
 8002062:	2022      	movs	r0, #34	; 0x22
 8002064:	f7ff ff3c 	bl	8001ee0 <ssd1306_WriteCommand>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xDA);   // Set com pins hardware configuration
 8002072:	20da      	movs	r0, #218	; 0xda
 8002074:	f7ff ff34 	bl	8001ee0 <ssd1306_WriteCommand>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(0x12);   // Do not use COM left/right remap
 8002082:	2012      	movs	r0, #18
 8002084:	f7ff ff2c 	bl	8001ee0 <ssd1306_WriteCommand>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(0xDB);   // Set vcomh
 8002092:	20db      	movs	r0, #219	; 0xdb
 8002094:	f7ff ff24 	bl	8001ee0 <ssd1306_WriteCommand>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // 0x20,0.77xVcc
 80020a2:	2020      	movs	r0, #32
 80020a4:	f7ff ff1c 	bl	8001ee0 <ssd1306_WriteCommand>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x8D);   // Set DC-DC enable
 80020b2:	208d      	movs	r0, #141	; 0x8d
 80020b4:	f7ff ff14 	bl	8001ee0 <ssd1306_WriteCommand>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x14);   //
 80020c2:	2014      	movs	r0, #20
 80020c4:	f7ff ff0c 	bl	8001ee0 <ssd1306_WriteCommand>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xAF);   // Turn on SSD1306 panel
 80020d2:	20af      	movs	r0, #175	; 0xaf
 80020d4:	f7ff ff04 	bl	8001ee0 <ssd1306_WriteCommand>
 80020d8:	4603      	mov	r3, r0
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <ssd1306_Init+0x1dc>
        return 1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e012      	b.n	8002112 <ssd1306_Init+0x202>
    }

    ssd1306_Fill(Black);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f000 f819 	bl	8002124 <ssd1306_Fill>
    ssd1306_AdjustBrightness(0x63);
 80020f2:	2063      	movs	r0, #99	; 0x63
 80020f4:	f000 fb5e 	bl	80027b4 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(&hi2c1);
 80020f8:	4808      	ldr	r0, [pc, #32]	; (800211c <ssd1306_Init+0x20c>)
 80020fa:	f000 f837 	bl	800216c <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <ssd1306_Init+0x210>)
 8002100:	2200      	movs	r2, #0
 8002102:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <ssd1306_Init+0x210>)
 8002106:	2200      	movs	r2, #0
 8002108:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <ssd1306_Init+0x210>)
 800210c:	2201      	movs	r2, #1
 800210e:	715a      	strb	r2, [r3, #5]

    return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20002588 	.word	0x20002588
 8002120:	20000760 	.word	0x20000760

08002124 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e00d      	b.n	8002150 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <ssd1306_Fill+0x1a>
 800213a:	2100      	movs	r1, #0
 800213c:	e000      	b.n	8002140 <ssd1306_Fill+0x1c>
 800213e:	21ff      	movs	r1, #255	; 0xff
 8002140:	4a09      	ldr	r2, [pc, #36]	; (8002168 <ssd1306_Fill+0x44>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4413      	add	r3, r2
 8002146:	460a      	mov	r2, r1
 8002148:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3301      	adds	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002156:	d3ed      	bcc.n	8002134 <ssd1306_Fill+0x10>
    }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000360 	.word	0x20000360

0800216c <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen() {
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af04      	add	r7, sp, #16
    for (uint8_t i = 0; i < 8; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	71fb      	strb	r3, [r7, #7]
 8002176:	e01d      	b.n	80021b4 <ssd1306_UpdateScreen+0x48>
        ssd1306_WriteCommand(0xB0 + i);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	3b50      	subs	r3, #80	; 0x50
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff feae 	bl	8001ee0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff feab 	bl	8001ee0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800218a:	2010      	movs	r0, #16
 800218c:	f7ff fea8 	bl	8001ee0 <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	01db      	lsls	r3, r3, #7
 8002194:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <ssd1306_UpdateScreen+0x58>)
 8002196:	4413      	add	r3, r2
 8002198:	2264      	movs	r2, #100	; 0x64
 800219a:	9202      	str	r2, [sp, #8]
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	9201      	str	r2, [sp, #4]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2301      	movs	r3, #1
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	2178      	movs	r1, #120	; 0x78
 80021a8:	4807      	ldr	r0, [pc, #28]	; (80021c8 <ssd1306_UpdateScreen+0x5c>)
 80021aa:	f002 f915 	bl	80043d8 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	3301      	adds	r3, #1
 80021b2:	71fb      	strb	r3, [r7, #7]
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b07      	cmp	r3, #7
 80021b8:	d9de      	bls.n	8002178 <ssd1306_UpdateScreen+0xc>
    }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000360 	.word	0x20000360
 80021c8:	20002588 	.word	0x20002588

080021cc <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(Knob *k) {
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b08d      	sub	sp, #52	; 0x34
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    ssd1306_Select(k);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fb17 	bl	8002808 <ssd1306_Select>
    ssd1306_Fill(Black);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff ffa2 	bl	8002124 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 80021e0:	4b9d      	ldr	r3, [pc, #628]	; (8002458 <ssd1306_WriteKnob+0x28c>)
 80021e2:	f107 0410 	add.w	r4, r7, #16
 80021e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7e1b      	ldrb	r3, [r3, #24]
 80021f0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80021f4:	4a99      	ldr	r2, [pc, #612]	; (800245c <ssd1306_WriteKnob+0x290>)
 80021f6:	2103      	movs	r1, #3
 80021f8:	f00e fc60 	bl	8010abc <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e5b      	ldrb	r3, [r3, #25]
 8002200:	f107 0020 	add.w	r0, r7, #32
 8002204:	4a96      	ldr	r2, [pc, #600]	; (8002460 <ssd1306_WriteKnob+0x294>)
 8002206:	2104      	movs	r1, #4
 8002208:	f00e fc58 	bl	8010abc <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	4618      	mov	r0, r3
 8002212:	f7fd ffef 	bl	80001f4 <strlen>
 8002216:	4604      	mov	r4, r0
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 fb2b 	bl	8002874 <update_init_indicator>
 800221e:	4603      	mov	r3, r0
 8002220:	f107 0010 	add.w	r0, r7, #16
 8002224:	4a8f      	ldr	r2, [pc, #572]	; (8002464 <ssd1306_WriteKnob+0x298>)
 8002226:	4621      	mov	r1, r4
 8002228:	f00e fc48 	bl	8010abc <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) Knob_Map(k, k->value, k->max_range));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7ed9      	ldrb	r1, [r3, #27]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7f5b      	ldrb	r3, [r3, #29]
 8002234:	461a      	mov	r2, r3
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe feda 	bl	8000ff0 <Knob_Map>
 800223c:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 800223e:	f107 000c 	add.w	r0, r7, #12
 8002242:	4a87      	ldr	r2, [pc, #540]	; (8002460 <ssd1306_WriteKnob+0x294>)
 8002244:	2104      	movs	r1, #4
 8002246:	f00e fc39 	bl	8010abc <sniprintf>

    ssd1306_SetCursor(0, 0);
 800224a:	2100      	movs	r1, #0
 800224c:	2000      	movs	r0, #0
 800224e:	f000 fa99 	bl	8002784 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8002252:	4a85      	ldr	r2, [pc, #532]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 8002254:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002258:	2301      	movs	r3, #1
 800225a:	ca06      	ldmia	r2, {r1, r2}
 800225c:	f000 fa36 	bl	80026cc <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8002260:	4b81      	ldr	r3, [pc, #516]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	3301      	adds	r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	2000      	movs	r0, #0
 800226c:	f000 fa8a 	bl	8002784 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8002270:	4a7d      	ldr	r2, [pc, #500]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 8002272:	f107 0020 	add.w	r0, r7, #32
 8002276:	2301      	movs	r3, #1
 8002278:	ca06      	ldmia	r2, {r1, r2}
 800227a:	f000 fa27 	bl	80026cc <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	4618      	mov	r0, r3
 8002284:	f7fd ffb6 	bl	80001f4 <strlen>
 8002288:	4603      	mov	r3, r0
 800228a:	4a77      	ldr	r2, [pc, #476]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	b2d8      	uxtb	r0, r3
 800229a:	4b73      	ldr	r3, [pc, #460]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	3301      	adds	r3, #1
 80022a0:	0fda      	lsrs	r2, r3, #31
 80022a2:	4413      	add	r3, r2
 80022a4:	105b      	asrs	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	f000 fa6b 	bl	8002784 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 80022ae:	4a6e      	ldr	r2, [pc, #440]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 80022b0:	f107 0010 	add.w	r0, r7, #16
 80022b4:	2301      	movs	r3, #1
 80022b6:	ca06      	ldmia	r2, {r1, r2}
 80022b8:	f000 fa08 	bl	80026cc <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 80022bc:	4b6a      	ldr	r3, [pc, #424]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	f1c3 0320 	rsb	r3, r3, #32
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b2d8      	uxtb	r0, r3
 80022ce:	4b66      	ldr	r3, [pc, #408]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 80022d0:	785b      	ldrb	r3, [r3, #1]
 80022d2:	3301      	adds	r3, #1
 80022d4:	0fda      	lsrs	r2, r3, #31
 80022d6:	4413      	add	r3, r2
 80022d8:	105b      	asrs	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4619      	mov	r1, r3
 80022de:	f000 fa51 	bl	8002784 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 80022e2:	4a61      	ldr	r2, [pc, #388]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 80022e4:	f107 000c 	add.w	r0, r7, #12
 80022e8:	2301      	movs	r3, #1
 80022ea:	ca06      	ldmia	r2, {r1, r2}
 80022ec:	f000 f9ee 	bl	80026cc <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80022f6:	e013      	b.n	8002320 <ssd1306_WriteKnob+0x154>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 80022f8:	4b5c      	ldr	r3, [pc, #368]	; (800246c <ssd1306_WriteKnob+0x2a0>)
 80022fa:	885b      	ldrh	r3, [r3, #2]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	4413      	add	r3, r2
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3304      	adds	r3, #4
 8002308:	b2d9      	uxtb	r1, r3
 800230a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800230e:	2201      	movs	r2, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f8fb 	bl	800250c <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8002316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800231a:	3301      	adds	r3, #1
 800231c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002320:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002324:	2b00      	cmp	r3, #0
 8002326:	dae7      	bge.n	80022f8 <ssd1306_WriteKnob+0x12c>
    }

    uint8_t len_label = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t y = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 800233a:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <ssd1306_WriteKnob+0x29c>)
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	f1c3 0320 	rsb	r3, r3, #32
 8002342:	b2db      	uxtb	r3, r3
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    // Draw main label
    len_label = strlen(k->label);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3302      	adds	r3, #2
 800234e:	4618      	mov	r0, r3
 8002350:	f7fd ff50 	bl	80001f4 <strlen>
 8002354:	4603      	mov	r3, r0
 8002356:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 800235a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800235e:	4a44      	ldr	r2, [pc, #272]	; (8002470 <ssd1306_WriteKnob+0x2a4>)
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800236a:	0fda      	lsrs	r2, r3, #31
 800236c:	4413      	add	r3, r2
 800236e:	105b      	asrs	r3, r3, #1
 8002370:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 8002374:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002380:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002384:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <ssd1306_WriteKnob+0x2a4>)
 800238a:	785b      	ldrb	r3, [r3, #1]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	b2db      	uxtb	r3, r3
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a0:	edc7 7a00 	vstr	s15, [r7]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 80023aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80023ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f9e5 	bl	8002784 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	1c98      	adds	r0, r3, #2
 80023be:	4a2c      	ldr	r2, [pc, #176]	; (8002470 <ssd1306_WriteKnob+0x2a4>)
 80023c0:	2301      	movs	r3, #1
 80023c2:	ca06      	ldmia	r2, {r1, r2}
 80023c4:	f000 f982 	bl	80026cc <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7f1b      	ldrb	r3, [r3, #28]
 80023cc:	b25b      	sxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db02      	blt.n	80023d8 <ssd1306_WriteKnob+0x20c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7edb      	ldrb	r3, [r3, #27]
 80023d6:	e000      	b.n	80023da <ssd1306_WriteKnob+0x20e>
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    len_label = strlen(k->sub_labels[sl_index]);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6959      	ldr	r1, [r3, #20]
 80023e2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fd ff00 	bl	80001f4 <strlen>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 80023fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <ssd1306_WriteKnob+0x2a4>)
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800240a:	0fda      	lsrs	r2, r3, #31
 800240c:	4413      	add	r3, r2
 800240e:	105b      	asrs	r3, r3, #1
 8002410:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <ssd1306_WriteKnob+0x2a4>)
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800241c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 8002420:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002424:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f9aa 	bl	8002784 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6959      	ldr	r1, [r3, #20]
 8002434:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	18c8      	adds	r0, r1, r3
 8002440:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <ssd1306_WriteKnob+0x2a4>)
 8002442:	2301      	movs	r3, #1
 8002444:	ca06      	ldmia	r2, {r1, r2}
 8002446:	f000 f941 	bl	80026cc <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 800244a:	f7ff fe8f 	bl	800216c <ssd1306_UpdateScreen>
}
 800244e:	bf00      	nop
 8002450:	3734      	adds	r7, #52	; 0x34
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	bf00      	nop
 8002458:	08013a84 	.word	0x08013a84
 800245c:	08013a70 	.word	0x08013a70
 8002460:	08013a78 	.word	0x08013a78
 8002464:	08013a80 	.word	0x08013a80
 8002468:	20000000 	.word	0x20000000
 800246c:	20000760 	.word	0x20000760
 8002470:	20000010 	.word	0x20000010

08002474 <ssd1306_WritePresets>:

void ssd1306_WritePresets(Knob knobs[]) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e038      	b.n	80024f4 <ssd1306_WritePresets+0x80>
        ssd1306_Select(&knobs[i]);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	015b      	lsls	r3, r3, #5
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f9bc 	bl	8002808 <ssd1306_Select>
        ssd1306_Fill(Black);
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff fe47 	bl	8002124 <ssd1306_Fill>
        uint8_t x = (SSD1306_WIDTH - strlen(presets[i]) * Font_10x18.FontWidth) / 2;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	4a19      	ldr	r2, [pc, #100]	; (8002504 <ssd1306_WritePresets+0x90>)
 80024a0:	4413      	add	r3, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd fea6 	bl	80001f4 <strlen>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <ssd1306_WritePresets+0x94>)
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	73bb      	strb	r3, [r7, #14]
        uint8_t y = SSD1306_HEIGHT / 2 - Font_10x18.FontHeight / 2;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <ssd1306_WritePresets+0x94>)
 80024bc:	785b      	ldrb	r3, [r3, #1]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f1c3 0320 	rsb	r3, r3, #32
 80024c6:	737b      	strb	r3, [r7, #13]
        ssd1306_SetCursor(x, y);
 80024c8:	7b7a      	ldrb	r2, [r7, #13]
 80024ca:	7bbb      	ldrb	r3, [r7, #14]
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f958 	bl	8002784 <ssd1306_SetCursor>
        ssd1306_WriteString(presets[i], Font_10x18, White);
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	4a09      	ldr	r2, [pc, #36]	; (8002504 <ssd1306_WritePresets+0x90>)
 80024de:	1898      	adds	r0, r3, r2
 80024e0:	4a09      	ldr	r2, [pc, #36]	; (8002508 <ssd1306_WritePresets+0x94>)
 80024e2:	2301      	movs	r3, #1
 80024e4:	ca06      	ldmia	r2, {r1, r2}
 80024e6:	f000 f8f1 	bl	80026cc <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80024ea:	f7ff fe3f 	bl	800216c <ssd1306_UpdateScreen>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3301      	adds	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d9c3      	bls.n	8002482 <ssd1306_WritePresets+0xe>
    }
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	200026c8 	.word	0x200026c8
 8002508:	20000010 	.word	0x20000010

0800250c <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
 8002516:	460b      	mov	r3, r1
 8002518:	71bb      	strb	r3, [r7, #6]
 800251a:	4613      	mov	r3, r2
 800251c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	db48      	blt.n	80025b8 <ssd1306_DrawPixel+0xac>
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2b3f      	cmp	r3, #63	; 0x3f
 800252a:	d845      	bhi.n	80025b8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <ssd1306_DrawPixel+0xb8>)
 800252e:	791b      	ldrb	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8002534:	797b      	ldrb	r3, [r7, #5]
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 8002542:	797b      	ldrb	r3, [r7, #5]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d11a      	bne.n	800257e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002548:	79fa      	ldrb	r2, [r7, #7]
 800254a:	79bb      	ldrb	r3, [r7, #6]
 800254c:	08db      	lsrs	r3, r3, #3
 800254e:	b2d8      	uxtb	r0, r3
 8002550:	4603      	mov	r3, r0
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	4413      	add	r3, r2
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <ssd1306_DrawPixel+0xbc>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	b25a      	sxtb	r2, r3
 800255c:	79bb      	ldrb	r3, [r7, #6]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	b25b      	sxtb	r3, r3
 800256a:	4313      	orrs	r3, r2
 800256c:	b259      	sxtb	r1, r3
 800256e:	79fa      	ldrb	r2, [r7, #7]
 8002570:	4603      	mov	r3, r0
 8002572:	01db      	lsls	r3, r3, #7
 8002574:	4413      	add	r3, r2
 8002576:	b2c9      	uxtb	r1, r1
 8002578:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <ssd1306_DrawPixel+0xbc>)
 800257a:	54d1      	strb	r1, [r2, r3]
 800257c:	e01d      	b.n	80025ba <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800257e:	79fa      	ldrb	r2, [r7, #7]
 8002580:	79bb      	ldrb	r3, [r7, #6]
 8002582:	08db      	lsrs	r3, r3, #3
 8002584:	b2d8      	uxtb	r0, r3
 8002586:	4603      	mov	r3, r0
 8002588:	01db      	lsls	r3, r3, #7
 800258a:	4413      	add	r3, r2
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <ssd1306_DrawPixel+0xbc>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	b25a      	sxtb	r2, r3
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	4013      	ands	r3, r2
 80025a6:	b259      	sxtb	r1, r3
 80025a8:	79fa      	ldrb	r2, [r7, #7]
 80025aa:	4603      	mov	r3, r0
 80025ac:	01db      	lsls	r3, r3, #7
 80025ae:	4413      	add	r3, r2
 80025b0:	b2c9      	uxtb	r1, r1
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <ssd1306_DrawPixel+0xbc>)
 80025b4:	54d1      	strb	r1, [r2, r3]
 80025b6:	e000      	b.n	80025ba <ssd1306_DrawPixel+0xae>
        return;
 80025b8:	bf00      	nop
    }
}
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000760 	.word	0x20000760
 80025c8:	20000360 	.word	0x20000360

080025cc <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4604      	mov	r4, r0
 80025d4:	1d38      	adds	r0, r7, #4
 80025d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80025da:	461a      	mov	r2, r3
 80025dc:	4623      	mov	r3, r4
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	4613      	mov	r3, r2
 80025e2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80025e4:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <ssd1306_WriteChar+0xfc>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	793b      	ldrb	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	2b7f      	cmp	r3, #127	; 0x7f
 80025f0:	dc06      	bgt.n	8002600 <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 80025f2:	4b35      	ldr	r3, [pc, #212]	; (80026c8 <ssd1306_WriteChar+0xfc>)
 80025f4:	885b      	ldrh	r3, [r3, #2]
 80025f6:	461a      	mov	r2, r3
 80025f8:	797b      	ldrb	r3, [r7, #5]
 80025fa:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80025fc:	2b3f      	cmp	r3, #63	; 0x3f
 80025fe:	dd01      	ble.n	8002604 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8002600:	2300      	movs	r3, #0
 8002602:	e05d      	b.n	80026c0 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	e04c      	b.n	80026a4 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	3b20      	subs	r3, #32
 8002610:	7979      	ldrb	r1, [r7, #5]
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4619      	mov	r1, r3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	440b      	add	r3, r1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e034      	b.n	8002694 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800263a:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <ssd1306_WriteChar+0xfc>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4413      	add	r3, r2
 8002646:	b2d8      	uxtb	r0, r3
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <ssd1306_WriteChar+0xfc>)
 800264a:	885b      	ldrh	r3, [r3, #2]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4413      	add	r3, r2
 8002654:	b2db      	uxtb	r3, r3
 8002656:	7bba      	ldrb	r2, [r7, #14]
 8002658:	4619      	mov	r1, r3
 800265a:	f7ff ff57 	bl	800250c <ssd1306_DrawPixel>
 800265e:	e016      	b.n	800268e <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <ssd1306_WriteChar+0xfc>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4413      	add	r3, r2
 800266c:	b2d8      	uxtb	r0, r3
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <ssd1306_WriteChar+0xfc>)
 8002670:	885b      	ldrh	r3, [r3, #2]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4413      	add	r3, r2
 800267a:	b2d9      	uxtb	r1, r3
 800267c:	7bbb      	ldrb	r3, [r7, #14]
 800267e:	2b00      	cmp	r3, #0
 8002680:	bf0c      	ite	eq
 8002682:	2301      	moveq	r3, #1
 8002684:	2300      	movne	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	f7ff ff3f 	bl	800250c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	3301      	adds	r3, #1
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	793b      	ldrb	r3, [r7, #4]
 8002696:	461a      	mov	r2, r3
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4293      	cmp	r3, r2
 800269c:	d3c5      	bcc.n	800262a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	797b      	ldrb	r3, [r7, #5]
 80026a6:	461a      	mov	r2, r3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d3ad      	bcc.n	800260a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <ssd1306_WriteChar+0xfc>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	793b      	ldrb	r3, [r7, #4]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <ssd1306_WriteChar+0xfc>)
 80026bc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3724      	adds	r7, #36	; 0x24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd90      	pop	{r4, r7, pc}
 80026c8:	20000760 	.word	0x20000760

080026cc <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	1d38      	adds	r0, r7, #4
 80026d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80026da:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80026dc:	e012      	b.n	8002704 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	7818      	ldrb	r0, [r3, #0]
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	1d3a      	adds	r2, r7, #4
 80026e6:	ca06      	ldmia	r2, {r1, r2}
 80026e8:	f7ff ff70 	bl	80025cc <ssd1306_WriteChar>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d002      	beq.n	80026fe <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	e008      	b.n	8002710 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e8      	bne.n	80026de <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	781b      	ldrb	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <ssd1306_WriteErrorCode>:

void ssd1306_WriteErrorCode(char *label, uint8_t y, uint8_t err_code) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
 8002724:	4613      	mov	r3, r2
 8002726:	70bb      	strb	r3, [r7, #2]
    ssd1306_Fill(Black);
 8002728:	2000      	movs	r0, #0
 800272a:	f7ff fcfb 	bl	8002124 <ssd1306_Fill>
    ssd1306_SetCursor(0, y);
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	4619      	mov	r1, r3
 8002732:	2000      	movs	r0, #0
 8002734:	f000 f826 	bl	8002784 <ssd1306_SetCursor>
    ssd1306_WriteString("label: %s\n", Font_7x10, White);
 8002738:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <ssd1306_WriteErrorCode+0x60>)
 800273a:	2301      	movs	r3, #1
 800273c:	ca06      	ldmia	r2, {r1, r2}
 800273e:	480f      	ldr	r0, [pc, #60]	; (800277c <ssd1306_WriteErrorCode+0x64>)
 8002740:	f7ff ffc4 	bl	80026cc <ssd1306_WriteString>

    char err_str[16];
    snprintf(err_str, sizeof(err_str) / sizeof(err_str[0]), "%d", err_code);
 8002744:	78bb      	ldrb	r3, [r7, #2]
 8002746:	f107 0008 	add.w	r0, r7, #8
 800274a:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <ssd1306_WriteErrorCode+0x68>)
 800274c:	2110      	movs	r1, #16
 800274e:	f00e f9b5 	bl	8010abc <sniprintf>
    ssd1306_SetCursor(2 * SSD1306_WIDTH / 3, y);
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	4619      	mov	r1, r3
 8002756:	2055      	movs	r0, #85	; 0x55
 8002758:	f000 f814 	bl	8002784 <ssd1306_SetCursor>
    ssd1306_WriteString(err_str, Font_7x10, White);
 800275c:	4a06      	ldr	r2, [pc, #24]	; (8002778 <ssd1306_WriteErrorCode+0x60>)
 800275e:	f107 0008 	add.w	r0, r7, #8
 8002762:	2301      	movs	r3, #1
 8002764:	ca06      	ldmia	r2, {r1, r2}
 8002766:	f7ff ffb1 	bl	80026cc <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 800276a:	f7ff fcff 	bl	800216c <ssd1306_UpdateScreen>

}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000008 	.word	0x20000008
 800277c:	08013a94 	.word	0x08013a94
 8002780:	08013aa0 	.word	0x08013aa0

08002784 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	460a      	mov	r2, r1
 800278e:	71fb      	strb	r3, [r7, #7]
 8002790:	4613      	mov	r3, r2
 8002792:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	b29a      	uxth	r2, r3
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <ssd1306_SetCursor+0x2c>)
 800279a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800279c:	79bb      	ldrb	r3, [r7, #6]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <ssd1306_SetCursor+0x2c>)
 80027a2:	805a      	strh	r2, [r3, #2]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	20000760 	.word	0x20000760

080027b4 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(uint8_t brightness) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
    uint8_t contrast_cmd = 0x81;
 80027be:	2381      	movs	r3, #129	; 0x81
 80027c0:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 80027c6:	230a      	movs	r3, #10
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	2301      	movs	r3, #1
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f107 030f 	add.w	r3, r7, #15
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2301      	movs	r3, #1
 80027d6:	2200      	movs	r2, #0
 80027d8:	2178      	movs	r1, #120	; 0x78
 80027da:	480a      	ldr	r0, [pc, #40]	; (8002804 <ssd1306_AdjustBrightness+0x50>)
 80027dc:	f001 fdfc 	bl	80043d8 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 80027e0:	230a      	movs	r3, #10
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	2301      	movs	r3, #1
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	f107 030e 	add.w	r3, r7, #14
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2301      	movs	r3, #1
 80027f0:	2200      	movs	r2, #0
 80027f2:	2178      	movs	r1, #120	; 0x78
 80027f4:	4803      	ldr	r0, [pc, #12]	; (8002804 <ssd1306_AdjustBrightness+0x50>)
 80027f6:	f001 fdef 	bl	80043d8 <HAL_I2C_Mem_Write>
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20002588 	.word	0x20002588

08002808 <ssd1306_Select>:

// Select a display
void ssd1306_Select(Knob *k) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
    i2c_Select(I2C_MUX_MASTER_ADDR, k->row);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	20e2      	movs	r0, #226	; 0xe2
 8002818:	f000 f80a 	bl	8002830 <i2c_Select>
    i2c_Select(I2C_MUX_SLAVE_ADDR, k->col);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	785b      	ldrb	r3, [r3, #1]
 8002820:	4619      	mov	r1, r3
 8002822:	20e0      	movs	r0, #224	; 0xe0
 8002824:	f000 f804 	bl	8002830 <i2c_Select>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(uint8_t mux_addr, uint8_t i) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af02      	add	r7, sp, #8
 8002836:	4603      	mov	r3, r0
 8002838:	460a      	mov	r2, r1
 800283a:	71fb      	strb	r3, [r7, #7]
 800283c:	4613      	mov	r3, r2
 800283e:	71bb      	strb	r3, [r7, #6]
    if (i > 7) return;
 8002840:	79bb      	ldrb	r3, [r7, #6]
 8002842:	2b07      	cmp	r3, #7
 8002844:	d810      	bhi.n	8002868 <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 8002846:	79bb      	ldrb	r3, [r7, #6]
 8002848:	2201      	movs	r2, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	b299      	uxth	r1, r3
 8002856:	f107 020c 	add.w	r2, r7, #12
 800285a:	2364      	movs	r3, #100	; 0x64
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2301      	movs	r3, #1
 8002860:	4803      	ldr	r0, [pc, #12]	; (8002870 <i2c_Select+0x40>)
 8002862:	f001 fcbb 	bl	80041dc <HAL_I2C_Master_Transmit>
 8002866:	e000      	b.n	800286a <i2c_Select+0x3a>
    if (i > 7) return;
 8002868:	bf00      	nop
}
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20002588 	.word	0x20002588

08002874 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    int8_t init_diff = Knob_Map(k, k->init_value, MIDI_MAX) - Knob_Map(k, k->value, MIDI_MAX);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7e9b      	ldrb	r3, [r3, #26]
 8002880:	227f      	movs	r2, #127	; 0x7f
 8002882:	4619      	mov	r1, r3
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7fe fbb3 	bl	8000ff0 <Knob_Map>
 800288a:	4603      	mov	r3, r0
 800288c:	461c      	mov	r4, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7edb      	ldrb	r3, [r3, #27]
 8002892:	227f      	movs	r2, #127	; 0x7f
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fbaa 	bl	8000ff0 <Knob_Map>
 800289c:	4603      	mov	r3, r0
 800289e:	1ae3      	subs	r3, r4, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 80028a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bfb8      	it	lt
 80028ac:	425b      	neglt	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028b8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80029a4 <update_init_indicator+0x130>
 80028bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80029a8 <update_init_indicator+0x134>
 80028c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028cc:	edc7 7a00 	vstr	s15, [r7]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 80028d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <update_init_indicator+0x6c>
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <update_init_indicator+0x138>)
 80028de:	e05c      	b.n	800299a <update_init_indicator+0x126>

    if (init_pct < 15) {
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	2b0e      	cmp	r3, #14
 80028e4:	d807      	bhi.n	80028f6 <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dd01      	ble.n	80028f2 <update_init_indicator+0x7e>
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <update_init_indicator+0x13c>)
 80028f0:	e053      	b.n	800299a <update_init_indicator+0x126>
        else return "        <      ";
 80028f2:	4b30      	ldr	r3, [pc, #192]	; (80029b4 <update_init_indicator+0x140>)
 80028f4:	e051      	b.n	800299a <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 80028f6:	7bbb      	ldrb	r3, [r7, #14]
 80028f8:	2b0e      	cmp	r3, #14
 80028fa:	d90a      	bls.n	8002912 <update_init_indicator+0x9e>
 80028fc:	7bbb      	ldrb	r3, [r7, #14]
 80028fe:	2b1d      	cmp	r3, #29
 8002900:	d807      	bhi.n	8002912 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 8002902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	dd01      	ble.n	800290e <update_init_indicator+0x9a>
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <update_init_indicator+0x144>)
 800290c:	e045      	b.n	800299a <update_init_indicator+0x126>
        else return "        <<     ";
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <update_init_indicator+0x148>)
 8002910:	e043      	b.n	800299a <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 8002912:	7bbb      	ldrb	r3, [r7, #14]
 8002914:	2b1d      	cmp	r3, #29
 8002916:	d90a      	bls.n	800292e <update_init_indicator+0xba>
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	2b2c      	cmp	r3, #44	; 0x2c
 800291c:	d807      	bhi.n	800292e <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	dd01      	ble.n	800292a <update_init_indicator+0xb6>
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <update_init_indicator+0x14c>)
 8002928:	e037      	b.n	800299a <update_init_indicator+0x126>
        else return "        <<<    ";
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <update_init_indicator+0x150>)
 800292c:	e035      	b.n	800299a <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 800292e:	7bbb      	ldrb	r3, [r7, #14]
 8002930:	2b2c      	cmp	r3, #44	; 0x2c
 8002932:	d90a      	bls.n	800294a <update_init_indicator+0xd6>
 8002934:	7bbb      	ldrb	r3, [r7, #14]
 8002936:	2b3c      	cmp	r3, #60	; 0x3c
 8002938:	d807      	bhi.n	800294a <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	dd01      	ble.n	8002946 <update_init_indicator+0xd2>
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <update_init_indicator+0x154>)
 8002944:	e029      	b.n	800299a <update_init_indicator+0x126>
        else return "        <<<<   ";
 8002946:	4b21      	ldr	r3, [pc, #132]	; (80029cc <update_init_indicator+0x158>)
 8002948:	e027      	b.n	800299a <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 800294a:	7bbb      	ldrb	r3, [r7, #14]
 800294c:	2b3c      	cmp	r3, #60	; 0x3c
 800294e:	d90a      	bls.n	8002966 <update_init_indicator+0xf2>
 8002950:	7bbb      	ldrb	r3, [r7, #14]
 8002952:	2b4c      	cmp	r3, #76	; 0x4c
 8002954:	d807      	bhi.n	8002966 <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	dd01      	ble.n	8002962 <update_init_indicator+0xee>
 800295e:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <update_init_indicator+0x15c>)
 8002960:	e01b      	b.n	800299a <update_init_indicator+0x126>
        else return "        <<<<<  ";
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <update_init_indicator+0x160>)
 8002964:	e019      	b.n	800299a <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 8002966:	7bbb      	ldrb	r3, [r7, #14]
 8002968:	2b4c      	cmp	r3, #76	; 0x4c
 800296a:	d90a      	bls.n	8002982 <update_init_indicator+0x10e>
 800296c:	7bbb      	ldrb	r3, [r7, #14]
 800296e:	2b5c      	cmp	r3, #92	; 0x5c
 8002970:	d807      	bhi.n	8002982 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	dd01      	ble.n	800297e <update_init_indicator+0x10a>
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <update_init_indicator+0x164>)
 800297c:	e00d      	b.n	800299a <update_init_indicator+0x126>
        else return "        <<<<<< ";
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <update_init_indicator+0x168>)
 8002980:	e00b      	b.n	800299a <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002982:	7bbb      	ldrb	r3, [r7, #14]
 8002984:	2b5c      	cmp	r3, #92	; 0x5c
 8002986:	d907      	bls.n	8002998 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 8002988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	dd01      	ble.n	8002994 <update_init_indicator+0x120>
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <update_init_indicator+0x16c>)
 8002992:	e002      	b.n	800299a <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002994:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <update_init_indicator+0x170>)
 8002996:	e000      	b.n	800299a <update_init_indicator+0x126>
    } else {
        return " ";
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <update_init_indicator+0x174>)
    }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	bf00      	nop
 80029a4:	42fe0000 	.word	0x42fe0000
 80029a8:	42c80000 	.word	0x42c80000
 80029ac:	08013a84 	.word	0x08013a84
 80029b0:	08013aa4 	.word	0x08013aa4
 80029b4:	08013ab4 	.word	0x08013ab4
 80029b8:	08013ac4 	.word	0x08013ac4
 80029bc:	08013ad4 	.word	0x08013ad4
 80029c0:	08013ae4 	.word	0x08013ae4
 80029c4:	08013af4 	.word	0x08013af4
 80029c8:	08013b04 	.word	0x08013b04
 80029cc:	08013b14 	.word	0x08013b14
 80029d0:	08013b24 	.word	0x08013b24
 80029d4:	08013b34 	.word	0x08013b34
 80029d8:	08013b44 	.word	0x08013b44
 80029dc:	08013b54 	.word	0x08013b54
 80029e0:	08013b64 	.word	0x08013b64
 80029e4:	08013b74 	.word	0x08013b74
 80029e8:	08013b84 	.word	0x08013b84

080029ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_MspInit+0x4c>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <HAL_MspInit+0x4c>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <HAL_MspInit+0x4c>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_MspInit+0x4c>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <HAL_MspInit+0x4c>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_MspInit+0x4c>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <HAL_ADC_MspInit+0x7c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d127      	bne.n	8002aae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_ADC_MspInit+0x80>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a15      	ldr	r2, [pc, #84]	; (8002abc <HAL_ADC_MspInit+0x80>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_ADC_MspInit+0x80>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <HAL_ADC_MspInit+0x80>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <HAL_ADC_MspInit+0x80>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <HAL_ADC_MspInit+0x80>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a96:	230f      	movs	r3, #15
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <HAL_ADC_MspInit+0x84>)
 8002aaa:	f001 f883 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	; 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40012000 	.word	0x40012000
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_I2C_MspInit+0x84>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d12b      	bne.n	8002b3e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_I2C_MspInit+0x88>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <HAL_I2C_MspInit+0x88>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_I2C_MspInit+0x88>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b02:	23c0      	movs	r3, #192	; 0xc0
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b06:	2312      	movs	r3, #18
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b12:	2304      	movs	r3, #4
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <HAL_I2C_MspInit+0x8c>)
 8002b1e:	f001 f849 	bl	8003bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_I2C_MspInit+0x88>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <HAL_I2C_MspInit+0x88>)
 8002b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_I2C_MspInit+0x88>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	; 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40005400 	.word	0x40005400
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020400 	.word	0x40020400

08002b54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <HAL_RTC_MspInit+0x24>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d102      	bne.n	8002b6c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RTC_MspInit+0x28>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40002800 	.word	0x40002800
 8002b7c:	42470e3c 	.word	0x42470e3c

08002b80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <HAL_SD_MspInit+0xc4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d14b      	bne.n	8002c3a <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_SD_MspInit+0xc8>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_SD_MspInit+0xc8>)
 8002bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_SD_MspInit+0xc8>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_SD_MspInit+0xc8>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <HAL_SD_MspInit+0xc8>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_SD_MspInit+0xc8>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <HAL_SD_MspInit+0xc8>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a19      	ldr	r2, [pc, #100]	; (8002c48 <HAL_SD_MspInit+0xc8>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_SD_MspInit+0xc8>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8002bf6:	f44f 7350 	mov.w	r3, #832	; 0x340
 8002bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c08:	230c      	movs	r3, #12
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4619      	mov	r1, r3
 8002c12:	480e      	ldr	r0, [pc, #56]	; (8002c4c <HAL_SD_MspInit+0xcc>)
 8002c14:	f000 ffce 	bl	8003bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 8002c18:	f248 0330 	movw	r3, #32816	; 0x8030
 8002c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c26:	2303      	movs	r3, #3
 8002c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	4619      	mov	r1, r3
 8002c34:	4806      	ldr	r0, [pc, #24]	; (8002c50 <HAL_SD_MspInit+0xd0>)
 8002c36:	f000 ffbd 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	3728      	adds	r7, #40	; 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020400 	.word	0x40020400

08002c54 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8002c58:	e7fe      	b.n	8002c58 <NMI_Handler+0x4>

08002c5a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8002c5e:	e7fe      	b.n	8002c5e <HardFault_Handler+0x4>

08002c60 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8002c64:	e7fe      	b.n	8002c64 <MemManage_Handler+0x4>

08002c66 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8002c6a:	e7fe      	b.n	8002c6a <BusFault_Handler+0x4>

08002c6c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8002c70:	e7fe      	b.n	8002c70 <UsageFault_Handler+0x4>

08002c72 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	e046      	b.n	8002d36 <SysTick_Handler+0x9a>
        GPIO_TypeDef *t = (i == BUTTON_MENU) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d101      	bne.n	8002cb2 <SysTick_Handler+0x16>
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <SysTick_Handler+0xac>)
 8002cb0:	e000      	b.n	8002cb4 <SysTick_Handler+0x18>
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <SysTick_Handler+0xb0>)
 8002cb4:	60bb      	str	r3, [r7, #8]
        uint8_t reading = HAL_GPIO_ReadPin(t, btnPins[i]);
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	4a25      	ldr	r2, [pc, #148]	; (8002d50 <SysTick_Handler+0xb4>)
 8002cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	68b8      	ldr	r0, [r7, #8]
 8002cc2:	f001 f8fb 	bl	8003ebc <HAL_GPIO_ReadPin>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <SysTick_Handler+0xb8>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	79fa      	ldrb	r2, [r7, #7]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d128      	bne.n	8002d28 <SysTick_Handler+0x8c>
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <SysTick_Handler+0xbc>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	79fa      	ldrb	r2, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d022      	beq.n	8002d28 <SysTick_Handler+0x8c>
            btnStates[i] = reading;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	491c      	ldr	r1, [pc, #112]	; (8002d58 <SysTick_Handler+0xbc>)
 8002ce6:	79fa      	ldrb	r2, [r7, #7]
 8002ce8:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <SysTick_Handler+0xbc>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d119      	bne.n	8002d28 <SysTick_Handler+0x8c>
                if (i == BUTTON_MENU) {
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d10e      	bne.n	8002d18 <SysTick_Handler+0x7c>
                    isMenuActive = !isMenuActive;
 8002cfa:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <SysTick_Handler+0xc0>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf14      	ite	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	2300      	moveq	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f083 0301 	eor.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <SysTick_Handler+0xc0>)
 8002d16:	701a      	strb	r2, [r3, #0]
                }
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <SysTick_Handler+0xc4>)
 8002d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d20:	4619      	mov	r1, r3
 8002d22:	4810      	ldr	r0, [pc, #64]	; (8002d64 <SysTick_Handler+0xc8>)
 8002d24:	f001 f8fb 	bl	8003f1e <HAL_GPIO_TogglePin>
            }
        }

        btnStatesLast[i] = reading;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	490a      	ldr	r1, [pc, #40]	; (8002d54 <SysTick_Handler+0xb8>)
 8002d2c:	79fa      	ldrb	r2, [r7, #7]
 8002d2e:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	3301      	adds	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d9b5      	bls.n	8002ca8 <SysTick_Handler+0xc>
    }
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002d3c:	f000 f9f2 	bl	8003124 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	20000038 	.word	0x20000038
 8002d54:	20000030 	.word	0x20000030
 8002d58:	20000028 	.word	0x20000028
 8002d5c:	20002624 	.word	0x20002624
 8002d60:	20000044 	.word	0x20000044
 8002d64:	40020400 	.word	0x40020400

08002d68 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <OTG_FS_IRQHandler+0x10>)
 8002d6e:	f002 f81c 	bl	8004daa <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200030c8 	.word	0x200030c8

08002d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
	return 1;
 8002d80:	2301      	movs	r3, #1
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_kill>:

int _kill(int pid, int sig)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d96:	f00d fb67 	bl	8010468 <__errno>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2216      	movs	r2, #22
 8002d9e:	601a      	str	r2, [r3, #0]
	return -1;
 8002da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_exit>:

void _exit (int status)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ffe7 	bl	8002d8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dbe:	e7fe      	b.n	8002dbe <_exit+0x12>

08002dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e00a      	b.n	8002de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dd2:	f3af 8000 	nop.w
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	60ba      	str	r2, [r7, #8]
 8002dde:	b2ca      	uxtb	r2, r1
 8002de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dbf0      	blt.n	8002dd2 <_read+0x12>
	}

return len;
 8002df0:	687b      	ldr	r3, [r7, #4]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e009      	b.n	8002e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	60ba      	str	r2, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbf1      	blt.n	8002e0c <_write+0x12>
	}
	return len;
 8002e28:	687b      	ldr	r3, [r7, #4]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_close>:

int _close(int file)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
	return -1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <_isatty>:

int _isatty(int file)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	return 1;
 8002e72:	2301      	movs	r3, #1
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <_sbrk+0x5c>)
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <_sbrk+0x60>)
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eb0:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <_sbrk+0x64>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <_sbrk+0x64>)
 8002eba:	4a12      	ldr	r2, [pc, #72]	; (8002f04 <_sbrk+0x68>)
 8002ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <_sbrk+0x64>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d207      	bcs.n	8002edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ecc:	f00d facc 	bl	8010468 <__errno>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eda:	e009      	b.n	8002ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <_sbrk+0x64>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ee2:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <_sbrk+0x64>)
 8002eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eee:	68fb      	ldr	r3, [r7, #12]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20020000 	.word	0x20020000
 8002efc:	00000400 	.word	0x00000400
 8002f00:	20000768 	.word	0x20000768
 8002f04:	200034e0 	.word	0x200034e0

08002f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <SystemInit+0x20>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	4a05      	ldr	r2, [pc, #20]	; (8002f28 <SystemInit+0x20>)
 8002f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	2302      	movs	r3, #2
 8002f44:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002f46:	4b34      	ldr	r3, [pc, #208]	; (8003018 <SystemCoreClockUpdate+0xec>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d011      	beq.n	8002f7a <SystemCoreClockUpdate+0x4e>
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d844      	bhi.n	8002fe6 <SystemCoreClockUpdate+0xba>
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <SystemCoreClockUpdate+0x3e>
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d004      	beq.n	8002f72 <SystemCoreClockUpdate+0x46>
 8002f68:	e03d      	b.n	8002fe6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002f6a:	4b2c      	ldr	r3, [pc, #176]	; (800301c <SystemCoreClockUpdate+0xf0>)
 8002f6c:	4a2c      	ldr	r2, [pc, #176]	; (8003020 <SystemCoreClockUpdate+0xf4>)
 8002f6e:	601a      	str	r2, [r3, #0]
      break;
 8002f70:	e03d      	b.n	8002fee <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <SystemCoreClockUpdate+0xf0>)
 8002f74:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <SystemCoreClockUpdate+0xf8>)
 8002f76:	601a      	str	r2, [r3, #0]
      break;
 8002f78:	e039      	b.n	8002fee <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <SystemCoreClockUpdate+0xec>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	0d9b      	lsrs	r3, r3, #22
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <SystemCoreClockUpdate+0xec>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f8e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00c      	beq.n	8002fb0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f96:	4a23      	ldr	r2, [pc, #140]	; (8003024 <SystemCoreClockUpdate+0xf8>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <SystemCoreClockUpdate+0xec>)
 8002fa0:	6852      	ldr	r2, [r2, #4]
 8002fa2:	0992      	lsrs	r2, r2, #6
 8002fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e00b      	b.n	8002fc8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002fb0:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <SystemCoreClockUpdate+0xf4>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	4a17      	ldr	r2, [pc, #92]	; (8003018 <SystemCoreClockUpdate+0xec>)
 8002fba:	6852      	ldr	r2, [r2, #4]
 8002fbc:	0992      	lsrs	r2, r2, #6
 8002fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <SystemCoreClockUpdate+0xec>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	4a0e      	ldr	r2, [pc, #56]	; (800301c <SystemCoreClockUpdate+0xf0>)
 8002fe2:	6013      	str	r3, [r2, #0]
      break;
 8002fe4:	e003      	b.n	8002fee <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	; (800301c <SystemCoreClockUpdate+0xf0>)
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <SystemCoreClockUpdate+0xf4>)
 8002fea:	601a      	str	r2, [r3, #0]
      break;
 8002fec:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <SystemCoreClockUpdate+0xec>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <SystemCoreClockUpdate+0xfc>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <SystemCoreClockUpdate+0xf0>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <SystemCoreClockUpdate+0xf0>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40023800 	.word	0x40023800
 800301c:	20000050 	.word	0x20000050
 8003020:	00f42400 	.word	0x00f42400
 8003024:	017d7840 	.word	0x017d7840
 8003028:	080156a4 	.word	0x080156a4

0800302c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800302c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003064 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003030:	480d      	ldr	r0, [pc, #52]	; (8003068 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003032:	490e      	ldr	r1, [pc, #56]	; (800306c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003034:	4a0e      	ldr	r2, [pc, #56]	; (8003070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003038:	e002      	b.n	8003040 <LoopCopyDataInit>

0800303a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800303c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303e:	3304      	adds	r3, #4

08003040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003044:	d3f9      	bcc.n	800303a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003046:	4a0b      	ldr	r2, [pc, #44]	; (8003074 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003048:	4c0b      	ldr	r4, [pc, #44]	; (8003078 <LoopFillZerobss+0x26>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800304c:	e001      	b.n	8003052 <LoopFillZerobss>

0800304e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003050:	3204      	adds	r2, #4

08003052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003054:	d3fb      	bcc.n	800304e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003056:	f7ff ff57 	bl	8002f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305a:	f00d fa0b 	bl	8010474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800305e:	f7fe f82b 	bl	80010b8 <main>
  bx  lr    
 8003062:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800306c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8003070:	08015f5c 	.word	0x08015f5c
  ldr r2, =_sbss
 8003074:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8003078:	200034e0 	.word	0x200034e0

0800307c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800307c:	e7fe      	b.n	800307c <ADC_IRQHandler>
	...

08003080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003084:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <HAL_Init+0x40>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800308e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_Init+0x40>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_Init+0x40>)
 8003096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_Init+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_Init+0x40>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a8:	2003      	movs	r0, #3
 80030aa:	f000 fd41 	bl	8003b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f000 f808 	bl	80030c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b4:	f7ff fc9a 	bl	80029ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00

080030c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_InitTick+0x54>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_InitTick+0x58>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030da:	fbb3 f3f1 	udiv	r3, r3, r1
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fd59 	bl	8003b9a <HAL_SYSTICK_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00e      	b.n	8003110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d80a      	bhi.n	800310e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f8:	2200      	movs	r2, #0
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f000 fd21 	bl	8003b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_InitTick+0x5c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000050 	.word	0x20000050
 800311c:	20000058 	.word	0x20000058
 8003120:	20000054 	.word	0x20000054

08003124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_IncTick+0x20>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_IncTick+0x24>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4413      	add	r3, r2
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_IncTick+0x24>)
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000058 	.word	0x20000058
 8003148:	20002788 	.word	0x20002788

0800314c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return uwTick;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_GetTick+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20002788 	.word	0x20002788

08003164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7ff ffee 	bl	800314c <HAL_GetTick>
 8003170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d005      	beq.n	800318a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_Delay+0x44>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800318a:	bf00      	nop
 800318c:	f7ff ffde 	bl	800314c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	429a      	cmp	r2, r3
 800319a:	d8f7      	bhi.n	800318c <HAL_Delay+0x28>
  {
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000058 	.word	0x20000058

080031ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e033      	b.n	800322a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fc36 	bl	8002a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d118      	bne.n	800321c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031f2:	f023 0302 	bic.w	r3, r3, #2
 80031f6:	f043 0202 	orr.w	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 faca 	bl	8003798 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f023 0303 	bic.w	r3, r3, #3
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
 800321a:	e001      	b.n	8003220 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_ADC_Start+0x1a>
 800324a:	2302      	movs	r3, #2
 800324c:	e097      	b.n	800337e <HAL_ADC_Start+0x14a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d018      	beq.n	8003296 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003274:	4b45      	ldr	r3, [pc, #276]	; (800338c <HAL_ADC_Start+0x158>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a45      	ldr	r2, [pc, #276]	; (8003390 <HAL_ADC_Start+0x15c>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0c9a      	lsrs	r2, r3, #18
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003288:	e002      	b.n	8003290 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3b01      	subs	r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f9      	bne.n	800328a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d15f      	bne.n	8003364 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d106      	bne.n	80032f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f023 0206 	bic.w	r2, r3, #6
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	645a      	str	r2, [r3, #68]	; 0x44
 80032f0:	e002      	b.n	80032f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_ADC_Start+0x160>)
 8003302:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800330c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d129      	bne.n	800337c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	e020      	b.n	800337c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a16      	ldr	r2, [pc, #88]	; (8003398 <HAL_ADC_Start+0x164>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d11b      	bne.n	800337c <HAL_ADC_Start+0x148>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d114      	bne.n	800337c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	e00b      	b.n	800337c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0210 	orr.w	r2, r3, #16
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000050 	.word	0x20000050
 8003390:	431bde83 	.word	0x431bde83
 8003394:	40012300 	.word	0x40012300
 8003398:	40012000 	.word	0x40012000

0800339c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_Stop+0x16>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e021      	b.n	80033f6 <HAL_ADC_Stop+0x5a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341e:	d113      	bne.n	8003448 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800342a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342e:	d10b      	bne.n	8003448 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e063      	b.n	8003510 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003448:	f7ff fe80 	bl	800314c <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800344e:	e021      	b.n	8003494 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d01d      	beq.n	8003494 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_ADC_PollForConversion+0x6c>
 800345e:	f7ff fe75 	bl	800314c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d212      	bcs.n	8003494 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b02      	cmp	r3, #2
 800347a:	d00b      	beq.n	8003494 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e03d      	b.n	8003510 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d1d6      	bne.n	8003450 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f06f 0212 	mvn.w	r2, #18
 80034aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d123      	bne.n	800350e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11f      	bne.n	800350e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d006      	beq.n	80034ea <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d111      	bne.n	800350e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x1c>
 800354c:	2302      	movs	r3, #2
 800354e:	e113      	b.n	8003778 <HAL_ADC_ConfigChannel+0x244>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b09      	cmp	r3, #9
 800355e:	d925      	bls.n	80035ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68d9      	ldr	r1, [r3, #12]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	3b1e      	subs	r3, #30
 8003576:	2207      	movs	r2, #7
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43da      	mvns	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	400a      	ands	r2, r1
 8003584:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68d9      	ldr	r1, [r3, #12]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	4618      	mov	r0, r3
 8003598:	4603      	mov	r3, r0
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4403      	add	r3, r0
 800359e:	3b1e      	subs	r3, #30
 80035a0:	409a      	lsls	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	e022      	b.n	80035f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6919      	ldr	r1, [r3, #16]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	2207      	movs	r2, #7
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	400a      	ands	r2, r1
 80035ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6919      	ldr	r1, [r3, #16]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4618      	mov	r0, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4403      	add	r3, r0
 80035e8:	409a      	lsls	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d824      	bhi.n	8003644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	3b05      	subs	r3, #5
 800360c:	221f      	movs	r2, #31
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	400a      	ands	r2, r1
 800361a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	3b05      	subs	r3, #5
 8003636:	fa00 f203 	lsl.w	r2, r0, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	635a      	str	r2, [r3, #52]	; 0x34
 8003642:	e04c      	b.n	80036de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b0c      	cmp	r3, #12
 800364a:	d824      	bhi.n	8003696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	3b23      	subs	r3, #35	; 0x23
 800365e:	221f      	movs	r2, #31
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43da      	mvns	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	400a      	ands	r2, r1
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	4618      	mov	r0, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	3b23      	subs	r3, #35	; 0x23
 8003688:	fa00 f203 	lsl.w	r2, r0, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
 8003694:	e023      	b.n	80036de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	3b41      	subs	r3, #65	; 0x41
 80036a8:	221f      	movs	r2, #31
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	400a      	ands	r2, r1
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	4618      	mov	r0, r3
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	3b41      	subs	r3, #65	; 0x41
 80036d2:	fa00 f203 	lsl.w	r2, r0, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <HAL_ADC_ConfigChannel+0x250>)
 80036e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a28      	ldr	r2, [pc, #160]	; (8003788 <HAL_ADC_ConfigChannel+0x254>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10f      	bne.n	800370c <HAL_ADC_ConfigChannel+0x1d8>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b12      	cmp	r3, #18
 80036f2:	d10b      	bne.n	800370c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <HAL_ADC_ConfigChannel+0x254>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d12b      	bne.n	800376e <HAL_ADC_ConfigChannel+0x23a>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_ADC_ConfigChannel+0x258>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <HAL_ADC_ConfigChannel+0x1f4>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b11      	cmp	r3, #17
 8003726:	d122      	bne.n	800376e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a11      	ldr	r2, [pc, #68]	; (800378c <HAL_ADC_ConfigChannel+0x258>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d111      	bne.n	800376e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_ADC_ConfigChannel+0x25c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a11      	ldr	r2, [pc, #68]	; (8003794 <HAL_ADC_ConfigChannel+0x260>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	0c9a      	lsrs	r2, r3, #18
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003760:	e002      	b.n	8003768 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3b01      	subs	r3, #1
 8003766:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f9      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40012300 	.word	0x40012300
 8003788:	40012000 	.word	0x40012000
 800378c:	10000012 	.word	0x10000012
 8003790:	20000050 	.word	0x20000050
 8003794:	431bde83 	.word	0x431bde83

08003798 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037a0:	4b79      	ldr	r3, [pc, #484]	; (8003988 <ADC_Init+0x1f0>)
 80037a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	021a      	lsls	r2, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6899      	ldr	r1, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	4a58      	ldr	r2, [pc, #352]	; (800398c <ADC_Init+0x1f4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800383e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6899      	ldr	r1, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6899      	ldr	r1, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	e00f      	b.n	8003896 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003894:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0202 	bic.w	r2, r2, #2
 80038a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6899      	ldr	r1, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	7e1b      	ldrb	r3, [r3, #24]
 80038b0:	005a      	lsls	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01b      	beq.n	80038fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	3b01      	subs	r3, #1
 80038f0:	035a      	lsls	r2, r3, #13
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	e007      	b.n	800390c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800390a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	3b01      	subs	r3, #1
 8003928:	051a      	lsls	r2, r3, #20
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6899      	ldr	r1, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800394e:	025a      	lsls	r2, r3, #9
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6899      	ldr	r1, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	029a      	lsls	r2, r3, #10
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40012300 	.word	0x40012300
 800398c:	0f000001 	.word	0x0f000001

08003990 <__NVIC_SetPriorityGrouping>:
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ac:	4013      	ands	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60d3      	str	r3, [r2, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_GetPriorityGrouping>:
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <__NVIC_GetPriorityGrouping+0x18>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0307 	and.w	r3, r3, #7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_EnableIRQ>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db0b      	blt.n	8003a1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4907      	ldr	r1, [pc, #28]	; (8003a2c <__NVIC_EnableIRQ+0x38>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000e100 	.word	0xe000e100

08003a30 <__NVIC_SetPriority>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	6039      	str	r1, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db0a      	blt.n	8003a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	490c      	ldr	r1, [pc, #48]	; (8003a7c <__NVIC_SetPriority+0x4c>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a58:	e00a      	b.n	8003a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4908      	ldr	r1, [pc, #32]	; (8003a80 <__NVIC_SetPriority+0x50>)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3b04      	subs	r3, #4
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	761a      	strb	r2, [r3, #24]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <NVIC_EncodePriority>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f1c3 0307 	rsb	r3, r3, #7
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	bf28      	it	cs
 8003aa2:	2304      	movcs	r3, #4
 8003aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d902      	bls.n	8003ab4 <NVIC_EncodePriority+0x30>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3b03      	subs	r3, #3
 8003ab2:	e000      	b.n	8003ab6 <NVIC_EncodePriority+0x32>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003acc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003adc:	4313      	orrs	r3, r2
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <SysTick_Config>:
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003afc:	d301      	bcc.n	8003b02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00f      	b.n	8003b22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b02:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <SysTick_Config+0x40>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b0a:	210f      	movs	r1, #15
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	f7ff ff8e 	bl	8003a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <SysTick_Config+0x40>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <SysTick_Config+0x40>)
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	e000e010 	.word	0xe000e010

08003b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ff29 	bl	8003990 <__NVIC_SetPriorityGrouping>
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	607a      	str	r2, [r7, #4]
 8003b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b58:	f7ff ff3e 	bl	80039d8 <__NVIC_GetPriorityGrouping>
 8003b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	6978      	ldr	r0, [r7, #20]
 8003b64:	f7ff ff8e 	bl	8003a84 <NVIC_EncodePriority>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff5d 	bl	8003a30 <__NVIC_SetPriority>
}
 8003b76:	bf00      	nop
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	4603      	mov	r3, r0
 8003b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff31 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff ffa2 	bl	8003aec <SysTick_Config>
 8003ba8:	4603      	mov	r3, r0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e159      	b.n	8003e84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	f040 8148 	bne.w	8003e7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d005      	beq.n	8003c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d130      	bne.n	8003c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	2203      	movs	r2, #3
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 0201 	and.w	r2, r3, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d017      	beq.n	8003ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d123      	bne.n	8003cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	08da      	lsrs	r2, r3, #3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3208      	adds	r2, #8
 8003cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	220f      	movs	r2, #15
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	08da      	lsrs	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3208      	adds	r2, #8
 8003cf2:	69b9      	ldr	r1, [r7, #24]
 8003cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	2203      	movs	r2, #3
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0203 	and.w	r2, r3, #3
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80a2 	beq.w	8003e7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b57      	ldr	r3, [pc, #348]	; (8003e9c <HAL_GPIO_Init+0x2e8>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	4a56      	ldr	r2, [pc, #344]	; (8003e9c <HAL_GPIO_Init+0x2e8>)
 8003d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d48:	6453      	str	r3, [r2, #68]	; 0x44
 8003d4a:	4b54      	ldr	r3, [pc, #336]	; (8003e9c <HAL_GPIO_Init+0x2e8>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d56:	4a52      	ldr	r2, [pc, #328]	; (8003ea0 <HAL_GPIO_Init+0x2ec>)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	089b      	lsrs	r3, r3, #2
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	220f      	movs	r2, #15
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a49      	ldr	r2, [pc, #292]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d019      	beq.n	8003db6 <HAL_GPIO_Init+0x202>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a48      	ldr	r2, [pc, #288]	; (8003ea8 <HAL_GPIO_Init+0x2f4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0x1fe>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a47      	ldr	r2, [pc, #284]	; (8003eac <HAL_GPIO_Init+0x2f8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00d      	beq.n	8003dae <HAL_GPIO_Init+0x1fa>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a46      	ldr	r2, [pc, #280]	; (8003eb0 <HAL_GPIO_Init+0x2fc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <HAL_GPIO_Init+0x1f6>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a45      	ldr	r2, [pc, #276]	; (8003eb4 <HAL_GPIO_Init+0x300>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_GPIO_Init+0x1f2>
 8003da2:	2304      	movs	r3, #4
 8003da4:	e008      	b.n	8003db8 <HAL_GPIO_Init+0x204>
 8003da6:	2307      	movs	r3, #7
 8003da8:	e006      	b.n	8003db8 <HAL_GPIO_Init+0x204>
 8003daa:	2303      	movs	r3, #3
 8003dac:	e004      	b.n	8003db8 <HAL_GPIO_Init+0x204>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e002      	b.n	8003db8 <HAL_GPIO_Init+0x204>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_GPIO_Init+0x204>
 8003db6:	2300      	movs	r3, #0
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	f002 0203 	and.w	r2, r2, #3
 8003dbe:	0092      	lsls	r2, r2, #2
 8003dc0:	4093      	lsls	r3, r2
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dc8:	4935      	ldr	r1, [pc, #212]	; (8003ea0 <HAL_GPIO_Init+0x2ec>)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	089b      	lsrs	r3, r3, #2
 8003dce:	3302      	adds	r3, #2
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dd6:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <HAL_GPIO_Init+0x304>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dfa:	4a2f      	ldr	r2, [pc, #188]	; (8003eb8 <HAL_GPIO_Init+0x304>)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e00:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <HAL_GPIO_Init+0x304>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e24:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <HAL_GPIO_Init+0x304>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e2a:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <HAL_GPIO_Init+0x304>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <HAL_GPIO_Init+0x304>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e54:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <HAL_GPIO_Init+0x304>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e78:	4a0f      	ldr	r2, [pc, #60]	; (8003eb8 <HAL_GPIO_Init+0x304>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3301      	adds	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b0f      	cmp	r3, #15
 8003e88:	f67f aea2 	bls.w	8003bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	3724      	adds	r7, #36	; 0x24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40013800 	.word	0x40013800
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	40020800 	.word	0x40020800
 8003eb0:	40020c00 	.word	0x40020c00
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40013c00 	.word	0x40013c00

08003ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	887b      	ldrh	r3, [r7, #2]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
 8003ed8:	e001      	b.n	8003ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	807b      	strh	r3, [r7, #2]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003efc:	787b      	ldrb	r3, [r7, #1]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f08:	e003      	b.n	8003f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f0a:	887b      	ldrh	r3, [r7, #2]
 8003f0c:	041a      	lsls	r2, r3, #16
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	619a      	str	r2, [r3, #24]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f30:	887a      	ldrh	r2, [r7, #2]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4013      	ands	r3, r2
 8003f36:	041a      	lsls	r2, r3, #16
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	43d9      	mvns	r1, r3
 8003f3c:	887b      	ldrh	r3, [r7, #2]
 8003f3e:	400b      	ands	r3, r1
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	619a      	str	r2, [r3, #24]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e12b      	b.n	80041be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe fda2 	bl	8002ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2224      	movs	r2, #36	; 0x24
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fb8:	f002 fb4a 	bl	8006650 <HAL_RCC_GetPCLK1Freq>
 8003fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4a81      	ldr	r2, [pc, #516]	; (80041c8 <HAL_I2C_Init+0x274>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d807      	bhi.n	8003fd8 <HAL_I2C_Init+0x84>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a80      	ldr	r2, [pc, #512]	; (80041cc <HAL_I2C_Init+0x278>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bf94      	ite	ls
 8003fd0:	2301      	movls	r3, #1
 8003fd2:	2300      	movhi	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e006      	b.n	8003fe6 <HAL_I2C_Init+0x92>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a7d      	ldr	r2, [pc, #500]	; (80041d0 <HAL_I2C_Init+0x27c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	bf94      	ite	ls
 8003fe0:	2301      	movls	r3, #1
 8003fe2:	2300      	movhi	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e0e7      	b.n	80041be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a78      	ldr	r2, [pc, #480]	; (80041d4 <HAL_I2C_Init+0x280>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	0c9b      	lsrs	r3, r3, #18
 8003ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a6a      	ldr	r2, [pc, #424]	; (80041c8 <HAL_I2C_Init+0x274>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d802      	bhi.n	8004028 <HAL_I2C_Init+0xd4>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	3301      	adds	r3, #1
 8004026:	e009      	b.n	800403c <HAL_I2C_Init+0xe8>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	4a69      	ldr	r2, [pc, #420]	; (80041d8 <HAL_I2C_Init+0x284>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	099b      	lsrs	r3, r3, #6
 800403a:	3301      	adds	r3, #1
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	430b      	orrs	r3, r1
 8004042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800404e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	495c      	ldr	r1, [pc, #368]	; (80041c8 <HAL_I2C_Init+0x274>)
 8004058:	428b      	cmp	r3, r1
 800405a:	d819      	bhi.n	8004090 <HAL_I2C_Init+0x13c>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1e59      	subs	r1, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	fbb1 f3f3 	udiv	r3, r1, r3
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004070:	400b      	ands	r3, r1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_I2C_Init+0x138>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1e59      	subs	r1, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	fbb1 f3f3 	udiv	r3, r1, r3
 8004084:	3301      	adds	r3, #1
 8004086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408a:	e051      	b.n	8004130 <HAL_I2C_Init+0x1dc>
 800408c:	2304      	movs	r3, #4
 800408e:	e04f      	b.n	8004130 <HAL_I2C_Init+0x1dc>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d111      	bne.n	80040bc <HAL_I2C_Init+0x168>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1e58      	subs	r0, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6859      	ldr	r1, [r3, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	440b      	add	r3, r1
 80040a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	e012      	b.n	80040e2 <HAL_I2C_Init+0x18e>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1e58      	subs	r0, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	0099      	lsls	r1, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_I2C_Init+0x196>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e022      	b.n	8004130 <HAL_I2C_Init+0x1dc>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10e      	bne.n	8004110 <HAL_I2C_Init+0x1bc>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1e58      	subs	r0, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6859      	ldr	r1, [r3, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	440b      	add	r3, r1
 8004100:	fbb0 f3f3 	udiv	r3, r0, r3
 8004104:	3301      	adds	r3, #1
 8004106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800410e:	e00f      	b.n	8004130 <HAL_I2C_Init+0x1dc>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1e58      	subs	r0, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	0099      	lsls	r1, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	fbb0 f3f3 	udiv	r3, r0, r3
 8004126:	3301      	adds	r3, #1
 8004128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	6809      	ldr	r1, [r1, #0]
 8004134:	4313      	orrs	r3, r2
 8004136:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800415e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6911      	ldr	r1, [r2, #16]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68d2      	ldr	r2, [r2, #12]
 800416a:	4311      	orrs	r1, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	430b      	orrs	r3, r1
 8004172:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	000186a0 	.word	0x000186a0
 80041cc:	001e847f 	.word	0x001e847f
 80041d0:	003d08ff 	.word	0x003d08ff
 80041d4:	431bde83 	.word	0x431bde83
 80041d8:	10624dd3 	.word	0x10624dd3

080041dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	461a      	mov	r2, r3
 80041e8:	460b      	mov	r3, r1
 80041ea:	817b      	strh	r3, [r7, #10]
 80041ec:	4613      	mov	r3, r2
 80041ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7fe ffac 	bl	800314c <HAL_GetTick>
 80041f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	f040 80e0 	bne.w	80043c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2319      	movs	r3, #25
 800420a:	2201      	movs	r2, #1
 800420c:	4970      	ldr	r1, [pc, #448]	; (80043d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 faf4 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
 800421c:	e0d3      	b.n	80043c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_I2C_Master_Transmit+0x50>
 8004228:	2302      	movs	r3, #2
 800422a:	e0cc      	b.n	80043c6 <HAL_I2C_Master_Transmit+0x1ea>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	d007      	beq.n	8004252 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004260:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2221      	movs	r2, #33	; 0x21
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2210      	movs	r2, #16
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	893a      	ldrh	r2, [r7, #8]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a50      	ldr	r2, [pc, #320]	; (80043d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004292:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004294:	8979      	ldrh	r1, [r7, #10]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f996 	bl	80045cc <I2C_MasterRequestWrite>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e08d      	b.n	80043c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042c0:	e066      	b.n	8004390 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	6a39      	ldr	r1, [r7, #32]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fb6e 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d107      	bne.n	80042ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e06b      	b.n	80043c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b04      	cmp	r3, #4
 800432a:	d11b      	bne.n	8004364 <HAL_I2C_Master_Transmit+0x188>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	2b00      	cmp	r3, #0
 8004332:	d017      	beq.n	8004364 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	6a39      	ldr	r1, [r7, #32]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fb5e 	bl	8004a2a <I2C_WaitOnBTFFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	2b04      	cmp	r3, #4
 800437a:	d107      	bne.n	800438c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e01a      	b.n	80043c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d194      	bne.n	80042c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e000      	b.n	80043c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	00100002 	.word	0x00100002
 80043d4:	ffff0000 	.word	0xffff0000

080043d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	817b      	strh	r3, [r7, #10]
 80043ea:	460b      	mov	r3, r1
 80043ec:	813b      	strh	r3, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043f2:	f7fe feab 	bl	800314c <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b20      	cmp	r3, #32
 8004402:	f040 80d9 	bne.w	80045b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2319      	movs	r3, #25
 800440c:	2201      	movs	r2, #1
 800440e:	496d      	ldr	r1, [pc, #436]	; (80045c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f9f3 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800441c:	2302      	movs	r3, #2
 800441e:	e0cc      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_I2C_Mem_Write+0x56>
 800442a:	2302      	movs	r3, #2
 800442c:	e0c5      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d007      	beq.n	8004454 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004462:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2221      	movs	r2, #33	; 0x21
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2240      	movs	r2, #64	; 0x40
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a3a      	ldr	r2, [r7, #32]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a4d      	ldr	r2, [pc, #308]	; (80045c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004494:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004496:	88f8      	ldrh	r0, [r7, #6]
 8004498:	893a      	ldrh	r2, [r7, #8]
 800449a:	8979      	ldrh	r1, [r7, #10]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	4603      	mov	r3, r0
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f912 	bl	80046d0 <I2C_RequestMemoryWrite>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d052      	beq.n	8004558 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e081      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fa74 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d107      	bne.n	80044de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e06b      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	781a      	ldrb	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b04      	cmp	r3, #4
 800451e:	d11b      	bne.n	8004558 <HAL_I2C_Mem_Write+0x180>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d017      	beq.n	8004558 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1aa      	bne.n	80044b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fa60 	bl	8004a2a <I2C_WaitOnBTFFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00d      	beq.n	800458c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	2b04      	cmp	r3, #4
 8004576:	d107      	bne.n	8004588 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004586:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e016      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e000      	b.n	80045ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	00100002 	.word	0x00100002
 80045c8:	ffff0000 	.word	0xffff0000

080045cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	460b      	mov	r3, r1
 80045da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d006      	beq.n	80045f6 <I2C_MasterRequestWrite+0x2a>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d003      	beq.n	80045f6 <I2C_MasterRequestWrite+0x2a>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045f4:	d108      	bne.n	8004608 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e00b      	b.n	8004620 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	2b12      	cmp	r3, #18
 800460e:	d107      	bne.n	8004620 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800461e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f8e5 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004646:	d103      	bne.n	8004650 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e035      	b.n	80046c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800465c:	d108      	bne.n	8004670 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800465e:	897b      	ldrh	r3, [r7, #10]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800466c:	611a      	str	r2, [r3, #16]
 800466e:	e01b      	b.n	80046a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004670:	897b      	ldrh	r3, [r7, #10]
 8004672:	11db      	asrs	r3, r3, #7
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0306 	and.w	r3, r3, #6
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f063 030f 	orn	r3, r3, #15
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	490e      	ldr	r1, [pc, #56]	; (80046c8 <I2C_MasterRequestWrite+0xfc>)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f90b 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e010      	b.n	80046c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800469e:	897b      	ldrh	r3, [r7, #10]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4907      	ldr	r1, [pc, #28]	; (80046cc <I2C_MasterRequestWrite+0x100>)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f8fb 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	00010008 	.word	0x00010008
 80046cc:	00010002 	.word	0x00010002

080046d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2200      	movs	r2, #0
 8004702:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f878 	bl	80047fc <I2C_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004720:	d103      	bne.n	800472a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e05f      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800473c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	492d      	ldr	r1, [pc, #180]	; (80047f8 <I2C_RequestMemoryWrite+0x128>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f8b0 	bl	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e04c      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476c:	6a39      	ldr	r1, [r7, #32]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f91a 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b04      	cmp	r3, #4
 8004780:	d107      	bne.n	8004792 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e02b      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	611a      	str	r2, [r3, #16]
 80047a6:	e021      	b.n	80047ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b8:	6a39      	ldr	r1, [r7, #32]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f8f4 	bl	80049a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d107      	bne.n	80047de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e005      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e2:	893b      	ldrh	r3, [r7, #8]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	00010002 	.word	0x00010002

080047fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800480c:	e025      	b.n	800485a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d021      	beq.n	800485a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7fe fc99 	bl	800314c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d116      	bne.n	800485a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e023      	b.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	0c1b      	lsrs	r3, r3, #16
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10d      	bne.n	8004880 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	43da      	mvns	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	e00c      	b.n	800489a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	43da      	mvns	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	429a      	cmp	r2, r3
 800489e:	d0b6      	beq.n	800480e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048b8:	e051      	b.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c8:	d123      	bne.n	8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f043 0204 	orr.w	r2, r3, #4
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e046      	b.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d021      	beq.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491a:	f7fe fc17 	bl	800314c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d116      	bne.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e020      	b.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10c      	bne.n	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	43da      	mvns	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e00b      	b.n	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	43da      	mvns	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d18d      	bne.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b4:	e02d      	b.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f878 	bl	8004aac <I2C_IsAcknowledgeFailed>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e02d      	b.n	8004a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d021      	beq.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fe fbbd 	bl	800314c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e007      	b.n	8004a22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d1ca      	bne.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a36:	e02d      	b.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f837 	bl	8004aac <I2C_IsAcknowledgeFailed>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e02d      	b.n	8004aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d021      	beq.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a50:	f7fe fb7c 	bl	800314c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d302      	bcc.n	8004a66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d116      	bne.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e007      	b.n	8004aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d1ca      	bne.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac2:	d11b      	bne.n	8004afc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004acc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f043 0204 	orr.w	r2, r3, #4
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0c:	b08f      	sub	sp, #60	; 0x3c
 8004b0e:	af0a      	add	r7, sp, #40	; 0x28
 8004b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e10f      	b.n	8004d3c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f00a f904 	bl	800ed44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f003 ff73 	bl	8008a46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	687e      	ldr	r6, [r7, #4]
 8004b68:	466d      	mov	r5, sp
 8004b6a:	f106 0410 	add.w	r4, r6, #16
 8004b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b7e:	1d33      	adds	r3, r6, #4
 8004b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b82:	6838      	ldr	r0, [r7, #0]
 8004b84:	f003 fe4a 	bl	800881c <USB_CoreInit>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0d0      	b.n	8004d3c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f003 ff61 	bl	8008a68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
 8004baa:	e04a      	b.n	8004c42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bac:	7bfa      	ldrb	r2, [r7, #15]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	333d      	adds	r3, #61	; 0x3d
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bc0:	7bfa      	ldrb	r2, [r7, #15]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	333c      	adds	r3, #60	; 0x3c
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bd4:	7bfa      	ldrb	r2, [r7, #15]
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	b298      	uxth	r0, r3
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	3342      	adds	r3, #66	; 0x42
 8004be8:	4602      	mov	r2, r0
 8004bea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bec:	7bfa      	ldrb	r2, [r7, #15]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	333f      	adds	r3, #63	; 0x3f
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c00:	7bfa      	ldrb	r2, [r7, #15]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3344      	adds	r3, #68	; 0x44
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3348      	adds	r3, #72	; 0x48
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	3350      	adds	r3, #80	; 0x50
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d3af      	bcc.n	8004bac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e044      	b.n	8004cdc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c68:	7bfa      	ldrb	r2, [r7, #15]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cc0:	7bfa      	ldrb	r2, [r7, #15]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	7bfa      	ldrb	r2, [r7, #15]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d3b5      	bcc.n	8004c52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	687e      	ldr	r6, [r7, #4]
 8004cee:	466d      	mov	r5, sp
 8004cf0:	f106 0410 	add.w	r4, r6, #16
 8004cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d04:	1d33      	adds	r3, r6, #4
 8004d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d08:	6838      	ldr	r0, [r7, #0]
 8004d0a:	f003 fed7 	bl	8008abc <USB_DevInit>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e00d      	b.n	8004d3c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f004 ff1f 	bl	8009b78 <USB_DevDisconnect>

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_PCD_Start+0x1c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e020      	b.n	8004da2 <HAL_PCD_Start+0x5e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d109      	bne.n	8004d84 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d005      	beq.n	8004d84 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f003 fe4b 	bl	8008a24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f004 fecf 	bl	8009b36 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004daa:	b590      	push	{r4, r7, lr}
 8004dac:	b08d      	sub	sp, #52	; 0x34
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f004 ff8d 	bl	8009ce0 <USB_GetMode>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f040 839d 	bne.w	8005508 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f004 fef1 	bl	8009bba <USB_ReadInterrupts>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8393 	beq.w	8005506 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f004 fee8 	bl	8009bba <USB_ReadInterrupts>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d107      	bne.n	8004e04 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f002 0202 	and.w	r2, r2, #2
 8004e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f004 fed6 	bl	8009bba <USB_ReadInterrupts>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d161      	bne.n	8004edc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0210 	bic.w	r2, r2, #16
 8004e26:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f003 020f 	and.w	r2, r3, #15
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	4413      	add	r3, r2
 8004e44:	3304      	adds	r3, #4
 8004e46:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	0c5b      	lsrs	r3, r3, #17
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d124      	bne.n	8004e9e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d035      	beq.n	8004ecc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6a38      	ldr	r0, [r7, #32]
 8004e74:	f004 fd3c 	bl	80098f0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	091b      	lsrs	r3, r3, #4
 8004e80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e84:	441a      	add	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e96:	441a      	add	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	619a      	str	r2, [r3, #24]
 8004e9c:	e016      	b.n	8004ecc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	0c5b      	lsrs	r3, r3, #17
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d110      	bne.n	8004ecc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6a38      	ldr	r0, [r7, #32]
 8004eb6:	f004 fd1b 	bl	80098f0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ec6:	441a      	add	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0210 	orr.w	r2, r2, #16
 8004eda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f004 fe6a 	bl	8009bba <USB_ReadInterrupts>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ef0:	d16e      	bne.n	8004fd0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f004 fe70 	bl	8009be0 <USB_ReadDevAllOutEpInterrupt>
 8004f00:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f02:	e062      	b.n	8004fca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d057      	beq.n	8004fbe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f004 fe95 	bl	8009c48 <USB_ReadDevOutEPInterrupt>
 8004f1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f36:	461a      	mov	r2, r3
 8004f38:	2301      	movs	r3, #1
 8004f3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fdb0 	bl	8005aa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 feaa 	bl	8005cbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d008      	beq.n	8004f84 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	461a      	mov	r2, r3
 8004f80:	2310      	movs	r3, #16
 8004f82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fbc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d199      	bne.n	8004f04 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f004 fdf0 	bl	8009bba <USB_ReadInterrupts>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fe4:	f040 80c0 	bne.w	8005168 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f004 fe11 	bl	8009c14 <USB_ReadDevAllInEpInterrupt>
 8004ff2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ff8:	e0b2      	b.n	8005160 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80a7 	beq.w	8005154 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f004 fe37 	bl	8009c84 <USB_ReadDevInEPInterrupt>
 8005016:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d057      	beq.n	80050d2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	2201      	movs	r2, #1
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	43db      	mvns	r3, r3
 800503c:	69f9      	ldr	r1, [r7, #28]
 800503e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005042:	4013      	ands	r3, r2
 8005044:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005052:	461a      	mov	r2, r3
 8005054:	2301      	movs	r3, #1
 8005056:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d132      	bne.n	80050c6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3348      	adds	r3, #72	; 0x48
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005076:	4613      	mov	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4403      	add	r3, r0
 8005080:	3344      	adds	r3, #68	; 0x44
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4419      	add	r1, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	4613      	mov	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4403      	add	r3, r0
 8005094:	3348      	adds	r3, #72	; 0x48
 8005096:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	2b00      	cmp	r3, #0
 800509c:	d113      	bne.n	80050c6 <HAL_PCD_IRQHandler+0x31c>
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	3350      	adds	r3, #80	; 0x50
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d108      	bne.n	80050c6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050be:	461a      	mov	r2, r3
 80050c0:	2101      	movs	r1, #1
 80050c2:	f004 fe3f 	bl	8009d44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f009 feba 	bl	800ee46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e8:	461a      	mov	r2, r3
 80050ea:	2308      	movs	r3, #8
 80050ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	461a      	mov	r2, r3
 8005106:	2310      	movs	r3, #16
 8005108:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	461a      	mov	r2, r3
 8005122:	2340      	movs	r3, #64	; 0x40
 8005124:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	461a      	mov	r2, r3
 800513e:	2302      	movs	r3, #2
 8005140:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800514c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fc1b 	bl	800598a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	3301      	adds	r3, #1
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	f47f af49 	bne.w	8004ffa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f004 fd24 	bl	8009bba <USB_ReadInterrupts>
 8005172:	4603      	mov	r3, r0
 8005174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517c:	d122      	bne.n	80051c4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005198:	2b01      	cmp	r3, #1
 800519a:	d108      	bne.n	80051ae <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051a4:	2100      	movs	r1, #0
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fe26 	bl	8005df8 <HAL_PCDEx_LPM_Callback>
 80051ac:	e002      	b.n	80051b4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f009 feb6 	bl	800ef20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f004 fcf6 	bl	8009bba <USB_ReadInterrupts>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d8:	d112      	bne.n	8005200 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d102      	bne.n	80051f0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f009 fe72 	bl	800eed4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80051fe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f004 fcd8 	bl	8009bba <USB_ReadInterrupts>
 800520a:	4603      	mov	r3, r0
 800520c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005214:	f040 80c7 	bne.w	80053a6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2110      	movs	r1, #16
 8005232:	4618      	mov	r0, r3
 8005234:	f003 fda6 	bl	8008d84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005238:	2300      	movs	r3, #0
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800523c:	e056      	b.n	80052ec <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524a:	461a      	mov	r2, r3
 800524c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005250:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005270:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005282:	0151      	lsls	r1, r2, #5
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	440a      	add	r2, r1
 8005288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005290:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	461a      	mov	r2, r3
 80052a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	3301      	adds	r3, #1
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d3a3      	bcc.n	800523e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005304:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005308:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	2b00      	cmp	r3, #0
 8005310:	d016      	beq.n	8005340 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005322:	f043 030b 	orr.w	r3, r3, #11
 8005326:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005338:	f043 030b 	orr.w	r3, r3, #11
 800533c:	6453      	str	r3, [r2, #68]	; 0x44
 800533e:	e015      	b.n	800536c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005352:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005356:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005366:	f043 030b 	orr.w	r3, r3, #11
 800536a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800537e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005390:	461a      	mov	r2, r3
 8005392:	f004 fcd7 	bl	8009d44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f004 fc05 	bl	8009bba <USB_ReadInterrupts>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ba:	d124      	bne.n	8005406 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f004 fc9b 	bl	8009cfc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f003 fd3b 	bl	8008e46 <USB_GetDevSpeed>
 80053d0:	4603      	mov	r3, r0
 80053d2:	461a      	mov	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681c      	ldr	r4, [r3, #0]
 80053dc:	f001 f92c 	bl	8006638 <HAL_RCC_GetHCLKFreq>
 80053e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	4620      	mov	r0, r4
 80053ec:	f003 fa78 	bl	80088e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f009 fd50 	bl	800ee96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005404:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f004 fbd5 	bl	8009bba <USB_ReadInterrupts>
 8005410:	4603      	mov	r3, r0
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b08      	cmp	r3, #8
 8005418:	d10a      	bne.n	8005430 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f009 fd2d 	bl	800ee7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f002 0208 	and.w	r2, r2, #8
 800542e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f004 fbc0 	bl	8009bba <USB_ReadInterrupts>
 800543a:	4603      	mov	r3, r0
 800543c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005444:	d10f      	bne.n	8005466 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	b2db      	uxtb	r3, r3
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f009 fd85 	bl	800ef60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f004 fba5 	bl	8009bba <USB_ReadInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800547a:	d10f      	bne.n	800549c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	b2db      	uxtb	r3, r3
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f009 fd58 	bl	800ef3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800549a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 fb8a 	bl	8009bba <USB_ReadInterrupts>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d10a      	bne.n	80054c8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f009 fd66 	bl	800ef84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f004 fb74 	bl	8009bba <USB_ReadInterrupts>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d115      	bne.n	8005508 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f009 fd56 	bl	800efa0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6859      	ldr	r1, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
 8005504:	e000      	b.n	8005508 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005506:	bf00      	nop
    }
  }
}
 8005508:	3734      	adds	r7, #52	; 0x34
 800550a:	46bd      	mov	sp, r7
 800550c:	bd90      	pop	{r4, r7, pc}

0800550e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_PCD_SetAddress+0x1a>
 8005524:	2302      	movs	r3, #2
 8005526:	e013      	b.n	8005550 <HAL_PCD_SetAddress+0x42>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	4611      	mov	r1, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f004 fad2 	bl	8009aea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	4608      	mov	r0, r1
 8005562:	4611      	mov	r1, r2
 8005564:	461a      	mov	r2, r3
 8005566:	4603      	mov	r3, r0
 8005568:	70fb      	strb	r3, [r7, #3]
 800556a:	460b      	mov	r3, r1
 800556c:	803b      	strh	r3, [r7, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800557a:	2b00      	cmp	r3, #0
 800557c:	da0f      	bge.n	800559e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	f003 020f 	and.w	r2, r3, #15
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	3338      	adds	r3, #56	; 0x38
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	3304      	adds	r3, #4
 8005594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	705a      	strb	r2, [r3, #1]
 800559c:	e00f      	b.n	80055be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	f003 020f 	and.w	r2, r3, #15
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	3304      	adds	r3, #4
 80055b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055ca:	883a      	ldrh	r2, [r7, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	78ba      	ldrb	r2, [r7, #2]
 80055d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055e8:	78bb      	ldrb	r3, [r7, #2]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d102      	bne.n	80055f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_PCD_EP_Open+0xaa>
 80055fe:	2302      	movs	r3, #2
 8005600:	e00e      	b.n	8005620 <HAL_PCD_EP_Open+0xc8>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	4618      	mov	r0, r3
 8005612:	f003 fc3d 	bl	8008e90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800561e:	7afb      	ldrb	r3, [r7, #11]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005638:	2b00      	cmp	r3, #0
 800563a:	da0f      	bge.n	800565c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	3338      	adds	r3, #56	; 0x38
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	4413      	add	r3, r2
 8005650:	3304      	adds	r3, #4
 8005652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	705a      	strb	r2, [r3, #1]
 800565a:	e00f      	b.n	800567c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f003 020f 	and.w	r2, r3, #15
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4413      	add	r3, r2
 8005672:	3304      	adds	r3, #4
 8005674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_PCD_EP_Close+0x6e>
 8005692:	2302      	movs	r3, #2
 8005694:	e00e      	b.n	80056b4 <HAL_PCD_EP_Close+0x8c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f003 fc7b 	bl	8008fa0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	460b      	mov	r3, r1
 80056ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	f003 020f 	and.w	r2, r3, #15
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	3304      	adds	r3, #4
 80056e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2200      	movs	r2, #0
 80056fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056fe:	7afb      	ldrb	r3, [r7, #11]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	b2da      	uxtb	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d102      	bne.n	8005718 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005718:	7afb      	ldrb	r3, [r7, #11]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	f003 ff56 	bl	80095e0 <USB_EP0StartXfer>
 8005734:	e008      	b.n	8005748 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	6979      	ldr	r1, [r7, #20]
 8005744:	f003 fd08 	bl	8009158 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	f003 020f 	and.w	r2, r3, #15
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005774:	681b      	ldr	r3, [r3, #0]
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	460b      	mov	r3, r1
 8005790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	f003 020f 	and.w	r2, r3, #15
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	3338      	adds	r3, #56	; 0x38
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2201      	movs	r2, #1
 80057c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057c2:	7afb      	ldrb	r3, [r7, #11]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d102      	bne.n	80057dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	6979      	ldr	r1, [r7, #20]
 80057f4:	f003 fef4 	bl	80095e0 <USB_EP0StartXfer>
 80057f8:	e008      	b.n	800580c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	6979      	ldr	r1, [r7, #20]
 8005808:	f003 fca6 	bl	8009158 <USB_EPStartXfer>
  }

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	f003 020f 	and.w	r2, r3, #15
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d901      	bls.n	8005834 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e050      	b.n	80058d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005838:	2b00      	cmp	r3, #0
 800583a:	da0f      	bge.n	800585c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	3338      	adds	r3, #56	; 0x38
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4413      	add	r3, r2
 8005850:	3304      	adds	r3, #4
 8005852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	705a      	strb	r2, [r3, #1]
 800585a:	e00d      	b.n	8005878 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	3304      	adds	r3, #4
 8005870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_PCD_EP_SetStall+0x82>
 8005894:	2302      	movs	r3, #2
 8005896:	e01e      	b.n	80058d6 <HAL_PCD_EP_SetStall+0xc0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68f9      	ldr	r1, [r7, #12]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f004 f84b 	bl	8009942 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	b2d9      	uxtb	r1, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058c6:	461a      	mov	r2, r3
 80058c8:	f004 fa3c 	bl	8009d44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	460b      	mov	r3, r1
 80058e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	f003 020f 	and.w	r2, r3, #15
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d901      	bls.n	80058fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e042      	b.n	8005982 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005900:	2b00      	cmp	r3, #0
 8005902:	da0f      	bge.n	8005924 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	f003 020f 	and.w	r2, r3, #15
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	3338      	adds	r3, #56	; 0x38
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	4413      	add	r3, r2
 8005918:	3304      	adds	r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	705a      	strb	r2, [r3, #1]
 8005922:	e00f      	b.n	8005944 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 020f 	and.w	r2, r3, #15
 800592a:	4613      	mov	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4413      	add	r3, r2
 800593a:	3304      	adds	r3, #4
 800593c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_PCD_EP_ClrStall+0x86>
 8005960:	2302      	movs	r3, #2
 8005962:	e00e      	b.n	8005982 <HAL_PCD_EP_ClrStall+0xa4>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68f9      	ldr	r1, [r7, #12]
 8005972:	4618      	mov	r0, r3
 8005974:	f004 f853 	bl	8009a1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b08a      	sub	sp, #40	; 0x28
 800598e:	af02      	add	r7, sp, #8
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	3338      	adds	r3, #56	; 0x38
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	3304      	adds	r3, #4
 80059b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d901      	bls.n	80059c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e06c      	b.n	8005a9c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d902      	bls.n	80059de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3303      	adds	r3, #3
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059e6:	e02b      	b.n	8005a40 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d902      	bls.n	8005a04 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	3303      	adds	r3, #3
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68d9      	ldr	r1, [r3, #12]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	4603      	mov	r3, r0
 8005a22:	6978      	ldr	r0, [r7, #20]
 8005a24:	f003 ff2f 	bl	8009886 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	441a      	add	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	441a      	add	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d809      	bhi.n	8005a6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d203      	bcs.n	8005a6a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1be      	bne.n	80059e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d811      	bhi.n	8005a9a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	6939      	ldr	r1, [r7, #16]
 8005a92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a96:	4013      	ands	r3, r2
 8005a98:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	333c      	adds	r3, #60	; 0x3c
 8005abc:	3304      	adds	r3, #4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	f040 80a0 	bne.w	8005c1c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d015      	beq.n	8005b12 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a72      	ldr	r2, [pc, #456]	; (8005cb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	f240 80dd 	bls.w	8005caa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 80d7 	beq.w	8005caa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0e:	6093      	str	r3, [r2, #8]
 8005b10:	e0cb      	b.n	8005caa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d009      	beq.n	8005b30 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2320      	movs	r3, #32
 8005b2c:	6093      	str	r3, [r2, #8]
 8005b2e:	e0bc      	b.n	8005caa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f040 80b7 	bne.w	8005caa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a5d      	ldr	r2, [pc, #372]	; (8005cb4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d90f      	bls.n	8005b64 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b60:	6093      	str	r3, [r2, #8]
 8005b62:	e0a2      	b.n	8005caa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b76:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	0159      	lsls	r1, r3, #5
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	440b      	add	r3, r1
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005b8a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4403      	add	r3, r0
 8005b9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b9e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4403      	add	r3, r0
 8005bc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4419      	add	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4403      	add	r3, r0
 8005bd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005bdc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d114      	bne.n	8005c0e <PCD_EP_OutXfrComplete_int+0x16a>
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d108      	bne.n	8005c0e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c06:	461a      	mov	r2, r3
 8005c08:	2101      	movs	r1, #1
 8005c0a:	f004 f89b 	bl	8009d44 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f009 f8fb 	bl	800ee10 <HAL_PCD_DataOutStageCallback>
 8005c1a:	e046      	b.n	8005caa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4a26      	ldr	r2, [pc, #152]	; (8005cb8 <PCD_EP_OutXfrComplete_int+0x214>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d124      	bne.n	8005c6e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c40:	6093      	str	r3, [r2, #8]
 8005c42:	e032      	b.n	8005caa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	2320      	movs	r3, #32
 8005c5e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f009 f8d2 	bl	800ee10 <HAL_PCD_DataOutStageCallback>
 8005c6c:	e01d      	b.n	8005caa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d114      	bne.n	8005c9e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d108      	bne.n	8005c9e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c96:	461a      	mov	r2, r3
 8005c98:	2100      	movs	r1, #0
 8005c9a:	f004 f853 	bl	8009d44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f009 f8b3 	bl	800ee10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	4f54300a 	.word	0x4f54300a
 8005cb8:	4f54310a 	.word	0x4f54310a

08005cbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	333c      	adds	r3, #60	; 0x3c
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d90e      	bls.n	8005d10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d009      	beq.n	8005d10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f009 f86b 	bl	800edec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d90c      	bls.n	8005d38 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d108      	bne.n	8005d38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d30:	461a      	mov	r2, r3
 8005d32:	2101      	movs	r1, #1
 8005d34:	f004 f806 	bl	8009d44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	4f54300a 	.word	0x4f54300a

08005d48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
 8005d54:	4613      	mov	r3, r2
 8005d56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d66:	883b      	ldrh	r3, [r7, #0]
 8005d68:	0419      	lsls	r1, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28
 8005d74:	e028      	b.n	8005dc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	4413      	add	r3, r2
 8005d82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d84:	2300      	movs	r3, #0
 8005d86:	73fb      	strb	r3, [r7, #15]
 8005d88:	e00d      	b.n	8005da6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	3340      	adds	r3, #64	; 0x40
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	3301      	adds	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
 8005da6:	7bfa      	ldrb	r2, [r7, #15]
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d3ec      	bcc.n	8005d8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005db0:	883b      	ldrh	r3, [r7, #0]
 8005db2:	0418      	lsls	r0, r3, #16
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6819      	ldr	r1, [r3, #0]
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	4302      	orrs	r2, r0
 8005dc0:	3340      	adds	r3, #64	; 0x40
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	887a      	ldrh	r2, [r7, #2]
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e264      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d075      	beq.n	8005f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e2e:	4ba3      	ldr	r3, [pc, #652]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 030c 	and.w	r3, r3, #12
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d00c      	beq.n	8005e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e3a:	4ba0      	ldr	r3, [pc, #640]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d112      	bne.n	8005e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e46:	4b9d      	ldr	r3, [pc, #628]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e52:	d10b      	bne.n	8005e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e54:	4b99      	ldr	r3, [pc, #612]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d05b      	beq.n	8005f18 <HAL_RCC_OscConfig+0x108>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d157      	bne.n	8005f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e23f      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e74:	d106      	bne.n	8005e84 <HAL_RCC_OscConfig+0x74>
 8005e76:	4b91      	ldr	r3, [pc, #580]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a90      	ldr	r2, [pc, #576]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e01d      	b.n	8005ec0 <HAL_RCC_OscConfig+0xb0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e8c:	d10c      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x98>
 8005e8e:	4b8b      	ldr	r3, [pc, #556]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a8a      	ldr	r2, [pc, #552]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	4b88      	ldr	r3, [pc, #544]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a87      	ldr	r2, [pc, #540]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	e00b      	b.n	8005ec0 <HAL_RCC_OscConfig+0xb0>
 8005ea8:	4b84      	ldr	r3, [pc, #528]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a83      	ldr	r2, [pc, #524]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4b81      	ldr	r3, [pc, #516]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a80      	ldr	r2, [pc, #512]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d013      	beq.n	8005ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec8:	f7fd f940 	bl	800314c <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fd f93c 	bl	800314c <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e204      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee2:	4b76      	ldr	r3, [pc, #472]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0xc0>
 8005eee:	e014      	b.n	8005f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef0:	f7fd f92c 	bl	800314c <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef8:	f7fd f928 	bl	800314c <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b64      	cmp	r3, #100	; 0x64
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e1f0      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0a:	4b6c      	ldr	r3, [pc, #432]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0xe8>
 8005f16:	e000      	b.n	8005f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d063      	beq.n	8005fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f26:	4b65      	ldr	r3, [pc, #404]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f32:	4b62      	ldr	r3, [pc, #392]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d11c      	bne.n	8005f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3e:	4b5f      	ldr	r3, [pc, #380]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d116      	bne.n	8005f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f4a:	4b5c      	ldr	r3, [pc, #368]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_RCC_OscConfig+0x152>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d001      	beq.n	8005f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e1c4      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f62:	4b56      	ldr	r3, [pc, #344]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4952      	ldr	r1, [pc, #328]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f76:	e03a      	b.n	8005fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d020      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f80:	4b4f      	ldr	r3, [pc, #316]	; (80060c0 <HAL_RCC_OscConfig+0x2b0>)
 8005f82:	2201      	movs	r2, #1
 8005f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f86:	f7fd f8e1 	bl	800314c <HAL_GetTick>
 8005f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f8e:	f7fd f8dd 	bl	800314c <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e1a5      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa0:	4b46      	ldr	r3, [pc, #280]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f0      	beq.n	8005f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fac:	4b43      	ldr	r3, [pc, #268]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	4940      	ldr	r1, [pc, #256]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	600b      	str	r3, [r1, #0]
 8005fc0:	e015      	b.n	8005fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fc2:	4b3f      	ldr	r3, [pc, #252]	; (80060c0 <HAL_RCC_OscConfig+0x2b0>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc8:	f7fd f8c0 	bl	800314c <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fd0:	f7fd f8bc 	bl	800314c <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e184      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe2:	4b36      	ldr	r3, [pc, #216]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d030      	beq.n	800605c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006002:	4b30      	ldr	r3, [pc, #192]	; (80060c4 <HAL_RCC_OscConfig+0x2b4>)
 8006004:	2201      	movs	r2, #1
 8006006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006008:	f7fd f8a0 	bl	800314c <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006010:	f7fd f89c 	bl	800314c <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e164      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006022:	4b26      	ldr	r3, [pc, #152]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8006024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0f0      	beq.n	8006010 <HAL_RCC_OscConfig+0x200>
 800602e:	e015      	b.n	800605c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006030:	4b24      	ldr	r3, [pc, #144]	; (80060c4 <HAL_RCC_OscConfig+0x2b4>)
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006036:	f7fd f889 	bl	800314c <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800603e:	f7fd f885 	bl	800314c <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e14d      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006050:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8006052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f0      	bne.n	800603e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80a0 	beq.w	80061aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800606e:	4b13      	ldr	r3, [pc, #76]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800607a:	2300      	movs	r3, #0
 800607c:	60bb      	str	r3, [r7, #8]
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	4a0e      	ldr	r2, [pc, #56]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 8006084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006088:	6413      	str	r3, [r2, #64]	; 0x40
 800608a:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <HAL_RCC_OscConfig+0x2ac>)
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006096:	2301      	movs	r3, #1
 8006098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609a:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <HAL_RCC_OscConfig+0x2b8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d121      	bne.n	80060ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060a6:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <HAL_RCC_OscConfig+0x2b8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a07      	ldr	r2, [pc, #28]	; (80060c8 <HAL_RCC_OscConfig+0x2b8>)
 80060ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b2:	f7fd f84b 	bl	800314c <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b8:	e011      	b.n	80060de <HAL_RCC_OscConfig+0x2ce>
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800
 80060c0:	42470000 	.word	0x42470000
 80060c4:	42470e80 	.word	0x42470e80
 80060c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060cc:	f7fd f83e 	bl	800314c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e106      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060de:	4b85      	ldr	r3, [pc, #532]	; (80062f4 <HAL_RCC_OscConfig+0x4e4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d106      	bne.n	8006100 <HAL_RCC_OscConfig+0x2f0>
 80060f2:	4b81      	ldr	r3, [pc, #516]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	4a80      	ldr	r2, [pc, #512]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	6713      	str	r3, [r2, #112]	; 0x70
 80060fe:	e01c      	b.n	800613a <HAL_RCC_OscConfig+0x32a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b05      	cmp	r3, #5
 8006106:	d10c      	bne.n	8006122 <HAL_RCC_OscConfig+0x312>
 8006108:	4b7b      	ldr	r3, [pc, #492]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	4a7a      	ldr	r2, [pc, #488]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 800610e:	f043 0304 	orr.w	r3, r3, #4
 8006112:	6713      	str	r3, [r2, #112]	; 0x70
 8006114:	4b78      	ldr	r3, [pc, #480]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 8006116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006118:	4a77      	ldr	r2, [pc, #476]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	6713      	str	r3, [r2, #112]	; 0x70
 8006120:	e00b      	b.n	800613a <HAL_RCC_OscConfig+0x32a>
 8006122:	4b75      	ldr	r3, [pc, #468]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	4a74      	ldr	r2, [pc, #464]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	6713      	str	r3, [r2, #112]	; 0x70
 800612e:	4b72      	ldr	r3, [pc, #456]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006132:	4a71      	ldr	r2, [pc, #452]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 8006134:	f023 0304 	bic.w	r3, r3, #4
 8006138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d015      	beq.n	800616e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006142:	f7fd f803 	bl	800314c <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006148:	e00a      	b.n	8006160 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800614a:	f7fc ffff 	bl	800314c <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f241 3288 	movw	r2, #5000	; 0x1388
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e0c5      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006160:	4b65      	ldr	r3, [pc, #404]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0ee      	beq.n	800614a <HAL_RCC_OscConfig+0x33a>
 800616c:	e014      	b.n	8006198 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800616e:	f7fc ffed 	bl	800314c <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006174:	e00a      	b.n	800618c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006176:	f7fc ffe9 	bl	800314c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	f241 3288 	movw	r2, #5000	; 0x1388
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e0af      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618c:	4b5a      	ldr	r3, [pc, #360]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 800618e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1ee      	bne.n	8006176 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006198:	7dfb      	ldrb	r3, [r7, #23]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d105      	bne.n	80061aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800619e:	4b56      	ldr	r3, [pc, #344]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	4a55      	ldr	r2, [pc, #340]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 80061a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 809b 	beq.w	80062ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061b4:	4b50      	ldr	r3, [pc, #320]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 030c 	and.w	r3, r3, #12
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d05c      	beq.n	800627a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d141      	bne.n	800624c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c8:	4b4c      	ldr	r3, [pc, #304]	; (80062fc <HAL_RCC_OscConfig+0x4ec>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ce:	f7fc ffbd 	bl	800314c <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061d6:	f7fc ffb9 	bl	800314c <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e081      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e8:	4b43      	ldr	r3, [pc, #268]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f0      	bne.n	80061d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	019b      	lsls	r3, r3, #6
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	3b01      	subs	r3, #1
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	061b      	lsls	r3, r3, #24
 8006218:	4937      	ldr	r1, [pc, #220]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 800621a:	4313      	orrs	r3, r2
 800621c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800621e:	4b37      	ldr	r3, [pc, #220]	; (80062fc <HAL_RCC_OscConfig+0x4ec>)
 8006220:	2201      	movs	r2, #1
 8006222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006224:	f7fc ff92 	bl	800314c <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800622c:	f7fc ff8e 	bl	800314c <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e056      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f0      	beq.n	800622c <HAL_RCC_OscConfig+0x41c>
 800624a:	e04e      	b.n	80062ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624c:	4b2b      	ldr	r3, [pc, #172]	; (80062fc <HAL_RCC_OscConfig+0x4ec>)
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006252:	f7fc ff7b 	bl	800314c <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800625a:	f7fc ff77 	bl	800314c <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e03f      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626c:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1f0      	bne.n	800625a <HAL_RCC_OscConfig+0x44a>
 8006278:	e037      	b.n	80062ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e032      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006286:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <HAL_RCC_OscConfig+0x4e8>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d028      	beq.n	80062e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800629e:	429a      	cmp	r2, r3
 80062a0:	d121      	bne.n	80062e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d11a      	bne.n	80062e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062b6:	4013      	ands	r3, r2
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062be:	4293      	cmp	r3, r2
 80062c0:	d111      	bne.n	80062e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	3b01      	subs	r3, #1
 80062d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d107      	bne.n	80062e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d001      	beq.n	80062ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40007000 	.word	0x40007000
 80062f8:	40023800 	.word	0x40023800
 80062fc:	42470060 	.word	0x42470060

08006300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0cc      	b.n	80064ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006314:	4b68      	ldr	r3, [pc, #416]	; (80064b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	d90c      	bls.n	800633c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006322:	4b65      	ldr	r3, [pc, #404]	; (80064b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800632a:	4b63      	ldr	r3, [pc, #396]	; (80064b8 <HAL_RCC_ClockConfig+0x1b8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0b8      	b.n	80064ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d020      	beq.n	800638a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006354:	4b59      	ldr	r3, [pc, #356]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	4a58      	ldr	r2, [pc, #352]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800635e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800636c:	4b53      	ldr	r3, [pc, #332]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4a52      	ldr	r2, [pc, #328]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006378:	4b50      	ldr	r3, [pc, #320]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	494d      	ldr	r1, [pc, #308]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d044      	beq.n	8006420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d107      	bne.n	80063ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639e:	4b47      	ldr	r3, [pc, #284]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d119      	bne.n	80063de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e07f      	b.n	80064ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d003      	beq.n	80063be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d107      	bne.n	80063ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063be:	4b3f      	ldr	r3, [pc, #252]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e06f      	b.n	80064ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ce:	4b3b      	ldr	r3, [pc, #236]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e067      	b.n	80064ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063de:	4b37      	ldr	r3, [pc, #220]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f023 0203 	bic.w	r2, r3, #3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4934      	ldr	r1, [pc, #208]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063f0:	f7fc feac 	bl	800314c <HAL_GetTick>
 80063f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f6:	e00a      	b.n	800640e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f8:	f7fc fea8 	bl	800314c <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f241 3288 	movw	r2, #5000	; 0x1388
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e04f      	b.n	80064ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640e:	4b2b      	ldr	r3, [pc, #172]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 020c 	and.w	r2, r3, #12
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	429a      	cmp	r2, r3
 800641e:	d1eb      	bne.n	80063f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006420:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d20c      	bcs.n	8006448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642e:	4b22      	ldr	r3, [pc, #136]	; (80064b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006436:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d001      	beq.n	8006448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e032      	b.n	80064ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d008      	beq.n	8006466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006454:	4b19      	ldr	r3, [pc, #100]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4916      	ldr	r1, [pc, #88]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	4313      	orrs	r3, r2
 8006464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0308 	and.w	r3, r3, #8
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	490e      	ldr	r1, [pc, #56]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 8006482:	4313      	orrs	r3, r2
 8006484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006486:	f000 f821 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 800648a:	4602      	mov	r2, r0
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCC_ClockConfig+0x1bc>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	091b      	lsrs	r3, r3, #4
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	490a      	ldr	r1, [pc, #40]	; (80064c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006498:	5ccb      	ldrb	r3, [r1, r3]
 800649a:	fa22 f303 	lsr.w	r3, r2, r3
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <HAL_RCC_ClockConfig+0x1c4>)
 80064a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <HAL_RCC_ClockConfig+0x1c8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fc fe0c 	bl	80030c4 <HAL_InitTick>

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40023c00 	.word	0x40023c00
 80064bc:	40023800 	.word	0x40023800
 80064c0:	080156a4 	.word	0x080156a4
 80064c4:	20000050 	.word	0x20000050
 80064c8:	20000054 	.word	0x20000054

080064cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064cc:	b5b0      	push	{r4, r5, r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064d2:	2100      	movs	r1, #0
 80064d4:	6079      	str	r1, [r7, #4]
 80064d6:	2100      	movs	r1, #0
 80064d8:	60f9      	str	r1, [r7, #12]
 80064da:	2100      	movs	r1, #0
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064de:	2100      	movs	r1, #0
 80064e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064e2:	4952      	ldr	r1, [pc, #328]	; (800662c <HAL_RCC_GetSysClockFreq+0x160>)
 80064e4:	6889      	ldr	r1, [r1, #8]
 80064e6:	f001 010c 	and.w	r1, r1, #12
 80064ea:	2908      	cmp	r1, #8
 80064ec:	d00d      	beq.n	800650a <HAL_RCC_GetSysClockFreq+0x3e>
 80064ee:	2908      	cmp	r1, #8
 80064f0:	f200 8094 	bhi.w	800661c <HAL_RCC_GetSysClockFreq+0x150>
 80064f4:	2900      	cmp	r1, #0
 80064f6:	d002      	beq.n	80064fe <HAL_RCC_GetSysClockFreq+0x32>
 80064f8:	2904      	cmp	r1, #4
 80064fa:	d003      	beq.n	8006504 <HAL_RCC_GetSysClockFreq+0x38>
 80064fc:	e08e      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064fe:	4b4c      	ldr	r3, [pc, #304]	; (8006630 <HAL_RCC_GetSysClockFreq+0x164>)
 8006500:	60bb      	str	r3, [r7, #8]
       break;
 8006502:	e08e      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006504:	4b4b      	ldr	r3, [pc, #300]	; (8006634 <HAL_RCC_GetSysClockFreq+0x168>)
 8006506:	60bb      	str	r3, [r7, #8]
      break;
 8006508:	e08b      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800650a:	4948      	ldr	r1, [pc, #288]	; (800662c <HAL_RCC_GetSysClockFreq+0x160>)
 800650c:	6849      	ldr	r1, [r1, #4]
 800650e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006512:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006514:	4945      	ldr	r1, [pc, #276]	; (800662c <HAL_RCC_GetSysClockFreq+0x160>)
 8006516:	6849      	ldr	r1, [r1, #4]
 8006518:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800651c:	2900      	cmp	r1, #0
 800651e:	d024      	beq.n	800656a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006520:	4942      	ldr	r1, [pc, #264]	; (800662c <HAL_RCC_GetSysClockFreq+0x160>)
 8006522:	6849      	ldr	r1, [r1, #4]
 8006524:	0989      	lsrs	r1, r1, #6
 8006526:	4608      	mov	r0, r1
 8006528:	f04f 0100 	mov.w	r1, #0
 800652c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006530:	f04f 0500 	mov.w	r5, #0
 8006534:	ea00 0204 	and.w	r2, r0, r4
 8006538:	ea01 0305 	and.w	r3, r1, r5
 800653c:	493d      	ldr	r1, [pc, #244]	; (8006634 <HAL_RCC_GetSysClockFreq+0x168>)
 800653e:	fb01 f003 	mul.w	r0, r1, r3
 8006542:	2100      	movs	r1, #0
 8006544:	fb01 f102 	mul.w	r1, r1, r2
 8006548:	1844      	adds	r4, r0, r1
 800654a:	493a      	ldr	r1, [pc, #232]	; (8006634 <HAL_RCC_GetSysClockFreq+0x168>)
 800654c:	fba2 0101 	umull	r0, r1, r2, r1
 8006550:	1863      	adds	r3, r4, r1
 8006552:	4619      	mov	r1, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	461a      	mov	r2, r3
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	f7fa fb96 	bl	8000c8c <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4613      	mov	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e04a      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800656a:	4b30      	ldr	r3, [pc, #192]	; (800662c <HAL_RCC_GetSysClockFreq+0x160>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	099b      	lsrs	r3, r3, #6
 8006570:	461a      	mov	r2, r3
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	f240 10ff 	movw	r0, #511	; 0x1ff
 800657a:	f04f 0100 	mov.w	r1, #0
 800657e:	ea02 0400 	and.w	r4, r2, r0
 8006582:	ea03 0501 	and.w	r5, r3, r1
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	014b      	lsls	r3, r1, #5
 8006594:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006598:	0142      	lsls	r2, r0, #5
 800659a:	4610      	mov	r0, r2
 800659c:	4619      	mov	r1, r3
 800659e:	1b00      	subs	r0, r0, r4
 80065a0:	eb61 0105 	sbc.w	r1, r1, r5
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	018b      	lsls	r3, r1, #6
 80065ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065b2:	0182      	lsls	r2, r0, #6
 80065b4:	1a12      	subs	r2, r2, r0
 80065b6:	eb63 0301 	sbc.w	r3, r3, r1
 80065ba:	f04f 0000 	mov.w	r0, #0
 80065be:	f04f 0100 	mov.w	r1, #0
 80065c2:	00d9      	lsls	r1, r3, #3
 80065c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065c8:	00d0      	lsls	r0, r2, #3
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	1912      	adds	r2, r2, r4
 80065d0:	eb45 0303 	adc.w	r3, r5, r3
 80065d4:	f04f 0000 	mov.w	r0, #0
 80065d8:	f04f 0100 	mov.w	r1, #0
 80065dc:	0299      	lsls	r1, r3, #10
 80065de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065e2:	0290      	lsls	r0, r2, #10
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4610      	mov	r0, r2
 80065ea:	4619      	mov	r1, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	f7fa fb4a 	bl	8000c8c <__aeabi_uldivmod>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4613      	mov	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <HAL_RCC_GetSysClockFreq+0x160>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	3301      	adds	r3, #1
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	fbb2 f3f3 	udiv	r3, r2, r3
 8006618:	60bb      	str	r3, [r7, #8]
      break;
 800661a:	e002      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800661c:	4b04      	ldr	r3, [pc, #16]	; (8006630 <HAL_RCC_GetSysClockFreq+0x164>)
 800661e:	60bb      	str	r3, [r7, #8]
      break;
 8006620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006622:	68bb      	ldr	r3, [r7, #8]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bdb0      	pop	{r4, r5, r7, pc}
 800662c:	40023800 	.word	0x40023800
 8006630:	00f42400 	.word	0x00f42400
 8006634:	017d7840 	.word	0x017d7840

08006638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800663c:	4b03      	ldr	r3, [pc, #12]	; (800664c <HAL_RCC_GetHCLKFreq+0x14>)
 800663e:	681b      	ldr	r3, [r3, #0]
}
 8006640:	4618      	mov	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000050 	.word	0x20000050

08006650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006654:	f7ff fff0 	bl	8006638 <HAL_RCC_GetHCLKFreq>
 8006658:	4602      	mov	r2, r0
 800665a:	4b05      	ldr	r3, [pc, #20]	; (8006670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	0a9b      	lsrs	r3, r3, #10
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	4903      	ldr	r1, [pc, #12]	; (8006674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006666:	5ccb      	ldrb	r3, [r1, r3]
 8006668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800666c:	4618      	mov	r0, r3
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40023800 	.word	0x40023800
 8006674:	080156b4 	.word	0x080156b4

08006678 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800669c:	2b00      	cmp	r3, #0
 800669e:	d038      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066a0:	4b68      	ldr	r3, [pc, #416]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066a6:	f7fc fd51 	bl	800314c <HAL_GetTick>
 80066aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066ac:	e008      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066ae:	f7fc fd4d 	bl	800314c <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e0bd      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066c0:	4b61      	ldr	r3, [pc, #388]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f0      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	019b      	lsls	r3, r3, #6
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	071b      	lsls	r3, r3, #28
 80066de:	495a      	ldr	r1, [pc, #360]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066e6:	4b57      	ldr	r3, [pc, #348]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ec:	f7fc fd2e 	bl	800314c <HAL_GetTick>
 80066f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066f4:	f7fc fd2a 	bl	800314c <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e09a      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006706:	4b50      	ldr	r3, [pc, #320]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f0      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8083 	beq.w	8006826 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	4b48      	ldr	r3, [pc, #288]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	4a47      	ldr	r2, [pc, #284]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800672a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672e:	6413      	str	r3, [r2, #64]	; 0x40
 8006730:	4b45      	ldr	r3, [pc, #276]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800673c:	4b43      	ldr	r3, [pc, #268]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a42      	ldr	r2, [pc, #264]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006746:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006748:	f7fc fd00 	bl	800314c <HAL_GetTick>
 800674c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006750:	f7fc fcfc 	bl	800314c <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e06c      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006762:	4b3a      	ldr	r3, [pc, #232]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800676e:	4b36      	ldr	r3, [pc, #216]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006776:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d02f      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	429a      	cmp	r2, r3
 800678a:	d028      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800678c:	4b2e      	ldr	r3, [pc, #184]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006794:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006796:	4b2e      	ldr	r3, [pc, #184]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006798:	2201      	movs	r2, #1
 800679a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800679c:	4b2c      	ldr	r3, [pc, #176]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067a2:	4a29      	ldr	r2, [pc, #164]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80067a8:	4b27      	ldr	r3, [pc, #156]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d114      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067b4:	f7fc fcca 	bl	800314c <HAL_GetTick>
 80067b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ba:	e00a      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067bc:	f7fc fcc6 	bl	800314c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e034      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d2:	4b1d      	ldr	r3, [pc, #116]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0ee      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ea:	d10d      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80067ec:	4b16      	ldr	r3, [pc, #88]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006800:	4911      	ldr	r1, [pc, #68]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006802:	4313      	orrs	r3, r2
 8006804:	608b      	str	r3, [r1, #8]
 8006806:	e005      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006808:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	4a0e      	ldr	r2, [pc, #56]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800680e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006812:	6093      	str	r3, [r2, #8]
 8006814:	4b0c      	ldr	r3, [pc, #48]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006820:	4909      	ldr	r1, [pc, #36]	; (8006848 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006822:	4313      	orrs	r3, r2
 8006824:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	7d1a      	ldrb	r2, [r3, #20]
 8006836:	4b07      	ldr	r3, [pc, #28]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006838:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	42470068 	.word	0x42470068
 8006848:	40023800 	.word	0x40023800
 800684c:	40007000 	.word	0x40007000
 8006850:	42470e40 	.word	0x42470e40
 8006854:	424711e0 	.word	0x424711e0

08006858 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e083      	b.n	8006972 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	7f5b      	ldrb	r3, [r3, #29]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fc f96a 	bl	8002b54 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	22ca      	movs	r2, #202	; 0xca
 800688c:	625a      	str	r2, [r3, #36]	; 0x24
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2253      	movs	r2, #83	; 0x53
 8006894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f897 	bl	80069ca <RTC_EnterInitMode>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d008      	beq.n	80068b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2204      	movs	r2, #4
 80068ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e05e      	b.n	8006972 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6899      	ldr	r1, [r3, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	68d2      	ldr	r2, [r2, #12]
 80068ee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6919      	ldr	r1, [r3, #16]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	041a      	lsls	r2, r3, #16
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006912:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10e      	bne.n	8006940 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f829 	bl	800697a <HAL_RTC_WaitForSynchro>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	22ff      	movs	r2, #255	; 0xff
 8006934:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2204      	movs	r2, #4
 800693a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e018      	b.n	8006972 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800694e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	22ff      	movs	r2, #255	; 0xff
 8006968:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006970:	2300      	movs	r3, #0
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68da      	ldr	r2, [r3, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006994:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006996:	f7fc fbd9 	bl	800314c <HAL_GetTick>
 800699a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800699c:	e009      	b.n	80069b2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800699e:	f7fc fbd5 	bl	800314c <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ac:	d901      	bls.n	80069b2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e007      	b.n	80069c2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0ee      	beq.n	800699e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d119      	bne.n	8006a18 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069ee:	f7fc fbad 	bl	800314c <HAL_GetTick>
 80069f2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80069f4:	e009      	b.n	8006a0a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80069f6:	f7fc fba9 	bl	800314c <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a04:	d901      	bls.n	8006a0a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e007      	b.n	8006a1a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0ee      	beq.n	80069f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e022      	b.n	8006a7a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fc f89a 	bl	8002b80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2203      	movs	r2, #3
 8006a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f815 	bl	8006a84 <HAL_SD_InitCard>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e00a      	b.n	8006a7a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a84:	b5b0      	push	{r4, r5, r7, lr}
 8006a86:	b08e      	sub	sp, #56	; 0x38
 8006a88:	af04      	add	r7, sp, #16
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006aa0:	2376      	movs	r3, #118	; 0x76
 8006aa2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681d      	ldr	r5, [r3, #0]
 8006aa8:	466c      	mov	r4, sp
 8006aaa:	f107 0314 	add.w	r3, r7, #20
 8006aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ab6:	f107 0308 	add.w	r3, r7, #8
 8006aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006abc:	4628      	mov	r0, r5
 8006abe:	f001 f938 	bl	8007d32 <SDIO_Init>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e04c      	b.n	8006b6e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006ad4:	4b28      	ldr	r3, [pc, #160]	; (8006b78 <HAL_SD_InitCard+0xf4>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f970 	bl	8007dc4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006ae4:	4b24      	ldr	r3, [pc, #144]	; (8006b78 <HAL_SD_InitCard+0xf4>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ff02 	bl	80078f4 <SD_PowerON>
 8006af0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e02e      	b.n	8006b6e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fe23 	bl	800775c <SD_InitCard>
 8006b16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00b      	beq.n	8006b36 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e01b      	b.n	8006b6e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f9d3 	bl	8007eea <SDMMC_CmdBlockLength>
 8006b44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00f      	beq.n	8006b6c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <HAL_SD_InitCard+0xf8>)
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e000      	b.n	8006b6e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3728      	adds	r7, #40	; 0x28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bdb0      	pop	{r4, r5, r7, pc}
 8006b76:	bf00      	nop
 8006b78:	422580a0 	.word	0x422580a0
 8006b7c:	004005ff 	.word	0x004005ff

08006b80 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b092      	sub	sp, #72	; 0x48
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b8e:	f7fc fadd 	bl	800314c <HAL_GetTick>
 8006b92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d107      	bne.n	8006bb2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e1bd      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	f040 81b0 	bne.w	8006f20 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	441a      	add	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d907      	bls.n	8006be4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e1a4      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2203      	movs	r2, #3
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d002      	beq.n	8006c02 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	025b      	lsls	r3, r3, #9
 8006c00:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c02:	f04f 33ff 	mov.w	r3, #4294967295
 8006c06:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	025b      	lsls	r3, r3, #9
 8006c0c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c0e:	2390      	movs	r3, #144	; 0x90
 8006c10:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006c12:	2302      	movs	r3, #2
 8006c14:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f107 0214 	add.w	r2, r7, #20
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 f932 	bl	8007e92 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d90a      	bls.n	8006c4a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2202      	movs	r2, #2
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 f996 	bl	8007f72 <SDMMC_CmdReadMultiBlock>
 8006c46:	6478      	str	r0, [r7, #68]	; 0x44
 8006c48:	e009      	b.n	8006c5e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c56:	4618      	mov	r0, r3
 8006c58:	f001 f969 	bl	8007f2e <SDMMC_CmdReadSingleBlock>
 8006c5c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d012      	beq.n	8006c8a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a7a      	ldr	r2, [pc, #488]	; (8006e54 <HAL_SD_ReadBlocks+0x2d4>)
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c72:	431a      	orrs	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e151      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006c8e:	e061      	b.n	8006d54 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d03c      	beq.n	8006d18 <HAL_SD_ReadBlocks+0x198>
 8006c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d039      	beq.n	8006d18 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca8:	e033      	b.n	8006d12 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f86a 	bl	8007d88 <SDIO_ReadFIFO>
 8006cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	0a1b      	lsrs	r3, r3, #8
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	0c1b      	lsrs	r3, r3, #16
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	3301      	adds	r3, #1
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	0e1b      	lsrs	r3, r3, #24
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d02:	3301      	adds	r3, #1
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8006d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0e:	3301      	adds	r3, #1
 8006d10:	643b      	str	r3, [r7, #64]	; 0x40
 8006d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d14:	2b07      	cmp	r3, #7
 8006d16:	d9c8      	bls.n	8006caa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006d18:	f7fc fa18 	bl	800314c <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d902      	bls.n	8006d2e <HAL_SD_ReadBlocks+0x1ae>
 8006d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d112      	bne.n	8006d54 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a48      	ldr	r2, [pc, #288]	; (8006e54 <HAL_SD_ReadBlocks+0x2d4>)
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e0ec      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d5a:	f240 332a 	movw	r3, #810	; 0x32a
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d095      	beq.n	8006c90 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d022      	beq.n	8006db8 <HAL_SD_ReadBlocks+0x238>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d91f      	bls.n	8006db8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d01b      	beq.n	8006db8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 f95b 	bl	8008040 <SDMMC_CmdStopTransfer>
 8006d8a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d012      	beq.n	8006db8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2f      	ldr	r2, [pc, #188]	; (8006e54 <HAL_SD_ReadBlocks+0x2d4>)
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da0:	431a      	orrs	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0ba      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d012      	beq.n	8006dec <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <HAL_SD_ReadBlocks+0x2d4>)
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd2:	f043 0208 	orr.w	r2, r3, #8
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e0a0      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d012      	beq.n	8006e20 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a15      	ldr	r2, [pc, #84]	; (8006e54 <HAL_SD_ReadBlocks+0x2d4>)
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	f043 0202 	orr.w	r2, r3, #2
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e086      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d063      	beq.n	8006ef6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a08      	ldr	r2, [pc, #32]	; (8006e54 <HAL_SD_ReadBlocks+0x2d4>)
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	f043 0220 	orr.w	r2, r3, #32
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e06c      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
 8006e54:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 ff93 	bl	8007d88 <SDIO_ReadFIFO>
 8006e62:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6e:	3301      	adds	r3, #1
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e74:	3b01      	subs	r3, #1
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	0a1b      	lsrs	r3, r3, #8
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e84:	3301      	adds	r3, #1
 8006e86:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	0c1b      	lsrs	r3, r3, #16
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	0e1b      	lsrs	r3, r3, #24
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006eba:	f7fc f947 	bl	800314c <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d902      	bls.n	8006ed0 <HAL_SD_ReadBlocks+0x350>
 8006eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d112      	bne.n	8006ef6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a18      	ldr	r2, [pc, #96]	; (8006f38 <HAL_SD_ReadBlocks+0x3b8>)
 8006ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e01b      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <HAL_SD_ReadBlocks+0x38a>
 8006f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1a6      	bne.n	8006e58 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e006      	b.n	8006f2e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
  }
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3748      	adds	r7, #72	; 0x48
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	004005ff 	.word	0x004005ff

08006f3c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b092      	sub	sp, #72	; 0x48
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f4a:	f7fc f8ff 	bl	800314c <HAL_GetTick>
 8006f4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d107      	bne.n	8006f6e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e166      	b.n	800723c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	f040 8159 	bne.w	800722e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	441a      	add	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d907      	bls.n	8006fa0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e14d      	b.n	800723c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2200      	movs	r2, #0
 8006fae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d002      	beq.n	8006fbe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	025b      	lsls	r3, r3, #9
 8006fbc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	025b      	lsls	r3, r3, #9
 8006fc8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006fca:	2390      	movs	r3, #144	; 0x90
 8006fcc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f107 0218 	add.w	r2, r7, #24
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 ff54 	bl	8007e92 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d90a      	bls.n	8007006 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fffc 	bl	8007ffa <SDMMC_CmdWriteMultiBlock>
 8007002:	6478      	str	r0, [r7, #68]	; 0x44
 8007004:	e009      	b.n	800701a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2210      	movs	r2, #16
 800700a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007012:	4618      	mov	r0, r3
 8007014:	f000 ffcf 	bl	8007fb6 <SDMMC_CmdWriteSingleBlock>
 8007018:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800701a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701c:	2b00      	cmp	r3, #0
 800701e:	d012      	beq.n	8007046 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a87      	ldr	r2, [pc, #540]	; (8007244 <HAL_SD_WriteBlocks+0x308>)
 8007026:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800702c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800702e:	431a      	orrs	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e0fa      	b.n	800723c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800704a:	e065      	b.n	8007118 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d040      	beq.n	80070dc <HAL_SD_WriteBlocks+0x1a0>
 800705a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d03d      	beq.n	80070dc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007060:	2300      	movs	r3, #0
 8007062:	643b      	str	r3, [r7, #64]	; 0x40
 8007064:	e037      	b.n	80070d6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800706c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706e:	3301      	adds	r3, #1
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007074:	3b01      	subs	r3, #1
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	021a      	lsls	r2, r3, #8
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	3301      	adds	r3, #1
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	3b01      	subs	r3, #1
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	041a      	lsls	r2, r3, #16
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800709c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709e:	3301      	adds	r3, #1
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80070a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a4:	3b01      	subs	r3, #1
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80070a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	061a      	lsls	r2, r3, #24
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80070b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b6:	3301      	adds	r3, #1
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80070ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070bc:	3b01      	subs	r3, #1
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f107 0214 	add.w	r2, r7, #20
 80070c8:	4611      	mov	r1, r2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fe69 	bl	8007da2 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80070d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d2:	3301      	adds	r3, #1
 80070d4:	643b      	str	r3, [r7, #64]	; 0x40
 80070d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d8:	2b07      	cmp	r3, #7
 80070da:	d9c4      	bls.n	8007066 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80070dc:	f7fc f836 	bl	800314c <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d902      	bls.n	80070f2 <HAL_SD_WriteBlocks+0x1b6>
 80070ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d112      	bne.n	8007118 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a53      	ldr	r2, [pc, #332]	; (8007244 <HAL_SD_WriteBlocks+0x308>)
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007100:	431a      	orrs	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e091      	b.n	800723c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711e:	f240 331a 	movw	r3, #794	; 0x31a
 8007122:	4013      	ands	r3, r2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d091      	beq.n	800704c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007132:	2b00      	cmp	r3, #0
 8007134:	d022      	beq.n	800717c <HAL_SD_WriteBlocks+0x240>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d91f      	bls.n	800717c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007140:	2b03      	cmp	r3, #3
 8007142:	d01b      	beq.n	800717c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f000 ff79 	bl	8008040 <SDMMC_CmdStopTransfer>
 800714e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007152:	2b00      	cmp	r3, #0
 8007154:	d012      	beq.n	800717c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a3a      	ldr	r2, [pc, #232]	; (8007244 <HAL_SD_WriteBlocks+0x308>)
 800715c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007164:	431a      	orrs	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e05f      	b.n	800723c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d012      	beq.n	80071b0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a2d      	ldr	r2, [pc, #180]	; (8007244 <HAL_SD_WriteBlocks+0x308>)
 8007190:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007196:	f043 0208 	orr.w	r2, r3, #8
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e045      	b.n	800723c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d012      	beq.n	80071e4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a20      	ldr	r2, [pc, #128]	; (8007244 <HAL_SD_WriteBlocks+0x308>)
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	f043 0202 	orr.w	r2, r3, #2
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e02b      	b.n	800723c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d012      	beq.n	8007218 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a13      	ldr	r2, [pc, #76]	; (8007244 <HAL_SD_WriteBlocks+0x308>)
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fe:	f043 0210 	orr.w	r2, r3, #16
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e011      	b.n	800723c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007220:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	e006      	b.n	800723c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
  }
}
 800723c:	4618      	mov	r0, r3
 800723e:	3748      	adds	r7, #72	; 0x48
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	004005ff 	.word	0x004005ff

08007248 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007256:	0f9b      	lsrs	r3, r3, #30
 8007258:	b2da      	uxtb	r2, r3
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007262:	0e9b      	lsrs	r3, r3, #26
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	b2da      	uxtb	r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007274:	0e1b      	lsrs	r3, r3, #24
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	b2da      	uxtb	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007286:	0c1b      	lsrs	r3, r3, #16
 8007288:	b2da      	uxtb	r2, r3
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	b2da      	uxtb	r2, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072a8:	0d1b      	lsrs	r3, r3, #20
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072b4:	0c1b      	lsrs	r3, r3, #16
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	f003 030f 	and.w	r3, r3, #15
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072c6:	0bdb      	lsrs	r3, r3, #15
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072d8:	0b9b      	lsrs	r3, r3, #14
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ea:	0b5b      	lsrs	r3, r3, #13
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072fc:	0b1b      	lsrs	r3, r3, #12
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	b2da      	uxtb	r2, r3
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2200      	movs	r2, #0
 800730e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007314:	2b00      	cmp	r3, #0
 8007316:	d163      	bne.n	80073e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800731c:	009a      	lsls	r2, r3, #2
 800731e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007322:	4013      	ands	r3, r2
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007328:	0f92      	lsrs	r2, r2, #30
 800732a:	431a      	orrs	r2, r3
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007334:	0edb      	lsrs	r3, r3, #27
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	b2da      	uxtb	r2, r3
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007346:	0e1b      	lsrs	r3, r3, #24
 8007348:	b2db      	uxtb	r3, r3
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	b2da      	uxtb	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007358:	0d5b      	lsrs	r3, r3, #21
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	b2da      	uxtb	r2, r3
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736a:	0c9b      	lsrs	r3, r3, #18
 800736c:	b2db      	uxtb	r3, r3
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	b2da      	uxtb	r2, r3
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800737c:	0bdb      	lsrs	r3, r3, #15
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	b2da      	uxtb	r2, r3
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	7e1b      	ldrb	r3, [r3, #24]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	3302      	adds	r3, #2
 80073a0:	2201      	movs	r2, #1
 80073a2:	fa02 f303 	lsl.w	r3, r2, r3
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80073aa:	fb02 f203 	mul.w	r2, r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	7a1b      	ldrb	r3, [r3, #8]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	2201      	movs	r2, #1
 80073be:	409a      	lsls	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80073cc:	0a52      	lsrs	r2, r2, #9
 80073ce:	fb02 f203 	mul.w	r2, r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073dc:	661a      	str	r2, [r3, #96]	; 0x60
 80073de:	e031      	b.n	8007444 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d11d      	bne.n	8007424 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073ec:	041b      	lsls	r3, r3, #16
 80073ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073f6:	0c1b      	lsrs	r3, r3, #16
 80073f8:	431a      	orrs	r2, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	3301      	adds	r3, #1
 8007404:	029a      	lsls	r2, r3, #10
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007418:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	661a      	str	r2, [r3, #96]	; 0x60
 8007422:	e00f      	b.n	8007444 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a58      	ldr	r2, [pc, #352]	; (800758c <HAL_SD_GetCardCSD+0x344>)
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e09d      	b.n	8007580 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007448:	0b9b      	lsrs	r3, r3, #14
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	b2da      	uxtb	r2, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745a:	09db      	lsrs	r3, r3, #7
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007462:	b2da      	uxtb	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007472:	b2da      	uxtb	r2, r3
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747c:	0fdb      	lsrs	r3, r3, #31
 800747e:	b2da      	uxtb	r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	0f5b      	lsrs	r3, r3, #29
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f003 0303 	and.w	r3, r3, #3
 8007490:	b2da      	uxtb	r2, r3
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	0e9b      	lsrs	r3, r3, #26
 800749c:	b2db      	uxtb	r3, r3
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	0d9b      	lsrs	r3, r3, #22
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	0d5b      	lsrs	r3, r3, #21
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074da:	0c1b      	lsrs	r3, r3, #16
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ee:	0bdb      	lsrs	r3, r3, #15
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007502:	0b9b      	lsrs	r3, r3, #14
 8007504:	b2db      	uxtb	r3, r3
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007516:	0b5b      	lsrs	r3, r3, #13
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	b2da      	uxtb	r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752a:	0b1b      	lsrs	r3, r3, #12
 800752c:	b2db      	uxtb	r3, r3
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	b2da      	uxtb	r2, r3
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	0a9b      	lsrs	r3, r3, #10
 8007540:	b2db      	uxtb	r3, r3
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	b2da      	uxtb	r2, r3
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007552:	0a1b      	lsrs	r3, r3, #8
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	b2da      	uxtb	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	b2db      	uxtb	r3, r3
 800756a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800756e:	b2da      	uxtb	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	004005ff 	.word	0x004005ff

08007590 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80075e8:	b5b0      	push	{r4, r5, r7, lr}
 80075ea:	b08e      	sub	sp, #56	; 0x38
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80075f2:	2300      	movs	r3, #0
 80075f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2203      	movs	r2, #3
 80075fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007604:	2b03      	cmp	r3, #3
 8007606:	d02e      	beq.n	8007666 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800760e:	d106      	bne.n	800761e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	639a      	str	r2, [r3, #56]	; 0x38
 800761c:	e029      	b.n	8007672 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007624:	d10a      	bne.n	800763c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa1a 	bl	8007a60 <SD_WideBus_Enable>
 800762c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	639a      	str	r2, [r3, #56]	; 0x38
 800763a:	e01a      	b.n	8007672 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa57 	bl	8007af6 <SD_WideBus_Disable>
 8007648:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	639a      	str	r2, [r3, #56]	; 0x38
 8007656:	e00c      	b.n	8007672 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38
 8007664:	e005      	b.n	8007672 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a26      	ldr	r2, [pc, #152]	; (8007718 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007680:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007690:	e01f      	b.n	80076d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681d      	ldr	r5, [r3, #0]
 80076b8:	466c      	mov	r4, sp
 80076ba:	f107 0314 	add.w	r3, r7, #20
 80076be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076c6:	f107 0308 	add.w	r3, r7, #8
 80076ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 fb30 	bl	8007d32 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fc05 	bl	8007eea <SDMMC_CmdBlockLength>
 80076e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00c      	beq.n	8007702 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a0a      	ldr	r2, [pc, #40]	; (8007718 <HAL_SD_ConfigWideBusOperation+0x130>)
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800770a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800770e:	4618      	mov	r0, r3
 8007710:	3728      	adds	r7, #40	; 0x28
 8007712:	46bd      	mov	sp, r7
 8007714:	bdb0      	pop	{r4, r5, r7, pc}
 8007716:	bf00      	nop
 8007718:	004005ff 	.word	0x004005ff

0800771c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007728:	f107 030c 	add.w	r3, r7, #12
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f96e 	bl	8007a10 <SD_SendStatus>
 8007734:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	0a5b      	lsrs	r3, r3, #9
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007752:	693b      	ldr	r3, [r7, #16]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800775c:	b5b0      	push	{r4, r5, r7, lr}
 800775e:	b094      	sub	sp, #80	; 0x50
 8007760:	af04      	add	r7, sp, #16
 8007762:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007764:	2301      	movs	r3, #1
 8007766:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fb38 	bl	8007de2 <SDIO_GetPowerState>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007778:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800777c:	e0b6      	b.n	80078ec <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007782:	2b03      	cmp	r3, #3
 8007784:	d02f      	beq.n	80077e6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fd62 	bl	8008254 <SDMMC_CmdSendCID>
 8007790:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <SD_InitCard+0x40>
    {
      return errorstate;
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779a:	e0a7      	b.n	80078ec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2100      	movs	r1, #0
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fb62 	bl	8007e6c <SDIO_GetResponse>
 80077a8:	4602      	mov	r2, r0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2104      	movs	r1, #4
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 fb59 	bl	8007e6c <SDIO_GetResponse>
 80077ba:	4602      	mov	r2, r0
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2108      	movs	r1, #8
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fb50 	bl	8007e6c <SDIO_GetResponse>
 80077cc:	4602      	mov	r2, r0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	210c      	movs	r1, #12
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fb47 	bl	8007e6c <SDIO_GetResponse>
 80077de:	4602      	mov	r2, r0
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d00d      	beq.n	800780a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f107 020e 	add.w	r2, r7, #14
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fd68 	bl	80082ce <SDMMC_CmdSetRelAdd>
 80077fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <SD_InitCard+0xae>
    {
      return errorstate;
 8007806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007808:	e070      	b.n	80078ec <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780e:	2b03      	cmp	r3, #3
 8007810:	d036      	beq.n	8007880 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007812:	89fb      	ldrh	r3, [r7, #14]
 8007814:	461a      	mov	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f000 fd32 	bl	8008290 <SDMMC_CmdSendCSD>
 800782c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800782e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007836:	e059      	b.n	80078ec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2100      	movs	r1, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f000 fb14 	bl	8007e6c <SDIO_GetResponse>
 8007844:	4602      	mov	r2, r0
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2104      	movs	r1, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fb0b 	bl	8007e6c <SDIO_GetResponse>
 8007856:	4602      	mov	r2, r0
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2108      	movs	r1, #8
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fb02 	bl	8007e6c <SDIO_GetResponse>
 8007868:	4602      	mov	r2, r0
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	210c      	movs	r1, #12
 8007874:	4618      	mov	r0, r3
 8007876:	f000 faf9 	bl	8007e6c <SDIO_GetResponse>
 800787a:	4602      	mov	r2, r0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2104      	movs	r1, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f000 faf0 	bl	8007e6c <SDIO_GetResponse>
 800788c:	4603      	mov	r3, r0
 800788e:	0d1a      	lsrs	r2, r3, #20
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007894:	f107 0310 	add.w	r3, r7, #16
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff fcd4 	bl	8007248 <HAL_SD_GetCardCSD>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078aa:	e01f      	b.n	80078ec <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6819      	ldr	r1, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b4:	041b      	lsls	r3, r3, #16
 80078b6:	461a      	mov	r2, r3
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	4608      	mov	r0, r1
 80078be:	f000 fbe1 	bl	8008084 <SDMMC_CmdSelDesel>
 80078c2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80078c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <SD_InitCard+0x172>
  {
    return errorstate;
 80078ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078cc:	e00e      	b.n	80078ec <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681d      	ldr	r5, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	466c      	mov	r4, sp
 80078d6:	f103 0210 	add.w	r2, r3, #16
 80078da:	ca07      	ldmia	r2, {r0, r1, r2}
 80078dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078e0:	3304      	adds	r3, #4
 80078e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078e4:	4628      	mov	r0, r5
 80078e6:	f000 fa24 	bl	8007d32 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3740      	adds	r7, #64	; 0x40
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bdb0      	pop	{r4, r5, r7, pc}

080078f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	2300      	movs	r3, #0
 8007906:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f000 fbdc 	bl	80080ca <SDMMC_CmdGoIdleState>
 8007912:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <SD_PowerON+0x2a>
  {
    return errorstate;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	e072      	b.n	8007a04 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fbef 	bl	8008106 <SDMMC_CmdOperCond>
 8007928:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00d      	beq.n	800794c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fbc5 	bl	80080ca <SDMMC_CmdGoIdleState>
 8007940:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d004      	beq.n	8007952 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	e05b      	b.n	8007a04 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007956:	2b01      	cmp	r3, #1
 8007958:	d137      	bne.n	80079ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fbef 	bl	8008144 <SDMMC_CmdAppCommand>
 8007966:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d02d      	beq.n	80079ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800796e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007972:	e047      	b.n	8007a04 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2100      	movs	r1, #0
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fbe2 	bl	8008144 <SDMMC_CmdAppCommand>
 8007980:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <SD_PowerON+0x98>
    {
      return errorstate;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	e03b      	b.n	8007a04 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	491e      	ldr	r1, [pc, #120]	; (8007a0c <SD_PowerON+0x118>)
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fbf8 	bl	8008188 <SDMMC_CmdAppOperCommand>
 8007998:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079a4:	e02e      	b.n	8007a04 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2100      	movs	r1, #0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fa5d 	bl	8007e6c <SDIO_GetResponse>
 80079b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	0fdb      	lsrs	r3, r3, #31
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <SD_PowerON+0xcc>
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <SD_PowerON+0xce>
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]

    count++;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d802      	bhi.n	80079da <SD_PowerON+0xe6>
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0cc      	beq.n	8007974 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d902      	bls.n	80079ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80079e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079e8:	e00c      	b.n	8007a04 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	645a      	str	r2, [r3, #68]	; 0x44
 80079fa:	e002      	b.n	8007a02 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	c1100000 	.word	0xc1100000

08007a10 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a24:	e018      	b.n	8007a58 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2e:	041b      	lsls	r3, r3, #16
 8007a30:	4619      	mov	r1, r3
 8007a32:	4610      	mov	r0, r2
 8007a34:	f000 fc6c 	bl	8008310 <SDMMC_CmdSendStatus>
 8007a38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	e009      	b.n	8007a58 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fa0e 	bl	8007e6c <SDIO_GetResponse>
 8007a50:	4602      	mov	r2, r0
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2100      	movs	r1, #0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f9f8 	bl	8007e6c <SDIO_GetResponse>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a86:	d102      	bne.n	8007a8e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a8c:	e02f      	b.n	8007aee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a8e:	f107 030c 	add.w	r3, r7, #12
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f879 	bl	8007b8c <SD_FindSCR>
 8007a9a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	e023      	b.n	8007aee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01c      	beq.n	8007aea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f000 fb41 	bl	8008144 <SDMMC_CmdAppCommand>
 8007ac2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	e00f      	b.n	8007aee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fb7a 	bl	80081ce <SDMMC_CmdBusWidth>
 8007ada:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	e003      	b.n	8007aee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e001      	b.n	8007aee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007aea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	2300      	movs	r3, #0
 8007b04:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 f9ad 	bl	8007e6c <SDIO_GetResponse>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b1c:	d102      	bne.n	8007b24 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b22:	e02f      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f82e 	bl	8007b8c <SD_FindSCR>
 8007b30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	e023      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d01c      	beq.n	8007b80 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4e:	041b      	lsls	r3, r3, #16
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f000 faf6 	bl	8008144 <SDMMC_CmdAppCommand>
 8007b58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	e00f      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2100      	movs	r1, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fb2f 	bl	80081ce <SDMMC_CmdBusWidth>
 8007b70:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	e003      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e001      	b.n	8007b84 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b8c:	b590      	push	{r4, r7, lr}
 8007b8e:	b08f      	sub	sp, #60	; 0x3c
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b96:	f7fb fad9 	bl	800314c <HAL_GetTick>
 8007b9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60bb      	str	r3, [r7, #8]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2108      	movs	r1, #8
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f999 	bl	8007eea <SDMMC_CmdBlockLength>
 8007bb8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	e0b2      	b.n	8007d2a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bcc:	041b      	lsls	r3, r3, #16
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f000 fab7 	bl	8008144 <SDMMC_CmdAppCommand>
 8007bd6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	e0a3      	b.n	8007d2a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007be2:	f04f 33ff 	mov.w	r3, #4294967295
 8007be6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007be8:	2308      	movs	r3, #8
 8007bea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007bec:	2330      	movs	r3, #48	; 0x30
 8007bee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f107 0210 	add.w	r2, r7, #16
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 f943 	bl	8007e92 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fafe 	bl	8008212 <SDMMC_CmdSendSCR>
 8007c16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d02a      	beq.n	8007c74 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	e083      	b.n	8007d2a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00f      	beq.n	8007c50 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	f107 0208 	add.w	r2, r7, #8
 8007c3c:	18d4      	adds	r4, r2, r3
 8007c3e:	4608      	mov	r0, r1
 8007c40:	f000 f8a2 	bl	8007d88 <SDIO_ReadFIFO>
 8007c44:	4603      	mov	r3, r0
 8007c46:	6023      	str	r3, [r4, #0]
      index++;
 8007c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4e:	e006      	b.n	8007c5e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d012      	beq.n	8007c84 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c5e:	f7fb fa75 	bl	800314c <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d102      	bne.n	8007c74 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c72:	e05a      	b.n	8007d2a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0cf      	beq.n	8007c22 <SD_FindSCR+0x96>
 8007c82:	e000      	b.n	8007c86 <SD_FindSCR+0xfa>
      break;
 8007c84:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8c:	f003 0308 	and.w	r3, r3, #8
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2208      	movs	r2, #8
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c9c:	2308      	movs	r3, #8
 8007c9e:	e044      	b.n	8007d2a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	e037      	b.n	8007d2a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007cd0:	2320      	movs	r3, #32
 8007cd2:	e02a      	b.n	8007d2a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cdc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	061a      	lsls	r2, r3, #24
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cf4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	0e1b      	lsrs	r3, r3, #24
 8007cfa:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	601a      	str	r2, [r3, #0]
    scr++;
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d02:	3304      	adds	r3, #4
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	061a      	lsls	r2, r3, #24
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d12:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	0a1b      	lsrs	r3, r3, #8
 8007d18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d1c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	0e1b      	lsrs	r3, r3, #24
 8007d22:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	373c      	adds	r7, #60	; 0x3c
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd90      	pop	{r4, r7, pc}

08007d32 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007d32:	b084      	sub	sp, #16
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	f107 001c 	add.w	r0, r7, #28
 8007d40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007d48:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007d4c:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007d50:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007d54:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007d58:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007d5c:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007d6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	b004      	add	sp, #16
 8007d86:	4770      	bx	lr

08007d88 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2203      	movs	r2, #3
 8007dd0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007dd2:	2002      	movs	r0, #2
 8007dd4:	f7fb f9c6 	bl	8003164 <HAL_Delay>
  
  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0303 	and.w	r3, r3, #3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b085      	sub	sp, #20
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007e1c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007e22:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007e28:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007e38:	f023 030f 	bic.w	r3, r3, #15
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	b2db      	uxtb	r3, r3
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3314      	adds	r3, #20
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	4413      	add	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
}  
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b085      	sub	sp, #20
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007eb8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007ebe:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007ec4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0

}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b088      	sub	sp, #32
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007ef8:	2310      	movs	r3, #16
 8007efa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007efc:	2340      	movs	r3, #64	; 0x40
 8007efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff ff74 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1a:	2110      	movs	r1, #16
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fa45 	bl	80083ac <SDMMC_GetCmdResp1>
 8007f22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f24:	69fb      	ldr	r3, [r7, #28]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3720      	adds	r7, #32
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b088      	sub	sp, #32
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007f3c:	2311      	movs	r3, #17
 8007f3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f40:	2340      	movs	r3, #64	; 0x40
 8007f42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f44:	2300      	movs	r3, #0
 8007f46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f4e:	f107 0308 	add.w	r3, r7, #8
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7ff ff52 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f5e:	2111      	movs	r1, #17
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa23 	bl	80083ac <SDMMC_GetCmdResp1>
 8007f66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f68:	69fb      	ldr	r3, [r7, #28]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b088      	sub	sp, #32
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007f80:	2312      	movs	r3, #18
 8007f82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f84:	2340      	movs	r3, #64	; 0x40
 8007f86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f92:	f107 0308 	add.w	r3, r7, #8
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff ff30 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa2:	2112      	movs	r1, #18
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa01 	bl	80083ac <SDMMC_GetCmdResp1>
 8007faa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fac:	69fb      	ldr	r3, [r7, #28]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b088      	sub	sp, #32
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007fc4:	2318      	movs	r3, #24
 8007fc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fc8:	2340      	movs	r3, #64	; 0x40
 8007fca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fd6:	f107 0308 	add.w	r3, r7, #8
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff ff0e 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe6:	2118      	movs	r1, #24
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f9df 	bl	80083ac <SDMMC_GetCmdResp1>
 8007fee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3720      	adds	r7, #32
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b088      	sub	sp, #32
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008008:	2319      	movs	r3, #25
 800800a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008010:	2300      	movs	r3, #0
 8008012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008018:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800801a:	f107 0308 	add.w	r3, r7, #8
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff feec 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008026:	f241 3288 	movw	r2, #5000	; 0x1388
 800802a:	2119      	movs	r1, #25
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f9bd 	bl	80083ac <SDMMC_GetCmdResp1>
 8008032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008034:	69fb      	ldr	r3, [r7, #28]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3720      	adds	r7, #32
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800804c:	230c      	movs	r3, #12
 800804e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800805e:	f107 0308 	add.w	r3, r7, #8
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff feca 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800806a:	4a05      	ldr	r2, [pc, #20]	; (8008080 <SDMMC_CmdStopTransfer+0x40>)
 800806c:	210c      	movs	r1, #12
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f99c 	bl	80083ac <SDMMC_GetCmdResp1>
 8008074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008076:	69fb      	ldr	r3, [r7, #28]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3720      	adds	r7, #32
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	05f5e100 	.word	0x05f5e100

08008084 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08a      	sub	sp, #40	; 0x28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008094:	2307      	movs	r3, #7
 8008096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008098:	2340      	movs	r3, #64	; 0x40
 800809a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800809c:	2300      	movs	r3, #0
 800809e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080a6:	f107 0310 	add.w	r3, r7, #16
 80080aa:	4619      	mov	r1, r3
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7ff fea6 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80080b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b6:	2107      	movs	r1, #7
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f977 	bl	80083ac <SDMMC_GetCmdResp1>
 80080be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3728      	adds	r7, #40	; 0x28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b088      	sub	sp, #32
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80080da:	2300      	movs	r3, #0
 80080dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080de:	2300      	movs	r3, #0
 80080e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080e8:	f107 0308 	add.w	r3, r7, #8
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff fe85 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f92d 	bl	8008354 <SDMMC_GetCmdError>
 80080fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080fc:	69fb      	ldr	r3, [r7, #28]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b088      	sub	sp, #32
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800810e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008112:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008114:	2308      	movs	r3, #8
 8008116:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008118:	2340      	movs	r3, #64	; 0x40
 800811a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800811c:	2300      	movs	r3, #0
 800811e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008124:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008126:	f107 0308 	add.w	r3, r7, #8
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff fe66 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fb24 	bl	8008780 <SDMMC_GetCmdResp7>
 8008138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800813a:	69fb      	ldr	r3, [r7, #28]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3720      	adds	r7, #32
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008152:	2337      	movs	r3, #55	; 0x37
 8008154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008156:	2340      	movs	r3, #64	; 0x40
 8008158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800815e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008162:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008164:	f107 0308 	add.w	r3, r7, #8
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff fe47 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008170:	f241 3288 	movw	r2, #5000	; 0x1388
 8008174:	2137      	movs	r1, #55	; 0x37
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f918 	bl	80083ac <SDMMC_GetCmdResp1>
 800817c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800817e:	69fb      	ldr	r3, [r7, #28]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800819c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800819e:	2329      	movs	r3, #41	; 0x29
 80081a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081a6:	2300      	movs	r3, #0
 80081a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081b0:	f107 0308 	add.w	r3, r7, #8
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fe21 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fa2b 	bl	8008618 <SDMMC_GetCmdResp3>
 80081c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081c4:	69fb      	ldr	r3, [r7, #28]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3720      	adds	r7, #32
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b088      	sub	sp, #32
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80081dc:	2306      	movs	r3, #6
 80081de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081e4:	2300      	movs	r3, #0
 80081e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081ee:	f107 0308 	add.w	r3, r7, #8
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff fe02 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80081fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80081fe:	2106      	movs	r1, #6
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f8d3 	bl	80083ac <SDMMC_GetCmdResp1>
 8008206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008208:	69fb      	ldr	r3, [r7, #28]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b088      	sub	sp, #32
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800821e:	2333      	movs	r3, #51	; 0x33
 8008220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008222:	2340      	movs	r3, #64	; 0x40
 8008224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800822a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800822e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008230:	f107 0308 	add.w	r3, r7, #8
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff fde1 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800823c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008240:	2133      	movs	r1, #51	; 0x33
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f8b2 	bl	80083ac <SDMMC_GetCmdResp1>
 8008248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800824a:	69fb      	ldr	r3, [r7, #28]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008260:	2302      	movs	r3, #2
 8008262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008264:	23c0      	movs	r3, #192	; 0xc0
 8008266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800826c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008270:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff fdc0 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f982 	bl	8008588 <SDMMC_GetCmdResp2>
 8008284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008286:	69fb      	ldr	r3, [r7, #28]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3720      	adds	r7, #32
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b088      	sub	sp, #32
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800829e:	2309      	movs	r3, #9
 80082a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80082a2:	23c0      	movs	r3, #192	; 0xc0
 80082a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082b0:	f107 0308 	add.w	r3, r7, #8
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fda1 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f963 	bl	8008588 <SDMMC_GetCmdResp2>
 80082c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082c4:	69fb      	ldr	r3, [r7, #28]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3720      	adds	r7, #32
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b088      	sub	sp, #32
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80082dc:	2303      	movs	r3, #3
 80082de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082e0:	2340      	movs	r3, #64	; 0x40
 80082e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082e4:	2300      	movs	r3, #0
 80082e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082ee:	f107 0308 	add.w	r3, r7, #8
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fd82 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	2103      	movs	r1, #3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f9c8 	bl	8008694 <SDMMC_GetCmdResp6>
 8008304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008306:	69fb      	ldr	r3, [r7, #28]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3720      	adds	r7, #32
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800831e:	230d      	movs	r3, #13
 8008320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008322:	2340      	movs	r3, #64	; 0x40
 8008324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800832a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800832e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008330:	f107 0308 	add.w	r3, r7, #8
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7ff fd61 	bl	8007dfe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800833c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008340:	210d      	movs	r1, #13
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f832 	bl	80083ac <SDMMC_GetCmdResp1>
 8008348:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800834a:	69fb      	ldr	r3, [r7, #28]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3720      	adds	r7, #32
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800835c:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <SDMMC_GetCmdError+0x50>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a11      	ldr	r2, [pc, #68]	; (80083a8 <SDMMC_GetCmdError+0x54>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	0a5b      	lsrs	r3, r3, #9
 8008368:	f241 3288 	movw	r2, #5000	; 0x1388
 800836c:	fb02 f303 	mul.w	r3, r2, r3
 8008370:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1e5a      	subs	r2, r3, #1
 8008376:	60fa      	str	r2, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d102      	bne.n	8008382 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800837c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008380:	e009      	b.n	8008396 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0f1      	beq.n	8008372 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	22c5      	movs	r2, #197	; 0xc5
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	20000050 	.word	0x20000050
 80083a8:	10624dd3 	.word	0x10624dd3

080083ac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	460b      	mov	r3, r1
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80083ba:	4b70      	ldr	r3, [pc, #448]	; (800857c <SDMMC_GetCmdResp1+0x1d0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a70      	ldr	r2, [pc, #448]	; (8008580 <SDMMC_GetCmdResp1+0x1d4>)
 80083c0:	fba2 2303 	umull	r2, r3, r2, r3
 80083c4:	0a5a      	lsrs	r2, r3, #9
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	fb02 f303 	mul.w	r3, r2, r3
 80083cc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	1e5a      	subs	r2, r3, #1
 80083d2:	61fa      	str	r2, [r7, #28]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d102      	bne.n	80083de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083dc:	e0c9      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0ef      	beq.n	80083ce <SDMMC_GetCmdResp1+0x22>
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1ea      	bne.n	80083ce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2204      	movs	r2, #4
 8008408:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800840a:	2304      	movs	r3, #4
 800840c:	e0b1      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d004      	beq.n	8008424 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008420:	2301      	movs	r3, #1
 8008422:	e0a6      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	22c5      	movs	r2, #197	; 0xc5
 8008428:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff fd11 	bl	8007e52 <SDIO_GetCommandResponse>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	4293      	cmp	r3, r2
 8008438:	d001      	beq.n	800843e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800843a:	2301      	movs	r3, #1
 800843c:	e099      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800843e:	2100      	movs	r1, #0
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fd13 	bl	8007e6c <SDIO_GetResponse>
 8008446:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4b4e      	ldr	r3, [pc, #312]	; (8008584 <SDMMC_GetCmdResp1+0x1d8>)
 800844c:	4013      	ands	r3, r2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008452:	2300      	movs	r3, #0
 8008454:	e08d      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	da02      	bge.n	8008462 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800845c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008460:	e087      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	e080      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800847a:	2380      	movs	r3, #128	; 0x80
 800847c:	e079      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800848c:	e071      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800849c:	e069      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80084a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ac:	e061      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80084b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084bc:	e059      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80084c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084cc:	e051      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80084d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084dc:	e049      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80084e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084ec:	e041      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80084f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084fc:	e039      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800850c:	e031      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008518:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800851c:	e029      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008528:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800852c:	e021      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008538:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800853c:	e019      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008548:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800854c:	e011      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008558:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800855c:	e009      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008568:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800856c:	e001      	b.n	8008572 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800856e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008572:	4618      	mov	r0, r3
 8008574:	3720      	adds	r7, #32
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000050 	.word	0x20000050
 8008580:	10624dd3 	.word	0x10624dd3
 8008584:	fdffe008 	.word	0xfdffe008

08008588 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008590:	4b1f      	ldr	r3, [pc, #124]	; (8008610 <SDMMC_GetCmdResp2+0x88>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a1f      	ldr	r2, [pc, #124]	; (8008614 <SDMMC_GetCmdResp2+0x8c>)
 8008596:	fba2 2303 	umull	r2, r3, r2, r3
 800859a:	0a5b      	lsrs	r3, r3, #9
 800859c:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a0:	fb02 f303 	mul.w	r3, r2, r3
 80085a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	1e5a      	subs	r2, r3, #1
 80085aa:	60fa      	str	r2, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d102      	bne.n	80085b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085b4:	e026      	b.n	8008604 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0ef      	beq.n	80085a6 <SDMMC_GetCmdResp2+0x1e>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1ea      	bne.n	80085a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2204      	movs	r2, #4
 80085e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085e2:	2304      	movs	r3, #4
 80085e4:	e00e      	b.n	8008604 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d004      	beq.n	80085fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e003      	b.n	8008604 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	22c5      	movs	r2, #197	; 0xc5
 8008600:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	20000050 	.word	0x20000050
 8008614:	10624dd3 	.word	0x10624dd3

08008618 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008620:	4b1a      	ldr	r3, [pc, #104]	; (800868c <SDMMC_GetCmdResp3+0x74>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a1a      	ldr	r2, [pc, #104]	; (8008690 <SDMMC_GetCmdResp3+0x78>)
 8008626:	fba2 2303 	umull	r2, r3, r2, r3
 800862a:	0a5b      	lsrs	r3, r3, #9
 800862c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008630:	fb02 f303 	mul.w	r3, r2, r3
 8008634:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	1e5a      	subs	r2, r3, #1
 800863a:	60fa      	str	r2, [r7, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008640:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008644:	e01b      	b.n	800867e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0ef      	beq.n	8008636 <SDMMC_GetCmdResp3+0x1e>
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1ea      	bne.n	8008636 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2204      	movs	r2, #4
 8008670:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008672:	2304      	movs	r3, #4
 8008674:	e003      	b.n	800867e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	22c5      	movs	r2, #197	; 0xc5
 800867a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000050 	.word	0x20000050
 8008690:	10624dd3 	.word	0x10624dd3

08008694 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	460b      	mov	r3, r1
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086a2:	4b35      	ldr	r3, [pc, #212]	; (8008778 <SDMMC_GetCmdResp6+0xe4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a35      	ldr	r2, [pc, #212]	; (800877c <SDMMC_GetCmdResp6+0xe8>)
 80086a8:	fba2 2303 	umull	r2, r3, r2, r3
 80086ac:	0a5b      	lsrs	r3, r3, #9
 80086ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b2:	fb02 f303 	mul.w	r3, r2, r3
 80086b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	1e5a      	subs	r2, r3, #1
 80086bc:	61fa      	str	r2, [r7, #28]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086c6:	e052      	b.n	800876e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0ef      	beq.n	80086b8 <SDMMC_GetCmdResp6+0x24>
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1ea      	bne.n	80086b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2204      	movs	r2, #4
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086f4:	2304      	movs	r3, #4
 80086f6:	e03a      	b.n	800876e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800870a:	2301      	movs	r3, #1
 800870c:	e02f      	b.n	800876e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fb9f 	bl	8007e52 <SDIO_GetCommandResponse>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	4293      	cmp	r3, r2
 800871c:	d001      	beq.n	8008722 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800871e:	2301      	movs	r3, #1
 8008720:	e025      	b.n	800876e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	22c5      	movs	r2, #197	; 0xc5
 8008726:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008728:	2100      	movs	r1, #0
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff fb9e 	bl	8007e6c <SDIO_GetResponse>
 8008730:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	0c1b      	lsrs	r3, r3, #16
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008746:	2300      	movs	r3, #0
 8008748:	e011      	b.n	800876e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008758:	e009      	b.n	800876e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008768:	e001      	b.n	800876e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800876a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800876e:	4618      	mov	r0, r3
 8008770:	3720      	adds	r7, #32
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20000050 	.word	0x20000050
 800877c:	10624dd3 	.word	0x10624dd3

08008780 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008788:	4b22      	ldr	r3, [pc, #136]	; (8008814 <SDMMC_GetCmdResp7+0x94>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a22      	ldr	r2, [pc, #136]	; (8008818 <SDMMC_GetCmdResp7+0x98>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	0a5b      	lsrs	r3, r3, #9
 8008794:	f241 3288 	movw	r2, #5000	; 0x1388
 8008798:	fb02 f303 	mul.w	r3, r2, r3
 800879c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	1e5a      	subs	r2, r3, #1
 80087a2:	60fa      	str	r2, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d102      	bne.n	80087ae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087ac:	e02c      	b.n	8008808 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0ef      	beq.n	800879e <SDMMC_GetCmdResp7+0x1e>
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1ea      	bne.n	800879e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d004      	beq.n	80087de <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2204      	movs	r2, #4
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087da:	2304      	movs	r3, #4
 80087dc:	e014      	b.n	8008808 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d004      	beq.n	80087f4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e009      	b.n	8008808 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2240      	movs	r2, #64	; 0x40
 8008804:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008806:	2300      	movs	r3, #0
  
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	20000050 	.word	0x20000050
 8008818:	10624dd3 	.word	0x10624dd3

0800881c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800881c:	b084      	sub	sp, #16
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	f107 001c 	add.w	r0, r7, #28
 800882a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	2b01      	cmp	r3, #1
 8008832:	d122      	bne.n	800887a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800885c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885e:	2b01      	cmp	r3, #1
 8008860:	d105      	bne.n	800886e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 fac6 	bl	8009e00 <USB_CoreReset>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
 8008878:	e01a      	b.n	80088b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 faba 	bl	8009e00 <USB_CoreReset>
 800888c:	4603      	mov	r3, r0
 800888e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	639a      	str	r2, [r3, #56]	; 0x38
 80088a2:	e005      	b.n	80088b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d10b      	bne.n	80088ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f043 0206 	orr.w	r2, r3, #6
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f043 0220 	orr.w	r2, r3, #32
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088da:	b004      	add	sp, #16
 80088dc:	4770      	bx	lr
	...

080088e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	4613      	mov	r3, r2
 80088ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d165      	bne.n	80089c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	4a41      	ldr	r2, [pc, #260]	; (80089fc <USB_SetTurnaroundTime+0x11c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d906      	bls.n	800890a <USB_SetTurnaroundTime+0x2a>
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4a40      	ldr	r2, [pc, #256]	; (8008a00 <USB_SetTurnaroundTime+0x120>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d202      	bcs.n	800890a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008904:	230f      	movs	r3, #15
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	e062      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	4a3c      	ldr	r2, [pc, #240]	; (8008a00 <USB_SetTurnaroundTime+0x120>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d306      	bcc.n	8008920 <USB_SetTurnaroundTime+0x40>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	4a3b      	ldr	r2, [pc, #236]	; (8008a04 <USB_SetTurnaroundTime+0x124>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d202      	bcs.n	8008920 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800891a:	230e      	movs	r3, #14
 800891c:	617b      	str	r3, [r7, #20]
 800891e:	e057      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4a38      	ldr	r2, [pc, #224]	; (8008a04 <USB_SetTurnaroundTime+0x124>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d306      	bcc.n	8008936 <USB_SetTurnaroundTime+0x56>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	4a37      	ldr	r2, [pc, #220]	; (8008a08 <USB_SetTurnaroundTime+0x128>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d202      	bcs.n	8008936 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008930:	230d      	movs	r3, #13
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	e04c      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	4a33      	ldr	r2, [pc, #204]	; (8008a08 <USB_SetTurnaroundTime+0x128>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d306      	bcc.n	800894c <USB_SetTurnaroundTime+0x6c>
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	4a32      	ldr	r2, [pc, #200]	; (8008a0c <USB_SetTurnaroundTime+0x12c>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d802      	bhi.n	800894c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008946:	230c      	movs	r3, #12
 8008948:	617b      	str	r3, [r7, #20]
 800894a:	e041      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	4a2f      	ldr	r2, [pc, #188]	; (8008a0c <USB_SetTurnaroundTime+0x12c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d906      	bls.n	8008962 <USB_SetTurnaroundTime+0x82>
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4a2e      	ldr	r2, [pc, #184]	; (8008a10 <USB_SetTurnaroundTime+0x130>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d802      	bhi.n	8008962 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800895c:	230b      	movs	r3, #11
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	e036      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	4a2a      	ldr	r2, [pc, #168]	; (8008a10 <USB_SetTurnaroundTime+0x130>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d906      	bls.n	8008978 <USB_SetTurnaroundTime+0x98>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4a29      	ldr	r2, [pc, #164]	; (8008a14 <USB_SetTurnaroundTime+0x134>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d802      	bhi.n	8008978 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008972:	230a      	movs	r3, #10
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	e02b      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <USB_SetTurnaroundTime+0x134>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d906      	bls.n	800898e <USB_SetTurnaroundTime+0xae>
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <USB_SetTurnaroundTime+0x138>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d202      	bcs.n	800898e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008988:	2309      	movs	r3, #9
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	e020      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	4a21      	ldr	r2, [pc, #132]	; (8008a18 <USB_SetTurnaroundTime+0x138>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d306      	bcc.n	80089a4 <USB_SetTurnaroundTime+0xc4>
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4a20      	ldr	r2, [pc, #128]	; (8008a1c <USB_SetTurnaroundTime+0x13c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d802      	bhi.n	80089a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800899e:	2308      	movs	r3, #8
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	e015      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4a1d      	ldr	r2, [pc, #116]	; (8008a1c <USB_SetTurnaroundTime+0x13c>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d906      	bls.n	80089ba <USB_SetTurnaroundTime+0xda>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	4a1c      	ldr	r2, [pc, #112]	; (8008a20 <USB_SetTurnaroundTime+0x140>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d202      	bcs.n	80089ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80089b4:	2307      	movs	r3, #7
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	e00a      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80089ba:	2306      	movs	r3, #6
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	e007      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d102      	bne.n	80089cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80089c6:	2309      	movs	r3, #9
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	e001      	b.n	80089d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80089cc:	2309      	movs	r3, #9
 80089ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	029b      	lsls	r3, r3, #10
 80089e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80089e8:	431a      	orrs	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	371c      	adds	r7, #28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	00d8acbf 	.word	0x00d8acbf
 8008a00:	00e4e1c0 	.word	0x00e4e1c0
 8008a04:	00f42400 	.word	0x00f42400
 8008a08:	01067380 	.word	0x01067380
 8008a0c:	011a499f 	.word	0x011a499f
 8008a10:	01312cff 	.word	0x01312cff
 8008a14:	014ca43f 	.word	0x014ca43f
 8008a18:	016e3600 	.word	0x016e3600
 8008a1c:	01a6ab1f 	.word	0x01a6ab1f
 8008a20:	01e84800 	.word	0x01e84800

08008a24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f043 0201 	orr.w	r2, r3, #1
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f023 0201 	bic.w	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d106      	bne.n	8008a94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	e00b      	b.n	8008aac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d106      	bne.n	8008aa8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	60da      	str	r2, [r3, #12]
 8008aa6:	e001      	b.n	8008aac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e003      	b.n	8008ab4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008aac:	2032      	movs	r0, #50	; 0x32
 8008aae:	f7fa fb59 	bl	8003164 <HAL_Delay>

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008abc:	b084      	sub	sp, #16
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	e009      	b.n	8008af0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	3340      	adds	r3, #64	; 0x40
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3301      	adds	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	2b0e      	cmp	r3, #14
 8008af4:	d9f2      	bls.n	8008adc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d11c      	bne.n	8008b36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b0a:	f043 0302 	orr.w	r3, r3, #2
 8008b0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	639a      	str	r2, [r3, #56]	; 0x38
 8008b34:	e00b      	b.n	8008b4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b54:	461a      	mov	r2, r3
 8008b56:	2300      	movs	r3, #0
 8008b58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b60:	4619      	mov	r1, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b68:	461a      	mov	r2, r3
 8008b6a:	680b      	ldr	r3, [r1, #0]
 8008b6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d10c      	bne.n	8008b8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d104      	bne.n	8008b84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f949 	bl	8008e14 <USB_SetDevSpeed>
 8008b82:	e008      	b.n	8008b96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b84:	2101      	movs	r1, #1
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f944 	bl	8008e14 <USB_SetDevSpeed>
 8008b8c:	e003      	b.n	8008b96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b8e:	2103      	movs	r1, #3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f93f 	bl	8008e14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b96:	2110      	movs	r1, #16
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f8f3 	bl	8008d84 <USB_FlushTxFifo>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f911 	bl	8008dd0 <USB_FlushRxFifo>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bca:	461a      	mov	r2, r3
 8008bcc:	2300      	movs	r3, #0
 8008bce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
 8008be0:	e043      	b.n	8008c6a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bf8:	d118      	bne.n	8008c2c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	e013      	b.n	8008c3e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c22:	461a      	mov	r2, r3
 8008c24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	e008      	b.n	8008c3e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c38:	461a      	mov	r2, r3
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	3301      	adds	r3, #1
 8008c68:	613b      	str	r3, [r7, #16]
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d3b7      	bcc.n	8008be2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c72:	2300      	movs	r3, #0
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	e043      	b.n	8008d00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c8e:	d118      	bne.n	8008cc2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10a      	bne.n	8008cac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	e013      	b.n	8008cd4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb8:	461a      	mov	r2, r3
 8008cba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	e008      	b.n	8008cd4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cce:	461a      	mov	r2, r3
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d3b7      	bcc.n	8008c78 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d105      	bne.n	8008d3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	f043 0210 	orr.w	r2, r3, #16
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	699a      	ldr	r2, [r3, #24]
 8008d40:	4b0f      	ldr	r3, [pc, #60]	; (8008d80 <USB_DevInit+0x2c4>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d005      	beq.n	8008d5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	f043 0208 	orr.w	r2, r3, #8
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d107      	bne.n	8008d70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d68:	f043 0304 	orr.w	r3, r3, #4
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d7c:	b004      	add	sp, #16
 8008d7e:	4770      	bx	lr
 8008d80:	803c3800 	.word	0x803c3800

08008d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	019b      	lsls	r3, r3, #6
 8008d96:	f043 0220 	orr.w	r2, r3, #32
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3301      	adds	r3, #1
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4a09      	ldr	r2, [pc, #36]	; (8008dcc <USB_FlushTxFifo+0x48>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d901      	bls.n	8008db0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e006      	b.n	8008dbe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	d0f0      	beq.n	8008d9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	00030d40 	.word	0x00030d40

08008dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2210      	movs	r2, #16
 8008de0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3301      	adds	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <USB_FlushRxFifo+0x40>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d901      	bls.n	8008df4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e006      	b.n	8008e02 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	f003 0310 	and.w	r3, r3, #16
 8008dfc:	2b10      	cmp	r3, #16
 8008dfe:	d0f0      	beq.n	8008de2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	00030d40 	.word	0x00030d40

08008e14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e34:	4313      	orrs	r3, r2
 8008e36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b087      	sub	sp, #28
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f003 0306 	and.w	r3, r3, #6
 8008e5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d102      	bne.n	8008e6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
 8008e6a:	e00a      	b.n	8008e82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d002      	beq.n	8008e78 <USB_GetDevSpeed+0x32>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b06      	cmp	r3, #6
 8008e76:	d102      	bne.n	8008e7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	75fb      	strb	r3, [r7, #23]
 8008e7c:	e001      	b.n	8008e82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008e7e:	230f      	movs	r3, #15
 8008e80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	371c      	adds	r7, #28
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	785b      	ldrb	r3, [r3, #1]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d13a      	bne.n	8008f22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb2:	69da      	ldr	r2, [r3, #28]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	68f9      	ldr	r1, [r7, #12]
 8008ec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d155      	bne.n	8008f90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	78db      	ldrb	r3, [r3, #3]
 8008efe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	059b      	lsls	r3, r3, #22
 8008f06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	0151      	lsls	r1, r2, #5
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	440a      	add	r2, r1
 8008f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	e036      	b.n	8008f90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f28:	69da      	ldr	r2, [r3, #28]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	f003 030f 	and.w	r3, r3, #15
 8008f32:	2101      	movs	r1, #1
 8008f34:	fa01 f303 	lsl.w	r3, r1, r3
 8008f38:	041b      	lsls	r3, r3, #16
 8008f3a:	68f9      	ldr	r1, [r7, #12]
 8008f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f40:	4313      	orrs	r3, r2
 8008f42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d11a      	bne.n	8008f90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	78db      	ldrb	r3, [r3, #3]
 8008f74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f76:	430b      	orrs	r3, r1
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
	...

08008fa0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d161      	bne.n	8009080 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fd2:	d11f      	bne.n	8009014 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	0151      	lsls	r1, r2, #5
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	440a      	add	r2, r1
 8008fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ff2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	0151      	lsls	r1, r2, #5
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	440a      	add	r2, r1
 800900a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800900e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009012:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800901a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	2101      	movs	r1, #1
 8009026:	fa01 f303 	lsl.w	r3, r1, r3
 800902a:	b29b      	uxth	r3, r3
 800902c:	43db      	mvns	r3, r3
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009034:	4013      	ands	r3, r2
 8009036:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903e:	69da      	ldr	r2, [r3, #28]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	f003 030f 	and.w	r3, r3, #15
 8009048:	2101      	movs	r1, #1
 800904a:	fa01 f303 	lsl.w	r3, r1, r3
 800904e:	b29b      	uxth	r3, r3
 8009050:	43db      	mvns	r3, r3
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009058:	4013      	ands	r3, r2
 800905a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	0159      	lsls	r1, r3, #5
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	440b      	add	r3, r1
 8009072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009076:	4619      	mov	r1, r3
 8009078:	4b35      	ldr	r3, [pc, #212]	; (8009150 <USB_DeactivateEndpoint+0x1b0>)
 800907a:	4013      	ands	r3, r2
 800907c:	600b      	str	r3, [r1, #0]
 800907e:	e060      	b.n	8009142 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009096:	d11f      	bne.n	80090d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f003 030f 	and.w	r3, r3, #15
 80090e8:	2101      	movs	r1, #1
 80090ea:	fa01 f303 	lsl.w	r3, r1, r3
 80090ee:	041b      	lsls	r3, r3, #16
 80090f0:	43db      	mvns	r3, r3
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090f8:	4013      	ands	r3, r2
 80090fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009102:	69da      	ldr	r2, [r3, #28]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	f003 030f 	and.w	r3, r3, #15
 800910c:	2101      	movs	r1, #1
 800910e:	fa01 f303 	lsl.w	r3, r1, r3
 8009112:	041b      	lsls	r3, r3, #16
 8009114:	43db      	mvns	r3, r3
 8009116:	68f9      	ldr	r1, [r7, #12]
 8009118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800911c:	4013      	ands	r3, r2
 800911e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4413      	add	r3, r2
 8009128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	0159      	lsls	r1, r3, #5
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	440b      	add	r3, r1
 8009136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913a:	4619      	mov	r1, r3
 800913c:	4b05      	ldr	r3, [pc, #20]	; (8009154 <USB_DeactivateEndpoint+0x1b4>)
 800913e:	4013      	ands	r3, r2
 8009140:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	ec337800 	.word	0xec337800
 8009154:	eff37800 	.word	0xeff37800

08009158 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08a      	sub	sp, #40	; 0x28
 800915c:	af02      	add	r7, sp, #8
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	785b      	ldrb	r3, [r3, #1]
 8009174:	2b01      	cmp	r3, #1
 8009176:	f040 815c 	bne.w	8009432 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d132      	bne.n	80091e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	69fa      	ldr	r2, [r7, #28]
 8009196:	440a      	add	r2, r1
 8009198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800919c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	69fa      	ldr	r2, [r7, #28]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	0151      	lsls	r1, r2, #5
 80091d8:	69fa      	ldr	r2, [r7, #28]
 80091da:	440a      	add	r2, r1
 80091dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e0:	0cdb      	lsrs	r3, r3, #19
 80091e2:	04db      	lsls	r3, r3, #19
 80091e4:	6113      	str	r3, [r2, #16]
 80091e6:	e074      	b.n	80092d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	0151      	lsls	r1, r2, #5
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	440a      	add	r2, r1
 80091fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009202:	0cdb      	lsrs	r3, r3, #19
 8009204:	04db      	lsls	r3, r3, #19
 8009206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	440a      	add	r2, r1
 800921e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009222:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009226:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800922a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	691a      	ldr	r2, [r3, #16]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	6959      	ldr	r1, [r3, #20]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	440b      	add	r3, r1
 8009244:	1e59      	subs	r1, r3, #1
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	fbb1 f3f3 	udiv	r3, r1, r3
 800924e:	04d9      	lsls	r1, r3, #19
 8009250:	4b9d      	ldr	r3, [pc, #628]	; (80094c8 <USB_EPStartXfer+0x370>)
 8009252:	400b      	ands	r3, r1
 8009254:	69b9      	ldr	r1, [r7, #24]
 8009256:	0148      	lsls	r0, r1, #5
 8009258:	69f9      	ldr	r1, [r7, #28]
 800925a:	4401      	add	r1, r0
 800925c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009260:	4313      	orrs	r3, r2
 8009262:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009270:	691a      	ldr	r2, [r3, #16]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800927a:	69b9      	ldr	r1, [r7, #24]
 800927c:	0148      	lsls	r0, r1, #5
 800927e:	69f9      	ldr	r1, [r7, #28]
 8009280:	4401      	add	r1, r0
 8009282:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009286:	4313      	orrs	r3, r2
 8009288:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	78db      	ldrb	r3, [r3, #3]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d11f      	bne.n	80092d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	69ba      	ldr	r2, [r7, #24]
 80092a2:	0151      	lsls	r1, r2, #5
 80092a4:	69fa      	ldr	r2, [r7, #28]
 80092a6:	440a      	add	r2, r1
 80092a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80092b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	0151      	lsls	r1, r2, #5
 80092c4:	69fa      	ldr	r2, [r7, #28]
 80092c6:	440a      	add	r2, r1
 80092c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d14b      	bne.n	8009370 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ec:	461a      	mov	r2, r3
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	78db      	ldrb	r3, [r3, #3]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d128      	bne.n	800934e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009308:	2b00      	cmp	r3, #0
 800930a:	d110      	bne.n	800932e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	69fa      	ldr	r2, [r7, #28]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	e00f      	b.n	800934e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	69ba      	ldr	r2, [r7, #24]
 800933e:	0151      	lsls	r1, r2, #5
 8009340:	69fa      	ldr	r2, [r7, #28]
 8009342:	440a      	add	r2, r1
 8009344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800934c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	440a      	add	r2, r1
 8009364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009368:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800936c:	6013      	str	r3, [r2, #0]
 800936e:	e12f      	b.n	80095d0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800938a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800938e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	78db      	ldrb	r3, [r3, #3]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d015      	beq.n	80093c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 8117 	beq.w	80095d0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	2101      	movs	r1, #1
 80093b4:	fa01 f303 	lsl.w	r3, r1, r3
 80093b8:	69f9      	ldr	r1, [r7, #28]
 80093ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093be:	4313      	orrs	r3, r2
 80093c0:	634b      	str	r3, [r1, #52]	; 0x34
 80093c2:	e105      	b.n	80095d0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d110      	bne.n	80093f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	0151      	lsls	r1, r2, #5
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	440a      	add	r2, r1
 80093ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	e00f      	b.n	8009416 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	0151      	lsls	r1, r2, #5
 8009408:	69fa      	ldr	r2, [r7, #28]
 800940a:	440a      	add	r2, r1
 800940c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009414:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	68d9      	ldr	r1, [r3, #12]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	781a      	ldrb	r2, [r3, #0]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	b298      	uxth	r0, r3
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	4603      	mov	r3, r0
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 fa2b 	bl	8009886 <USB_WritePacket>
 8009430:	e0ce      	b.n	80095d0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	69fa      	ldr	r2, [r7, #28]
 8009446:	440a      	add	r2, r1
 8009448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800944c:	0cdb      	lsrs	r3, r3, #19
 800944e:	04db      	lsls	r3, r3, #19
 8009450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	69fa      	ldr	r2, [r7, #28]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009474:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d126      	bne.n	80094cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948a:	691a      	ldr	r2, [r3, #16]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009494:	69b9      	ldr	r1, [r7, #24]
 8009496:	0148      	lsls	r0, r1, #5
 8009498:	69f9      	ldr	r1, [r7, #28]
 800949a:	4401      	add	r1, r0
 800949c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094a0:	4313      	orrs	r3, r2
 80094a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	69ba      	ldr	r2, [r7, #24]
 80094b4:	0151      	lsls	r1, r2, #5
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	440a      	add	r2, r1
 80094ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094c2:	6113      	str	r3, [r2, #16]
 80094c4:	e036      	b.n	8009534 <USB_EPStartXfer+0x3dc>
 80094c6:	bf00      	nop
 80094c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	695a      	ldr	r2, [r3, #20]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	4413      	add	r3, r2
 80094d6:	1e5a      	subs	r2, r3, #1
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ee:	691a      	ldr	r2, [r3, #16]
 80094f0:	8afb      	ldrh	r3, [r7, #22]
 80094f2:	04d9      	lsls	r1, r3, #19
 80094f4:	4b39      	ldr	r3, [pc, #228]	; (80095dc <USB_EPStartXfer+0x484>)
 80094f6:	400b      	ands	r3, r1
 80094f8:	69b9      	ldr	r1, [r7, #24]
 80094fa:	0148      	lsls	r0, r1, #5
 80094fc:	69f9      	ldr	r1, [r7, #28]
 80094fe:	4401      	add	r1, r0
 8009500:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009504:	4313      	orrs	r3, r2
 8009506:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009514:	691a      	ldr	r2, [r3, #16]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	8af9      	ldrh	r1, [r7, #22]
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009524:	69b9      	ldr	r1, [r7, #24]
 8009526:	0148      	lsls	r0, r1, #5
 8009528:	69f9      	ldr	r1, [r7, #28]
 800952a:	4401      	add	r1, r0
 800952c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009530:	4313      	orrs	r3, r2
 8009532:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d10d      	bne.n	8009556 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d009      	beq.n	8009556 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	68d9      	ldr	r1, [r3, #12]
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009552:	460a      	mov	r2, r1
 8009554:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	78db      	ldrb	r3, [r3, #3]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d128      	bne.n	80095b0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956a:	2b00      	cmp	r3, #0
 800956c:	d110      	bne.n	8009590 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4413      	add	r3, r2
 8009576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	0151      	lsls	r1, r2, #5
 8009580:	69fa      	ldr	r2, [r7, #28]
 8009582:	440a      	add	r2, r1
 8009584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009588:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	e00f      	b.n	80095b0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	0151      	lsls	r1, r2, #5
 80095a2:	69fa      	ldr	r2, [r7, #28]
 80095a4:	440a      	add	r2, r1
 80095a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	0151      	lsls	r1, r2, #5
 80095c2:	69fa      	ldr	r2, [r7, #28]
 80095c4:	440a      	add	r2, r1
 80095c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	1ff80000 	.word	0x1ff80000

080095e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	f040 80cd 	bne.w	800979c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d132      	bne.n	8009670 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	0151      	lsls	r1, r2, #5
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	440a      	add	r2, r1
 8009620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800962c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	015a      	lsls	r2, r3, #5
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	4413      	add	r3, r2
 8009636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	0151      	lsls	r1, r2, #5
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	440a      	add	r2, r1
 8009644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800964c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	4413      	add	r3, r2
 8009656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	0151      	lsls	r1, r2, #5
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	440a      	add	r2, r1
 8009664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009668:	0cdb      	lsrs	r3, r3, #19
 800966a:	04db      	lsls	r3, r3, #19
 800966c:	6113      	str	r3, [r2, #16]
 800966e:	e04e      	b.n	800970e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	4413      	add	r3, r2
 8009678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	0151      	lsls	r1, r2, #5
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	440a      	add	r2, r1
 8009686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968a:	0cdb      	lsrs	r3, r3, #19
 800968c:	04db      	lsls	r3, r3, #19
 800968e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	0151      	lsls	r1, r2, #5
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	440a      	add	r2, r1
 80096a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	695a      	ldr	r2, [r3, #20]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d903      	bls.n	80096c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	0151      	lsls	r1, r2, #5
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	440a      	add	r2, r1
 80096de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f4:	691a      	ldr	r2, [r3, #16]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096fe:	6939      	ldr	r1, [r7, #16]
 8009700:	0148      	lsls	r0, r1, #5
 8009702:	6979      	ldr	r1, [r7, #20]
 8009704:	4401      	add	r1, r0
 8009706:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800970a:	4313      	orrs	r3, r2
 800970c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d11e      	bne.n	8009752 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d009      	beq.n	8009730 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	461a      	mov	r2, r3
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	440a      	add	r2, r1
 8009746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800974a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	e092      	b.n	8009878 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	440a      	add	r2, r1
 8009768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009770:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d07e      	beq.n	8009878 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	f003 030f 	and.w	r3, r3, #15
 800978a:	2101      	movs	r1, #1
 800978c:	fa01 f303 	lsl.w	r3, r1, r3
 8009790:	6979      	ldr	r1, [r7, #20]
 8009792:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009796:	4313      	orrs	r3, r2
 8009798:	634b      	str	r3, [r1, #52]	; 0x34
 800979a:	e06d      	b.n	8009878 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	0151      	lsls	r1, r2, #5
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	440a      	add	r2, r1
 80097b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b6:	0cdb      	lsrs	r3, r3, #19
 80097b8:	04db      	lsls	r3, r3, #19
 80097ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	0151      	lsls	r1, r2, #5
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	440a      	add	r2, r1
 80097d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097de:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d003      	beq.n	80097f0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	689a      	ldr	r2, [r3, #8]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	0151      	lsls	r1, r2, #5
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	440a      	add	r2, r1
 8009806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800980a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800980e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981c:	691a      	ldr	r2, [r3, #16]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009826:	6939      	ldr	r1, [r7, #16]
 8009828:	0148      	lsls	r0, r1, #5
 800982a:	6979      	ldr	r1, [r7, #20]
 800982c:	4401      	add	r1, r0
 800982e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009832:	4313      	orrs	r3, r2
 8009834:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009836:	79fb      	ldrb	r3, [r7, #7]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d10d      	bne.n	8009858 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d009      	beq.n	8009858 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	68d9      	ldr	r1, [r3, #12]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	4413      	add	r3, r2
 8009850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009854:	460a      	mov	r2, r1
 8009856:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	0151      	lsls	r1, r2, #5
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	440a      	add	r2, r1
 800986e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009872:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009876:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009886:	b480      	push	{r7}
 8009888:	b089      	sub	sp, #36	; 0x24
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	4611      	mov	r1, r2
 8009892:	461a      	mov	r2, r3
 8009894:	460b      	mov	r3, r1
 8009896:	71fb      	strb	r3, [r7, #7]
 8009898:	4613      	mov	r3, r2
 800989a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80098a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d11a      	bne.n	80098e2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80098ac:	88bb      	ldrh	r3, [r7, #4]
 80098ae:	3303      	adds	r3, #3
 80098b0:	089b      	lsrs	r3, r3, #2
 80098b2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80098b4:	2300      	movs	r3, #0
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	e00f      	b.n	80098da <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	031a      	lsls	r2, r3, #12
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c6:	461a      	mov	r2, r3
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	3304      	adds	r3, #4
 80098d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	3301      	adds	r3, #1
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d3eb      	bcc.n	80098ba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3724      	adds	r7, #36	; 0x24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b089      	sub	sp, #36	; 0x24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	3303      	adds	r3, #3
 800990a:	089b      	lsrs	r3, r3, #2
 800990c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800990e:	2300      	movs	r3, #0
 8009910:	61bb      	str	r3, [r7, #24]
 8009912:	e00b      	b.n	800992c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	3304      	adds	r3, #4
 8009924:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	3301      	adds	r3, #1
 800992a:	61bb      	str	r3, [r7, #24]
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	429a      	cmp	r2, r3
 8009932:	d3ef      	bcc.n	8009914 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009934:	69fb      	ldr	r3, [r7, #28]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3724      	adds	r7, #36	; 0x24
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d12c      	bne.n	80099b8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	db12      	blt.n	8009996 <USB_EPSetStall+0x54>
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00f      	beq.n	8009996 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	0151      	lsls	r1, r2, #5
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	440a      	add	r2, r1
 800998c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009990:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009994:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4413      	add	r3, r2
 800999e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	0151      	lsls	r1, r2, #5
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	440a      	add	r2, r1
 80099ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	e02b      	b.n	8009a10 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	db12      	blt.n	80099f0 <USB_EPSetStall+0xae>
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00f      	beq.n	80099f0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099ee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	0151      	lsls	r1, r2, #5
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	440a      	add	r2, r1
 8009a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b085      	sub	sp, #20
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d128      	bne.n	8009a8c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	0151      	lsls	r1, r2, #5
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	440a      	add	r2, r1
 8009a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	78db      	ldrb	r3, [r3, #3]
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d003      	beq.n	8009a6a <USB_EPClearStall+0x4c>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	78db      	ldrb	r3, [r3, #3]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d138      	bne.n	8009adc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	0151      	lsls	r1, r2, #5
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	440a      	add	r2, r1
 8009a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	e027      	b.n	8009adc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	0151      	lsls	r1, r2, #5
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	440a      	add	r2, r1
 8009aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009aaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	78db      	ldrb	r3, [r3, #3]
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d003      	beq.n	8009abc <USB_EPClearStall+0x9e>
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	78db      	ldrb	r3, [r3, #3]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d10f      	bne.n	8009adc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	015a      	lsls	r2, r3, #5
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	0151      	lsls	r1, r2, #5
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	440a      	add	r2, r1
 8009ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ada:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b085      	sub	sp, #20
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b0c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	78fb      	ldrb	r3, [r7, #3]
 8009b18:	011b      	lsls	r3, r3, #4
 8009b1a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009b1e:	68f9      	ldr	r1, [r7, #12]
 8009b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b24:	4313      	orrs	r3, r2
 8009b26:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b085      	sub	sp, #20
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b50:	f023 0303 	bic.w	r3, r3, #3
 8009b54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b64:	f023 0302 	bic.w	r3, r3, #2
 8009b68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ba6:	f043 0302 	orr.w	r3, r3, #2
 8009baa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	4013      	ands	r3, r2
 8009c02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	0c1b      	lsrs	r3, r3, #16
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c30:	69db      	ldr	r3, [r3, #28]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	4013      	ands	r3, r2
 8009c36:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	b29b      	uxth	r3, r3
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	4013      	ands	r3, r2
 8009c74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c76:	68bb      	ldr	r3, [r7, #8]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ca8:	78fb      	ldrb	r3, [r7, #3]
 8009caa:	f003 030f 	and.w	r3, r3, #15
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb4:	01db      	lsls	r3, r3, #7
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	015a      	lsls	r2, r3, #5
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	4013      	ands	r3, r2
 8009cd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	371c      	adds	r7, #28
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	f003 0301 	and.w	r3, r3, #1
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009d1a:	f023 0307 	bic.w	r3, r3, #7
 8009d1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
	...

08009d44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	333c      	adds	r3, #60	; 0x3c
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	4a26      	ldr	r2, [pc, #152]	; (8009dfc <USB_EP0_OutStart+0xb8>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d90a      	bls.n	8009d7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d78:	d101      	bne.n	8009d7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e037      	b.n	8009dee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d84:	461a      	mov	r2, r3
 8009d86:	2300      	movs	r3, #0
 8009d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dac:	f043 0318 	orr.w	r3, r3, #24
 8009db0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009dc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009dc6:	7afb      	ldrb	r3, [r7, #11]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d10f      	bne.n	8009dec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009de6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009dea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	4f54300a 	.word	0x4f54300a

08009e00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	4a13      	ldr	r2, [pc, #76]	; (8009e64 <USB_CoreReset+0x64>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d901      	bls.n	8009e1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e01b      	b.n	8009e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	daf2      	bge.n	8009e0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f043 0201 	orr.w	r2, r3, #1
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4a09      	ldr	r2, [pc, #36]	; (8009e64 <USB_CoreReset+0x64>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d901      	bls.n	8009e48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e006      	b.n	8009e56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d0f0      	beq.n	8009e36 <USB_CoreReset+0x36>

  return HAL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	00030d40 	.word	0x00030d40

08009e68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009e6c:	4904      	ldr	r1, [pc, #16]	; (8009e80 <MX_FATFS_Init+0x18>)
 8009e6e:	4805      	ldr	r0, [pc, #20]	; (8009e84 <MX_FATFS_Init+0x1c>)
 8009e70:	f004 fd00 	bl	800e874 <FATFS_LinkDriver>
 8009e74:	4603      	mov	r3, r0
 8009e76:	461a      	mov	r2, r3
 8009e78:	4b03      	ldr	r3, [pc, #12]	; (8009e88 <MX_FATFS_Init+0x20>)
 8009e7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009e7c:	bf00      	nop
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	20002790 	.word	0x20002790
 8009e84:	080156bc 	.word	0x080156bc
 8009e88:	2000278c 	.word	0x2000278c

08009e8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009e90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009ea6:	f000 f879 	bl	8009f9c <BSP_SD_IsDetected>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d001      	beq.n	8009eb4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e012      	b.n	8009eda <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009eb4:	480b      	ldr	r0, [pc, #44]	; (8009ee4 <BSP_SD_Init+0x48>)
 8009eb6:	f7fc fdb4 	bl	8006a22 <HAL_SD_Init>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d109      	bne.n	8009ed8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ec8:	4806      	ldr	r0, [pc, #24]	; (8009ee4 <BSP_SD_Init+0x48>)
 8009eca:	f7fd fb8d 	bl	80075e8 <HAL_SD_ConfigWideBusOperation>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009ed8:	79fb      	ldrb	r3, [r7, #7]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20002704 	.word	0x20002704

08009ee8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af02      	add	r7, sp, #8
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	68f9      	ldr	r1, [r7, #12]
 8009f04:	4806      	ldr	r0, [pc, #24]	; (8009f20 <BSP_SD_ReadBlocks+0x38>)
 8009f06:	f7fc fe3b 	bl	8006b80 <HAL_SD_ReadBlocks>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20002704 	.word	0x20002704

08009f24 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	68f9      	ldr	r1, [r7, #12]
 8009f40:	4806      	ldr	r0, [pc, #24]	; (8009f5c <BSP_SD_WriteBlocks+0x38>)
 8009f42:	f7fc fffb 	bl	8006f3c <HAL_SD_WriteBlocks>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20002704 	.word	0x20002704

08009f60 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009f64:	4805      	ldr	r0, [pc, #20]	; (8009f7c <BSP_SD_GetCardState+0x1c>)
 8009f66:	f7fd fbd9 	bl	800771c <HAL_SD_GetCardState>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	bf14      	ite	ne
 8009f70:	2301      	movne	r3, #1
 8009f72:	2300      	moveq	r3, #0
 8009f74:	b2db      	uxtb	r3, r3
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20002704 	.word	0x20002704

08009f80 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	4803      	ldr	r0, [pc, #12]	; (8009f98 <BSP_SD_GetCardInfo+0x18>)
 8009f8c:	f7fd fb00 	bl	8007590 <HAL_SD_GetCardInfo>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20002704 	.word	0x20002704

08009f9c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009fa6:	f000 f80b 	bl	8009fc0 <BSP_PlatformIsDetected>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009fb4:	79fb      	ldrb	r3, [r7, #7]
 8009fb6:	b2db      	uxtb	r3, r3
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009fca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009fce:	4807      	ldr	r0, [pc, #28]	; (8009fec <BSP_PlatformIsDetected+0x2c>)
 8009fd0:	f7f9 ff74 	bl	8003ebc <HAL_GPIO_ReadPin>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */
    return status;
 8009fe2:	79fb      	ldrb	r3, [r7, #7]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	40020800 	.word	0x40020800

08009ff0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009ffa:	4b0b      	ldr	r3, [pc, #44]	; (800a028 <SD_CheckStatus+0x38>)
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a000:	f7ff ffae 	bl	8009f60 <BSP_SD_GetCardState>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d107      	bne.n	800a01a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a00a:	4b07      	ldr	r3, [pc, #28]	; (800a028 <SD_CheckStatus+0x38>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	f023 0301 	bic.w	r3, r3, #1
 800a014:	b2da      	uxtb	r2, r3
 800a016:	4b04      	ldr	r3, [pc, #16]	; (800a028 <SD_CheckStatus+0x38>)
 800a018:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a01a:	4b03      	ldr	r3, [pc, #12]	; (800a028 <SD_CheckStatus+0x38>)
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	b2db      	uxtb	r3, r3
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20000059 	.word	0x20000059

0800a02c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a036:	4b0b      	ldr	r3, [pc, #44]	; (800a064 <SD_initialize+0x38>)
 800a038:	2201      	movs	r2, #1
 800a03a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a03c:	f7ff ff2e 	bl	8009e9c <BSP_SD_Init>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d107      	bne.n	800a056 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff ffd1 	bl	8009ff0 <SD_CheckStatus>
 800a04e:	4603      	mov	r3, r0
 800a050:	461a      	mov	r2, r3
 800a052:	4b04      	ldr	r3, [pc, #16]	; (800a064 <SD_initialize+0x38>)
 800a054:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a056:	4b03      	ldr	r3, [pc, #12]	; (800a064 <SD_initialize+0x38>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	b2db      	uxtb	r3, r3
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	20000059 	.word	0x20000059

0800a068 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	4618      	mov	r0, r3
 800a076:	f7ff ffbb 	bl	8009ff0 <SD_CheckStatus>
 800a07a:	4603      	mov	r3, r0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60b9      	str	r1, [r7, #8]
 800a08c:	607a      	str	r2, [r7, #4]
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	4603      	mov	r3, r0
 800a092:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a098:	f04f 33ff 	mov.w	r3, #4294967295
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	68b8      	ldr	r0, [r7, #8]
 800a0a2:	f7ff ff21 	bl	8009ee8 <BSP_SD_ReadBlocks>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d107      	bne.n	800a0bc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a0ac:	bf00      	nop
 800a0ae:	f7ff ff57 	bl	8009f60 <BSP_SD_GetCardState>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1fa      	bne.n	800a0ae <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b086      	sub	sp, #24
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	68b8      	ldr	r0, [r7, #8]
 800a0e4:	f7ff ff1e 	bl	8009f24 <BSP_SD_WriteBlocks>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d107      	bne.n	800a0fe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a0ee:	bf00      	nop
 800a0f0:	f7ff ff36 	bl	8009f60 <BSP_SD_GetCardState>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1fa      	bne.n	800a0f0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08c      	sub	sp, #48	; 0x30
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	603a      	str	r2, [r7, #0]
 800a112:	71fb      	strb	r3, [r7, #7]
 800a114:	460b      	mov	r3, r1
 800a116:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a11e:	4b25      	ldr	r3, [pc, #148]	; (800a1b4 <SD_ioctl+0xac>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <SD_ioctl+0x28>
 800a12c:	2303      	movs	r3, #3
 800a12e:	e03c      	b.n	800a1aa <SD_ioctl+0xa2>

  switch (cmd)
 800a130:	79bb      	ldrb	r3, [r7, #6]
 800a132:	2b03      	cmp	r3, #3
 800a134:	d834      	bhi.n	800a1a0 <SD_ioctl+0x98>
 800a136:	a201      	add	r2, pc, #4	; (adr r2, 800a13c <SD_ioctl+0x34>)
 800a138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13c:	0800a14d 	.word	0x0800a14d
 800a140:	0800a155 	.word	0x0800a155
 800a144:	0800a16d 	.word	0x0800a16d
 800a148:	0800a187 	.word	0x0800a187
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a152:	e028      	b.n	800a1a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a154:	f107 030c 	add.w	r3, r7, #12
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff ff11 	bl	8009f80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a16a:	e01c      	b.n	800a1a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a16c:	f107 030c 	add.w	r3, r7, #12
 800a170:	4618      	mov	r0, r3
 800a172:	f7ff ff05 	bl	8009f80 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	b29a      	uxth	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a184:	e00f      	b.n	800a1a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a186:	f107 030c 	add.w	r3, r7, #12
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff fef8 	bl	8009f80 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	0a5a      	lsrs	r2, r3, #9
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a19e:	e002      	b.n	800a1a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a1a0:	2304      	movs	r3, #4
 800a1a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a1a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3730      	adds	r7, #48	; 0x30
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	20000059 	.word	0x20000059

0800a1b8 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 800a1c4:	2044      	movs	r0, #68	; 0x44
 800a1c6:	f005 f883 	bl	800f2d0 <USBD_static_malloc>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e016      	b.n	800a20e <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 800a1e8:	2340      	movs	r3, #64	; 0x40
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	2181      	movs	r1, #129	; 0x81
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f004 ff4b 	bl	800f08a <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 800a1f4:	2340      	movs	r3, #64	; 0x40
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f004 ff45 	bl	800f08a <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 800a200:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800a202:	2340      	movs	r3, #64	; 0x40
 800a204:	2101      	movs	r1, #1
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f005 f82e 	bl	800f268 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a20c:	2300      	movs	r3, #0
  }
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	460b      	mov	r3, r1
 800a220:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800a222:	2181      	movs	r1, #129	; 0x81
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f004 ff56 	bl	800f0d6 <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 800a22a:	2101      	movs	r1, #1
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f004 ff52 	bl	800f0d6 <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d007      	beq.n	800a262 <USBD_Midi_Setup+0x26>
 800a252:	2b20      	cmp	r3, #32
 800a254:	d10b      	bne.n	800a26e <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 f937 	bl	800b4cc <USBD_CtlError>
      return USBD_FAIL;
 800a25e:	2303      	movs	r3, #3
 800a260:	e006      	b.n	800a270 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f001 f931 	bl	800b4cc <USBD_CtlError>
      return USBD_FAIL;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e000      	b.n	800a270 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2265      	movs	r2, #101	; 0x65
 800a284:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 800a286:	4b03      	ldr	r3, [pc, #12]	; (800a294 <USBD_Midi_GetCfgDesc+0x1c>)
}
 800a288:	4618      	mov	r0, r3
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	20000094 	.word	0x20000094

0800a298 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a33a:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	4619      	mov	r1, r3
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f004 ffb2 	bl	800f2aa <USBD_LL_GetRxDataSize>
 800a346:	4602      	mov	r2, r0
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a350:	2300      	movs	r3, #0
 800a352:	617b      	str	r3, [r7, #20]
 800a354:	e00c      	b.n	800a370 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68f9      	ldr	r1, [r7, #12]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	440a      	add	r2, r1
 800a364:	2104      	movs	r1, #4
 800a366:	4610      	mov	r0, r2
 800a368:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	3304      	adds	r3, #4
 800a36e:	617b      	str	r3, [r7, #20]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	429a      	cmp	r2, r3
 800a378:	d3ed      	bcc.n	800a356 <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 800a37a:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 800a37c:	2340      	movs	r3, #64	; 0x40
 800a37e:	2101      	movs	r1, #1
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f004 ff71 	bl	800f268 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	220a      	movs	r2, #10
 800a39c:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 800a39e:	4b03      	ldr	r3, [pc, #12]	; (800a3ac <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	200000fc 	.word	0x200000fc

0800a3b0 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d005      	beq.n	800a3d0 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b086      	sub	sp, #24
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e01f      	b.n	800a436 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	79fa      	ldrb	r2, [r7, #7]
 800a428:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f004 fdc6 	bl	800efbc <USBD_LL_Init>
 800a430:	4603      	mov	r3, r0
 800a432:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a434:	7dfb      	ldrb	r3, [r7, #23]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3718      	adds	r7, #24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a448:	2300      	movs	r3, #0
 800a44a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a452:	2303      	movs	r3, #3
 800a454:	e016      	b.n	800a484 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00b      	beq.n	800a482 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a472:	f107 020e 	add.w	r2, r7, #14
 800a476:	4610      	mov	r0, r2
 800a478:	4798      	blx	r3
 800a47a:	4602      	mov	r2, r0
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f004 fddd 	bl	800f054 <USBD_LL_Start>
 800a49a:	4603      	mov	r3, r0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d009      	beq.n	800a4e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	78fa      	ldrb	r2, [r7, #3]
 800a4de:	4611      	mov	r1, r2
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	4798      	blx	r3
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a504:	2b00      	cmp	r3, #0
 800a506:	d007      	beq.n	800a518 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	78fa      	ldrb	r2, [r7, #3]
 800a512:	4611      	mov	r1, r2
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	4798      	blx	r3
  }

  return USBD_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f000 ff8f 	bl	800b458 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a548:	461a      	mov	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a556:	f003 031f 	and.w	r3, r3, #31
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d01a      	beq.n	800a594 <USBD_LL_SetupStage+0x72>
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d822      	bhi.n	800a5a8 <USBD_LL_SetupStage+0x86>
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <USBD_LL_SetupStage+0x4a>
 800a566:	2b01      	cmp	r3, #1
 800a568:	d00a      	beq.n	800a580 <USBD_LL_SetupStage+0x5e>
 800a56a:	e01d      	b.n	800a5a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fa61 	bl	800aa3c <USBD_StdDevReq>
 800a57a:	4603      	mov	r3, r0
 800a57c:	73fb      	strb	r3, [r7, #15]
      break;
 800a57e:	e020      	b.n	800a5c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fac5 	bl	800ab18 <USBD_StdItfReq>
 800a58e:	4603      	mov	r3, r0
 800a590:	73fb      	strb	r3, [r7, #15]
      break;
 800a592:	e016      	b.n	800a5c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fb04 	bl	800abaa <USBD_StdEPReq>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a6:	e00c      	b.n	800a5c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f004 fdac 	bl	800f114 <USBD_LL_StallEP>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c0:	bf00      	nop
  }

  return ret;
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a5da:	7afb      	ldrb	r3, [r7, #11]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d138      	bne.n	800a652 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a5e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	d14a      	bne.n	800a688 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d913      	bls.n	800a626 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	689a      	ldr	r2, [r3, #8]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	1ad2      	subs	r2, r2, r3
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	68da      	ldr	r2, [r3, #12]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	4293      	cmp	r3, r2
 800a616:	bf28      	it	cs
 800a618:	4613      	movcs	r3, r2
 800a61a:	461a      	mov	r2, r3
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 fff1 	bl	800b606 <USBD_CtlContinueRx>
 800a624:	e030      	b.n	800a688 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d10b      	bne.n	800a64a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 ffec 	bl	800b628 <USBD_CtlSendStatus>
 800a650:	e01a      	b.n	800a688 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d114      	bne.n	800a688 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00e      	beq.n	800a688 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	7afa      	ldrb	r2, [r7, #11]
 800a674:	4611      	mov	r1, r2
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	4798      	blx	r3
 800a67a:	4603      	mov	r3, r0
 800a67c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	e000      	b.n	800a68a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b086      	sub	sp, #24
 800a696:	af00      	add	r7, sp, #0
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	460b      	mov	r3, r1
 800a69c:	607a      	str	r2, [r7, #4]
 800a69e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d16b      	bne.n	800a77e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3314      	adds	r3, #20
 800a6aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d156      	bne.n	800a764 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	689a      	ldr	r2, [r3, #8]
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d914      	bls.n	800a6ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	689a      	ldr	r2, [r3, #8]
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	1ad2      	subs	r2, r2, r3
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 ff83 	bl	800b5e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6de:	2300      	movs	r3, #0
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f004 fdbf 	bl	800f268 <USBD_LL_PrepareReceive>
 800a6ea:	e03b      	b.n	800a764 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d11c      	bne.n	800a732 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a700:	429a      	cmp	r2, r3
 800a702:	d316      	bcc.n	800a732 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a70e:	429a      	cmp	r2, r3
 800a710:	d20f      	bcs.n	800a732 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a712:	2200      	movs	r2, #0
 800a714:	2100      	movs	r1, #0
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 ff64 	bl	800b5e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a724:	2300      	movs	r3, #0
 800a726:	2200      	movs	r2, #0
 800a728:	2100      	movs	r1, #0
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f004 fd9c 	bl	800f268 <USBD_LL_PrepareReceive>
 800a730:	e018      	b.n	800a764 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d10b      	bne.n	800a756 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d005      	beq.n	800a756 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a756:	2180      	movs	r1, #128	; 0x80
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f004 fcdb 	bl	800f114 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f000 ff75 	bl	800b64e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d122      	bne.n	800a7b4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff fe98 	bl	800a4a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a77c:	e01a      	b.n	800a7b4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b03      	cmp	r3, #3
 800a788:	d114      	bne.n	800a7b4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00e      	beq.n	800a7b4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	7afa      	ldrb	r2, [r7, #11]
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	4798      	blx	r3
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a7b0:	7dfb      	ldrb	r3, [r7, #23]
 800a7b2:	e000      	b.n	800a7b6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e02f      	b.n	800a852 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00f      	beq.n	800a81c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d009      	beq.n	800a81c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	6852      	ldr	r2, [r2, #4]
 800a814:	b2d2      	uxtb	r2, r2
 800a816:	4611      	mov	r1, r2
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a81c:	2340      	movs	r3, #64	; 0x40
 800a81e:	2200      	movs	r2, #0
 800a820:	2100      	movs	r1, #0
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f004 fc31 	bl	800f08a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2240      	movs	r2, #64	; 0x40
 800a834:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a838:	2340      	movs	r3, #64	; 0x40
 800a83a:	2200      	movs	r2, #0
 800a83c:	2180      	movs	r1, #128	; 0x80
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f004 fc23 	bl	800f08a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2240      	movs	r2, #64	; 0x40
 800a84e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	78fa      	ldrb	r2, [r7, #3]
 800a86a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2204      	movs	r2, #4
 800a894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b04      	cmp	r3, #4
 800a8b8:	d106      	bne.n	800a8c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e012      	b.n	800a912 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b03      	cmp	r3, #3
 800a8f6:	d10b      	bne.n	800a910 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d005      	beq.n	800a910 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a930:	2303      	movs	r3, #3
 800a932:	e014      	b.n	800a95e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d10d      	bne.n	800a95c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a946:	6a1b      	ldr	r3, [r3, #32]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	78fa      	ldrb	r2, [r7, #3]
 800a956:	4611      	mov	r1, r2
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b082      	sub	sp, #8
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	460b      	mov	r3, r1
 800a970:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a97c:	2303      	movs	r3, #3
 800a97e:	e014      	b.n	800a9aa <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d10d      	bne.n	800a9a8 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a994:	2b00      	cmp	r3, #0
 800a996:	d007      	beq.n	800a9a8 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d009      	beq.n	800a9f6 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	6852      	ldr	r2, [r2, #4]
 800a9ee:	b2d2      	uxtb	r2, r2
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	4798      	blx	r3
  }

  return USBD_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b087      	sub	sp, #28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	3301      	adds	r3, #1
 800aa16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa1e:	8a3b      	ldrh	r3, [r7, #16]
 800aa20:	021b      	lsls	r3, r3, #8
 800aa22:	b21a      	sxth	r2, r3
 800aa24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	b21b      	sxth	r3, r3
 800aa2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa2e:	89fb      	ldrh	r3, [r7, #14]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	371c      	adds	r7, #28
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa52:	2b40      	cmp	r3, #64	; 0x40
 800aa54:	d005      	beq.n	800aa62 <USBD_StdDevReq+0x26>
 800aa56:	2b40      	cmp	r3, #64	; 0x40
 800aa58:	d853      	bhi.n	800ab02 <USBD_StdDevReq+0xc6>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00b      	beq.n	800aa76 <USBD_StdDevReq+0x3a>
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	d14f      	bne.n	800ab02 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	6839      	ldr	r1, [r7, #0]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	4798      	blx	r3
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]
      break;
 800aa74:	e04a      	b.n	800ab0c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	785b      	ldrb	r3, [r3, #1]
 800aa7a:	2b09      	cmp	r3, #9
 800aa7c:	d83b      	bhi.n	800aaf6 <USBD_StdDevReq+0xba>
 800aa7e:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <USBD_StdDevReq+0x48>)
 800aa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa84:	0800aad9 	.word	0x0800aad9
 800aa88:	0800aaed 	.word	0x0800aaed
 800aa8c:	0800aaf7 	.word	0x0800aaf7
 800aa90:	0800aae3 	.word	0x0800aae3
 800aa94:	0800aaf7 	.word	0x0800aaf7
 800aa98:	0800aab7 	.word	0x0800aab7
 800aa9c:	0800aaad 	.word	0x0800aaad
 800aaa0:	0800aaf7 	.word	0x0800aaf7
 800aaa4:	0800aacf 	.word	0x0800aacf
 800aaa8:	0800aac1 	.word	0x0800aac1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f9de 	bl	800ae70 <USBD_GetDescriptor>
          break;
 800aab4:	e024      	b.n	800ab00 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fb43 	bl	800b144 <USBD_SetAddress>
          break;
 800aabe:	e01f      	b.n	800ab00 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fb82 	bl	800b1cc <USBD_SetConfig>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]
          break;
 800aacc:	e018      	b.n	800ab00 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fc21 	bl	800b318 <USBD_GetConfig>
          break;
 800aad6:	e013      	b.n	800ab00 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fc52 	bl	800b384 <USBD_GetStatus>
          break;
 800aae0:	e00e      	b.n	800ab00 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fc81 	bl	800b3ec <USBD_SetFeature>
          break;
 800aaea:	e009      	b.n	800ab00 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fc90 	bl	800b414 <USBD_ClrFeature>
          break;
 800aaf4:	e004      	b.n	800ab00 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fce7 	bl	800b4cc <USBD_CtlError>
          break;
 800aafe:	bf00      	nop
      }
      break;
 800ab00:	e004      	b.n	800ab0c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fce1 	bl	800b4cc <USBD_CtlError>
      break;
 800ab0a:	bf00      	nop
  }

  return ret;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop

0800ab18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab2e:	2b40      	cmp	r3, #64	; 0x40
 800ab30:	d005      	beq.n	800ab3e <USBD_StdItfReq+0x26>
 800ab32:	2b40      	cmp	r3, #64	; 0x40
 800ab34:	d82f      	bhi.n	800ab96 <USBD_StdItfReq+0x7e>
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <USBD_StdItfReq+0x26>
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	d12b      	bne.n	800ab96 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	3b01      	subs	r3, #1
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d81d      	bhi.n	800ab88 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	889b      	ldrh	r3, [r3, #4]
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d813      	bhi.n	800ab7e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	4798      	blx	r3
 800ab64:	4603      	mov	r3, r0
 800ab66:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	88db      	ldrh	r3, [r3, #6]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d110      	bne.n	800ab92 <USBD_StdItfReq+0x7a>
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10d      	bne.n	800ab92 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fd56 	bl	800b628 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab7c:	e009      	b.n	800ab92 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fca3 	bl	800b4cc <USBD_CtlError>
          break;
 800ab86:	e004      	b.n	800ab92 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fc9e 	bl	800b4cc <USBD_CtlError>
          break;
 800ab90:	e000      	b.n	800ab94 <USBD_StdItfReq+0x7c>
          break;
 800ab92:	bf00      	nop
      }
      break;
 800ab94:	e004      	b.n	800aba0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fc97 	bl	800b4cc <USBD_CtlError>
      break;
 800ab9e:	bf00      	nop
  }

  return ret;
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	889b      	ldrh	r3, [r3, #4]
 800abbc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abc6:	2b40      	cmp	r3, #64	; 0x40
 800abc8:	d007      	beq.n	800abda <USBD_StdEPReq+0x30>
 800abca:	2b40      	cmp	r3, #64	; 0x40
 800abcc:	f200 8145 	bhi.w	800ae5a <USBD_StdEPReq+0x2b0>
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00c      	beq.n	800abee <USBD_StdEPReq+0x44>
 800abd4:	2b20      	cmp	r3, #32
 800abd6:	f040 8140 	bne.w	800ae5a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	4798      	blx	r3
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]
      break;
 800abec:	e13a      	b.n	800ae64 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d007      	beq.n	800ac06 <USBD_StdEPReq+0x5c>
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	f300 8129 	bgt.w	800ae4e <USBD_StdEPReq+0x2a4>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d07f      	beq.n	800ad00 <USBD_StdEPReq+0x156>
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d03c      	beq.n	800ac7e <USBD_StdEPReq+0xd4>
 800ac04:	e123      	b.n	800ae4e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d002      	beq.n	800ac18 <USBD_StdEPReq+0x6e>
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d016      	beq.n	800ac44 <USBD_StdEPReq+0x9a>
 800ac16:	e02c      	b.n	800ac72 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00d      	beq.n	800ac3a <USBD_StdEPReq+0x90>
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	2b80      	cmp	r3, #128	; 0x80
 800ac22:	d00a      	beq.n	800ac3a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
 800ac26:	4619      	mov	r1, r3
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f004 fa73 	bl	800f114 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac2e:	2180      	movs	r1, #128	; 0x80
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f004 fa6f 	bl	800f114 <USBD_LL_StallEP>
 800ac36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac38:	e020      	b.n	800ac7c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fc45 	bl	800b4cc <USBD_CtlError>
              break;
 800ac42:	e01b      	b.n	800ac7c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	885b      	ldrh	r3, [r3, #2]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10e      	bne.n	800ac6a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00b      	beq.n	800ac6a <USBD_StdEPReq+0xc0>
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	2b80      	cmp	r3, #128	; 0x80
 800ac56:	d008      	beq.n	800ac6a <USBD_StdEPReq+0xc0>
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	88db      	ldrh	r3, [r3, #6]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d104      	bne.n	800ac6a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f004 fa55 	bl	800f114 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fcdc 	bl	800b628 <USBD_CtlSendStatus>

              break;
 800ac70:	e004      	b.n	800ac7c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fc29 	bl	800b4cc <USBD_CtlError>
              break;
 800ac7a:	bf00      	nop
          }
          break;
 800ac7c:	e0ec      	b.n	800ae58 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d002      	beq.n	800ac90 <USBD_StdEPReq+0xe6>
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	d016      	beq.n	800acbc <USBD_StdEPReq+0x112>
 800ac8e:	e030      	b.n	800acf2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00d      	beq.n	800acb2 <USBD_StdEPReq+0x108>
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	2b80      	cmp	r3, #128	; 0x80
 800ac9a:	d00a      	beq.n	800acb2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f004 fa37 	bl	800f114 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aca6:	2180      	movs	r1, #128	; 0x80
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f004 fa33 	bl	800f114 <USBD_LL_StallEP>
 800acae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acb0:	e025      	b.n	800acfe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fc09 	bl	800b4cc <USBD_CtlError>
              break;
 800acba:	e020      	b.n	800acfe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	885b      	ldrh	r3, [r3, #2]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d11b      	bne.n	800acfc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acca:	2b00      	cmp	r3, #0
 800accc:	d004      	beq.n	800acd8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800acce:	7bbb      	ldrb	r3, [r7, #14]
 800acd0:	4619      	mov	r1, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f004 fa3d 	bl	800f152 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fca5 	bl	800b628 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	4798      	blx	r3
 800acec:	4603      	mov	r3, r0
 800acee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800acf0:	e004      	b.n	800acfc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fbe9 	bl	800b4cc <USBD_CtlError>
              break;
 800acfa:	e000      	b.n	800acfe <USBD_StdEPReq+0x154>
              break;
 800acfc:	bf00      	nop
          }
          break;
 800acfe:	e0ab      	b.n	800ae58 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d002      	beq.n	800ad12 <USBD_StdEPReq+0x168>
 800ad0c:	2b03      	cmp	r3, #3
 800ad0e:	d032      	beq.n	800ad76 <USBD_StdEPReq+0x1cc>
 800ad10:	e097      	b.n	800ae42 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d007      	beq.n	800ad28 <USBD_StdEPReq+0x17e>
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	2b80      	cmp	r3, #128	; 0x80
 800ad1c:	d004      	beq.n	800ad28 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fbd3 	bl	800b4cc <USBD_CtlError>
                break;
 800ad26:	e091      	b.n	800ae4c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	da0b      	bge.n	800ad48 <USBD_StdEPReq+0x19e>
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad36:	4613      	mov	r3, r2
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	3310      	adds	r3, #16
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	4413      	add	r3, r2
 800ad44:	3304      	adds	r3, #4
 800ad46:	e00b      	b.n	800ad60 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	3304      	adds	r3, #4
 800ad60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2200      	movs	r2, #0
 800ad66:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fc1d 	bl	800b5ae <USBD_CtlSendData>
              break;
 800ad74:	e06a      	b.n	800ae4c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	da11      	bge.n	800ada2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	f003 020f 	and.w	r2, r3, #15
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	3324      	adds	r3, #36	; 0x24
 800ad92:	881b      	ldrh	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d117      	bne.n	800adc8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fb96 	bl	800b4cc <USBD_CtlError>
                  break;
 800ada0:	e054      	b.n	800ae4c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
 800ada4:	f003 020f 	and.w	r2, r3, #15
 800ada8:	6879      	ldr	r1, [r7, #4]
 800adaa:	4613      	mov	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	440b      	add	r3, r1
 800adb4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d104      	bne.n	800adc8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fb83 	bl	800b4cc <USBD_CtlError>
                  break;
 800adc6:	e041      	b.n	800ae4c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	da0b      	bge.n	800ade8 <USBD_StdEPReq+0x23e>
 800add0:	7bbb      	ldrb	r3, [r7, #14]
 800add2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800add6:	4613      	mov	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	4413      	add	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	3310      	adds	r3, #16
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	4413      	add	r3, r2
 800ade4:	3304      	adds	r3, #4
 800ade6:	e00b      	b.n	800ae00 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ade8:	7bbb      	ldrb	r3, [r7, #14]
 800adea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	4413      	add	r3, r2
 800adfe:	3304      	adds	r3, #4
 800ae00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae02:	7bbb      	ldrb	r3, [r7, #14]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <USBD_StdEPReq+0x264>
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	2b80      	cmp	r3, #128	; 0x80
 800ae0c:	d103      	bne.n	800ae16 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2200      	movs	r2, #0
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	e00e      	b.n	800ae34 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f004 f9b8 	bl	800f190 <USBD_LL_IsStallEP>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	601a      	str	r2, [r3, #0]
 800ae2c:	e002      	b.n	800ae34 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	2200      	movs	r2, #0
 800ae32:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	2202      	movs	r2, #2
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fbb7 	bl	800b5ae <USBD_CtlSendData>
              break;
 800ae40:	e004      	b.n	800ae4c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fb41 	bl	800b4cc <USBD_CtlError>
              break;
 800ae4a:	bf00      	nop
          }
          break;
 800ae4c:	e004      	b.n	800ae58 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fb3b 	bl	800b4cc <USBD_CtlError>
          break;
 800ae56:	bf00      	nop
      }
      break;
 800ae58:	e004      	b.n	800ae64 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ae5a:	6839      	ldr	r1, [r7, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fb35 	bl	800b4cc <USBD_CtlError>
      break;
 800ae62:	bf00      	nop
  }

  return ret;
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
	...

0800ae70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	885b      	ldrh	r3, [r3, #2]
 800ae8a:	0a1b      	lsrs	r3, r3, #8
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	2b06      	cmp	r3, #6
 800ae92:	f200 8128 	bhi.w	800b0e6 <USBD_GetDescriptor+0x276>
 800ae96:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <USBD_GetDescriptor+0x2c>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aeb9 	.word	0x0800aeb9
 800aea0:	0800aed1 	.word	0x0800aed1
 800aea4:	0800af11 	.word	0x0800af11
 800aea8:	0800b0e7 	.word	0x0800b0e7
 800aeac:	0800b0e7 	.word	0x0800b0e7
 800aeb0:	0800b087 	.word	0x0800b087
 800aeb4:	0800b0b3 	.word	0x0800b0b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	7c12      	ldrb	r2, [r2, #16]
 800aec4:	f107 0108 	add.w	r1, r7, #8
 800aec8:	4610      	mov	r0, r2
 800aeca:	4798      	blx	r3
 800aecc:	60f8      	str	r0, [r7, #12]
      break;
 800aece:	e112      	b.n	800b0f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	7c1b      	ldrb	r3, [r3, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10d      	bne.n	800aef4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee0:	f107 0208 	add.w	r2, r7, #8
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	3301      	adds	r3, #1
 800aeee:	2202      	movs	r2, #2
 800aef0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aef2:	e100      	b.n	800b0f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefc:	f107 0208 	add.w	r2, r7, #8
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3301      	adds	r3, #1
 800af0a:	2202      	movs	r2, #2
 800af0c:	701a      	strb	r2, [r3, #0]
      break;
 800af0e:	e0f2      	b.n	800b0f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	885b      	ldrh	r3, [r3, #2]
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b05      	cmp	r3, #5
 800af18:	f200 80ac 	bhi.w	800b074 <USBD_GetDescriptor+0x204>
 800af1c:	a201      	add	r2, pc, #4	; (adr r2, 800af24 <USBD_GetDescriptor+0xb4>)
 800af1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af22:	bf00      	nop
 800af24:	0800af3d 	.word	0x0800af3d
 800af28:	0800af71 	.word	0x0800af71
 800af2c:	0800afa5 	.word	0x0800afa5
 800af30:	0800afd9 	.word	0x0800afd9
 800af34:	0800b00d 	.word	0x0800b00d
 800af38:	0800b041 	.word	0x0800b041
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00b      	beq.n	800af60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	7c12      	ldrb	r2, [r2, #16]
 800af54:	f107 0108 	add.w	r1, r7, #8
 800af58:	4610      	mov	r0, r2
 800af5a:	4798      	blx	r3
 800af5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af5e:	e091      	b.n	800b084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fab2 	bl	800b4cc <USBD_CtlError>
            err++;
 800af68:	7afb      	ldrb	r3, [r7, #11]
 800af6a:	3301      	adds	r3, #1
 800af6c:	72fb      	strb	r3, [r7, #11]
          break;
 800af6e:	e089      	b.n	800b084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00b      	beq.n	800af94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	7c12      	ldrb	r2, [r2, #16]
 800af88:	f107 0108 	add.w	r1, r7, #8
 800af8c:	4610      	mov	r0, r2
 800af8e:	4798      	blx	r3
 800af90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af92:	e077      	b.n	800b084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fa98 	bl	800b4cc <USBD_CtlError>
            err++;
 800af9c:	7afb      	ldrb	r3, [r7, #11]
 800af9e:	3301      	adds	r3, #1
 800afa0:	72fb      	strb	r3, [r7, #11]
          break;
 800afa2:	e06f      	b.n	800b084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00b      	beq.n	800afc8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	7c12      	ldrb	r2, [r2, #16]
 800afbc:	f107 0108 	add.w	r1, r7, #8
 800afc0:	4610      	mov	r0, r2
 800afc2:	4798      	blx	r3
 800afc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afc6:	e05d      	b.n	800b084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fa7e 	bl	800b4cc <USBD_CtlError>
            err++;
 800afd0:	7afb      	ldrb	r3, [r7, #11]
 800afd2:	3301      	adds	r3, #1
 800afd4:	72fb      	strb	r3, [r7, #11]
          break;
 800afd6:	e055      	b.n	800b084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00b      	beq.n	800affc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	7c12      	ldrb	r2, [r2, #16]
 800aff0:	f107 0108 	add.w	r1, r7, #8
 800aff4:	4610      	mov	r0, r2
 800aff6:	4798      	blx	r3
 800aff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800affa:	e043      	b.n	800b084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa64 	bl	800b4cc <USBD_CtlError>
            err++;
 800b004:	7afb      	ldrb	r3, [r7, #11]
 800b006:	3301      	adds	r3, #1
 800b008:	72fb      	strb	r3, [r7, #11]
          break;
 800b00a:	e03b      	b.n	800b084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b012:	695b      	ldr	r3, [r3, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	7c12      	ldrb	r2, [r2, #16]
 800b024:	f107 0108 	add.w	r1, r7, #8
 800b028:	4610      	mov	r0, r2
 800b02a:	4798      	blx	r3
 800b02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b02e:	e029      	b.n	800b084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fa4a 	bl	800b4cc <USBD_CtlError>
            err++;
 800b038:	7afb      	ldrb	r3, [r7, #11]
 800b03a:	3301      	adds	r3, #1
 800b03c:	72fb      	strb	r3, [r7, #11]
          break;
 800b03e:	e021      	b.n	800b084 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00b      	beq.n	800b064 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	7c12      	ldrb	r2, [r2, #16]
 800b058:	f107 0108 	add.w	r1, r7, #8
 800b05c:	4610      	mov	r0, r2
 800b05e:	4798      	blx	r3
 800b060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b062:	e00f      	b.n	800b084 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fa30 	bl	800b4cc <USBD_CtlError>
            err++;
 800b06c:	7afb      	ldrb	r3, [r7, #11]
 800b06e:	3301      	adds	r3, #1
 800b070:	72fb      	strb	r3, [r7, #11]
          break;
 800b072:	e007      	b.n	800b084 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fa28 	bl	800b4cc <USBD_CtlError>
          err++;
 800b07c:	7afb      	ldrb	r3, [r7, #11]
 800b07e:	3301      	adds	r3, #1
 800b080:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b082:	bf00      	nop
      }
      break;
 800b084:	e037      	b.n	800b0f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	7c1b      	ldrb	r3, [r3, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d109      	bne.n	800b0a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b096:	f107 0208 	add.w	r2, r7, #8
 800b09a:	4610      	mov	r0, r2
 800b09c:	4798      	blx	r3
 800b09e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0a0:	e029      	b.n	800b0f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fa11 	bl	800b4cc <USBD_CtlError>
        err++;
 800b0aa:	7afb      	ldrb	r3, [r7, #11]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b0b0:	e021      	b.n	800b0f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	7c1b      	ldrb	r3, [r3, #16]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10d      	bne.n	800b0d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c2:	f107 0208 	add.w	r2, r7, #8
 800b0c6:	4610      	mov	r0, r2
 800b0c8:	4798      	blx	r3
 800b0ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	2207      	movs	r2, #7
 800b0d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0d4:	e00f      	b.n	800b0f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f9f7 	bl	800b4cc <USBD_CtlError>
        err++;
 800b0de:	7afb      	ldrb	r3, [r7, #11]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	72fb      	strb	r3, [r7, #11]
      break;
 800b0e4:	e007      	b.n	800b0f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 f9ef 	bl	800b4cc <USBD_CtlError>
      err++;
 800b0ee:	7afb      	ldrb	r3, [r7, #11]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b0f4:	bf00      	nop
  }

  if (err != 0U)
 800b0f6:	7afb      	ldrb	r3, [r7, #11]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d11e      	bne.n	800b13a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	88db      	ldrh	r3, [r3, #6]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d016      	beq.n	800b132 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b104:	893b      	ldrh	r3, [r7, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00e      	beq.n	800b128 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	88da      	ldrh	r2, [r3, #6]
 800b10e:	893b      	ldrh	r3, [r7, #8]
 800b110:	4293      	cmp	r3, r2
 800b112:	bf28      	it	cs
 800b114:	4613      	movcs	r3, r2
 800b116:	b29b      	uxth	r3, r3
 800b118:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b11a:	893b      	ldrh	r3, [r7, #8]
 800b11c:	461a      	mov	r2, r3
 800b11e:	68f9      	ldr	r1, [r7, #12]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fa44 	bl	800b5ae <USBD_CtlSendData>
 800b126:	e009      	b.n	800b13c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f9ce 	bl	800b4cc <USBD_CtlError>
 800b130:	e004      	b.n	800b13c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fa78 	bl	800b628 <USBD_CtlSendStatus>
 800b138:	e000      	b.n	800b13c <USBD_GetDescriptor+0x2cc>
    return;
 800b13a:	bf00      	nop
  }
}
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop

0800b144 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	889b      	ldrh	r3, [r3, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d131      	bne.n	800b1ba <USBD_SetAddress+0x76>
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	88db      	ldrh	r3, [r3, #6]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d12d      	bne.n	800b1ba <USBD_SetAddress+0x76>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	885b      	ldrh	r3, [r3, #2]
 800b162:	2b7f      	cmp	r3, #127	; 0x7f
 800b164:	d829      	bhi.n	800b1ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	885b      	ldrh	r3, [r3, #2]
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b170:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d104      	bne.n	800b188 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b17e:	6839      	ldr	r1, [r7, #0]
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f9a3 	bl	800b4cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b186:	e01d      	b.n	800b1c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	7bfa      	ldrb	r2, [r7, #15]
 800b18c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f004 f827 	bl	800f1e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fa44 	bl	800b628 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d004      	beq.n	800b1b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ae:	e009      	b.n	800b1c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b8:	e004      	b.n	800b1c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f985 	bl	800b4cc <USBD_CtlError>
  }
}
 800b1c2:	bf00      	nop
 800b1c4:	bf00      	nop
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	885b      	ldrh	r3, [r3, #2]
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	4b4c      	ldr	r3, [pc, #304]	; (800b314 <USBD_SetConfig+0x148>)
 800b1e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1e4:	4b4b      	ldr	r3, [pc, #300]	; (800b314 <USBD_SetConfig+0x148>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d905      	bls.n	800b1f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f96c 	bl	800b4cc <USBD_CtlError>
    return USBD_FAIL;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e088      	b.n	800b30a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b02      	cmp	r3, #2
 800b202:	d002      	beq.n	800b20a <USBD_SetConfig+0x3e>
 800b204:	2b03      	cmp	r3, #3
 800b206:	d025      	beq.n	800b254 <USBD_SetConfig+0x88>
 800b208:	e071      	b.n	800b2ee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b20a:	4b42      	ldr	r3, [pc, #264]	; (800b314 <USBD_SetConfig+0x148>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d01c      	beq.n	800b24c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b212:	4b40      	ldr	r3, [pc, #256]	; (800b314 <USBD_SetConfig+0x148>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b21c:	4b3d      	ldr	r3, [pc, #244]	; (800b314 <USBD_SetConfig+0x148>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7ff f949 	bl	800a4ba <USBD_SetClassConfig>
 800b228:	4603      	mov	r3, r0
 800b22a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d004      	beq.n	800b23c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b232:	6839      	ldr	r1, [r7, #0]
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f949 	bl	800b4cc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b23a:	e065      	b.n	800b308 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f9f3 	bl	800b628 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2203      	movs	r2, #3
 800b246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b24a:	e05d      	b.n	800b308 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f9eb 	bl	800b628 <USBD_CtlSendStatus>
      break;
 800b252:	e059      	b.n	800b308 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b254:	4b2f      	ldr	r3, [pc, #188]	; (800b314 <USBD_SetConfig+0x148>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d112      	bne.n	800b282 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b264:	4b2b      	ldr	r3, [pc, #172]	; (800b314 <USBD_SetConfig+0x148>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	461a      	mov	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b26e:	4b29      	ldr	r3, [pc, #164]	; (800b314 <USBD_SetConfig+0x148>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7ff f93c 	bl	800a4f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f9d4 	bl	800b628 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b280:	e042      	b.n	800b308 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b282:	4b24      	ldr	r3, [pc, #144]	; (800b314 <USBD_SetConfig+0x148>)
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d02a      	beq.n	800b2e6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	b2db      	uxtb	r3, r3
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff f92a 	bl	800a4f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b29e:	4b1d      	ldr	r3, [pc, #116]	; (800b314 <USBD_SetConfig+0x148>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2a8:	4b1a      	ldr	r3, [pc, #104]	; (800b314 <USBD_SetConfig+0x148>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7ff f903 	bl	800a4ba <USBD_SetClassConfig>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00f      	beq.n	800b2de <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f903 	bl	800b4cc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff f90f 	bl	800a4f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b2dc:	e014      	b.n	800b308 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f9a2 	bl	800b628 <USBD_CtlSendStatus>
      break;
 800b2e4:	e010      	b.n	800b308 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f99e 	bl	800b628 <USBD_CtlSendStatus>
      break;
 800b2ec:	e00c      	b.n	800b308 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 f8eb 	bl	800b4cc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2f6:	4b07      	ldr	r3, [pc, #28]	; (800b314 <USBD_SetConfig+0x148>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7ff f8f8 	bl	800a4f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b302:	2303      	movs	r3, #3
 800b304:	73fb      	strb	r3, [r7, #15]
      break;
 800b306:	bf00      	nop
  }

  return ret;
 800b308:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	2000076c 	.word	0x2000076c

0800b318 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	88db      	ldrh	r3, [r3, #6]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d004      	beq.n	800b334 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f8cd 	bl	800b4cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b332:	e023      	b.n	800b37c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	dc02      	bgt.n	800b346 <USBD_GetConfig+0x2e>
 800b340:	2b00      	cmp	r3, #0
 800b342:	dc03      	bgt.n	800b34c <USBD_GetConfig+0x34>
 800b344:	e015      	b.n	800b372 <USBD_GetConfig+0x5a>
 800b346:	2b03      	cmp	r3, #3
 800b348:	d00b      	beq.n	800b362 <USBD_GetConfig+0x4a>
 800b34a:	e012      	b.n	800b372 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	3308      	adds	r3, #8
 800b356:	2201      	movs	r2, #1
 800b358:	4619      	mov	r1, r3
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 f927 	bl	800b5ae <USBD_CtlSendData>
        break;
 800b360:	e00c      	b.n	800b37c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	3304      	adds	r3, #4
 800b366:	2201      	movs	r2, #1
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f91f 	bl	800b5ae <USBD_CtlSendData>
        break;
 800b370:	e004      	b.n	800b37c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f8a9 	bl	800b4cc <USBD_CtlError>
        break;
 800b37a:	bf00      	nop
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b394:	b2db      	uxtb	r3, r3
 800b396:	3b01      	subs	r3, #1
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d81e      	bhi.n	800b3da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	88db      	ldrh	r3, [r3, #6]
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d004      	beq.n	800b3ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f890 	bl	800b4cc <USBD_CtlError>
        break;
 800b3ac:	e01a      	b.n	800b3e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	f043 0202 	orr.w	r2, r3, #2
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	330c      	adds	r3, #12
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f8eb 	bl	800b5ae <USBD_CtlSendData>
      break;
 800b3d8:	e004      	b.n	800b3e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f875 	bl	800b4cc <USBD_CtlError>
      break;
 800b3e2:	bf00      	nop
  }
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	885b      	ldrh	r3, [r3, #2]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d106      	bne.n	800b40c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f90e 	bl	800b628 <USBD_CtlSendStatus>
  }
}
 800b40c:	bf00      	nop
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b424:	b2db      	uxtb	r3, r3
 800b426:	3b01      	subs	r3, #1
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d80b      	bhi.n	800b444 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	885b      	ldrh	r3, [r3, #2]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d10c      	bne.n	800b44e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f8f3 	bl	800b628 <USBD_CtlSendStatus>
      }
      break;
 800b442:	e004      	b.n	800b44e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f840 	bl	800b4cc <USBD_CtlError>
      break;
 800b44c:	e000      	b.n	800b450 <USBD_ClrFeature+0x3c>
      break;
 800b44e:	bf00      	nop
  }
}
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	781a      	ldrb	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3301      	adds	r3, #1
 800b472:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	781a      	ldrb	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	3301      	adds	r3, #1
 800b480:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f7ff fabc 	bl	800aa00 <SWAPBYTE>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3301      	adds	r3, #1
 800b494:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3301      	adds	r3, #1
 800b49a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7ff faaf 	bl	800aa00 <SWAPBYTE>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f7ff faa2 	bl	800aa00 <SWAPBYTE>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	461a      	mov	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	80da      	strh	r2, [r3, #6]
}
 800b4c4:	bf00      	nop
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4d6:	2180      	movs	r1, #128	; 0x80
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f003 fe1b 	bl	800f114 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b4de:	2100      	movs	r1, #0
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f003 fe17 	bl	800f114 <USBD_LL_StallEP>
}
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b086      	sub	sp, #24
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	60f8      	str	r0, [r7, #12]
 800b4f6:	60b9      	str	r1, [r7, #8]
 800b4f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d036      	beq.n	800b572 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b508:	6938      	ldr	r0, [r7, #16]
 800b50a:	f000 f836 	bl	800b57a <USBD_GetLen>
 800b50e:	4603      	mov	r3, r0
 800b510:	3301      	adds	r3, #1
 800b512:	b29b      	uxth	r3, r3
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	4413      	add	r3, r2
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	7812      	ldrb	r2, [r2, #0]
 800b526:	701a      	strb	r2, [r3, #0]
  idx++;
 800b528:	7dfb      	ldrb	r3, [r7, #23]
 800b52a:	3301      	adds	r3, #1
 800b52c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	4413      	add	r3, r2
 800b534:	2203      	movs	r2, #3
 800b536:	701a      	strb	r2, [r3, #0]
  idx++;
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	3301      	adds	r3, #1
 800b53c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b53e:	e013      	b.n	800b568 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	4413      	add	r3, r2
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	7812      	ldrb	r2, [r2, #0]
 800b54a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	3301      	adds	r3, #1
 800b550:	613b      	str	r3, [r7, #16]
    idx++;
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	3301      	adds	r3, #1
 800b556:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b558:	7dfb      	ldrb	r3, [r7, #23]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	4413      	add	r3, r2
 800b55e:	2200      	movs	r2, #0
 800b560:	701a      	strb	r2, [r3, #0]
    idx++;
 800b562:	7dfb      	ldrb	r3, [r7, #23]
 800b564:	3301      	adds	r3, #1
 800b566:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1e7      	bne.n	800b540 <USBD_GetString+0x52>
 800b570:	e000      	b.n	800b574 <USBD_GetString+0x86>
    return;
 800b572:	bf00      	nop
  }
}
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b57a:	b480      	push	{r7}
 800b57c:	b085      	sub	sp, #20
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b582:	2300      	movs	r3, #0
 800b584:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b58a:	e005      	b.n	800b598 <USBD_GetLen+0x1e>
  {
    len++;
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	3301      	adds	r3, #1
 800b590:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	3301      	adds	r3, #1
 800b596:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1f5      	bne.n	800b58c <USBD_GetLen+0x12>
  }

  return len;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	68ba      	ldr	r2, [r7, #8]
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f003 fe26 	bl	800f226 <USBD_LL_Transmit>

  return USBD_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f003 fe15 	bl	800f226 <USBD_LL_Transmit>

  return USBD_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b084      	sub	sp, #16
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	60f8      	str	r0, [r7, #12]
 800b60e:	60b9      	str	r1, [r7, #8]
 800b610:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	2100      	movs	r1, #0
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f003 fe25 	bl	800f268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2204      	movs	r2, #4
 800b634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b638:	2300      	movs	r3, #0
 800b63a:	2200      	movs	r2, #0
 800b63c:	2100      	movs	r1, #0
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f003 fdf1 	bl	800f226 <USBD_LL_Transmit>

  return USBD_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b082      	sub	sp, #8
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2205      	movs	r2, #5
 800b65a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b65e:	2300      	movs	r3, #0
 800b660:	2200      	movs	r2, #0
 800b662:	2100      	movs	r1, #0
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f003 fdff 	bl	800f268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	4603      	mov	r3, r0
 800b67c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b67e:	79fb      	ldrb	r3, [r7, #7]
 800b680:	4a08      	ldr	r2, [pc, #32]	; (800b6a4 <disk_status+0x30>)
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	79fa      	ldrb	r2, [r7, #7]
 800b68c:	4905      	ldr	r1, [pc, #20]	; (800b6a4 <disk_status+0x30>)
 800b68e:	440a      	add	r2, r1
 800b690:	7a12      	ldrb	r2, [r2, #8]
 800b692:	4610      	mov	r0, r2
 800b694:	4798      	blx	r3
 800b696:	4603      	mov	r3, r0
 800b698:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	20000998 	.word	0x20000998

0800b6a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b6b6:	79fb      	ldrb	r3, [r7, #7]
 800b6b8:	4a0d      	ldr	r2, [pc, #52]	; (800b6f0 <disk_initialize+0x48>)
 800b6ba:	5cd3      	ldrb	r3, [r2, r3]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d111      	bne.n	800b6e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	4a0b      	ldr	r2, [pc, #44]	; (800b6f0 <disk_initialize+0x48>)
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	4a09      	ldr	r2, [pc, #36]	; (800b6f0 <disk_initialize+0x48>)
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	79fa      	ldrb	r2, [r7, #7]
 800b6d6:	4906      	ldr	r1, [pc, #24]	; (800b6f0 <disk_initialize+0x48>)
 800b6d8:	440a      	add	r2, r1
 800b6da:	7a12      	ldrb	r2, [r2, #8]
 800b6dc:	4610      	mov	r0, r2
 800b6de:	4798      	blx	r3
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20000998 	.word	0x20000998

0800b6f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b6f4:	b590      	push	{r4, r7, lr}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60b9      	str	r1, [r7, #8]
 800b6fc:	607a      	str	r2, [r7, #4]
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	4a0a      	ldr	r2, [pc, #40]	; (800b730 <disk_read+0x3c>)
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	689c      	ldr	r4, [r3, #8]
 800b710:	7bfb      	ldrb	r3, [r7, #15]
 800b712:	4a07      	ldr	r2, [pc, #28]	; (800b730 <disk_read+0x3c>)
 800b714:	4413      	add	r3, r2
 800b716:	7a18      	ldrb	r0, [r3, #8]
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	68b9      	ldr	r1, [r7, #8]
 800b71e:	47a0      	blx	r4
 800b720:	4603      	mov	r3, r0
 800b722:	75fb      	strb	r3, [r7, #23]
  return res;
 800b724:	7dfb      	ldrb	r3, [r7, #23]
}
 800b726:	4618      	mov	r0, r3
 800b728:	371c      	adds	r7, #28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd90      	pop	{r4, r7, pc}
 800b72e:	bf00      	nop
 800b730:	20000998 	.word	0x20000998

0800b734 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b734:	b590      	push	{r4, r7, lr}
 800b736:	b087      	sub	sp, #28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60b9      	str	r1, [r7, #8]
 800b73c:	607a      	str	r2, [r7, #4]
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	4603      	mov	r3, r0
 800b742:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b744:	7bfb      	ldrb	r3, [r7, #15]
 800b746:	4a0a      	ldr	r2, [pc, #40]	; (800b770 <disk_write+0x3c>)
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	68dc      	ldr	r4, [r3, #12]
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	4a07      	ldr	r2, [pc, #28]	; (800b770 <disk_write+0x3c>)
 800b754:	4413      	add	r3, r2
 800b756:	7a18      	ldrb	r0, [r3, #8]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	68b9      	ldr	r1, [r7, #8]
 800b75e:	47a0      	blx	r4
 800b760:	4603      	mov	r3, r0
 800b762:	75fb      	strb	r3, [r7, #23]
  return res;
 800b764:	7dfb      	ldrb	r3, [r7, #23]
}
 800b766:	4618      	mov	r0, r3
 800b768:	371c      	adds	r7, #28
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd90      	pop	{r4, r7, pc}
 800b76e:	bf00      	nop
 800b770:	20000998 	.word	0x20000998

0800b774 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	603a      	str	r2, [r7, #0]
 800b77e:	71fb      	strb	r3, [r7, #7]
 800b780:	460b      	mov	r3, r1
 800b782:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <disk_ioctl+0x38>)
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	79fa      	ldrb	r2, [r7, #7]
 800b792:	4906      	ldr	r1, [pc, #24]	; (800b7ac <disk_ioctl+0x38>)
 800b794:	440a      	add	r2, r1
 800b796:	7a10      	ldrb	r0, [r2, #8]
 800b798:	79b9      	ldrb	r1, [r7, #6]
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	4798      	blx	r3
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]
  return res;
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3710      	adds	r7, #16
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20000998 	.word	0x20000998

0800b7b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b7c0:	89fb      	ldrh	r3, [r7, #14]
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	b21a      	sxth	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	b21b      	sxth	r3, r3
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	b21b      	sxth	r3, r3
 800b7d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b7d2:	89fb      	ldrh	r3, [r7, #14]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3714      	adds	r7, #20
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	3303      	adds	r3, #3
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	021b      	lsls	r3, r3, #8
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	3202      	adds	r2, #2
 800b7f8:	7812      	ldrb	r2, [r2, #0]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	021b      	lsls	r3, r3, #8
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	3201      	adds	r2, #1
 800b806:	7812      	ldrb	r2, [r2, #0]
 800b808:	4313      	orrs	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	021b      	lsls	r3, r3, #8
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	7812      	ldrb	r2, [r2, #0]
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]
	return rv;
 800b818:	68fb      	ldr	r3, [r7, #12]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3714      	adds	r7, #20
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b826:	b480      	push	{r7}
 800b828:	b083      	sub	sp, #12
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
 800b82e:	460b      	mov	r3, r1
 800b830:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	887a      	ldrh	r2, [r7, #2]
 800b83a:	b2d2      	uxtb	r2, r2
 800b83c:	701a      	strb	r2, [r3, #0]
 800b83e:	887b      	ldrh	r3, [r7, #2]
 800b840:	0a1b      	lsrs	r3, r3, #8
 800b842:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	1c5a      	adds	r2, r3, #1
 800b848:	607a      	str	r2, [r7, #4]
 800b84a:	887a      	ldrh	r2, [r7, #2]
 800b84c:	b2d2      	uxtb	r2, r2
 800b84e:	701a      	strb	r2, [r3, #0]
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	683a      	ldr	r2, [r7, #0]
 800b86e:	b2d2      	uxtb	r2, r2
 800b870:	701a      	strb	r2, [r3, #0]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	0a1b      	lsrs	r3, r3, #8
 800b876:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	607a      	str	r2, [r7, #4]
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	b2d2      	uxtb	r2, r2
 800b882:	701a      	strb	r2, [r3, #0]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	0a1b      	lsrs	r3, r3, #8
 800b888:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	1c5a      	adds	r2, r3, #1
 800b88e:	607a      	str	r2, [r7, #4]
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	b2d2      	uxtb	r2, r2
 800b894:	701a      	strb	r2, [r3, #0]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	0a1b      	lsrs	r3, r3, #8
 800b89a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	1c5a      	adds	r2, r3, #1
 800b8a0:	607a      	str	r2, [r7, #4]
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	b2d2      	uxtb	r2, r2
 800b8a6:	701a      	strb	r2, [r3, #0]
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00d      	beq.n	800b8ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	1c53      	adds	r3, r2, #1
 800b8d2:	613b      	str	r3, [r7, #16]
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	1c59      	adds	r1, r3, #1
 800b8d8:	6179      	str	r1, [r7, #20]
 800b8da:	7812      	ldrb	r2, [r2, #0]
 800b8dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	607b      	str	r3, [r7, #4]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1f1      	bne.n	800b8ce <mem_cpy+0x1a>
	}
}
 800b8ea:	bf00      	nop
 800b8ec:	371c      	adds	r7, #28
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b8f6:	b480      	push	{r7}
 800b8f8:	b087      	sub	sp, #28
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	1c5a      	adds	r2, r3, #1
 800b90a:	617a      	str	r2, [r7, #20]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	b2d2      	uxtb	r2, r2
 800b910:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	3b01      	subs	r3, #1
 800b916:	607b      	str	r3, [r7, #4]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1f3      	bne.n	800b906 <mem_set+0x10>
}
 800b91e:	bf00      	nop
 800b920:	bf00      	nop
 800b922:	371c      	adds	r7, #28
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b92c:	b480      	push	{r7}
 800b92e:	b089      	sub	sp, #36	; 0x24
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	61fb      	str	r3, [r7, #28]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	61fa      	str	r2, [r7, #28]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	4619      	mov	r1, r3
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	1c5a      	adds	r2, r3, #1
 800b952:	61ba      	str	r2, [r7, #24]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	1acb      	subs	r3, r1, r3
 800b958:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	3b01      	subs	r3, #1
 800b95e:	607b      	str	r3, [r7, #4]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <mem_cmp+0x40>
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d0eb      	beq.n	800b944 <mem_cmp+0x18>

	return r;
 800b96c:	697b      	ldr	r3, [r7, #20]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3724      	adds	r7, #36	; 0x24
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b97a:	b480      	push	{r7}
 800b97c:	b083      	sub	sp, #12
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b984:	e002      	b.n	800b98c <chk_chr+0x12>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3301      	adds	r3, #1
 800b98a:	607b      	str	r3, [r7, #4]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d005      	beq.n	800b9a0 <chk_chr+0x26>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	461a      	mov	r2, r3
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d1f2      	bne.n	800b986 <chk_chr+0xc>
	return *str;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60bb      	str	r3, [r7, #8]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	60fb      	str	r3, [r7, #12]
 800b9c2:	e029      	b.n	800ba18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b9c4:	4a27      	ldr	r2, [pc, #156]	; (800ba64 <chk_lock+0xb4>)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	011b      	lsls	r3, r3, #4
 800b9ca:	4413      	add	r3, r2
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d01d      	beq.n	800ba0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9d2:	4a24      	ldr	r2, [pc, #144]	; (800ba64 <chk_lock+0xb4>)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	011b      	lsls	r3, r3, #4
 800b9d8:	4413      	add	r3, r2
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d116      	bne.n	800ba12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b9e4:	4a1f      	ldr	r2, [pc, #124]	; (800ba64 <chk_lock+0xb4>)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	011b      	lsls	r3, r3, #4
 800b9ea:	4413      	add	r3, r2
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d10c      	bne.n	800ba12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9f8:	4a1a      	ldr	r2, [pc, #104]	; (800ba64 <chk_lock+0xb4>)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	011b      	lsls	r3, r3, #4
 800b9fe:	4413      	add	r3, r2
 800ba00:	3308      	adds	r3, #8
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d102      	bne.n	800ba12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ba0c:	e007      	b.n	800ba1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	3301      	adds	r3, #1
 800ba16:	60fb      	str	r3, [r7, #12]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d9d2      	bls.n	800b9c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	d109      	bne.n	800ba38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d102      	bne.n	800ba30 <chk_lock+0x80>
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d101      	bne.n	800ba34 <chk_lock+0x84>
 800ba30:	2300      	movs	r3, #0
 800ba32:	e010      	b.n	800ba56 <chk_lock+0xa6>
 800ba34:	2312      	movs	r3, #18
 800ba36:	e00e      	b.n	800ba56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d108      	bne.n	800ba50 <chk_lock+0xa0>
 800ba3e:	4a09      	ldr	r2, [pc, #36]	; (800ba64 <chk_lock+0xb4>)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	011b      	lsls	r3, r3, #4
 800ba44:	4413      	add	r3, r2
 800ba46:	330c      	adds	r3, #12
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba4e:	d101      	bne.n	800ba54 <chk_lock+0xa4>
 800ba50:	2310      	movs	r3, #16
 800ba52:	e000      	b.n	800ba56 <chk_lock+0xa6>
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	20000778 	.word	0x20000778

0800ba68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	607b      	str	r3, [r7, #4]
 800ba72:	e002      	b.n	800ba7a <enq_lock+0x12>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3301      	adds	r3, #1
 800ba78:	607b      	str	r3, [r7, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d806      	bhi.n	800ba8e <enq_lock+0x26>
 800ba80:	4a09      	ldr	r2, [pc, #36]	; (800baa8 <enq_lock+0x40>)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	011b      	lsls	r3, r3, #4
 800ba86:	4413      	add	r3, r2
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1f2      	bne.n	800ba74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	bf14      	ite	ne
 800ba94:	2301      	movne	r3, #1
 800ba96:	2300      	moveq	r3, #0
 800ba98:	b2db      	uxtb	r3, r3
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	20000778 	.word	0x20000778

0800baac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bab6:	2300      	movs	r3, #0
 800bab8:	60fb      	str	r3, [r7, #12]
 800baba:	e01f      	b.n	800bafc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800babc:	4a41      	ldr	r2, [pc, #260]	; (800bbc4 <inc_lock+0x118>)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	011b      	lsls	r3, r3, #4
 800bac2:	4413      	add	r3, r2
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d113      	bne.n	800baf6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bace:	4a3d      	ldr	r2, [pc, #244]	; (800bbc4 <inc_lock+0x118>)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	4413      	add	r3, r2
 800bad6:	3304      	adds	r3, #4
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bade:	429a      	cmp	r2, r3
 800bae0:	d109      	bne.n	800baf6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bae2:	4a38      	ldr	r2, [pc, #224]	; (800bbc4 <inc_lock+0x118>)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	4413      	add	r3, r2
 800baea:	3308      	adds	r3, #8
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d006      	beq.n	800bb04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3301      	adds	r3, #1
 800bafa:	60fb      	str	r3, [r7, #12]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d9dc      	bls.n	800babc <inc_lock+0x10>
 800bb02:	e000      	b.n	800bb06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bb04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d132      	bne.n	800bb72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	60fb      	str	r3, [r7, #12]
 800bb10:	e002      	b.n	800bb18 <inc_lock+0x6c>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	3301      	adds	r3, #1
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d806      	bhi.n	800bb2c <inc_lock+0x80>
 800bb1e:	4a29      	ldr	r2, [pc, #164]	; (800bbc4 <inc_lock+0x118>)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	011b      	lsls	r3, r3, #4
 800bb24:	4413      	add	r3, r2
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1f2      	bne.n	800bb12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d101      	bne.n	800bb36 <inc_lock+0x8a>
 800bb32:	2300      	movs	r3, #0
 800bb34:	e040      	b.n	800bbb8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	4922      	ldr	r1, [pc, #136]	; (800bbc4 <inc_lock+0x118>)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	011b      	lsls	r3, r3, #4
 800bb40:	440b      	add	r3, r1
 800bb42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	689a      	ldr	r2, [r3, #8]
 800bb48:	491e      	ldr	r1, [pc, #120]	; (800bbc4 <inc_lock+0x118>)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	011b      	lsls	r3, r3, #4
 800bb4e:	440b      	add	r3, r1
 800bb50:	3304      	adds	r3, #4
 800bb52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	695a      	ldr	r2, [r3, #20]
 800bb58:	491a      	ldr	r1, [pc, #104]	; (800bbc4 <inc_lock+0x118>)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	011b      	lsls	r3, r3, #4
 800bb5e:	440b      	add	r3, r1
 800bb60:	3308      	adds	r3, #8
 800bb62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bb64:	4a17      	ldr	r2, [pc, #92]	; (800bbc4 <inc_lock+0x118>)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	011b      	lsls	r3, r3, #4
 800bb6a:	4413      	add	r3, r2
 800bb6c:	330c      	adds	r3, #12
 800bb6e:	2200      	movs	r2, #0
 800bb70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d009      	beq.n	800bb8c <inc_lock+0xe0>
 800bb78:	4a12      	ldr	r2, [pc, #72]	; (800bbc4 <inc_lock+0x118>)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	011b      	lsls	r3, r3, #4
 800bb7e:	4413      	add	r3, r2
 800bb80:	330c      	adds	r3, #12
 800bb82:	881b      	ldrh	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d001      	beq.n	800bb8c <inc_lock+0xe0>
 800bb88:	2300      	movs	r3, #0
 800bb8a:	e015      	b.n	800bbb8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d108      	bne.n	800bba4 <inc_lock+0xf8>
 800bb92:	4a0c      	ldr	r2, [pc, #48]	; (800bbc4 <inc_lock+0x118>)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	011b      	lsls	r3, r3, #4
 800bb98:	4413      	add	r3, r2
 800bb9a:	330c      	adds	r3, #12
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	e001      	b.n	800bba8 <inc_lock+0xfc>
 800bba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bba8:	4906      	ldr	r1, [pc, #24]	; (800bbc4 <inc_lock+0x118>)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	011b      	lsls	r3, r3, #4
 800bbae:	440b      	add	r3, r1
 800bbb0:	330c      	adds	r3, #12
 800bbb2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3301      	adds	r3, #1
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr
 800bbc4:	20000778 	.word	0x20000778

0800bbc8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	607b      	str	r3, [r7, #4]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d825      	bhi.n	800bc28 <dec_lock+0x60>
		n = Files[i].ctr;
 800bbdc:	4a17      	ldr	r2, [pc, #92]	; (800bc3c <dec_lock+0x74>)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	011b      	lsls	r3, r3, #4
 800bbe2:	4413      	add	r3, r2
 800bbe4:	330c      	adds	r3, #12
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bbea:	89fb      	ldrh	r3, [r7, #14]
 800bbec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbf0:	d101      	bne.n	800bbf6 <dec_lock+0x2e>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bbf6:	89fb      	ldrh	r3, [r7, #14]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d002      	beq.n	800bc02 <dec_lock+0x3a>
 800bbfc:	89fb      	ldrh	r3, [r7, #14]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bc02:	4a0e      	ldr	r2, [pc, #56]	; (800bc3c <dec_lock+0x74>)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	011b      	lsls	r3, r3, #4
 800bc08:	4413      	add	r3, r2
 800bc0a:	330c      	adds	r3, #12
 800bc0c:	89fa      	ldrh	r2, [r7, #14]
 800bc0e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bc10:	89fb      	ldrh	r3, [r7, #14]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d105      	bne.n	800bc22 <dec_lock+0x5a>
 800bc16:	4a09      	ldr	r2, [pc, #36]	; (800bc3c <dec_lock+0x74>)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	011b      	lsls	r3, r3, #4
 800bc1c:	4413      	add	r3, r2
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	737b      	strb	r3, [r7, #13]
 800bc26:	e001      	b.n	800bc2c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bc28:	2302      	movs	r3, #2
 800bc2a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bc2c:	7b7b      	ldrb	r3, [r7, #13]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3714      	adds	r7, #20
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	20000778 	.word	0x20000778

0800bc40 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bc48:	2300      	movs	r3, #0
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	e010      	b.n	800bc70 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bc4e:	4a0d      	ldr	r2, [pc, #52]	; (800bc84 <clear_lock+0x44>)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	011b      	lsls	r3, r3, #4
 800bc54:	4413      	add	r3, r2
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d105      	bne.n	800bc6a <clear_lock+0x2a>
 800bc5e:	4a09      	ldr	r2, [pc, #36]	; (800bc84 <clear_lock+0x44>)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	011b      	lsls	r3, r3, #4
 800bc64:	4413      	add	r3, r2
 800bc66:	2200      	movs	r2, #0
 800bc68:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d9eb      	bls.n	800bc4e <clear_lock+0xe>
	}
}
 800bc76:	bf00      	nop
 800bc78:	bf00      	nop
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	20000778 	.word	0x20000778

0800bc88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	78db      	ldrb	r3, [r3, #3]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d034      	beq.n	800bd06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	7858      	ldrb	r0, [r3, #1]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bcac:	2301      	movs	r3, #1
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	f7ff fd40 	bl	800b734 <disk_write>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d002      	beq.n	800bcc0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	73fb      	strb	r3, [r7, #15]
 800bcbe:	e022      	b.n	800bd06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	1ad2      	subs	r2, r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d217      	bcs.n	800bd06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	789b      	ldrb	r3, [r3, #2]
 800bcda:	613b      	str	r3, [r7, #16]
 800bcdc:	e010      	b.n	800bd00 <sync_window+0x78>
					wsect += fs->fsize;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	69db      	ldr	r3, [r3, #28]
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	4413      	add	r3, r2
 800bce6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	7858      	ldrb	r0, [r3, #1]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	697a      	ldr	r2, [r7, #20]
 800bcf6:	f7ff fd1d 	bl	800b734 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	613b      	str	r3, [r7, #16]
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d8eb      	bhi.n	800bcde <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d01b      	beq.n	800bd60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7ff ffad 	bl	800bc88 <sync_window>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d113      	bne.n	800bd60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	7858      	ldrb	r0, [r3, #1]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bd42:	2301      	movs	r3, #1
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	f7ff fcd5 	bl	800b6f4 <disk_read>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d004      	beq.n	800bd5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bd50:	f04f 33ff 	mov.w	r3, #4294967295
 800bd54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bd60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff ff87 	bl	800bc88 <sync_window>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d158      	bne.n	800be36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d148      	bne.n	800be1e <sync_fs+0xb2>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	791b      	ldrb	r3, [r3, #4]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d144      	bne.n	800be1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3334      	adds	r3, #52	; 0x34
 800bd98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff fda9 	bl	800b8f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3334      	adds	r3, #52	; 0x34
 800bda8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bdac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff fd38 	bl	800b826 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	3334      	adds	r3, #52	; 0x34
 800bdba:	4921      	ldr	r1, [pc, #132]	; (800be40 <sync_fs+0xd4>)
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7ff fd4d 	bl	800b85c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	3334      	adds	r3, #52	; 0x34
 800bdc6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bdca:	491e      	ldr	r1, [pc, #120]	; (800be44 <sync_fs+0xd8>)
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7ff fd45 	bl	800b85c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	3334      	adds	r3, #52	; 0x34
 800bdd6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	4619      	mov	r1, r3
 800bde0:	4610      	mov	r0, r2
 800bde2:	f7ff fd3b 	bl	800b85c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	3334      	adds	r3, #52	; 0x34
 800bdea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f7ff fd31 	bl	800b85c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	1c5a      	adds	r2, r3, #1
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	7858      	ldrb	r0, [r3, #1]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be12:	2301      	movs	r3, #1
 800be14:	f7ff fc8e 	bl	800b734 <disk_write>
			fs->fsi_flag = 0;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2200      	movs	r2, #0
 800be24:	2100      	movs	r1, #0
 800be26:	4618      	mov	r0, r3
 800be28:	f7ff fca4 	bl	800b774 <disk_ioctl>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d001      	beq.n	800be36 <sync_fs+0xca>
 800be32:	2301      	movs	r3, #1
 800be34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800be36:	7bfb      	ldrb	r3, [r7, #15]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	41615252 	.word	0x41615252
 800be44:	61417272 	.word	0x61417272

0800be48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	3b02      	subs	r3, #2
 800be56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	3b02      	subs	r3, #2
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	429a      	cmp	r2, r3
 800be62:	d301      	bcc.n	800be68 <clust2sect+0x20>
 800be64:	2300      	movs	r3, #0
 800be66:	e008      	b.n	800be7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	895b      	ldrh	r3, [r3, #10]
 800be6c:	461a      	mov	r2, r3
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	fb03 f202 	mul.w	r2, r3, r2
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be78:	4413      	add	r3, r2
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	370c      	adds	r7, #12
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b086      	sub	sp, #24
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d904      	bls.n	800bea6 <get_fat+0x20>
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d302      	bcc.n	800beac <get_fat+0x26>
		val = 1;	/* Internal error */
 800bea6:	2301      	movs	r3, #1
 800bea8:	617b      	str	r3, [r7, #20]
 800beaa:	e08f      	b.n	800bfcc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800beac:	f04f 33ff 	mov.w	r3, #4294967295
 800beb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d062      	beq.n	800bf80 <get_fat+0xfa>
 800beba:	2b03      	cmp	r3, #3
 800bebc:	dc7c      	bgt.n	800bfb8 <get_fat+0x132>
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d002      	beq.n	800bec8 <get_fat+0x42>
 800bec2:	2b02      	cmp	r3, #2
 800bec4:	d042      	beq.n	800bf4c <get_fat+0xc6>
 800bec6:	e077      	b.n	800bfb8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	085b      	lsrs	r3, r3, #1
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	4413      	add	r3, r2
 800bed4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	0a5b      	lsrs	r3, r3, #9
 800bede:	4413      	add	r3, r2
 800bee0:	4619      	mov	r1, r3
 800bee2:	6938      	ldr	r0, [r7, #16]
 800bee4:	f7ff ff14 	bl	800bd10 <move_window>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d167      	bne.n	800bfbe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	60fa      	str	r2, [r7, #12]
 800bef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef8:	693a      	ldr	r2, [r7, #16]
 800befa:	4413      	add	r3, r2
 800befc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	0a5b      	lsrs	r3, r3, #9
 800bf0a:	4413      	add	r3, r2
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6938      	ldr	r0, [r7, #16]
 800bf10:	f7ff fefe 	bl	800bd10 <move_window>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d153      	bne.n	800bfc2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf20:	693a      	ldr	r2, [r7, #16]
 800bf22:	4413      	add	r3, r2
 800bf24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf28:	021b      	lsls	r3, r3, #8
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	f003 0301 	and.w	r3, r3, #1
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <get_fat+0xbc>
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	091b      	lsrs	r3, r3, #4
 800bf40:	e002      	b.n	800bf48 <get_fat+0xc2>
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf48:	617b      	str	r3, [r7, #20]
			break;
 800bf4a:	e03f      	b.n	800bfcc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	0a1b      	lsrs	r3, r3, #8
 800bf54:	4413      	add	r3, r2
 800bf56:	4619      	mov	r1, r3
 800bf58:	6938      	ldr	r0, [r7, #16]
 800bf5a:	f7ff fed9 	bl	800bd10 <move_window>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d130      	bne.n	800bfc6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bf72:	4413      	add	r3, r2
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7ff fc1b 	bl	800b7b0 <ld_word>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	617b      	str	r3, [r7, #20]
			break;
 800bf7e:	e025      	b.n	800bfcc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	09db      	lsrs	r3, r3, #7
 800bf88:	4413      	add	r3, r2
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6938      	ldr	r0, [r7, #16]
 800bf8e:	f7ff febf 	bl	800bd10 <move_window>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d118      	bne.n	800bfca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bfa6:	4413      	add	r3, r2
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff fc19 	bl	800b7e0 <ld_dword>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bfb4:	617b      	str	r3, [r7, #20]
			break;
 800bfb6:	e009      	b.n	800bfcc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bfb8:	2301      	movs	r3, #1
 800bfba:	617b      	str	r3, [r7, #20]
 800bfbc:	e006      	b.n	800bfcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfbe:	bf00      	nop
 800bfc0:	e004      	b.n	800bfcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bfc2:	bf00      	nop
 800bfc4:	e002      	b.n	800bfcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bfc6:	bf00      	nop
 800bfc8:	e000      	b.n	800bfcc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bfca:	bf00      	nop
		}
	}

	return val;
 800bfcc:	697b      	ldr	r3, [r7, #20]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bfd6:	b590      	push	{r4, r7, lr}
 800bfd8:	b089      	sub	sp, #36	; 0x24
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	60b9      	str	r1, [r7, #8]
 800bfe0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	f240 80d2 	bls.w	800c192 <put_fat+0x1bc>
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	699b      	ldr	r3, [r3, #24]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	f080 80cc 	bcs.w	800c192 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	2b03      	cmp	r3, #3
 800c000:	f000 8096 	beq.w	800c130 <put_fat+0x15a>
 800c004:	2b03      	cmp	r3, #3
 800c006:	f300 80cd 	bgt.w	800c1a4 <put_fat+0x1ce>
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d002      	beq.n	800c014 <put_fat+0x3e>
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d06e      	beq.n	800c0f0 <put_fat+0x11a>
 800c012:	e0c7      	b.n	800c1a4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	61bb      	str	r3, [r7, #24]
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	085b      	lsrs	r3, r3, #1
 800c01c:	69ba      	ldr	r2, [r7, #24]
 800c01e:	4413      	add	r3, r2
 800c020:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	0a5b      	lsrs	r3, r3, #9
 800c02a:	4413      	add	r3, r2
 800c02c:	4619      	mov	r1, r3
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f7ff fe6e 	bl	800bd10 <move_window>
 800c034:	4603      	mov	r3, r0
 800c036:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c038:	7ffb      	ldrb	r3, [r7, #31]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f040 80ab 	bne.w	800c196 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	1c59      	adds	r1, r3, #1
 800c04a:	61b9      	str	r1, [r7, #24]
 800c04c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c050:	4413      	add	r3, r2
 800c052:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	f003 0301 	and.w	r3, r3, #1
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00d      	beq.n	800c07a <put_fat+0xa4>
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	b25b      	sxtb	r3, r3
 800c064:	f003 030f 	and.w	r3, r3, #15
 800c068:	b25a      	sxtb	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	011b      	lsls	r3, r3, #4
 800c070:	b25b      	sxtb	r3, r3
 800c072:	4313      	orrs	r3, r2
 800c074:	b25b      	sxtb	r3, r3
 800c076:	b2db      	uxtb	r3, r3
 800c078:	e001      	b.n	800c07e <put_fat+0xa8>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	697a      	ldr	r2, [r7, #20]
 800c080:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2201      	movs	r2, #1
 800c086:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	0a5b      	lsrs	r3, r3, #9
 800c090:	4413      	add	r3, r2
 800c092:	4619      	mov	r1, r3
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7ff fe3b 	bl	800bd10 <move_window>
 800c09a:	4603      	mov	r3, r0
 800c09c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c09e:	7ffb      	ldrb	r3, [r7, #31]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d17a      	bne.n	800c19a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b0:	4413      	add	r3, r2
 800c0b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d003      	beq.n	800c0c6 <put_fat+0xf0>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	091b      	lsrs	r3, r3, #4
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	e00e      	b.n	800c0e4 <put_fat+0x10e>
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	b25b      	sxtb	r3, r3
 800c0cc:	f023 030f 	bic.w	r3, r3, #15
 800c0d0:	b25a      	sxtb	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	0a1b      	lsrs	r3, r3, #8
 800c0d6:	b25b      	sxtb	r3, r3
 800c0d8:	f003 030f 	and.w	r3, r3, #15
 800c0dc:	b25b      	sxtb	r3, r3
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	b25b      	sxtb	r3, r3
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	697a      	ldr	r2, [r7, #20]
 800c0e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	70da      	strb	r2, [r3, #3]
			break;
 800c0ee:	e059      	b.n	800c1a4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	0a1b      	lsrs	r3, r3, #8
 800c0f8:	4413      	add	r3, r2
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f7ff fe07 	bl	800bd10 <move_window>
 800c102:	4603      	mov	r3, r0
 800c104:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c106:	7ffb      	ldrb	r3, [r7, #31]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d148      	bne.n	800c19e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c11a:	4413      	add	r3, r2
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	b292      	uxth	r2, r2
 800c120:	4611      	mov	r1, r2
 800c122:	4618      	mov	r0, r3
 800c124:	f7ff fb7f 	bl	800b826 <st_word>
			fs->wflag = 1;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2201      	movs	r2, #1
 800c12c:	70da      	strb	r2, [r3, #3]
			break;
 800c12e:	e039      	b.n	800c1a4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	09db      	lsrs	r3, r3, #7
 800c138:	4413      	add	r3, r2
 800c13a:	4619      	mov	r1, r3
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f7ff fde7 	bl	800bd10 <move_window>
 800c142:	4603      	mov	r3, r0
 800c144:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c146:	7ffb      	ldrb	r3, [r7, #31]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d12a      	bne.n	800c1a2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c160:	4413      	add	r3, r2
 800c162:	4618      	mov	r0, r3
 800c164:	f7ff fb3c 	bl	800b7e0 <ld_dword>
 800c168:	4603      	mov	r3, r0
 800c16a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c16e:	4323      	orrs	r3, r4
 800c170:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c180:	4413      	add	r3, r2
 800c182:	6879      	ldr	r1, [r7, #4]
 800c184:	4618      	mov	r0, r3
 800c186:	f7ff fb69 	bl	800b85c <st_dword>
			fs->wflag = 1;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2201      	movs	r2, #1
 800c18e:	70da      	strb	r2, [r3, #3]
			break;
 800c190:	e008      	b.n	800c1a4 <put_fat+0x1ce>
		}
	}
 800c192:	bf00      	nop
 800c194:	e006      	b.n	800c1a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c196:	bf00      	nop
 800c198:	e004      	b.n	800c1a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c19a:	bf00      	nop
 800c19c:	e002      	b.n	800c1a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c19e:	bf00      	nop
 800c1a0:	e000      	b.n	800c1a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c1a2:	bf00      	nop
	return res;
 800c1a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3724      	adds	r7, #36	; 0x24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd90      	pop	{r4, r7, pc}

0800c1ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b088      	sub	sp, #32
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	60f8      	str	r0, [r7, #12]
 800c1b6:	60b9      	str	r1, [r7, #8]
 800c1b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d904      	bls.n	800c1d4 <remove_chain+0x26>
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	68ba      	ldr	r2, [r7, #8]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d301      	bcc.n	800c1d8 <remove_chain+0x2a>
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	e04b      	b.n	800c270 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00c      	beq.n	800c1f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c1de:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	69b8      	ldr	r0, [r7, #24]
 800c1e6:	f7ff fef6 	bl	800bfd6 <put_fat>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c1ee:	7ffb      	ldrb	r3, [r7, #31]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <remove_chain+0x4a>
 800c1f4:	7ffb      	ldrb	r3, [r7, #31]
 800c1f6:	e03b      	b.n	800c270 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7ff fe43 	bl	800be86 <get_fat>
 800c200:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d031      	beq.n	800c26c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d101      	bne.n	800c212 <remove_chain+0x64>
 800c20e:	2302      	movs	r3, #2
 800c210:	e02e      	b.n	800c270 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c218:	d101      	bne.n	800c21e <remove_chain+0x70>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e028      	b.n	800c270 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c21e:	2200      	movs	r2, #0
 800c220:	68b9      	ldr	r1, [r7, #8]
 800c222:	69b8      	ldr	r0, [r7, #24]
 800c224:	f7ff fed7 	bl	800bfd6 <put_fat>
 800c228:	4603      	mov	r3, r0
 800c22a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c22c:	7ffb      	ldrb	r3, [r7, #31]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <remove_chain+0x88>
 800c232:	7ffb      	ldrb	r3, [r7, #31]
 800c234:	e01c      	b.n	800c270 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	695a      	ldr	r2, [r3, #20]
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	3b02      	subs	r3, #2
 800c240:	429a      	cmp	r2, r3
 800c242:	d20b      	bcs.n	800c25c <remove_chain+0xae>
			fs->free_clst++;
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	695b      	ldr	r3, [r3, #20]
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	791b      	ldrb	r3, [r3, #4]
 800c252:	f043 0301 	orr.w	r3, r3, #1
 800c256:	b2da      	uxtb	r2, r3
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	429a      	cmp	r2, r3
 800c268:	d3c6      	bcc.n	800c1f8 <remove_chain+0x4a>
 800c26a:	e000      	b.n	800c26e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c26c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3720      	adds	r7, #32
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10d      	bne.n	800c2aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d004      	beq.n	800c2a4 <create_chain+0x2c>
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	699b      	ldr	r3, [r3, #24]
 800c29e:	69ba      	ldr	r2, [r7, #24]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d31b      	bcc.n	800c2dc <create_chain+0x64>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	61bb      	str	r3, [r7, #24]
 800c2a8:	e018      	b.n	800c2dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7ff fdea 	bl	800be86 <get_fat>
 800c2b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d801      	bhi.n	800c2be <create_chain+0x46>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e070      	b.n	800c3a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c4:	d101      	bne.n	800c2ca <create_chain+0x52>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	e06a      	b.n	800c3a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d201      	bcs.n	800c2d8 <create_chain+0x60>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	e063      	b.n	800c3a0 <create_chain+0x128>
		scl = clst;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	69fa      	ldr	r2, [r7, #28]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d307      	bcc.n	800c300 <create_chain+0x88>
				ncl = 2;
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c2f4:	69fa      	ldr	r2, [r7, #28]
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d901      	bls.n	800c300 <create_chain+0x88>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	e04f      	b.n	800c3a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c300:	69f9      	ldr	r1, [r7, #28]
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff fdbf 	bl	800be86 <get_fat>
 800c308:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00e      	beq.n	800c32e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d003      	beq.n	800c31e <create_chain+0xa6>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31c:	d101      	bne.n	800c322 <create_chain+0xaa>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	e03e      	b.n	800c3a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c322:	69fa      	ldr	r2, [r7, #28]
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	429a      	cmp	r2, r3
 800c328:	d1da      	bne.n	800c2e0 <create_chain+0x68>
 800c32a:	2300      	movs	r3, #0
 800c32c:	e038      	b.n	800c3a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c32e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c330:	f04f 32ff 	mov.w	r2, #4294967295
 800c334:	69f9      	ldr	r1, [r7, #28]
 800c336:	6938      	ldr	r0, [r7, #16]
 800c338:	f7ff fe4d 	bl	800bfd6 <put_fat>
 800c33c:	4603      	mov	r3, r0
 800c33e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c340:	7dfb      	ldrb	r3, [r7, #23]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d109      	bne.n	800c35a <create_chain+0xe2>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d006      	beq.n	800c35a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c34c:	69fa      	ldr	r2, [r7, #28]
 800c34e:	6839      	ldr	r1, [r7, #0]
 800c350:	6938      	ldr	r0, [r7, #16]
 800c352:	f7ff fe40 	bl	800bfd6 <put_fat>
 800c356:	4603      	mov	r3, r0
 800c358:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d116      	bne.n	800c38e <create_chain+0x116>
		fs->last_clst = ncl;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	69fa      	ldr	r2, [r7, #28]
 800c364:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	695a      	ldr	r2, [r3, #20]
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	3b02      	subs	r3, #2
 800c370:	429a      	cmp	r2, r3
 800c372:	d804      	bhi.n	800c37e <create_chain+0x106>
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	1e5a      	subs	r2, r3, #1
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	791b      	ldrb	r3, [r3, #4]
 800c382:	f043 0301 	orr.w	r3, r3, #1
 800c386:	b2da      	uxtb	r2, r3
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	711a      	strb	r2, [r3, #4]
 800c38c:	e007      	b.n	800c39e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d102      	bne.n	800c39a <create_chain+0x122>
 800c394:	f04f 33ff 	mov.w	r3, #4294967295
 800c398:	e000      	b.n	800c39c <create_chain+0x124>
 800c39a:	2301      	movs	r3, #1
 800c39c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c39e:	69fb      	ldr	r3, [r7, #28]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3720      	adds	r7, #32
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3bc:	3304      	adds	r3, #4
 800c3be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	0a5b      	lsrs	r3, r3, #9
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	8952      	ldrh	r2, [r2, #10]
 800c3c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	1d1a      	adds	r2, r3, #4
 800c3d2:	613a      	str	r2, [r7, #16]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <clmt_clust+0x3a>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e010      	b.n	800c404 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c3e2:	697a      	ldr	r2, [r7, #20]
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d307      	bcc.n	800c3fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	617b      	str	r3, [r7, #20]
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3f8:	e7e9      	b.n	800c3ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c3fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	4413      	add	r3, r2
}
 800c404:	4618      	mov	r0, r3
 800c406:	371c      	adds	r7, #28
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c426:	d204      	bcs.n	800c432 <dir_sdi+0x22>
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	f003 031f 	and.w	r3, r3, #31
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c432:	2302      	movs	r3, #2
 800c434:	e063      	b.n	800c4fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d106      	bne.n	800c456 <dir_sdi+0x46>
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d902      	bls.n	800c456 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10c      	bne.n	800c476 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	095b      	lsrs	r3, r3, #5
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	8912      	ldrh	r2, [r2, #8]
 800c464:	4293      	cmp	r3, r2
 800c466:	d301      	bcc.n	800c46c <dir_sdi+0x5c>
 800c468:	2302      	movs	r3, #2
 800c46a:	e048      	b.n	800c4fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	61da      	str	r2, [r3, #28]
 800c474:	e029      	b.n	800c4ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	895b      	ldrh	r3, [r3, #10]
 800c47a:	025b      	lsls	r3, r3, #9
 800c47c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c47e:	e019      	b.n	800c4b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6979      	ldr	r1, [r7, #20]
 800c484:	4618      	mov	r0, r3
 800c486:	f7ff fcfe 	bl	800be86 <get_fat>
 800c48a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c492:	d101      	bne.n	800c498 <dir_sdi+0x88>
 800c494:	2301      	movs	r3, #1
 800c496:	e032      	b.n	800c4fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d904      	bls.n	800c4a8 <dir_sdi+0x98>
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d301      	bcc.n	800c4ac <dir_sdi+0x9c>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	e028      	b.n	800c4fe <dir_sdi+0xee>
			ofs -= csz;
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d2e1      	bcs.n	800c480 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c4bc:	6979      	ldr	r1, [r7, #20]
 800c4be:	6938      	ldr	r0, [r7, #16]
 800c4c0:	f7ff fcc2 	bl	800be48 <clust2sect>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d101      	bne.n	800c4dc <dir_sdi+0xcc>
 800c4d8:	2302      	movs	r3, #2
 800c4da:	e010      	b.n	800c4fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	69da      	ldr	r2, [r3, #28]
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	0a5b      	lsrs	r3, r3, #9
 800c4e4:	441a      	add	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f6:	441a      	add	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b086      	sub	sp, #24
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	3320      	adds	r3, #32
 800c51c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	69db      	ldr	r3, [r3, #28]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d003      	beq.n	800c52e <dir_next+0x28>
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c52c:	d301      	bcc.n	800c532 <dir_next+0x2c>
 800c52e:	2304      	movs	r3, #4
 800c530:	e0aa      	b.n	800c688 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f040 8098 	bne.w	800c66e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	69db      	ldr	r3, [r3, #28]
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10b      	bne.n	800c568 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	095b      	lsrs	r3, r3, #5
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	8912      	ldrh	r2, [r2, #8]
 800c558:	4293      	cmp	r3, r2
 800c55a:	f0c0 8088 	bcc.w	800c66e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	61da      	str	r2, [r3, #28]
 800c564:	2304      	movs	r3, #4
 800c566:	e08f      	b.n	800c688 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	0a5b      	lsrs	r3, r3, #9
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	8952      	ldrh	r2, [r2, #10]
 800c570:	3a01      	subs	r2, #1
 800c572:	4013      	ands	r3, r2
 800c574:	2b00      	cmp	r3, #0
 800c576:	d17a      	bne.n	800c66e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f7ff fc80 	bl	800be86 <get_fat>
 800c586:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d801      	bhi.n	800c592 <dir_next+0x8c>
 800c58e:	2302      	movs	r3, #2
 800c590:	e07a      	b.n	800c688 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c598:	d101      	bne.n	800c59e <dir_next+0x98>
 800c59a:	2301      	movs	r3, #1
 800c59c:	e074      	b.n	800c688 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d358      	bcc.n	800c65a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d104      	bne.n	800c5b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	61da      	str	r2, [r3, #28]
 800c5b4:	2304      	movs	r3, #4
 800c5b6:	e067      	b.n	800c688 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f7ff fe59 	bl	800c278 <create_chain>
 800c5c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <dir_next+0xcc>
 800c5ce:	2307      	movs	r3, #7
 800c5d0:	e05a      	b.n	800c688 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d101      	bne.n	800c5dc <dir_next+0xd6>
 800c5d8:	2302      	movs	r3, #2
 800c5da:	e055      	b.n	800c688 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e2:	d101      	bne.n	800c5e8 <dir_next+0xe2>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e04f      	b.n	800c688 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f7ff fb4d 	bl	800bc88 <sync_window>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d001      	beq.n	800c5f8 <dir_next+0xf2>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e047      	b.n	800c688 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3334      	adds	r3, #52	; 0x34
 800c5fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c600:	2100      	movs	r1, #0
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff f977 	bl	800b8f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c608:	2300      	movs	r3, #0
 800c60a:	613b      	str	r3, [r7, #16]
 800c60c:	6979      	ldr	r1, [r7, #20]
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f7ff fc1a 	bl	800be48 <clust2sect>
 800c614:	4602      	mov	r2, r0
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	631a      	str	r2, [r3, #48]	; 0x30
 800c61a:	e012      	b.n	800c642 <dir_next+0x13c>
						fs->wflag = 1;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2201      	movs	r2, #1
 800c620:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f7ff fb30 	bl	800bc88 <sync_window>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <dir_next+0x12c>
 800c62e:	2301      	movs	r3, #1
 800c630:	e02a      	b.n	800c688 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	3301      	adds	r3, #1
 800c636:	613b      	str	r3, [r7, #16]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c63c:	1c5a      	adds	r2, r3, #1
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	631a      	str	r2, [r3, #48]	; 0x30
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	895b      	ldrh	r3, [r3, #10]
 800c646:	461a      	mov	r2, r3
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d3e6      	bcc.n	800c61c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	1ad2      	subs	r2, r2, r3
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c660:	6979      	ldr	r1, [r7, #20]
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f7ff fbf0 	bl	800be48 <clust2sect>
 800c668:	4602      	mov	r2, r0
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c680:	441a      	add	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3718      	adds	r7, #24
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b086      	sub	sp, #24
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff feb4 	bl	800c410 <dir_sdi>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c6ac:	7dfb      	ldrb	r3, [r7, #23]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d12b      	bne.n	800c70a <dir_alloc+0x7a>
		n = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	69db      	ldr	r3, [r3, #28]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f7ff fb27 	bl	800bd10 <move_window>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6c6:	7dfb      	ldrb	r3, [r7, #23]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d11d      	bne.n	800c708 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6a1b      	ldr	r3, [r3, #32]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2be5      	cmp	r3, #229	; 0xe5
 800c6d4:	d004      	beq.n	800c6e0 <dir_alloc+0x50>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d107      	bne.n	800c6f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	613b      	str	r3, [r7, #16]
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d102      	bne.n	800c6f4 <dir_alloc+0x64>
 800c6ee:	e00c      	b.n	800c70a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f7ff ff05 	bl	800c506 <dir_next>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c700:	7dfb      	ldrb	r3, [r7, #23]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d0d7      	beq.n	800c6b6 <dir_alloc+0x26>
 800c706:	e000      	b.n	800c70a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c708:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c70a:	7dfb      	ldrb	r3, [r7, #23]
 800c70c:	2b04      	cmp	r3, #4
 800c70e:	d101      	bne.n	800c714 <dir_alloc+0x84>
 800c710:	2307      	movs	r3, #7
 800c712:	75fb      	strb	r3, [r7, #23]
	return res;
 800c714:	7dfb      	ldrb	r3, [r7, #23]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3718      	adds	r7, #24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
 800c726:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	331a      	adds	r3, #26
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7ff f83f 	bl	800b7b0 <ld_word>
 800c732:	4603      	mov	r3, r0
 800c734:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d109      	bne.n	800c752 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	3314      	adds	r3, #20
 800c742:	4618      	mov	r0, r3
 800c744:	f7ff f834 	bl	800b7b0 <ld_word>
 800c748:	4603      	mov	r3, r0
 800c74a:	041b      	lsls	r3, r3, #16
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	4313      	orrs	r3, r2
 800c750:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c752:	68fb      	ldr	r3, [r7, #12]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	331a      	adds	r3, #26
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	b292      	uxth	r2, r2
 800c770:	4611      	mov	r1, r2
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff f857 	bl	800b826 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b03      	cmp	r3, #3
 800c77e:	d109      	bne.n	800c794 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	f103 0214 	add.w	r2, r3, #20
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	0c1b      	lsrs	r3, r3, #16
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	4619      	mov	r1, r3
 800c78e:	4610      	mov	r0, r2
 800c790:	f7ff f849 	bl	800b826 <st_word>
	}
}
 800c794:	bf00      	nop
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c79c:	b590      	push	{r4, r7, lr}
 800c79e:	b087      	sub	sp, #28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	331a      	adds	r3, #26
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7ff f800 	bl	800b7b0 <ld_word>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d001      	beq.n	800c7ba <cmp_lfn+0x1e>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e059      	b.n	800c86e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7c2:	1e5a      	subs	r2, r3, #1
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	4413      	add	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	81fb      	strh	r3, [r7, #14]
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	613b      	str	r3, [r7, #16]
 800c7d8:	e033      	b.n	800c842 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c7da:	4a27      	ldr	r2, [pc, #156]	; (800c878 <cmp_lfn+0xdc>)
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	4413      	add	r3, r2
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fe ffe1 	bl	800b7b0 <ld_word>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c7f2:	89fb      	ldrh	r3, [r7, #14]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01a      	beq.n	800c82e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	2bfe      	cmp	r3, #254	; 0xfe
 800c7fc:	d812      	bhi.n	800c824 <cmp_lfn+0x88>
 800c7fe:	89bb      	ldrh	r3, [r7, #12]
 800c800:	4618      	mov	r0, r3
 800c802:	f002 f883 	bl	800e90c <ff_wtoupper>
 800c806:	4603      	mov	r3, r0
 800c808:	461c      	mov	r4, r3
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	617a      	str	r2, [r7, #20]
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	4413      	add	r3, r2
 800c816:	881b      	ldrh	r3, [r3, #0]
 800c818:	4618      	mov	r0, r3
 800c81a:	f002 f877 	bl	800e90c <ff_wtoupper>
 800c81e:	4603      	mov	r3, r0
 800c820:	429c      	cmp	r4, r3
 800c822:	d001      	beq.n	800c828 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c824:	2300      	movs	r3, #0
 800c826:	e022      	b.n	800c86e <cmp_lfn+0xd2>
			}
			wc = uc;
 800c828:	89bb      	ldrh	r3, [r7, #12]
 800c82a:	81fb      	strh	r3, [r7, #14]
 800c82c:	e006      	b.n	800c83c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c82e:	89bb      	ldrh	r3, [r7, #12]
 800c830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c834:	4293      	cmp	r3, r2
 800c836:	d001      	beq.n	800c83c <cmp_lfn+0xa0>
 800c838:	2300      	movs	r3, #0
 800c83a:	e018      	b.n	800c86e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	3301      	adds	r3, #1
 800c840:	613b      	str	r3, [r7, #16]
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	2b0c      	cmp	r3, #12
 800c846:	d9c8      	bls.n	800c7da <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c850:	2b00      	cmp	r3, #0
 800c852:	d00b      	beq.n	800c86c <cmp_lfn+0xd0>
 800c854:	89fb      	ldrh	r3, [r7, #14]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d008      	beq.n	800c86c <cmp_lfn+0xd0>
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	4413      	add	r3, r2
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <cmp_lfn+0xd0>
 800c868:	2300      	movs	r3, #0
 800c86a:	e000      	b.n	800c86e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c86c:	2301      	movs	r3, #1
}
 800c86e:	4618      	mov	r0, r3
 800c870:	371c      	adds	r7, #28
 800c872:	46bd      	mov	sp, r7
 800c874:	bd90      	pop	{r4, r7, pc}
 800c876:	bf00      	nop
 800c878:	08015750 	.word	0x08015750

0800c87c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	331a      	adds	r3, #26
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe ff90 	bl	800b7b0 <ld_word>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <pick_lfn+0x1e>
 800c896:	2300      	movs	r3, #0
 800c898:	e04d      	b.n	800c936 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8a2:	1e5a      	subs	r2, r3, #1
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	81fb      	strh	r3, [r7, #14]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	613b      	str	r3, [r7, #16]
 800c8b8:	e028      	b.n	800c90c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c8ba:	4a21      	ldr	r2, [pc, #132]	; (800c940 <pick_lfn+0xc4>)
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	4413      	add	r3, r2
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fe ff71 	bl	800b7b0 <ld_word>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c8d2:	89fb      	ldrh	r3, [r7, #14]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00f      	beq.n	800c8f8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2bfe      	cmp	r3, #254	; 0xfe
 800c8dc:	d901      	bls.n	800c8e2 <pick_lfn+0x66>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	e029      	b.n	800c936 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c8e2:	89bb      	ldrh	r3, [r7, #12]
 800c8e4:	81fb      	strh	r3, [r7, #14]
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	617a      	str	r2, [r7, #20]
 800c8ec:	005b      	lsls	r3, r3, #1
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	89fa      	ldrh	r2, [r7, #14]
 800c8f4:	801a      	strh	r2, [r3, #0]
 800c8f6:	e006      	b.n	800c906 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c8f8:	89bb      	ldrh	r3, [r7, #12]
 800c8fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d001      	beq.n	800c906 <pick_lfn+0x8a>
 800c902:	2300      	movs	r3, #0
 800c904:	e017      	b.n	800c936 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	3301      	adds	r3, #1
 800c90a:	613b      	str	r3, [r7, #16]
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	2b0c      	cmp	r3, #12
 800c910:	d9d3      	bls.n	800c8ba <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00a      	beq.n	800c934 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2bfe      	cmp	r3, #254	; 0xfe
 800c922:	d901      	bls.n	800c928 <pick_lfn+0xac>
 800c924:	2300      	movs	r3, #0
 800c926:	e006      	b.n	800c936 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	4413      	add	r3, r2
 800c930:	2200      	movs	r2, #0
 800c932:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c934:	2301      	movs	r3, #1
}
 800c936:	4618      	mov	r0, r3
 800c938:	3718      	adds	r7, #24
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	08015750 	.word	0x08015750

0800c944 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b088      	sub	sp, #32
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	4611      	mov	r1, r2
 800c950:	461a      	mov	r2, r3
 800c952:	460b      	mov	r3, r1
 800c954:	71fb      	strb	r3, [r7, #7]
 800c956:	4613      	mov	r3, r2
 800c958:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	330d      	adds	r3, #13
 800c95e:	79ba      	ldrb	r2, [r7, #6]
 800c960:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	330b      	adds	r3, #11
 800c966:	220f      	movs	r2, #15
 800c968:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	330c      	adds	r3, #12
 800c96e:	2200      	movs	r2, #0
 800c970:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	331a      	adds	r3, #26
 800c976:	2100      	movs	r1, #0
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fe ff54 	bl	800b826 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c97e:	79fb      	ldrb	r3, [r7, #7]
 800c980:	1e5a      	subs	r2, r3, #1
 800c982:	4613      	mov	r3, r2
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	4413      	add	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	82fb      	strh	r3, [r7, #22]
 800c992:	2300      	movs	r3, #0
 800c994:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c996:	8afb      	ldrh	r3, [r7, #22]
 800c998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d007      	beq.n	800c9b0 <put_lfn+0x6c>
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	1c5a      	adds	r2, r3, #1
 800c9a4:	61fa      	str	r2, [r7, #28]
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c9b0:	4a17      	ldr	r2, [pc, #92]	; (800ca10 <put_lfn+0xcc>)
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	4413      	add	r3, r2
 800c9be:	8afa      	ldrh	r2, [r7, #22]
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fe ff2f 	bl	800b826 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c9c8:	8afb      	ldrh	r3, [r7, #22]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d102      	bne.n	800c9d4 <put_lfn+0x90>
 800c9ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9d2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	61bb      	str	r3, [r7, #24]
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	2b0c      	cmp	r3, #12
 800c9de:	d9da      	bls.n	800c996 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c9e0:	8afb      	ldrh	r3, [r7, #22]
 800c9e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d006      	beq.n	800c9f8 <put_lfn+0xb4>
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d103      	bne.n	800ca00 <put_lfn+0xbc>
 800c9f8:	79fb      	ldrb	r3, [r7, #7]
 800c9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9fe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	79fa      	ldrb	r2, [r7, #7]
 800ca04:	701a      	strb	r2, [r3, #0]
}
 800ca06:	bf00      	nop
 800ca08:	3720      	adds	r7, #32
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	08015750 	.word	0x08015750

0800ca14 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b08c      	sub	sp, #48	; 0x30
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	60f8      	str	r0, [r7, #12]
 800ca1c:	60b9      	str	r1, [r7, #8]
 800ca1e:	607a      	str	r2, [r7, #4]
 800ca20:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ca22:	220b      	movs	r2, #11
 800ca24:	68b9      	ldr	r1, [r7, #8]
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f7fe ff44 	bl	800b8b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	2b05      	cmp	r3, #5
 800ca30:	d92b      	bls.n	800ca8a <gen_numname+0x76>
		sr = seq;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ca36:	e022      	b.n	800ca7e <gen_numname+0x6a>
			wc = *lfn++;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	1c9a      	adds	r2, r3, #2
 800ca3c:	607a      	str	r2, [r7, #4]
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ca42:	2300      	movs	r3, #0
 800ca44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca46:	e017      	b.n	800ca78 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	005a      	lsls	r2, r3, #1
 800ca4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca4e:	f003 0301 	and.w	r3, r3, #1
 800ca52:	4413      	add	r3, r2
 800ca54:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ca56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca58:	085b      	lsrs	r3, r3, #1
 800ca5a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d005      	beq.n	800ca72 <gen_numname+0x5e>
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ca6c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ca70:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ca72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca74:	3301      	adds	r3, #1
 800ca76:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7a:	2b0f      	cmp	r3, #15
 800ca7c:	d9e4      	bls.n	800ca48 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	881b      	ldrh	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1d8      	bne.n	800ca38 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ca8a:	2307      	movs	r3, #7
 800ca8c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	f003 030f 	and.w	r3, r3, #15
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	3330      	adds	r3, #48	; 0x30
 800ca9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ca9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800caa2:	2b39      	cmp	r3, #57	; 0x39
 800caa4:	d904      	bls.n	800cab0 <gen_numname+0x9c>
 800caa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800caaa:	3307      	adds	r3, #7
 800caac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	1e5a      	subs	r2, r3, #1
 800cab4:	62ba      	str	r2, [r7, #40]	; 0x28
 800cab6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800caba:	4413      	add	r3, r2
 800cabc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cac0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	091b      	lsrs	r3, r3, #4
 800cac8:	603b      	str	r3, [r7, #0]
	} while (seq);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1de      	bne.n	800ca8e <gen_numname+0x7a>
	ns[i] = '~';
 800cad0:	f107 0214 	add.w	r2, r7, #20
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	4413      	add	r3, r2
 800cad8:	227e      	movs	r2, #126	; 0x7e
 800cada:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cadc:	2300      	movs	r3, #0
 800cade:	627b      	str	r3, [r7, #36]	; 0x24
 800cae0:	e002      	b.n	800cae8 <gen_numname+0xd4>
 800cae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae4:	3301      	adds	r3, #1
 800cae6:	627b      	str	r3, [r7, #36]	; 0x24
 800cae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	429a      	cmp	r2, r3
 800caee:	d205      	bcs.n	800cafc <gen_numname+0xe8>
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	4413      	add	r3, r2
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	2b20      	cmp	r3, #32
 800cafa:	d1f2      	bne.n	800cae2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafe:	2b07      	cmp	r3, #7
 800cb00:	d808      	bhi.n	800cb14 <gen_numname+0x100>
 800cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb04:	1c5a      	adds	r2, r3, #1
 800cb06:	62ba      	str	r2, [r7, #40]	; 0x28
 800cb08:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cb0c:	4413      	add	r3, r2
 800cb0e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cb12:	e000      	b.n	800cb16 <gen_numname+0x102>
 800cb14:	2120      	movs	r1, #32
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	1c5a      	adds	r2, r3, #1
 800cb1a:	627a      	str	r2, [r7, #36]	; 0x24
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	4413      	add	r3, r2
 800cb20:	460a      	mov	r2, r1
 800cb22:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	2b07      	cmp	r3, #7
 800cb28:	d9e8      	bls.n	800cafc <gen_numname+0xe8>
}
 800cb2a:	bf00      	nop
 800cb2c:	bf00      	nop
 800cb2e:	3730      	adds	r7, #48	; 0x30
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cb40:	230b      	movs	r3, #11
 800cb42:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	0852      	lsrs	r2, r2, #1
 800cb4a:	01db      	lsls	r3, r3, #7
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	1c59      	adds	r1, r3, #1
 800cb54:	6079      	str	r1, [r7, #4]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	4413      	add	r3, r2
 800cb5a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	60bb      	str	r3, [r7, #8]
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1ed      	bne.n	800cb44 <sum_sfn+0x10>
	return sum;
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3714      	adds	r7, #20
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b086      	sub	sp, #24
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cb80:	2304      	movs	r3, #4
 800cb82:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800cb8a:	23ff      	movs	r3, #255	; 0xff
 800cb8c:	757b      	strb	r3, [r7, #21]
 800cb8e:	23ff      	movs	r3, #255	; 0xff
 800cb90:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800cb92:	e081      	b.n	800cc98 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	6938      	ldr	r0, [r7, #16]
 800cb9c:	f7ff f8b8 	bl	800bd10 <move_window>
 800cba0:	4603      	mov	r3, r0
 800cba2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d17c      	bne.n	800cca4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800cbb2:	7dbb      	ldrb	r3, [r7, #22]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d102      	bne.n	800cbbe <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cbb8:	2304      	movs	r3, #4
 800cbba:	75fb      	strb	r3, [r7, #23]
 800cbbc:	e077      	b.n	800ccae <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	330b      	adds	r3, #11
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbca:	73fb      	strb	r3, [r7, #15]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	7bfa      	ldrb	r2, [r7, #15]
 800cbd0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cbd2:	7dbb      	ldrb	r3, [r7, #22]
 800cbd4:	2be5      	cmp	r3, #229	; 0xe5
 800cbd6:	d00e      	beq.n	800cbf6 <dir_read+0x80>
 800cbd8:	7dbb      	ldrb	r3, [r7, #22]
 800cbda:	2b2e      	cmp	r3, #46	; 0x2e
 800cbdc:	d00b      	beq.n	800cbf6 <dir_read+0x80>
 800cbde:	7bfb      	ldrb	r3, [r7, #15]
 800cbe0:	f023 0320 	bic.w	r3, r3, #32
 800cbe4:	2b08      	cmp	r3, #8
 800cbe6:	bf0c      	ite	eq
 800cbe8:	2301      	moveq	r3, #1
 800cbea:	2300      	movne	r3, #0
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	461a      	mov	r2, r3
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d002      	beq.n	800cbfc <dir_read+0x86>
				ord = 0xFF;
 800cbf6:	23ff      	movs	r3, #255	; 0xff
 800cbf8:	757b      	strb	r3, [r7, #21]
 800cbfa:	e044      	b.n	800cc86 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	2b0f      	cmp	r3, #15
 800cc00:	d12f      	bne.n	800cc62 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800cc02:	7dbb      	ldrb	r3, [r7, #22]
 800cc04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00d      	beq.n	800cc28 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6a1b      	ldr	r3, [r3, #32]
 800cc10:	7b5b      	ldrb	r3, [r3, #13]
 800cc12:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800cc14:	7dbb      	ldrb	r3, [r7, #22]
 800cc16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc1a:	75bb      	strb	r3, [r7, #22]
 800cc1c:	7dbb      	ldrb	r3, [r7, #22]
 800cc1e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	695a      	ldr	r2, [r3, #20]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cc28:	7dba      	ldrb	r2, [r7, #22]
 800cc2a:	7d7b      	ldrb	r3, [r7, #21]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d115      	bne.n	800cc5c <dir_read+0xe6>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	330d      	adds	r3, #13
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	7d3a      	ldrb	r2, [r7, #20]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d10e      	bne.n	800cc5c <dir_read+0xe6>
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	68da      	ldr	r2, [r3, #12]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	4619      	mov	r1, r3
 800cc48:	4610      	mov	r0, r2
 800cc4a:	f7ff fe17 	bl	800c87c <pick_lfn>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d003      	beq.n	800cc5c <dir_read+0xe6>
 800cc54:	7d7b      	ldrb	r3, [r7, #21]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	e000      	b.n	800cc5e <dir_read+0xe8>
 800cc5c:	23ff      	movs	r3, #255	; 0xff
 800cc5e:	757b      	strb	r3, [r7, #21]
 800cc60:	e011      	b.n	800cc86 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cc62:	7d7b      	ldrb	r3, [r7, #21]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d109      	bne.n	800cc7c <dir_read+0x106>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6a1b      	ldr	r3, [r3, #32]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff ff61 	bl	800cb34 <sum_sfn>
 800cc72:	4603      	mov	r3, r0
 800cc74:	461a      	mov	r2, r3
 800cc76:	7d3b      	ldrb	r3, [r7, #20]
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d015      	beq.n	800cca8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc82:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cc84:	e010      	b.n	800cca8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cc86:	2100      	movs	r1, #0
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff fc3c 	bl	800c506 <dir_next>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d109      	bne.n	800ccac <dir_read+0x136>
	while (dp->sect) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	69db      	ldr	r3, [r3, #28]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f47f af79 	bne.w	800cb94 <dir_read+0x1e>
 800cca2:	e004      	b.n	800ccae <dir_read+0x138>
		if (res != FR_OK) break;
 800cca4:	bf00      	nop
 800cca6:	e002      	b.n	800ccae <dir_read+0x138>
					break;
 800cca8:	bf00      	nop
 800ccaa:	e000      	b.n	800ccae <dir_read+0x138>
		if (res != FR_OK) break;
 800ccac:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d002      	beq.n	800ccba <dir_read+0x144>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	61da      	str	r2, [r3, #28]
	return res;
 800ccba:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7ff fb9b 	bl	800c410 <dir_sdi>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ccde:	7dfb      	ldrb	r3, [r7, #23]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <dir_find+0x24>
 800cce4:	7dfb      	ldrb	r3, [r7, #23]
 800cce6:	e0a9      	b.n	800ce3c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cce8:	23ff      	movs	r3, #255	; 0xff
 800ccea:	753b      	strb	r3, [r7, #20]
 800ccec:	7d3b      	ldrb	r3, [r7, #20]
 800ccee:	757b      	strb	r3, [r7, #21]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	69db      	ldr	r3, [r3, #28]
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6938      	ldr	r0, [r7, #16]
 800cd00:	f7ff f806 	bl	800bd10 <move_window>
 800cd04:	4603      	mov	r3, r0
 800cd06:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f040 8090 	bne.w	800ce30 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a1b      	ldr	r3, [r3, #32]
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cd18:	7dbb      	ldrb	r3, [r7, #22]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d102      	bne.n	800cd24 <dir_find+0x60>
 800cd1e:	2304      	movs	r3, #4
 800cd20:	75fb      	strb	r3, [r7, #23]
 800cd22:	e08a      	b.n	800ce3a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6a1b      	ldr	r3, [r3, #32]
 800cd28:	330b      	adds	r3, #11
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd30:	73fb      	strb	r3, [r7, #15]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	7bfa      	ldrb	r2, [r7, #15]
 800cd36:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cd38:	7dbb      	ldrb	r3, [r7, #22]
 800cd3a:	2be5      	cmp	r3, #229	; 0xe5
 800cd3c:	d007      	beq.n	800cd4e <dir_find+0x8a>
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
 800cd40:	f003 0308 	and.w	r3, r3, #8
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d009      	beq.n	800cd5c <dir_find+0x98>
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	2b0f      	cmp	r3, #15
 800cd4c:	d006      	beq.n	800cd5c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd4e:	23ff      	movs	r3, #255	; 0xff
 800cd50:	757b      	strb	r3, [r7, #21]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f04f 32ff 	mov.w	r2, #4294967295
 800cd58:	631a      	str	r2, [r3, #48]	; 0x30
 800cd5a:	e05e      	b.n	800ce1a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cd5c:	7bfb      	ldrb	r3, [r7, #15]
 800cd5e:	2b0f      	cmp	r3, #15
 800cd60:	d136      	bne.n	800cdd0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d154      	bne.n	800ce1a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cd70:	7dbb      	ldrb	r3, [r7, #22]
 800cd72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00d      	beq.n	800cd96 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	7b5b      	ldrb	r3, [r3, #13]
 800cd80:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cd82:	7dbb      	ldrb	r3, [r7, #22]
 800cd84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd88:	75bb      	strb	r3, [r7, #22]
 800cd8a:	7dbb      	ldrb	r3, [r7, #22]
 800cd8c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	695a      	ldr	r2, [r3, #20]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd96:	7dba      	ldrb	r2, [r7, #22]
 800cd98:	7d7b      	ldrb	r3, [r7, #21]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d115      	bne.n	800cdca <dir_find+0x106>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	330d      	adds	r3, #13
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	7d3a      	ldrb	r2, [r7, #20]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d10e      	bne.n	800cdca <dir_find+0x106>
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	68da      	ldr	r2, [r3, #12]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6a1b      	ldr	r3, [r3, #32]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4610      	mov	r0, r2
 800cdb8:	f7ff fcf0 	bl	800c79c <cmp_lfn>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <dir_find+0x106>
 800cdc2:	7d7b      	ldrb	r3, [r7, #21]
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	e000      	b.n	800cdcc <dir_find+0x108>
 800cdca:	23ff      	movs	r3, #255	; 0xff
 800cdcc:	757b      	strb	r3, [r7, #21]
 800cdce:	e024      	b.n	800ce1a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cdd0:	7d7b      	ldrb	r3, [r7, #21]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d109      	bne.n	800cdea <dir_find+0x126>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7ff feaa 	bl	800cb34 <sum_sfn>
 800cde0:	4603      	mov	r3, r0
 800cde2:	461a      	mov	r2, r3
 800cde4:	7d3b      	ldrb	r3, [r7, #20]
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d024      	beq.n	800ce34 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cdf0:	f003 0301 	and.w	r3, r3, #1
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10a      	bne.n	800ce0e <dir_find+0x14a>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6a18      	ldr	r0, [r3, #32]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	3324      	adds	r3, #36	; 0x24
 800ce00:	220b      	movs	r2, #11
 800ce02:	4619      	mov	r1, r3
 800ce04:	f7fe fd92 	bl	800b92c <mem_cmp>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d014      	beq.n	800ce38 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce0e:	23ff      	movs	r3, #255	; 0xff
 800ce10:	757b      	strb	r3, [r7, #21]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f04f 32ff 	mov.w	r2, #4294967295
 800ce18:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7ff fb72 	bl	800c506 <dir_next>
 800ce22:	4603      	mov	r3, r0
 800ce24:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ce26:	7dfb      	ldrb	r3, [r7, #23]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f43f af65 	beq.w	800ccf8 <dir_find+0x34>
 800ce2e:	e004      	b.n	800ce3a <dir_find+0x176>
		if (res != FR_OK) break;
 800ce30:	bf00      	nop
 800ce32:	e002      	b.n	800ce3a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ce34:	bf00      	nop
 800ce36:	e000      	b.n	800ce3a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ce38:	bf00      	nop

	return res;
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3718      	adds	r7, #24
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}

0800ce44 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b08c      	sub	sp, #48	; 0x30
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce58:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d001      	beq.n	800ce64 <dir_register+0x20>
 800ce60:	2306      	movs	r3, #6
 800ce62:	e0e0      	b.n	800d026 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ce64:	2300      	movs	r3, #0
 800ce66:	627b      	str	r3, [r7, #36]	; 0x24
 800ce68:	e002      	b.n	800ce70 <dir_register+0x2c>
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	68da      	ldr	r2, [r3, #12]
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	005b      	lsls	r3, r3, #1
 800ce78:	4413      	add	r3, r2
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1f4      	bne.n	800ce6a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ce86:	f107 030c 	add.w	r3, r7, #12
 800ce8a:	220c      	movs	r2, #12
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe fd11 	bl	800b8b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ce92:	7dfb      	ldrb	r3, [r7, #23]
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d032      	beq.n	800cf02 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2240      	movs	r2, #64	; 0x40
 800cea0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cea4:	2301      	movs	r3, #1
 800cea6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cea8:	e016      	b.n	800ced8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	68da      	ldr	r2, [r3, #12]
 800ceb4:	f107 010c 	add.w	r1, r7, #12
 800ceb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceba:	f7ff fdab 	bl	800ca14 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff ff00 	bl	800ccc4 <dir_find>
 800cec4:	4603      	mov	r3, r0
 800cec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ceca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ced2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced4:	3301      	adds	r3, #1
 800ced6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	2b63      	cmp	r3, #99	; 0x63
 800cedc:	d9e5      	bls.n	800ceaa <dir_register+0x66>
 800cede:	e000      	b.n	800cee2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800cee0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee4:	2b64      	cmp	r3, #100	; 0x64
 800cee6:	d101      	bne.n	800ceec <dir_register+0xa8>
 800cee8:	2307      	movs	r3, #7
 800ceea:	e09c      	b.n	800d026 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ceec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cef0:	2b04      	cmp	r3, #4
 800cef2:	d002      	beq.n	800cefa <dir_register+0xb6>
 800cef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cef8:	e095      	b.n	800d026 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cefa:	7dfa      	ldrb	r2, [r7, #23]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	f003 0302 	and.w	r3, r3, #2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d007      	beq.n	800cf1c <dir_register+0xd8>
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0e:	330c      	adds	r3, #12
 800cf10:	4a47      	ldr	r2, [pc, #284]	; (800d030 <dir_register+0x1ec>)
 800cf12:	fba2 2303 	umull	r2, r3, r2, r3
 800cf16:	089b      	lsrs	r3, r3, #2
 800cf18:	3301      	adds	r3, #1
 800cf1a:	e000      	b.n	800cf1e <dir_register+0xda>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cf20:	6a39      	ldr	r1, [r7, #32]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7ff fbb4 	bl	800c690 <dir_alloc>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cf2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d148      	bne.n	800cfc8 <dir_register+0x184>
 800cf36:	6a3b      	ldr	r3, [r7, #32]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	623b      	str	r3, [r7, #32]
 800cf3c:	6a3b      	ldr	r3, [r7, #32]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d042      	beq.n	800cfc8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	695a      	ldr	r2, [r3, #20]
 800cf46:	6a3b      	ldr	r3, [r7, #32]
 800cf48:	015b      	lsls	r3, r3, #5
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7ff fa5e 	bl	800c410 <dir_sdi>
 800cf54:	4603      	mov	r3, r0
 800cf56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cf5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d132      	bne.n	800cfc8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3324      	adds	r3, #36	; 0x24
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff fde4 	bl	800cb34 <sum_sfn>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	69db      	ldr	r3, [r3, #28]
 800cf74:	4619      	mov	r1, r3
 800cf76:	69f8      	ldr	r0, [r7, #28]
 800cf78:	f7fe feca 	bl	800bd10 <move_window>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cf82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d11d      	bne.n	800cfc6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	68d8      	ldr	r0, [r3, #12]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a19      	ldr	r1, [r3, #32]
 800cf92:	6a3b      	ldr	r3, [r7, #32]
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	7efb      	ldrb	r3, [r7, #27]
 800cf98:	f7ff fcd4 	bl	800c944 <put_lfn>
				fs->wflag = 1;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7ff faae 	bl	800c506 <dir_next>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800cfb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d107      	bne.n	800cfc8 <dir_register+0x184>
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	3b01      	subs	r3, #1
 800cfbc:	623b      	str	r3, [r7, #32]
 800cfbe:	6a3b      	ldr	r3, [r7, #32]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1d5      	bne.n	800cf70 <dir_register+0x12c>
 800cfc4:	e000      	b.n	800cfc8 <dir_register+0x184>
				if (res != FR_OK) break;
 800cfc6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cfc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d128      	bne.n	800d022 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	69db      	ldr	r3, [r3, #28]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	69f8      	ldr	r0, [r7, #28]
 800cfd8:	f7fe fe9a 	bl	800bd10 <move_window>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cfe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d11b      	bne.n	800d022 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a1b      	ldr	r3, [r3, #32]
 800cfee:	2220      	movs	r2, #32
 800cff0:	2100      	movs	r1, #0
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fc7f 	bl	800b8f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a18      	ldr	r0, [r3, #32]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	3324      	adds	r3, #36	; 0x24
 800d000:	220b      	movs	r2, #11
 800d002:	4619      	mov	r1, r3
 800d004:	f7fe fc56 	bl	800b8b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6a1b      	ldr	r3, [r3, #32]
 800d012:	330c      	adds	r3, #12
 800d014:	f002 0218 	and.w	r2, r2, #24
 800d018:	b2d2      	uxtb	r2, r2
 800d01a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	2201      	movs	r2, #1
 800d020:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d026:	4618      	mov	r0, r3
 800d028:	3730      	adds	r7, #48	; 0x30
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	4ec4ec4f 	.word	0x4ec4ec4f

0800d034 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b088      	sub	sp, #32
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	2200      	movs	r2, #0
 800d048:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	69db      	ldr	r3, [r3, #28]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f000 80c9 	beq.w	800d1e6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05c:	d032      	beq.n	800d0c4 <get_fileinfo+0x90>
			i = j = 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	61bb      	str	r3, [r7, #24]
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d066:	e01b      	b.n	800d0a0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d068:	89fb      	ldrh	r3, [r7, #14]
 800d06a:	2100      	movs	r1, #0
 800d06c:	4618      	mov	r0, r3
 800d06e:	f001 fc11 	bl	800e894 <ff_convert>
 800d072:	4603      	mov	r3, r0
 800d074:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d076:	89fb      	ldrh	r3, [r7, #14]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d102      	bne.n	800d082 <get_fileinfo+0x4e>
 800d07c:	2300      	movs	r3, #0
 800d07e:	61fb      	str	r3, [r7, #28]
 800d080:	e01a      	b.n	800d0b8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	2bfe      	cmp	r3, #254	; 0xfe
 800d086:	d902      	bls.n	800d08e <get_fileinfo+0x5a>
 800d088:	2300      	movs	r3, #0
 800d08a:	61fb      	str	r3, [r7, #28]
 800d08c:	e014      	b.n	800d0b8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	1c5a      	adds	r2, r3, #1
 800d092:	61fa      	str	r2, [r7, #28]
 800d094:	89fa      	ldrh	r2, [r7, #14]
 800d096:	b2d1      	uxtb	r1, r2
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	4413      	add	r3, r2
 800d09c:	460a      	mov	r2, r1
 800d09e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	68da      	ldr	r2, [r3, #12]
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	1c59      	adds	r1, r3, #1
 800d0a8:	61b9      	str	r1, [r7, #24]
 800d0aa:	005b      	lsls	r3, r3, #1
 800d0ac:	4413      	add	r3, r2
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	81fb      	strh	r3, [r7, #14]
 800d0b2:	89fb      	ldrh	r3, [r7, #14]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1d7      	bne.n	800d068 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d0b8:	683a      	ldr	r2, [r7, #0]
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	4413      	add	r3, r2
 800d0be:	3316      	adds	r3, #22
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	61bb      	str	r3, [r7, #24]
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	3316      	adds	r3, #22
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d0d8:	e04c      	b.n	800d174 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6a1a      	ldr	r2, [r3, #32]
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	1c59      	adds	r1, r3, #1
 800d0e2:	61f9      	str	r1, [r7, #28]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
 800d0ec:	2b20      	cmp	r3, #32
 800d0ee:	d100      	bne.n	800d0f2 <get_fileinfo+0xbe>
 800d0f0:	e040      	b.n	800d174 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d0f2:	7dfb      	ldrb	r3, [r7, #23]
 800d0f4:	2b05      	cmp	r3, #5
 800d0f6:	d101      	bne.n	800d0fc <get_fileinfo+0xc8>
 800d0f8:	23e5      	movs	r3, #229	; 0xe5
 800d0fa:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	2b09      	cmp	r3, #9
 800d100:	d10f      	bne.n	800d122 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d102:	89bb      	ldrh	r3, [r7, #12]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d105      	bne.n	800d114 <get_fileinfo+0xe0>
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	4413      	add	r3, r2
 800d10e:	3316      	adds	r3, #22
 800d110:	222e      	movs	r2, #46	; 0x2e
 800d112:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	61ba      	str	r2, [r7, #24]
 800d11a:	683a      	ldr	r2, [r7, #0]
 800d11c:	4413      	add	r3, r2
 800d11e:	222e      	movs	r2, #46	; 0x2e
 800d120:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	4413      	add	r3, r2
 800d128:	3309      	adds	r3, #9
 800d12a:	7dfa      	ldrb	r2, [r7, #23]
 800d12c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d12e:	89bb      	ldrh	r3, [r7, #12]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d11c      	bne.n	800d16e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d134:	7dfb      	ldrb	r3, [r7, #23]
 800d136:	2b40      	cmp	r3, #64	; 0x40
 800d138:	d913      	bls.n	800d162 <get_fileinfo+0x12e>
 800d13a:	7dfb      	ldrb	r3, [r7, #23]
 800d13c:	2b5a      	cmp	r3, #90	; 0x5a
 800d13e:	d810      	bhi.n	800d162 <get_fileinfo+0x12e>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6a1b      	ldr	r3, [r3, #32]
 800d144:	330c      	adds	r3, #12
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	461a      	mov	r2, r3
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	2b08      	cmp	r3, #8
 800d14e:	d901      	bls.n	800d154 <get_fileinfo+0x120>
 800d150:	2310      	movs	r3, #16
 800d152:	e000      	b.n	800d156 <get_fileinfo+0x122>
 800d154:	2308      	movs	r3, #8
 800d156:	4013      	ands	r3, r2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d15c:	7dfb      	ldrb	r3, [r7, #23]
 800d15e:	3320      	adds	r3, #32
 800d160:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	4413      	add	r3, r2
 800d168:	3316      	adds	r3, #22
 800d16a:	7dfa      	ldrb	r2, [r7, #23]
 800d16c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	3301      	adds	r3, #1
 800d172:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	2b0a      	cmp	r3, #10
 800d178:	d9af      	bls.n	800d0da <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d17a:	89bb      	ldrh	r3, [r7, #12]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10d      	bne.n	800d19c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d180:	683a      	ldr	r2, [r7, #0]
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	4413      	add	r3, r2
 800d186:	3316      	adds	r3, #22
 800d188:	2200      	movs	r2, #0
 800d18a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6a1b      	ldr	r3, [r3, #32]
 800d190:	330c      	adds	r3, #12
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <get_fileinfo+0x168>
 800d198:	2300      	movs	r3, #0
 800d19a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d19c:	683a      	ldr	r2, [r7, #0]
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	3309      	adds	r3, #9
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6a1b      	ldr	r3, [r3, #32]
 800d1ac:	7ada      	ldrb	r2, [r3, #11]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	331c      	adds	r3, #28
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fe fb11 	bl	800b7e0 <ld_dword>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6a1b      	ldr	r3, [r3, #32]
 800d1c8:	3316      	adds	r3, #22
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fb08 	bl	800b7e0 <ld_dword>
 800d1d0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	b29a      	uxth	r2, r3
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	80da      	strh	r2, [r3, #6]
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	0c1b      	lsrs	r3, r3, #16
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	809a      	strh	r2, [r3, #4]
 800d1e4:	e000      	b.n	800d1e8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d1e6:	bf00      	nop
}
 800d1e8:	3720      	adds	r7, #32
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
	...

0800d1f0 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	1c59      	adds	r1, r3, #1
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	6011      	str	r1, [r2, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d206:	89fb      	ldrh	r3, [r7, #14]
 800d208:	2b60      	cmp	r3, #96	; 0x60
 800d20a:	d905      	bls.n	800d218 <get_achar+0x28>
 800d20c:	89fb      	ldrh	r3, [r7, #14]
 800d20e:	2b7a      	cmp	r3, #122	; 0x7a
 800d210:	d802      	bhi.n	800d218 <get_achar+0x28>
 800d212:	89fb      	ldrh	r3, [r7, #14]
 800d214:	3b20      	subs	r3, #32
 800d216:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d218:	89fb      	ldrh	r3, [r7, #14]
 800d21a:	2b7f      	cmp	r3, #127	; 0x7f
 800d21c:	d904      	bls.n	800d228 <get_achar+0x38>
 800d21e:	89fb      	ldrh	r3, [r7, #14]
 800d220:	3b80      	subs	r3, #128	; 0x80
 800d222:	4a05      	ldr	r2, [pc, #20]	; (800d238 <get_achar+0x48>)
 800d224:	5cd3      	ldrb	r3, [r2, r3]
 800d226:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800d228:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3714      	adds	r7, #20
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	080156d0 	.word	0x080156d0

0800d23c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b08a      	sub	sp, #40	; 0x28
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800d24a:	e009      	b.n	800d260 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800d24c:	f107 0308 	add.w	r3, r7, #8
 800d250:	4618      	mov	r0, r3
 800d252:	f7ff ffcd 	bl	800d1f0 <get_achar>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <pattern_matching+0x24>
 800d25c:	2300      	movs	r3, #0
 800d25e:	e064      	b.n	800d32a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	1e5a      	subs	r2, r3, #1
 800d264:	607a      	str	r2, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1f0      	bne.n	800d24c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d104      	bne.n	800d27c <pattern_matching+0x40>
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d001      	beq.n	800d27c <pattern_matching+0x40>
 800d278:	2301      	movs	r3, #1
 800d27a:	e056      	b.n	800d32a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	617b      	str	r3, [r7, #20]
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b3f      	cmp	r3, #63	; 0x3f
 800d28a:	d003      	beq.n	800d294 <pattern_matching+0x58>
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	2b2a      	cmp	r3, #42	; 0x2a
 800d292:	d126      	bne.n	800d2e2 <pattern_matching+0xa6>
				nm = nx = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	61fb      	str	r3, [r7, #28]
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	1c5a      	adds	r2, r3, #1
 800d2a0:	617a      	str	r2, [r7, #20]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b3f      	cmp	r3, #63	; 0x3f
 800d2a6:	d103      	bne.n	800d2b0 <pattern_matching+0x74>
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	623b      	str	r3, [r7, #32]
 800d2ae:	e001      	b.n	800d2b4 <pattern_matching+0x78>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	2b3f      	cmp	r3, #63	; 0x3f
 800d2ba:	d0ef      	beq.n	800d29c <pattern_matching+0x60>
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2c2:	d0eb      	beq.n	800d29c <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800d2c4:	6978      	ldr	r0, [r7, #20]
 800d2c6:	6939      	ldr	r1, [r7, #16]
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	6a3a      	ldr	r2, [r7, #32]
 800d2cc:	f7ff ffb6 	bl	800d23c <pattern_matching>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <pattern_matching+0x9e>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e027      	b.n	800d32a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d2e0:	e017      	b.n	800d312 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800d2e2:	f107 0314 	add.w	r3, r7, #20
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff ff82 	bl	800d1f0 <get_achar>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800d2f0:	f107 0310 	add.w	r3, r7, #16
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7ff ff7b 	bl	800d1f0 <get_achar>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800d2fe:	8b7a      	ldrh	r2, [r7, #26]
 800d300:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d302:	429a      	cmp	r2, r3
 800d304:	d104      	bne.n	800d310 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800d306:	8b7b      	ldrh	r3, [r7, #26]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1bb      	bne.n	800d284 <pattern_matching+0x48>
 800d30c:	2301      	movs	r3, #1
 800d30e:	e00c      	b.n	800d32a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800d310:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800d312:	f107 0308 	add.w	r3, r7, #8
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff ff6a 	bl	800d1f0 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d002      	beq.n	800d328 <pattern_matching+0xec>
 800d322:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1a9      	bne.n	800d27c <pattern_matching+0x40>

	return 0;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3728      	adds	r7, #40	; 0x28
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
	...

0800d334 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b08a      	sub	sp, #40	; 0x28
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	613b      	str	r3, [r7, #16]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	2300      	movs	r3, #0
 800d34e:	617b      	str	r3, [r7, #20]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	1c5a      	adds	r2, r3, #1
 800d358:	61ba      	str	r2, [r7, #24]
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	4413      	add	r3, r2
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d364:	2b1f      	cmp	r3, #31
 800d366:	d940      	bls.n	800d3ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d36a:	2b2f      	cmp	r3, #47	; 0x2f
 800d36c:	d006      	beq.n	800d37c <create_name+0x48>
 800d36e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d370:	2b5c      	cmp	r3, #92	; 0x5c
 800d372:	d110      	bne.n	800d396 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d374:	e002      	b.n	800d37c <create_name+0x48>
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	3301      	adds	r3, #1
 800d37a:	61bb      	str	r3, [r7, #24]
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	4413      	add	r3, r2
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b2f      	cmp	r3, #47	; 0x2f
 800d386:	d0f6      	beq.n	800d376 <create_name+0x42>
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	4413      	add	r3, r2
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b5c      	cmp	r3, #92	; 0x5c
 800d392:	d0f0      	beq.n	800d376 <create_name+0x42>
			break;
 800d394:	e02a      	b.n	800d3ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2bfe      	cmp	r3, #254	; 0xfe
 800d39a:	d901      	bls.n	800d3a0 <create_name+0x6c>
 800d39c:	2306      	movs	r3, #6
 800d39e:	e177      	b.n	800d690 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d3a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d3a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f001 fa72 	bl	800e894 <ff_convert>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d3b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d101      	bne.n	800d3be <create_name+0x8a>
 800d3ba:	2306      	movs	r3, #6
 800d3bc:	e168      	b.n	800d690 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d3be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d3c2:	d809      	bhi.n	800d3d8 <create_name+0xa4>
 800d3c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	48b3      	ldr	r0, [pc, #716]	; (800d698 <create_name+0x364>)
 800d3ca:	f7fe fad6 	bl	800b97a <chk_chr>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <create_name+0xa4>
 800d3d4:	2306      	movs	r3, #6
 800d3d6:	e15b      	b.n	800d690 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	617a      	str	r2, [r7, #20]
 800d3de:	005b      	lsls	r3, r3, #1
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d3e8:	e7b4      	b.n	800d354 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d3ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	441a      	add	r2, r3
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d3f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3f8:	2b1f      	cmp	r3, #31
 800d3fa:	d801      	bhi.n	800d400 <create_name+0xcc>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	e000      	b.n	800d402 <create_name+0xce>
 800d400:	2300      	movs	r3, #0
 800d402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d406:	e011      	b.n	800d42c <create_name+0xf8>
		w = lfn[di - 1];
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d40e:	3b01      	subs	r3, #1
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	4413      	add	r3, r2
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d41a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d41c:	2b20      	cmp	r3, #32
 800d41e:	d002      	beq.n	800d426 <create_name+0xf2>
 800d420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d422:	2b2e      	cmp	r3, #46	; 0x2e
 800d424:	d106      	bne.n	800d434 <create_name+0x100>
		di--;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	3b01      	subs	r3, #1
 800d42a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1ea      	bne.n	800d408 <create_name+0xd4>
 800d432:	e000      	b.n	800d436 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d434:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	4413      	add	r3, r2
 800d43e:	2200      	movs	r2, #0
 800d440:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d101      	bne.n	800d44c <create_name+0x118>
 800d448:	2306      	movs	r3, #6
 800d44a:	e121      	b.n	800d690 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3324      	adds	r3, #36	; 0x24
 800d450:	220b      	movs	r2, #11
 800d452:	2120      	movs	r1, #32
 800d454:	4618      	mov	r0, r3
 800d456:	f7fe fa4e 	bl	800b8f6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d45a:	2300      	movs	r3, #0
 800d45c:	61bb      	str	r3, [r7, #24]
 800d45e:	e002      	b.n	800d466 <create_name+0x132>
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	3301      	adds	r3, #1
 800d464:	61bb      	str	r3, [r7, #24]
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	4413      	add	r3, r2
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	2b20      	cmp	r3, #32
 800d472:	d0f5      	beq.n	800d460 <create_name+0x12c>
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	005b      	lsls	r3, r3, #1
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	4413      	add	r3, r2
 800d47c:	881b      	ldrh	r3, [r3, #0]
 800d47e:	2b2e      	cmp	r3, #46	; 0x2e
 800d480:	d0ee      	beq.n	800d460 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d009      	beq.n	800d49c <create_name+0x168>
 800d488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d48c:	f043 0303 	orr.w	r3, r3, #3
 800d490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d494:	e002      	b.n	800d49c <create_name+0x168>
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	3b01      	subs	r3, #1
 800d49a:	617b      	str	r3, [r7, #20]
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d009      	beq.n	800d4b6 <create_name+0x182>
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	881b      	ldrh	r3, [r3, #0]
 800d4b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d4b4:	d1ef      	bne.n	800d496 <create_name+0x162>

	i = b = 0; ni = 8;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d4bc:	2300      	movs	r3, #0
 800d4be:	623b      	str	r3, [r7, #32]
 800d4c0:	2308      	movs	r3, #8
 800d4c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	61ba      	str	r2, [r7, #24]
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d4d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 8090 	beq.w	800d5fc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4de:	2b20      	cmp	r3, #32
 800d4e0:	d006      	beq.n	800d4f0 <create_name+0x1bc>
 800d4e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d4e6:	d10a      	bne.n	800d4fe <create_name+0x1ca>
 800d4e8:	69ba      	ldr	r2, [r7, #24]
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d006      	beq.n	800d4fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4f4:	f043 0303 	orr.w	r3, r3, #3
 800d4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4fc:	e07d      	b.n	800d5fa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d4fe:	6a3a      	ldr	r2, [r7, #32]
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	429a      	cmp	r2, r3
 800d504:	d203      	bcs.n	800d50e <create_name+0x1da>
 800d506:	69ba      	ldr	r2, [r7, #24]
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d123      	bne.n	800d556 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	2b0b      	cmp	r3, #11
 800d512:	d106      	bne.n	800d522 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d518:	f043 0303 	orr.w	r3, r3, #3
 800d51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d520:	e06f      	b.n	800d602 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d522:	69ba      	ldr	r2, [r7, #24]
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	429a      	cmp	r2, r3
 800d528:	d005      	beq.n	800d536 <create_name+0x202>
 800d52a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d52e:	f043 0303 	orr.w	r3, r3, #3
 800d532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d536:	69ba      	ldr	r2, [r7, #24]
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d860      	bhi.n	800d600 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	61bb      	str	r3, [r7, #24]
 800d542:	2308      	movs	r3, #8
 800d544:	623b      	str	r3, [r7, #32]
 800d546:	230b      	movs	r3, #11
 800d548:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d54a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d554:	e051      	b.n	800d5fa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d558:	2b7f      	cmp	r3, #127	; 0x7f
 800d55a:	d914      	bls.n	800d586 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d55c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d55e:	2100      	movs	r1, #0
 800d560:	4618      	mov	r0, r3
 800d562:	f001 f997 	bl	800e894 <ff_convert>
 800d566:	4603      	mov	r3, r0
 800d568:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d56a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d004      	beq.n	800d57a <create_name+0x246>
 800d570:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d572:	3b80      	subs	r3, #128	; 0x80
 800d574:	4a49      	ldr	r2, [pc, #292]	; (800d69c <create_name+0x368>)
 800d576:	5cd3      	ldrb	r3, [r2, r3]
 800d578:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d57a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d57e:	f043 0302 	orr.w	r3, r3, #2
 800d582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d007      	beq.n	800d59c <create_name+0x268>
 800d58c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d58e:	4619      	mov	r1, r3
 800d590:	4843      	ldr	r0, [pc, #268]	; (800d6a0 <create_name+0x36c>)
 800d592:	f7fe f9f2 	bl	800b97a <chk_chr>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d008      	beq.n	800d5ae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d59c:	235f      	movs	r3, #95	; 0x5f
 800d59e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5a4:	f043 0303 	orr.w	r3, r3, #3
 800d5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5ac:	e01b      	b.n	800d5e6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d5ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b0:	2b40      	cmp	r3, #64	; 0x40
 800d5b2:	d909      	bls.n	800d5c8 <create_name+0x294>
 800d5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b6:	2b5a      	cmp	r3, #90	; 0x5a
 800d5b8:	d806      	bhi.n	800d5c8 <create_name+0x294>
					b |= 2;
 800d5ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5be:	f043 0302 	orr.w	r3, r3, #2
 800d5c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5c6:	e00e      	b.n	800d5e6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d5c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ca:	2b60      	cmp	r3, #96	; 0x60
 800d5cc:	d90b      	bls.n	800d5e6 <create_name+0x2b2>
 800d5ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5d0:	2b7a      	cmp	r3, #122	; 0x7a
 800d5d2:	d808      	bhi.n	800d5e6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d5d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5d8:	f043 0301 	orr.w	r3, r3, #1
 800d5dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5e2:	3b20      	subs	r3, #32
 800d5e4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d5e6:	6a3b      	ldr	r3, [r7, #32]
 800d5e8:	1c5a      	adds	r2, r3, #1
 800d5ea:	623a      	str	r2, [r7, #32]
 800d5ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d5ee:	b2d1      	uxtb	r1, r2
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	460a      	mov	r2, r1
 800d5f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d5fa:	e763      	b.n	800d4c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d5fc:	bf00      	nop
 800d5fe:	e000      	b.n	800d602 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d600:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d608:	2be5      	cmp	r3, #229	; 0xe5
 800d60a:	d103      	bne.n	800d614 <create_name+0x2e0>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2205      	movs	r2, #5
 800d610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	2b08      	cmp	r3, #8
 800d618:	d104      	bne.n	800d624 <create_name+0x2f0>
 800d61a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d624:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d628:	f003 030c 	and.w	r3, r3, #12
 800d62c:	2b0c      	cmp	r3, #12
 800d62e:	d005      	beq.n	800d63c <create_name+0x308>
 800d630:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d634:	f003 0303 	and.w	r3, r3, #3
 800d638:	2b03      	cmp	r3, #3
 800d63a:	d105      	bne.n	800d648 <create_name+0x314>
 800d63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d640:	f043 0302 	orr.w	r3, r3, #2
 800d644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d64c:	f003 0302 	and.w	r3, r3, #2
 800d650:	2b00      	cmp	r3, #0
 800d652:	d117      	bne.n	800d684 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d654:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d658:	f003 0303 	and.w	r3, r3, #3
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d105      	bne.n	800d66c <create_name+0x338>
 800d660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d664:	f043 0310 	orr.w	r3, r3, #16
 800d668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d66c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d670:	f003 030c 	and.w	r3, r3, #12
 800d674:	2b04      	cmp	r3, #4
 800d676:	d105      	bne.n	800d684 <create_name+0x350>
 800d678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d67c:	f043 0308 	orr.w	r3, r3, #8
 800d680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d68a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d68e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d690:	4618      	mov	r0, r3
 800d692:	3728      	adds	r7, #40	; 0x28
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	08013b88 	.word	0x08013b88
 800d69c:	080156d0 	.word	0x080156d0
 800d6a0:	08013b94 	.word	0x08013b94

0800d6a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d6b8:	e002      	b.n	800d6c0 <follow_path+0x1c>
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	603b      	str	r3, [r7, #0]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b2f      	cmp	r3, #47	; 0x2f
 800d6c6:	d0f8      	beq.n	800d6ba <follow_path+0x16>
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	2b5c      	cmp	r3, #92	; 0x5c
 800d6ce:	d0f4      	beq.n	800d6ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	2b1f      	cmp	r3, #31
 800d6dc:	d80a      	bhi.n	800d6f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2280      	movs	r2, #128	; 0x80
 800d6e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7fe fe91 	bl	800c410 <dir_sdi>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	75fb      	strb	r3, [r7, #23]
 800d6f2:	e043      	b.n	800d77c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d6f4:	463b      	mov	r3, r7
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7ff fe1b 	bl	800d334 <create_name>
 800d6fe:	4603      	mov	r3, r0
 800d700:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d134      	bne.n	800d772 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7ff fadb 	bl	800ccc4 <dir_find>
 800d70e:	4603      	mov	r3, r0
 800d710:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d718:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d71a:	7dfb      	ldrb	r3, [r7, #23]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00a      	beq.n	800d736 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d720:	7dfb      	ldrb	r3, [r7, #23]
 800d722:	2b04      	cmp	r3, #4
 800d724:	d127      	bne.n	800d776 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d726:	7afb      	ldrb	r3, [r7, #11]
 800d728:	f003 0304 	and.w	r3, r3, #4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d122      	bne.n	800d776 <follow_path+0xd2>
 800d730:	2305      	movs	r3, #5
 800d732:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d734:	e01f      	b.n	800d776 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d736:	7afb      	ldrb	r3, [r7, #11]
 800d738:	f003 0304 	and.w	r3, r3, #4
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d11c      	bne.n	800d77a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	799b      	ldrb	r3, [r3, #6]
 800d744:	f003 0310 	and.w	r3, r3, #16
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d102      	bne.n	800d752 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d74c:	2305      	movs	r3, #5
 800d74e:	75fb      	strb	r3, [r7, #23]
 800d750:	e014      	b.n	800d77c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d760:	4413      	add	r3, r2
 800d762:	4619      	mov	r1, r3
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f7fe ffda 	bl	800c71e <ld_clust>
 800d76a:	4602      	mov	r2, r0
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d770:	e7c0      	b.n	800d6f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800d772:	bf00      	nop
 800d774:	e002      	b.n	800d77c <follow_path+0xd8>
				break;
 800d776:	bf00      	nop
 800d778:	e000      	b.n	800d77c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d77a:	bf00      	nop
			}
		}
	}

	return res;
 800d77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d786:	b480      	push	{r7}
 800d788:	b087      	sub	sp, #28
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d78e:	f04f 33ff 	mov.w	r3, #4294967295
 800d792:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d031      	beq.n	800d800 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	617b      	str	r3, [r7, #20]
 800d7a2:	e002      	b.n	800d7aa <get_ldnumber+0x24>
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	617b      	str	r3, [r7, #20]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b1f      	cmp	r3, #31
 800d7b0:	d903      	bls.n	800d7ba <get_ldnumber+0x34>
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b3a      	cmp	r3, #58	; 0x3a
 800d7b8:	d1f4      	bne.n	800d7a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	2b3a      	cmp	r3, #58	; 0x3a
 800d7c0:	d11c      	bne.n	800d7fc <get_ldnumber+0x76>
			tp = *path;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	60fa      	str	r2, [r7, #12]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	3b30      	subs	r3, #48	; 0x30
 800d7d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b09      	cmp	r3, #9
 800d7d8:	d80e      	bhi.n	800d7f8 <get_ldnumber+0x72>
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d10a      	bne.n	800d7f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d107      	bne.n	800d7f8 <get_ldnumber+0x72>
					vol = (int)i;
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	617b      	str	r3, [r7, #20]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	697a      	ldr	r2, [r7, #20]
 800d7f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	e002      	b.n	800d802 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d800:	693b      	ldr	r3, [r7, #16]
}
 800d802:	4618      	mov	r0, r3
 800d804:	371c      	adds	r7, #28
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
	...

0800d810 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	70da      	strb	r2, [r3, #3]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f04f 32ff 	mov.w	r2, #4294967295
 800d826:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7fe fa70 	bl	800bd10 <move_window>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <check_fs+0x2a>
 800d836:	2304      	movs	r3, #4
 800d838:	e038      	b.n	800d8ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	3334      	adds	r3, #52	; 0x34
 800d83e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d842:	4618      	mov	r0, r3
 800d844:	f7fd ffb4 	bl	800b7b0 <ld_word>
 800d848:	4603      	mov	r3, r0
 800d84a:	461a      	mov	r2, r3
 800d84c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d850:	429a      	cmp	r2, r3
 800d852:	d001      	beq.n	800d858 <check_fs+0x48>
 800d854:	2303      	movs	r3, #3
 800d856:	e029      	b.n	800d8ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d85e:	2be9      	cmp	r3, #233	; 0xe9
 800d860:	d009      	beq.n	800d876 <check_fs+0x66>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d868:	2beb      	cmp	r3, #235	; 0xeb
 800d86a:	d11e      	bne.n	800d8aa <check_fs+0x9a>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d872:	2b90      	cmp	r3, #144	; 0x90
 800d874:	d119      	bne.n	800d8aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	3334      	adds	r3, #52	; 0x34
 800d87a:	3336      	adds	r3, #54	; 0x36
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fd ffaf 	bl	800b7e0 <ld_dword>
 800d882:	4603      	mov	r3, r0
 800d884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d888:	4a0a      	ldr	r2, [pc, #40]	; (800d8b4 <check_fs+0xa4>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d101      	bne.n	800d892 <check_fs+0x82>
 800d88e:	2300      	movs	r3, #0
 800d890:	e00c      	b.n	800d8ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	3334      	adds	r3, #52	; 0x34
 800d896:	3352      	adds	r3, #82	; 0x52
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fd ffa1 	bl	800b7e0 <ld_dword>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	4a05      	ldr	r2, [pc, #20]	; (800d8b8 <check_fs+0xa8>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d101      	bne.n	800d8aa <check_fs+0x9a>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e000      	b.n	800d8ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d8aa:	2302      	movs	r3, #2
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	00544146 	.word	0x00544146
 800d8b8:	33544146 	.word	0x33544146

0800d8bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b096      	sub	sp, #88	; 0x58
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d8d0:	68f8      	ldr	r0, [r7, #12]
 800d8d2:	f7ff ff58 	bl	800d786 <get_ldnumber>
 800d8d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	da01      	bge.n	800d8e2 <find_volume+0x26>
 800d8de:	230b      	movs	r3, #11
 800d8e0:	e231      	b.n	800dd46 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d8e2:	4aa8      	ldr	r2, [pc, #672]	; (800db84 <find_volume+0x2c8>)
 800d8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d101      	bne.n	800d8f6 <find_volume+0x3a>
 800d8f2:	230c      	movs	r3, #12
 800d8f4:	e227      	b.n	800dd46 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d8fc:	79fb      	ldrb	r3, [r7, #7]
 800d8fe:	f023 0301 	bic.w	r3, r3, #1
 800d902:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d01a      	beq.n	800d942 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	785b      	ldrb	r3, [r3, #1]
 800d910:	4618      	mov	r0, r3
 800d912:	f7fd feaf 	bl	800b674 <disk_status>
 800d916:	4603      	mov	r3, r0
 800d918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d91c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10c      	bne.n	800d942 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d928:	79fb      	ldrb	r3, [r7, #7]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d007      	beq.n	800d93e <find_volume+0x82>
 800d92e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d932:	f003 0304 	and.w	r3, r3, #4
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d93a:	230a      	movs	r3, #10
 800d93c:	e203      	b.n	800dd46 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800d93e:	2300      	movs	r3, #0
 800d940:	e201      	b.n	800dd46 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d944:	2200      	movs	r2, #0
 800d946:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d952:	785b      	ldrb	r3, [r3, #1]
 800d954:	4618      	mov	r0, r3
 800d956:	f7fd fea7 	bl	800b6a8 <disk_initialize>
 800d95a:	4603      	mov	r3, r0
 800d95c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d001      	beq.n	800d970 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d96c:	2303      	movs	r3, #3
 800d96e:	e1ea      	b.n	800dd46 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d970:	79fb      	ldrb	r3, [r7, #7]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d007      	beq.n	800d986 <find_volume+0xca>
 800d976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d97a:	f003 0304 	and.w	r3, r3, #4
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d982:	230a      	movs	r3, #10
 800d984:	e1df      	b.n	800dd46 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d98a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d98c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d98e:	f7ff ff3f 	bl	800d810 <check_fs>
 800d992:	4603      	mov	r3, r0
 800d994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d14b      	bne.n	800da38 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	643b      	str	r3, [r7, #64]	; 0x40
 800d9a4:	e01f      	b.n	800d9e6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ae:	011b      	lsls	r3, r3, #4
 800d9b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d9b4:	4413      	add	r3, r2
 800d9b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d006      	beq.n	800d9d0 <find_volume+0x114>
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fd ff0a 	bl	800b7e0 <ld_dword>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	e000      	b.n	800d9d2 <find_volume+0x116>
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d9da:	440b      	add	r3, r1
 800d9dc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	643b      	str	r3, [r7, #64]	; 0x40
 800d9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d9dc      	bls.n	800d9a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d002      	beq.n	800d9fc <find_volume+0x140>
 800d9f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d9fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800da04:	4413      	add	r3, r2
 800da06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800da0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800da0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d005      	beq.n	800da1e <find_volume+0x162>
 800da12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da16:	f7ff fefb 	bl	800d810 <check_fs>
 800da1a:	4603      	mov	r3, r0
 800da1c:	e000      	b.n	800da20 <find_volume+0x164>
 800da1e:	2303      	movs	r3, #3
 800da20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800da24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d905      	bls.n	800da38 <find_volume+0x17c>
 800da2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da2e:	3301      	adds	r3, #1
 800da30:	643b      	str	r3, [r7, #64]	; 0x40
 800da32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da34:	2b03      	cmp	r3, #3
 800da36:	d9e1      	bls.n	800d9fc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800da38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da3c:	2b04      	cmp	r3, #4
 800da3e:	d101      	bne.n	800da44 <find_volume+0x188>
 800da40:	2301      	movs	r3, #1
 800da42:	e180      	b.n	800dd46 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800da44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d901      	bls.n	800da50 <find_volume+0x194>
 800da4c:	230d      	movs	r3, #13
 800da4e:	e17a      	b.n	800dd46 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800da50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da52:	3334      	adds	r3, #52	; 0x34
 800da54:	330b      	adds	r3, #11
 800da56:	4618      	mov	r0, r3
 800da58:	f7fd feaa 	bl	800b7b0 <ld_word>
 800da5c:	4603      	mov	r3, r0
 800da5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da62:	d001      	beq.n	800da68 <find_volume+0x1ac>
 800da64:	230d      	movs	r3, #13
 800da66:	e16e      	b.n	800dd46 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800da68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da6a:	3334      	adds	r3, #52	; 0x34
 800da6c:	3316      	adds	r3, #22
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fd fe9e 	bl	800b7b0 <ld_word>
 800da74:	4603      	mov	r3, r0
 800da76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800da78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d106      	bne.n	800da8c <find_volume+0x1d0>
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	3334      	adds	r3, #52	; 0x34
 800da82:	3324      	adds	r3, #36	; 0x24
 800da84:	4618      	mov	r0, r3
 800da86:	f7fd feab 	bl	800b7e0 <ld_dword>
 800da8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800da8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da90:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da94:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800da98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9e:	789b      	ldrb	r3, [r3, #2]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d005      	beq.n	800dab0 <find_volume+0x1f4>
 800daa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa6:	789b      	ldrb	r3, [r3, #2]
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d001      	beq.n	800dab0 <find_volume+0x1f4>
 800daac:	230d      	movs	r3, #13
 800daae:	e14a      	b.n	800dd46 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab2:	789b      	ldrb	r3, [r3, #2]
 800dab4:	461a      	mov	r2, r3
 800dab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dab8:	fb02 f303 	mul.w	r3, r2, r3
 800dabc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800daca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dacc:	895b      	ldrh	r3, [r3, #10]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d008      	beq.n	800dae4 <find_volume+0x228>
 800dad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad4:	895b      	ldrh	r3, [r3, #10]
 800dad6:	461a      	mov	r2, r3
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	895b      	ldrh	r3, [r3, #10]
 800dadc:	3b01      	subs	r3, #1
 800dade:	4013      	ands	r3, r2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <find_volume+0x22c>
 800dae4:	230d      	movs	r3, #13
 800dae6:	e12e      	b.n	800dd46 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	3334      	adds	r3, #52	; 0x34
 800daec:	3311      	adds	r3, #17
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fd fe5e 	bl	800b7b0 <ld_word>
 800daf4:	4603      	mov	r3, r0
 800daf6:	461a      	mov	r2, r3
 800daf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafe:	891b      	ldrh	r3, [r3, #8]
 800db00:	f003 030f 	and.w	r3, r3, #15
 800db04:	b29b      	uxth	r3, r3
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <find_volume+0x252>
 800db0a:	230d      	movs	r3, #13
 800db0c:	e11b      	b.n	800dd46 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800db0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db10:	3334      	adds	r3, #52	; 0x34
 800db12:	3313      	adds	r3, #19
 800db14:	4618      	mov	r0, r3
 800db16:	f7fd fe4b 	bl	800b7b0 <ld_word>
 800db1a:	4603      	mov	r3, r0
 800db1c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800db1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db20:	2b00      	cmp	r3, #0
 800db22:	d106      	bne.n	800db32 <find_volume+0x276>
 800db24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db26:	3334      	adds	r3, #52	; 0x34
 800db28:	3320      	adds	r3, #32
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fd fe58 	bl	800b7e0 <ld_dword>
 800db30:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800db32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db34:	3334      	adds	r3, #52	; 0x34
 800db36:	330e      	adds	r3, #14
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fd fe39 	bl	800b7b0 <ld_word>
 800db3e:	4603      	mov	r3, r0
 800db40:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800db42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db44:	2b00      	cmp	r3, #0
 800db46:	d101      	bne.n	800db4c <find_volume+0x290>
 800db48:	230d      	movs	r3, #13
 800db4a:	e0fc      	b.n	800dd46 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800db4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800db4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db50:	4413      	add	r3, r2
 800db52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db54:	8912      	ldrh	r2, [r2, #8]
 800db56:	0912      	lsrs	r2, r2, #4
 800db58:	b292      	uxth	r2, r2
 800db5a:	4413      	add	r3, r2
 800db5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800db5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	429a      	cmp	r2, r3
 800db64:	d201      	bcs.n	800db6a <find_volume+0x2ae>
 800db66:	230d      	movs	r3, #13
 800db68:	e0ed      	b.n	800dd46 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800db6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6e:	1ad3      	subs	r3, r2, r3
 800db70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db72:	8952      	ldrh	r2, [r2, #10]
 800db74:	fbb3 f3f2 	udiv	r3, r3, r2
 800db78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d103      	bne.n	800db88 <find_volume+0x2cc>
 800db80:	230d      	movs	r3, #13
 800db82:	e0e0      	b.n	800dd46 <find_volume+0x48a>
 800db84:	20000770 	.word	0x20000770
		fmt = FS_FAT32;
 800db88:	2303      	movs	r3, #3
 800db8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800db94:	4293      	cmp	r3, r2
 800db96:	d802      	bhi.n	800db9e <find_volume+0x2e2>
 800db98:	2302      	movs	r3, #2
 800db9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d802      	bhi.n	800dbae <find_volume+0x2f2>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	1c9a      	adds	r2, r3, #2
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800dbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbba:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dbbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbc0:	441a      	add	r2, r3
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800dbc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbca:	441a      	add	r2, r3
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800dbd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbd4:	2b03      	cmp	r3, #3
 800dbd6:	d11e      	bne.n	800dc16 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbda:	3334      	adds	r3, #52	; 0x34
 800dbdc:	332a      	adds	r3, #42	; 0x2a
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fd fde6 	bl	800b7b0 <ld_word>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <find_volume+0x332>
 800dbea:	230d      	movs	r3, #13
 800dbec:	e0ab      	b.n	800dd46 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbf0:	891b      	ldrh	r3, [r3, #8]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d001      	beq.n	800dbfa <find_volume+0x33e>
 800dbf6:	230d      	movs	r3, #13
 800dbf8:	e0a5      	b.n	800dd46 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfc:	3334      	adds	r3, #52	; 0x34
 800dbfe:	332c      	adds	r3, #44	; 0x2c
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fd fded 	bl	800b7e0 <ld_dword>
 800dc06:	4602      	mov	r2, r0
 800dc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	647b      	str	r3, [r7, #68]	; 0x44
 800dc14:	e01f      	b.n	800dc56 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc18:	891b      	ldrh	r3, [r3, #8]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <find_volume+0x366>
 800dc1e:	230d      	movs	r3, #13
 800dc20:	e091      	b.n	800dd46 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc28:	441a      	add	r2, r3
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d103      	bne.n	800dc3e <find_volume+0x382>
 800dc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	005b      	lsls	r3, r3, #1
 800dc3c:	e00a      	b.n	800dc54 <find_volume+0x398>
 800dc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc40:	699a      	ldr	r2, [r3, #24]
 800dc42:	4613      	mov	r3, r2
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	4413      	add	r3, r2
 800dc48:	085a      	lsrs	r2, r3, #1
 800dc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	f003 0301 	and.w	r3, r3, #1
 800dc52:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dc54:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	69da      	ldr	r2, [r3, #28]
 800dc5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dc60:	0a5b      	lsrs	r3, r3, #9
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d201      	bcs.n	800dc6a <find_volume+0x3ae>
 800dc66:	230d      	movs	r3, #13
 800dc68:	e06d      	b.n	800dd46 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc70:	615a      	str	r2, [r3, #20]
 800dc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc74:	695a      	ldr	r2, [r3, #20]
 800dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc78:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7c:	2280      	movs	r2, #128	; 0x80
 800dc7e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc84:	2b03      	cmp	r3, #3
 800dc86:	d149      	bne.n	800dd1c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8a:	3334      	adds	r3, #52	; 0x34
 800dc8c:	3330      	adds	r3, #48	; 0x30
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7fd fd8e 	bl	800b7b0 <ld_word>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d140      	bne.n	800dd1c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	4619      	mov	r1, r3
 800dca0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dca2:	f7fe f835 	bl	800bd10 <move_window>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d137      	bne.n	800dd1c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcae:	2200      	movs	r2, #0
 800dcb0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb4:	3334      	adds	r3, #52	; 0x34
 800dcb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fd fd78 	bl	800b7b0 <ld_word>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d127      	bne.n	800dd1c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	3334      	adds	r3, #52	; 0x34
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fd fd85 	bl	800b7e0 <ld_dword>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	4a1d      	ldr	r2, [pc, #116]	; (800dd50 <find_volume+0x494>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d11e      	bne.n	800dd1c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce0:	3334      	adds	r3, #52	; 0x34
 800dce2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fd fd7a 	bl	800b7e0 <ld_dword>
 800dcec:	4603      	mov	r3, r0
 800dcee:	4a19      	ldr	r2, [pc, #100]	; (800dd54 <find_volume+0x498>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d113      	bne.n	800dd1c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf6:	3334      	adds	r3, #52	; 0x34
 800dcf8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fd fd6f 	bl	800b7e0 <ld_dword>
 800dd02:	4602      	mov	r2, r0
 800dd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd06:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0a:	3334      	adds	r3, #52	; 0x34
 800dd0c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fd fd65 	bl	800b7e0 <ld_dword>
 800dd16:	4602      	mov	r2, r0
 800dd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dd22:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dd24:	4b0c      	ldr	r3, [pc, #48]	; (800dd58 <find_volume+0x49c>)
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	4b0a      	ldr	r3, [pc, #40]	; (800dd58 <find_volume+0x49c>)
 800dd2e:	801a      	strh	r2, [r3, #0]
 800dd30:	4b09      	ldr	r3, [pc, #36]	; (800dd58 <find_volume+0x49c>)
 800dd32:	881a      	ldrh	r2, [r3, #0]
 800dd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd36:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3a:	4a08      	ldr	r2, [pc, #32]	; (800dd5c <find_volume+0x4a0>)
 800dd3c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dd3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd40:	f7fd ff7e 	bl	800bc40 <clear_lock>
#endif
	return FR_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3758      	adds	r7, #88	; 0x58
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	41615252 	.word	0x41615252
 800dd54:	61417272 	.word	0x61417272
 800dd58:	20000774 	.word	0x20000774
 800dd5c:	20000798 	.word	0x20000798

0800dd60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dd6a:	2309      	movs	r3, #9
 800dd6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d01c      	beq.n	800ddae <validate+0x4e>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d018      	beq.n	800ddae <validate+0x4e>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d013      	beq.n	800ddae <validate+0x4e>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	889a      	ldrh	r2, [r3, #4]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	88db      	ldrh	r3, [r3, #6]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d10c      	bne.n	800ddae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	785b      	ldrb	r3, [r3, #1]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fd fc6a 	bl	800b674 <disk_status>
 800dda0:	4603      	mov	r3, r0
 800dda2:	f003 0301 	and.w	r3, r3, #1
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d101      	bne.n	800ddae <validate+0x4e>
			res = FR_OK;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ddae:	7bfb      	ldrb	r3, [r7, #15]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d102      	bne.n	800ddba <validate+0x5a>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	e000      	b.n	800ddbc <validate+0x5c>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	683a      	ldr	r2, [r7, #0]
 800ddbe:	6013      	str	r3, [r2, #0]
	return res;
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
	...

0800ddcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b088      	sub	sp, #32
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ddde:	f107 0310 	add.w	r3, r7, #16
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7ff fccf 	bl	800d786 <get_ldnumber>
 800dde8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	da01      	bge.n	800ddf4 <f_mount+0x28>
 800ddf0:	230b      	movs	r3, #11
 800ddf2:	e02b      	b.n	800de4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ddf4:	4a17      	ldr	r2, [pc, #92]	; (800de54 <f_mount+0x88>)
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d005      	beq.n	800de10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800de04:	69b8      	ldr	r0, [r7, #24]
 800de06:	f7fd ff1b 	bl	800bc40 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	2200      	movs	r2, #0
 800de0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2200      	movs	r2, #0
 800de1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	490d      	ldr	r1, [pc, #52]	; (800de54 <f_mount+0x88>)
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <f_mount+0x66>
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d001      	beq.n	800de36 <f_mount+0x6a>
 800de32:	2300      	movs	r3, #0
 800de34:	e00a      	b.n	800de4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800de36:	f107 010c 	add.w	r1, r7, #12
 800de3a:	f107 0308 	add.w	r3, r7, #8
 800de3e:	2200      	movs	r2, #0
 800de40:	4618      	mov	r0, r3
 800de42:	f7ff fd3b 	bl	800d8bc <find_volume>
 800de46:	4603      	mov	r3, r0
 800de48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3720      	adds	r7, #32
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	20000770 	.word	0x20000770

0800de58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b09a      	sub	sp, #104	; 0x68
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	4613      	mov	r3, r2
 800de64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d101      	bne.n	800de70 <f_open+0x18>
 800de6c:	2309      	movs	r3, #9
 800de6e:	e1ad      	b.n	800e1cc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de70:	79fb      	ldrb	r3, [r7, #7]
 800de72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800de78:	79fa      	ldrb	r2, [r7, #7]
 800de7a:	f107 0110 	add.w	r1, r7, #16
 800de7e:	f107 0308 	add.w	r3, r7, #8
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff fd1a 	bl	800d8bc <find_volume>
 800de88:	4603      	mov	r3, r0
 800de8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800de8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de92:	2b00      	cmp	r3, #0
 800de94:	f040 8191 	bne.w	800e1ba <f_open+0x362>
		dj.obj.fs = fs;
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	f107 0314 	add.w	r3, r7, #20
 800dea2:	4611      	mov	r1, r2
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7ff fbfd 	bl	800d6a4 <follow_path>
 800deaa:	4603      	mov	r3, r0
 800deac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800deb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d11a      	bne.n	800deee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800deb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800debc:	b25b      	sxtb	r3, r3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	da03      	bge.n	800deca <f_open+0x72>
				res = FR_INVALID_NAME;
 800dec2:	2306      	movs	r3, #6
 800dec4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dec8:	e011      	b.n	800deee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800deca:	79fb      	ldrb	r3, [r7, #7]
 800decc:	f023 0301 	bic.w	r3, r3, #1
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	bf14      	ite	ne
 800ded4:	2301      	movne	r3, #1
 800ded6:	2300      	moveq	r3, #0
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	461a      	mov	r2, r3
 800dedc:	f107 0314 	add.w	r3, r7, #20
 800dee0:	4611      	mov	r1, r2
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fd fd64 	bl	800b9b0 <chk_lock>
 800dee8:	4603      	mov	r3, r0
 800deea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800deee:	79fb      	ldrb	r3, [r7, #7]
 800def0:	f003 031c 	and.w	r3, r3, #28
 800def4:	2b00      	cmp	r3, #0
 800def6:	d07f      	beq.n	800dff8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800def8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800defc:	2b00      	cmp	r3, #0
 800defe:	d017      	beq.n	800df30 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800df00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df04:	2b04      	cmp	r3, #4
 800df06:	d10e      	bne.n	800df26 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800df08:	f7fd fdae 	bl	800ba68 <enq_lock>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d006      	beq.n	800df20 <f_open+0xc8>
 800df12:	f107 0314 	add.w	r3, r7, #20
 800df16:	4618      	mov	r0, r3
 800df18:	f7fe ff94 	bl	800ce44 <dir_register>
 800df1c:	4603      	mov	r3, r0
 800df1e:	e000      	b.n	800df22 <f_open+0xca>
 800df20:	2312      	movs	r3, #18
 800df22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	f043 0308 	orr.w	r3, r3, #8
 800df2c:	71fb      	strb	r3, [r7, #7]
 800df2e:	e010      	b.n	800df52 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800df30:	7ebb      	ldrb	r3, [r7, #26]
 800df32:	f003 0311 	and.w	r3, r3, #17
 800df36:	2b00      	cmp	r3, #0
 800df38:	d003      	beq.n	800df42 <f_open+0xea>
					res = FR_DENIED;
 800df3a:	2307      	movs	r3, #7
 800df3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800df40:	e007      	b.n	800df52 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800df42:	79fb      	ldrb	r3, [r7, #7]
 800df44:	f003 0304 	and.w	r3, r3, #4
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d002      	beq.n	800df52 <f_open+0xfa>
 800df4c:	2308      	movs	r3, #8
 800df4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df56:	2b00      	cmp	r3, #0
 800df58:	d168      	bne.n	800e02c <f_open+0x1d4>
 800df5a:	79fb      	ldrb	r3, [r7, #7]
 800df5c:	f003 0308 	and.w	r3, r3, #8
 800df60:	2b00      	cmp	r3, #0
 800df62:	d063      	beq.n	800e02c <f_open+0x1d4>
				dw = GET_FATTIME();
 800df64:	f7fb ff92 	bl	8009e8c <get_fattime>
 800df68:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800df6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df6c:	330e      	adds	r3, #14
 800df6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df70:	4618      	mov	r0, r3
 800df72:	f7fd fc73 	bl	800b85c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800df76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df78:	3316      	adds	r3, #22
 800df7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fd fc6d 	bl	800b85c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df84:	330b      	adds	r3, #11
 800df86:	2220      	movs	r2, #32
 800df88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df8e:	4611      	mov	r1, r2
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fbc4 	bl	800c71e <ld_clust>
 800df96:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df9c:	2200      	movs	r2, #0
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe fbdc 	bl	800c75c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dfa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa6:	331c      	adds	r3, #28
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fd fc56 	bl	800b85c <st_dword>
					fs->wflag = 1;
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dfb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d037      	beq.n	800e02c <f_open+0x1d4>
						dw = fs->winsect;
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfc0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800dfc2:	f107 0314 	add.w	r3, r7, #20
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fe f8ef 	bl	800c1ae <remove_chain>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800dfd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d126      	bne.n	800e02c <f_open+0x1d4>
							res = move_window(fs, dw);
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fd fe94 	bl	800bd10 <move_window>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dff2:	3a01      	subs	r2, #1
 800dff4:	611a      	str	r2, [r3, #16]
 800dff6:	e019      	b.n	800e02c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dff8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d115      	bne.n	800e02c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e000:	7ebb      	ldrb	r3, [r7, #26]
 800e002:	f003 0310 	and.w	r3, r3, #16
 800e006:	2b00      	cmp	r3, #0
 800e008:	d003      	beq.n	800e012 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e00a:	2304      	movs	r3, #4
 800e00c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e010:	e00c      	b.n	800e02c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e012:	79fb      	ldrb	r3, [r7, #7]
 800e014:	f003 0302 	and.w	r3, r3, #2
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d007      	beq.n	800e02c <f_open+0x1d4>
 800e01c:	7ebb      	ldrb	r3, [r7, #26]
 800e01e:	f003 0301 	and.w	r3, r3, #1
 800e022:	2b00      	cmp	r3, #0
 800e024:	d002      	beq.n	800e02c <f_open+0x1d4>
						res = FR_DENIED;
 800e026:	2307      	movs	r3, #7
 800e028:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e02c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e030:	2b00      	cmp	r3, #0
 800e032:	d128      	bne.n	800e086 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e034:	79fb      	ldrb	r3, [r7, #7]
 800e036:	f003 0308 	and.w	r3, r3, #8
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e044:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e04e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e054:	79fb      	ldrb	r3, [r7, #7]
 800e056:	f023 0301 	bic.w	r3, r3, #1
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	bf14      	ite	ne
 800e05e:	2301      	movne	r3, #1
 800e060:	2300      	moveq	r3, #0
 800e062:	b2db      	uxtb	r3, r3
 800e064:	461a      	mov	r2, r3
 800e066:	f107 0314 	add.w	r3, r7, #20
 800e06a:	4611      	mov	r1, r2
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7fd fd1d 	bl	800baac <inc_lock>
 800e072:	4602      	mov	r2, r0
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d102      	bne.n	800e086 <f_open+0x22e>
 800e080:	2302      	movs	r3, #2
 800e082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e086:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f040 8095 	bne.w	800e1ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e094:	4611      	mov	r1, r2
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe fb41 	bl	800c71e <ld_clust>
 800e09c:	4602      	mov	r2, r0
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a4:	331c      	adds	r3, #28
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fd fb9a 	bl	800b7e0 <ld_dword>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e0b8:	693a      	ldr	r2, [r7, #16]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	88da      	ldrh	r2, [r3, #6]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	79fa      	ldrb	r2, [r7, #7]
 800e0ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	3330      	adds	r3, #48	; 0x30
 800e0e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fd fc04 	bl	800b8f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e0ee:	79fb      	ldrb	r3, [r7, #7]
 800e0f0:	f003 0320 	and.w	r3, r3, #32
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d060      	beq.n	800e1ba <f_open+0x362>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d05c      	beq.n	800e1ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	68da      	ldr	r2, [r3, #12]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	895b      	ldrh	r3, [r3, #10]
 800e10c:	025b      	lsls	r3, r3, #9
 800e10e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e11c:	e016      	b.n	800e14c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e122:	4618      	mov	r0, r3
 800e124:	f7fd feaf 	bl	800be86 <get_fat>
 800e128:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e12a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d802      	bhi.n	800e136 <f_open+0x2de>
 800e130:	2302      	movs	r3, #2
 800e132:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13c:	d102      	bne.n	800e144 <f_open+0x2ec>
 800e13e:	2301      	movs	r3, #1
 800e140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e144:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e14c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e150:	2b00      	cmp	r3, #0
 800e152:	d103      	bne.n	800e15c <f_open+0x304>
 800e154:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e158:	429a      	cmp	r2, r3
 800e15a:	d8e0      	bhi.n	800e11e <f_open+0x2c6>
				}
				fp->clust = clst;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e160:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e162:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e166:	2b00      	cmp	r3, #0
 800e168:	d127      	bne.n	800e1ba <f_open+0x362>
 800e16a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e170:	2b00      	cmp	r3, #0
 800e172:	d022      	beq.n	800e1ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fd fe65 	bl	800be48 <clust2sect>
 800e17e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e182:	2b00      	cmp	r3, #0
 800e184:	d103      	bne.n	800e18e <f_open+0x336>
						res = FR_INT_ERR;
 800e186:	2302      	movs	r3, #2
 800e188:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e18c:	e015      	b.n	800e1ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e18e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e190:	0a5a      	lsrs	r2, r3, #9
 800e192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e194:	441a      	add	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	7858      	ldrb	r0, [r3, #1]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6a1a      	ldr	r2, [r3, #32]
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	f7fd faa3 	bl	800b6f4 <disk_read>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <f_open+0x362>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e1ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d002      	beq.n	800e1c8 <f_open+0x370>
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e1c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3768      	adds	r7, #104	; 0x68
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08e      	sub	sp, #56	; 0x38
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f107 0214 	add.w	r2, r7, #20
 800e1f2:	4611      	mov	r1, r2
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7ff fdb3 	bl	800dd60 <validate>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e204:	2b00      	cmp	r3, #0
 800e206:	d107      	bne.n	800e218 <f_read+0x44>
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	7d5b      	ldrb	r3, [r3, #21]
 800e20c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e214:	2b00      	cmp	r3, #0
 800e216:	d002      	beq.n	800e21e <f_read+0x4a>
 800e218:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e21c:	e115      	b.n	800e44a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	7d1b      	ldrb	r3, [r3, #20]
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	2b00      	cmp	r3, #0
 800e228:	d101      	bne.n	800e22e <f_read+0x5a>
 800e22a:	2307      	movs	r3, #7
 800e22c:	e10d      	b.n	800e44a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	68da      	ldr	r2, [r3, #12]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	699b      	ldr	r3, [r3, #24]
 800e236:	1ad3      	subs	r3, r2, r3
 800e238:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	429a      	cmp	r2, r3
 800e240:	f240 80fe 	bls.w	800e440 <f_read+0x26c>
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e248:	e0fa      	b.n	800e440 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	699b      	ldr	r3, [r3, #24]
 800e24e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e252:	2b00      	cmp	r3, #0
 800e254:	f040 80c6 	bne.w	800e3e4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	699b      	ldr	r3, [r3, #24]
 800e25c:	0a5b      	lsrs	r3, r3, #9
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	8952      	ldrh	r2, [r2, #10]
 800e262:	3a01      	subs	r2, #1
 800e264:	4013      	ands	r3, r2
 800e266:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d12f      	bne.n	800e2ce <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d103      	bne.n	800e27e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	633b      	str	r3, [r7, #48]	; 0x30
 800e27c:	e013      	b.n	800e2a6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e282:	2b00      	cmp	r3, #0
 800e284:	d007      	beq.n	800e296 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	699b      	ldr	r3, [r3, #24]
 800e28a:	4619      	mov	r1, r3
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	f7fe f88b 	bl	800c3a8 <clmt_clust>
 800e292:	6338      	str	r0, [r7, #48]	; 0x30
 800e294:	e007      	b.n	800e2a6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	69db      	ldr	r3, [r3, #28]
 800e29c:	4619      	mov	r1, r3
 800e29e:	4610      	mov	r0, r2
 800e2a0:	f7fd fdf1 	bl	800be86 <get_fat>
 800e2a4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d804      	bhi.n	800e2b6 <f_read+0xe2>
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2202      	movs	r2, #2
 800e2b0:	755a      	strb	r2, [r3, #21]
 800e2b2:	2302      	movs	r3, #2
 800e2b4:	e0c9      	b.n	800e44a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2bc:	d104      	bne.n	800e2c8 <f_read+0xf4>
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	755a      	strb	r2, [r3, #21]
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	e0c0      	b.n	800e44a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2cc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e2ce:	697a      	ldr	r2, [r7, #20]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	69db      	ldr	r3, [r3, #28]
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4610      	mov	r0, r2
 800e2d8:	f7fd fdb6 	bl	800be48 <clust2sect>
 800e2dc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d104      	bne.n	800e2ee <f_read+0x11a>
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	755a      	strb	r2, [r3, #21]
 800e2ea:	2302      	movs	r3, #2
 800e2ec:	e0ad      	b.n	800e44a <f_read+0x276>
			sect += csect;
 800e2ee:	69ba      	ldr	r2, [r7, #24]
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	0a5b      	lsrs	r3, r3, #9
 800e2fa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d039      	beq.n	800e376 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e302:	69fa      	ldr	r2, [r7, #28]
 800e304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e306:	4413      	add	r3, r2
 800e308:	697a      	ldr	r2, [r7, #20]
 800e30a:	8952      	ldrh	r2, [r2, #10]
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d905      	bls.n	800e31c <f_read+0x148>
					cc = fs->csize - csect;
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	895b      	ldrh	r3, [r3, #10]
 800e314:	461a      	mov	r2, r3
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	7858      	ldrb	r0, [r3, #1]
 800e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e322:	69ba      	ldr	r2, [r7, #24]
 800e324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e326:	f7fd f9e5 	bl	800b6f4 <disk_read>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d004      	beq.n	800e33a <f_read+0x166>
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2201      	movs	r2, #1
 800e334:	755a      	strb	r2, [r3, #21]
 800e336:	2301      	movs	r3, #1
 800e338:	e087      	b.n	800e44a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	7d1b      	ldrb	r3, [r3, #20]
 800e33e:	b25b      	sxtb	r3, r3
 800e340:	2b00      	cmp	r3, #0
 800e342:	da14      	bge.n	800e36e <f_read+0x19a>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	6a1a      	ldr	r2, [r3, #32]
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	1ad3      	subs	r3, r2, r3
 800e34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e34e:	429a      	cmp	r2, r3
 800e350:	d90d      	bls.n	800e36e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6a1a      	ldr	r2, [r3, #32]
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	025b      	lsls	r3, r3, #9
 800e35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e35e:	18d0      	adds	r0, r2, r3
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	3330      	adds	r3, #48	; 0x30
 800e364:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e368:	4619      	mov	r1, r3
 800e36a:	f7fd faa3 	bl	800b8b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e370:	025b      	lsls	r3, r3, #9
 800e372:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e374:	e050      	b.n	800e418 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	69ba      	ldr	r2, [r7, #24]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d02e      	beq.n	800e3de <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	7d1b      	ldrb	r3, [r3, #20]
 800e384:	b25b      	sxtb	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	da18      	bge.n	800e3bc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	7858      	ldrb	r0, [r3, #1]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6a1a      	ldr	r2, [r3, #32]
 800e398:	2301      	movs	r3, #1
 800e39a:	f7fd f9cb 	bl	800b734 <disk_write>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d004      	beq.n	800e3ae <f_read+0x1da>
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	755a      	strb	r2, [r3, #21]
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e04d      	b.n	800e44a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	7d1b      	ldrb	r3, [r3, #20]
 800e3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	7858      	ldrb	r0, [r3, #1]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	69ba      	ldr	r2, [r7, #24]
 800e3ca:	f7fd f993 	bl	800b6f4 <disk_read>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d004      	beq.n	800e3de <f_read+0x20a>
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	755a      	strb	r2, [r3, #21]
 800e3da:	2301      	movs	r3, #1
 800e3dc:	e035      	b.n	800e44a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	69ba      	ldr	r2, [r7, #24]
 800e3e2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	699b      	ldr	r3, [r3, #24]
 800e3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e3f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d901      	bls.n	800e3fe <f_read+0x22a>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e40c:	4413      	add	r3, r2
 800e40e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e410:	4619      	mov	r1, r3
 800e412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e414:	f7fd fa4e 	bl	800b8b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	4413      	add	r3, r2
 800e41e:	627b      	str	r3, [r7, #36]	; 0x24
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	699a      	ldr	r2, [r3, #24]
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	441a      	add	r2, r3
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	619a      	str	r2, [r3, #24]
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	441a      	add	r2, r3
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	601a      	str	r2, [r3, #0]
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	f47f af01 	bne.w	800e24a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3738      	adds	r7, #56	; 0x38
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b086      	sub	sp, #24
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f107 0208 	add.w	r2, r7, #8
 800e460:	4611      	mov	r1, r2
 800e462:	4618      	mov	r0, r3
 800e464:	f7ff fc7c 	bl	800dd60 <validate>
 800e468:	4603      	mov	r3, r0
 800e46a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e46c:	7dfb      	ldrb	r3, [r7, #23]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d168      	bne.n	800e544 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	7d1b      	ldrb	r3, [r3, #20]
 800e476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d062      	beq.n	800e544 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	7d1b      	ldrb	r3, [r3, #20]
 800e482:	b25b      	sxtb	r3, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	da15      	bge.n	800e4b4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	7858      	ldrb	r0, [r3, #1]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a1a      	ldr	r2, [r3, #32]
 800e496:	2301      	movs	r3, #1
 800e498:	f7fd f94c 	bl	800b734 <disk_write>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <f_sync+0x54>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e04f      	b.n	800e546 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	7d1b      	ldrb	r3, [r3, #20]
 800e4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e4b4:	f7fb fcea 	bl	8009e8c <get_fattime>
 800e4b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	f7fd fc24 	bl	800bd10 <move_window>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e4cc:	7dfb      	ldrb	r3, [r7, #23]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d138      	bne.n	800e544 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	330b      	adds	r3, #11
 800e4dc:	781a      	ldrb	r2, [r3, #0]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	330b      	adds	r3, #11
 800e4e2:	f042 0220 	orr.w	r2, r2, #32
 800e4e6:	b2d2      	uxtb	r2, r2
 800e4e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6818      	ldr	r0, [r3, #0]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	68f9      	ldr	r1, [r7, #12]
 800e4f6:	f7fe f931 	bl	800c75c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f103 021c 	add.w	r2, r3, #28
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	4619      	mov	r1, r3
 800e506:	4610      	mov	r0, r2
 800e508:	f7fd f9a8 	bl	800b85c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	3316      	adds	r3, #22
 800e510:	6939      	ldr	r1, [r7, #16]
 800e512:	4618      	mov	r0, r3
 800e514:	f7fd f9a2 	bl	800b85c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	3312      	adds	r3, #18
 800e51c:	2100      	movs	r1, #0
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fd f981 	bl	800b826 <st_word>
					fs->wflag = 1;
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	2201      	movs	r2, #1
 800e528:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fd fc1d 	bl	800bd6c <sync_fs>
 800e532:	4603      	mov	r3, r0
 800e534:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7d1b      	ldrb	r3, [r3, #20]
 800e53a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e53e:	b2da      	uxtb	r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e544:	7dfb      	ldrb	r3, [r7, #23]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b084      	sub	sp, #16
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f7ff ff7b 	bl	800e452 <f_sync>
 800e55c:	4603      	mov	r3, r0
 800e55e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e560:	7bfb      	ldrb	r3, [r7, #15]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d118      	bne.n	800e598 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f107 0208 	add.w	r2, r7, #8
 800e56c:	4611      	mov	r1, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	f7ff fbf6 	bl	800dd60 <validate>
 800e574:	4603      	mov	r3, r0
 800e576:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e578:	7bfb      	ldrb	r3, [r7, #15]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10c      	bne.n	800e598 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	4618      	mov	r0, r3
 800e584:	f7fd fb20 	bl	800bbc8 <dec_lock>
 800e588:	4603      	mov	r3, r0
 800e58a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e58c:	7bfb      	ldrb	r3, [r7, #15]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d102      	bne.n	800e598 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2200      	movs	r2, #0
 800e596:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e598:	7bfb      	ldrb	r3, [r7, #15]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b086      	sub	sp, #24
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
 800e5aa:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d101      	bne.n	800e5b6 <f_opendir+0x14>
 800e5b2:	2309      	movs	r3, #9
 800e5b4:	e064      	b.n	800e680 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e5ba:	f107 010c 	add.w	r1, r7, #12
 800e5be:	463b      	mov	r3, r7
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7ff f97a 	bl	800d8bc <find_volume>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e5cc:	7dfb      	ldrb	r3, [r7, #23]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d14f      	bne.n	800e672 <f_opendir+0xd0>
		obj->fs = fs;
 800e5d2:	68fa      	ldr	r2, [r7, #12]
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7ff f861 	bl	800d6a4 <follow_path>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e5e6:	7dfb      	ldrb	r3, [r7, #23]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d13d      	bne.n	800e668 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e5f2:	b25b      	sxtb	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	db12      	blt.n	800e61e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	799b      	ldrb	r3, [r3, #6]
 800e5fc:	f003 0310 	and.w	r3, r3, #16
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00a      	beq.n	800e61a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a1b      	ldr	r3, [r3, #32]
 800e60a:	4619      	mov	r1, r3
 800e60c:	4610      	mov	r0, r2
 800e60e:	f7fe f886 	bl	800c71e <ld_clust>
 800e612:	4602      	mov	r2, r0
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	609a      	str	r2, [r3, #8]
 800e618:	e001      	b.n	800e61e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e61a:	2305      	movs	r3, #5
 800e61c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e61e:	7dfb      	ldrb	r3, [r7, #23]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d121      	bne.n	800e668 <f_opendir+0xc6>
				obj->id = fs->id;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	88da      	ldrh	r2, [r3, #6]
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e62c:	2100      	movs	r1, #0
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7fd feee 	bl	800c410 <dir_sdi>
 800e634:	4603      	mov	r3, r0
 800e636:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e638:	7dfb      	ldrb	r3, [r7, #23]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d114      	bne.n	800e668 <f_opendir+0xc6>
					if (obj->sclust) {
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00d      	beq.n	800e662 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e646:	2100      	movs	r1, #0
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7fd fa2f 	bl	800baac <inc_lock>
 800e64e:	4602      	mov	r2, r0
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d105      	bne.n	800e668 <f_opendir+0xc6>
 800e65c:	2312      	movs	r3, #18
 800e65e:	75fb      	strb	r3, [r7, #23]
 800e660:	e002      	b.n	800e668 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	2200      	movs	r2, #0
 800e666:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e668:	7dfb      	ldrb	r3, [r7, #23]
 800e66a:	2b04      	cmp	r3, #4
 800e66c:	d101      	bne.n	800e672 <f_opendir+0xd0>
 800e66e:	2305      	movs	r3, #5
 800e670:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e672:	7dfb      	ldrb	r3, [r7, #23]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d002      	beq.n	800e67e <f_opendir+0xdc>
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	2200      	movs	r2, #0
 800e67c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f107 0208 	add.w	r2, r7, #8
 800e696:	4611      	mov	r1, r2
 800e698:	4618      	mov	r0, r3
 800e69a:	f7ff fb61 	bl	800dd60 <validate>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e6a2:	7bfb      	ldrb	r3, [r7, #15]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d110      	bne.n	800e6ca <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	691b      	ldr	r3, [r3, #16]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d006      	beq.n	800e6be <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	691b      	ldr	r3, [r3, #16]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fd fa87 	bl	800bbc8 <dec_lock>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e6be:	7bfb      	ldrb	r3, [r7, #15]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d102      	bne.n	800e6ca <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f107 0208 	add.w	r2, r7, #8
 800e6e4:	4611      	mov	r1, r2
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7ff fb3a 	bl	800dd60 <validate>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e6f0:	7bfb      	ldrb	r3, [r7, #15]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d126      	bne.n	800e744 <f_readdir+0x70>
		if (!fno) {
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d106      	bne.n	800e70a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f7fd fe86 	bl	800c410 <dir_sdi>
 800e704:	4603      	mov	r3, r0
 800e706:	73fb      	strb	r3, [r7, #15]
 800e708:	e01c      	b.n	800e744 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e70a:	2100      	movs	r1, #0
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7fe fa32 	bl	800cb76 <dir_read>
 800e712:	4603      	mov	r3, r0
 800e714:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e716:	7bfb      	ldrb	r3, [r7, #15]
 800e718:	2b04      	cmp	r3, #4
 800e71a:	d101      	bne.n	800e720 <f_readdir+0x4c>
 800e71c:	2300      	movs	r3, #0
 800e71e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e720:	7bfb      	ldrb	r3, [r7, #15]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d10e      	bne.n	800e744 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e726:	6839      	ldr	r1, [r7, #0]
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7fe fc83 	bl	800d034 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e72e:	2100      	movs	r1, #0
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f7fd fee8 	bl	800c506 <dir_next>
 800e736:	4603      	mov	r3, r0
 800e738:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e73a:	7bfb      	ldrb	r3, [r7, #15]
 800e73c:	2b04      	cmp	r3, #4
 800e73e:	d101      	bne.n	800e744 <f_readdir+0x70>
 800e740:	2300      	movs	r3, #0
 800e742:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e744:	7bfb      	ldrb	r3, [r7, #15]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3710      	adds	r7, #16
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b084      	sub	sp, #16
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
 800e756:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e758:	6839      	ldr	r1, [r7, #0]
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7ff ffba 	bl	800e6d4 <f_readdir>
 800e760:	4603      	mov	r3, r0
 800e762:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800e764:	7bfb      	ldrb	r3, [r7, #15]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d114      	bne.n	800e794 <f_findnext+0x46>
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d011      	beq.n	800e794 <f_findnext+0x46>
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	7d9b      	ldrb	r3, [r3, #22]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00d      	beq.n	800e794 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	f103 0116 	add.w	r1, r3, #22
 800e782:	2300      	movs	r3, #0
 800e784:	2200      	movs	r2, #0
 800e786:	f7fe fd59 	bl	800d23c <pattern_matching>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d100      	bne.n	800e792 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800e790:	e7e2      	b.n	800e758 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800e792:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800e794:	7bfb      	ldrb	r3, [r7, #15]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b086      	sub	sp, #24
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	60f8      	str	r0, [r7, #12]
 800e7a6:	60b9      	str	r1, [r7, #8]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	683a      	ldr	r2, [r7, #0]
 800e7b0:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800e7b2:	6879      	ldr	r1, [r7, #4]
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f7ff fef4 	bl	800e5a2 <f_opendir>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e7be:	7dfb      	ldrb	r3, [r7, #23]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d105      	bne.n	800e7d0 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800e7c4:	68b9      	ldr	r1, [r7, #8]
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f7ff ffc1 	bl	800e74e <f_findnext>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800e7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3718      	adds	r7, #24
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
	...

0800e7dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b087      	sub	sp, #28
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e7f2:	4b1f      	ldr	r3, [pc, #124]	; (800e870 <FATFS_LinkDriverEx+0x94>)
 800e7f4:	7a5b      	ldrb	r3, [r3, #9]
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d131      	bne.n	800e860 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e7fc:	4b1c      	ldr	r3, [pc, #112]	; (800e870 <FATFS_LinkDriverEx+0x94>)
 800e7fe:	7a5b      	ldrb	r3, [r3, #9]
 800e800:	b2db      	uxtb	r3, r3
 800e802:	461a      	mov	r2, r3
 800e804:	4b1a      	ldr	r3, [pc, #104]	; (800e870 <FATFS_LinkDriverEx+0x94>)
 800e806:	2100      	movs	r1, #0
 800e808:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e80a:	4b19      	ldr	r3, [pc, #100]	; (800e870 <FATFS_LinkDriverEx+0x94>)
 800e80c:	7a5b      	ldrb	r3, [r3, #9]
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	4a17      	ldr	r2, [pc, #92]	; (800e870 <FATFS_LinkDriverEx+0x94>)
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	4413      	add	r3, r2
 800e816:	68fa      	ldr	r2, [r7, #12]
 800e818:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e81a:	4b15      	ldr	r3, [pc, #84]	; (800e870 <FATFS_LinkDriverEx+0x94>)
 800e81c:	7a5b      	ldrb	r3, [r3, #9]
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	461a      	mov	r2, r3
 800e822:	4b13      	ldr	r3, [pc, #76]	; (800e870 <FATFS_LinkDriverEx+0x94>)
 800e824:	4413      	add	r3, r2
 800e826:	79fa      	ldrb	r2, [r7, #7]
 800e828:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e82a:	4b11      	ldr	r3, [pc, #68]	; (800e870 <FATFS_LinkDriverEx+0x94>)
 800e82c:	7a5b      	ldrb	r3, [r3, #9]
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	1c5a      	adds	r2, r3, #1
 800e832:	b2d1      	uxtb	r1, r2
 800e834:	4a0e      	ldr	r2, [pc, #56]	; (800e870 <FATFS_LinkDriverEx+0x94>)
 800e836:	7251      	strb	r1, [r2, #9]
 800e838:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e83a:	7dbb      	ldrb	r3, [r7, #22]
 800e83c:	3330      	adds	r3, #48	; 0x30
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	3301      	adds	r3, #1
 800e848:	223a      	movs	r2, #58	; 0x3a
 800e84a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	3302      	adds	r3, #2
 800e850:	222f      	movs	r2, #47	; 0x2f
 800e852:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	3303      	adds	r3, #3
 800e858:	2200      	movs	r2, #0
 800e85a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e860:	7dfb      	ldrb	r3, [r7, #23]
}
 800e862:	4618      	mov	r0, r3
 800e864:	371c      	adds	r7, #28
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	20000998 	.word	0x20000998

0800e874 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e87e:	2200      	movs	r2, #0
 800e880:	6839      	ldr	r1, [r7, #0]
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7ff ffaa 	bl	800e7dc <FATFS_LinkDriverEx>
 800e888:	4603      	mov	r3, r0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3708      	adds	r7, #8
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
	...

0800e894 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
 800e89a:	4603      	mov	r3, r0
 800e89c:	6039      	str	r1, [r7, #0]
 800e89e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e8a0:	88fb      	ldrh	r3, [r7, #6]
 800e8a2:	2b7f      	cmp	r3, #127	; 0x7f
 800e8a4:	d802      	bhi.n	800e8ac <ff_convert+0x18>
		c = chr;
 800e8a6:	88fb      	ldrh	r3, [r7, #6]
 800e8a8:	81fb      	strh	r3, [r7, #14]
 800e8aa:	e025      	b.n	800e8f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00b      	beq.n	800e8ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e8b2:	88fb      	ldrh	r3, [r7, #6]
 800e8b4:	2bff      	cmp	r3, #255	; 0xff
 800e8b6:	d805      	bhi.n	800e8c4 <ff_convert+0x30>
 800e8b8:	88fb      	ldrh	r3, [r7, #6]
 800e8ba:	3b80      	subs	r3, #128	; 0x80
 800e8bc:	4a12      	ldr	r2, [pc, #72]	; (800e908 <ff_convert+0x74>)
 800e8be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8c2:	e000      	b.n	800e8c6 <ff_convert+0x32>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	81fb      	strh	r3, [r7, #14]
 800e8c8:	e016      	b.n	800e8f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	81fb      	strh	r3, [r7, #14]
 800e8ce:	e009      	b.n	800e8e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e8d0:	89fb      	ldrh	r3, [r7, #14]
 800e8d2:	4a0d      	ldr	r2, [pc, #52]	; (800e908 <ff_convert+0x74>)
 800e8d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8d8:	88fa      	ldrh	r2, [r7, #6]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d006      	beq.n	800e8ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e8de:	89fb      	ldrh	r3, [r7, #14]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	81fb      	strh	r3, [r7, #14]
 800e8e4:	89fb      	ldrh	r3, [r7, #14]
 800e8e6:	2b7f      	cmp	r3, #127	; 0x7f
 800e8e8:	d9f2      	bls.n	800e8d0 <ff_convert+0x3c>
 800e8ea:	e000      	b.n	800e8ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e8ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e8ee:	89fb      	ldrh	r3, [r7, #14]
 800e8f0:	3380      	adds	r3, #128	; 0x80
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e8f8:	89fb      	ldrh	r3, [r7, #14]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3714      	adds	r7, #20
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	08015760 	.word	0x08015760

0800e90c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b087      	sub	sp, #28
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e916:	88fb      	ldrh	r3, [r7, #6]
 800e918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e91c:	d201      	bcs.n	800e922 <ff_wtoupper+0x16>
 800e91e:	4b3e      	ldr	r3, [pc, #248]	; (800ea18 <ff_wtoupper+0x10c>)
 800e920:	e000      	b.n	800e924 <ff_wtoupper+0x18>
 800e922:	4b3e      	ldr	r3, [pc, #248]	; (800ea1c <ff_wtoupper+0x110>)
 800e924:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	1c9a      	adds	r2, r3, #2
 800e92a:	617a      	str	r2, [r7, #20]
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e930:	8a7b      	ldrh	r3, [r7, #18]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d068      	beq.n	800ea08 <ff_wtoupper+0xfc>
 800e936:	88fa      	ldrh	r2, [r7, #6]
 800e938:	8a7b      	ldrh	r3, [r7, #18]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d364      	bcc.n	800ea08 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	1c9a      	adds	r2, r3, #2
 800e942:	617a      	str	r2, [r7, #20]
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	823b      	strh	r3, [r7, #16]
 800e948:	8a3b      	ldrh	r3, [r7, #16]
 800e94a:	0a1b      	lsrs	r3, r3, #8
 800e94c:	81fb      	strh	r3, [r7, #14]
 800e94e:	8a3b      	ldrh	r3, [r7, #16]
 800e950:	b2db      	uxtb	r3, r3
 800e952:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e954:	88fa      	ldrh	r2, [r7, #6]
 800e956:	8a79      	ldrh	r1, [r7, #18]
 800e958:	8a3b      	ldrh	r3, [r7, #16]
 800e95a:	440b      	add	r3, r1
 800e95c:	429a      	cmp	r2, r3
 800e95e:	da49      	bge.n	800e9f4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e960:	89fb      	ldrh	r3, [r7, #14]
 800e962:	2b08      	cmp	r3, #8
 800e964:	d84f      	bhi.n	800ea06 <ff_wtoupper+0xfa>
 800e966:	a201      	add	r2, pc, #4	; (adr r2, 800e96c <ff_wtoupper+0x60>)
 800e968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e96c:	0800e991 	.word	0x0800e991
 800e970:	0800e9a3 	.word	0x0800e9a3
 800e974:	0800e9b9 	.word	0x0800e9b9
 800e978:	0800e9c1 	.word	0x0800e9c1
 800e97c:	0800e9c9 	.word	0x0800e9c9
 800e980:	0800e9d1 	.word	0x0800e9d1
 800e984:	0800e9d9 	.word	0x0800e9d9
 800e988:	0800e9e1 	.word	0x0800e9e1
 800e98c:	0800e9e9 	.word	0x0800e9e9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e990:	88fa      	ldrh	r2, [r7, #6]
 800e992:	8a7b      	ldrh	r3, [r7, #18]
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	005b      	lsls	r3, r3, #1
 800e998:	697a      	ldr	r2, [r7, #20]
 800e99a:	4413      	add	r3, r2
 800e99c:	881b      	ldrh	r3, [r3, #0]
 800e99e:	80fb      	strh	r3, [r7, #6]
 800e9a0:	e027      	b.n	800e9f2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e9a2:	88fa      	ldrh	r2, [r7, #6]
 800e9a4:	8a7b      	ldrh	r3, [r7, #18]
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	88fa      	ldrh	r2, [r7, #6]
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	80fb      	strh	r3, [r7, #6]
 800e9b6:	e01c      	b.n	800e9f2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e9b8:	88fb      	ldrh	r3, [r7, #6]
 800e9ba:	3b10      	subs	r3, #16
 800e9bc:	80fb      	strh	r3, [r7, #6]
 800e9be:	e018      	b.n	800e9f2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e9c0:	88fb      	ldrh	r3, [r7, #6]
 800e9c2:	3b20      	subs	r3, #32
 800e9c4:	80fb      	strh	r3, [r7, #6]
 800e9c6:	e014      	b.n	800e9f2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e9c8:	88fb      	ldrh	r3, [r7, #6]
 800e9ca:	3b30      	subs	r3, #48	; 0x30
 800e9cc:	80fb      	strh	r3, [r7, #6]
 800e9ce:	e010      	b.n	800e9f2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e9d0:	88fb      	ldrh	r3, [r7, #6]
 800e9d2:	3b1a      	subs	r3, #26
 800e9d4:	80fb      	strh	r3, [r7, #6]
 800e9d6:	e00c      	b.n	800e9f2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e9d8:	88fb      	ldrh	r3, [r7, #6]
 800e9da:	3308      	adds	r3, #8
 800e9dc:	80fb      	strh	r3, [r7, #6]
 800e9de:	e008      	b.n	800e9f2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e9e0:	88fb      	ldrh	r3, [r7, #6]
 800e9e2:	3b50      	subs	r3, #80	; 0x50
 800e9e4:	80fb      	strh	r3, [r7, #6]
 800e9e6:	e004      	b.n	800e9f2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e9e8:	88fb      	ldrh	r3, [r7, #6]
 800e9ea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e9ee:	80fb      	strh	r3, [r7, #6]
 800e9f0:	bf00      	nop
			}
			break;
 800e9f2:	e008      	b.n	800ea06 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e9f4:	89fb      	ldrh	r3, [r7, #14]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d195      	bne.n	800e926 <ff_wtoupper+0x1a>
 800e9fa:	8a3b      	ldrh	r3, [r7, #16]
 800e9fc:	005b      	lsls	r3, r3, #1
 800e9fe:	697a      	ldr	r2, [r7, #20]
 800ea00:	4413      	add	r3, r2
 800ea02:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ea04:	e78f      	b.n	800e926 <ff_wtoupper+0x1a>
			break;
 800ea06:	bf00      	nop
	}

	return chr;
 800ea08:	88fb      	ldrh	r3, [r7, #6]
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	371c      	adds	r7, #28
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	08015860 	.word	0x08015860
 800ea1c:	08015a54 	.word	0x08015a54

0800ea20 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 800ea20:	b580      	push	{r7, lr}
 800ea22:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800ea24:	2200      	movs	r2, #0
 800ea26:	4912      	ldr	r1, [pc, #72]	; (800ea70 <MX_USB_DEVICE_Init+0x50>)
 800ea28:	4812      	ldr	r0, [pc, #72]	; (800ea74 <MX_USB_DEVICE_Init+0x54>)
 800ea2a:	f7fb fcd8 	bl	800a3de <USBD_Init>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800ea34:	f7f2 fe96 	bl	8001764 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 800ea38:	490f      	ldr	r1, [pc, #60]	; (800ea78 <MX_USB_DEVICE_Init+0x58>)
 800ea3a:	480e      	ldr	r0, [pc, #56]	; (800ea74 <MX_USB_DEVICE_Init+0x54>)
 800ea3c:	f7fb fcff 	bl	800a43e <USBD_RegisterClass>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d001      	beq.n	800ea4a <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800ea46:	f7f2 fe8d 	bl	8001764 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 800ea4a:	490c      	ldr	r1, [pc, #48]	; (800ea7c <MX_USB_DEVICE_Init+0x5c>)
 800ea4c:	4809      	ldr	r0, [pc, #36]	; (800ea74 <MX_USB_DEVICE_Init+0x54>)
 800ea4e:	f7fb fcaf 	bl	800a3b0 <USBD_Midi_RegisterInterface>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800ea58:	f7f2 fe84 	bl	8001764 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ea5c:	4805      	ldr	r0, [pc, #20]	; (800ea74 <MX_USB_DEVICE_Init+0x54>)
 800ea5e:	f7fb fd15 	bl	800a48c <USBD_Start>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d001      	beq.n	800ea6c <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800ea68:	f7f2 fe7c 	bl	8001764 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ea6c:	bf00      	nop
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	20000108 	.word	0x20000108
 800ea74:	20002bf8 	.word	0x20002bf8
 800ea78:	2000005c 	.word	0x2000005c
 800ea7c:	20000158 	.word	0x20000158

0800ea80 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	4603      	mov	r3, r0
 800ea88:	71fb      	strb	r3, [r7, #7]
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	71bb      	strb	r3, [r7, #6]
 800ea8e:	4613      	mov	r3, r2
 800ea90:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 800ea92:	230b      	movs	r3, #11
 800ea94:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 800ea96:	79fb      	ldrb	r3, [r7, #7]
 800ea98:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800ea9c:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
 800eaa0:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800eaa2:	7bbb      	ldrb	r3, [r7, #14]
 800eaa4:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800eaa6:	79bb      	ldrb	r3, [r7, #6]
 800eaa8:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 800eaaa:	797b      	ldrb	r3, [r7, #5]
 800eaac:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 800eaae:	f107 0208 	add.w	r2, r7, #8
 800eab2:	2304      	movs	r3, #4
 800eab4:	2181      	movs	r1, #129	; 0x81
 800eab6:	4810      	ldr	r0, [pc, #64]	; (800eaf8 <MX_USB_Send_Midi+0x78>)
 800eab8:	f000 fbb5 	bl	800f226 <USBD_LL_Transmit>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b03      	cmp	r3, #3
 800eac0:	d00a      	beq.n	800ead8 <MX_USB_Send_Midi+0x58>
 800eac2:	2b03      	cmp	r3, #3
 800eac4:	dc10      	bgt.n	800eae8 <MX_USB_Send_Midi+0x68>
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d002      	beq.n	800ead0 <MX_USB_Send_Midi+0x50>
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d008      	beq.n	800eae0 <MX_USB_Send_Midi+0x60>
 800eace:	e00b      	b.n	800eae8 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 800ead0:	480a      	ldr	r0, [pc, #40]	; (800eafc <MX_USB_Send_Midi+0x7c>)
 800ead2:	f001 fe49 	bl	8010768 <puts>
        break;
 800ead6:	e00b      	b.n	800eaf0 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 800ead8:	4809      	ldr	r0, [pc, #36]	; (800eb00 <MX_USB_Send_Midi+0x80>)
 800eada:	f001 fe45 	bl	8010768 <puts>
        break;
 800eade:	e007      	b.n	800eaf0 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 800eae0:	4808      	ldr	r0, [pc, #32]	; (800eb04 <MX_USB_Send_Midi+0x84>)
 800eae2:	f001 fe41 	bl	8010768 <puts>
        break;
 800eae6:	e003      	b.n	800eaf0 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 800eae8:	4807      	ldr	r0, [pc, #28]	; (800eb08 <MX_USB_Send_Midi+0x88>)
 800eaea:	f001 fe3d 	bl	8010768 <puts>
    }
}
 800eaee:	bf00      	nop
 800eaf0:	bf00      	nop
 800eaf2:	3710      	adds	r7, #16
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	20002bf8 	.word	0x20002bf8
 800eafc:	08013bd0 	.word	0x08013bd0
 800eb00:	08013bd4 	.word	0x08013bd4
 800eb04:	08013be4 	.word	0x08013be4
 800eb08:	08013bf4 	.word	0x08013bf4

0800eb0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	4603      	mov	r3, r0
 800eb14:	6039      	str	r1, [r7, #0]
 800eb16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	2212      	movs	r2, #18
 800eb1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eb1e:	4b03      	ldr	r3, [pc, #12]	; (800eb2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr
 800eb2c:	20000124 	.word	0x20000124

0800eb30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	4603      	mov	r3, r0
 800eb38:	6039      	str	r1, [r7, #0]
 800eb3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	2204      	movs	r2, #4
 800eb40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb42:	4b03      	ldr	r3, [pc, #12]	; (800eb50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr
 800eb50:	20000138 	.word	0x20000138

0800eb54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	6039      	str	r1, [r7, #0]
 800eb5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb60:	79fb      	ldrb	r3, [r7, #7]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d105      	bne.n	800eb72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb66:	683a      	ldr	r2, [r7, #0]
 800eb68:	4907      	ldr	r1, [pc, #28]	; (800eb88 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb6a:	4808      	ldr	r0, [pc, #32]	; (800eb8c <USBD_FS_ProductStrDescriptor+0x38>)
 800eb6c:	f7fc fcbf 	bl	800b4ee <USBD_GetString>
 800eb70:	e004      	b.n	800eb7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	4904      	ldr	r1, [pc, #16]	; (800eb88 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb76:	4805      	ldr	r0, [pc, #20]	; (800eb8c <USBD_FS_ProductStrDescriptor+0x38>)
 800eb78:	f7fc fcb9 	bl	800b4ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb7c:	4b02      	ldr	r3, [pc, #8]	; (800eb88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20002ec8 	.word	0x20002ec8
 800eb8c:	08013c10 	.word	0x08013c10

0800eb90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	4603      	mov	r3, r0
 800eb98:	6039      	str	r1, [r7, #0]
 800eb9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb9c:	683a      	ldr	r2, [r7, #0]
 800eb9e:	4904      	ldr	r1, [pc, #16]	; (800ebb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eba0:	4804      	ldr	r0, [pc, #16]	; (800ebb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eba2:	f7fc fca4 	bl	800b4ee <USBD_GetString>
  return USBD_StrDesc;
 800eba6:	4b02      	ldr	r3, [pc, #8]	; (800ebb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	20002ec8 	.word	0x20002ec8
 800ebb4:	08013c24 	.word	0x08013c24

0800ebb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	6039      	str	r1, [r7, #0]
 800ebc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	221a      	movs	r2, #26
 800ebc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ebca:	f000 f843 	bl	800ec54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ebce:	4b02      	ldr	r3, [pc, #8]	; (800ebd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	2000013c 	.word	0x2000013c

0800ebdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	6039      	str	r1, [r7, #0]
 800ebe6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ebe8:	79fb      	ldrb	r3, [r7, #7]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d105      	bne.n	800ebfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	4907      	ldr	r1, [pc, #28]	; (800ec10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebf2:	4808      	ldr	r0, [pc, #32]	; (800ec14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebf4:	f7fc fc7b 	bl	800b4ee <USBD_GetString>
 800ebf8:	e004      	b.n	800ec04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	4904      	ldr	r1, [pc, #16]	; (800ec10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebfe:	4805      	ldr	r0, [pc, #20]	; (800ec14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec00:	f7fc fc75 	bl	800b4ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec04:	4b02      	ldr	r3, [pc, #8]	; (800ec10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3708      	adds	r7, #8
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	20002ec8 	.word	0x20002ec8
 800ec14:	08013c38 	.word	0x08013c38

0800ec18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	4603      	mov	r3, r0
 800ec20:	6039      	str	r1, [r7, #0]
 800ec22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec24:	79fb      	ldrb	r3, [r7, #7]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d105      	bne.n	800ec36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec2a:	683a      	ldr	r2, [r7, #0]
 800ec2c:	4907      	ldr	r1, [pc, #28]	; (800ec4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec2e:	4808      	ldr	r0, [pc, #32]	; (800ec50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec30:	f7fc fc5d 	bl	800b4ee <USBD_GetString>
 800ec34:	e004      	b.n	800ec40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec36:	683a      	ldr	r2, [r7, #0]
 800ec38:	4904      	ldr	r1, [pc, #16]	; (800ec4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec3a:	4805      	ldr	r0, [pc, #20]	; (800ec50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec3c:	f7fc fc57 	bl	800b4ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec40:	4b02      	ldr	r3, [pc, #8]	; (800ec4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	20002ec8 	.word	0x20002ec8
 800ec50:	08013c48 	.word	0x08013c48

0800ec54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec5a:	4b0f      	ldr	r3, [pc, #60]	; (800ec98 <Get_SerialNum+0x44>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec60:	4b0e      	ldr	r3, [pc, #56]	; (800ec9c <Get_SerialNum+0x48>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec66:	4b0e      	ldr	r3, [pc, #56]	; (800eca0 <Get_SerialNum+0x4c>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	4413      	add	r3, r2
 800ec72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d009      	beq.n	800ec8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec7a:	2208      	movs	r2, #8
 800ec7c:	4909      	ldr	r1, [pc, #36]	; (800eca4 <Get_SerialNum+0x50>)
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f000 f814 	bl	800ecac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec84:	2204      	movs	r2, #4
 800ec86:	4908      	ldr	r1, [pc, #32]	; (800eca8 <Get_SerialNum+0x54>)
 800ec88:	68b8      	ldr	r0, [r7, #8]
 800ec8a:	f000 f80f 	bl	800ecac <IntToUnicode>
  }
}
 800ec8e:	bf00      	nop
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	1fff7a10 	.word	0x1fff7a10
 800ec9c:	1fff7a14 	.word	0x1fff7a14
 800eca0:	1fff7a18 	.word	0x1fff7a18
 800eca4:	2000013e 	.word	0x2000013e
 800eca8:	2000014e 	.word	0x2000014e

0800ecac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b087      	sub	sp, #28
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	4613      	mov	r3, r2
 800ecb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	75fb      	strb	r3, [r7, #23]
 800ecc2:	e027      	b.n	800ed14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	0f1b      	lsrs	r3, r3, #28
 800ecc8:	2b09      	cmp	r3, #9
 800ecca:	d80b      	bhi.n	800ece4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	0f1b      	lsrs	r3, r3, #28
 800ecd0:	b2da      	uxtb	r2, r3
 800ecd2:	7dfb      	ldrb	r3, [r7, #23]
 800ecd4:	005b      	lsls	r3, r3, #1
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	440b      	add	r3, r1
 800ecdc:	3230      	adds	r2, #48	; 0x30
 800ecde:	b2d2      	uxtb	r2, r2
 800ece0:	701a      	strb	r2, [r3, #0]
 800ece2:	e00a      	b.n	800ecfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	0f1b      	lsrs	r3, r3, #28
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
 800ecec:	005b      	lsls	r3, r3, #1
 800ecee:	4619      	mov	r1, r3
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	440b      	add	r3, r1
 800ecf4:	3237      	adds	r2, #55	; 0x37
 800ecf6:	b2d2      	uxtb	r2, r2
 800ecf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	011b      	lsls	r3, r3, #4
 800ecfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ed00:	7dfb      	ldrb	r3, [r7, #23]
 800ed02:	005b      	lsls	r3, r3, #1
 800ed04:	3301      	adds	r3, #1
 800ed06:	68ba      	ldr	r2, [r7, #8]
 800ed08:	4413      	add	r3, r2
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed0e:	7dfb      	ldrb	r3, [r7, #23]
 800ed10:	3301      	adds	r3, #1
 800ed12:	75fb      	strb	r3, [r7, #23]
 800ed14:	7dfa      	ldrb	r2, [r7, #23]
 800ed16:	79fb      	ldrb	r3, [r7, #7]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d3d3      	bcc.n	800ecc4 <IntToUnicode+0x18>
  }
}
 800ed1c:	bf00      	nop
 800ed1e:	bf00      	nop
 800ed20:	371c      	adds	r7, #28
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr

0800ed2a <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800ed2a:	b480      	push	{r7}
 800ed2c:	b083      	sub	sp, #12
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800ed34:	2300      	movs	r3, #0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
	...

0800ed44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b08a      	sub	sp, #40	; 0x28
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed4c:	f107 0314 	add.w	r3, r7, #20
 800ed50:	2200      	movs	r2, #0
 800ed52:	601a      	str	r2, [r3, #0]
 800ed54:	605a      	str	r2, [r3, #4]
 800ed56:	609a      	str	r2, [r3, #8]
 800ed58:	60da      	str	r2, [r3, #12]
 800ed5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed64:	d13a      	bne.n	800eddc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed66:	2300      	movs	r3, #0
 800ed68:	613b      	str	r3, [r7, #16]
 800ed6a:	4b1e      	ldr	r3, [pc, #120]	; (800ede4 <HAL_PCD_MspInit+0xa0>)
 800ed6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6e:	4a1d      	ldr	r2, [pc, #116]	; (800ede4 <HAL_PCD_MspInit+0xa0>)
 800ed70:	f043 0301 	orr.w	r3, r3, #1
 800ed74:	6313      	str	r3, [r2, #48]	; 0x30
 800ed76:	4b1b      	ldr	r3, [pc, #108]	; (800ede4 <HAL_PCD_MspInit+0xa0>)
 800ed78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed7a:	f003 0301 	and.w	r3, r3, #1
 800ed7e:	613b      	str	r3, [r7, #16]
 800ed80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800ed82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed88:	2302      	movs	r3, #2
 800ed8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed90:	2300      	movs	r3, #0
 800ed92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed94:	230a      	movs	r3, #10
 800ed96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed98:	f107 0314 	add.w	r3, r7, #20
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4812      	ldr	r0, [pc, #72]	; (800ede8 <HAL_PCD_MspInit+0xa4>)
 800eda0:	f7f4 ff08 	bl	8003bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eda4:	4b0f      	ldr	r3, [pc, #60]	; (800ede4 <HAL_PCD_MspInit+0xa0>)
 800eda6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eda8:	4a0e      	ldr	r2, [pc, #56]	; (800ede4 <HAL_PCD_MspInit+0xa0>)
 800edaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edae:	6353      	str	r3, [r2, #52]	; 0x34
 800edb0:	2300      	movs	r3, #0
 800edb2:	60fb      	str	r3, [r7, #12]
 800edb4:	4b0b      	ldr	r3, [pc, #44]	; (800ede4 <HAL_PCD_MspInit+0xa0>)
 800edb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edb8:	4a0a      	ldr	r2, [pc, #40]	; (800ede4 <HAL_PCD_MspInit+0xa0>)
 800edba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800edbe:	6453      	str	r3, [r2, #68]	; 0x44
 800edc0:	4b08      	ldr	r3, [pc, #32]	; (800ede4 <HAL_PCD_MspInit+0xa0>)
 800edc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edc8:	60fb      	str	r3, [r7, #12]
 800edca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800edcc:	2200      	movs	r2, #0
 800edce:	2100      	movs	r1, #0
 800edd0:	2043      	movs	r0, #67	; 0x43
 800edd2:	f7f4 feb8 	bl	8003b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800edd6:	2043      	movs	r0, #67	; 0x43
 800edd8:	f7f4 fed1 	bl	8003b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eddc:	bf00      	nop
 800edde:	3728      	adds	r7, #40	; 0x28
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	40023800 	.word	0x40023800
 800ede8:	40020000 	.word	0x40020000

0800edec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ee00:	4619      	mov	r1, r3
 800ee02:	4610      	mov	r0, r2
 800ee04:	f7fb fb8d 	bl	800a522 <USBD_LL_SetupStage>
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	460b      	mov	r3, r1
 800ee1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ee22:	78fa      	ldrb	r2, [r7, #3]
 800ee24:	6879      	ldr	r1, [r7, #4]
 800ee26:	4613      	mov	r3, r2
 800ee28:	00db      	lsls	r3, r3, #3
 800ee2a:	1a9b      	subs	r3, r3, r2
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	440b      	add	r3, r1
 800ee30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	78fb      	ldrb	r3, [r7, #3]
 800ee38:	4619      	mov	r1, r3
 800ee3a:	f7fb fbc7 	bl	800a5cc <USBD_LL_DataOutStage>
}
 800ee3e:	bf00      	nop
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b082      	sub	sp, #8
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	460b      	mov	r3, r1
 800ee50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ee58:	78fa      	ldrb	r2, [r7, #3]
 800ee5a:	6879      	ldr	r1, [r7, #4]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	00db      	lsls	r3, r3, #3
 800ee60:	1a9b      	subs	r3, r3, r2
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	440b      	add	r3, r1
 800ee66:	3348      	adds	r3, #72	; 0x48
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	78fb      	ldrb	r3, [r7, #3]
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	f7fb fc10 	bl	800a692 <USBD_LL_DataInStage>
}
 800ee72:	bf00      	nop
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}

0800ee7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee7a:	b580      	push	{r7, lr}
 800ee7c:	b082      	sub	sp, #8
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fb fd24 	bl	800a8d6 <USBD_LL_SOF>
}
 800ee8e:	bf00      	nop
 800ee90:	3708      	adds	r7, #8
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b084      	sub	sp, #16
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	68db      	ldr	r3, [r3, #12]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d001      	beq.n	800eeae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eeaa:	f7f2 fc5b 	bl	8001764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eeb4:	7bfa      	ldrb	r2, [r7, #15]
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fb fcce 	bl	800a85a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fb fc7a 	bl	800a7be <USBD_LL_Reset>
}
 800eeca:	bf00      	nop
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
	...

0800eed4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fb fcc9 	bl	800a87a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	6812      	ldr	r2, [r2, #0]
 800eef6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eefa:	f043 0301 	orr.w	r3, r3, #1
 800eefe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6a1b      	ldr	r3, [r3, #32]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d005      	beq.n	800ef14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef08:	4b04      	ldr	r3, [pc, #16]	; (800ef1c <HAL_PCD_SuspendCallback+0x48>)
 800ef0a:	691b      	ldr	r3, [r3, #16]
 800ef0c:	4a03      	ldr	r2, [pc, #12]	; (800ef1c <HAL_PCD_SuspendCallback+0x48>)
 800ef0e:	f043 0306 	orr.w	r3, r3, #6
 800ef12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef14:	bf00      	nop
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	e000ed00 	.word	0xe000ed00

0800ef20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fb fcb9 	bl	800a8a6 <USBD_LL_Resume>
}
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	460b      	mov	r3, r1
 800ef46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef4e:	78fa      	ldrb	r2, [r7, #3]
 800ef50:	4611      	mov	r1, r2
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fb fd07 	bl	800a966 <USBD_LL_IsoOUTIncomplete>
}
 800ef58:	bf00      	nop
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef72:	78fa      	ldrb	r2, [r7, #3]
 800ef74:	4611      	mov	r1, r2
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fb fccf 	bl	800a91a <USBD_LL_IsoINIncomplete>
}
 800ef7c:	bf00      	nop
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fb fd0d 	bl	800a9b2 <USBD_LL_DevConnected>
}
 800ef98:	bf00      	nop
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fb fd0a 	bl	800a9c8 <USBD_LL_DevDisconnected>
}
 800efb4:	bf00      	nop
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d13c      	bne.n	800f046 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800efcc:	4a20      	ldr	r2, [pc, #128]	; (800f050 <USBD_LL_Init+0x94>)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a1e      	ldr	r2, [pc, #120]	; (800f050 <USBD_LL_Init+0x94>)
 800efd8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efdc:	4b1c      	ldr	r3, [pc, #112]	; (800f050 <USBD_LL_Init+0x94>)
 800efde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800efe2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800efe4:	4b1a      	ldr	r3, [pc, #104]	; (800f050 <USBD_LL_Init+0x94>)
 800efe6:	2204      	movs	r2, #4
 800efe8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800efea:	4b19      	ldr	r3, [pc, #100]	; (800f050 <USBD_LL_Init+0x94>)
 800efec:	2202      	movs	r2, #2
 800efee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eff0:	4b17      	ldr	r3, [pc, #92]	; (800f050 <USBD_LL_Init+0x94>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eff6:	4b16      	ldr	r3, [pc, #88]	; (800f050 <USBD_LL_Init+0x94>)
 800eff8:	2202      	movs	r2, #2
 800effa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800effc:	4b14      	ldr	r3, [pc, #80]	; (800f050 <USBD_LL_Init+0x94>)
 800effe:	2200      	movs	r2, #0
 800f000:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f002:	4b13      	ldr	r3, [pc, #76]	; (800f050 <USBD_LL_Init+0x94>)
 800f004:	2200      	movs	r2, #0
 800f006:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f008:	4b11      	ldr	r3, [pc, #68]	; (800f050 <USBD_LL_Init+0x94>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f00e:	4b10      	ldr	r3, [pc, #64]	; (800f050 <USBD_LL_Init+0x94>)
 800f010:	2200      	movs	r2, #0
 800f012:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f014:	4b0e      	ldr	r3, [pc, #56]	; (800f050 <USBD_LL_Init+0x94>)
 800f016:	2200      	movs	r2, #0
 800f018:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f01a:	480d      	ldr	r0, [pc, #52]	; (800f050 <USBD_LL_Init+0x94>)
 800f01c:	f7f5 fd75 	bl	8004b0a <HAL_PCD_Init>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d001      	beq.n	800f02a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f026:	f7f2 fb9d 	bl	8001764 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f02a:	2180      	movs	r1, #128	; 0x80
 800f02c:	4808      	ldr	r0, [pc, #32]	; (800f050 <USBD_LL_Init+0x94>)
 800f02e:	f7f6 fed2 	bl	8005dd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f032:	2240      	movs	r2, #64	; 0x40
 800f034:	2100      	movs	r1, #0
 800f036:	4806      	ldr	r0, [pc, #24]	; (800f050 <USBD_LL_Init+0x94>)
 800f038:	f7f6 fe86 	bl	8005d48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f03c:	2280      	movs	r2, #128	; 0x80
 800f03e:	2101      	movs	r1, #1
 800f040:	4803      	ldr	r0, [pc, #12]	; (800f050 <USBD_LL_Init+0x94>)
 800f042:	f7f6 fe81 	bl	8005d48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	200030c8 	.word	0x200030c8

0800f054 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f05c:	2300      	movs	r3, #0
 800f05e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7f5 fe6a 	bl	8004d44 <HAL_PCD_Start>
 800f070:	4603      	mov	r3, r0
 800f072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f074:	7bfb      	ldrb	r3, [r7, #15]
 800f076:	4618      	mov	r0, r3
 800f078:	f000 f938 	bl	800f2ec <USBD_Get_USB_Status>
 800f07c:	4603      	mov	r3, r0
 800f07e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f080:	7bbb      	ldrb	r3, [r7, #14]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}

0800f08a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b084      	sub	sp, #16
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
 800f092:	4608      	mov	r0, r1
 800f094:	4611      	mov	r1, r2
 800f096:	461a      	mov	r2, r3
 800f098:	4603      	mov	r3, r0
 800f09a:	70fb      	strb	r3, [r7, #3]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70bb      	strb	r3, [r7, #2]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0b2:	78bb      	ldrb	r3, [r7, #2]
 800f0b4:	883a      	ldrh	r2, [r7, #0]
 800f0b6:	78f9      	ldrb	r1, [r7, #3]
 800f0b8:	f7f6 fa4e 	bl	8005558 <HAL_PCD_EP_Open>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0c0:	7bfb      	ldrb	r3, [r7, #15]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 f912 	bl	800f2ec <USBD_Get_USB_Status>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3710      	adds	r7, #16
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0d6:	b580      	push	{r7, lr}
 800f0d8:	b084      	sub	sp, #16
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	460b      	mov	r3, r1
 800f0e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0f0:	78fa      	ldrb	r2, [r7, #3]
 800f0f2:	4611      	mov	r1, r2
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7f6 fa97 	bl	8005628 <HAL_PCD_EP_Close>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0fe:	7bfb      	ldrb	r3, [r7, #15]
 800f100:	4618      	mov	r0, r3
 800f102:	f000 f8f3 	bl	800f2ec <USBD_Get_USB_Status>
 800f106:	4603      	mov	r3, r0
 800f108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f124:	2300      	movs	r3, #0
 800f126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f12e:	78fa      	ldrb	r2, [r7, #3]
 800f130:	4611      	mov	r1, r2
 800f132:	4618      	mov	r0, r3
 800f134:	f7f6 fb6f 	bl	8005816 <HAL_PCD_EP_SetStall>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f13c:	7bfb      	ldrb	r3, [r7, #15]
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 f8d4 	bl	800f2ec <USBD_Get_USB_Status>
 800f144:	4603      	mov	r3, r0
 800f146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f148:	7bbb      	ldrb	r3, [r7, #14]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b084      	sub	sp, #16
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
 800f15a:	460b      	mov	r3, r1
 800f15c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f16c:	78fa      	ldrb	r2, [r7, #3]
 800f16e:	4611      	mov	r1, r2
 800f170:	4618      	mov	r0, r3
 800f172:	f7f6 fbb4 	bl	80058de <HAL_PCD_EP_ClrStall>
 800f176:	4603      	mov	r3, r0
 800f178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f000 f8b5 	bl	800f2ec <USBD_Get_USB_Status>
 800f182:	4603      	mov	r3, r0
 800f184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f186:	7bbb      	ldrb	r3, [r7, #14]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	460b      	mov	r3, r1
 800f19a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	da0b      	bge.n	800f1c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1ac:	78fb      	ldrb	r3, [r7, #3]
 800f1ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1b2:	68f9      	ldr	r1, [r7, #12]
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	00db      	lsls	r3, r3, #3
 800f1b8:	1a9b      	subs	r3, r3, r2
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	440b      	add	r3, r1
 800f1be:	333e      	adds	r3, #62	; 0x3e
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	e00b      	b.n	800f1dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f1c4:	78fb      	ldrb	r3, [r7, #3]
 800f1c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1ca:	68f9      	ldr	r1, [r7, #12]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	00db      	lsls	r3, r3, #3
 800f1d0:	1a9b      	subs	r3, r3, r2
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	440b      	add	r3, r1
 800f1d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3714      	adds	r7, #20
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f202:	78fa      	ldrb	r2, [r7, #3]
 800f204:	4611      	mov	r1, r2
 800f206:	4618      	mov	r0, r3
 800f208:	f7f6 f981 	bl	800550e <HAL_PCD_SetAddress>
 800f20c:	4603      	mov	r3, r0
 800f20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f210:	7bfb      	ldrb	r3, [r7, #15]
 800f212:	4618      	mov	r0, r3
 800f214:	f000 f86a 	bl	800f2ec <USBD_Get_USB_Status>
 800f218:	4603      	mov	r3, r0
 800f21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b086      	sub	sp, #24
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	60f8      	str	r0, [r7, #12]
 800f22e:	607a      	str	r2, [r7, #4]
 800f230:	603b      	str	r3, [r7, #0]
 800f232:	460b      	mov	r3, r1
 800f234:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f236:	2300      	movs	r3, #0
 800f238:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f23a:	2300      	movs	r3, #0
 800f23c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f244:	7af9      	ldrb	r1, [r7, #11]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	f7f6 fa9a 	bl	8005782 <HAL_PCD_EP_Transmit>
 800f24e:	4603      	mov	r3, r0
 800f250:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f252:	7dfb      	ldrb	r3, [r7, #23]
 800f254:	4618      	mov	r0, r3
 800f256:	f000 f849 	bl	800f2ec <USBD_Get_USB_Status>
 800f25a:	4603      	mov	r3, r0
 800f25c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f25e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3718      	adds	r7, #24
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	607a      	str	r2, [r7, #4]
 800f272:	603b      	str	r3, [r7, #0]
 800f274:	460b      	mov	r3, r1
 800f276:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f278:	2300      	movs	r3, #0
 800f27a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f27c:	2300      	movs	r3, #0
 800f27e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f286:	7af9      	ldrb	r1, [r7, #11]
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	f7f6 fa16 	bl	80056bc <HAL_PCD_EP_Receive>
 800f290:	4603      	mov	r3, r0
 800f292:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f294:	7dfb      	ldrb	r3, [r7, #23]
 800f296:	4618      	mov	r0, r3
 800f298:	f000 f828 	bl	800f2ec <USBD_Get_USB_Status>
 800f29c:	4603      	mov	r3, r0
 800f29e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3718      	adds	r7, #24
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}

0800f2aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b082      	sub	sp, #8
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2bc:	78fa      	ldrb	r2, [r7, #3]
 800f2be:	4611      	mov	r1, r2
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7f6 fa46 	bl	8005752 <HAL_PCD_EP_GetRxCount>
 800f2c6:	4603      	mov	r3, r0
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f2d8:	4b03      	ldr	r3, [pc, #12]	; (800f2e8 <USBD_static_malloc+0x18>)
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	370c      	adds	r7, #12
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop
 800f2e8:	200009a4 	.word	0x200009a4

0800f2ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b085      	sub	sp, #20
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2fa:	79fb      	ldrb	r3, [r7, #7]
 800f2fc:	2b03      	cmp	r3, #3
 800f2fe:	d817      	bhi.n	800f330 <USBD_Get_USB_Status+0x44>
 800f300:	a201      	add	r2, pc, #4	; (adr r2, 800f308 <USBD_Get_USB_Status+0x1c>)
 800f302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f306:	bf00      	nop
 800f308:	0800f319 	.word	0x0800f319
 800f30c:	0800f31f 	.word	0x0800f31f
 800f310:	0800f325 	.word	0x0800f325
 800f314:	0800f32b 	.word	0x0800f32b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f318:	2300      	movs	r3, #0
 800f31a:	73fb      	strb	r3, [r7, #15]
    break;
 800f31c:	e00b      	b.n	800f336 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f31e:	2303      	movs	r3, #3
 800f320:	73fb      	strb	r3, [r7, #15]
    break;
 800f322:	e008      	b.n	800f336 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f324:	2301      	movs	r3, #1
 800f326:	73fb      	strb	r3, [r7, #15]
    break;
 800f328:	e005      	b.n	800f336 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f32a:	2303      	movs	r3, #3
 800f32c:	73fb      	strb	r3, [r7, #15]
    break;
 800f32e:	e002      	b.n	800f336 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f330:	2303      	movs	r3, #3
 800f332:	73fb      	strb	r3, [r7, #15]
    break;
 800f334:	bf00      	nop
  }
  return usb_status;
 800f336:	7bfb      	ldrb	r3, [r7, #15]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3714      	adds	r7, #20
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d002      	beq.n	800f35a <case_insensitive_strcmp+0x16>
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e056      	b.n	800f40c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	429a      	cmp	r2, r3
 800f364:	d10d      	bne.n	800f382 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800f366:	2300      	movs	r3, #0
 800f368:	e050      	b.n	800f40c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d101      	bne.n	800f376 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800f372:	2300      	movs	r3, #0
 800f374:	e04a      	b.n	800f40c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	3301      	adds	r3, #1
 800f37a:	607b      	str	r3, [r7, #4]
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	3301      	adds	r3, #1
 800f380:	603b      	str	r3, [r7, #0]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	73fb      	strb	r3, [r7, #15]
 800f388:	7bfb      	ldrb	r3, [r7, #15]
 800f38a:	3301      	adds	r3, #1
 800f38c:	4a22      	ldr	r2, [pc, #136]	; (800f418 <case_insensitive_strcmp+0xd4>)
 800f38e:	4413      	add	r3, r2
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	f003 0303 	and.w	r3, r3, #3
 800f396:	2b01      	cmp	r3, #1
 800f398:	d103      	bne.n	800f3a2 <case_insensitive_strcmp+0x5e>
 800f39a:	7bfb      	ldrb	r3, [r7, #15]
 800f39c:	f103 0220 	add.w	r2, r3, #32
 800f3a0:	e000      	b.n	800f3a4 <case_insensitive_strcmp+0x60>
 800f3a2:	7bfa      	ldrb	r2, [r7, #15]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	73bb      	strb	r3, [r7, #14]
 800f3aa:	7bbb      	ldrb	r3, [r7, #14]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	491a      	ldr	r1, [pc, #104]	; (800f418 <case_insensitive_strcmp+0xd4>)
 800f3b0:	440b      	add	r3, r1
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	f003 0303 	and.w	r3, r3, #3
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d102      	bne.n	800f3c2 <case_insensitive_strcmp+0x7e>
 800f3bc:	7bbb      	ldrb	r3, [r7, #14]
 800f3be:	3320      	adds	r3, #32
 800f3c0:	e000      	b.n	800f3c4 <case_insensitive_strcmp+0x80>
 800f3c2:	7bbb      	ldrb	r3, [r7, #14]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d0d0      	beq.n	800f36a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	737b      	strb	r3, [r7, #13]
 800f3ce:	7b7b      	ldrb	r3, [r7, #13]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	4a11      	ldr	r2, [pc, #68]	; (800f418 <case_insensitive_strcmp+0xd4>)
 800f3d4:	4413      	add	r3, r2
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	f003 0303 	and.w	r3, r3, #3
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d103      	bne.n	800f3e8 <case_insensitive_strcmp+0xa4>
 800f3e0:	7b7b      	ldrb	r3, [r7, #13]
 800f3e2:	f103 0220 	add.w	r2, r3, #32
 800f3e6:	e000      	b.n	800f3ea <case_insensitive_strcmp+0xa6>
 800f3e8:	7b7a      	ldrb	r2, [r7, #13]
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	733b      	strb	r3, [r7, #12]
 800f3f0:	7b3b      	ldrb	r3, [r7, #12]
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	4908      	ldr	r1, [pc, #32]	; (800f418 <case_insensitive_strcmp+0xd4>)
 800f3f6:	440b      	add	r3, r1
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	f003 0303 	and.w	r3, r3, #3
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d102      	bne.n	800f408 <case_insensitive_strcmp+0xc4>
 800f402:	7b3b      	ldrb	r3, [r7, #12]
 800f404:	3320      	adds	r3, #32
 800f406:	e000      	b.n	800f40a <case_insensitive_strcmp+0xc6>
 800f408:	7b3b      	ldrb	r3, [r7, #12]
 800f40a:	1ad3      	subs	r3, r2, r3
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3714      	adds	r7, #20
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr
 800f418:	08015b10 	.word	0x08015b10

0800f41c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2028      	movs	r0, #40	; 0x28
 800f42a:	4798      	blx	r3
 800f42c:	60f8      	str	r0, [r7, #12]
    if (node)
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d004      	beq.n	800f43e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800f434:	2228      	movs	r2, #40	; 0x28
 800f436:	2100      	movs	r1, #0
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f001 f85d 	bl	80104f8 <memset>
    }

    return node;
 800f43e:	68fb      	ldr	r3, [r7, #12]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800f450:	2300      	movs	r3, #0
 800f452:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800f454:	e037      	b.n	800f4c6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f464:	2b00      	cmp	r3, #0
 800f466:	d108      	bne.n	800f47a <cJSON_Delete+0x32>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	689b      	ldr	r3, [r3, #8]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d004      	beq.n	800f47a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff ffe7 	bl	800f448 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f482:	2b00      	cmp	r3, #0
 800f484:	d109      	bne.n	800f49a <cJSON_Delete+0x52>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d005      	beq.n	800f49a <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800f48e:	4b12      	ldr	r3, [pc, #72]	; (800f4d8 <cJSON_Delete+0x90>)
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	6912      	ldr	r2, [r2, #16]
 800f496:	4610      	mov	r0, r2
 800f498:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d109      	bne.n	800f4ba <cJSON_Delete+0x72>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6a1b      	ldr	r3, [r3, #32]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d005      	beq.n	800f4ba <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800f4ae:	4b0a      	ldr	r3, [pc, #40]	; (800f4d8 <cJSON_Delete+0x90>)
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	6a12      	ldr	r2, [r2, #32]
 800f4b6:	4610      	mov	r0, r2
 800f4b8:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800f4ba:	4b07      	ldr	r3, [pc, #28]	; (800f4d8 <cJSON_Delete+0x90>)
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	4798      	blx	r3
        item = next;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1c4      	bne.n	800f456 <cJSON_Delete+0xe>
    }
}
 800f4cc:	bf00      	nop
 800f4ce:	bf00      	nop
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	2000015c 	.word	0x2000015c

0800f4dc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800f4e0:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	0000      	movs	r0, r0
	...

0800f4f0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b098      	sub	sp, #96	; 0x60
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
    double number = 0;
 800f4fa:	f04f 0200 	mov.w	r2, #0
 800f4fe:	f04f 0300 	mov.w	r3, #0
 800f502:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800f506:	2300      	movs	r3, #0
 800f508:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800f50a:	f7ff ffe7 	bl	800f4dc <get_decimal_point>
 800f50e:	4603      	mov	r3, r0
 800f510:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800f514:	2300      	movs	r3, #0
 800f516:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d003      	beq.n	800f526 <parse_number+0x36>
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d101      	bne.n	800f52a <parse_number+0x3a>
    {
        return false;
 800f526:	2300      	movs	r3, #0
 800f528:	e0c6      	b.n	800f6b8 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f52a:	2300      	movs	r3, #0
 800f52c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f52e:	e063      	b.n	800f5f8 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	6899      	ldr	r1, [r3, #8]
 800f538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f53a:	440b      	add	r3, r1
 800f53c:	4413      	add	r3, r2
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	2b45      	cmp	r3, #69	; 0x45
 800f542:	dc3d      	bgt.n	800f5c0 <parse_number+0xd0>
 800f544:	2b2b      	cmp	r3, #43	; 0x2b
 800f546:	db66      	blt.n	800f616 <parse_number+0x126>
 800f548:	3b2b      	subs	r3, #43	; 0x2b
 800f54a:	2b1a      	cmp	r3, #26
 800f54c:	d863      	bhi.n	800f616 <parse_number+0x126>
 800f54e:	a201      	add	r2, pc, #4	; (adr r2, 800f554 <parse_number+0x64>)
 800f550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f554:	0800f5c5 	.word	0x0800f5c5
 800f558:	0800f617 	.word	0x0800f617
 800f55c:	0800f5c5 	.word	0x0800f5c5
 800f560:	0800f5e3 	.word	0x0800f5e3
 800f564:	0800f617 	.word	0x0800f617
 800f568:	0800f5c5 	.word	0x0800f5c5
 800f56c:	0800f5c5 	.word	0x0800f5c5
 800f570:	0800f5c5 	.word	0x0800f5c5
 800f574:	0800f5c5 	.word	0x0800f5c5
 800f578:	0800f5c5 	.word	0x0800f5c5
 800f57c:	0800f5c5 	.word	0x0800f5c5
 800f580:	0800f5c5 	.word	0x0800f5c5
 800f584:	0800f5c5 	.word	0x0800f5c5
 800f588:	0800f5c5 	.word	0x0800f5c5
 800f58c:	0800f5c5 	.word	0x0800f5c5
 800f590:	0800f617 	.word	0x0800f617
 800f594:	0800f617 	.word	0x0800f617
 800f598:	0800f617 	.word	0x0800f617
 800f59c:	0800f617 	.word	0x0800f617
 800f5a0:	0800f617 	.word	0x0800f617
 800f5a4:	0800f617 	.word	0x0800f617
 800f5a8:	0800f617 	.word	0x0800f617
 800f5ac:	0800f617 	.word	0x0800f617
 800f5b0:	0800f617 	.word	0x0800f617
 800f5b4:	0800f617 	.word	0x0800f617
 800f5b8:	0800f617 	.word	0x0800f617
 800f5bc:	0800f5c5 	.word	0x0800f5c5
 800f5c0:	2b65      	cmp	r3, #101	; 0x65
 800f5c2:	d128      	bne.n	800f616 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	6899      	ldr	r1, [r3, #8]
 800f5cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5ce:	440b      	add	r3, r1
 800f5d0:	4413      	add	r3, r2
 800f5d2:	7819      	ldrb	r1, [r3, #0]
 800f5d4:	f107 0208 	add.w	r2, r7, #8
 800f5d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5da:	4413      	add	r3, r2
 800f5dc:	460a      	mov	r2, r1
 800f5de:	701a      	strb	r2, [r3, #0]
                break;
 800f5e0:	e007      	b.n	800f5f2 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800f5e2:	f107 0208 	add.w	r2, r7, #8
 800f5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5e8:	4413      	add	r3, r2
 800f5ea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800f5ee:	701a      	strb	r2, [r3, #0]
                break;
 800f5f0:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800f5f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f5f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5fa:	2b3e      	cmp	r3, #62	; 0x3e
 800f5fc:	d80d      	bhi.n	800f61a <parse_number+0x12a>
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00a      	beq.n	800f61a <parse_number+0x12a>
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	689a      	ldr	r2, [r3, #8]
 800f608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f60a:	441a      	add	r2, r3
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	429a      	cmp	r2, r3
 800f612:	d38d      	bcc.n	800f530 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800f614:	e001      	b.n	800f61a <parse_number+0x12a>
                goto loop_end;
 800f616:	bf00      	nop
 800f618:	e000      	b.n	800f61c <parse_number+0x12c>
loop_end:
 800f61a:	bf00      	nop
    number_c_string[i] = '\0';
 800f61c:	f107 0208 	add.w	r2, r7, #8
 800f620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f622:	4413      	add	r3, r2
 800f624:	2200      	movs	r2, #0
 800f626:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800f628:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f62c:	f107 0308 	add.w	r3, r7, #8
 800f630:	4611      	mov	r1, r2
 800f632:	4618      	mov	r0, r3
 800f634:	f002 f8f2 	bl	801181c <strtod>
 800f638:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800f63c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f63e:	f107 0308 	add.w	r3, r7, #8
 800f642:	429a      	cmp	r2, r3
 800f644:	d101      	bne.n	800f64a <parse_number+0x15a>
    {
        return false; /* parse_error */
 800f646:	2300      	movs	r3, #0
 800f648:	e036      	b.n	800f6b8 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800f64a:	6879      	ldr	r1, [r7, #4]
 800f64c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f650:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800f654:	a31b      	add	r3, pc, #108	; (adr r3, 800f6c4 <parse_number+0x1d4>)
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f65e:	f7f1 fa69 	bl	8000b34 <__aeabi_dcmpge>
 800f662:	4603      	mov	r3, r0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d004      	beq.n	800f672 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f66e:	615a      	str	r2, [r3, #20]
 800f670:	e015      	b.n	800f69e <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800f672:	f04f 0200 	mov.w	r2, #0
 800f676:	4b12      	ldr	r3, [pc, #72]	; (800f6c0 <parse_number+0x1d0>)
 800f678:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f67c:	f7f1 fa50 	bl	8000b20 <__aeabi_dcmple>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d004      	beq.n	800f690 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f68c:	615a      	str	r2, [r3, #20]
 800f68e:	e006      	b.n	800f69e <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 800f690:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f694:	f7f1 fa62 	bl	8000b5c <__aeabi_d2iz>
 800f698:	4602      	mov	r2, r0
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2208      	movs	r2, #8
 800f6a2:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f6aa:	f107 0208 	add.w	r2, r7, #8
 800f6ae:	1a8a      	subs	r2, r1, r2
 800f6b0:	441a      	add	r2, r3
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	609a      	str	r2, [r3, #8]
    return true;
 800f6b6:	2301      	movs	r3, #1
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3760      	adds	r7, #96	; 0x60
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	c1e00000 	.word	0xc1e00000
 800f6c4:	ffc00000 	.word	0xffc00000
 800f6c8:	41dfffff 	.word	0x41dfffff

0800f6cc <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b085      	sub	sp, #20
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800f6dc:	2300      	movs	r3, #0
 800f6de:	60bb      	str	r3, [r7, #8]
 800f6e0:	e04c      	b.n	800f77c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	4413      	add	r3, r2
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	2b2f      	cmp	r3, #47	; 0x2f
 800f6ec:	d90f      	bls.n	800f70e <parse_hex4+0x42>
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	2b39      	cmp	r3, #57	; 0x39
 800f6f8:	d809      	bhi.n	800f70e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	4413      	add	r3, r2
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	461a      	mov	r2, r3
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	4413      	add	r3, r2
 800f708:	3b30      	subs	r3, #48	; 0x30
 800f70a:	60fb      	str	r3, [r7, #12]
 800f70c:	e02d      	b.n	800f76a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	4413      	add	r3, r2
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	2b40      	cmp	r3, #64	; 0x40
 800f718:	d90f      	bls.n	800f73a <parse_hex4+0x6e>
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	4413      	add	r3, r2
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	2b46      	cmp	r3, #70	; 0x46
 800f724:	d809      	bhi.n	800f73a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	4413      	add	r3, r2
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	461a      	mov	r2, r3
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	4413      	add	r3, r2
 800f734:	3b37      	subs	r3, #55	; 0x37
 800f736:	60fb      	str	r3, [r7, #12]
 800f738:	e017      	b.n	800f76a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4413      	add	r3, r2
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	2b60      	cmp	r3, #96	; 0x60
 800f744:	d90f      	bls.n	800f766 <parse_hex4+0x9a>
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	4413      	add	r3, r2
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	2b66      	cmp	r3, #102	; 0x66
 800f750:	d809      	bhi.n	800f766 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	4413      	add	r3, r2
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	461a      	mov	r2, r3
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	4413      	add	r3, r2
 800f760:	3b57      	subs	r3, #87	; 0x57
 800f762:	60fb      	str	r3, [r7, #12]
 800f764:	e001      	b.n	800f76a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800f766:	2300      	movs	r3, #0
 800f768:	e00c      	b.n	800f784 <parse_hex4+0xb8>
        }

        if (i < 3)
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	d802      	bhi.n	800f776 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	011b      	lsls	r3, r3, #4
 800f774:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	3301      	adds	r3, #1
 800f77a:	60bb      	str	r3, [r7, #8]
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	2b03      	cmp	r3, #3
 800f780:	d9af      	bls.n	800f6e2 <parse_hex4+0x16>
        }
    }

    return h;
 800f782:	68fb      	ldr	r3, [r7, #12]
}
 800f784:	4618      	mov	r0, r3
 800f786:	3714      	adds	r7, #20
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b08a      	sub	sp, #40	; 0x28
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800f79c:	2300      	movs	r3, #0
 800f79e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800f7c0:	68ba      	ldr	r2, [r7, #8]
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	1ad3      	subs	r3, r2, r3
 800f7c6:	2b05      	cmp	r3, #5
 800f7c8:	f340 80b7 	ble.w	800f93a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800f7cc:	69bb      	ldr	r3, [r7, #24]
 800f7ce:	3302      	adds	r3, #2
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7ff ff7b 	bl	800f6cc <parse_hex4>
 800f7d6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f7de:	d304      	bcc.n	800f7ea <utf16_literal_to_utf8+0x5a>
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f7e6:	f0c0 80aa 	bcc.w	800f93e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800f7f0:	d337      	bcc.n	800f862 <utf16_literal_to_utf8+0xd2>
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f7f8:	d233      	bcs.n	800f862 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	3306      	adds	r3, #6
 800f7fe:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800f800:	2300      	movs	r3, #0
 800f802:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800f804:	230c      	movs	r3, #12
 800f806:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800f80a:	68ba      	ldr	r2, [r7, #8]
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	1ad3      	subs	r3, r2, r3
 800f810:	2b05      	cmp	r3, #5
 800f812:	f340 8096 	ble.w	800f942 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	2b5c      	cmp	r3, #92	; 0x5c
 800f81c:	f040 8093 	bne.w	800f946 <utf16_literal_to_utf8+0x1b6>
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	3301      	adds	r3, #1
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	2b75      	cmp	r3, #117	; 0x75
 800f828:	f040 808d 	bne.w	800f946 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	3302      	adds	r3, #2
 800f830:	4618      	mov	r0, r3
 800f832:	f7ff ff4b 	bl	800f6cc <parse_hex4>
 800f836:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800f83e:	f0c0 8084 	bcc.w	800f94a <utf16_literal_to_utf8+0x1ba>
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800f848:	d27f      	bcs.n	800f94a <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	029a      	lsls	r2, r3, #10
 800f84e:	4b43      	ldr	r3, [pc, #268]	; (800f95c <utf16_literal_to_utf8+0x1cc>)
 800f850:	4013      	ands	r3, r2
 800f852:	693a      	ldr	r2, [r7, #16]
 800f854:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f858:	4313      	orrs	r3, r2
 800f85a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f85e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800f860:	e004      	b.n	800f86c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800f862:	2306      	movs	r3, #6
 800f864:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800f86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f86e:	2b7f      	cmp	r3, #127	; 0x7f
 800f870:	d803      	bhi.n	800f87a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800f872:	2301      	movs	r3, #1
 800f874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800f878:	e01f      	b.n	800f8ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f880:	d206      	bcs.n	800f890 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800f882:	2302      	movs	r3, #2
 800f884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800f888:	23c0      	movs	r3, #192	; 0xc0
 800f88a:	f887 3020 	strb.w	r3, [r7, #32]
 800f88e:	e014      	b.n	800f8ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800f890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f896:	d206      	bcs.n	800f8a6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800f898:	2303      	movs	r3, #3
 800f89a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800f89e:	23e0      	movs	r3, #224	; 0xe0
 800f8a0:	f887 3020 	strb.w	r3, [r7, #32]
 800f8a4:	e009      	b.n	800f8ba <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800f8ac:	d24f      	bcs.n	800f94e <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800f8ae:	2304      	movs	r3, #4
 800f8b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800f8b4:	23f0      	movs	r3, #240	; 0xf0
 800f8b6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800f8ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f8c4:	e015      	b.n	800f8f2 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800f8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8ce:	b2da      	uxtb	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6819      	ldr	r1, [r3, #0]
 800f8d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f8d8:	440b      	add	r3, r1
 800f8da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f8de:	b2d2      	uxtb	r2, r2
 800f8e0:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e4:	099b      	lsrs	r3, r3, #6
 800f8e6:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800f8e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800f8f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1e5      	bne.n	800f8c6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800f8fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d909      	bls.n	800f916 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800f902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f904:	b2d9      	uxtb	r1, r3
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f90e:	430a      	orrs	r2, r1
 800f910:	b2d2      	uxtb	r2, r2
 800f912:	701a      	strb	r2, [r3, #0]
 800f914:	e007      	b.n	800f926 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800f916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f922:	b2d2      	uxtb	r2, r2
 800f924:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f92e:	441a      	add	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800f934:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f938:	e00b      	b.n	800f952 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800f93a:	bf00      	nop
 800f93c:	e008      	b.n	800f950 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800f93e:	bf00      	nop
 800f940:	e006      	b.n	800f950 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f942:	bf00      	nop
 800f944:	e004      	b.n	800f950 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f946:	bf00      	nop
 800f948:	e002      	b.n	800f950 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800f94a:	bf00      	nop
 800f94c:	e000      	b.n	800f950 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800f94e:	bf00      	nop

fail:
    return 0;
 800f950:	2300      	movs	r3, #0
}
 800f952:	4618      	mov	r0, r3
 800f954:	3728      	adds	r7, #40	; 0x28
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	000ffc00 	.word	0x000ffc00

0800f960 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b08a      	sub	sp, #40	; 0x28
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	3301      	adds	r3, #1
 800f974:	4413      	add	r3, r2
 800f976:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	3301      	adds	r3, #1
 800f982:	4413      	add	r3, r2
 800f984:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800f986:	2300      	movs	r3, #0
 800f988:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800f98a:	2300      	movs	r3, #0
 800f98c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	4413      	add	r3, r2
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	2b22      	cmp	r3, #34	; 0x22
 800f99c:	f040 8102 	bne.w	800fba4 <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800f9a8:	e017      	b.n	800f9da <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800f9aa:	6a3b      	ldr	r3, [r7, #32]
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	2b5c      	cmp	r3, #92	; 0x5c
 800f9b0:	d110      	bne.n	800f9d4 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800f9b2:	6a3b      	ldr	r3, [r7, #32]
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	461a      	mov	r2, r3
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	f080 80f0 	bcs.w	800fba8 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	61bb      	str	r3, [r7, #24]
                input_end++;
 800f9ce:	6a3b      	ldr	r3, [r7, #32]
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800f9d4:	6a3b      	ldr	r3, [r7, #32]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	6a3a      	ldr	r2, [r7, #32]
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d203      	bcs.n	800f9f4 <parse_string+0x94>
 800f9ec:	6a3b      	ldr	r3, [r7, #32]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	2b22      	cmp	r3, #34	; 0x22
 800f9f2:	d1da      	bne.n	800f9aa <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	6a3a      	ldr	r2, [r7, #32]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	f080 80d2 	bcs.w	800fbac <parse_string+0x24c>
 800fa08:	6a3b      	ldr	r3, [r7, #32]
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	2b22      	cmp	r3, #34	; 0x22
 800fa0e:	f040 80cd 	bne.w	800fbac <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	689b      	ldr	r3, [r3, #8]
 800fa1a:	4413      	add	r3, r2
 800fa1c:	6a3a      	ldr	r2, [r7, #32]
 800fa1e:	1ad3      	subs	r3, r2, r3
 800fa20:	461a      	mov	r2, r3
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	1ad3      	subs	r3, r2, r3
 800fa26:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	693a      	ldr	r2, [r7, #16]
 800fa2e:	3201      	adds	r2, #1
 800fa30:	4610      	mov	r0, r2
 800fa32:	4798      	blx	r3
 800fa34:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	f000 80b9 	beq.w	800fbb0 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800fa42:	e093      	b.n	800fb6c <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800fa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	2b5c      	cmp	r3, #92	; 0x5c
 800fa4a:	d008      	beq.n	800fa5e <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800fa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa4e:	1c53      	adds	r3, r2, #1
 800fa50:	627b      	str	r3, [r7, #36]	; 0x24
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	1c59      	adds	r1, r3, #1
 800fa56:	60f9      	str	r1, [r7, #12]
 800fa58:	7812      	ldrb	r2, [r2, #0]
 800fa5a:	701a      	strb	r2, [r3, #0]
 800fa5c:	e086      	b.n	800fb6c <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800fa5e:	2302      	movs	r3, #2
 800fa60:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800fa62:	6a3a      	ldr	r2, [r7, #32]
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	1ad3      	subs	r3, r2, r3
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f340 80a3 	ble.w	800fbb4 <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa70:	3301      	adds	r3, #1
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	2b75      	cmp	r3, #117	; 0x75
 800fa76:	f300 809f 	bgt.w	800fbb8 <parse_string+0x258>
 800fa7a:	2b5c      	cmp	r3, #92	; 0x5c
 800fa7c:	da04      	bge.n	800fa88 <parse_string+0x128>
 800fa7e:	2b22      	cmp	r3, #34	; 0x22
 800fa80:	d05c      	beq.n	800fb3c <parse_string+0x1dc>
 800fa82:	2b2f      	cmp	r3, #47	; 0x2f
 800fa84:	d05a      	beq.n	800fb3c <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800fa86:	e097      	b.n	800fbb8 <parse_string+0x258>
 800fa88:	3b5c      	subs	r3, #92	; 0x5c
 800fa8a:	2b19      	cmp	r3, #25
 800fa8c:	f200 8094 	bhi.w	800fbb8 <parse_string+0x258>
 800fa90:	a201      	add	r2, pc, #4	; (adr r2, 800fa98 <parse_string+0x138>)
 800fa92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa96:	bf00      	nop
 800fa98:	0800fb3d 	.word	0x0800fb3d
 800fa9c:	0800fbb9 	.word	0x0800fbb9
 800faa0:	0800fbb9 	.word	0x0800fbb9
 800faa4:	0800fbb9 	.word	0x0800fbb9
 800faa8:	0800fbb9 	.word	0x0800fbb9
 800faac:	0800fbb9 	.word	0x0800fbb9
 800fab0:	0800fb01 	.word	0x0800fb01
 800fab4:	0800fbb9 	.word	0x0800fbb9
 800fab8:	0800fbb9 	.word	0x0800fbb9
 800fabc:	0800fbb9 	.word	0x0800fbb9
 800fac0:	0800fb0d 	.word	0x0800fb0d
 800fac4:	0800fbb9 	.word	0x0800fbb9
 800fac8:	0800fbb9 	.word	0x0800fbb9
 800facc:	0800fbb9 	.word	0x0800fbb9
 800fad0:	0800fbb9 	.word	0x0800fbb9
 800fad4:	0800fbb9 	.word	0x0800fbb9
 800fad8:	0800fbb9 	.word	0x0800fbb9
 800fadc:	0800fbb9 	.word	0x0800fbb9
 800fae0:	0800fb19 	.word	0x0800fb19
 800fae4:	0800fbb9 	.word	0x0800fbb9
 800fae8:	0800fbb9 	.word	0x0800fbb9
 800faec:	0800fbb9 	.word	0x0800fbb9
 800faf0:	0800fb25 	.word	0x0800fb25
 800faf4:	0800fbb9 	.word	0x0800fbb9
 800faf8:	0800fb31 	.word	0x0800fb31
 800fafc:	0800fb4b 	.word	0x0800fb4b
                    *output_pointer++ = '\b';
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	1c5a      	adds	r2, r3, #1
 800fb04:	60fa      	str	r2, [r7, #12]
 800fb06:	2208      	movs	r2, #8
 800fb08:	701a      	strb	r2, [r3, #0]
                    break;
 800fb0a:	e02b      	b.n	800fb64 <parse_string+0x204>
                    *output_pointer++ = '\f';
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	1c5a      	adds	r2, r3, #1
 800fb10:	60fa      	str	r2, [r7, #12]
 800fb12:	220c      	movs	r2, #12
 800fb14:	701a      	strb	r2, [r3, #0]
                    break;
 800fb16:	e025      	b.n	800fb64 <parse_string+0x204>
                    *output_pointer++ = '\n';
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	1c5a      	adds	r2, r3, #1
 800fb1c:	60fa      	str	r2, [r7, #12]
 800fb1e:	220a      	movs	r2, #10
 800fb20:	701a      	strb	r2, [r3, #0]
                    break;
 800fb22:	e01f      	b.n	800fb64 <parse_string+0x204>
                    *output_pointer++ = '\r';
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	1c5a      	adds	r2, r3, #1
 800fb28:	60fa      	str	r2, [r7, #12]
 800fb2a:	220d      	movs	r2, #13
 800fb2c:	701a      	strb	r2, [r3, #0]
                    break;
 800fb2e:	e019      	b.n	800fb64 <parse_string+0x204>
                    *output_pointer++ = '\t';
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	1c5a      	adds	r2, r3, #1
 800fb34:	60fa      	str	r2, [r7, #12]
 800fb36:	2209      	movs	r2, #9
 800fb38:	701a      	strb	r2, [r3, #0]
                    break;
 800fb3a:	e013      	b.n	800fb64 <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	1c5a      	adds	r2, r3, #1
 800fb40:	60fa      	str	r2, [r7, #12]
 800fb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb44:	7852      	ldrb	r2, [r2, #1]
 800fb46:	701a      	strb	r2, [r3, #0]
                    break;
 800fb48:	e00c      	b.n	800fb64 <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800fb4a:	f107 030c 	add.w	r3, r7, #12
 800fb4e:	461a      	mov	r2, r3
 800fb50:	6a39      	ldr	r1, [r7, #32]
 800fb52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb54:	f7ff fe1c 	bl	800f790 <utf16_literal_to_utf8>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800fb5c:	7dfb      	ldrb	r3, [r7, #23]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d02c      	beq.n	800fbbc <parse_string+0x25c>
                    break;
 800fb62:	bf00      	nop
            }
            input_pointer += sequence_length;
 800fb64:	7dfb      	ldrb	r3, [r7, #23]
 800fb66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb68:	4413      	add	r3, r2
 800fb6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800fb6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb6e:	6a3b      	ldr	r3, [r7, #32]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	f4ff af67 	bcc.w	800fa44 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2210      	movs	r2, #16
 800fb80:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	69fa      	ldr	r2, [r7, #28]
 800fb86:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6a3a      	ldr	r2, [r7, #32]
 800fb8e:	1ad3      	subs	r3, r2, r3
 800fb90:	461a      	mov	r2, r3
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	689b      	ldr	r3, [r3, #8]
 800fb9a:	1c5a      	adds	r2, r3, #1
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	609a      	str	r2, [r3, #8]

    return true;
 800fba0:	2301      	movs	r3, #1
 800fba2:	e01e      	b.n	800fbe2 <parse_string+0x282>
        goto fail;
 800fba4:	bf00      	nop
 800fba6:	e00a      	b.n	800fbbe <parse_string+0x25e>
                    goto fail;
 800fba8:	bf00      	nop
 800fbaa:	e008      	b.n	800fbbe <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800fbac:	bf00      	nop
 800fbae:	e006      	b.n	800fbbe <parse_string+0x25e>
            goto fail; /* allocation failure */
 800fbb0:	bf00      	nop
 800fbb2:	e004      	b.n	800fbbe <parse_string+0x25e>
                goto fail;
 800fbb4:	bf00      	nop
 800fbb6:	e002      	b.n	800fbbe <parse_string+0x25e>
                    goto fail;
 800fbb8:	bf00      	nop
 800fbba:	e000      	b.n	800fbbe <parse_string+0x25e>
                        goto fail;
 800fbbc:	bf00      	nop

fail:
    if (output != NULL)
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d003      	beq.n	800fbcc <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	695b      	ldr	r3, [r3, #20]
 800fbc8:	69f8      	ldr	r0, [r7, #28]
 800fbca:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800fbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d006      	beq.n	800fbe0 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	461a      	mov	r2, r3
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	609a      	str	r2, [r3, #8]
    }

    return false;
 800fbe0:	2300      	movs	r3, #0
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3728      	adds	r7, #40	; 0x28
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop

0800fbec <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d003      	beq.n	800fc02 <buffer_skip_whitespace+0x16>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800fc02:	2300      	movs	r3, #0
 800fc04:	e02c      	b.n	800fc60 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d005      	beq.n	800fc18 <buffer_skip_whitespace+0x2c>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	689a      	ldr	r2, [r3, #8]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d306      	bcc.n	800fc26 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	e021      	b.n	800fc60 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	689b      	ldr	r3, [r3, #8]
 800fc20:	1c5a      	adds	r2, r3, #1
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00d      	beq.n	800fc48 <buffer_skip_whitespace+0x5c>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	689a      	ldr	r2, [r3, #8]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d207      	bcs.n	800fc48 <buffer_skip_whitespace+0x5c>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	4413      	add	r3, r2
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b20      	cmp	r3, #32
 800fc46:	d9e9      	bls.n	800fc1c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	689a      	ldr	r2, [r3, #8]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d104      	bne.n	800fc5e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	1e5a      	subs	r2, r3, #1
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fc5e:	687b      	ldr	r3, [r7, #4]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d007      	beq.n	800fc8a <skip_utf8_bom+0x1e>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d003      	beq.n	800fc8a <skip_utf8_bom+0x1e>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d001      	beq.n	800fc8e <skip_utf8_bom+0x22>
    {
        return NULL;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	e01c      	b.n	800fcc8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d018      	beq.n	800fcc6 <skip_utf8_bom+0x5a>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	689b      	ldr	r3, [r3, #8]
 800fc98:	1d1a      	adds	r2, r3, #4
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	685b      	ldr	r3, [r3, #4]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d211      	bcs.n	800fcc6 <skip_utf8_bom+0x5a>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	4413      	add	r3, r2
 800fcac:	2203      	movs	r2, #3
 800fcae:	4908      	ldr	r1, [pc, #32]	; (800fcd0 <skip_utf8_bom+0x64>)
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f000 ff7a 	bl	8010baa <strncmp>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d104      	bne.n	800fcc6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	1cda      	adds	r2, r3, #3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800fcc6:	687b      	ldr	r3, [r7, #4]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	08013c8c 	.word	0x08013c8c

0800fcd4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d101      	bne.n	800fcea <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800fce6:	2300      	movs	r3, #0
 800fce8:	e00c      	b.n	800fd04 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800fcea:	68f8      	ldr	r0, [r7, #12]
 800fcec:	f7f0 fa82 	bl	80001f4 <strlen>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	6979      	ldr	r1, [r7, #20]
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f000 f805 	bl	800fd0c <cJSON_ParseWithLengthOpts>
 800fd02:	4603      	mov	r3, r0
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3718      	adds	r7, #24
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b08e      	sub	sp, #56	; 0x38
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	60b9      	str	r1, [r7, #8]
 800fd16:	607a      	str	r2, [r7, #4]
 800fd18:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800fd1a:	f107 0318 	add.w	r3, r7, #24
 800fd1e:	2200      	movs	r2, #0
 800fd20:	601a      	str	r2, [r3, #0]
 800fd22:	605a      	str	r2, [r3, #4]
 800fd24:	609a      	str	r2, [r3, #8]
 800fd26:	60da      	str	r2, [r3, #12]
 800fd28:	611a      	str	r2, [r3, #16]
 800fd2a:	615a      	str	r2, [r3, #20]
 800fd2c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800fd32:	4b41      	ldr	r3, [pc, #260]	; (800fe38 <cJSON_ParseWithLengthOpts+0x12c>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800fd38:	4b3f      	ldr	r3, [pc, #252]	; (800fe38 <cJSON_ParseWithLengthOpts+0x12c>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d042      	beq.n	800fdca <cJSON_ParseWithLengthOpts+0xbe>
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d03f      	beq.n	800fdca <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800fd52:	2300      	movs	r3, #0
 800fd54:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800fd56:	4a39      	ldr	r2, [pc, #228]	; (800fe3c <cJSON_ParseWithLengthOpts+0x130>)
 800fd58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd5c:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800fd62:	4836      	ldr	r0, [pc, #216]	; (800fe3c <cJSON_ParseWithLengthOpts+0x130>)
 800fd64:	f7ff fb5a 	bl	800f41c <cJSON_New_Item>
 800fd68:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800fd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d02e      	beq.n	800fdce <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800fd70:	f107 0318 	add.w	r3, r7, #24
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7ff ff79 	bl	800fc6c <skip_utf8_bom>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7ff ff35 	bl	800fbec <buffer_skip_whitespace>
 800fd82:	4603      	mov	r3, r0
 800fd84:	4619      	mov	r1, r3
 800fd86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd88:	f000 f868 	bl	800fe5c <parse_value>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d01f      	beq.n	800fdd2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d00e      	beq.n	800fdb6 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800fd98:	f107 0318 	add.w	r3, r7, #24
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7ff ff25 	bl	800fbec <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800fda2:	6a3a      	ldr	r2, [r7, #32]
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d215      	bcs.n	800fdd6 <cJSON_ParseWithLengthOpts+0xca>
 800fdaa:	69ba      	ldr	r2, [r7, #24]
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	4413      	add	r3, r2
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d10f      	bne.n	800fdd6 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d004      	beq.n	800fdc6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800fdbc:	69ba      	ldr	r2, [r7, #24]
 800fdbe:	6a3b      	ldr	r3, [r7, #32]
 800fdc0:	441a      	add	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	601a      	str	r2, [r3, #0]
    }

    return item;
 800fdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc8:	e031      	b.n	800fe2e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800fdca:	bf00      	nop
 800fdcc:	e004      	b.n	800fdd8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800fdce:	bf00      	nop
 800fdd0:	e002      	b.n	800fdd8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800fdd2:	bf00      	nop
 800fdd4:	e000      	b.n	800fdd8 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800fdd6:	bf00      	nop

fail:
    if (item != NULL)
 800fdd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d002      	beq.n	800fde4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800fdde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fde0:	f7ff fb32 	bl	800f448 <cJSON_Delete>
    }

    if (value != NULL)
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d020      	beq.n	800fe2c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800fdf2:	6a3a      	ldr	r2, [r7, #32]
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d202      	bcs.n	800fe00 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	617b      	str	r3, [r7, #20]
 800fdfe:	e005      	b.n	800fe0c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d002      	beq.n	800fe0c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	3b01      	subs	r3, #1
 800fe0a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d004      	beq.n	800fe1c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800fe12:	693a      	ldr	r2, [r7, #16]
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	441a      	add	r2, r3
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800fe1c:	4b06      	ldr	r3, [pc, #24]	; (800fe38 <cJSON_ParseWithLengthOpts+0x12c>)
 800fe1e:	461a      	mov	r2, r3
 800fe20:	f107 0310 	add.w	r3, r7, #16
 800fe24:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe28:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800fe2c:	2300      	movs	r3, #0
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3738      	adds	r7, #56	; 0x38
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	20002578 	.word	0x20002578
 800fe3c:	2000015c 	.word	0x2000015c

0800fe40 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800fe48:	2200      	movs	r2, #0
 800fe4a:	2100      	movs	r1, #0
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f7ff ff41 	bl	800fcd4 <cJSON_ParseWithOpts>
 800fe52:	4603      	mov	r3, r0
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d003      	beq.n	800fe74 <parse_value+0x18>
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d101      	bne.n	800fe78 <parse_value+0x1c>
    {
        return false; /* no input */
 800fe74:	2300      	movs	r3, #0
 800fe76:	e0d2      	b.n	801001e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d01d      	beq.n	800feba <parse_value+0x5e>
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	1d1a      	adds	r2, r3, #4
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d816      	bhi.n	800feba <parse_value+0x5e>
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	689b      	ldr	r3, [r3, #8]
 800fe94:	4413      	add	r3, r2
 800fe96:	2204      	movs	r2, #4
 800fe98:	4963      	ldr	r1, [pc, #396]	; (8010028 <parse_value+0x1cc>)
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f000 fe85 	bl	8010baa <strncmp>
 800fea0:	4603      	mov	r3, r0
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d109      	bne.n	800feba <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2204      	movs	r2, #4
 800feaa:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	689b      	ldr	r3, [r3, #8]
 800feb0:	1d1a      	adds	r2, r3, #4
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	609a      	str	r2, [r3, #8]
        return true;
 800feb6:	2301      	movs	r3, #1
 800feb8:	e0b1      	b.n	801001e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d01d      	beq.n	800fefc <parse_value+0xa0>
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	689b      	ldr	r3, [r3, #8]
 800fec4:	1d5a      	adds	r2, r3, #5
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d816      	bhi.n	800fefc <parse_value+0xa0>
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	681a      	ldr	r2, [r3, #0]
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	4413      	add	r3, r2
 800fed8:	2205      	movs	r2, #5
 800feda:	4954      	ldr	r1, [pc, #336]	; (801002c <parse_value+0x1d0>)
 800fedc:	4618      	mov	r0, r3
 800fede:	f000 fe64 	bl	8010baa <strncmp>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d109      	bne.n	800fefc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2201      	movs	r2, #1
 800feec:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	689b      	ldr	r3, [r3, #8]
 800fef2:	1d5a      	adds	r2, r3, #5
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	609a      	str	r2, [r3, #8]
        return true;
 800fef8:	2301      	movs	r3, #1
 800fefa:	e090      	b.n	801001e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d020      	beq.n	800ff44 <parse_value+0xe8>
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	1d1a      	adds	r2, r3, #4
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d819      	bhi.n	800ff44 <parse_value+0xe8>
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	689b      	ldr	r3, [r3, #8]
 800ff18:	4413      	add	r3, r2
 800ff1a:	2204      	movs	r2, #4
 800ff1c:	4944      	ldr	r1, [pc, #272]	; (8010030 <parse_value+0x1d4>)
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 fe43 	bl	8010baa <strncmp>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d10c      	bne.n	800ff44 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2202      	movs	r2, #2
 800ff2e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2201      	movs	r2, #1
 800ff34:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	1d1a      	adds	r2, r3, #4
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	609a      	str	r2, [r3, #8]
        return true;
 800ff40:	2301      	movs	r3, #1
 800ff42:	e06c      	b.n	801001e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d013      	beq.n	800ff72 <parse_value+0x116>
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	689a      	ldr	r2, [r3, #8]
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d20d      	bcs.n	800ff72 <parse_value+0x116>
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	4413      	add	r3, r2
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	2b22      	cmp	r3, #34	; 0x22
 800ff64:	d105      	bne.n	800ff72 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800ff66:	6839      	ldr	r1, [r7, #0]
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f7ff fcf9 	bl	800f960 <parse_string>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	e055      	b.n	801001e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d023      	beq.n	800ffc0 <parse_value+0x164>
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	689a      	ldr	r2, [r3, #8]
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d21d      	bcs.n	800ffc0 <parse_value+0x164>
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	2b2d      	cmp	r3, #45	; 0x2d
 800ff92:	d00f      	beq.n	800ffb4 <parse_value+0x158>
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	4413      	add	r3, r2
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	2b2f      	cmp	r3, #47	; 0x2f
 800ffa2:	d90d      	bls.n	800ffc0 <parse_value+0x164>
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	689b      	ldr	r3, [r3, #8]
 800ffac:	4413      	add	r3, r2
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	2b39      	cmp	r3, #57	; 0x39
 800ffb2:	d805      	bhi.n	800ffc0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800ffb4:	6839      	ldr	r1, [r7, #0]
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f7ff fa9a 	bl	800f4f0 <parse_number>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	e02e      	b.n	801001e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d013      	beq.n	800ffee <parse_value+0x192>
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	689a      	ldr	r2, [r3, #8]
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d20d      	bcs.n	800ffee <parse_value+0x192>
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	689b      	ldr	r3, [r3, #8]
 800ffda:	4413      	add	r3, r2
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	2b5b      	cmp	r3, #91	; 0x5b
 800ffe0:	d105      	bne.n	800ffee <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800ffe2:	6839      	ldr	r1, [r7, #0]
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f000 f825 	bl	8010034 <parse_array>
 800ffea:	4603      	mov	r3, r0
 800ffec:	e017      	b.n	801001e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d013      	beq.n	801001c <parse_value+0x1c0>
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	689a      	ldr	r2, [r3, #8]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d20d      	bcs.n	801001c <parse_value+0x1c0>
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	4413      	add	r3, r2
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	2b7b      	cmp	r3, #123	; 0x7b
 801000e:	d105      	bne.n	801001c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8010010:	6839      	ldr	r1, [r7, #0]
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 f8d2 	bl	80101bc <parse_object>
 8010018:	4603      	mov	r3, r0
 801001a:	e000      	b.n	801001e <parse_value+0x1c2>
    }

    return false;
 801001c:	2300      	movs	r3, #0
}
 801001e:	4618      	mov	r0, r3
 8010020:	3708      	adds	r7, #8
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	08013c64 	.word	0x08013c64
 801002c:	08013c90 	.word	0x08013c90
 8010030:	08013c98 	.word	0x08013c98

08010034 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b086      	sub	sp, #24
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 801003e:	2300      	movs	r3, #0
 8010040:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8010042:	2300      	movs	r3, #0
 8010044:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	68db      	ldr	r3, [r3, #12]
 801004a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801004e:	d301      	bcc.n	8010054 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8010050:	2300      	movs	r3, #0
 8010052:	e0af      	b.n	80101b4 <parse_array+0x180>
    }
    input_buffer->depth++;
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	1c5a      	adds	r2, r3, #1
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	689b      	ldr	r3, [r3, #8]
 8010066:	4413      	add	r3, r2
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	2b5b      	cmp	r3, #91	; 0x5b
 801006c:	f040 8094 	bne.w	8010198 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	1c5a      	adds	r2, r3, #1
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 801007a:	6838      	ldr	r0, [r7, #0]
 801007c:	f7ff fdb6 	bl	800fbec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00d      	beq.n	80100a2 <parse_array+0x6e>
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	689a      	ldr	r2, [r3, #8]
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	429a      	cmp	r2, r3
 8010090:	d207      	bcs.n	80100a2 <parse_array+0x6e>
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	689b      	ldr	r3, [r3, #8]
 801009a:	4413      	add	r3, r2
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	2b5d      	cmp	r3, #93	; 0x5d
 80100a0:	d061      	beq.n	8010166 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d005      	beq.n	80100b4 <parse_array+0x80>
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	689a      	ldr	r2, [r3, #8]
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d305      	bcc.n	80100c0 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	689b      	ldr	r3, [r3, #8]
 80100b8:	1e5a      	subs	r2, r3, #1
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	609a      	str	r2, [r3, #8]
        goto fail;
 80100be:	e072      	b.n	80101a6 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	689b      	ldr	r3, [r3, #8]
 80100c4:	1e5a      	subs	r2, r3, #1
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	3310      	adds	r3, #16
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7ff f9a4 	bl	800f41c <cJSON_New_Item>
 80100d4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d05f      	beq.n	801019c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d104      	bne.n	80100ec <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	617b      	str	r3, [r7, #20]
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	613b      	str	r3, [r7, #16]
 80100ea:	e007      	b.n	80100fc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	68fa      	ldr	r2, [r7, #12]
 80100f0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	693a      	ldr	r2, [r7, #16]
 80100f6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	1c5a      	adds	r2, r3, #1
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8010106:	6838      	ldr	r0, [r7, #0]
 8010108:	f7ff fd70 	bl	800fbec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 801010c:	6839      	ldr	r1, [r7, #0]
 801010e:	6938      	ldr	r0, [r7, #16]
 8010110:	f7ff fea4 	bl	800fe5c <parse_value>
 8010114:	4603      	mov	r3, r0
 8010116:	2b00      	cmp	r3, #0
 8010118:	d042      	beq.n	80101a0 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 801011a:	6838      	ldr	r0, [r7, #0]
 801011c:	f7ff fd66 	bl	800fbec <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00d      	beq.n	8010142 <parse_array+0x10e>
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	689a      	ldr	r2, [r3, #8]
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	429a      	cmp	r2, r3
 8010130:	d207      	bcs.n	8010142 <parse_array+0x10e>
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	4413      	add	r3, r2
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	2b2c      	cmp	r3, #44	; 0x2c
 8010140:	d0c3      	beq.n	80100ca <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d02d      	beq.n	80101a4 <parse_array+0x170>
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	689a      	ldr	r2, [r3, #8]
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	429a      	cmp	r2, r3
 8010152:	d227      	bcs.n	80101a4 <parse_array+0x170>
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	689b      	ldr	r3, [r3, #8]
 801015c:	4413      	add	r3, r2
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	2b5d      	cmp	r3, #93	; 0x5d
 8010162:	d11f      	bne.n	80101a4 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8010164:	e000      	b.n	8010168 <parse_array+0x134>
        goto success;
 8010166:	bf00      	nop
    input_buffer->depth--;
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	1e5a      	subs	r2, r3, #1
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d002      	beq.n	801017e <parse_array+0x14a>
        head->prev = current_item;
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	693a      	ldr	r2, [r7, #16]
 801017c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2220      	movs	r2, #32
 8010182:	60da      	str	r2, [r3, #12]
    item->child = head;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	1c5a      	adds	r2, r3, #1
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	609a      	str	r2, [r3, #8]

    return true;
 8010194:	2301      	movs	r3, #1
 8010196:	e00d      	b.n	80101b4 <parse_array+0x180>
        goto fail;
 8010198:	bf00      	nop
 801019a:	e004      	b.n	80101a6 <parse_array+0x172>
            goto fail; /* allocation failure */
 801019c:	bf00      	nop
 801019e:	e002      	b.n	80101a6 <parse_array+0x172>
            goto fail; /* failed to parse value */
 80101a0:	bf00      	nop
 80101a2:	e000      	b.n	80101a6 <parse_array+0x172>
        goto fail; /* expected end of array */
 80101a4:	bf00      	nop

fail:
    if (head != NULL)
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d002      	beq.n	80101b2 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80101ac:	6978      	ldr	r0, [r7, #20]
 80101ae:	f7ff f94b 	bl	800f448 <cJSON_Delete>
    }

    return false;
 80101b2:	2300      	movs	r3, #0
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3718      	adds	r7, #24
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b086      	sub	sp, #24
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80101c6:	2300      	movs	r3, #0
 80101c8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80101ca:	2300      	movs	r3, #0
 80101cc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80101d6:	d301      	bcc.n	80101dc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80101d8:	2300      	movs	r3, #0
 80101da:	e0ea      	b.n	80103b2 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	1c5a      	adds	r2, r3, #1
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	f000 80d0 	beq.w	801038e <parse_object+0x1d2>
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	689a      	ldr	r2, [r3, #8]
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	f080 80c9 	bcs.w	801038e <parse_object+0x1d2>
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	681a      	ldr	r2, [r3, #0]
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	4413      	add	r3, r2
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	2b7b      	cmp	r3, #123	; 0x7b
 801020a:	f040 80c0 	bne.w	801038e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8010218:	6838      	ldr	r0, [r7, #0]
 801021a:	f7ff fce7 	bl	800fbec <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d00e      	beq.n	8010242 <parse_object+0x86>
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	689a      	ldr	r2, [r3, #8]
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	429a      	cmp	r2, r3
 801022e:	d208      	bcs.n	8010242 <parse_object+0x86>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	689b      	ldr	r3, [r3, #8]
 8010238:	4413      	add	r3, r2
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	2b7d      	cmp	r3, #125	; 0x7d
 801023e:	f000 808d 	beq.w	801035c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d005      	beq.n	8010254 <parse_object+0x98>
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	689a      	ldr	r2, [r3, #8]
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	429a      	cmp	r2, r3
 8010252:	d305      	bcc.n	8010260 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	689b      	ldr	r3, [r3, #8]
 8010258:	1e5a      	subs	r2, r3, #1
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	609a      	str	r2, [r3, #8]
        goto fail;
 801025e:	e0a1      	b.n	80103a4 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	689b      	ldr	r3, [r3, #8]
 8010264:	1e5a      	subs	r2, r3, #1
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	3310      	adds	r3, #16
 801026e:	4618      	mov	r0, r3
 8010270:	f7ff f8d4 	bl	800f41c <cJSON_New_Item>
 8010274:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	f000 808a 	beq.w	8010392 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d104      	bne.n	801028e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	617b      	str	r3, [r7, #20]
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	613b      	str	r3, [r7, #16]
 801028c:	e007      	b.n	801029e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	693a      	ldr	r2, [r7, #16]
 8010298:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	689b      	ldr	r3, [r3, #8]
 80102a2:	1c5a      	adds	r2, r3, #1
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80102a8:	6838      	ldr	r0, [r7, #0]
 80102aa:	f7ff fc9f 	bl	800fbec <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80102ae:	6839      	ldr	r1, [r7, #0]
 80102b0:	6938      	ldr	r0, [r7, #16]
 80102b2:	f7ff fb55 	bl	800f960 <parse_string>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d06c      	beq.n	8010396 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80102bc:	6838      	ldr	r0, [r7, #0]
 80102be:	f7ff fc95 	bl	800fbec <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	691a      	ldr	r2, [r3, #16]
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	2200      	movs	r2, #0
 80102ce:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d061      	beq.n	801039a <parse_object+0x1de>
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	689a      	ldr	r2, [r3, #8]
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d25b      	bcs.n	801039a <parse_object+0x1de>
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	4413      	add	r3, r2
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	2b3a      	cmp	r3, #58	; 0x3a
 80102f0:	d153      	bne.n	801039a <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	1c5a      	adds	r2, r3, #1
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80102fc:	6838      	ldr	r0, [r7, #0]
 80102fe:	f7ff fc75 	bl	800fbec <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8010302:	6839      	ldr	r1, [r7, #0]
 8010304:	6938      	ldr	r0, [r7, #16]
 8010306:	f7ff fda9 	bl	800fe5c <parse_value>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d046      	beq.n	801039e <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8010310:	6838      	ldr	r0, [r7, #0]
 8010312:	f7ff fc6b 	bl	800fbec <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00d      	beq.n	8010338 <parse_object+0x17c>
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	689a      	ldr	r2, [r3, #8]
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	429a      	cmp	r2, r3
 8010326:	d207      	bcs.n	8010338 <parse_object+0x17c>
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	4413      	add	r3, r2
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	2b2c      	cmp	r3, #44	; 0x2c
 8010336:	d098      	beq.n	801026a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d031      	beq.n	80103a2 <parse_object+0x1e6>
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	689a      	ldr	r2, [r3, #8]
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	429a      	cmp	r2, r3
 8010348:	d22b      	bcs.n	80103a2 <parse_object+0x1e6>
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	689b      	ldr	r3, [r3, #8]
 8010352:	4413      	add	r3, r2
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	2b7d      	cmp	r3, #125	; 0x7d
 8010358:	d123      	bne.n	80103a2 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 801035a:	e000      	b.n	801035e <parse_object+0x1a2>
        goto success; /* empty object */
 801035c:	bf00      	nop
    input_buffer->depth--;
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	1e5a      	subs	r2, r3, #1
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d002      	beq.n	8010374 <parse_object+0x1b8>
        head->prev = current_item;
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	693a      	ldr	r2, [r7, #16]
 8010372:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2240      	movs	r2, #64	; 0x40
 8010378:	60da      	str	r2, [r3, #12]
    item->child = head;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	697a      	ldr	r2, [r7, #20]
 801037e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	1c5a      	adds	r2, r3, #1
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	609a      	str	r2, [r3, #8]
    return true;
 801038a:	2301      	movs	r3, #1
 801038c:	e011      	b.n	80103b2 <parse_object+0x1f6>
        goto fail; /* not an object */
 801038e:	bf00      	nop
 8010390:	e008      	b.n	80103a4 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8010392:	bf00      	nop
 8010394:	e006      	b.n	80103a4 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8010396:	bf00      	nop
 8010398:	e004      	b.n	80103a4 <parse_object+0x1e8>
            goto fail; /* invalid object */
 801039a:	bf00      	nop
 801039c:	e002      	b.n	80103a4 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 801039e:	bf00      	nop
 80103a0:	e000      	b.n	80103a4 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 80103a2:	bf00      	nop

fail:
    if (head != NULL)
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d002      	beq.n	80103b0 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 80103aa:	6978      	ldr	r0, [r7, #20]
 80103ac:	f7ff f84c 	bl	800f448 <cJSON_Delete>
    }

    return false;
 80103b0:	2300      	movs	r3, #0
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3718      	adds	r7, #24
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b086      	sub	sp, #24
 80103be:	af00      	add	r7, sp, #0
 80103c0:	60f8      	str	r0, [r7, #12]
 80103c2:	60b9      	str	r1, [r7, #8]
 80103c4:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80103c6:	2300      	movs	r3, #0
 80103c8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d002      	beq.n	80103d6 <get_object_item+0x1c>
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d101      	bne.n	80103da <get_object_item+0x20>
    {
        return NULL;
 80103d6:	2300      	movs	r3, #0
 80103d8:	e033      	b.n	8010442 <get_object_item+0x88>
    }

    current_element = object->child;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	689b      	ldr	r3, [r3, #8]
 80103de:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d017      	beq.n	8010416 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80103e6:	e002      	b.n	80103ee <get_object_item+0x34>
        {
            current_element = current_element->next;
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d01c      	beq.n	801042e <get_object_item+0x74>
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	6a1b      	ldr	r3, [r3, #32]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d018      	beq.n	801042e <get_object_item+0x74>
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	6a1b      	ldr	r3, [r3, #32]
 8010400:	4619      	mov	r1, r3
 8010402:	68b8      	ldr	r0, [r7, #8]
 8010404:	f7ef feec 	bl	80001e0 <strcmp>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d1ec      	bne.n	80103e8 <get_object_item+0x2e>
 801040e:	e00e      	b.n	801042e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d008      	beq.n	801042e <get_object_item+0x74>
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	6a1b      	ldr	r3, [r3, #32]
 8010420:	4619      	mov	r1, r3
 8010422:	68b8      	ldr	r0, [r7, #8]
 8010424:	f7fe ff8e 	bl	800f344 <case_insensitive_strcmp>
 8010428:	4603      	mov	r3, r0
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1f0      	bne.n	8010410 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d003      	beq.n	801043c <get_object_item+0x82>
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	6a1b      	ldr	r3, [r3, #32]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d101      	bne.n	8010440 <get_object_item+0x86>
        return NULL;
 801043c:	2300      	movs	r3, #0
 801043e:	e000      	b.n	8010442 <get_object_item+0x88>
    }

    return current_element;
 8010440:	697b      	ldr	r3, [r7, #20]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3718      	adds	r7, #24
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b082      	sub	sp, #8
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8010454:	2201      	movs	r2, #1
 8010456:	6839      	ldr	r1, [r7, #0]
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f7ff ffae 	bl	80103ba <get_object_item>
 801045e:	4603      	mov	r3, r0
}
 8010460:	4618      	mov	r0, r3
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}

08010468 <__errno>:
 8010468:	4b01      	ldr	r3, [pc, #4]	; (8010470 <__errno+0x8>)
 801046a:	6818      	ldr	r0, [r3, #0]
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	20000168 	.word	0x20000168

08010474 <__libc_init_array>:
 8010474:	b570      	push	{r4, r5, r6, lr}
 8010476:	4d0d      	ldr	r5, [pc, #52]	; (80104ac <__libc_init_array+0x38>)
 8010478:	4c0d      	ldr	r4, [pc, #52]	; (80104b0 <__libc_init_array+0x3c>)
 801047a:	1b64      	subs	r4, r4, r5
 801047c:	10a4      	asrs	r4, r4, #2
 801047e:	2600      	movs	r6, #0
 8010480:	42a6      	cmp	r6, r4
 8010482:	d109      	bne.n	8010498 <__libc_init_array+0x24>
 8010484:	4d0b      	ldr	r5, [pc, #44]	; (80104b4 <__libc_init_array+0x40>)
 8010486:	4c0c      	ldr	r4, [pc, #48]	; (80104b8 <__libc_init_array+0x44>)
 8010488:	f003 fa98 	bl	80139bc <_init>
 801048c:	1b64      	subs	r4, r4, r5
 801048e:	10a4      	asrs	r4, r4, #2
 8010490:	2600      	movs	r6, #0
 8010492:	42a6      	cmp	r6, r4
 8010494:	d105      	bne.n	80104a2 <__libc_init_array+0x2e>
 8010496:	bd70      	pop	{r4, r5, r6, pc}
 8010498:	f855 3b04 	ldr.w	r3, [r5], #4
 801049c:	4798      	blx	r3
 801049e:	3601      	adds	r6, #1
 80104a0:	e7ee      	b.n	8010480 <__libc_init_array+0xc>
 80104a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80104a6:	4798      	blx	r3
 80104a8:	3601      	adds	r6, #1
 80104aa:	e7f2      	b.n	8010492 <__libc_init_array+0x1e>
 80104ac:	08015f54 	.word	0x08015f54
 80104b0:	08015f54 	.word	0x08015f54
 80104b4:	08015f54 	.word	0x08015f54
 80104b8:	08015f58 	.word	0x08015f58

080104bc <malloc>:
 80104bc:	4b02      	ldr	r3, [pc, #8]	; (80104c8 <malloc+0xc>)
 80104be:	4601      	mov	r1, r0
 80104c0:	6818      	ldr	r0, [r3, #0]
 80104c2:	f000 b871 	b.w	80105a8 <_malloc_r>
 80104c6:	bf00      	nop
 80104c8:	20000168 	.word	0x20000168

080104cc <free>:
 80104cc:	4b02      	ldr	r3, [pc, #8]	; (80104d8 <free+0xc>)
 80104ce:	4601      	mov	r1, r0
 80104d0:	6818      	ldr	r0, [r3, #0]
 80104d2:	f000 b819 	b.w	8010508 <_free_r>
 80104d6:	bf00      	nop
 80104d8:	20000168 	.word	0x20000168

080104dc <memcpy>:
 80104dc:	440a      	add	r2, r1
 80104de:	4291      	cmp	r1, r2
 80104e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80104e4:	d100      	bne.n	80104e8 <memcpy+0xc>
 80104e6:	4770      	bx	lr
 80104e8:	b510      	push	{r4, lr}
 80104ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80104f2:	4291      	cmp	r1, r2
 80104f4:	d1f9      	bne.n	80104ea <memcpy+0xe>
 80104f6:	bd10      	pop	{r4, pc}

080104f8 <memset>:
 80104f8:	4402      	add	r2, r0
 80104fa:	4603      	mov	r3, r0
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d100      	bne.n	8010502 <memset+0xa>
 8010500:	4770      	bx	lr
 8010502:	f803 1b01 	strb.w	r1, [r3], #1
 8010506:	e7f9      	b.n	80104fc <memset+0x4>

08010508 <_free_r>:
 8010508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801050a:	2900      	cmp	r1, #0
 801050c:	d048      	beq.n	80105a0 <_free_r+0x98>
 801050e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010512:	9001      	str	r0, [sp, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	f1a1 0404 	sub.w	r4, r1, #4
 801051a:	bfb8      	it	lt
 801051c:	18e4      	addlt	r4, r4, r3
 801051e:	f002 f81d 	bl	801255c <__malloc_lock>
 8010522:	4a20      	ldr	r2, [pc, #128]	; (80105a4 <_free_r+0x9c>)
 8010524:	9801      	ldr	r0, [sp, #4]
 8010526:	6813      	ldr	r3, [r2, #0]
 8010528:	4615      	mov	r5, r2
 801052a:	b933      	cbnz	r3, 801053a <_free_r+0x32>
 801052c:	6063      	str	r3, [r4, #4]
 801052e:	6014      	str	r4, [r2, #0]
 8010530:	b003      	add	sp, #12
 8010532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010536:	f002 b817 	b.w	8012568 <__malloc_unlock>
 801053a:	42a3      	cmp	r3, r4
 801053c:	d90b      	bls.n	8010556 <_free_r+0x4e>
 801053e:	6821      	ldr	r1, [r4, #0]
 8010540:	1862      	adds	r2, r4, r1
 8010542:	4293      	cmp	r3, r2
 8010544:	bf04      	itt	eq
 8010546:	681a      	ldreq	r2, [r3, #0]
 8010548:	685b      	ldreq	r3, [r3, #4]
 801054a:	6063      	str	r3, [r4, #4]
 801054c:	bf04      	itt	eq
 801054e:	1852      	addeq	r2, r2, r1
 8010550:	6022      	streq	r2, [r4, #0]
 8010552:	602c      	str	r4, [r5, #0]
 8010554:	e7ec      	b.n	8010530 <_free_r+0x28>
 8010556:	461a      	mov	r2, r3
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	b10b      	cbz	r3, 8010560 <_free_r+0x58>
 801055c:	42a3      	cmp	r3, r4
 801055e:	d9fa      	bls.n	8010556 <_free_r+0x4e>
 8010560:	6811      	ldr	r1, [r2, #0]
 8010562:	1855      	adds	r5, r2, r1
 8010564:	42a5      	cmp	r5, r4
 8010566:	d10b      	bne.n	8010580 <_free_r+0x78>
 8010568:	6824      	ldr	r4, [r4, #0]
 801056a:	4421      	add	r1, r4
 801056c:	1854      	adds	r4, r2, r1
 801056e:	42a3      	cmp	r3, r4
 8010570:	6011      	str	r1, [r2, #0]
 8010572:	d1dd      	bne.n	8010530 <_free_r+0x28>
 8010574:	681c      	ldr	r4, [r3, #0]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	6053      	str	r3, [r2, #4]
 801057a:	4421      	add	r1, r4
 801057c:	6011      	str	r1, [r2, #0]
 801057e:	e7d7      	b.n	8010530 <_free_r+0x28>
 8010580:	d902      	bls.n	8010588 <_free_r+0x80>
 8010582:	230c      	movs	r3, #12
 8010584:	6003      	str	r3, [r0, #0]
 8010586:	e7d3      	b.n	8010530 <_free_r+0x28>
 8010588:	6825      	ldr	r5, [r4, #0]
 801058a:	1961      	adds	r1, r4, r5
 801058c:	428b      	cmp	r3, r1
 801058e:	bf04      	itt	eq
 8010590:	6819      	ldreq	r1, [r3, #0]
 8010592:	685b      	ldreq	r3, [r3, #4]
 8010594:	6063      	str	r3, [r4, #4]
 8010596:	bf04      	itt	eq
 8010598:	1949      	addeq	r1, r1, r5
 801059a:	6021      	streq	r1, [r4, #0]
 801059c:	6054      	str	r4, [r2, #4]
 801059e:	e7c7      	b.n	8010530 <_free_r+0x28>
 80105a0:	b003      	add	sp, #12
 80105a2:	bd30      	pop	{r4, r5, pc}
 80105a4:	20002580 	.word	0x20002580

080105a8 <_malloc_r>:
 80105a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105aa:	1ccd      	adds	r5, r1, #3
 80105ac:	f025 0503 	bic.w	r5, r5, #3
 80105b0:	3508      	adds	r5, #8
 80105b2:	2d0c      	cmp	r5, #12
 80105b4:	bf38      	it	cc
 80105b6:	250c      	movcc	r5, #12
 80105b8:	2d00      	cmp	r5, #0
 80105ba:	4606      	mov	r6, r0
 80105bc:	db01      	blt.n	80105c2 <_malloc_r+0x1a>
 80105be:	42a9      	cmp	r1, r5
 80105c0:	d903      	bls.n	80105ca <_malloc_r+0x22>
 80105c2:	230c      	movs	r3, #12
 80105c4:	6033      	str	r3, [r6, #0]
 80105c6:	2000      	movs	r0, #0
 80105c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105ca:	f001 ffc7 	bl	801255c <__malloc_lock>
 80105ce:	4921      	ldr	r1, [pc, #132]	; (8010654 <_malloc_r+0xac>)
 80105d0:	680a      	ldr	r2, [r1, #0]
 80105d2:	4614      	mov	r4, r2
 80105d4:	b99c      	cbnz	r4, 80105fe <_malloc_r+0x56>
 80105d6:	4f20      	ldr	r7, [pc, #128]	; (8010658 <_malloc_r+0xb0>)
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	b923      	cbnz	r3, 80105e6 <_malloc_r+0x3e>
 80105dc:	4621      	mov	r1, r4
 80105de:	4630      	mov	r0, r6
 80105e0:	f000 fa5c 	bl	8010a9c <_sbrk_r>
 80105e4:	6038      	str	r0, [r7, #0]
 80105e6:	4629      	mov	r1, r5
 80105e8:	4630      	mov	r0, r6
 80105ea:	f000 fa57 	bl	8010a9c <_sbrk_r>
 80105ee:	1c43      	adds	r3, r0, #1
 80105f0:	d123      	bne.n	801063a <_malloc_r+0x92>
 80105f2:	230c      	movs	r3, #12
 80105f4:	6033      	str	r3, [r6, #0]
 80105f6:	4630      	mov	r0, r6
 80105f8:	f001 ffb6 	bl	8012568 <__malloc_unlock>
 80105fc:	e7e3      	b.n	80105c6 <_malloc_r+0x1e>
 80105fe:	6823      	ldr	r3, [r4, #0]
 8010600:	1b5b      	subs	r3, r3, r5
 8010602:	d417      	bmi.n	8010634 <_malloc_r+0x8c>
 8010604:	2b0b      	cmp	r3, #11
 8010606:	d903      	bls.n	8010610 <_malloc_r+0x68>
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	441c      	add	r4, r3
 801060c:	6025      	str	r5, [r4, #0]
 801060e:	e004      	b.n	801061a <_malloc_r+0x72>
 8010610:	6863      	ldr	r3, [r4, #4]
 8010612:	42a2      	cmp	r2, r4
 8010614:	bf0c      	ite	eq
 8010616:	600b      	streq	r3, [r1, #0]
 8010618:	6053      	strne	r3, [r2, #4]
 801061a:	4630      	mov	r0, r6
 801061c:	f001 ffa4 	bl	8012568 <__malloc_unlock>
 8010620:	f104 000b 	add.w	r0, r4, #11
 8010624:	1d23      	adds	r3, r4, #4
 8010626:	f020 0007 	bic.w	r0, r0, #7
 801062a:	1ac2      	subs	r2, r0, r3
 801062c:	d0cc      	beq.n	80105c8 <_malloc_r+0x20>
 801062e:	1a1b      	subs	r3, r3, r0
 8010630:	50a3      	str	r3, [r4, r2]
 8010632:	e7c9      	b.n	80105c8 <_malloc_r+0x20>
 8010634:	4622      	mov	r2, r4
 8010636:	6864      	ldr	r4, [r4, #4]
 8010638:	e7cc      	b.n	80105d4 <_malloc_r+0x2c>
 801063a:	1cc4      	adds	r4, r0, #3
 801063c:	f024 0403 	bic.w	r4, r4, #3
 8010640:	42a0      	cmp	r0, r4
 8010642:	d0e3      	beq.n	801060c <_malloc_r+0x64>
 8010644:	1a21      	subs	r1, r4, r0
 8010646:	4630      	mov	r0, r6
 8010648:	f000 fa28 	bl	8010a9c <_sbrk_r>
 801064c:	3001      	adds	r0, #1
 801064e:	d1dd      	bne.n	801060c <_malloc_r+0x64>
 8010650:	e7cf      	b.n	80105f2 <_malloc_r+0x4a>
 8010652:	bf00      	nop
 8010654:	20002580 	.word	0x20002580
 8010658:	20002584 	.word	0x20002584

0801065c <iprintf>:
 801065c:	b40f      	push	{r0, r1, r2, r3}
 801065e:	4b0a      	ldr	r3, [pc, #40]	; (8010688 <iprintf+0x2c>)
 8010660:	b513      	push	{r0, r1, r4, lr}
 8010662:	681c      	ldr	r4, [r3, #0]
 8010664:	b124      	cbz	r4, 8010670 <iprintf+0x14>
 8010666:	69a3      	ldr	r3, [r4, #24]
 8010668:	b913      	cbnz	r3, 8010670 <iprintf+0x14>
 801066a:	4620      	mov	r0, r4
 801066c:	f001 fade 	bl	8011c2c <__sinit>
 8010670:	ab05      	add	r3, sp, #20
 8010672:	9a04      	ldr	r2, [sp, #16]
 8010674:	68a1      	ldr	r1, [r4, #8]
 8010676:	9301      	str	r3, [sp, #4]
 8010678:	4620      	mov	r0, r4
 801067a:	f002 fdf1 	bl	8013260 <_vfiprintf_r>
 801067e:	b002      	add	sp, #8
 8010680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010684:	b004      	add	sp, #16
 8010686:	4770      	bx	lr
 8010688:	20000168 	.word	0x20000168

0801068c <_puts_r>:
 801068c:	b570      	push	{r4, r5, r6, lr}
 801068e:	460e      	mov	r6, r1
 8010690:	4605      	mov	r5, r0
 8010692:	b118      	cbz	r0, 801069c <_puts_r+0x10>
 8010694:	6983      	ldr	r3, [r0, #24]
 8010696:	b90b      	cbnz	r3, 801069c <_puts_r+0x10>
 8010698:	f001 fac8 	bl	8011c2c <__sinit>
 801069c:	69ab      	ldr	r3, [r5, #24]
 801069e:	68ac      	ldr	r4, [r5, #8]
 80106a0:	b913      	cbnz	r3, 80106a8 <_puts_r+0x1c>
 80106a2:	4628      	mov	r0, r5
 80106a4:	f001 fac2 	bl	8011c2c <__sinit>
 80106a8:	4b2c      	ldr	r3, [pc, #176]	; (801075c <_puts_r+0xd0>)
 80106aa:	429c      	cmp	r4, r3
 80106ac:	d120      	bne.n	80106f0 <_puts_r+0x64>
 80106ae:	686c      	ldr	r4, [r5, #4]
 80106b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106b2:	07db      	lsls	r3, r3, #31
 80106b4:	d405      	bmi.n	80106c2 <_puts_r+0x36>
 80106b6:	89a3      	ldrh	r3, [r4, #12]
 80106b8:	0598      	lsls	r0, r3, #22
 80106ba:	d402      	bmi.n	80106c2 <_puts_r+0x36>
 80106bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106be:	f001 fec2 	bl	8012446 <__retarget_lock_acquire_recursive>
 80106c2:	89a3      	ldrh	r3, [r4, #12]
 80106c4:	0719      	lsls	r1, r3, #28
 80106c6:	d51d      	bpl.n	8010704 <_puts_r+0x78>
 80106c8:	6923      	ldr	r3, [r4, #16]
 80106ca:	b1db      	cbz	r3, 8010704 <_puts_r+0x78>
 80106cc:	3e01      	subs	r6, #1
 80106ce:	68a3      	ldr	r3, [r4, #8]
 80106d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80106d4:	3b01      	subs	r3, #1
 80106d6:	60a3      	str	r3, [r4, #8]
 80106d8:	bb39      	cbnz	r1, 801072a <_puts_r+0x9e>
 80106da:	2b00      	cmp	r3, #0
 80106dc:	da38      	bge.n	8010750 <_puts_r+0xc4>
 80106de:	4622      	mov	r2, r4
 80106e0:	210a      	movs	r1, #10
 80106e2:	4628      	mov	r0, r5
 80106e4:	f001 f8a6 	bl	8011834 <__swbuf_r>
 80106e8:	3001      	adds	r0, #1
 80106ea:	d011      	beq.n	8010710 <_puts_r+0x84>
 80106ec:	250a      	movs	r5, #10
 80106ee:	e011      	b.n	8010714 <_puts_r+0x88>
 80106f0:	4b1b      	ldr	r3, [pc, #108]	; (8010760 <_puts_r+0xd4>)
 80106f2:	429c      	cmp	r4, r3
 80106f4:	d101      	bne.n	80106fa <_puts_r+0x6e>
 80106f6:	68ac      	ldr	r4, [r5, #8]
 80106f8:	e7da      	b.n	80106b0 <_puts_r+0x24>
 80106fa:	4b1a      	ldr	r3, [pc, #104]	; (8010764 <_puts_r+0xd8>)
 80106fc:	429c      	cmp	r4, r3
 80106fe:	bf08      	it	eq
 8010700:	68ec      	ldreq	r4, [r5, #12]
 8010702:	e7d5      	b.n	80106b0 <_puts_r+0x24>
 8010704:	4621      	mov	r1, r4
 8010706:	4628      	mov	r0, r5
 8010708:	f001 f8f8 	bl	80118fc <__swsetup_r>
 801070c:	2800      	cmp	r0, #0
 801070e:	d0dd      	beq.n	80106cc <_puts_r+0x40>
 8010710:	f04f 35ff 	mov.w	r5, #4294967295
 8010714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010716:	07da      	lsls	r2, r3, #31
 8010718:	d405      	bmi.n	8010726 <_puts_r+0x9a>
 801071a:	89a3      	ldrh	r3, [r4, #12]
 801071c:	059b      	lsls	r3, r3, #22
 801071e:	d402      	bmi.n	8010726 <_puts_r+0x9a>
 8010720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010722:	f001 fe91 	bl	8012448 <__retarget_lock_release_recursive>
 8010726:	4628      	mov	r0, r5
 8010728:	bd70      	pop	{r4, r5, r6, pc}
 801072a:	2b00      	cmp	r3, #0
 801072c:	da04      	bge.n	8010738 <_puts_r+0xac>
 801072e:	69a2      	ldr	r2, [r4, #24]
 8010730:	429a      	cmp	r2, r3
 8010732:	dc06      	bgt.n	8010742 <_puts_r+0xb6>
 8010734:	290a      	cmp	r1, #10
 8010736:	d004      	beq.n	8010742 <_puts_r+0xb6>
 8010738:	6823      	ldr	r3, [r4, #0]
 801073a:	1c5a      	adds	r2, r3, #1
 801073c:	6022      	str	r2, [r4, #0]
 801073e:	7019      	strb	r1, [r3, #0]
 8010740:	e7c5      	b.n	80106ce <_puts_r+0x42>
 8010742:	4622      	mov	r2, r4
 8010744:	4628      	mov	r0, r5
 8010746:	f001 f875 	bl	8011834 <__swbuf_r>
 801074a:	3001      	adds	r0, #1
 801074c:	d1bf      	bne.n	80106ce <_puts_r+0x42>
 801074e:	e7df      	b.n	8010710 <_puts_r+0x84>
 8010750:	6823      	ldr	r3, [r4, #0]
 8010752:	250a      	movs	r5, #10
 8010754:	1c5a      	adds	r2, r3, #1
 8010756:	6022      	str	r2, [r4, #0]
 8010758:	701d      	strb	r5, [r3, #0]
 801075a:	e7db      	b.n	8010714 <_puts_r+0x88>
 801075c:	08015c98 	.word	0x08015c98
 8010760:	08015cb8 	.word	0x08015cb8
 8010764:	08015c78 	.word	0x08015c78

08010768 <puts>:
 8010768:	4b02      	ldr	r3, [pc, #8]	; (8010774 <puts+0xc>)
 801076a:	4601      	mov	r1, r0
 801076c:	6818      	ldr	r0, [r3, #0]
 801076e:	f7ff bf8d 	b.w	801068c <_puts_r>
 8010772:	bf00      	nop
 8010774:	20000168 	.word	0x20000168

08010778 <swapfunc>:
 8010778:	2b02      	cmp	r3, #2
 801077a:	b510      	push	{r4, lr}
 801077c:	d00a      	beq.n	8010794 <swapfunc+0x1c>
 801077e:	0892      	lsrs	r2, r2, #2
 8010780:	3a01      	subs	r2, #1
 8010782:	6803      	ldr	r3, [r0, #0]
 8010784:	680c      	ldr	r4, [r1, #0]
 8010786:	f840 4b04 	str.w	r4, [r0], #4
 801078a:	2a00      	cmp	r2, #0
 801078c:	f841 3b04 	str.w	r3, [r1], #4
 8010790:	dcf6      	bgt.n	8010780 <swapfunc+0x8>
 8010792:	bd10      	pop	{r4, pc}
 8010794:	4402      	add	r2, r0
 8010796:	780c      	ldrb	r4, [r1, #0]
 8010798:	7803      	ldrb	r3, [r0, #0]
 801079a:	f800 4b01 	strb.w	r4, [r0], #1
 801079e:	f801 3b01 	strb.w	r3, [r1], #1
 80107a2:	1a13      	subs	r3, r2, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	dcf6      	bgt.n	8010796 <swapfunc+0x1e>
 80107a8:	e7f3      	b.n	8010792 <swapfunc+0x1a>

080107aa <med3.isra.0>:
 80107aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ac:	460f      	mov	r7, r1
 80107ae:	4614      	mov	r4, r2
 80107b0:	4606      	mov	r6, r0
 80107b2:	461d      	mov	r5, r3
 80107b4:	4798      	blx	r3
 80107b6:	2800      	cmp	r0, #0
 80107b8:	4621      	mov	r1, r4
 80107ba:	4638      	mov	r0, r7
 80107bc:	da0c      	bge.n	80107d8 <med3.isra.0+0x2e>
 80107be:	47a8      	blx	r5
 80107c0:	2800      	cmp	r0, #0
 80107c2:	da02      	bge.n	80107ca <med3.isra.0+0x20>
 80107c4:	463c      	mov	r4, r7
 80107c6:	4620      	mov	r0, r4
 80107c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ca:	4621      	mov	r1, r4
 80107cc:	4630      	mov	r0, r6
 80107ce:	47a8      	blx	r5
 80107d0:	2800      	cmp	r0, #0
 80107d2:	dbf8      	blt.n	80107c6 <med3.isra.0+0x1c>
 80107d4:	4634      	mov	r4, r6
 80107d6:	e7f6      	b.n	80107c6 <med3.isra.0+0x1c>
 80107d8:	47a8      	blx	r5
 80107da:	2800      	cmp	r0, #0
 80107dc:	dcf2      	bgt.n	80107c4 <med3.isra.0+0x1a>
 80107de:	4621      	mov	r1, r4
 80107e0:	4630      	mov	r0, r6
 80107e2:	47a8      	blx	r5
 80107e4:	2800      	cmp	r0, #0
 80107e6:	daee      	bge.n	80107c6 <med3.isra.0+0x1c>
 80107e8:	e7f4      	b.n	80107d4 <med3.isra.0+0x2a>

080107ea <qsort>:
 80107ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ee:	469a      	mov	sl, r3
 80107f0:	ea40 0302 	orr.w	r3, r0, r2
 80107f4:	079b      	lsls	r3, r3, #30
 80107f6:	b097      	sub	sp, #92	; 0x5c
 80107f8:	4606      	mov	r6, r0
 80107fa:	4614      	mov	r4, r2
 80107fc:	d11a      	bne.n	8010834 <qsort+0x4a>
 80107fe:	f1b2 0804 	subs.w	r8, r2, #4
 8010802:	bf18      	it	ne
 8010804:	f04f 0801 	movne.w	r8, #1
 8010808:	2300      	movs	r3, #0
 801080a:	9302      	str	r3, [sp, #8]
 801080c:	1933      	adds	r3, r6, r4
 801080e:	fb04 f701 	mul.w	r7, r4, r1
 8010812:	9301      	str	r3, [sp, #4]
 8010814:	2906      	cmp	r1, #6
 8010816:	eb06 0307 	add.w	r3, r6, r7
 801081a:	9303      	str	r3, [sp, #12]
 801081c:	d82a      	bhi.n	8010874 <qsort+0x8a>
 801081e:	9b01      	ldr	r3, [sp, #4]
 8010820:	9a03      	ldr	r2, [sp, #12]
 8010822:	4293      	cmp	r3, r2
 8010824:	d310      	bcc.n	8010848 <qsort+0x5e>
 8010826:	9b02      	ldr	r3, [sp, #8]
 8010828:	2b00      	cmp	r3, #0
 801082a:	f040 811f 	bne.w	8010a6c <qsort+0x282>
 801082e:	b017      	add	sp, #92	; 0x5c
 8010830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010834:	f04f 0802 	mov.w	r8, #2
 8010838:	e7e6      	b.n	8010808 <qsort+0x1e>
 801083a:	4643      	mov	r3, r8
 801083c:	4622      	mov	r2, r4
 801083e:	4639      	mov	r1, r7
 8010840:	4628      	mov	r0, r5
 8010842:	f7ff ff99 	bl	8010778 <swapfunc>
 8010846:	e00e      	b.n	8010866 <qsort+0x7c>
 8010848:	9d01      	ldr	r5, [sp, #4]
 801084a:	e00d      	b.n	8010868 <qsort+0x7e>
 801084c:	1b2f      	subs	r7, r5, r4
 801084e:	4629      	mov	r1, r5
 8010850:	4638      	mov	r0, r7
 8010852:	47d0      	blx	sl
 8010854:	2800      	cmp	r0, #0
 8010856:	dd09      	ble.n	801086c <qsort+0x82>
 8010858:	f1b8 0f00 	cmp.w	r8, #0
 801085c:	d1ed      	bne.n	801083a <qsort+0x50>
 801085e:	682b      	ldr	r3, [r5, #0]
 8010860:	683a      	ldr	r2, [r7, #0]
 8010862:	602a      	str	r2, [r5, #0]
 8010864:	603b      	str	r3, [r7, #0]
 8010866:	463d      	mov	r5, r7
 8010868:	42ae      	cmp	r6, r5
 801086a:	d3ef      	bcc.n	801084c <qsort+0x62>
 801086c:	9b01      	ldr	r3, [sp, #4]
 801086e:	4423      	add	r3, r4
 8010870:	9301      	str	r3, [sp, #4]
 8010872:	e7d4      	b.n	801081e <qsort+0x34>
 8010874:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8010878:	1b3f      	subs	r7, r7, r4
 801087a:	2907      	cmp	r1, #7
 801087c:	fb04 6909 	mla	r9, r4, r9, r6
 8010880:	4437      	add	r7, r6
 8010882:	d022      	beq.n	80108ca <qsort+0xe0>
 8010884:	2928      	cmp	r1, #40	; 0x28
 8010886:	d945      	bls.n	8010914 <qsort+0x12a>
 8010888:	08c9      	lsrs	r1, r1, #3
 801088a:	fb04 f501 	mul.w	r5, r4, r1
 801088e:	4653      	mov	r3, sl
 8010890:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8010894:	1971      	adds	r1, r6, r5
 8010896:	4630      	mov	r0, r6
 8010898:	f7ff ff87 	bl	80107aa <med3.isra.0>
 801089c:	4649      	mov	r1, r9
 801089e:	eb09 0205 	add.w	r2, r9, r5
 80108a2:	4653      	mov	r3, sl
 80108a4:	4683      	mov	fp, r0
 80108a6:	1b48      	subs	r0, r1, r5
 80108a8:	f7ff ff7f 	bl	80107aa <med3.isra.0>
 80108ac:	463a      	mov	r2, r7
 80108ae:	4681      	mov	r9, r0
 80108b0:	4653      	mov	r3, sl
 80108b2:	1b79      	subs	r1, r7, r5
 80108b4:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80108b8:	f7ff ff77 	bl	80107aa <med3.isra.0>
 80108bc:	4602      	mov	r2, r0
 80108be:	4649      	mov	r1, r9
 80108c0:	4653      	mov	r3, sl
 80108c2:	4658      	mov	r0, fp
 80108c4:	f7ff ff71 	bl	80107aa <med3.isra.0>
 80108c8:	4681      	mov	r9, r0
 80108ca:	f1b8 0f00 	cmp.w	r8, #0
 80108ce:	d124      	bne.n	801091a <qsort+0x130>
 80108d0:	6833      	ldr	r3, [r6, #0]
 80108d2:	f8d9 2000 	ldr.w	r2, [r9]
 80108d6:	6032      	str	r2, [r6, #0]
 80108d8:	f8c9 3000 	str.w	r3, [r9]
 80108dc:	eb06 0b04 	add.w	fp, r6, r4
 80108e0:	46b9      	mov	r9, r7
 80108e2:	465d      	mov	r5, fp
 80108e4:	2300      	movs	r3, #0
 80108e6:	45bb      	cmp	fp, r7
 80108e8:	d835      	bhi.n	8010956 <qsort+0x16c>
 80108ea:	4631      	mov	r1, r6
 80108ec:	4658      	mov	r0, fp
 80108ee:	9304      	str	r3, [sp, #16]
 80108f0:	47d0      	blx	sl
 80108f2:	2800      	cmp	r0, #0
 80108f4:	9b04      	ldr	r3, [sp, #16]
 80108f6:	dc3e      	bgt.n	8010976 <qsort+0x18c>
 80108f8:	d10a      	bne.n	8010910 <qsort+0x126>
 80108fa:	f1b8 0f00 	cmp.w	r8, #0
 80108fe:	d113      	bne.n	8010928 <qsort+0x13e>
 8010900:	682b      	ldr	r3, [r5, #0]
 8010902:	f8db 2000 	ldr.w	r2, [fp]
 8010906:	602a      	str	r2, [r5, #0]
 8010908:	f8cb 3000 	str.w	r3, [fp]
 801090c:	4425      	add	r5, r4
 801090e:	2301      	movs	r3, #1
 8010910:	44a3      	add	fp, r4
 8010912:	e7e8      	b.n	80108e6 <qsort+0xfc>
 8010914:	463a      	mov	r2, r7
 8010916:	46b3      	mov	fp, r6
 8010918:	e7d1      	b.n	80108be <qsort+0xd4>
 801091a:	4643      	mov	r3, r8
 801091c:	4622      	mov	r2, r4
 801091e:	4649      	mov	r1, r9
 8010920:	4630      	mov	r0, r6
 8010922:	f7ff ff29 	bl	8010778 <swapfunc>
 8010926:	e7d9      	b.n	80108dc <qsort+0xf2>
 8010928:	4643      	mov	r3, r8
 801092a:	4622      	mov	r2, r4
 801092c:	4659      	mov	r1, fp
 801092e:	4628      	mov	r0, r5
 8010930:	f7ff ff22 	bl	8010778 <swapfunc>
 8010934:	e7ea      	b.n	801090c <qsort+0x122>
 8010936:	d10b      	bne.n	8010950 <qsort+0x166>
 8010938:	f1b8 0f00 	cmp.w	r8, #0
 801093c:	d114      	bne.n	8010968 <qsort+0x17e>
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	f8d9 2000 	ldr.w	r2, [r9]
 8010944:	603a      	str	r2, [r7, #0]
 8010946:	f8c9 3000 	str.w	r3, [r9]
 801094a:	eba9 0904 	sub.w	r9, r9, r4
 801094e:	2301      	movs	r3, #1
 8010950:	9f04      	ldr	r7, [sp, #16]
 8010952:	45bb      	cmp	fp, r7
 8010954:	d90f      	bls.n	8010976 <qsort+0x18c>
 8010956:	2b00      	cmp	r3, #0
 8010958:	d143      	bne.n	80109e2 <qsort+0x1f8>
 801095a:	9b01      	ldr	r3, [sp, #4]
 801095c:	9a03      	ldr	r2, [sp, #12]
 801095e:	4293      	cmp	r3, r2
 8010960:	f4bf af61 	bcs.w	8010826 <qsort+0x3c>
 8010964:	9d01      	ldr	r5, [sp, #4]
 8010966:	e036      	b.n	80109d6 <qsort+0x1ec>
 8010968:	4643      	mov	r3, r8
 801096a:	4622      	mov	r2, r4
 801096c:	4649      	mov	r1, r9
 801096e:	4638      	mov	r0, r7
 8010970:	f7ff ff02 	bl	8010778 <swapfunc>
 8010974:	e7e9      	b.n	801094a <qsort+0x160>
 8010976:	4631      	mov	r1, r6
 8010978:	4638      	mov	r0, r7
 801097a:	9305      	str	r3, [sp, #20]
 801097c:	47d0      	blx	sl
 801097e:	1b3b      	subs	r3, r7, r4
 8010980:	2800      	cmp	r0, #0
 8010982:	9304      	str	r3, [sp, #16]
 8010984:	9b05      	ldr	r3, [sp, #20]
 8010986:	dad6      	bge.n	8010936 <qsort+0x14c>
 8010988:	f1b8 0f00 	cmp.w	r8, #0
 801098c:	d006      	beq.n	801099c <qsort+0x1b2>
 801098e:	4643      	mov	r3, r8
 8010990:	4622      	mov	r2, r4
 8010992:	4639      	mov	r1, r7
 8010994:	4658      	mov	r0, fp
 8010996:	f7ff feef 	bl	8010778 <swapfunc>
 801099a:	e005      	b.n	80109a8 <qsort+0x1be>
 801099c:	f8db 3000 	ldr.w	r3, [fp]
 80109a0:	683a      	ldr	r2, [r7, #0]
 80109a2:	f8cb 2000 	str.w	r2, [fp]
 80109a6:	603b      	str	r3, [r7, #0]
 80109a8:	9f04      	ldr	r7, [sp, #16]
 80109aa:	e7b0      	b.n	801090e <qsort+0x124>
 80109ac:	4643      	mov	r3, r8
 80109ae:	4622      	mov	r2, r4
 80109b0:	4639      	mov	r1, r7
 80109b2:	4628      	mov	r0, r5
 80109b4:	f7ff fee0 	bl	8010778 <swapfunc>
 80109b8:	e00c      	b.n	80109d4 <qsort+0x1ea>
 80109ba:	1b2f      	subs	r7, r5, r4
 80109bc:	4629      	mov	r1, r5
 80109be:	4638      	mov	r0, r7
 80109c0:	47d0      	blx	sl
 80109c2:	2800      	cmp	r0, #0
 80109c4:	dd09      	ble.n	80109da <qsort+0x1f0>
 80109c6:	f1b8 0f00 	cmp.w	r8, #0
 80109ca:	d1ef      	bne.n	80109ac <qsort+0x1c2>
 80109cc:	682b      	ldr	r3, [r5, #0]
 80109ce:	683a      	ldr	r2, [r7, #0]
 80109d0:	602a      	str	r2, [r5, #0]
 80109d2:	603b      	str	r3, [r7, #0]
 80109d4:	463d      	mov	r5, r7
 80109d6:	42ae      	cmp	r6, r5
 80109d8:	d3ef      	bcc.n	80109ba <qsort+0x1d0>
 80109da:	9b01      	ldr	r3, [sp, #4]
 80109dc:	4423      	add	r3, r4
 80109de:	9301      	str	r3, [sp, #4]
 80109e0:	e7bb      	b.n	801095a <qsort+0x170>
 80109e2:	ebab 0305 	sub.w	r3, fp, r5
 80109e6:	1baa      	subs	r2, r5, r6
 80109e8:	429a      	cmp	r2, r3
 80109ea:	bfa8      	it	ge
 80109ec:	461a      	movge	r2, r3
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	b12a      	cbz	r2, 80109fe <qsort+0x214>
 80109f2:	4643      	mov	r3, r8
 80109f4:	ebab 0102 	sub.w	r1, fp, r2
 80109f8:	4630      	mov	r0, r6
 80109fa:	f7ff febd 	bl	8010778 <swapfunc>
 80109fe:	9b03      	ldr	r3, [sp, #12]
 8010a00:	eba3 0209 	sub.w	r2, r3, r9
 8010a04:	eba9 0707 	sub.w	r7, r9, r7
 8010a08:	1b12      	subs	r2, r2, r4
 8010a0a:	42ba      	cmp	r2, r7
 8010a0c:	bf28      	it	cs
 8010a0e:	463a      	movcs	r2, r7
 8010a10:	b12a      	cbz	r2, 8010a1e <qsort+0x234>
 8010a12:	9903      	ldr	r1, [sp, #12]
 8010a14:	4643      	mov	r3, r8
 8010a16:	1a89      	subs	r1, r1, r2
 8010a18:	4658      	mov	r0, fp
 8010a1a:	f7ff fead 	bl	8010778 <swapfunc>
 8010a1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010a22:	9b03      	ldr	r3, [sp, #12]
 8010a24:	454f      	cmp	r7, r9
 8010a26:	eba3 0007 	sub.w	r0, r3, r7
 8010a2a:	d904      	bls.n	8010a36 <qsort+0x24c>
 8010a2c:	4633      	mov	r3, r6
 8010a2e:	46b9      	mov	r9, r7
 8010a30:	9f01      	ldr	r7, [sp, #4]
 8010a32:	4606      	mov	r6, r0
 8010a34:	4618      	mov	r0, r3
 8010a36:	42a7      	cmp	r7, r4
 8010a38:	d921      	bls.n	8010a7e <qsort+0x294>
 8010a3a:	fbb7 f1f4 	udiv	r1, r7, r4
 8010a3e:	9b02      	ldr	r3, [sp, #8]
 8010a40:	2b07      	cmp	r3, #7
 8010a42:	d80d      	bhi.n	8010a60 <qsort+0x276>
 8010a44:	fbb9 f7f4 	udiv	r7, r9, r4
 8010a48:	aa16      	add	r2, sp, #88	; 0x58
 8010a4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a4e:	f843 6c40 	str.w	r6, [r3, #-64]
 8010a52:	f843 7c3c 	str.w	r7, [r3, #-60]
 8010a56:	9b02      	ldr	r3, [sp, #8]
 8010a58:	3301      	adds	r3, #1
 8010a5a:	9302      	str	r3, [sp, #8]
 8010a5c:	4606      	mov	r6, r0
 8010a5e:	e6d5      	b.n	801080c <qsort+0x22>
 8010a60:	4653      	mov	r3, sl
 8010a62:	4622      	mov	r2, r4
 8010a64:	f7ff fec1 	bl	80107ea <qsort>
 8010a68:	45a1      	cmp	r9, r4
 8010a6a:	d80b      	bhi.n	8010a84 <qsort+0x29a>
 8010a6c:	9b02      	ldr	r3, [sp, #8]
 8010a6e:	aa16      	add	r2, sp, #88	; 0x58
 8010a70:	3b01      	subs	r3, #1
 8010a72:	9302      	str	r3, [sp, #8]
 8010a74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010a78:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8010a7c:	e7ee      	b.n	8010a5c <qsort+0x272>
 8010a7e:	45a1      	cmp	r9, r4
 8010a80:	f67f aed1 	bls.w	8010826 <qsort+0x3c>
 8010a84:	fbb9 f1f4 	udiv	r1, r9, r4
 8010a88:	4630      	mov	r0, r6
 8010a8a:	e7e7      	b.n	8010a5c <qsort+0x272>

08010a8c <realloc>:
 8010a8c:	4b02      	ldr	r3, [pc, #8]	; (8010a98 <realloc+0xc>)
 8010a8e:	460a      	mov	r2, r1
 8010a90:	4601      	mov	r1, r0
 8010a92:	6818      	ldr	r0, [r3, #0]
 8010a94:	f002 ba38 	b.w	8012f08 <_realloc_r>
 8010a98:	20000168 	.word	0x20000168

08010a9c <_sbrk_r>:
 8010a9c:	b538      	push	{r3, r4, r5, lr}
 8010a9e:	4d06      	ldr	r5, [pc, #24]	; (8010ab8 <_sbrk_r+0x1c>)
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	4608      	mov	r0, r1
 8010aa6:	602b      	str	r3, [r5, #0]
 8010aa8:	f7f2 f9f8 	bl	8002e9c <_sbrk>
 8010aac:	1c43      	adds	r3, r0, #1
 8010aae:	d102      	bne.n	8010ab6 <_sbrk_r+0x1a>
 8010ab0:	682b      	ldr	r3, [r5, #0]
 8010ab2:	b103      	cbz	r3, 8010ab6 <_sbrk_r+0x1a>
 8010ab4:	6023      	str	r3, [r4, #0]
 8010ab6:	bd38      	pop	{r3, r4, r5, pc}
 8010ab8:	200034dc 	.word	0x200034dc

08010abc <sniprintf>:
 8010abc:	b40c      	push	{r2, r3}
 8010abe:	b530      	push	{r4, r5, lr}
 8010ac0:	4b17      	ldr	r3, [pc, #92]	; (8010b20 <sniprintf+0x64>)
 8010ac2:	1e0c      	subs	r4, r1, #0
 8010ac4:	681d      	ldr	r5, [r3, #0]
 8010ac6:	b09d      	sub	sp, #116	; 0x74
 8010ac8:	da08      	bge.n	8010adc <sniprintf+0x20>
 8010aca:	238b      	movs	r3, #139	; 0x8b
 8010acc:	602b      	str	r3, [r5, #0]
 8010ace:	f04f 30ff 	mov.w	r0, #4294967295
 8010ad2:	b01d      	add	sp, #116	; 0x74
 8010ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ad8:	b002      	add	sp, #8
 8010ada:	4770      	bx	lr
 8010adc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010ae0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010ae4:	bf14      	ite	ne
 8010ae6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010aea:	4623      	moveq	r3, r4
 8010aec:	9304      	str	r3, [sp, #16]
 8010aee:	9307      	str	r3, [sp, #28]
 8010af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010af4:	9002      	str	r0, [sp, #8]
 8010af6:	9006      	str	r0, [sp, #24]
 8010af8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010afc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010afe:	ab21      	add	r3, sp, #132	; 0x84
 8010b00:	a902      	add	r1, sp, #8
 8010b02:	4628      	mov	r0, r5
 8010b04:	9301      	str	r3, [sp, #4]
 8010b06:	f002 fa81 	bl	801300c <_svfiprintf_r>
 8010b0a:	1c43      	adds	r3, r0, #1
 8010b0c:	bfbc      	itt	lt
 8010b0e:	238b      	movlt	r3, #139	; 0x8b
 8010b10:	602b      	strlt	r3, [r5, #0]
 8010b12:	2c00      	cmp	r4, #0
 8010b14:	d0dd      	beq.n	8010ad2 <sniprintf+0x16>
 8010b16:	9b02      	ldr	r3, [sp, #8]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	701a      	strb	r2, [r3, #0]
 8010b1c:	e7d9      	b.n	8010ad2 <sniprintf+0x16>
 8010b1e:	bf00      	nop
 8010b20:	20000168 	.word	0x20000168

08010b24 <__sread>:
 8010b24:	b510      	push	{r4, lr}
 8010b26:	460c      	mov	r4, r1
 8010b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b2c:	f002 fe5c 	bl	80137e8 <_read_r>
 8010b30:	2800      	cmp	r0, #0
 8010b32:	bfab      	itete	ge
 8010b34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b36:	89a3      	ldrhlt	r3, [r4, #12]
 8010b38:	181b      	addge	r3, r3, r0
 8010b3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b3e:	bfac      	ite	ge
 8010b40:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b42:	81a3      	strhlt	r3, [r4, #12]
 8010b44:	bd10      	pop	{r4, pc}

08010b46 <__swrite>:
 8010b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b4a:	461f      	mov	r7, r3
 8010b4c:	898b      	ldrh	r3, [r1, #12]
 8010b4e:	05db      	lsls	r3, r3, #23
 8010b50:	4605      	mov	r5, r0
 8010b52:	460c      	mov	r4, r1
 8010b54:	4616      	mov	r6, r2
 8010b56:	d505      	bpl.n	8010b64 <__swrite+0x1e>
 8010b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b5c:	2302      	movs	r3, #2
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f001 fc74 	bl	801244c <_lseek_r>
 8010b64:	89a3      	ldrh	r3, [r4, #12]
 8010b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b6e:	81a3      	strh	r3, [r4, #12]
 8010b70:	4632      	mov	r2, r6
 8010b72:	463b      	mov	r3, r7
 8010b74:	4628      	mov	r0, r5
 8010b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7a:	f000 bead 	b.w	80118d8 <_write_r>

08010b7e <__sseek>:
 8010b7e:	b510      	push	{r4, lr}
 8010b80:	460c      	mov	r4, r1
 8010b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b86:	f001 fc61 	bl	801244c <_lseek_r>
 8010b8a:	1c43      	adds	r3, r0, #1
 8010b8c:	89a3      	ldrh	r3, [r4, #12]
 8010b8e:	bf15      	itete	ne
 8010b90:	6560      	strne	r0, [r4, #84]	; 0x54
 8010b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010b9a:	81a3      	strheq	r3, [r4, #12]
 8010b9c:	bf18      	it	ne
 8010b9e:	81a3      	strhne	r3, [r4, #12]
 8010ba0:	bd10      	pop	{r4, pc}

08010ba2 <__sclose>:
 8010ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ba6:	f000 bf17 	b.w	80119d8 <_close_r>

08010baa <strncmp>:
 8010baa:	b510      	push	{r4, lr}
 8010bac:	b16a      	cbz	r2, 8010bca <strncmp+0x20>
 8010bae:	3901      	subs	r1, #1
 8010bb0:	1884      	adds	r4, r0, r2
 8010bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010bb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d103      	bne.n	8010bc6 <strncmp+0x1c>
 8010bbe:	42a0      	cmp	r0, r4
 8010bc0:	d001      	beq.n	8010bc6 <strncmp+0x1c>
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1f5      	bne.n	8010bb2 <strncmp+0x8>
 8010bc6:	1a98      	subs	r0, r3, r2
 8010bc8:	bd10      	pop	{r4, pc}
 8010bca:	4610      	mov	r0, r2
 8010bcc:	e7fc      	b.n	8010bc8 <strncmp+0x1e>

08010bce <sulp>:
 8010bce:	b570      	push	{r4, r5, r6, lr}
 8010bd0:	4604      	mov	r4, r0
 8010bd2:	460d      	mov	r5, r1
 8010bd4:	ec45 4b10 	vmov	d0, r4, r5
 8010bd8:	4616      	mov	r6, r2
 8010bda:	f002 f837 	bl	8012c4c <__ulp>
 8010bde:	ec51 0b10 	vmov	r0, r1, d0
 8010be2:	b17e      	cbz	r6, 8010c04 <sulp+0x36>
 8010be4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010be8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	dd09      	ble.n	8010c04 <sulp+0x36>
 8010bf0:	051b      	lsls	r3, r3, #20
 8010bf2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010bf6:	2400      	movs	r4, #0
 8010bf8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010bfc:	4622      	mov	r2, r4
 8010bfe:	462b      	mov	r3, r5
 8010c00:	f7ef fd12 	bl	8000628 <__aeabi_dmul>
 8010c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c08 <_strtod_l>:
 8010c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c0c:	b0a3      	sub	sp, #140	; 0x8c
 8010c0e:	461f      	mov	r7, r3
 8010c10:	2300      	movs	r3, #0
 8010c12:	931e      	str	r3, [sp, #120]	; 0x78
 8010c14:	4ba4      	ldr	r3, [pc, #656]	; (8010ea8 <_strtod_l+0x2a0>)
 8010c16:	9219      	str	r2, [sp, #100]	; 0x64
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	9307      	str	r3, [sp, #28]
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	4618      	mov	r0, r3
 8010c20:	4688      	mov	r8, r1
 8010c22:	f7ef fae7 	bl	80001f4 <strlen>
 8010c26:	f04f 0a00 	mov.w	sl, #0
 8010c2a:	4605      	mov	r5, r0
 8010c2c:	f04f 0b00 	mov.w	fp, #0
 8010c30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010c36:	781a      	ldrb	r2, [r3, #0]
 8010c38:	2a2b      	cmp	r2, #43	; 0x2b
 8010c3a:	d04c      	beq.n	8010cd6 <_strtod_l+0xce>
 8010c3c:	d839      	bhi.n	8010cb2 <_strtod_l+0xaa>
 8010c3e:	2a0d      	cmp	r2, #13
 8010c40:	d832      	bhi.n	8010ca8 <_strtod_l+0xa0>
 8010c42:	2a08      	cmp	r2, #8
 8010c44:	d832      	bhi.n	8010cac <_strtod_l+0xa4>
 8010c46:	2a00      	cmp	r2, #0
 8010c48:	d03c      	beq.n	8010cc4 <_strtod_l+0xbc>
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	930e      	str	r3, [sp, #56]	; 0x38
 8010c4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010c50:	7833      	ldrb	r3, [r6, #0]
 8010c52:	2b30      	cmp	r3, #48	; 0x30
 8010c54:	f040 80b4 	bne.w	8010dc0 <_strtod_l+0x1b8>
 8010c58:	7873      	ldrb	r3, [r6, #1]
 8010c5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010c5e:	2b58      	cmp	r3, #88	; 0x58
 8010c60:	d16c      	bne.n	8010d3c <_strtod_l+0x134>
 8010c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c64:	9301      	str	r3, [sp, #4]
 8010c66:	ab1e      	add	r3, sp, #120	; 0x78
 8010c68:	9702      	str	r7, [sp, #8]
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	4a8f      	ldr	r2, [pc, #572]	; (8010eac <_strtod_l+0x2a4>)
 8010c6e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010c70:	a91d      	add	r1, sp, #116	; 0x74
 8010c72:	4620      	mov	r0, r4
 8010c74:	f001 f8de 	bl	8011e34 <__gethex>
 8010c78:	f010 0707 	ands.w	r7, r0, #7
 8010c7c:	4605      	mov	r5, r0
 8010c7e:	d005      	beq.n	8010c8c <_strtod_l+0x84>
 8010c80:	2f06      	cmp	r7, #6
 8010c82:	d12a      	bne.n	8010cda <_strtod_l+0xd2>
 8010c84:	3601      	adds	r6, #1
 8010c86:	2300      	movs	r3, #0
 8010c88:	961d      	str	r6, [sp, #116]	; 0x74
 8010c8a:	930e      	str	r3, [sp, #56]	; 0x38
 8010c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	f040 8596 	bne.w	80117c0 <_strtod_l+0xbb8>
 8010c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c96:	b1db      	cbz	r3, 8010cd0 <_strtod_l+0xc8>
 8010c98:	4652      	mov	r2, sl
 8010c9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010c9e:	ec43 2b10 	vmov	d0, r2, r3
 8010ca2:	b023      	add	sp, #140	; 0x8c
 8010ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca8:	2a20      	cmp	r2, #32
 8010caa:	d1ce      	bne.n	8010c4a <_strtod_l+0x42>
 8010cac:	3301      	adds	r3, #1
 8010cae:	931d      	str	r3, [sp, #116]	; 0x74
 8010cb0:	e7c0      	b.n	8010c34 <_strtod_l+0x2c>
 8010cb2:	2a2d      	cmp	r2, #45	; 0x2d
 8010cb4:	d1c9      	bne.n	8010c4a <_strtod_l+0x42>
 8010cb6:	2201      	movs	r2, #1
 8010cb8:	920e      	str	r2, [sp, #56]	; 0x38
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	921d      	str	r2, [sp, #116]	; 0x74
 8010cbe:	785b      	ldrb	r3, [r3, #1]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1c4      	bne.n	8010c4e <_strtod_l+0x46>
 8010cc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010cc6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	f040 8576 	bne.w	80117bc <_strtod_l+0xbb4>
 8010cd0:	4652      	mov	r2, sl
 8010cd2:	465b      	mov	r3, fp
 8010cd4:	e7e3      	b.n	8010c9e <_strtod_l+0x96>
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	e7ee      	b.n	8010cb8 <_strtod_l+0xb0>
 8010cda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010cdc:	b13a      	cbz	r2, 8010cee <_strtod_l+0xe6>
 8010cde:	2135      	movs	r1, #53	; 0x35
 8010ce0:	a820      	add	r0, sp, #128	; 0x80
 8010ce2:	f002 f8be 	bl	8012e62 <__copybits>
 8010ce6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ce8:	4620      	mov	r0, r4
 8010cea:	f001 fc83 	bl	80125f4 <_Bfree>
 8010cee:	3f01      	subs	r7, #1
 8010cf0:	2f05      	cmp	r7, #5
 8010cf2:	d807      	bhi.n	8010d04 <_strtod_l+0xfc>
 8010cf4:	e8df f007 	tbb	[pc, r7]
 8010cf8:	1d180b0e 	.word	0x1d180b0e
 8010cfc:	030e      	.short	0x030e
 8010cfe:	f04f 0b00 	mov.w	fp, #0
 8010d02:	46da      	mov	sl, fp
 8010d04:	0728      	lsls	r0, r5, #28
 8010d06:	d5c1      	bpl.n	8010c8c <_strtod_l+0x84>
 8010d08:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010d0c:	e7be      	b.n	8010c8c <_strtod_l+0x84>
 8010d0e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010d12:	e7f7      	b.n	8010d04 <_strtod_l+0xfc>
 8010d14:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010d18:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010d1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010d1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010d22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010d26:	e7ed      	b.n	8010d04 <_strtod_l+0xfc>
 8010d28:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010eb0 <_strtod_l+0x2a8>
 8010d2c:	f04f 0a00 	mov.w	sl, #0
 8010d30:	e7e8      	b.n	8010d04 <_strtod_l+0xfc>
 8010d32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010d36:	f04f 3aff 	mov.w	sl, #4294967295
 8010d3a:	e7e3      	b.n	8010d04 <_strtod_l+0xfc>
 8010d3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d3e:	1c5a      	adds	r2, r3, #1
 8010d40:	921d      	str	r2, [sp, #116]	; 0x74
 8010d42:	785b      	ldrb	r3, [r3, #1]
 8010d44:	2b30      	cmp	r3, #48	; 0x30
 8010d46:	d0f9      	beq.n	8010d3c <_strtod_l+0x134>
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d09f      	beq.n	8010c8c <_strtod_l+0x84>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	f04f 0900 	mov.w	r9, #0
 8010d52:	9304      	str	r3, [sp, #16]
 8010d54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d56:	930a      	str	r3, [sp, #40]	; 0x28
 8010d58:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010d5c:	464f      	mov	r7, r9
 8010d5e:	220a      	movs	r2, #10
 8010d60:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010d62:	7806      	ldrb	r6, [r0, #0]
 8010d64:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010d68:	b2d9      	uxtb	r1, r3
 8010d6a:	2909      	cmp	r1, #9
 8010d6c:	d92a      	bls.n	8010dc4 <_strtod_l+0x1bc>
 8010d6e:	9907      	ldr	r1, [sp, #28]
 8010d70:	462a      	mov	r2, r5
 8010d72:	f7ff ff1a 	bl	8010baa <strncmp>
 8010d76:	b398      	cbz	r0, 8010de0 <_strtod_l+0x1d8>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	4633      	mov	r3, r6
 8010d7c:	463d      	mov	r5, r7
 8010d7e:	9007      	str	r0, [sp, #28]
 8010d80:	4602      	mov	r2, r0
 8010d82:	2b65      	cmp	r3, #101	; 0x65
 8010d84:	d001      	beq.n	8010d8a <_strtod_l+0x182>
 8010d86:	2b45      	cmp	r3, #69	; 0x45
 8010d88:	d118      	bne.n	8010dbc <_strtod_l+0x1b4>
 8010d8a:	b91d      	cbnz	r5, 8010d94 <_strtod_l+0x18c>
 8010d8c:	9b04      	ldr	r3, [sp, #16]
 8010d8e:	4303      	orrs	r3, r0
 8010d90:	d098      	beq.n	8010cc4 <_strtod_l+0xbc>
 8010d92:	2500      	movs	r5, #0
 8010d94:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010d98:	f108 0301 	add.w	r3, r8, #1
 8010d9c:	931d      	str	r3, [sp, #116]	; 0x74
 8010d9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010da2:	2b2b      	cmp	r3, #43	; 0x2b
 8010da4:	d075      	beq.n	8010e92 <_strtod_l+0x28a>
 8010da6:	2b2d      	cmp	r3, #45	; 0x2d
 8010da8:	d07b      	beq.n	8010ea2 <_strtod_l+0x29a>
 8010daa:	f04f 0c00 	mov.w	ip, #0
 8010dae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010db2:	2909      	cmp	r1, #9
 8010db4:	f240 8082 	bls.w	8010ebc <_strtod_l+0x2b4>
 8010db8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010dbc:	2600      	movs	r6, #0
 8010dbe:	e09d      	b.n	8010efc <_strtod_l+0x2f4>
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	e7c4      	b.n	8010d4e <_strtod_l+0x146>
 8010dc4:	2f08      	cmp	r7, #8
 8010dc6:	bfd8      	it	le
 8010dc8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010dca:	f100 0001 	add.w	r0, r0, #1
 8010dce:	bfda      	itte	le
 8010dd0:	fb02 3301 	mlale	r3, r2, r1, r3
 8010dd4:	9309      	strle	r3, [sp, #36]	; 0x24
 8010dd6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010dda:	3701      	adds	r7, #1
 8010ddc:	901d      	str	r0, [sp, #116]	; 0x74
 8010dde:	e7bf      	b.n	8010d60 <_strtod_l+0x158>
 8010de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010de2:	195a      	adds	r2, r3, r5
 8010de4:	921d      	str	r2, [sp, #116]	; 0x74
 8010de6:	5d5b      	ldrb	r3, [r3, r5]
 8010de8:	2f00      	cmp	r7, #0
 8010dea:	d037      	beq.n	8010e5c <_strtod_l+0x254>
 8010dec:	9007      	str	r0, [sp, #28]
 8010dee:	463d      	mov	r5, r7
 8010df0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010df4:	2a09      	cmp	r2, #9
 8010df6:	d912      	bls.n	8010e1e <_strtod_l+0x216>
 8010df8:	2201      	movs	r2, #1
 8010dfa:	e7c2      	b.n	8010d82 <_strtod_l+0x17a>
 8010dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010dfe:	1c5a      	adds	r2, r3, #1
 8010e00:	921d      	str	r2, [sp, #116]	; 0x74
 8010e02:	785b      	ldrb	r3, [r3, #1]
 8010e04:	3001      	adds	r0, #1
 8010e06:	2b30      	cmp	r3, #48	; 0x30
 8010e08:	d0f8      	beq.n	8010dfc <_strtod_l+0x1f4>
 8010e0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010e0e:	2a08      	cmp	r2, #8
 8010e10:	f200 84db 	bhi.w	80117ca <_strtod_l+0xbc2>
 8010e14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010e16:	9007      	str	r0, [sp, #28]
 8010e18:	2000      	movs	r0, #0
 8010e1a:	920a      	str	r2, [sp, #40]	; 0x28
 8010e1c:	4605      	mov	r5, r0
 8010e1e:	3b30      	subs	r3, #48	; 0x30
 8010e20:	f100 0201 	add.w	r2, r0, #1
 8010e24:	d014      	beq.n	8010e50 <_strtod_l+0x248>
 8010e26:	9907      	ldr	r1, [sp, #28]
 8010e28:	4411      	add	r1, r2
 8010e2a:	9107      	str	r1, [sp, #28]
 8010e2c:	462a      	mov	r2, r5
 8010e2e:	eb00 0e05 	add.w	lr, r0, r5
 8010e32:	210a      	movs	r1, #10
 8010e34:	4572      	cmp	r2, lr
 8010e36:	d113      	bne.n	8010e60 <_strtod_l+0x258>
 8010e38:	182a      	adds	r2, r5, r0
 8010e3a:	2a08      	cmp	r2, #8
 8010e3c:	f105 0501 	add.w	r5, r5, #1
 8010e40:	4405      	add	r5, r0
 8010e42:	dc1c      	bgt.n	8010e7e <_strtod_l+0x276>
 8010e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e46:	220a      	movs	r2, #10
 8010e48:	fb02 3301 	mla	r3, r2, r1, r3
 8010e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e4e:	2200      	movs	r2, #0
 8010e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010e52:	1c59      	adds	r1, r3, #1
 8010e54:	911d      	str	r1, [sp, #116]	; 0x74
 8010e56:	785b      	ldrb	r3, [r3, #1]
 8010e58:	4610      	mov	r0, r2
 8010e5a:	e7c9      	b.n	8010df0 <_strtod_l+0x1e8>
 8010e5c:	4638      	mov	r0, r7
 8010e5e:	e7d2      	b.n	8010e06 <_strtod_l+0x1fe>
 8010e60:	2a08      	cmp	r2, #8
 8010e62:	dc04      	bgt.n	8010e6e <_strtod_l+0x266>
 8010e64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010e66:	434e      	muls	r6, r1
 8010e68:	9609      	str	r6, [sp, #36]	; 0x24
 8010e6a:	3201      	adds	r2, #1
 8010e6c:	e7e2      	b.n	8010e34 <_strtod_l+0x22c>
 8010e6e:	f102 0c01 	add.w	ip, r2, #1
 8010e72:	f1bc 0f10 	cmp.w	ip, #16
 8010e76:	bfd8      	it	le
 8010e78:	fb01 f909 	mulle.w	r9, r1, r9
 8010e7c:	e7f5      	b.n	8010e6a <_strtod_l+0x262>
 8010e7e:	2d10      	cmp	r5, #16
 8010e80:	bfdc      	itt	le
 8010e82:	220a      	movle	r2, #10
 8010e84:	fb02 3909 	mlale	r9, r2, r9, r3
 8010e88:	e7e1      	b.n	8010e4e <_strtod_l+0x246>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	9307      	str	r3, [sp, #28]
 8010e8e:	2201      	movs	r2, #1
 8010e90:	e77c      	b.n	8010d8c <_strtod_l+0x184>
 8010e92:	f04f 0c00 	mov.w	ip, #0
 8010e96:	f108 0302 	add.w	r3, r8, #2
 8010e9a:	931d      	str	r3, [sp, #116]	; 0x74
 8010e9c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010ea0:	e785      	b.n	8010dae <_strtod_l+0x1a6>
 8010ea2:	f04f 0c01 	mov.w	ip, #1
 8010ea6:	e7f6      	b.n	8010e96 <_strtod_l+0x28e>
 8010ea8:	08015d54 	.word	0x08015d54
 8010eac:	08015c24 	.word	0x08015c24
 8010eb0:	7ff00000 	.word	0x7ff00000
 8010eb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010eb6:	1c59      	adds	r1, r3, #1
 8010eb8:	911d      	str	r1, [sp, #116]	; 0x74
 8010eba:	785b      	ldrb	r3, [r3, #1]
 8010ebc:	2b30      	cmp	r3, #48	; 0x30
 8010ebe:	d0f9      	beq.n	8010eb4 <_strtod_l+0x2ac>
 8010ec0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010ec4:	2908      	cmp	r1, #8
 8010ec6:	f63f af79 	bhi.w	8010dbc <_strtod_l+0x1b4>
 8010eca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010ece:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ed0:	9308      	str	r3, [sp, #32]
 8010ed2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ed4:	1c59      	adds	r1, r3, #1
 8010ed6:	911d      	str	r1, [sp, #116]	; 0x74
 8010ed8:	785b      	ldrb	r3, [r3, #1]
 8010eda:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010ede:	2e09      	cmp	r6, #9
 8010ee0:	d937      	bls.n	8010f52 <_strtod_l+0x34a>
 8010ee2:	9e08      	ldr	r6, [sp, #32]
 8010ee4:	1b89      	subs	r1, r1, r6
 8010ee6:	2908      	cmp	r1, #8
 8010ee8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010eec:	dc02      	bgt.n	8010ef4 <_strtod_l+0x2ec>
 8010eee:	4576      	cmp	r6, lr
 8010ef0:	bfa8      	it	ge
 8010ef2:	4676      	movge	r6, lr
 8010ef4:	f1bc 0f00 	cmp.w	ip, #0
 8010ef8:	d000      	beq.n	8010efc <_strtod_l+0x2f4>
 8010efa:	4276      	negs	r6, r6
 8010efc:	2d00      	cmp	r5, #0
 8010efe:	d14f      	bne.n	8010fa0 <_strtod_l+0x398>
 8010f00:	9904      	ldr	r1, [sp, #16]
 8010f02:	4301      	orrs	r1, r0
 8010f04:	f47f aec2 	bne.w	8010c8c <_strtod_l+0x84>
 8010f08:	2a00      	cmp	r2, #0
 8010f0a:	f47f aedb 	bne.w	8010cc4 <_strtod_l+0xbc>
 8010f0e:	2b69      	cmp	r3, #105	; 0x69
 8010f10:	d027      	beq.n	8010f62 <_strtod_l+0x35a>
 8010f12:	dc24      	bgt.n	8010f5e <_strtod_l+0x356>
 8010f14:	2b49      	cmp	r3, #73	; 0x49
 8010f16:	d024      	beq.n	8010f62 <_strtod_l+0x35a>
 8010f18:	2b4e      	cmp	r3, #78	; 0x4e
 8010f1a:	f47f aed3 	bne.w	8010cc4 <_strtod_l+0xbc>
 8010f1e:	499e      	ldr	r1, [pc, #632]	; (8011198 <_strtod_l+0x590>)
 8010f20:	a81d      	add	r0, sp, #116	; 0x74
 8010f22:	f001 f9df 	bl	80122e4 <__match>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	f43f aecc 	beq.w	8010cc4 <_strtod_l+0xbc>
 8010f2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2b28      	cmp	r3, #40	; 0x28
 8010f32:	d12d      	bne.n	8010f90 <_strtod_l+0x388>
 8010f34:	4999      	ldr	r1, [pc, #612]	; (801119c <_strtod_l+0x594>)
 8010f36:	aa20      	add	r2, sp, #128	; 0x80
 8010f38:	a81d      	add	r0, sp, #116	; 0x74
 8010f3a:	f001 f9e7 	bl	801230c <__hexnan>
 8010f3e:	2805      	cmp	r0, #5
 8010f40:	d126      	bne.n	8010f90 <_strtod_l+0x388>
 8010f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f44:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010f48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010f4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010f50:	e69c      	b.n	8010c8c <_strtod_l+0x84>
 8010f52:	210a      	movs	r1, #10
 8010f54:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010f58:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010f5c:	e7b9      	b.n	8010ed2 <_strtod_l+0x2ca>
 8010f5e:	2b6e      	cmp	r3, #110	; 0x6e
 8010f60:	e7db      	b.n	8010f1a <_strtod_l+0x312>
 8010f62:	498f      	ldr	r1, [pc, #572]	; (80111a0 <_strtod_l+0x598>)
 8010f64:	a81d      	add	r0, sp, #116	; 0x74
 8010f66:	f001 f9bd 	bl	80122e4 <__match>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	f43f aeaa 	beq.w	8010cc4 <_strtod_l+0xbc>
 8010f70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f72:	498c      	ldr	r1, [pc, #560]	; (80111a4 <_strtod_l+0x59c>)
 8010f74:	3b01      	subs	r3, #1
 8010f76:	a81d      	add	r0, sp, #116	; 0x74
 8010f78:	931d      	str	r3, [sp, #116]	; 0x74
 8010f7a:	f001 f9b3 	bl	80122e4 <__match>
 8010f7e:	b910      	cbnz	r0, 8010f86 <_strtod_l+0x37e>
 8010f80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f82:	3301      	adds	r3, #1
 8010f84:	931d      	str	r3, [sp, #116]	; 0x74
 8010f86:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80111b4 <_strtod_l+0x5ac>
 8010f8a:	f04f 0a00 	mov.w	sl, #0
 8010f8e:	e67d      	b.n	8010c8c <_strtod_l+0x84>
 8010f90:	4885      	ldr	r0, [pc, #532]	; (80111a8 <_strtod_l+0x5a0>)
 8010f92:	f002 fc3d 	bl	8013810 <nan>
 8010f96:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010f9a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010f9e:	e675      	b.n	8010c8c <_strtod_l+0x84>
 8010fa0:	9b07      	ldr	r3, [sp, #28]
 8010fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fa4:	1af3      	subs	r3, r6, r3
 8010fa6:	2f00      	cmp	r7, #0
 8010fa8:	bf08      	it	eq
 8010faa:	462f      	moveq	r7, r5
 8010fac:	2d10      	cmp	r5, #16
 8010fae:	9308      	str	r3, [sp, #32]
 8010fb0:	46a8      	mov	r8, r5
 8010fb2:	bfa8      	it	ge
 8010fb4:	f04f 0810 	movge.w	r8, #16
 8010fb8:	f7ef fabc 	bl	8000534 <__aeabi_ui2d>
 8010fbc:	2d09      	cmp	r5, #9
 8010fbe:	4682      	mov	sl, r0
 8010fc0:	468b      	mov	fp, r1
 8010fc2:	dd13      	ble.n	8010fec <_strtod_l+0x3e4>
 8010fc4:	4b79      	ldr	r3, [pc, #484]	; (80111ac <_strtod_l+0x5a4>)
 8010fc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010fca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010fce:	f7ef fb2b 	bl	8000628 <__aeabi_dmul>
 8010fd2:	4682      	mov	sl, r0
 8010fd4:	4648      	mov	r0, r9
 8010fd6:	468b      	mov	fp, r1
 8010fd8:	f7ef faac 	bl	8000534 <__aeabi_ui2d>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	4650      	mov	r0, sl
 8010fe2:	4659      	mov	r1, fp
 8010fe4:	f7ef f96a 	bl	80002bc <__adddf3>
 8010fe8:	4682      	mov	sl, r0
 8010fea:	468b      	mov	fp, r1
 8010fec:	2d0f      	cmp	r5, #15
 8010fee:	dc38      	bgt.n	8011062 <_strtod_l+0x45a>
 8010ff0:	9b08      	ldr	r3, [sp, #32]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	f43f ae4a 	beq.w	8010c8c <_strtod_l+0x84>
 8010ff8:	dd24      	ble.n	8011044 <_strtod_l+0x43c>
 8010ffa:	2b16      	cmp	r3, #22
 8010ffc:	dc0b      	bgt.n	8011016 <_strtod_l+0x40e>
 8010ffe:	4d6b      	ldr	r5, [pc, #428]	; (80111ac <_strtod_l+0x5a4>)
 8011000:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011004:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011008:	4652      	mov	r2, sl
 801100a:	465b      	mov	r3, fp
 801100c:	f7ef fb0c 	bl	8000628 <__aeabi_dmul>
 8011010:	4682      	mov	sl, r0
 8011012:	468b      	mov	fp, r1
 8011014:	e63a      	b.n	8010c8c <_strtod_l+0x84>
 8011016:	9a08      	ldr	r2, [sp, #32]
 8011018:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801101c:	4293      	cmp	r3, r2
 801101e:	db20      	blt.n	8011062 <_strtod_l+0x45a>
 8011020:	4c62      	ldr	r4, [pc, #392]	; (80111ac <_strtod_l+0x5a4>)
 8011022:	f1c5 050f 	rsb	r5, r5, #15
 8011026:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801102a:	4652      	mov	r2, sl
 801102c:	465b      	mov	r3, fp
 801102e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011032:	f7ef faf9 	bl	8000628 <__aeabi_dmul>
 8011036:	9b08      	ldr	r3, [sp, #32]
 8011038:	1b5d      	subs	r5, r3, r5
 801103a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801103e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011042:	e7e3      	b.n	801100c <_strtod_l+0x404>
 8011044:	9b08      	ldr	r3, [sp, #32]
 8011046:	3316      	adds	r3, #22
 8011048:	db0b      	blt.n	8011062 <_strtod_l+0x45a>
 801104a:	9b07      	ldr	r3, [sp, #28]
 801104c:	4a57      	ldr	r2, [pc, #348]	; (80111ac <_strtod_l+0x5a4>)
 801104e:	1b9e      	subs	r6, r3, r6
 8011050:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011058:	4650      	mov	r0, sl
 801105a:	4659      	mov	r1, fp
 801105c:	f7ef fc0e 	bl	800087c <__aeabi_ddiv>
 8011060:	e7d6      	b.n	8011010 <_strtod_l+0x408>
 8011062:	9b08      	ldr	r3, [sp, #32]
 8011064:	eba5 0808 	sub.w	r8, r5, r8
 8011068:	4498      	add	r8, r3
 801106a:	f1b8 0f00 	cmp.w	r8, #0
 801106e:	dd71      	ble.n	8011154 <_strtod_l+0x54c>
 8011070:	f018 030f 	ands.w	r3, r8, #15
 8011074:	d00a      	beq.n	801108c <_strtod_l+0x484>
 8011076:	494d      	ldr	r1, [pc, #308]	; (80111ac <_strtod_l+0x5a4>)
 8011078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801107c:	4652      	mov	r2, sl
 801107e:	465b      	mov	r3, fp
 8011080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011084:	f7ef fad0 	bl	8000628 <__aeabi_dmul>
 8011088:	4682      	mov	sl, r0
 801108a:	468b      	mov	fp, r1
 801108c:	f038 080f 	bics.w	r8, r8, #15
 8011090:	d04d      	beq.n	801112e <_strtod_l+0x526>
 8011092:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011096:	dd22      	ble.n	80110de <_strtod_l+0x4d6>
 8011098:	2500      	movs	r5, #0
 801109a:	462e      	mov	r6, r5
 801109c:	9509      	str	r5, [sp, #36]	; 0x24
 801109e:	9507      	str	r5, [sp, #28]
 80110a0:	2322      	movs	r3, #34	; 0x22
 80110a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80111b4 <_strtod_l+0x5ac>
 80110a6:	6023      	str	r3, [r4, #0]
 80110a8:	f04f 0a00 	mov.w	sl, #0
 80110ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	f43f adec 	beq.w	8010c8c <_strtod_l+0x84>
 80110b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80110b6:	4620      	mov	r0, r4
 80110b8:	f001 fa9c 	bl	80125f4 <_Bfree>
 80110bc:	9907      	ldr	r1, [sp, #28]
 80110be:	4620      	mov	r0, r4
 80110c0:	f001 fa98 	bl	80125f4 <_Bfree>
 80110c4:	4631      	mov	r1, r6
 80110c6:	4620      	mov	r0, r4
 80110c8:	f001 fa94 	bl	80125f4 <_Bfree>
 80110cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80110ce:	4620      	mov	r0, r4
 80110d0:	f001 fa90 	bl	80125f4 <_Bfree>
 80110d4:	4629      	mov	r1, r5
 80110d6:	4620      	mov	r0, r4
 80110d8:	f001 fa8c 	bl	80125f4 <_Bfree>
 80110dc:	e5d6      	b.n	8010c8c <_strtod_l+0x84>
 80110de:	2300      	movs	r3, #0
 80110e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80110e4:	4650      	mov	r0, sl
 80110e6:	4659      	mov	r1, fp
 80110e8:	4699      	mov	r9, r3
 80110ea:	f1b8 0f01 	cmp.w	r8, #1
 80110ee:	dc21      	bgt.n	8011134 <_strtod_l+0x52c>
 80110f0:	b10b      	cbz	r3, 80110f6 <_strtod_l+0x4ee>
 80110f2:	4682      	mov	sl, r0
 80110f4:	468b      	mov	fp, r1
 80110f6:	4b2e      	ldr	r3, [pc, #184]	; (80111b0 <_strtod_l+0x5a8>)
 80110f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80110fc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011100:	4652      	mov	r2, sl
 8011102:	465b      	mov	r3, fp
 8011104:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011108:	f7ef fa8e 	bl	8000628 <__aeabi_dmul>
 801110c:	4b29      	ldr	r3, [pc, #164]	; (80111b4 <_strtod_l+0x5ac>)
 801110e:	460a      	mov	r2, r1
 8011110:	400b      	ands	r3, r1
 8011112:	4929      	ldr	r1, [pc, #164]	; (80111b8 <_strtod_l+0x5b0>)
 8011114:	428b      	cmp	r3, r1
 8011116:	4682      	mov	sl, r0
 8011118:	d8be      	bhi.n	8011098 <_strtod_l+0x490>
 801111a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801111e:	428b      	cmp	r3, r1
 8011120:	bf86      	itte	hi
 8011122:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80111bc <_strtod_l+0x5b4>
 8011126:	f04f 3aff 	movhi.w	sl, #4294967295
 801112a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801112e:	2300      	movs	r3, #0
 8011130:	9304      	str	r3, [sp, #16]
 8011132:	e081      	b.n	8011238 <_strtod_l+0x630>
 8011134:	f018 0f01 	tst.w	r8, #1
 8011138:	d007      	beq.n	801114a <_strtod_l+0x542>
 801113a:	4b1d      	ldr	r3, [pc, #116]	; (80111b0 <_strtod_l+0x5a8>)
 801113c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011144:	f7ef fa70 	bl	8000628 <__aeabi_dmul>
 8011148:	2301      	movs	r3, #1
 801114a:	f109 0901 	add.w	r9, r9, #1
 801114e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011152:	e7ca      	b.n	80110ea <_strtod_l+0x4e2>
 8011154:	d0eb      	beq.n	801112e <_strtod_l+0x526>
 8011156:	f1c8 0800 	rsb	r8, r8, #0
 801115a:	f018 020f 	ands.w	r2, r8, #15
 801115e:	d00a      	beq.n	8011176 <_strtod_l+0x56e>
 8011160:	4b12      	ldr	r3, [pc, #72]	; (80111ac <_strtod_l+0x5a4>)
 8011162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011166:	4650      	mov	r0, sl
 8011168:	4659      	mov	r1, fp
 801116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116e:	f7ef fb85 	bl	800087c <__aeabi_ddiv>
 8011172:	4682      	mov	sl, r0
 8011174:	468b      	mov	fp, r1
 8011176:	ea5f 1828 	movs.w	r8, r8, asr #4
 801117a:	d0d8      	beq.n	801112e <_strtod_l+0x526>
 801117c:	f1b8 0f1f 	cmp.w	r8, #31
 8011180:	dd1e      	ble.n	80111c0 <_strtod_l+0x5b8>
 8011182:	2500      	movs	r5, #0
 8011184:	462e      	mov	r6, r5
 8011186:	9509      	str	r5, [sp, #36]	; 0x24
 8011188:	9507      	str	r5, [sp, #28]
 801118a:	2322      	movs	r3, #34	; 0x22
 801118c:	f04f 0a00 	mov.w	sl, #0
 8011190:	f04f 0b00 	mov.w	fp, #0
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	e789      	b.n	80110ac <_strtod_l+0x4a4>
 8011198:	08015c21 	.word	0x08015c21
 801119c:	08015c38 	.word	0x08015c38
 80111a0:	08015c18 	.word	0x08015c18
 80111a4:	08015c1b 	.word	0x08015c1b
 80111a8:	08015f4a 	.word	0x08015f4a
 80111ac:	08015e08 	.word	0x08015e08
 80111b0:	08015de0 	.word	0x08015de0
 80111b4:	7ff00000 	.word	0x7ff00000
 80111b8:	7ca00000 	.word	0x7ca00000
 80111bc:	7fefffff 	.word	0x7fefffff
 80111c0:	f018 0310 	ands.w	r3, r8, #16
 80111c4:	bf18      	it	ne
 80111c6:	236a      	movne	r3, #106	; 0x6a
 80111c8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011580 <_strtod_l+0x978>
 80111cc:	9304      	str	r3, [sp, #16]
 80111ce:	4650      	mov	r0, sl
 80111d0:	4659      	mov	r1, fp
 80111d2:	2300      	movs	r3, #0
 80111d4:	f018 0f01 	tst.w	r8, #1
 80111d8:	d004      	beq.n	80111e4 <_strtod_l+0x5dc>
 80111da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80111de:	f7ef fa23 	bl	8000628 <__aeabi_dmul>
 80111e2:	2301      	movs	r3, #1
 80111e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80111e8:	f109 0908 	add.w	r9, r9, #8
 80111ec:	d1f2      	bne.n	80111d4 <_strtod_l+0x5cc>
 80111ee:	b10b      	cbz	r3, 80111f4 <_strtod_l+0x5ec>
 80111f0:	4682      	mov	sl, r0
 80111f2:	468b      	mov	fp, r1
 80111f4:	9b04      	ldr	r3, [sp, #16]
 80111f6:	b1bb      	cbz	r3, 8011228 <_strtod_l+0x620>
 80111f8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80111fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011200:	2b00      	cmp	r3, #0
 8011202:	4659      	mov	r1, fp
 8011204:	dd10      	ble.n	8011228 <_strtod_l+0x620>
 8011206:	2b1f      	cmp	r3, #31
 8011208:	f340 8128 	ble.w	801145c <_strtod_l+0x854>
 801120c:	2b34      	cmp	r3, #52	; 0x34
 801120e:	bfde      	ittt	le
 8011210:	3b20      	suble	r3, #32
 8011212:	f04f 32ff 	movle.w	r2, #4294967295
 8011216:	fa02 f303 	lslle.w	r3, r2, r3
 801121a:	f04f 0a00 	mov.w	sl, #0
 801121e:	bfcc      	ite	gt
 8011220:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011224:	ea03 0b01 	andle.w	fp, r3, r1
 8011228:	2200      	movs	r2, #0
 801122a:	2300      	movs	r3, #0
 801122c:	4650      	mov	r0, sl
 801122e:	4659      	mov	r1, fp
 8011230:	f7ef fc62 	bl	8000af8 <__aeabi_dcmpeq>
 8011234:	2800      	cmp	r0, #0
 8011236:	d1a4      	bne.n	8011182 <_strtod_l+0x57a>
 8011238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801123e:	462b      	mov	r3, r5
 8011240:	463a      	mov	r2, r7
 8011242:	4620      	mov	r0, r4
 8011244:	f001 fa42 	bl	80126cc <__s2b>
 8011248:	9009      	str	r0, [sp, #36]	; 0x24
 801124a:	2800      	cmp	r0, #0
 801124c:	f43f af24 	beq.w	8011098 <_strtod_l+0x490>
 8011250:	9b07      	ldr	r3, [sp, #28]
 8011252:	1b9e      	subs	r6, r3, r6
 8011254:	9b08      	ldr	r3, [sp, #32]
 8011256:	2b00      	cmp	r3, #0
 8011258:	bfb4      	ite	lt
 801125a:	4633      	movlt	r3, r6
 801125c:	2300      	movge	r3, #0
 801125e:	9310      	str	r3, [sp, #64]	; 0x40
 8011260:	9b08      	ldr	r3, [sp, #32]
 8011262:	2500      	movs	r5, #0
 8011264:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011268:	9318      	str	r3, [sp, #96]	; 0x60
 801126a:	462e      	mov	r6, r5
 801126c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801126e:	4620      	mov	r0, r4
 8011270:	6859      	ldr	r1, [r3, #4]
 8011272:	f001 f97f 	bl	8012574 <_Balloc>
 8011276:	9007      	str	r0, [sp, #28]
 8011278:	2800      	cmp	r0, #0
 801127a:	f43f af11 	beq.w	80110a0 <_strtod_l+0x498>
 801127e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011280:	691a      	ldr	r2, [r3, #16]
 8011282:	3202      	adds	r2, #2
 8011284:	f103 010c 	add.w	r1, r3, #12
 8011288:	0092      	lsls	r2, r2, #2
 801128a:	300c      	adds	r0, #12
 801128c:	f7ff f926 	bl	80104dc <memcpy>
 8011290:	ec4b ab10 	vmov	d0, sl, fp
 8011294:	aa20      	add	r2, sp, #128	; 0x80
 8011296:	a91f      	add	r1, sp, #124	; 0x7c
 8011298:	4620      	mov	r0, r4
 801129a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801129e:	f001 fd51 	bl	8012d44 <__d2b>
 80112a2:	901e      	str	r0, [sp, #120]	; 0x78
 80112a4:	2800      	cmp	r0, #0
 80112a6:	f43f aefb 	beq.w	80110a0 <_strtod_l+0x498>
 80112aa:	2101      	movs	r1, #1
 80112ac:	4620      	mov	r0, r4
 80112ae:	f001 faa7 	bl	8012800 <__i2b>
 80112b2:	4606      	mov	r6, r0
 80112b4:	2800      	cmp	r0, #0
 80112b6:	f43f aef3 	beq.w	80110a0 <_strtod_l+0x498>
 80112ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80112bc:	9904      	ldr	r1, [sp, #16]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	bfab      	itete	ge
 80112c2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80112c4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80112c6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80112c8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80112cc:	bfac      	ite	ge
 80112ce:	eb03 0902 	addge.w	r9, r3, r2
 80112d2:	1ad7      	sublt	r7, r2, r3
 80112d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80112d6:	eba3 0801 	sub.w	r8, r3, r1
 80112da:	4490      	add	r8, r2
 80112dc:	4ba3      	ldr	r3, [pc, #652]	; (801156c <_strtod_l+0x964>)
 80112de:	f108 38ff 	add.w	r8, r8, #4294967295
 80112e2:	4598      	cmp	r8, r3
 80112e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80112e8:	f280 80cc 	bge.w	8011484 <_strtod_l+0x87c>
 80112ec:	eba3 0308 	sub.w	r3, r3, r8
 80112f0:	2b1f      	cmp	r3, #31
 80112f2:	eba2 0203 	sub.w	r2, r2, r3
 80112f6:	f04f 0101 	mov.w	r1, #1
 80112fa:	f300 80b6 	bgt.w	801146a <_strtod_l+0x862>
 80112fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011302:	9311      	str	r3, [sp, #68]	; 0x44
 8011304:	2300      	movs	r3, #0
 8011306:	930c      	str	r3, [sp, #48]	; 0x30
 8011308:	eb09 0802 	add.w	r8, r9, r2
 801130c:	9b04      	ldr	r3, [sp, #16]
 801130e:	45c1      	cmp	r9, r8
 8011310:	4417      	add	r7, r2
 8011312:	441f      	add	r7, r3
 8011314:	464b      	mov	r3, r9
 8011316:	bfa8      	it	ge
 8011318:	4643      	movge	r3, r8
 801131a:	42bb      	cmp	r3, r7
 801131c:	bfa8      	it	ge
 801131e:	463b      	movge	r3, r7
 8011320:	2b00      	cmp	r3, #0
 8011322:	bfc2      	ittt	gt
 8011324:	eba8 0803 	subgt.w	r8, r8, r3
 8011328:	1aff      	subgt	r7, r7, r3
 801132a:	eba9 0903 	subgt.w	r9, r9, r3
 801132e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011330:	2b00      	cmp	r3, #0
 8011332:	dd17      	ble.n	8011364 <_strtod_l+0x75c>
 8011334:	4631      	mov	r1, r6
 8011336:	461a      	mov	r2, r3
 8011338:	4620      	mov	r0, r4
 801133a:	f001 fb1d 	bl	8012978 <__pow5mult>
 801133e:	4606      	mov	r6, r0
 8011340:	2800      	cmp	r0, #0
 8011342:	f43f aead 	beq.w	80110a0 <_strtod_l+0x498>
 8011346:	4601      	mov	r1, r0
 8011348:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801134a:	4620      	mov	r0, r4
 801134c:	f001 fa6e 	bl	801282c <__multiply>
 8011350:	900f      	str	r0, [sp, #60]	; 0x3c
 8011352:	2800      	cmp	r0, #0
 8011354:	f43f aea4 	beq.w	80110a0 <_strtod_l+0x498>
 8011358:	991e      	ldr	r1, [sp, #120]	; 0x78
 801135a:	4620      	mov	r0, r4
 801135c:	f001 f94a 	bl	80125f4 <_Bfree>
 8011360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011362:	931e      	str	r3, [sp, #120]	; 0x78
 8011364:	f1b8 0f00 	cmp.w	r8, #0
 8011368:	f300 8091 	bgt.w	801148e <_strtod_l+0x886>
 801136c:	9b08      	ldr	r3, [sp, #32]
 801136e:	2b00      	cmp	r3, #0
 8011370:	dd08      	ble.n	8011384 <_strtod_l+0x77c>
 8011372:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011374:	9907      	ldr	r1, [sp, #28]
 8011376:	4620      	mov	r0, r4
 8011378:	f001 fafe 	bl	8012978 <__pow5mult>
 801137c:	9007      	str	r0, [sp, #28]
 801137e:	2800      	cmp	r0, #0
 8011380:	f43f ae8e 	beq.w	80110a0 <_strtod_l+0x498>
 8011384:	2f00      	cmp	r7, #0
 8011386:	dd08      	ble.n	801139a <_strtod_l+0x792>
 8011388:	9907      	ldr	r1, [sp, #28]
 801138a:	463a      	mov	r2, r7
 801138c:	4620      	mov	r0, r4
 801138e:	f001 fb4d 	bl	8012a2c <__lshift>
 8011392:	9007      	str	r0, [sp, #28]
 8011394:	2800      	cmp	r0, #0
 8011396:	f43f ae83 	beq.w	80110a0 <_strtod_l+0x498>
 801139a:	f1b9 0f00 	cmp.w	r9, #0
 801139e:	dd08      	ble.n	80113b2 <_strtod_l+0x7aa>
 80113a0:	4631      	mov	r1, r6
 80113a2:	464a      	mov	r2, r9
 80113a4:	4620      	mov	r0, r4
 80113a6:	f001 fb41 	bl	8012a2c <__lshift>
 80113aa:	4606      	mov	r6, r0
 80113ac:	2800      	cmp	r0, #0
 80113ae:	f43f ae77 	beq.w	80110a0 <_strtod_l+0x498>
 80113b2:	9a07      	ldr	r2, [sp, #28]
 80113b4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80113b6:	4620      	mov	r0, r4
 80113b8:	f001 fbc0 	bl	8012b3c <__mdiff>
 80113bc:	4605      	mov	r5, r0
 80113be:	2800      	cmp	r0, #0
 80113c0:	f43f ae6e 	beq.w	80110a0 <_strtod_l+0x498>
 80113c4:	68c3      	ldr	r3, [r0, #12]
 80113c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80113c8:	2300      	movs	r3, #0
 80113ca:	60c3      	str	r3, [r0, #12]
 80113cc:	4631      	mov	r1, r6
 80113ce:	f001 fb99 	bl	8012b04 <__mcmp>
 80113d2:	2800      	cmp	r0, #0
 80113d4:	da65      	bge.n	80114a2 <_strtod_l+0x89a>
 80113d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80113d8:	ea53 030a 	orrs.w	r3, r3, sl
 80113dc:	f040 8087 	bne.w	80114ee <_strtod_l+0x8e6>
 80113e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f040 8082 	bne.w	80114ee <_strtod_l+0x8e6>
 80113ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113ee:	0d1b      	lsrs	r3, r3, #20
 80113f0:	051b      	lsls	r3, r3, #20
 80113f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80113f6:	d97a      	bls.n	80114ee <_strtod_l+0x8e6>
 80113f8:	696b      	ldr	r3, [r5, #20]
 80113fa:	b913      	cbnz	r3, 8011402 <_strtod_l+0x7fa>
 80113fc:	692b      	ldr	r3, [r5, #16]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	dd75      	ble.n	80114ee <_strtod_l+0x8e6>
 8011402:	4629      	mov	r1, r5
 8011404:	2201      	movs	r2, #1
 8011406:	4620      	mov	r0, r4
 8011408:	f001 fb10 	bl	8012a2c <__lshift>
 801140c:	4631      	mov	r1, r6
 801140e:	4605      	mov	r5, r0
 8011410:	f001 fb78 	bl	8012b04 <__mcmp>
 8011414:	2800      	cmp	r0, #0
 8011416:	dd6a      	ble.n	80114ee <_strtod_l+0x8e6>
 8011418:	9904      	ldr	r1, [sp, #16]
 801141a:	4a55      	ldr	r2, [pc, #340]	; (8011570 <_strtod_l+0x968>)
 801141c:	465b      	mov	r3, fp
 801141e:	2900      	cmp	r1, #0
 8011420:	f000 8085 	beq.w	801152e <_strtod_l+0x926>
 8011424:	ea02 010b 	and.w	r1, r2, fp
 8011428:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801142c:	dc7f      	bgt.n	801152e <_strtod_l+0x926>
 801142e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011432:	f77f aeaa 	ble.w	801118a <_strtod_l+0x582>
 8011436:	4a4f      	ldr	r2, [pc, #316]	; (8011574 <_strtod_l+0x96c>)
 8011438:	2300      	movs	r3, #0
 801143a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801143e:	4650      	mov	r0, sl
 8011440:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011444:	4659      	mov	r1, fp
 8011446:	f7ef f8ef 	bl	8000628 <__aeabi_dmul>
 801144a:	460b      	mov	r3, r1
 801144c:	4303      	orrs	r3, r0
 801144e:	bf08      	it	eq
 8011450:	2322      	moveq	r3, #34	; 0x22
 8011452:	4682      	mov	sl, r0
 8011454:	468b      	mov	fp, r1
 8011456:	bf08      	it	eq
 8011458:	6023      	streq	r3, [r4, #0]
 801145a:	e62b      	b.n	80110b4 <_strtod_l+0x4ac>
 801145c:	f04f 32ff 	mov.w	r2, #4294967295
 8011460:	fa02 f303 	lsl.w	r3, r2, r3
 8011464:	ea03 0a0a 	and.w	sl, r3, sl
 8011468:	e6de      	b.n	8011228 <_strtod_l+0x620>
 801146a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801146e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011472:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011476:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801147a:	fa01 f308 	lsl.w	r3, r1, r8
 801147e:	930c      	str	r3, [sp, #48]	; 0x30
 8011480:	9111      	str	r1, [sp, #68]	; 0x44
 8011482:	e741      	b.n	8011308 <_strtod_l+0x700>
 8011484:	2300      	movs	r3, #0
 8011486:	930c      	str	r3, [sp, #48]	; 0x30
 8011488:	2301      	movs	r3, #1
 801148a:	9311      	str	r3, [sp, #68]	; 0x44
 801148c:	e73c      	b.n	8011308 <_strtod_l+0x700>
 801148e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011490:	4642      	mov	r2, r8
 8011492:	4620      	mov	r0, r4
 8011494:	f001 faca 	bl	8012a2c <__lshift>
 8011498:	901e      	str	r0, [sp, #120]	; 0x78
 801149a:	2800      	cmp	r0, #0
 801149c:	f47f af66 	bne.w	801136c <_strtod_l+0x764>
 80114a0:	e5fe      	b.n	80110a0 <_strtod_l+0x498>
 80114a2:	465f      	mov	r7, fp
 80114a4:	d16e      	bne.n	8011584 <_strtod_l+0x97c>
 80114a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114ac:	b342      	cbz	r2, 8011500 <_strtod_l+0x8f8>
 80114ae:	4a32      	ldr	r2, [pc, #200]	; (8011578 <_strtod_l+0x970>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d128      	bne.n	8011506 <_strtod_l+0x8fe>
 80114b4:	9b04      	ldr	r3, [sp, #16]
 80114b6:	4650      	mov	r0, sl
 80114b8:	b1eb      	cbz	r3, 80114f6 <_strtod_l+0x8ee>
 80114ba:	4a2d      	ldr	r2, [pc, #180]	; (8011570 <_strtod_l+0x968>)
 80114bc:	403a      	ands	r2, r7
 80114be:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80114c2:	f04f 31ff 	mov.w	r1, #4294967295
 80114c6:	d819      	bhi.n	80114fc <_strtod_l+0x8f4>
 80114c8:	0d12      	lsrs	r2, r2, #20
 80114ca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80114ce:	fa01 f303 	lsl.w	r3, r1, r3
 80114d2:	4298      	cmp	r0, r3
 80114d4:	d117      	bne.n	8011506 <_strtod_l+0x8fe>
 80114d6:	4b29      	ldr	r3, [pc, #164]	; (801157c <_strtod_l+0x974>)
 80114d8:	429f      	cmp	r7, r3
 80114da:	d102      	bne.n	80114e2 <_strtod_l+0x8da>
 80114dc:	3001      	adds	r0, #1
 80114de:	f43f addf 	beq.w	80110a0 <_strtod_l+0x498>
 80114e2:	4b23      	ldr	r3, [pc, #140]	; (8011570 <_strtod_l+0x968>)
 80114e4:	403b      	ands	r3, r7
 80114e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80114ea:	f04f 0a00 	mov.w	sl, #0
 80114ee:	9b04      	ldr	r3, [sp, #16]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d1a0      	bne.n	8011436 <_strtod_l+0x82e>
 80114f4:	e5de      	b.n	80110b4 <_strtod_l+0x4ac>
 80114f6:	f04f 33ff 	mov.w	r3, #4294967295
 80114fa:	e7ea      	b.n	80114d2 <_strtod_l+0x8ca>
 80114fc:	460b      	mov	r3, r1
 80114fe:	e7e8      	b.n	80114d2 <_strtod_l+0x8ca>
 8011500:	ea53 030a 	orrs.w	r3, r3, sl
 8011504:	d088      	beq.n	8011418 <_strtod_l+0x810>
 8011506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011508:	b1db      	cbz	r3, 8011542 <_strtod_l+0x93a>
 801150a:	423b      	tst	r3, r7
 801150c:	d0ef      	beq.n	80114ee <_strtod_l+0x8e6>
 801150e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011510:	9a04      	ldr	r2, [sp, #16]
 8011512:	4650      	mov	r0, sl
 8011514:	4659      	mov	r1, fp
 8011516:	b1c3      	cbz	r3, 801154a <_strtod_l+0x942>
 8011518:	f7ff fb59 	bl	8010bce <sulp>
 801151c:	4602      	mov	r2, r0
 801151e:	460b      	mov	r3, r1
 8011520:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011524:	f7ee feca 	bl	80002bc <__adddf3>
 8011528:	4682      	mov	sl, r0
 801152a:	468b      	mov	fp, r1
 801152c:	e7df      	b.n	80114ee <_strtod_l+0x8e6>
 801152e:	4013      	ands	r3, r2
 8011530:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011534:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011538:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801153c:	f04f 3aff 	mov.w	sl, #4294967295
 8011540:	e7d5      	b.n	80114ee <_strtod_l+0x8e6>
 8011542:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011544:	ea13 0f0a 	tst.w	r3, sl
 8011548:	e7e0      	b.n	801150c <_strtod_l+0x904>
 801154a:	f7ff fb40 	bl	8010bce <sulp>
 801154e:	4602      	mov	r2, r0
 8011550:	460b      	mov	r3, r1
 8011552:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011556:	f7ee feaf 	bl	80002b8 <__aeabi_dsub>
 801155a:	2200      	movs	r2, #0
 801155c:	2300      	movs	r3, #0
 801155e:	4682      	mov	sl, r0
 8011560:	468b      	mov	fp, r1
 8011562:	f7ef fac9 	bl	8000af8 <__aeabi_dcmpeq>
 8011566:	2800      	cmp	r0, #0
 8011568:	d0c1      	beq.n	80114ee <_strtod_l+0x8e6>
 801156a:	e60e      	b.n	801118a <_strtod_l+0x582>
 801156c:	fffffc02 	.word	0xfffffc02
 8011570:	7ff00000 	.word	0x7ff00000
 8011574:	39500000 	.word	0x39500000
 8011578:	000fffff 	.word	0x000fffff
 801157c:	7fefffff 	.word	0x7fefffff
 8011580:	08015c50 	.word	0x08015c50
 8011584:	4631      	mov	r1, r6
 8011586:	4628      	mov	r0, r5
 8011588:	f001 fc38 	bl	8012dfc <__ratio>
 801158c:	ec59 8b10 	vmov	r8, r9, d0
 8011590:	ee10 0a10 	vmov	r0, s0
 8011594:	2200      	movs	r2, #0
 8011596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801159a:	4649      	mov	r1, r9
 801159c:	f7ef fac0 	bl	8000b20 <__aeabi_dcmple>
 80115a0:	2800      	cmp	r0, #0
 80115a2:	d07c      	beq.n	801169e <_strtod_l+0xa96>
 80115a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d04c      	beq.n	8011644 <_strtod_l+0xa3c>
 80115aa:	4b95      	ldr	r3, [pc, #596]	; (8011800 <_strtod_l+0xbf8>)
 80115ac:	2200      	movs	r2, #0
 80115ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80115b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011800 <_strtod_l+0xbf8>
 80115b6:	f04f 0800 	mov.w	r8, #0
 80115ba:	4b92      	ldr	r3, [pc, #584]	; (8011804 <_strtod_l+0xbfc>)
 80115bc:	403b      	ands	r3, r7
 80115be:	9311      	str	r3, [sp, #68]	; 0x44
 80115c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80115c2:	4b91      	ldr	r3, [pc, #580]	; (8011808 <_strtod_l+0xc00>)
 80115c4:	429a      	cmp	r2, r3
 80115c6:	f040 80b2 	bne.w	801172e <_strtod_l+0xb26>
 80115ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80115ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80115d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80115d6:	ec4b ab10 	vmov	d0, sl, fp
 80115da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80115de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80115e2:	f001 fb33 	bl	8012c4c <__ulp>
 80115e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80115ea:	ec53 2b10 	vmov	r2, r3, d0
 80115ee:	f7ef f81b 	bl	8000628 <__aeabi_dmul>
 80115f2:	4652      	mov	r2, sl
 80115f4:	465b      	mov	r3, fp
 80115f6:	f7ee fe61 	bl	80002bc <__adddf3>
 80115fa:	460b      	mov	r3, r1
 80115fc:	4981      	ldr	r1, [pc, #516]	; (8011804 <_strtod_l+0xbfc>)
 80115fe:	4a83      	ldr	r2, [pc, #524]	; (801180c <_strtod_l+0xc04>)
 8011600:	4019      	ands	r1, r3
 8011602:	4291      	cmp	r1, r2
 8011604:	4682      	mov	sl, r0
 8011606:	d95e      	bls.n	80116c6 <_strtod_l+0xabe>
 8011608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801160a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801160e:	4293      	cmp	r3, r2
 8011610:	d103      	bne.n	801161a <_strtod_l+0xa12>
 8011612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011614:	3301      	adds	r3, #1
 8011616:	f43f ad43 	beq.w	80110a0 <_strtod_l+0x498>
 801161a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011818 <_strtod_l+0xc10>
 801161e:	f04f 3aff 	mov.w	sl, #4294967295
 8011622:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011624:	4620      	mov	r0, r4
 8011626:	f000 ffe5 	bl	80125f4 <_Bfree>
 801162a:	9907      	ldr	r1, [sp, #28]
 801162c:	4620      	mov	r0, r4
 801162e:	f000 ffe1 	bl	80125f4 <_Bfree>
 8011632:	4631      	mov	r1, r6
 8011634:	4620      	mov	r0, r4
 8011636:	f000 ffdd 	bl	80125f4 <_Bfree>
 801163a:	4629      	mov	r1, r5
 801163c:	4620      	mov	r0, r4
 801163e:	f000 ffd9 	bl	80125f4 <_Bfree>
 8011642:	e613      	b.n	801126c <_strtod_l+0x664>
 8011644:	f1ba 0f00 	cmp.w	sl, #0
 8011648:	d11b      	bne.n	8011682 <_strtod_l+0xa7a>
 801164a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801164e:	b9f3      	cbnz	r3, 801168e <_strtod_l+0xa86>
 8011650:	4b6b      	ldr	r3, [pc, #428]	; (8011800 <_strtod_l+0xbf8>)
 8011652:	2200      	movs	r2, #0
 8011654:	4640      	mov	r0, r8
 8011656:	4649      	mov	r1, r9
 8011658:	f7ef fa58 	bl	8000b0c <__aeabi_dcmplt>
 801165c:	b9d0      	cbnz	r0, 8011694 <_strtod_l+0xa8c>
 801165e:	4640      	mov	r0, r8
 8011660:	4649      	mov	r1, r9
 8011662:	4b6b      	ldr	r3, [pc, #428]	; (8011810 <_strtod_l+0xc08>)
 8011664:	2200      	movs	r2, #0
 8011666:	f7ee ffdf 	bl	8000628 <__aeabi_dmul>
 801166a:	4680      	mov	r8, r0
 801166c:	4689      	mov	r9, r1
 801166e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011672:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011676:	931b      	str	r3, [sp, #108]	; 0x6c
 8011678:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801167c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011680:	e79b      	b.n	80115ba <_strtod_l+0x9b2>
 8011682:	f1ba 0f01 	cmp.w	sl, #1
 8011686:	d102      	bne.n	801168e <_strtod_l+0xa86>
 8011688:	2f00      	cmp	r7, #0
 801168a:	f43f ad7e 	beq.w	801118a <_strtod_l+0x582>
 801168e:	4b61      	ldr	r3, [pc, #388]	; (8011814 <_strtod_l+0xc0c>)
 8011690:	2200      	movs	r2, #0
 8011692:	e78c      	b.n	80115ae <_strtod_l+0x9a6>
 8011694:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011810 <_strtod_l+0xc08>
 8011698:	f04f 0800 	mov.w	r8, #0
 801169c:	e7e7      	b.n	801166e <_strtod_l+0xa66>
 801169e:	4b5c      	ldr	r3, [pc, #368]	; (8011810 <_strtod_l+0xc08>)
 80116a0:	4640      	mov	r0, r8
 80116a2:	4649      	mov	r1, r9
 80116a4:	2200      	movs	r2, #0
 80116a6:	f7ee ffbf 	bl	8000628 <__aeabi_dmul>
 80116aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116ac:	4680      	mov	r8, r0
 80116ae:	4689      	mov	r9, r1
 80116b0:	b933      	cbnz	r3, 80116c0 <_strtod_l+0xab8>
 80116b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80116b6:	9012      	str	r0, [sp, #72]	; 0x48
 80116b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80116ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80116be:	e7dd      	b.n	801167c <_strtod_l+0xa74>
 80116c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80116c4:	e7f9      	b.n	80116ba <_strtod_l+0xab2>
 80116c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80116ca:	9b04      	ldr	r3, [sp, #16]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d1a8      	bne.n	8011622 <_strtod_l+0xa1a>
 80116d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80116d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80116d6:	0d1b      	lsrs	r3, r3, #20
 80116d8:	051b      	lsls	r3, r3, #20
 80116da:	429a      	cmp	r2, r3
 80116dc:	d1a1      	bne.n	8011622 <_strtod_l+0xa1a>
 80116de:	4640      	mov	r0, r8
 80116e0:	4649      	mov	r1, r9
 80116e2:	f7ef faeb 	bl	8000cbc <__aeabi_d2lz>
 80116e6:	f7ee ff71 	bl	80005cc <__aeabi_l2d>
 80116ea:	4602      	mov	r2, r0
 80116ec:	460b      	mov	r3, r1
 80116ee:	4640      	mov	r0, r8
 80116f0:	4649      	mov	r1, r9
 80116f2:	f7ee fde1 	bl	80002b8 <__aeabi_dsub>
 80116f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80116f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116fc:	ea43 030a 	orr.w	r3, r3, sl
 8011700:	4313      	orrs	r3, r2
 8011702:	4680      	mov	r8, r0
 8011704:	4689      	mov	r9, r1
 8011706:	d053      	beq.n	80117b0 <_strtod_l+0xba8>
 8011708:	a335      	add	r3, pc, #212	; (adr r3, 80117e0 <_strtod_l+0xbd8>)
 801170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170e:	f7ef f9fd 	bl	8000b0c <__aeabi_dcmplt>
 8011712:	2800      	cmp	r0, #0
 8011714:	f47f acce 	bne.w	80110b4 <_strtod_l+0x4ac>
 8011718:	a333      	add	r3, pc, #204	; (adr r3, 80117e8 <_strtod_l+0xbe0>)
 801171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171e:	4640      	mov	r0, r8
 8011720:	4649      	mov	r1, r9
 8011722:	f7ef fa11 	bl	8000b48 <__aeabi_dcmpgt>
 8011726:	2800      	cmp	r0, #0
 8011728:	f43f af7b 	beq.w	8011622 <_strtod_l+0xa1a>
 801172c:	e4c2      	b.n	80110b4 <_strtod_l+0x4ac>
 801172e:	9b04      	ldr	r3, [sp, #16]
 8011730:	b333      	cbz	r3, 8011780 <_strtod_l+0xb78>
 8011732:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011734:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011738:	d822      	bhi.n	8011780 <_strtod_l+0xb78>
 801173a:	a32d      	add	r3, pc, #180	; (adr r3, 80117f0 <_strtod_l+0xbe8>)
 801173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011740:	4640      	mov	r0, r8
 8011742:	4649      	mov	r1, r9
 8011744:	f7ef f9ec 	bl	8000b20 <__aeabi_dcmple>
 8011748:	b1a0      	cbz	r0, 8011774 <_strtod_l+0xb6c>
 801174a:	4649      	mov	r1, r9
 801174c:	4640      	mov	r0, r8
 801174e:	f7ef fa2d 	bl	8000bac <__aeabi_d2uiz>
 8011752:	2801      	cmp	r0, #1
 8011754:	bf38      	it	cc
 8011756:	2001      	movcc	r0, #1
 8011758:	f7ee feec 	bl	8000534 <__aeabi_ui2d>
 801175c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801175e:	4680      	mov	r8, r0
 8011760:	4689      	mov	r9, r1
 8011762:	bb13      	cbnz	r3, 80117aa <_strtod_l+0xba2>
 8011764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011768:	9014      	str	r0, [sp, #80]	; 0x50
 801176a:	9315      	str	r3, [sp, #84]	; 0x54
 801176c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011770:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011776:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011778:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801177c:	1a9b      	subs	r3, r3, r2
 801177e:	930d      	str	r3, [sp, #52]	; 0x34
 8011780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011784:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801178c:	f001 fa5e 	bl	8012c4c <__ulp>
 8011790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011794:	ec53 2b10 	vmov	r2, r3, d0
 8011798:	f7ee ff46 	bl	8000628 <__aeabi_dmul>
 801179c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80117a0:	f7ee fd8c 	bl	80002bc <__adddf3>
 80117a4:	4682      	mov	sl, r0
 80117a6:	468b      	mov	fp, r1
 80117a8:	e78f      	b.n	80116ca <_strtod_l+0xac2>
 80117aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80117ae:	e7dd      	b.n	801176c <_strtod_l+0xb64>
 80117b0:	a311      	add	r3, pc, #68	; (adr r3, 80117f8 <_strtod_l+0xbf0>)
 80117b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b6:	f7ef f9a9 	bl	8000b0c <__aeabi_dcmplt>
 80117ba:	e7b4      	b.n	8011726 <_strtod_l+0xb1e>
 80117bc:	2300      	movs	r3, #0
 80117be:	930e      	str	r3, [sp, #56]	; 0x38
 80117c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80117c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80117c4:	6013      	str	r3, [r2, #0]
 80117c6:	f7ff ba65 	b.w	8010c94 <_strtod_l+0x8c>
 80117ca:	2b65      	cmp	r3, #101	; 0x65
 80117cc:	f43f ab5d 	beq.w	8010e8a <_strtod_l+0x282>
 80117d0:	2b45      	cmp	r3, #69	; 0x45
 80117d2:	f43f ab5a 	beq.w	8010e8a <_strtod_l+0x282>
 80117d6:	2201      	movs	r2, #1
 80117d8:	f7ff bb92 	b.w	8010f00 <_strtod_l+0x2f8>
 80117dc:	f3af 8000 	nop.w
 80117e0:	94a03595 	.word	0x94a03595
 80117e4:	3fdfffff 	.word	0x3fdfffff
 80117e8:	35afe535 	.word	0x35afe535
 80117ec:	3fe00000 	.word	0x3fe00000
 80117f0:	ffc00000 	.word	0xffc00000
 80117f4:	41dfffff 	.word	0x41dfffff
 80117f8:	94a03595 	.word	0x94a03595
 80117fc:	3fcfffff 	.word	0x3fcfffff
 8011800:	3ff00000 	.word	0x3ff00000
 8011804:	7ff00000 	.word	0x7ff00000
 8011808:	7fe00000 	.word	0x7fe00000
 801180c:	7c9fffff 	.word	0x7c9fffff
 8011810:	3fe00000 	.word	0x3fe00000
 8011814:	bff00000 	.word	0xbff00000
 8011818:	7fefffff 	.word	0x7fefffff

0801181c <strtod>:
 801181c:	460a      	mov	r2, r1
 801181e:	4601      	mov	r1, r0
 8011820:	4802      	ldr	r0, [pc, #8]	; (801182c <strtod+0x10>)
 8011822:	4b03      	ldr	r3, [pc, #12]	; (8011830 <strtod+0x14>)
 8011824:	6800      	ldr	r0, [r0, #0]
 8011826:	f7ff b9ef 	b.w	8010c08 <_strtod_l>
 801182a:	bf00      	nop
 801182c:	20000168 	.word	0x20000168
 8011830:	200001d0 	.word	0x200001d0

08011834 <__swbuf_r>:
 8011834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011836:	460e      	mov	r6, r1
 8011838:	4614      	mov	r4, r2
 801183a:	4605      	mov	r5, r0
 801183c:	b118      	cbz	r0, 8011846 <__swbuf_r+0x12>
 801183e:	6983      	ldr	r3, [r0, #24]
 8011840:	b90b      	cbnz	r3, 8011846 <__swbuf_r+0x12>
 8011842:	f000 f9f3 	bl	8011c2c <__sinit>
 8011846:	4b21      	ldr	r3, [pc, #132]	; (80118cc <__swbuf_r+0x98>)
 8011848:	429c      	cmp	r4, r3
 801184a:	d12b      	bne.n	80118a4 <__swbuf_r+0x70>
 801184c:	686c      	ldr	r4, [r5, #4]
 801184e:	69a3      	ldr	r3, [r4, #24]
 8011850:	60a3      	str	r3, [r4, #8]
 8011852:	89a3      	ldrh	r3, [r4, #12]
 8011854:	071a      	lsls	r2, r3, #28
 8011856:	d52f      	bpl.n	80118b8 <__swbuf_r+0x84>
 8011858:	6923      	ldr	r3, [r4, #16]
 801185a:	b36b      	cbz	r3, 80118b8 <__swbuf_r+0x84>
 801185c:	6923      	ldr	r3, [r4, #16]
 801185e:	6820      	ldr	r0, [r4, #0]
 8011860:	1ac0      	subs	r0, r0, r3
 8011862:	6963      	ldr	r3, [r4, #20]
 8011864:	b2f6      	uxtb	r6, r6
 8011866:	4283      	cmp	r3, r0
 8011868:	4637      	mov	r7, r6
 801186a:	dc04      	bgt.n	8011876 <__swbuf_r+0x42>
 801186c:	4621      	mov	r1, r4
 801186e:	4628      	mov	r0, r5
 8011870:	f000 f948 	bl	8011b04 <_fflush_r>
 8011874:	bb30      	cbnz	r0, 80118c4 <__swbuf_r+0x90>
 8011876:	68a3      	ldr	r3, [r4, #8]
 8011878:	3b01      	subs	r3, #1
 801187a:	60a3      	str	r3, [r4, #8]
 801187c:	6823      	ldr	r3, [r4, #0]
 801187e:	1c5a      	adds	r2, r3, #1
 8011880:	6022      	str	r2, [r4, #0]
 8011882:	701e      	strb	r6, [r3, #0]
 8011884:	6963      	ldr	r3, [r4, #20]
 8011886:	3001      	adds	r0, #1
 8011888:	4283      	cmp	r3, r0
 801188a:	d004      	beq.n	8011896 <__swbuf_r+0x62>
 801188c:	89a3      	ldrh	r3, [r4, #12]
 801188e:	07db      	lsls	r3, r3, #31
 8011890:	d506      	bpl.n	80118a0 <__swbuf_r+0x6c>
 8011892:	2e0a      	cmp	r6, #10
 8011894:	d104      	bne.n	80118a0 <__swbuf_r+0x6c>
 8011896:	4621      	mov	r1, r4
 8011898:	4628      	mov	r0, r5
 801189a:	f000 f933 	bl	8011b04 <_fflush_r>
 801189e:	b988      	cbnz	r0, 80118c4 <__swbuf_r+0x90>
 80118a0:	4638      	mov	r0, r7
 80118a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118a4:	4b0a      	ldr	r3, [pc, #40]	; (80118d0 <__swbuf_r+0x9c>)
 80118a6:	429c      	cmp	r4, r3
 80118a8:	d101      	bne.n	80118ae <__swbuf_r+0x7a>
 80118aa:	68ac      	ldr	r4, [r5, #8]
 80118ac:	e7cf      	b.n	801184e <__swbuf_r+0x1a>
 80118ae:	4b09      	ldr	r3, [pc, #36]	; (80118d4 <__swbuf_r+0xa0>)
 80118b0:	429c      	cmp	r4, r3
 80118b2:	bf08      	it	eq
 80118b4:	68ec      	ldreq	r4, [r5, #12]
 80118b6:	e7ca      	b.n	801184e <__swbuf_r+0x1a>
 80118b8:	4621      	mov	r1, r4
 80118ba:	4628      	mov	r0, r5
 80118bc:	f000 f81e 	bl	80118fc <__swsetup_r>
 80118c0:	2800      	cmp	r0, #0
 80118c2:	d0cb      	beq.n	801185c <__swbuf_r+0x28>
 80118c4:	f04f 37ff 	mov.w	r7, #4294967295
 80118c8:	e7ea      	b.n	80118a0 <__swbuf_r+0x6c>
 80118ca:	bf00      	nop
 80118cc:	08015c98 	.word	0x08015c98
 80118d0:	08015cb8 	.word	0x08015cb8
 80118d4:	08015c78 	.word	0x08015c78

080118d8 <_write_r>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	4d07      	ldr	r5, [pc, #28]	; (80118f8 <_write_r+0x20>)
 80118dc:	4604      	mov	r4, r0
 80118de:	4608      	mov	r0, r1
 80118e0:	4611      	mov	r1, r2
 80118e2:	2200      	movs	r2, #0
 80118e4:	602a      	str	r2, [r5, #0]
 80118e6:	461a      	mov	r2, r3
 80118e8:	f7f1 fa87 	bl	8002dfa <_write>
 80118ec:	1c43      	adds	r3, r0, #1
 80118ee:	d102      	bne.n	80118f6 <_write_r+0x1e>
 80118f0:	682b      	ldr	r3, [r5, #0]
 80118f2:	b103      	cbz	r3, 80118f6 <_write_r+0x1e>
 80118f4:	6023      	str	r3, [r4, #0]
 80118f6:	bd38      	pop	{r3, r4, r5, pc}
 80118f8:	200034dc 	.word	0x200034dc

080118fc <__swsetup_r>:
 80118fc:	4b32      	ldr	r3, [pc, #200]	; (80119c8 <__swsetup_r+0xcc>)
 80118fe:	b570      	push	{r4, r5, r6, lr}
 8011900:	681d      	ldr	r5, [r3, #0]
 8011902:	4606      	mov	r6, r0
 8011904:	460c      	mov	r4, r1
 8011906:	b125      	cbz	r5, 8011912 <__swsetup_r+0x16>
 8011908:	69ab      	ldr	r3, [r5, #24]
 801190a:	b913      	cbnz	r3, 8011912 <__swsetup_r+0x16>
 801190c:	4628      	mov	r0, r5
 801190e:	f000 f98d 	bl	8011c2c <__sinit>
 8011912:	4b2e      	ldr	r3, [pc, #184]	; (80119cc <__swsetup_r+0xd0>)
 8011914:	429c      	cmp	r4, r3
 8011916:	d10f      	bne.n	8011938 <__swsetup_r+0x3c>
 8011918:	686c      	ldr	r4, [r5, #4]
 801191a:	89a3      	ldrh	r3, [r4, #12]
 801191c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011920:	0719      	lsls	r1, r3, #28
 8011922:	d42c      	bmi.n	801197e <__swsetup_r+0x82>
 8011924:	06dd      	lsls	r5, r3, #27
 8011926:	d411      	bmi.n	801194c <__swsetup_r+0x50>
 8011928:	2309      	movs	r3, #9
 801192a:	6033      	str	r3, [r6, #0]
 801192c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011930:	81a3      	strh	r3, [r4, #12]
 8011932:	f04f 30ff 	mov.w	r0, #4294967295
 8011936:	e03e      	b.n	80119b6 <__swsetup_r+0xba>
 8011938:	4b25      	ldr	r3, [pc, #148]	; (80119d0 <__swsetup_r+0xd4>)
 801193a:	429c      	cmp	r4, r3
 801193c:	d101      	bne.n	8011942 <__swsetup_r+0x46>
 801193e:	68ac      	ldr	r4, [r5, #8]
 8011940:	e7eb      	b.n	801191a <__swsetup_r+0x1e>
 8011942:	4b24      	ldr	r3, [pc, #144]	; (80119d4 <__swsetup_r+0xd8>)
 8011944:	429c      	cmp	r4, r3
 8011946:	bf08      	it	eq
 8011948:	68ec      	ldreq	r4, [r5, #12]
 801194a:	e7e6      	b.n	801191a <__swsetup_r+0x1e>
 801194c:	0758      	lsls	r0, r3, #29
 801194e:	d512      	bpl.n	8011976 <__swsetup_r+0x7a>
 8011950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011952:	b141      	cbz	r1, 8011966 <__swsetup_r+0x6a>
 8011954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011958:	4299      	cmp	r1, r3
 801195a:	d002      	beq.n	8011962 <__swsetup_r+0x66>
 801195c:	4630      	mov	r0, r6
 801195e:	f7fe fdd3 	bl	8010508 <_free_r>
 8011962:	2300      	movs	r3, #0
 8011964:	6363      	str	r3, [r4, #52]	; 0x34
 8011966:	89a3      	ldrh	r3, [r4, #12]
 8011968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801196c:	81a3      	strh	r3, [r4, #12]
 801196e:	2300      	movs	r3, #0
 8011970:	6063      	str	r3, [r4, #4]
 8011972:	6923      	ldr	r3, [r4, #16]
 8011974:	6023      	str	r3, [r4, #0]
 8011976:	89a3      	ldrh	r3, [r4, #12]
 8011978:	f043 0308 	orr.w	r3, r3, #8
 801197c:	81a3      	strh	r3, [r4, #12]
 801197e:	6923      	ldr	r3, [r4, #16]
 8011980:	b94b      	cbnz	r3, 8011996 <__swsetup_r+0x9a>
 8011982:	89a3      	ldrh	r3, [r4, #12]
 8011984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801198c:	d003      	beq.n	8011996 <__swsetup_r+0x9a>
 801198e:	4621      	mov	r1, r4
 8011990:	4630      	mov	r0, r6
 8011992:	f000 fd91 	bl	80124b8 <__smakebuf_r>
 8011996:	89a0      	ldrh	r0, [r4, #12]
 8011998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801199c:	f010 0301 	ands.w	r3, r0, #1
 80119a0:	d00a      	beq.n	80119b8 <__swsetup_r+0xbc>
 80119a2:	2300      	movs	r3, #0
 80119a4:	60a3      	str	r3, [r4, #8]
 80119a6:	6963      	ldr	r3, [r4, #20]
 80119a8:	425b      	negs	r3, r3
 80119aa:	61a3      	str	r3, [r4, #24]
 80119ac:	6923      	ldr	r3, [r4, #16]
 80119ae:	b943      	cbnz	r3, 80119c2 <__swsetup_r+0xc6>
 80119b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119b4:	d1ba      	bne.n	801192c <__swsetup_r+0x30>
 80119b6:	bd70      	pop	{r4, r5, r6, pc}
 80119b8:	0781      	lsls	r1, r0, #30
 80119ba:	bf58      	it	pl
 80119bc:	6963      	ldrpl	r3, [r4, #20]
 80119be:	60a3      	str	r3, [r4, #8]
 80119c0:	e7f4      	b.n	80119ac <__swsetup_r+0xb0>
 80119c2:	2000      	movs	r0, #0
 80119c4:	e7f7      	b.n	80119b6 <__swsetup_r+0xba>
 80119c6:	bf00      	nop
 80119c8:	20000168 	.word	0x20000168
 80119cc:	08015c98 	.word	0x08015c98
 80119d0:	08015cb8 	.word	0x08015cb8
 80119d4:	08015c78 	.word	0x08015c78

080119d8 <_close_r>:
 80119d8:	b538      	push	{r3, r4, r5, lr}
 80119da:	4d06      	ldr	r5, [pc, #24]	; (80119f4 <_close_r+0x1c>)
 80119dc:	2300      	movs	r3, #0
 80119de:	4604      	mov	r4, r0
 80119e0:	4608      	mov	r0, r1
 80119e2:	602b      	str	r3, [r5, #0]
 80119e4:	f7f1 fa25 	bl	8002e32 <_close>
 80119e8:	1c43      	adds	r3, r0, #1
 80119ea:	d102      	bne.n	80119f2 <_close_r+0x1a>
 80119ec:	682b      	ldr	r3, [r5, #0]
 80119ee:	b103      	cbz	r3, 80119f2 <_close_r+0x1a>
 80119f0:	6023      	str	r3, [r4, #0]
 80119f2:	bd38      	pop	{r3, r4, r5, pc}
 80119f4:	200034dc 	.word	0x200034dc

080119f8 <__sflush_r>:
 80119f8:	898a      	ldrh	r2, [r1, #12]
 80119fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119fe:	4605      	mov	r5, r0
 8011a00:	0710      	lsls	r0, r2, #28
 8011a02:	460c      	mov	r4, r1
 8011a04:	d458      	bmi.n	8011ab8 <__sflush_r+0xc0>
 8011a06:	684b      	ldr	r3, [r1, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	dc05      	bgt.n	8011a18 <__sflush_r+0x20>
 8011a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	dc02      	bgt.n	8011a18 <__sflush_r+0x20>
 8011a12:	2000      	movs	r0, #0
 8011a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a1a:	2e00      	cmp	r6, #0
 8011a1c:	d0f9      	beq.n	8011a12 <__sflush_r+0x1a>
 8011a1e:	2300      	movs	r3, #0
 8011a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a24:	682f      	ldr	r7, [r5, #0]
 8011a26:	602b      	str	r3, [r5, #0]
 8011a28:	d032      	beq.n	8011a90 <__sflush_r+0x98>
 8011a2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a2c:	89a3      	ldrh	r3, [r4, #12]
 8011a2e:	075a      	lsls	r2, r3, #29
 8011a30:	d505      	bpl.n	8011a3e <__sflush_r+0x46>
 8011a32:	6863      	ldr	r3, [r4, #4]
 8011a34:	1ac0      	subs	r0, r0, r3
 8011a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a38:	b10b      	cbz	r3, 8011a3e <__sflush_r+0x46>
 8011a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a3c:	1ac0      	subs	r0, r0, r3
 8011a3e:	2300      	movs	r3, #0
 8011a40:	4602      	mov	r2, r0
 8011a42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a44:	6a21      	ldr	r1, [r4, #32]
 8011a46:	4628      	mov	r0, r5
 8011a48:	47b0      	blx	r6
 8011a4a:	1c43      	adds	r3, r0, #1
 8011a4c:	89a3      	ldrh	r3, [r4, #12]
 8011a4e:	d106      	bne.n	8011a5e <__sflush_r+0x66>
 8011a50:	6829      	ldr	r1, [r5, #0]
 8011a52:	291d      	cmp	r1, #29
 8011a54:	d82c      	bhi.n	8011ab0 <__sflush_r+0xb8>
 8011a56:	4a2a      	ldr	r2, [pc, #168]	; (8011b00 <__sflush_r+0x108>)
 8011a58:	40ca      	lsrs	r2, r1
 8011a5a:	07d6      	lsls	r6, r2, #31
 8011a5c:	d528      	bpl.n	8011ab0 <__sflush_r+0xb8>
 8011a5e:	2200      	movs	r2, #0
 8011a60:	6062      	str	r2, [r4, #4]
 8011a62:	04d9      	lsls	r1, r3, #19
 8011a64:	6922      	ldr	r2, [r4, #16]
 8011a66:	6022      	str	r2, [r4, #0]
 8011a68:	d504      	bpl.n	8011a74 <__sflush_r+0x7c>
 8011a6a:	1c42      	adds	r2, r0, #1
 8011a6c:	d101      	bne.n	8011a72 <__sflush_r+0x7a>
 8011a6e:	682b      	ldr	r3, [r5, #0]
 8011a70:	b903      	cbnz	r3, 8011a74 <__sflush_r+0x7c>
 8011a72:	6560      	str	r0, [r4, #84]	; 0x54
 8011a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a76:	602f      	str	r7, [r5, #0]
 8011a78:	2900      	cmp	r1, #0
 8011a7a:	d0ca      	beq.n	8011a12 <__sflush_r+0x1a>
 8011a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a80:	4299      	cmp	r1, r3
 8011a82:	d002      	beq.n	8011a8a <__sflush_r+0x92>
 8011a84:	4628      	mov	r0, r5
 8011a86:	f7fe fd3f 	bl	8010508 <_free_r>
 8011a8a:	2000      	movs	r0, #0
 8011a8c:	6360      	str	r0, [r4, #52]	; 0x34
 8011a8e:	e7c1      	b.n	8011a14 <__sflush_r+0x1c>
 8011a90:	6a21      	ldr	r1, [r4, #32]
 8011a92:	2301      	movs	r3, #1
 8011a94:	4628      	mov	r0, r5
 8011a96:	47b0      	blx	r6
 8011a98:	1c41      	adds	r1, r0, #1
 8011a9a:	d1c7      	bne.n	8011a2c <__sflush_r+0x34>
 8011a9c:	682b      	ldr	r3, [r5, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d0c4      	beq.n	8011a2c <__sflush_r+0x34>
 8011aa2:	2b1d      	cmp	r3, #29
 8011aa4:	d001      	beq.n	8011aaa <__sflush_r+0xb2>
 8011aa6:	2b16      	cmp	r3, #22
 8011aa8:	d101      	bne.n	8011aae <__sflush_r+0xb6>
 8011aaa:	602f      	str	r7, [r5, #0]
 8011aac:	e7b1      	b.n	8011a12 <__sflush_r+0x1a>
 8011aae:	89a3      	ldrh	r3, [r4, #12]
 8011ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ab4:	81a3      	strh	r3, [r4, #12]
 8011ab6:	e7ad      	b.n	8011a14 <__sflush_r+0x1c>
 8011ab8:	690f      	ldr	r7, [r1, #16]
 8011aba:	2f00      	cmp	r7, #0
 8011abc:	d0a9      	beq.n	8011a12 <__sflush_r+0x1a>
 8011abe:	0793      	lsls	r3, r2, #30
 8011ac0:	680e      	ldr	r6, [r1, #0]
 8011ac2:	bf08      	it	eq
 8011ac4:	694b      	ldreq	r3, [r1, #20]
 8011ac6:	600f      	str	r7, [r1, #0]
 8011ac8:	bf18      	it	ne
 8011aca:	2300      	movne	r3, #0
 8011acc:	eba6 0807 	sub.w	r8, r6, r7
 8011ad0:	608b      	str	r3, [r1, #8]
 8011ad2:	f1b8 0f00 	cmp.w	r8, #0
 8011ad6:	dd9c      	ble.n	8011a12 <__sflush_r+0x1a>
 8011ad8:	6a21      	ldr	r1, [r4, #32]
 8011ada:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011adc:	4643      	mov	r3, r8
 8011ade:	463a      	mov	r2, r7
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	47b0      	blx	r6
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	dc06      	bgt.n	8011af6 <__sflush_r+0xfe>
 8011ae8:	89a3      	ldrh	r3, [r4, #12]
 8011aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aee:	81a3      	strh	r3, [r4, #12]
 8011af0:	f04f 30ff 	mov.w	r0, #4294967295
 8011af4:	e78e      	b.n	8011a14 <__sflush_r+0x1c>
 8011af6:	4407      	add	r7, r0
 8011af8:	eba8 0800 	sub.w	r8, r8, r0
 8011afc:	e7e9      	b.n	8011ad2 <__sflush_r+0xda>
 8011afe:	bf00      	nop
 8011b00:	20400001 	.word	0x20400001

08011b04 <_fflush_r>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	690b      	ldr	r3, [r1, #16]
 8011b08:	4605      	mov	r5, r0
 8011b0a:	460c      	mov	r4, r1
 8011b0c:	b913      	cbnz	r3, 8011b14 <_fflush_r+0x10>
 8011b0e:	2500      	movs	r5, #0
 8011b10:	4628      	mov	r0, r5
 8011b12:	bd38      	pop	{r3, r4, r5, pc}
 8011b14:	b118      	cbz	r0, 8011b1e <_fflush_r+0x1a>
 8011b16:	6983      	ldr	r3, [r0, #24]
 8011b18:	b90b      	cbnz	r3, 8011b1e <_fflush_r+0x1a>
 8011b1a:	f000 f887 	bl	8011c2c <__sinit>
 8011b1e:	4b14      	ldr	r3, [pc, #80]	; (8011b70 <_fflush_r+0x6c>)
 8011b20:	429c      	cmp	r4, r3
 8011b22:	d11b      	bne.n	8011b5c <_fflush_r+0x58>
 8011b24:	686c      	ldr	r4, [r5, #4]
 8011b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d0ef      	beq.n	8011b0e <_fflush_r+0xa>
 8011b2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b30:	07d0      	lsls	r0, r2, #31
 8011b32:	d404      	bmi.n	8011b3e <_fflush_r+0x3a>
 8011b34:	0599      	lsls	r1, r3, #22
 8011b36:	d402      	bmi.n	8011b3e <_fflush_r+0x3a>
 8011b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b3a:	f000 fc84 	bl	8012446 <__retarget_lock_acquire_recursive>
 8011b3e:	4628      	mov	r0, r5
 8011b40:	4621      	mov	r1, r4
 8011b42:	f7ff ff59 	bl	80119f8 <__sflush_r>
 8011b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b48:	07da      	lsls	r2, r3, #31
 8011b4a:	4605      	mov	r5, r0
 8011b4c:	d4e0      	bmi.n	8011b10 <_fflush_r+0xc>
 8011b4e:	89a3      	ldrh	r3, [r4, #12]
 8011b50:	059b      	lsls	r3, r3, #22
 8011b52:	d4dd      	bmi.n	8011b10 <_fflush_r+0xc>
 8011b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b56:	f000 fc77 	bl	8012448 <__retarget_lock_release_recursive>
 8011b5a:	e7d9      	b.n	8011b10 <_fflush_r+0xc>
 8011b5c:	4b05      	ldr	r3, [pc, #20]	; (8011b74 <_fflush_r+0x70>)
 8011b5e:	429c      	cmp	r4, r3
 8011b60:	d101      	bne.n	8011b66 <_fflush_r+0x62>
 8011b62:	68ac      	ldr	r4, [r5, #8]
 8011b64:	e7df      	b.n	8011b26 <_fflush_r+0x22>
 8011b66:	4b04      	ldr	r3, [pc, #16]	; (8011b78 <_fflush_r+0x74>)
 8011b68:	429c      	cmp	r4, r3
 8011b6a:	bf08      	it	eq
 8011b6c:	68ec      	ldreq	r4, [r5, #12]
 8011b6e:	e7da      	b.n	8011b26 <_fflush_r+0x22>
 8011b70:	08015c98 	.word	0x08015c98
 8011b74:	08015cb8 	.word	0x08015cb8
 8011b78:	08015c78 	.word	0x08015c78

08011b7c <std>:
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	b510      	push	{r4, lr}
 8011b80:	4604      	mov	r4, r0
 8011b82:	e9c0 3300 	strd	r3, r3, [r0]
 8011b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b8a:	6083      	str	r3, [r0, #8]
 8011b8c:	8181      	strh	r1, [r0, #12]
 8011b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8011b90:	81c2      	strh	r2, [r0, #14]
 8011b92:	6183      	str	r3, [r0, #24]
 8011b94:	4619      	mov	r1, r3
 8011b96:	2208      	movs	r2, #8
 8011b98:	305c      	adds	r0, #92	; 0x5c
 8011b9a:	f7fe fcad 	bl	80104f8 <memset>
 8011b9e:	4b05      	ldr	r3, [pc, #20]	; (8011bb4 <std+0x38>)
 8011ba0:	6263      	str	r3, [r4, #36]	; 0x24
 8011ba2:	4b05      	ldr	r3, [pc, #20]	; (8011bb8 <std+0x3c>)
 8011ba4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ba6:	4b05      	ldr	r3, [pc, #20]	; (8011bbc <std+0x40>)
 8011ba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011baa:	4b05      	ldr	r3, [pc, #20]	; (8011bc0 <std+0x44>)
 8011bac:	6224      	str	r4, [r4, #32]
 8011bae:	6323      	str	r3, [r4, #48]	; 0x30
 8011bb0:	bd10      	pop	{r4, pc}
 8011bb2:	bf00      	nop
 8011bb4:	08010b25 	.word	0x08010b25
 8011bb8:	08010b47 	.word	0x08010b47
 8011bbc:	08010b7f 	.word	0x08010b7f
 8011bc0:	08010ba3 	.word	0x08010ba3

08011bc4 <_cleanup_r>:
 8011bc4:	4901      	ldr	r1, [pc, #4]	; (8011bcc <_cleanup_r+0x8>)
 8011bc6:	f000 b8af 	b.w	8011d28 <_fwalk_reent>
 8011bca:	bf00      	nop
 8011bcc:	08011b05 	.word	0x08011b05

08011bd0 <__sfmoreglue>:
 8011bd0:	b570      	push	{r4, r5, r6, lr}
 8011bd2:	1e4a      	subs	r2, r1, #1
 8011bd4:	2568      	movs	r5, #104	; 0x68
 8011bd6:	4355      	muls	r5, r2
 8011bd8:	460e      	mov	r6, r1
 8011bda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011bde:	f7fe fce3 	bl	80105a8 <_malloc_r>
 8011be2:	4604      	mov	r4, r0
 8011be4:	b140      	cbz	r0, 8011bf8 <__sfmoreglue+0x28>
 8011be6:	2100      	movs	r1, #0
 8011be8:	e9c0 1600 	strd	r1, r6, [r0]
 8011bec:	300c      	adds	r0, #12
 8011bee:	60a0      	str	r0, [r4, #8]
 8011bf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011bf4:	f7fe fc80 	bl	80104f8 <memset>
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	bd70      	pop	{r4, r5, r6, pc}

08011bfc <__sfp_lock_acquire>:
 8011bfc:	4801      	ldr	r0, [pc, #4]	; (8011c04 <__sfp_lock_acquire+0x8>)
 8011bfe:	f000 bc22 	b.w	8012446 <__retarget_lock_acquire_recursive>
 8011c02:	bf00      	nop
 8011c04:	200034d8 	.word	0x200034d8

08011c08 <__sfp_lock_release>:
 8011c08:	4801      	ldr	r0, [pc, #4]	; (8011c10 <__sfp_lock_release+0x8>)
 8011c0a:	f000 bc1d 	b.w	8012448 <__retarget_lock_release_recursive>
 8011c0e:	bf00      	nop
 8011c10:	200034d8 	.word	0x200034d8

08011c14 <__sinit_lock_acquire>:
 8011c14:	4801      	ldr	r0, [pc, #4]	; (8011c1c <__sinit_lock_acquire+0x8>)
 8011c16:	f000 bc16 	b.w	8012446 <__retarget_lock_acquire_recursive>
 8011c1a:	bf00      	nop
 8011c1c:	200034d3 	.word	0x200034d3

08011c20 <__sinit_lock_release>:
 8011c20:	4801      	ldr	r0, [pc, #4]	; (8011c28 <__sinit_lock_release+0x8>)
 8011c22:	f000 bc11 	b.w	8012448 <__retarget_lock_release_recursive>
 8011c26:	bf00      	nop
 8011c28:	200034d3 	.word	0x200034d3

08011c2c <__sinit>:
 8011c2c:	b510      	push	{r4, lr}
 8011c2e:	4604      	mov	r4, r0
 8011c30:	f7ff fff0 	bl	8011c14 <__sinit_lock_acquire>
 8011c34:	69a3      	ldr	r3, [r4, #24]
 8011c36:	b11b      	cbz	r3, 8011c40 <__sinit+0x14>
 8011c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c3c:	f7ff bff0 	b.w	8011c20 <__sinit_lock_release>
 8011c40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c44:	6523      	str	r3, [r4, #80]	; 0x50
 8011c46:	4b13      	ldr	r3, [pc, #76]	; (8011c94 <__sinit+0x68>)
 8011c48:	4a13      	ldr	r2, [pc, #76]	; (8011c98 <__sinit+0x6c>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c4e:	42a3      	cmp	r3, r4
 8011c50:	bf04      	itt	eq
 8011c52:	2301      	moveq	r3, #1
 8011c54:	61a3      	streq	r3, [r4, #24]
 8011c56:	4620      	mov	r0, r4
 8011c58:	f000 f820 	bl	8011c9c <__sfp>
 8011c5c:	6060      	str	r0, [r4, #4]
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f000 f81c 	bl	8011c9c <__sfp>
 8011c64:	60a0      	str	r0, [r4, #8]
 8011c66:	4620      	mov	r0, r4
 8011c68:	f000 f818 	bl	8011c9c <__sfp>
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	60e0      	str	r0, [r4, #12]
 8011c70:	2104      	movs	r1, #4
 8011c72:	6860      	ldr	r0, [r4, #4]
 8011c74:	f7ff ff82 	bl	8011b7c <std>
 8011c78:	68a0      	ldr	r0, [r4, #8]
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	2109      	movs	r1, #9
 8011c7e:	f7ff ff7d 	bl	8011b7c <std>
 8011c82:	68e0      	ldr	r0, [r4, #12]
 8011c84:	2202      	movs	r2, #2
 8011c86:	2112      	movs	r1, #18
 8011c88:	f7ff ff78 	bl	8011b7c <std>
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	61a3      	str	r3, [r4, #24]
 8011c90:	e7d2      	b.n	8011c38 <__sinit+0xc>
 8011c92:	bf00      	nop
 8011c94:	08015c14 	.word	0x08015c14
 8011c98:	08011bc5 	.word	0x08011bc5

08011c9c <__sfp>:
 8011c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c9e:	4607      	mov	r7, r0
 8011ca0:	f7ff ffac 	bl	8011bfc <__sfp_lock_acquire>
 8011ca4:	4b1e      	ldr	r3, [pc, #120]	; (8011d20 <__sfp+0x84>)
 8011ca6:	681e      	ldr	r6, [r3, #0]
 8011ca8:	69b3      	ldr	r3, [r6, #24]
 8011caa:	b913      	cbnz	r3, 8011cb2 <__sfp+0x16>
 8011cac:	4630      	mov	r0, r6
 8011cae:	f7ff ffbd 	bl	8011c2c <__sinit>
 8011cb2:	3648      	adds	r6, #72	; 0x48
 8011cb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011cb8:	3b01      	subs	r3, #1
 8011cba:	d503      	bpl.n	8011cc4 <__sfp+0x28>
 8011cbc:	6833      	ldr	r3, [r6, #0]
 8011cbe:	b30b      	cbz	r3, 8011d04 <__sfp+0x68>
 8011cc0:	6836      	ldr	r6, [r6, #0]
 8011cc2:	e7f7      	b.n	8011cb4 <__sfp+0x18>
 8011cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011cc8:	b9d5      	cbnz	r5, 8011d00 <__sfp+0x64>
 8011cca:	4b16      	ldr	r3, [pc, #88]	; (8011d24 <__sfp+0x88>)
 8011ccc:	60e3      	str	r3, [r4, #12]
 8011cce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011cd2:	6665      	str	r5, [r4, #100]	; 0x64
 8011cd4:	f000 fbb6 	bl	8012444 <__retarget_lock_init_recursive>
 8011cd8:	f7ff ff96 	bl	8011c08 <__sfp_lock_release>
 8011cdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011ce0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011ce4:	6025      	str	r5, [r4, #0]
 8011ce6:	61a5      	str	r5, [r4, #24]
 8011ce8:	2208      	movs	r2, #8
 8011cea:	4629      	mov	r1, r5
 8011cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011cf0:	f7fe fc02 	bl	80104f8 <memset>
 8011cf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011cf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d00:	3468      	adds	r4, #104	; 0x68
 8011d02:	e7d9      	b.n	8011cb8 <__sfp+0x1c>
 8011d04:	2104      	movs	r1, #4
 8011d06:	4638      	mov	r0, r7
 8011d08:	f7ff ff62 	bl	8011bd0 <__sfmoreglue>
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	6030      	str	r0, [r6, #0]
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d1d5      	bne.n	8011cc0 <__sfp+0x24>
 8011d14:	f7ff ff78 	bl	8011c08 <__sfp_lock_release>
 8011d18:	230c      	movs	r3, #12
 8011d1a:	603b      	str	r3, [r7, #0]
 8011d1c:	e7ee      	b.n	8011cfc <__sfp+0x60>
 8011d1e:	bf00      	nop
 8011d20:	08015c14 	.word	0x08015c14
 8011d24:	ffff0001 	.word	0xffff0001

08011d28 <_fwalk_reent>:
 8011d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d2c:	4606      	mov	r6, r0
 8011d2e:	4688      	mov	r8, r1
 8011d30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d34:	2700      	movs	r7, #0
 8011d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8011d3e:	d505      	bpl.n	8011d4c <_fwalk_reent+0x24>
 8011d40:	6824      	ldr	r4, [r4, #0]
 8011d42:	2c00      	cmp	r4, #0
 8011d44:	d1f7      	bne.n	8011d36 <_fwalk_reent+0xe>
 8011d46:	4638      	mov	r0, r7
 8011d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d4c:	89ab      	ldrh	r3, [r5, #12]
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d907      	bls.n	8011d62 <_fwalk_reent+0x3a>
 8011d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d56:	3301      	adds	r3, #1
 8011d58:	d003      	beq.n	8011d62 <_fwalk_reent+0x3a>
 8011d5a:	4629      	mov	r1, r5
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	47c0      	blx	r8
 8011d60:	4307      	orrs	r7, r0
 8011d62:	3568      	adds	r5, #104	; 0x68
 8011d64:	e7e9      	b.n	8011d3a <_fwalk_reent+0x12>

08011d66 <rshift>:
 8011d66:	6903      	ldr	r3, [r0, #16]
 8011d68:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d70:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011d74:	f100 0414 	add.w	r4, r0, #20
 8011d78:	dd45      	ble.n	8011e06 <rshift+0xa0>
 8011d7a:	f011 011f 	ands.w	r1, r1, #31
 8011d7e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011d82:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011d86:	d10c      	bne.n	8011da2 <rshift+0x3c>
 8011d88:	f100 0710 	add.w	r7, r0, #16
 8011d8c:	4629      	mov	r1, r5
 8011d8e:	42b1      	cmp	r1, r6
 8011d90:	d334      	bcc.n	8011dfc <rshift+0x96>
 8011d92:	1a9b      	subs	r3, r3, r2
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	1eea      	subs	r2, r5, #3
 8011d98:	4296      	cmp	r6, r2
 8011d9a:	bf38      	it	cc
 8011d9c:	2300      	movcc	r3, #0
 8011d9e:	4423      	add	r3, r4
 8011da0:	e015      	b.n	8011dce <rshift+0x68>
 8011da2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011da6:	f1c1 0820 	rsb	r8, r1, #32
 8011daa:	40cf      	lsrs	r7, r1
 8011dac:	f105 0e04 	add.w	lr, r5, #4
 8011db0:	46a1      	mov	r9, r4
 8011db2:	4576      	cmp	r6, lr
 8011db4:	46f4      	mov	ip, lr
 8011db6:	d815      	bhi.n	8011de4 <rshift+0x7e>
 8011db8:	1a9b      	subs	r3, r3, r2
 8011dba:	009a      	lsls	r2, r3, #2
 8011dbc:	3a04      	subs	r2, #4
 8011dbe:	3501      	adds	r5, #1
 8011dc0:	42ae      	cmp	r6, r5
 8011dc2:	bf38      	it	cc
 8011dc4:	2200      	movcc	r2, #0
 8011dc6:	18a3      	adds	r3, r4, r2
 8011dc8:	50a7      	str	r7, [r4, r2]
 8011dca:	b107      	cbz	r7, 8011dce <rshift+0x68>
 8011dcc:	3304      	adds	r3, #4
 8011dce:	1b1a      	subs	r2, r3, r4
 8011dd0:	42a3      	cmp	r3, r4
 8011dd2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011dd6:	bf08      	it	eq
 8011dd8:	2300      	moveq	r3, #0
 8011dda:	6102      	str	r2, [r0, #16]
 8011ddc:	bf08      	it	eq
 8011dde:	6143      	streq	r3, [r0, #20]
 8011de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011de4:	f8dc c000 	ldr.w	ip, [ip]
 8011de8:	fa0c fc08 	lsl.w	ip, ip, r8
 8011dec:	ea4c 0707 	orr.w	r7, ip, r7
 8011df0:	f849 7b04 	str.w	r7, [r9], #4
 8011df4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011df8:	40cf      	lsrs	r7, r1
 8011dfa:	e7da      	b.n	8011db2 <rshift+0x4c>
 8011dfc:	f851 cb04 	ldr.w	ip, [r1], #4
 8011e00:	f847 cf04 	str.w	ip, [r7, #4]!
 8011e04:	e7c3      	b.n	8011d8e <rshift+0x28>
 8011e06:	4623      	mov	r3, r4
 8011e08:	e7e1      	b.n	8011dce <rshift+0x68>

08011e0a <__hexdig_fun>:
 8011e0a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011e0e:	2b09      	cmp	r3, #9
 8011e10:	d802      	bhi.n	8011e18 <__hexdig_fun+0xe>
 8011e12:	3820      	subs	r0, #32
 8011e14:	b2c0      	uxtb	r0, r0
 8011e16:	4770      	bx	lr
 8011e18:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011e1c:	2b05      	cmp	r3, #5
 8011e1e:	d801      	bhi.n	8011e24 <__hexdig_fun+0x1a>
 8011e20:	3847      	subs	r0, #71	; 0x47
 8011e22:	e7f7      	b.n	8011e14 <__hexdig_fun+0xa>
 8011e24:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011e28:	2b05      	cmp	r3, #5
 8011e2a:	d801      	bhi.n	8011e30 <__hexdig_fun+0x26>
 8011e2c:	3827      	subs	r0, #39	; 0x27
 8011e2e:	e7f1      	b.n	8011e14 <__hexdig_fun+0xa>
 8011e30:	2000      	movs	r0, #0
 8011e32:	4770      	bx	lr

08011e34 <__gethex>:
 8011e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	ed2d 8b02 	vpush	{d8}
 8011e3c:	b089      	sub	sp, #36	; 0x24
 8011e3e:	ee08 0a10 	vmov	s16, r0
 8011e42:	9304      	str	r3, [sp, #16]
 8011e44:	4bbc      	ldr	r3, [pc, #752]	; (8012138 <__gethex+0x304>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	9301      	str	r3, [sp, #4]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	468b      	mov	fp, r1
 8011e4e:	4690      	mov	r8, r2
 8011e50:	f7ee f9d0 	bl	80001f4 <strlen>
 8011e54:	9b01      	ldr	r3, [sp, #4]
 8011e56:	f8db 2000 	ldr.w	r2, [fp]
 8011e5a:	4403      	add	r3, r0
 8011e5c:	4682      	mov	sl, r0
 8011e5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011e62:	9305      	str	r3, [sp, #20]
 8011e64:	1c93      	adds	r3, r2, #2
 8011e66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011e6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011e6e:	32fe      	adds	r2, #254	; 0xfe
 8011e70:	18d1      	adds	r1, r2, r3
 8011e72:	461f      	mov	r7, r3
 8011e74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011e78:	9100      	str	r1, [sp, #0]
 8011e7a:	2830      	cmp	r0, #48	; 0x30
 8011e7c:	d0f8      	beq.n	8011e70 <__gethex+0x3c>
 8011e7e:	f7ff ffc4 	bl	8011e0a <__hexdig_fun>
 8011e82:	4604      	mov	r4, r0
 8011e84:	2800      	cmp	r0, #0
 8011e86:	d13a      	bne.n	8011efe <__gethex+0xca>
 8011e88:	9901      	ldr	r1, [sp, #4]
 8011e8a:	4652      	mov	r2, sl
 8011e8c:	4638      	mov	r0, r7
 8011e8e:	f7fe fe8c 	bl	8010baa <strncmp>
 8011e92:	4605      	mov	r5, r0
 8011e94:	2800      	cmp	r0, #0
 8011e96:	d168      	bne.n	8011f6a <__gethex+0x136>
 8011e98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011e9c:	eb07 060a 	add.w	r6, r7, sl
 8011ea0:	f7ff ffb3 	bl	8011e0a <__hexdig_fun>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d062      	beq.n	8011f6e <__gethex+0x13a>
 8011ea8:	4633      	mov	r3, r6
 8011eaa:	7818      	ldrb	r0, [r3, #0]
 8011eac:	2830      	cmp	r0, #48	; 0x30
 8011eae:	461f      	mov	r7, r3
 8011eb0:	f103 0301 	add.w	r3, r3, #1
 8011eb4:	d0f9      	beq.n	8011eaa <__gethex+0x76>
 8011eb6:	f7ff ffa8 	bl	8011e0a <__hexdig_fun>
 8011eba:	2301      	movs	r3, #1
 8011ebc:	fab0 f480 	clz	r4, r0
 8011ec0:	0964      	lsrs	r4, r4, #5
 8011ec2:	4635      	mov	r5, r6
 8011ec4:	9300      	str	r3, [sp, #0]
 8011ec6:	463a      	mov	r2, r7
 8011ec8:	4616      	mov	r6, r2
 8011eca:	3201      	adds	r2, #1
 8011ecc:	7830      	ldrb	r0, [r6, #0]
 8011ece:	f7ff ff9c 	bl	8011e0a <__hexdig_fun>
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	d1f8      	bne.n	8011ec8 <__gethex+0x94>
 8011ed6:	9901      	ldr	r1, [sp, #4]
 8011ed8:	4652      	mov	r2, sl
 8011eda:	4630      	mov	r0, r6
 8011edc:	f7fe fe65 	bl	8010baa <strncmp>
 8011ee0:	b980      	cbnz	r0, 8011f04 <__gethex+0xd0>
 8011ee2:	b94d      	cbnz	r5, 8011ef8 <__gethex+0xc4>
 8011ee4:	eb06 050a 	add.w	r5, r6, sl
 8011ee8:	462a      	mov	r2, r5
 8011eea:	4616      	mov	r6, r2
 8011eec:	3201      	adds	r2, #1
 8011eee:	7830      	ldrb	r0, [r6, #0]
 8011ef0:	f7ff ff8b 	bl	8011e0a <__hexdig_fun>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	d1f8      	bne.n	8011eea <__gethex+0xb6>
 8011ef8:	1bad      	subs	r5, r5, r6
 8011efa:	00ad      	lsls	r5, r5, #2
 8011efc:	e004      	b.n	8011f08 <__gethex+0xd4>
 8011efe:	2400      	movs	r4, #0
 8011f00:	4625      	mov	r5, r4
 8011f02:	e7e0      	b.n	8011ec6 <__gethex+0x92>
 8011f04:	2d00      	cmp	r5, #0
 8011f06:	d1f7      	bne.n	8011ef8 <__gethex+0xc4>
 8011f08:	7833      	ldrb	r3, [r6, #0]
 8011f0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011f0e:	2b50      	cmp	r3, #80	; 0x50
 8011f10:	d13b      	bne.n	8011f8a <__gethex+0x156>
 8011f12:	7873      	ldrb	r3, [r6, #1]
 8011f14:	2b2b      	cmp	r3, #43	; 0x2b
 8011f16:	d02c      	beq.n	8011f72 <__gethex+0x13e>
 8011f18:	2b2d      	cmp	r3, #45	; 0x2d
 8011f1a:	d02e      	beq.n	8011f7a <__gethex+0x146>
 8011f1c:	1c71      	adds	r1, r6, #1
 8011f1e:	f04f 0900 	mov.w	r9, #0
 8011f22:	7808      	ldrb	r0, [r1, #0]
 8011f24:	f7ff ff71 	bl	8011e0a <__hexdig_fun>
 8011f28:	1e43      	subs	r3, r0, #1
 8011f2a:	b2db      	uxtb	r3, r3
 8011f2c:	2b18      	cmp	r3, #24
 8011f2e:	d82c      	bhi.n	8011f8a <__gethex+0x156>
 8011f30:	f1a0 0210 	sub.w	r2, r0, #16
 8011f34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011f38:	f7ff ff67 	bl	8011e0a <__hexdig_fun>
 8011f3c:	1e43      	subs	r3, r0, #1
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	2b18      	cmp	r3, #24
 8011f42:	d91d      	bls.n	8011f80 <__gethex+0x14c>
 8011f44:	f1b9 0f00 	cmp.w	r9, #0
 8011f48:	d000      	beq.n	8011f4c <__gethex+0x118>
 8011f4a:	4252      	negs	r2, r2
 8011f4c:	4415      	add	r5, r2
 8011f4e:	f8cb 1000 	str.w	r1, [fp]
 8011f52:	b1e4      	cbz	r4, 8011f8e <__gethex+0x15a>
 8011f54:	9b00      	ldr	r3, [sp, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	bf14      	ite	ne
 8011f5a:	2700      	movne	r7, #0
 8011f5c:	2706      	moveq	r7, #6
 8011f5e:	4638      	mov	r0, r7
 8011f60:	b009      	add	sp, #36	; 0x24
 8011f62:	ecbd 8b02 	vpop	{d8}
 8011f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f6a:	463e      	mov	r6, r7
 8011f6c:	4625      	mov	r5, r4
 8011f6e:	2401      	movs	r4, #1
 8011f70:	e7ca      	b.n	8011f08 <__gethex+0xd4>
 8011f72:	f04f 0900 	mov.w	r9, #0
 8011f76:	1cb1      	adds	r1, r6, #2
 8011f78:	e7d3      	b.n	8011f22 <__gethex+0xee>
 8011f7a:	f04f 0901 	mov.w	r9, #1
 8011f7e:	e7fa      	b.n	8011f76 <__gethex+0x142>
 8011f80:	230a      	movs	r3, #10
 8011f82:	fb03 0202 	mla	r2, r3, r2, r0
 8011f86:	3a10      	subs	r2, #16
 8011f88:	e7d4      	b.n	8011f34 <__gethex+0x100>
 8011f8a:	4631      	mov	r1, r6
 8011f8c:	e7df      	b.n	8011f4e <__gethex+0x11a>
 8011f8e:	1bf3      	subs	r3, r6, r7
 8011f90:	3b01      	subs	r3, #1
 8011f92:	4621      	mov	r1, r4
 8011f94:	2b07      	cmp	r3, #7
 8011f96:	dc0b      	bgt.n	8011fb0 <__gethex+0x17c>
 8011f98:	ee18 0a10 	vmov	r0, s16
 8011f9c:	f000 faea 	bl	8012574 <_Balloc>
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	b940      	cbnz	r0, 8011fb6 <__gethex+0x182>
 8011fa4:	4b65      	ldr	r3, [pc, #404]	; (801213c <__gethex+0x308>)
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	21de      	movs	r1, #222	; 0xde
 8011faa:	4865      	ldr	r0, [pc, #404]	; (8012140 <__gethex+0x30c>)
 8011fac:	f001 fc46 	bl	801383c <__assert_func>
 8011fb0:	3101      	adds	r1, #1
 8011fb2:	105b      	asrs	r3, r3, #1
 8011fb4:	e7ee      	b.n	8011f94 <__gethex+0x160>
 8011fb6:	f100 0914 	add.w	r9, r0, #20
 8011fba:	f04f 0b00 	mov.w	fp, #0
 8011fbe:	f1ca 0301 	rsb	r3, sl, #1
 8011fc2:	f8cd 9008 	str.w	r9, [sp, #8]
 8011fc6:	f8cd b000 	str.w	fp, [sp]
 8011fca:	9306      	str	r3, [sp, #24]
 8011fcc:	42b7      	cmp	r7, r6
 8011fce:	d340      	bcc.n	8012052 <__gethex+0x21e>
 8011fd0:	9802      	ldr	r0, [sp, #8]
 8011fd2:	9b00      	ldr	r3, [sp, #0]
 8011fd4:	f840 3b04 	str.w	r3, [r0], #4
 8011fd8:	eba0 0009 	sub.w	r0, r0, r9
 8011fdc:	1080      	asrs	r0, r0, #2
 8011fde:	0146      	lsls	r6, r0, #5
 8011fe0:	6120      	str	r0, [r4, #16]
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f000 fbbc 	bl	8012760 <__hi0bits>
 8011fe8:	1a30      	subs	r0, r6, r0
 8011fea:	f8d8 6000 	ldr.w	r6, [r8]
 8011fee:	42b0      	cmp	r0, r6
 8011ff0:	dd63      	ble.n	80120ba <__gethex+0x286>
 8011ff2:	1b87      	subs	r7, r0, r6
 8011ff4:	4639      	mov	r1, r7
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f000 ff56 	bl	8012ea8 <__any_on>
 8011ffc:	4682      	mov	sl, r0
 8011ffe:	b1a8      	cbz	r0, 801202c <__gethex+0x1f8>
 8012000:	1e7b      	subs	r3, r7, #1
 8012002:	1159      	asrs	r1, r3, #5
 8012004:	f003 021f 	and.w	r2, r3, #31
 8012008:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801200c:	f04f 0a01 	mov.w	sl, #1
 8012010:	fa0a f202 	lsl.w	r2, sl, r2
 8012014:	420a      	tst	r2, r1
 8012016:	d009      	beq.n	801202c <__gethex+0x1f8>
 8012018:	4553      	cmp	r3, sl
 801201a:	dd05      	ble.n	8012028 <__gethex+0x1f4>
 801201c:	1eb9      	subs	r1, r7, #2
 801201e:	4620      	mov	r0, r4
 8012020:	f000 ff42 	bl	8012ea8 <__any_on>
 8012024:	2800      	cmp	r0, #0
 8012026:	d145      	bne.n	80120b4 <__gethex+0x280>
 8012028:	f04f 0a02 	mov.w	sl, #2
 801202c:	4639      	mov	r1, r7
 801202e:	4620      	mov	r0, r4
 8012030:	f7ff fe99 	bl	8011d66 <rshift>
 8012034:	443d      	add	r5, r7
 8012036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801203a:	42ab      	cmp	r3, r5
 801203c:	da4c      	bge.n	80120d8 <__gethex+0x2a4>
 801203e:	ee18 0a10 	vmov	r0, s16
 8012042:	4621      	mov	r1, r4
 8012044:	f000 fad6 	bl	80125f4 <_Bfree>
 8012048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801204a:	2300      	movs	r3, #0
 801204c:	6013      	str	r3, [r2, #0]
 801204e:	27a3      	movs	r7, #163	; 0xa3
 8012050:	e785      	b.n	8011f5e <__gethex+0x12a>
 8012052:	1e73      	subs	r3, r6, #1
 8012054:	9a05      	ldr	r2, [sp, #20]
 8012056:	9303      	str	r3, [sp, #12]
 8012058:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801205c:	4293      	cmp	r3, r2
 801205e:	d019      	beq.n	8012094 <__gethex+0x260>
 8012060:	f1bb 0f20 	cmp.w	fp, #32
 8012064:	d107      	bne.n	8012076 <__gethex+0x242>
 8012066:	9b02      	ldr	r3, [sp, #8]
 8012068:	9a00      	ldr	r2, [sp, #0]
 801206a:	f843 2b04 	str.w	r2, [r3], #4
 801206e:	9302      	str	r3, [sp, #8]
 8012070:	2300      	movs	r3, #0
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	469b      	mov	fp, r3
 8012076:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801207a:	f7ff fec6 	bl	8011e0a <__hexdig_fun>
 801207e:	9b00      	ldr	r3, [sp, #0]
 8012080:	f000 000f 	and.w	r0, r0, #15
 8012084:	fa00 f00b 	lsl.w	r0, r0, fp
 8012088:	4303      	orrs	r3, r0
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	f10b 0b04 	add.w	fp, fp, #4
 8012090:	9b03      	ldr	r3, [sp, #12]
 8012092:	e00d      	b.n	80120b0 <__gethex+0x27c>
 8012094:	9b03      	ldr	r3, [sp, #12]
 8012096:	9a06      	ldr	r2, [sp, #24]
 8012098:	4413      	add	r3, r2
 801209a:	42bb      	cmp	r3, r7
 801209c:	d3e0      	bcc.n	8012060 <__gethex+0x22c>
 801209e:	4618      	mov	r0, r3
 80120a0:	9901      	ldr	r1, [sp, #4]
 80120a2:	9307      	str	r3, [sp, #28]
 80120a4:	4652      	mov	r2, sl
 80120a6:	f7fe fd80 	bl	8010baa <strncmp>
 80120aa:	9b07      	ldr	r3, [sp, #28]
 80120ac:	2800      	cmp	r0, #0
 80120ae:	d1d7      	bne.n	8012060 <__gethex+0x22c>
 80120b0:	461e      	mov	r6, r3
 80120b2:	e78b      	b.n	8011fcc <__gethex+0x198>
 80120b4:	f04f 0a03 	mov.w	sl, #3
 80120b8:	e7b8      	b.n	801202c <__gethex+0x1f8>
 80120ba:	da0a      	bge.n	80120d2 <__gethex+0x29e>
 80120bc:	1a37      	subs	r7, r6, r0
 80120be:	4621      	mov	r1, r4
 80120c0:	ee18 0a10 	vmov	r0, s16
 80120c4:	463a      	mov	r2, r7
 80120c6:	f000 fcb1 	bl	8012a2c <__lshift>
 80120ca:	1bed      	subs	r5, r5, r7
 80120cc:	4604      	mov	r4, r0
 80120ce:	f100 0914 	add.w	r9, r0, #20
 80120d2:	f04f 0a00 	mov.w	sl, #0
 80120d6:	e7ae      	b.n	8012036 <__gethex+0x202>
 80120d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80120dc:	42a8      	cmp	r0, r5
 80120de:	dd72      	ble.n	80121c6 <__gethex+0x392>
 80120e0:	1b45      	subs	r5, r0, r5
 80120e2:	42ae      	cmp	r6, r5
 80120e4:	dc36      	bgt.n	8012154 <__gethex+0x320>
 80120e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80120ea:	2b02      	cmp	r3, #2
 80120ec:	d02a      	beq.n	8012144 <__gethex+0x310>
 80120ee:	2b03      	cmp	r3, #3
 80120f0:	d02c      	beq.n	801214c <__gethex+0x318>
 80120f2:	2b01      	cmp	r3, #1
 80120f4:	d115      	bne.n	8012122 <__gethex+0x2ee>
 80120f6:	42ae      	cmp	r6, r5
 80120f8:	d113      	bne.n	8012122 <__gethex+0x2ee>
 80120fa:	2e01      	cmp	r6, #1
 80120fc:	d10b      	bne.n	8012116 <__gethex+0x2e2>
 80120fe:	9a04      	ldr	r2, [sp, #16]
 8012100:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012104:	6013      	str	r3, [r2, #0]
 8012106:	2301      	movs	r3, #1
 8012108:	6123      	str	r3, [r4, #16]
 801210a:	f8c9 3000 	str.w	r3, [r9]
 801210e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012110:	2762      	movs	r7, #98	; 0x62
 8012112:	601c      	str	r4, [r3, #0]
 8012114:	e723      	b.n	8011f5e <__gethex+0x12a>
 8012116:	1e71      	subs	r1, r6, #1
 8012118:	4620      	mov	r0, r4
 801211a:	f000 fec5 	bl	8012ea8 <__any_on>
 801211e:	2800      	cmp	r0, #0
 8012120:	d1ed      	bne.n	80120fe <__gethex+0x2ca>
 8012122:	ee18 0a10 	vmov	r0, s16
 8012126:	4621      	mov	r1, r4
 8012128:	f000 fa64 	bl	80125f4 <_Bfree>
 801212c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801212e:	2300      	movs	r3, #0
 8012130:	6013      	str	r3, [r2, #0]
 8012132:	2750      	movs	r7, #80	; 0x50
 8012134:	e713      	b.n	8011f5e <__gethex+0x12a>
 8012136:	bf00      	nop
 8012138:	08015d54 	.word	0x08015d54
 801213c:	08015cd8 	.word	0x08015cd8
 8012140:	08015ce9 	.word	0x08015ce9
 8012144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1eb      	bne.n	8012122 <__gethex+0x2ee>
 801214a:	e7d8      	b.n	80120fe <__gethex+0x2ca>
 801214c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801214e:	2b00      	cmp	r3, #0
 8012150:	d1d5      	bne.n	80120fe <__gethex+0x2ca>
 8012152:	e7e6      	b.n	8012122 <__gethex+0x2ee>
 8012154:	1e6f      	subs	r7, r5, #1
 8012156:	f1ba 0f00 	cmp.w	sl, #0
 801215a:	d131      	bne.n	80121c0 <__gethex+0x38c>
 801215c:	b127      	cbz	r7, 8012168 <__gethex+0x334>
 801215e:	4639      	mov	r1, r7
 8012160:	4620      	mov	r0, r4
 8012162:	f000 fea1 	bl	8012ea8 <__any_on>
 8012166:	4682      	mov	sl, r0
 8012168:	117b      	asrs	r3, r7, #5
 801216a:	2101      	movs	r1, #1
 801216c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012170:	f007 071f 	and.w	r7, r7, #31
 8012174:	fa01 f707 	lsl.w	r7, r1, r7
 8012178:	421f      	tst	r7, r3
 801217a:	4629      	mov	r1, r5
 801217c:	4620      	mov	r0, r4
 801217e:	bf18      	it	ne
 8012180:	f04a 0a02 	orrne.w	sl, sl, #2
 8012184:	1b76      	subs	r6, r6, r5
 8012186:	f7ff fdee 	bl	8011d66 <rshift>
 801218a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801218e:	2702      	movs	r7, #2
 8012190:	f1ba 0f00 	cmp.w	sl, #0
 8012194:	d048      	beq.n	8012228 <__gethex+0x3f4>
 8012196:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801219a:	2b02      	cmp	r3, #2
 801219c:	d015      	beq.n	80121ca <__gethex+0x396>
 801219e:	2b03      	cmp	r3, #3
 80121a0:	d017      	beq.n	80121d2 <__gethex+0x39e>
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d109      	bne.n	80121ba <__gethex+0x386>
 80121a6:	f01a 0f02 	tst.w	sl, #2
 80121aa:	d006      	beq.n	80121ba <__gethex+0x386>
 80121ac:	f8d9 0000 	ldr.w	r0, [r9]
 80121b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80121b4:	f01a 0f01 	tst.w	sl, #1
 80121b8:	d10e      	bne.n	80121d8 <__gethex+0x3a4>
 80121ba:	f047 0710 	orr.w	r7, r7, #16
 80121be:	e033      	b.n	8012228 <__gethex+0x3f4>
 80121c0:	f04f 0a01 	mov.w	sl, #1
 80121c4:	e7d0      	b.n	8012168 <__gethex+0x334>
 80121c6:	2701      	movs	r7, #1
 80121c8:	e7e2      	b.n	8012190 <__gethex+0x35c>
 80121ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121cc:	f1c3 0301 	rsb	r3, r3, #1
 80121d0:	9315      	str	r3, [sp, #84]	; 0x54
 80121d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d0f0      	beq.n	80121ba <__gethex+0x386>
 80121d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80121dc:	f104 0314 	add.w	r3, r4, #20
 80121e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80121e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80121e8:	f04f 0c00 	mov.w	ip, #0
 80121ec:	4618      	mov	r0, r3
 80121ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80121f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80121f6:	d01c      	beq.n	8012232 <__gethex+0x3fe>
 80121f8:	3201      	adds	r2, #1
 80121fa:	6002      	str	r2, [r0, #0]
 80121fc:	2f02      	cmp	r7, #2
 80121fe:	f104 0314 	add.w	r3, r4, #20
 8012202:	d13f      	bne.n	8012284 <__gethex+0x450>
 8012204:	f8d8 2000 	ldr.w	r2, [r8]
 8012208:	3a01      	subs	r2, #1
 801220a:	42b2      	cmp	r2, r6
 801220c:	d10a      	bne.n	8012224 <__gethex+0x3f0>
 801220e:	1171      	asrs	r1, r6, #5
 8012210:	2201      	movs	r2, #1
 8012212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012216:	f006 061f 	and.w	r6, r6, #31
 801221a:	fa02 f606 	lsl.w	r6, r2, r6
 801221e:	421e      	tst	r6, r3
 8012220:	bf18      	it	ne
 8012222:	4617      	movne	r7, r2
 8012224:	f047 0720 	orr.w	r7, r7, #32
 8012228:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801222a:	601c      	str	r4, [r3, #0]
 801222c:	9b04      	ldr	r3, [sp, #16]
 801222e:	601d      	str	r5, [r3, #0]
 8012230:	e695      	b.n	8011f5e <__gethex+0x12a>
 8012232:	4299      	cmp	r1, r3
 8012234:	f843 cc04 	str.w	ip, [r3, #-4]
 8012238:	d8d8      	bhi.n	80121ec <__gethex+0x3b8>
 801223a:	68a3      	ldr	r3, [r4, #8]
 801223c:	459b      	cmp	fp, r3
 801223e:	db19      	blt.n	8012274 <__gethex+0x440>
 8012240:	6861      	ldr	r1, [r4, #4]
 8012242:	ee18 0a10 	vmov	r0, s16
 8012246:	3101      	adds	r1, #1
 8012248:	f000 f994 	bl	8012574 <_Balloc>
 801224c:	4681      	mov	r9, r0
 801224e:	b918      	cbnz	r0, 8012258 <__gethex+0x424>
 8012250:	4b1a      	ldr	r3, [pc, #104]	; (80122bc <__gethex+0x488>)
 8012252:	4602      	mov	r2, r0
 8012254:	2184      	movs	r1, #132	; 0x84
 8012256:	e6a8      	b.n	8011faa <__gethex+0x176>
 8012258:	6922      	ldr	r2, [r4, #16]
 801225a:	3202      	adds	r2, #2
 801225c:	f104 010c 	add.w	r1, r4, #12
 8012260:	0092      	lsls	r2, r2, #2
 8012262:	300c      	adds	r0, #12
 8012264:	f7fe f93a 	bl	80104dc <memcpy>
 8012268:	4621      	mov	r1, r4
 801226a:	ee18 0a10 	vmov	r0, s16
 801226e:	f000 f9c1 	bl	80125f4 <_Bfree>
 8012272:	464c      	mov	r4, r9
 8012274:	6923      	ldr	r3, [r4, #16]
 8012276:	1c5a      	adds	r2, r3, #1
 8012278:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801227c:	6122      	str	r2, [r4, #16]
 801227e:	2201      	movs	r2, #1
 8012280:	615a      	str	r2, [r3, #20]
 8012282:	e7bb      	b.n	80121fc <__gethex+0x3c8>
 8012284:	6922      	ldr	r2, [r4, #16]
 8012286:	455a      	cmp	r2, fp
 8012288:	dd0b      	ble.n	80122a2 <__gethex+0x46e>
 801228a:	2101      	movs	r1, #1
 801228c:	4620      	mov	r0, r4
 801228e:	f7ff fd6a 	bl	8011d66 <rshift>
 8012292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012296:	3501      	adds	r5, #1
 8012298:	42ab      	cmp	r3, r5
 801229a:	f6ff aed0 	blt.w	801203e <__gethex+0x20a>
 801229e:	2701      	movs	r7, #1
 80122a0:	e7c0      	b.n	8012224 <__gethex+0x3f0>
 80122a2:	f016 061f 	ands.w	r6, r6, #31
 80122a6:	d0fa      	beq.n	801229e <__gethex+0x46a>
 80122a8:	449a      	add	sl, r3
 80122aa:	f1c6 0620 	rsb	r6, r6, #32
 80122ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80122b2:	f000 fa55 	bl	8012760 <__hi0bits>
 80122b6:	42b0      	cmp	r0, r6
 80122b8:	dbe7      	blt.n	801228a <__gethex+0x456>
 80122ba:	e7f0      	b.n	801229e <__gethex+0x46a>
 80122bc:	08015cd8 	.word	0x08015cd8

080122c0 <L_shift>:
 80122c0:	f1c2 0208 	rsb	r2, r2, #8
 80122c4:	0092      	lsls	r2, r2, #2
 80122c6:	b570      	push	{r4, r5, r6, lr}
 80122c8:	f1c2 0620 	rsb	r6, r2, #32
 80122cc:	6843      	ldr	r3, [r0, #4]
 80122ce:	6804      	ldr	r4, [r0, #0]
 80122d0:	fa03 f506 	lsl.w	r5, r3, r6
 80122d4:	432c      	orrs	r4, r5
 80122d6:	40d3      	lsrs	r3, r2
 80122d8:	6004      	str	r4, [r0, #0]
 80122da:	f840 3f04 	str.w	r3, [r0, #4]!
 80122de:	4288      	cmp	r0, r1
 80122e0:	d3f4      	bcc.n	80122cc <L_shift+0xc>
 80122e2:	bd70      	pop	{r4, r5, r6, pc}

080122e4 <__match>:
 80122e4:	b530      	push	{r4, r5, lr}
 80122e6:	6803      	ldr	r3, [r0, #0]
 80122e8:	3301      	adds	r3, #1
 80122ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122ee:	b914      	cbnz	r4, 80122f6 <__match+0x12>
 80122f0:	6003      	str	r3, [r0, #0]
 80122f2:	2001      	movs	r0, #1
 80122f4:	bd30      	pop	{r4, r5, pc}
 80122f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80122fe:	2d19      	cmp	r5, #25
 8012300:	bf98      	it	ls
 8012302:	3220      	addls	r2, #32
 8012304:	42a2      	cmp	r2, r4
 8012306:	d0f0      	beq.n	80122ea <__match+0x6>
 8012308:	2000      	movs	r0, #0
 801230a:	e7f3      	b.n	80122f4 <__match+0x10>

0801230c <__hexnan>:
 801230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012310:	680b      	ldr	r3, [r1, #0]
 8012312:	6801      	ldr	r1, [r0, #0]
 8012314:	115e      	asrs	r6, r3, #5
 8012316:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801231a:	f013 031f 	ands.w	r3, r3, #31
 801231e:	b087      	sub	sp, #28
 8012320:	bf18      	it	ne
 8012322:	3604      	addne	r6, #4
 8012324:	2500      	movs	r5, #0
 8012326:	1f37      	subs	r7, r6, #4
 8012328:	4682      	mov	sl, r0
 801232a:	4690      	mov	r8, r2
 801232c:	9301      	str	r3, [sp, #4]
 801232e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012332:	46b9      	mov	r9, r7
 8012334:	463c      	mov	r4, r7
 8012336:	9502      	str	r5, [sp, #8]
 8012338:	46ab      	mov	fp, r5
 801233a:	784a      	ldrb	r2, [r1, #1]
 801233c:	1c4b      	adds	r3, r1, #1
 801233e:	9303      	str	r3, [sp, #12]
 8012340:	b342      	cbz	r2, 8012394 <__hexnan+0x88>
 8012342:	4610      	mov	r0, r2
 8012344:	9105      	str	r1, [sp, #20]
 8012346:	9204      	str	r2, [sp, #16]
 8012348:	f7ff fd5f 	bl	8011e0a <__hexdig_fun>
 801234c:	2800      	cmp	r0, #0
 801234e:	d14f      	bne.n	80123f0 <__hexnan+0xe4>
 8012350:	9a04      	ldr	r2, [sp, #16]
 8012352:	9905      	ldr	r1, [sp, #20]
 8012354:	2a20      	cmp	r2, #32
 8012356:	d818      	bhi.n	801238a <__hexnan+0x7e>
 8012358:	9b02      	ldr	r3, [sp, #8]
 801235a:	459b      	cmp	fp, r3
 801235c:	dd13      	ble.n	8012386 <__hexnan+0x7a>
 801235e:	454c      	cmp	r4, r9
 8012360:	d206      	bcs.n	8012370 <__hexnan+0x64>
 8012362:	2d07      	cmp	r5, #7
 8012364:	dc04      	bgt.n	8012370 <__hexnan+0x64>
 8012366:	462a      	mov	r2, r5
 8012368:	4649      	mov	r1, r9
 801236a:	4620      	mov	r0, r4
 801236c:	f7ff ffa8 	bl	80122c0 <L_shift>
 8012370:	4544      	cmp	r4, r8
 8012372:	d950      	bls.n	8012416 <__hexnan+0x10a>
 8012374:	2300      	movs	r3, #0
 8012376:	f1a4 0904 	sub.w	r9, r4, #4
 801237a:	f844 3c04 	str.w	r3, [r4, #-4]
 801237e:	f8cd b008 	str.w	fp, [sp, #8]
 8012382:	464c      	mov	r4, r9
 8012384:	461d      	mov	r5, r3
 8012386:	9903      	ldr	r1, [sp, #12]
 8012388:	e7d7      	b.n	801233a <__hexnan+0x2e>
 801238a:	2a29      	cmp	r2, #41	; 0x29
 801238c:	d156      	bne.n	801243c <__hexnan+0x130>
 801238e:	3102      	adds	r1, #2
 8012390:	f8ca 1000 	str.w	r1, [sl]
 8012394:	f1bb 0f00 	cmp.w	fp, #0
 8012398:	d050      	beq.n	801243c <__hexnan+0x130>
 801239a:	454c      	cmp	r4, r9
 801239c:	d206      	bcs.n	80123ac <__hexnan+0xa0>
 801239e:	2d07      	cmp	r5, #7
 80123a0:	dc04      	bgt.n	80123ac <__hexnan+0xa0>
 80123a2:	462a      	mov	r2, r5
 80123a4:	4649      	mov	r1, r9
 80123a6:	4620      	mov	r0, r4
 80123a8:	f7ff ff8a 	bl	80122c0 <L_shift>
 80123ac:	4544      	cmp	r4, r8
 80123ae:	d934      	bls.n	801241a <__hexnan+0x10e>
 80123b0:	f1a8 0204 	sub.w	r2, r8, #4
 80123b4:	4623      	mov	r3, r4
 80123b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80123ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80123be:	429f      	cmp	r7, r3
 80123c0:	d2f9      	bcs.n	80123b6 <__hexnan+0xaa>
 80123c2:	1b3b      	subs	r3, r7, r4
 80123c4:	f023 0303 	bic.w	r3, r3, #3
 80123c8:	3304      	adds	r3, #4
 80123ca:	3401      	adds	r4, #1
 80123cc:	3e03      	subs	r6, #3
 80123ce:	42b4      	cmp	r4, r6
 80123d0:	bf88      	it	hi
 80123d2:	2304      	movhi	r3, #4
 80123d4:	4443      	add	r3, r8
 80123d6:	2200      	movs	r2, #0
 80123d8:	f843 2b04 	str.w	r2, [r3], #4
 80123dc:	429f      	cmp	r7, r3
 80123de:	d2fb      	bcs.n	80123d8 <__hexnan+0xcc>
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	b91b      	cbnz	r3, 80123ec <__hexnan+0xe0>
 80123e4:	4547      	cmp	r7, r8
 80123e6:	d127      	bne.n	8012438 <__hexnan+0x12c>
 80123e8:	2301      	movs	r3, #1
 80123ea:	603b      	str	r3, [r7, #0]
 80123ec:	2005      	movs	r0, #5
 80123ee:	e026      	b.n	801243e <__hexnan+0x132>
 80123f0:	3501      	adds	r5, #1
 80123f2:	2d08      	cmp	r5, #8
 80123f4:	f10b 0b01 	add.w	fp, fp, #1
 80123f8:	dd06      	ble.n	8012408 <__hexnan+0xfc>
 80123fa:	4544      	cmp	r4, r8
 80123fc:	d9c3      	bls.n	8012386 <__hexnan+0x7a>
 80123fe:	2300      	movs	r3, #0
 8012400:	f844 3c04 	str.w	r3, [r4, #-4]
 8012404:	2501      	movs	r5, #1
 8012406:	3c04      	subs	r4, #4
 8012408:	6822      	ldr	r2, [r4, #0]
 801240a:	f000 000f 	and.w	r0, r0, #15
 801240e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012412:	6022      	str	r2, [r4, #0]
 8012414:	e7b7      	b.n	8012386 <__hexnan+0x7a>
 8012416:	2508      	movs	r5, #8
 8012418:	e7b5      	b.n	8012386 <__hexnan+0x7a>
 801241a:	9b01      	ldr	r3, [sp, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d0df      	beq.n	80123e0 <__hexnan+0xd4>
 8012420:	f04f 32ff 	mov.w	r2, #4294967295
 8012424:	f1c3 0320 	rsb	r3, r3, #32
 8012428:	fa22 f303 	lsr.w	r3, r2, r3
 801242c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012430:	401a      	ands	r2, r3
 8012432:	f846 2c04 	str.w	r2, [r6, #-4]
 8012436:	e7d3      	b.n	80123e0 <__hexnan+0xd4>
 8012438:	3f04      	subs	r7, #4
 801243a:	e7d1      	b.n	80123e0 <__hexnan+0xd4>
 801243c:	2004      	movs	r0, #4
 801243e:	b007      	add	sp, #28
 8012440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012444 <__retarget_lock_init_recursive>:
 8012444:	4770      	bx	lr

08012446 <__retarget_lock_acquire_recursive>:
 8012446:	4770      	bx	lr

08012448 <__retarget_lock_release_recursive>:
 8012448:	4770      	bx	lr
	...

0801244c <_lseek_r>:
 801244c:	b538      	push	{r3, r4, r5, lr}
 801244e:	4d07      	ldr	r5, [pc, #28]	; (801246c <_lseek_r+0x20>)
 8012450:	4604      	mov	r4, r0
 8012452:	4608      	mov	r0, r1
 8012454:	4611      	mov	r1, r2
 8012456:	2200      	movs	r2, #0
 8012458:	602a      	str	r2, [r5, #0]
 801245a:	461a      	mov	r2, r3
 801245c:	f7f0 fd10 	bl	8002e80 <_lseek>
 8012460:	1c43      	adds	r3, r0, #1
 8012462:	d102      	bne.n	801246a <_lseek_r+0x1e>
 8012464:	682b      	ldr	r3, [r5, #0]
 8012466:	b103      	cbz	r3, 801246a <_lseek_r+0x1e>
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	bd38      	pop	{r3, r4, r5, pc}
 801246c:	200034dc 	.word	0x200034dc

08012470 <__swhatbuf_r>:
 8012470:	b570      	push	{r4, r5, r6, lr}
 8012472:	460e      	mov	r6, r1
 8012474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012478:	2900      	cmp	r1, #0
 801247a:	b096      	sub	sp, #88	; 0x58
 801247c:	4614      	mov	r4, r2
 801247e:	461d      	mov	r5, r3
 8012480:	da07      	bge.n	8012492 <__swhatbuf_r+0x22>
 8012482:	2300      	movs	r3, #0
 8012484:	602b      	str	r3, [r5, #0]
 8012486:	89b3      	ldrh	r3, [r6, #12]
 8012488:	061a      	lsls	r2, r3, #24
 801248a:	d410      	bmi.n	80124ae <__swhatbuf_r+0x3e>
 801248c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012490:	e00e      	b.n	80124b0 <__swhatbuf_r+0x40>
 8012492:	466a      	mov	r2, sp
 8012494:	f001 fa02 	bl	801389c <_fstat_r>
 8012498:	2800      	cmp	r0, #0
 801249a:	dbf2      	blt.n	8012482 <__swhatbuf_r+0x12>
 801249c:	9a01      	ldr	r2, [sp, #4]
 801249e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80124a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80124a6:	425a      	negs	r2, r3
 80124a8:	415a      	adcs	r2, r3
 80124aa:	602a      	str	r2, [r5, #0]
 80124ac:	e7ee      	b.n	801248c <__swhatbuf_r+0x1c>
 80124ae:	2340      	movs	r3, #64	; 0x40
 80124b0:	2000      	movs	r0, #0
 80124b2:	6023      	str	r3, [r4, #0]
 80124b4:	b016      	add	sp, #88	; 0x58
 80124b6:	bd70      	pop	{r4, r5, r6, pc}

080124b8 <__smakebuf_r>:
 80124b8:	898b      	ldrh	r3, [r1, #12]
 80124ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80124bc:	079d      	lsls	r5, r3, #30
 80124be:	4606      	mov	r6, r0
 80124c0:	460c      	mov	r4, r1
 80124c2:	d507      	bpl.n	80124d4 <__smakebuf_r+0x1c>
 80124c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80124c8:	6023      	str	r3, [r4, #0]
 80124ca:	6123      	str	r3, [r4, #16]
 80124cc:	2301      	movs	r3, #1
 80124ce:	6163      	str	r3, [r4, #20]
 80124d0:	b002      	add	sp, #8
 80124d2:	bd70      	pop	{r4, r5, r6, pc}
 80124d4:	ab01      	add	r3, sp, #4
 80124d6:	466a      	mov	r2, sp
 80124d8:	f7ff ffca 	bl	8012470 <__swhatbuf_r>
 80124dc:	9900      	ldr	r1, [sp, #0]
 80124de:	4605      	mov	r5, r0
 80124e0:	4630      	mov	r0, r6
 80124e2:	f7fe f861 	bl	80105a8 <_malloc_r>
 80124e6:	b948      	cbnz	r0, 80124fc <__smakebuf_r+0x44>
 80124e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124ec:	059a      	lsls	r2, r3, #22
 80124ee:	d4ef      	bmi.n	80124d0 <__smakebuf_r+0x18>
 80124f0:	f023 0303 	bic.w	r3, r3, #3
 80124f4:	f043 0302 	orr.w	r3, r3, #2
 80124f8:	81a3      	strh	r3, [r4, #12]
 80124fa:	e7e3      	b.n	80124c4 <__smakebuf_r+0xc>
 80124fc:	4b0d      	ldr	r3, [pc, #52]	; (8012534 <__smakebuf_r+0x7c>)
 80124fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8012500:	89a3      	ldrh	r3, [r4, #12]
 8012502:	6020      	str	r0, [r4, #0]
 8012504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012508:	81a3      	strh	r3, [r4, #12]
 801250a:	9b00      	ldr	r3, [sp, #0]
 801250c:	6163      	str	r3, [r4, #20]
 801250e:	9b01      	ldr	r3, [sp, #4]
 8012510:	6120      	str	r0, [r4, #16]
 8012512:	b15b      	cbz	r3, 801252c <__smakebuf_r+0x74>
 8012514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012518:	4630      	mov	r0, r6
 801251a:	f001 f9d1 	bl	80138c0 <_isatty_r>
 801251e:	b128      	cbz	r0, 801252c <__smakebuf_r+0x74>
 8012520:	89a3      	ldrh	r3, [r4, #12]
 8012522:	f023 0303 	bic.w	r3, r3, #3
 8012526:	f043 0301 	orr.w	r3, r3, #1
 801252a:	81a3      	strh	r3, [r4, #12]
 801252c:	89a0      	ldrh	r0, [r4, #12]
 801252e:	4305      	orrs	r5, r0
 8012530:	81a5      	strh	r5, [r4, #12]
 8012532:	e7cd      	b.n	80124d0 <__smakebuf_r+0x18>
 8012534:	08011bc5 	.word	0x08011bc5

08012538 <__ascii_mbtowc>:
 8012538:	b082      	sub	sp, #8
 801253a:	b901      	cbnz	r1, 801253e <__ascii_mbtowc+0x6>
 801253c:	a901      	add	r1, sp, #4
 801253e:	b142      	cbz	r2, 8012552 <__ascii_mbtowc+0x1a>
 8012540:	b14b      	cbz	r3, 8012556 <__ascii_mbtowc+0x1e>
 8012542:	7813      	ldrb	r3, [r2, #0]
 8012544:	600b      	str	r3, [r1, #0]
 8012546:	7812      	ldrb	r2, [r2, #0]
 8012548:	1e10      	subs	r0, r2, #0
 801254a:	bf18      	it	ne
 801254c:	2001      	movne	r0, #1
 801254e:	b002      	add	sp, #8
 8012550:	4770      	bx	lr
 8012552:	4610      	mov	r0, r2
 8012554:	e7fb      	b.n	801254e <__ascii_mbtowc+0x16>
 8012556:	f06f 0001 	mvn.w	r0, #1
 801255a:	e7f8      	b.n	801254e <__ascii_mbtowc+0x16>

0801255c <__malloc_lock>:
 801255c:	4801      	ldr	r0, [pc, #4]	; (8012564 <__malloc_lock+0x8>)
 801255e:	f7ff bf72 	b.w	8012446 <__retarget_lock_acquire_recursive>
 8012562:	bf00      	nop
 8012564:	200034d4 	.word	0x200034d4

08012568 <__malloc_unlock>:
 8012568:	4801      	ldr	r0, [pc, #4]	; (8012570 <__malloc_unlock+0x8>)
 801256a:	f7ff bf6d 	b.w	8012448 <__retarget_lock_release_recursive>
 801256e:	bf00      	nop
 8012570:	200034d4 	.word	0x200034d4

08012574 <_Balloc>:
 8012574:	b570      	push	{r4, r5, r6, lr}
 8012576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012578:	4604      	mov	r4, r0
 801257a:	460d      	mov	r5, r1
 801257c:	b976      	cbnz	r6, 801259c <_Balloc+0x28>
 801257e:	2010      	movs	r0, #16
 8012580:	f7fd ff9c 	bl	80104bc <malloc>
 8012584:	4602      	mov	r2, r0
 8012586:	6260      	str	r0, [r4, #36]	; 0x24
 8012588:	b920      	cbnz	r0, 8012594 <_Balloc+0x20>
 801258a:	4b18      	ldr	r3, [pc, #96]	; (80125ec <_Balloc+0x78>)
 801258c:	4818      	ldr	r0, [pc, #96]	; (80125f0 <_Balloc+0x7c>)
 801258e:	2166      	movs	r1, #102	; 0x66
 8012590:	f001 f954 	bl	801383c <__assert_func>
 8012594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012598:	6006      	str	r6, [r0, #0]
 801259a:	60c6      	str	r6, [r0, #12]
 801259c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801259e:	68f3      	ldr	r3, [r6, #12]
 80125a0:	b183      	cbz	r3, 80125c4 <_Balloc+0x50>
 80125a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80125aa:	b9b8      	cbnz	r0, 80125dc <_Balloc+0x68>
 80125ac:	2101      	movs	r1, #1
 80125ae:	fa01 f605 	lsl.w	r6, r1, r5
 80125b2:	1d72      	adds	r2, r6, #5
 80125b4:	0092      	lsls	r2, r2, #2
 80125b6:	4620      	mov	r0, r4
 80125b8:	f000 fc97 	bl	8012eea <_calloc_r>
 80125bc:	b160      	cbz	r0, 80125d8 <_Balloc+0x64>
 80125be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80125c2:	e00e      	b.n	80125e2 <_Balloc+0x6e>
 80125c4:	2221      	movs	r2, #33	; 0x21
 80125c6:	2104      	movs	r1, #4
 80125c8:	4620      	mov	r0, r4
 80125ca:	f000 fc8e 	bl	8012eea <_calloc_r>
 80125ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125d0:	60f0      	str	r0, [r6, #12]
 80125d2:	68db      	ldr	r3, [r3, #12]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d1e4      	bne.n	80125a2 <_Balloc+0x2e>
 80125d8:	2000      	movs	r0, #0
 80125da:	bd70      	pop	{r4, r5, r6, pc}
 80125dc:	6802      	ldr	r2, [r0, #0]
 80125de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80125e2:	2300      	movs	r3, #0
 80125e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80125e8:	e7f7      	b.n	80125da <_Balloc+0x66>
 80125ea:	bf00      	nop
 80125ec:	08015d68 	.word	0x08015d68
 80125f0:	08015d7f 	.word	0x08015d7f

080125f4 <_Bfree>:
 80125f4:	b570      	push	{r4, r5, r6, lr}
 80125f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80125f8:	4605      	mov	r5, r0
 80125fa:	460c      	mov	r4, r1
 80125fc:	b976      	cbnz	r6, 801261c <_Bfree+0x28>
 80125fe:	2010      	movs	r0, #16
 8012600:	f7fd ff5c 	bl	80104bc <malloc>
 8012604:	4602      	mov	r2, r0
 8012606:	6268      	str	r0, [r5, #36]	; 0x24
 8012608:	b920      	cbnz	r0, 8012614 <_Bfree+0x20>
 801260a:	4b09      	ldr	r3, [pc, #36]	; (8012630 <_Bfree+0x3c>)
 801260c:	4809      	ldr	r0, [pc, #36]	; (8012634 <_Bfree+0x40>)
 801260e:	218a      	movs	r1, #138	; 0x8a
 8012610:	f001 f914 	bl	801383c <__assert_func>
 8012614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012618:	6006      	str	r6, [r0, #0]
 801261a:	60c6      	str	r6, [r0, #12]
 801261c:	b13c      	cbz	r4, 801262e <_Bfree+0x3a>
 801261e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012620:	6862      	ldr	r2, [r4, #4]
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012628:	6021      	str	r1, [r4, #0]
 801262a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801262e:	bd70      	pop	{r4, r5, r6, pc}
 8012630:	08015d68 	.word	0x08015d68
 8012634:	08015d7f 	.word	0x08015d7f

08012638 <__multadd>:
 8012638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801263c:	690e      	ldr	r6, [r1, #16]
 801263e:	4607      	mov	r7, r0
 8012640:	4698      	mov	r8, r3
 8012642:	460c      	mov	r4, r1
 8012644:	f101 0014 	add.w	r0, r1, #20
 8012648:	2300      	movs	r3, #0
 801264a:	6805      	ldr	r5, [r0, #0]
 801264c:	b2a9      	uxth	r1, r5
 801264e:	fb02 8101 	mla	r1, r2, r1, r8
 8012652:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012656:	0c2d      	lsrs	r5, r5, #16
 8012658:	fb02 c505 	mla	r5, r2, r5, ip
 801265c:	b289      	uxth	r1, r1
 801265e:	3301      	adds	r3, #1
 8012660:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012664:	429e      	cmp	r6, r3
 8012666:	f840 1b04 	str.w	r1, [r0], #4
 801266a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801266e:	dcec      	bgt.n	801264a <__multadd+0x12>
 8012670:	f1b8 0f00 	cmp.w	r8, #0
 8012674:	d022      	beq.n	80126bc <__multadd+0x84>
 8012676:	68a3      	ldr	r3, [r4, #8]
 8012678:	42b3      	cmp	r3, r6
 801267a:	dc19      	bgt.n	80126b0 <__multadd+0x78>
 801267c:	6861      	ldr	r1, [r4, #4]
 801267e:	4638      	mov	r0, r7
 8012680:	3101      	adds	r1, #1
 8012682:	f7ff ff77 	bl	8012574 <_Balloc>
 8012686:	4605      	mov	r5, r0
 8012688:	b928      	cbnz	r0, 8012696 <__multadd+0x5e>
 801268a:	4602      	mov	r2, r0
 801268c:	4b0d      	ldr	r3, [pc, #52]	; (80126c4 <__multadd+0x8c>)
 801268e:	480e      	ldr	r0, [pc, #56]	; (80126c8 <__multadd+0x90>)
 8012690:	21b5      	movs	r1, #181	; 0xb5
 8012692:	f001 f8d3 	bl	801383c <__assert_func>
 8012696:	6922      	ldr	r2, [r4, #16]
 8012698:	3202      	adds	r2, #2
 801269a:	f104 010c 	add.w	r1, r4, #12
 801269e:	0092      	lsls	r2, r2, #2
 80126a0:	300c      	adds	r0, #12
 80126a2:	f7fd ff1b 	bl	80104dc <memcpy>
 80126a6:	4621      	mov	r1, r4
 80126a8:	4638      	mov	r0, r7
 80126aa:	f7ff ffa3 	bl	80125f4 <_Bfree>
 80126ae:	462c      	mov	r4, r5
 80126b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80126b4:	3601      	adds	r6, #1
 80126b6:	f8c3 8014 	str.w	r8, [r3, #20]
 80126ba:	6126      	str	r6, [r4, #16]
 80126bc:	4620      	mov	r0, r4
 80126be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126c2:	bf00      	nop
 80126c4:	08015cd8 	.word	0x08015cd8
 80126c8:	08015d7f 	.word	0x08015d7f

080126cc <__s2b>:
 80126cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126d0:	460c      	mov	r4, r1
 80126d2:	4615      	mov	r5, r2
 80126d4:	461f      	mov	r7, r3
 80126d6:	2209      	movs	r2, #9
 80126d8:	3308      	adds	r3, #8
 80126da:	4606      	mov	r6, r0
 80126dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80126e0:	2100      	movs	r1, #0
 80126e2:	2201      	movs	r2, #1
 80126e4:	429a      	cmp	r2, r3
 80126e6:	db09      	blt.n	80126fc <__s2b+0x30>
 80126e8:	4630      	mov	r0, r6
 80126ea:	f7ff ff43 	bl	8012574 <_Balloc>
 80126ee:	b940      	cbnz	r0, 8012702 <__s2b+0x36>
 80126f0:	4602      	mov	r2, r0
 80126f2:	4b19      	ldr	r3, [pc, #100]	; (8012758 <__s2b+0x8c>)
 80126f4:	4819      	ldr	r0, [pc, #100]	; (801275c <__s2b+0x90>)
 80126f6:	21ce      	movs	r1, #206	; 0xce
 80126f8:	f001 f8a0 	bl	801383c <__assert_func>
 80126fc:	0052      	lsls	r2, r2, #1
 80126fe:	3101      	adds	r1, #1
 8012700:	e7f0      	b.n	80126e4 <__s2b+0x18>
 8012702:	9b08      	ldr	r3, [sp, #32]
 8012704:	6143      	str	r3, [r0, #20]
 8012706:	2d09      	cmp	r5, #9
 8012708:	f04f 0301 	mov.w	r3, #1
 801270c:	6103      	str	r3, [r0, #16]
 801270e:	dd16      	ble.n	801273e <__s2b+0x72>
 8012710:	f104 0909 	add.w	r9, r4, #9
 8012714:	46c8      	mov	r8, r9
 8012716:	442c      	add	r4, r5
 8012718:	f818 3b01 	ldrb.w	r3, [r8], #1
 801271c:	4601      	mov	r1, r0
 801271e:	3b30      	subs	r3, #48	; 0x30
 8012720:	220a      	movs	r2, #10
 8012722:	4630      	mov	r0, r6
 8012724:	f7ff ff88 	bl	8012638 <__multadd>
 8012728:	45a0      	cmp	r8, r4
 801272a:	d1f5      	bne.n	8012718 <__s2b+0x4c>
 801272c:	f1a5 0408 	sub.w	r4, r5, #8
 8012730:	444c      	add	r4, r9
 8012732:	1b2d      	subs	r5, r5, r4
 8012734:	1963      	adds	r3, r4, r5
 8012736:	42bb      	cmp	r3, r7
 8012738:	db04      	blt.n	8012744 <__s2b+0x78>
 801273a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801273e:	340a      	adds	r4, #10
 8012740:	2509      	movs	r5, #9
 8012742:	e7f6      	b.n	8012732 <__s2b+0x66>
 8012744:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012748:	4601      	mov	r1, r0
 801274a:	3b30      	subs	r3, #48	; 0x30
 801274c:	220a      	movs	r2, #10
 801274e:	4630      	mov	r0, r6
 8012750:	f7ff ff72 	bl	8012638 <__multadd>
 8012754:	e7ee      	b.n	8012734 <__s2b+0x68>
 8012756:	bf00      	nop
 8012758:	08015cd8 	.word	0x08015cd8
 801275c:	08015d7f 	.word	0x08015d7f

08012760 <__hi0bits>:
 8012760:	0c03      	lsrs	r3, r0, #16
 8012762:	041b      	lsls	r3, r3, #16
 8012764:	b9d3      	cbnz	r3, 801279c <__hi0bits+0x3c>
 8012766:	0400      	lsls	r0, r0, #16
 8012768:	2310      	movs	r3, #16
 801276a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801276e:	bf04      	itt	eq
 8012770:	0200      	lsleq	r0, r0, #8
 8012772:	3308      	addeq	r3, #8
 8012774:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012778:	bf04      	itt	eq
 801277a:	0100      	lsleq	r0, r0, #4
 801277c:	3304      	addeq	r3, #4
 801277e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012782:	bf04      	itt	eq
 8012784:	0080      	lsleq	r0, r0, #2
 8012786:	3302      	addeq	r3, #2
 8012788:	2800      	cmp	r0, #0
 801278a:	db05      	blt.n	8012798 <__hi0bits+0x38>
 801278c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012790:	f103 0301 	add.w	r3, r3, #1
 8012794:	bf08      	it	eq
 8012796:	2320      	moveq	r3, #32
 8012798:	4618      	mov	r0, r3
 801279a:	4770      	bx	lr
 801279c:	2300      	movs	r3, #0
 801279e:	e7e4      	b.n	801276a <__hi0bits+0xa>

080127a0 <__lo0bits>:
 80127a0:	6803      	ldr	r3, [r0, #0]
 80127a2:	f013 0207 	ands.w	r2, r3, #7
 80127a6:	4601      	mov	r1, r0
 80127a8:	d00b      	beq.n	80127c2 <__lo0bits+0x22>
 80127aa:	07da      	lsls	r2, r3, #31
 80127ac:	d424      	bmi.n	80127f8 <__lo0bits+0x58>
 80127ae:	0798      	lsls	r0, r3, #30
 80127b0:	bf49      	itett	mi
 80127b2:	085b      	lsrmi	r3, r3, #1
 80127b4:	089b      	lsrpl	r3, r3, #2
 80127b6:	2001      	movmi	r0, #1
 80127b8:	600b      	strmi	r3, [r1, #0]
 80127ba:	bf5c      	itt	pl
 80127bc:	600b      	strpl	r3, [r1, #0]
 80127be:	2002      	movpl	r0, #2
 80127c0:	4770      	bx	lr
 80127c2:	b298      	uxth	r0, r3
 80127c4:	b9b0      	cbnz	r0, 80127f4 <__lo0bits+0x54>
 80127c6:	0c1b      	lsrs	r3, r3, #16
 80127c8:	2010      	movs	r0, #16
 80127ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80127ce:	bf04      	itt	eq
 80127d0:	0a1b      	lsreq	r3, r3, #8
 80127d2:	3008      	addeq	r0, #8
 80127d4:	071a      	lsls	r2, r3, #28
 80127d6:	bf04      	itt	eq
 80127d8:	091b      	lsreq	r3, r3, #4
 80127da:	3004      	addeq	r0, #4
 80127dc:	079a      	lsls	r2, r3, #30
 80127de:	bf04      	itt	eq
 80127e0:	089b      	lsreq	r3, r3, #2
 80127e2:	3002      	addeq	r0, #2
 80127e4:	07da      	lsls	r2, r3, #31
 80127e6:	d403      	bmi.n	80127f0 <__lo0bits+0x50>
 80127e8:	085b      	lsrs	r3, r3, #1
 80127ea:	f100 0001 	add.w	r0, r0, #1
 80127ee:	d005      	beq.n	80127fc <__lo0bits+0x5c>
 80127f0:	600b      	str	r3, [r1, #0]
 80127f2:	4770      	bx	lr
 80127f4:	4610      	mov	r0, r2
 80127f6:	e7e8      	b.n	80127ca <__lo0bits+0x2a>
 80127f8:	2000      	movs	r0, #0
 80127fa:	4770      	bx	lr
 80127fc:	2020      	movs	r0, #32
 80127fe:	4770      	bx	lr

08012800 <__i2b>:
 8012800:	b510      	push	{r4, lr}
 8012802:	460c      	mov	r4, r1
 8012804:	2101      	movs	r1, #1
 8012806:	f7ff feb5 	bl	8012574 <_Balloc>
 801280a:	4602      	mov	r2, r0
 801280c:	b928      	cbnz	r0, 801281a <__i2b+0x1a>
 801280e:	4b05      	ldr	r3, [pc, #20]	; (8012824 <__i2b+0x24>)
 8012810:	4805      	ldr	r0, [pc, #20]	; (8012828 <__i2b+0x28>)
 8012812:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012816:	f001 f811 	bl	801383c <__assert_func>
 801281a:	2301      	movs	r3, #1
 801281c:	6144      	str	r4, [r0, #20]
 801281e:	6103      	str	r3, [r0, #16]
 8012820:	bd10      	pop	{r4, pc}
 8012822:	bf00      	nop
 8012824:	08015cd8 	.word	0x08015cd8
 8012828:	08015d7f 	.word	0x08015d7f

0801282c <__multiply>:
 801282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012830:	4614      	mov	r4, r2
 8012832:	690a      	ldr	r2, [r1, #16]
 8012834:	6923      	ldr	r3, [r4, #16]
 8012836:	429a      	cmp	r2, r3
 8012838:	bfb8      	it	lt
 801283a:	460b      	movlt	r3, r1
 801283c:	460d      	mov	r5, r1
 801283e:	bfbc      	itt	lt
 8012840:	4625      	movlt	r5, r4
 8012842:	461c      	movlt	r4, r3
 8012844:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012848:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801284c:	68ab      	ldr	r3, [r5, #8]
 801284e:	6869      	ldr	r1, [r5, #4]
 8012850:	eb0a 0709 	add.w	r7, sl, r9
 8012854:	42bb      	cmp	r3, r7
 8012856:	b085      	sub	sp, #20
 8012858:	bfb8      	it	lt
 801285a:	3101      	addlt	r1, #1
 801285c:	f7ff fe8a 	bl	8012574 <_Balloc>
 8012860:	b930      	cbnz	r0, 8012870 <__multiply+0x44>
 8012862:	4602      	mov	r2, r0
 8012864:	4b42      	ldr	r3, [pc, #264]	; (8012970 <__multiply+0x144>)
 8012866:	4843      	ldr	r0, [pc, #268]	; (8012974 <__multiply+0x148>)
 8012868:	f240 115d 	movw	r1, #349	; 0x15d
 801286c:	f000 ffe6 	bl	801383c <__assert_func>
 8012870:	f100 0614 	add.w	r6, r0, #20
 8012874:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012878:	4633      	mov	r3, r6
 801287a:	2200      	movs	r2, #0
 801287c:	4543      	cmp	r3, r8
 801287e:	d31e      	bcc.n	80128be <__multiply+0x92>
 8012880:	f105 0c14 	add.w	ip, r5, #20
 8012884:	f104 0314 	add.w	r3, r4, #20
 8012888:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801288c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012890:	9202      	str	r2, [sp, #8]
 8012892:	ebac 0205 	sub.w	r2, ip, r5
 8012896:	3a15      	subs	r2, #21
 8012898:	f022 0203 	bic.w	r2, r2, #3
 801289c:	3204      	adds	r2, #4
 801289e:	f105 0115 	add.w	r1, r5, #21
 80128a2:	458c      	cmp	ip, r1
 80128a4:	bf38      	it	cc
 80128a6:	2204      	movcc	r2, #4
 80128a8:	9201      	str	r2, [sp, #4]
 80128aa:	9a02      	ldr	r2, [sp, #8]
 80128ac:	9303      	str	r3, [sp, #12]
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d808      	bhi.n	80128c4 <__multiply+0x98>
 80128b2:	2f00      	cmp	r7, #0
 80128b4:	dc55      	bgt.n	8012962 <__multiply+0x136>
 80128b6:	6107      	str	r7, [r0, #16]
 80128b8:	b005      	add	sp, #20
 80128ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128be:	f843 2b04 	str.w	r2, [r3], #4
 80128c2:	e7db      	b.n	801287c <__multiply+0x50>
 80128c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80128c8:	f1ba 0f00 	cmp.w	sl, #0
 80128cc:	d020      	beq.n	8012910 <__multiply+0xe4>
 80128ce:	f105 0e14 	add.w	lr, r5, #20
 80128d2:	46b1      	mov	r9, r6
 80128d4:	2200      	movs	r2, #0
 80128d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80128da:	f8d9 b000 	ldr.w	fp, [r9]
 80128de:	b2a1      	uxth	r1, r4
 80128e0:	fa1f fb8b 	uxth.w	fp, fp
 80128e4:	fb0a b101 	mla	r1, sl, r1, fp
 80128e8:	4411      	add	r1, r2
 80128ea:	f8d9 2000 	ldr.w	r2, [r9]
 80128ee:	0c24      	lsrs	r4, r4, #16
 80128f0:	0c12      	lsrs	r2, r2, #16
 80128f2:	fb0a 2404 	mla	r4, sl, r4, r2
 80128f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80128fa:	b289      	uxth	r1, r1
 80128fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012900:	45f4      	cmp	ip, lr
 8012902:	f849 1b04 	str.w	r1, [r9], #4
 8012906:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801290a:	d8e4      	bhi.n	80128d6 <__multiply+0xaa>
 801290c:	9901      	ldr	r1, [sp, #4]
 801290e:	5072      	str	r2, [r6, r1]
 8012910:	9a03      	ldr	r2, [sp, #12]
 8012912:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012916:	3304      	adds	r3, #4
 8012918:	f1b9 0f00 	cmp.w	r9, #0
 801291c:	d01f      	beq.n	801295e <__multiply+0x132>
 801291e:	6834      	ldr	r4, [r6, #0]
 8012920:	f105 0114 	add.w	r1, r5, #20
 8012924:	46b6      	mov	lr, r6
 8012926:	f04f 0a00 	mov.w	sl, #0
 801292a:	880a      	ldrh	r2, [r1, #0]
 801292c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012930:	fb09 b202 	mla	r2, r9, r2, fp
 8012934:	4492      	add	sl, r2
 8012936:	b2a4      	uxth	r4, r4
 8012938:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801293c:	f84e 4b04 	str.w	r4, [lr], #4
 8012940:	f851 4b04 	ldr.w	r4, [r1], #4
 8012944:	f8be 2000 	ldrh.w	r2, [lr]
 8012948:	0c24      	lsrs	r4, r4, #16
 801294a:	fb09 2404 	mla	r4, r9, r4, r2
 801294e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012952:	458c      	cmp	ip, r1
 8012954:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012958:	d8e7      	bhi.n	801292a <__multiply+0xfe>
 801295a:	9a01      	ldr	r2, [sp, #4]
 801295c:	50b4      	str	r4, [r6, r2]
 801295e:	3604      	adds	r6, #4
 8012960:	e7a3      	b.n	80128aa <__multiply+0x7e>
 8012962:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012966:	2b00      	cmp	r3, #0
 8012968:	d1a5      	bne.n	80128b6 <__multiply+0x8a>
 801296a:	3f01      	subs	r7, #1
 801296c:	e7a1      	b.n	80128b2 <__multiply+0x86>
 801296e:	bf00      	nop
 8012970:	08015cd8 	.word	0x08015cd8
 8012974:	08015d7f 	.word	0x08015d7f

08012978 <__pow5mult>:
 8012978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801297c:	4615      	mov	r5, r2
 801297e:	f012 0203 	ands.w	r2, r2, #3
 8012982:	4606      	mov	r6, r0
 8012984:	460f      	mov	r7, r1
 8012986:	d007      	beq.n	8012998 <__pow5mult+0x20>
 8012988:	4c25      	ldr	r4, [pc, #148]	; (8012a20 <__pow5mult+0xa8>)
 801298a:	3a01      	subs	r2, #1
 801298c:	2300      	movs	r3, #0
 801298e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012992:	f7ff fe51 	bl	8012638 <__multadd>
 8012996:	4607      	mov	r7, r0
 8012998:	10ad      	asrs	r5, r5, #2
 801299a:	d03d      	beq.n	8012a18 <__pow5mult+0xa0>
 801299c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801299e:	b97c      	cbnz	r4, 80129c0 <__pow5mult+0x48>
 80129a0:	2010      	movs	r0, #16
 80129a2:	f7fd fd8b 	bl	80104bc <malloc>
 80129a6:	4602      	mov	r2, r0
 80129a8:	6270      	str	r0, [r6, #36]	; 0x24
 80129aa:	b928      	cbnz	r0, 80129b8 <__pow5mult+0x40>
 80129ac:	4b1d      	ldr	r3, [pc, #116]	; (8012a24 <__pow5mult+0xac>)
 80129ae:	481e      	ldr	r0, [pc, #120]	; (8012a28 <__pow5mult+0xb0>)
 80129b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80129b4:	f000 ff42 	bl	801383c <__assert_func>
 80129b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80129bc:	6004      	str	r4, [r0, #0]
 80129be:	60c4      	str	r4, [r0, #12]
 80129c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80129c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80129c8:	b94c      	cbnz	r4, 80129de <__pow5mult+0x66>
 80129ca:	f240 2171 	movw	r1, #625	; 0x271
 80129ce:	4630      	mov	r0, r6
 80129d0:	f7ff ff16 	bl	8012800 <__i2b>
 80129d4:	2300      	movs	r3, #0
 80129d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80129da:	4604      	mov	r4, r0
 80129dc:	6003      	str	r3, [r0, #0]
 80129de:	f04f 0900 	mov.w	r9, #0
 80129e2:	07eb      	lsls	r3, r5, #31
 80129e4:	d50a      	bpl.n	80129fc <__pow5mult+0x84>
 80129e6:	4639      	mov	r1, r7
 80129e8:	4622      	mov	r2, r4
 80129ea:	4630      	mov	r0, r6
 80129ec:	f7ff ff1e 	bl	801282c <__multiply>
 80129f0:	4639      	mov	r1, r7
 80129f2:	4680      	mov	r8, r0
 80129f4:	4630      	mov	r0, r6
 80129f6:	f7ff fdfd 	bl	80125f4 <_Bfree>
 80129fa:	4647      	mov	r7, r8
 80129fc:	106d      	asrs	r5, r5, #1
 80129fe:	d00b      	beq.n	8012a18 <__pow5mult+0xa0>
 8012a00:	6820      	ldr	r0, [r4, #0]
 8012a02:	b938      	cbnz	r0, 8012a14 <__pow5mult+0x9c>
 8012a04:	4622      	mov	r2, r4
 8012a06:	4621      	mov	r1, r4
 8012a08:	4630      	mov	r0, r6
 8012a0a:	f7ff ff0f 	bl	801282c <__multiply>
 8012a0e:	6020      	str	r0, [r4, #0]
 8012a10:	f8c0 9000 	str.w	r9, [r0]
 8012a14:	4604      	mov	r4, r0
 8012a16:	e7e4      	b.n	80129e2 <__pow5mult+0x6a>
 8012a18:	4638      	mov	r0, r7
 8012a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a1e:	bf00      	nop
 8012a20:	08015ed0 	.word	0x08015ed0
 8012a24:	08015d68 	.word	0x08015d68
 8012a28:	08015d7f 	.word	0x08015d7f

08012a2c <__lshift>:
 8012a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a30:	460c      	mov	r4, r1
 8012a32:	6849      	ldr	r1, [r1, #4]
 8012a34:	6923      	ldr	r3, [r4, #16]
 8012a36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012a3a:	68a3      	ldr	r3, [r4, #8]
 8012a3c:	4607      	mov	r7, r0
 8012a3e:	4691      	mov	r9, r2
 8012a40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012a44:	f108 0601 	add.w	r6, r8, #1
 8012a48:	42b3      	cmp	r3, r6
 8012a4a:	db0b      	blt.n	8012a64 <__lshift+0x38>
 8012a4c:	4638      	mov	r0, r7
 8012a4e:	f7ff fd91 	bl	8012574 <_Balloc>
 8012a52:	4605      	mov	r5, r0
 8012a54:	b948      	cbnz	r0, 8012a6a <__lshift+0x3e>
 8012a56:	4602      	mov	r2, r0
 8012a58:	4b28      	ldr	r3, [pc, #160]	; (8012afc <__lshift+0xd0>)
 8012a5a:	4829      	ldr	r0, [pc, #164]	; (8012b00 <__lshift+0xd4>)
 8012a5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012a60:	f000 feec 	bl	801383c <__assert_func>
 8012a64:	3101      	adds	r1, #1
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	e7ee      	b.n	8012a48 <__lshift+0x1c>
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	f100 0114 	add.w	r1, r0, #20
 8012a70:	f100 0210 	add.w	r2, r0, #16
 8012a74:	4618      	mov	r0, r3
 8012a76:	4553      	cmp	r3, sl
 8012a78:	db33      	blt.n	8012ae2 <__lshift+0xb6>
 8012a7a:	6920      	ldr	r0, [r4, #16]
 8012a7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a80:	f104 0314 	add.w	r3, r4, #20
 8012a84:	f019 091f 	ands.w	r9, r9, #31
 8012a88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012a90:	d02b      	beq.n	8012aea <__lshift+0xbe>
 8012a92:	f1c9 0e20 	rsb	lr, r9, #32
 8012a96:	468a      	mov	sl, r1
 8012a98:	2200      	movs	r2, #0
 8012a9a:	6818      	ldr	r0, [r3, #0]
 8012a9c:	fa00 f009 	lsl.w	r0, r0, r9
 8012aa0:	4302      	orrs	r2, r0
 8012aa2:	f84a 2b04 	str.w	r2, [sl], #4
 8012aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012aaa:	459c      	cmp	ip, r3
 8012aac:	fa22 f20e 	lsr.w	r2, r2, lr
 8012ab0:	d8f3      	bhi.n	8012a9a <__lshift+0x6e>
 8012ab2:	ebac 0304 	sub.w	r3, ip, r4
 8012ab6:	3b15      	subs	r3, #21
 8012ab8:	f023 0303 	bic.w	r3, r3, #3
 8012abc:	3304      	adds	r3, #4
 8012abe:	f104 0015 	add.w	r0, r4, #21
 8012ac2:	4584      	cmp	ip, r0
 8012ac4:	bf38      	it	cc
 8012ac6:	2304      	movcc	r3, #4
 8012ac8:	50ca      	str	r2, [r1, r3]
 8012aca:	b10a      	cbz	r2, 8012ad0 <__lshift+0xa4>
 8012acc:	f108 0602 	add.w	r6, r8, #2
 8012ad0:	3e01      	subs	r6, #1
 8012ad2:	4638      	mov	r0, r7
 8012ad4:	612e      	str	r6, [r5, #16]
 8012ad6:	4621      	mov	r1, r4
 8012ad8:	f7ff fd8c 	bl	80125f4 <_Bfree>
 8012adc:	4628      	mov	r0, r5
 8012ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ae2:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	e7c5      	b.n	8012a76 <__lshift+0x4a>
 8012aea:	3904      	subs	r1, #4
 8012aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8012af0:	f841 2f04 	str.w	r2, [r1, #4]!
 8012af4:	459c      	cmp	ip, r3
 8012af6:	d8f9      	bhi.n	8012aec <__lshift+0xc0>
 8012af8:	e7ea      	b.n	8012ad0 <__lshift+0xa4>
 8012afa:	bf00      	nop
 8012afc:	08015cd8 	.word	0x08015cd8
 8012b00:	08015d7f 	.word	0x08015d7f

08012b04 <__mcmp>:
 8012b04:	b530      	push	{r4, r5, lr}
 8012b06:	6902      	ldr	r2, [r0, #16]
 8012b08:	690c      	ldr	r4, [r1, #16]
 8012b0a:	1b12      	subs	r2, r2, r4
 8012b0c:	d10e      	bne.n	8012b2c <__mcmp+0x28>
 8012b0e:	f100 0314 	add.w	r3, r0, #20
 8012b12:	3114      	adds	r1, #20
 8012b14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012b18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012b1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012b20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012b24:	42a5      	cmp	r5, r4
 8012b26:	d003      	beq.n	8012b30 <__mcmp+0x2c>
 8012b28:	d305      	bcc.n	8012b36 <__mcmp+0x32>
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	4610      	mov	r0, r2
 8012b2e:	bd30      	pop	{r4, r5, pc}
 8012b30:	4283      	cmp	r3, r0
 8012b32:	d3f3      	bcc.n	8012b1c <__mcmp+0x18>
 8012b34:	e7fa      	b.n	8012b2c <__mcmp+0x28>
 8012b36:	f04f 32ff 	mov.w	r2, #4294967295
 8012b3a:	e7f7      	b.n	8012b2c <__mcmp+0x28>

08012b3c <__mdiff>:
 8012b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b40:	460c      	mov	r4, r1
 8012b42:	4606      	mov	r6, r0
 8012b44:	4611      	mov	r1, r2
 8012b46:	4620      	mov	r0, r4
 8012b48:	4617      	mov	r7, r2
 8012b4a:	f7ff ffdb 	bl	8012b04 <__mcmp>
 8012b4e:	1e05      	subs	r5, r0, #0
 8012b50:	d110      	bne.n	8012b74 <__mdiff+0x38>
 8012b52:	4629      	mov	r1, r5
 8012b54:	4630      	mov	r0, r6
 8012b56:	f7ff fd0d 	bl	8012574 <_Balloc>
 8012b5a:	b930      	cbnz	r0, 8012b6a <__mdiff+0x2e>
 8012b5c:	4b39      	ldr	r3, [pc, #228]	; (8012c44 <__mdiff+0x108>)
 8012b5e:	4602      	mov	r2, r0
 8012b60:	f240 2132 	movw	r1, #562	; 0x232
 8012b64:	4838      	ldr	r0, [pc, #224]	; (8012c48 <__mdiff+0x10c>)
 8012b66:	f000 fe69 	bl	801383c <__assert_func>
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b74:	bfa4      	itt	ge
 8012b76:	463b      	movge	r3, r7
 8012b78:	4627      	movge	r7, r4
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	6879      	ldr	r1, [r7, #4]
 8012b7e:	bfa6      	itte	ge
 8012b80:	461c      	movge	r4, r3
 8012b82:	2500      	movge	r5, #0
 8012b84:	2501      	movlt	r5, #1
 8012b86:	f7ff fcf5 	bl	8012574 <_Balloc>
 8012b8a:	b920      	cbnz	r0, 8012b96 <__mdiff+0x5a>
 8012b8c:	4b2d      	ldr	r3, [pc, #180]	; (8012c44 <__mdiff+0x108>)
 8012b8e:	4602      	mov	r2, r0
 8012b90:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012b94:	e7e6      	b.n	8012b64 <__mdiff+0x28>
 8012b96:	693e      	ldr	r6, [r7, #16]
 8012b98:	60c5      	str	r5, [r0, #12]
 8012b9a:	6925      	ldr	r5, [r4, #16]
 8012b9c:	f107 0114 	add.w	r1, r7, #20
 8012ba0:	f104 0914 	add.w	r9, r4, #20
 8012ba4:	f100 0e14 	add.w	lr, r0, #20
 8012ba8:	f107 0210 	add.w	r2, r7, #16
 8012bac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012bb0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012bb4:	46f2      	mov	sl, lr
 8012bb6:	2700      	movs	r7, #0
 8012bb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8012bbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012bc0:	fa1f f883 	uxth.w	r8, r3
 8012bc4:	fa17 f78b 	uxtah	r7, r7, fp
 8012bc8:	0c1b      	lsrs	r3, r3, #16
 8012bca:	eba7 0808 	sub.w	r8, r7, r8
 8012bce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012bd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012bd6:	fa1f f888 	uxth.w	r8, r8
 8012bda:	141f      	asrs	r7, r3, #16
 8012bdc:	454d      	cmp	r5, r9
 8012bde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012be2:	f84a 3b04 	str.w	r3, [sl], #4
 8012be6:	d8e7      	bhi.n	8012bb8 <__mdiff+0x7c>
 8012be8:	1b2b      	subs	r3, r5, r4
 8012bea:	3b15      	subs	r3, #21
 8012bec:	f023 0303 	bic.w	r3, r3, #3
 8012bf0:	3304      	adds	r3, #4
 8012bf2:	3415      	adds	r4, #21
 8012bf4:	42a5      	cmp	r5, r4
 8012bf6:	bf38      	it	cc
 8012bf8:	2304      	movcc	r3, #4
 8012bfa:	4419      	add	r1, r3
 8012bfc:	4473      	add	r3, lr
 8012bfe:	469e      	mov	lr, r3
 8012c00:	460d      	mov	r5, r1
 8012c02:	4565      	cmp	r5, ip
 8012c04:	d30e      	bcc.n	8012c24 <__mdiff+0xe8>
 8012c06:	f10c 0203 	add.w	r2, ip, #3
 8012c0a:	1a52      	subs	r2, r2, r1
 8012c0c:	f022 0203 	bic.w	r2, r2, #3
 8012c10:	3903      	subs	r1, #3
 8012c12:	458c      	cmp	ip, r1
 8012c14:	bf38      	it	cc
 8012c16:	2200      	movcc	r2, #0
 8012c18:	441a      	add	r2, r3
 8012c1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012c1e:	b17b      	cbz	r3, 8012c40 <__mdiff+0x104>
 8012c20:	6106      	str	r6, [r0, #16]
 8012c22:	e7a5      	b.n	8012b70 <__mdiff+0x34>
 8012c24:	f855 8b04 	ldr.w	r8, [r5], #4
 8012c28:	fa17 f488 	uxtah	r4, r7, r8
 8012c2c:	1422      	asrs	r2, r4, #16
 8012c2e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012c32:	b2a4      	uxth	r4, r4
 8012c34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012c38:	f84e 4b04 	str.w	r4, [lr], #4
 8012c3c:	1417      	asrs	r7, r2, #16
 8012c3e:	e7e0      	b.n	8012c02 <__mdiff+0xc6>
 8012c40:	3e01      	subs	r6, #1
 8012c42:	e7ea      	b.n	8012c1a <__mdiff+0xde>
 8012c44:	08015cd8 	.word	0x08015cd8
 8012c48:	08015d7f 	.word	0x08015d7f

08012c4c <__ulp>:
 8012c4c:	b082      	sub	sp, #8
 8012c4e:	ed8d 0b00 	vstr	d0, [sp]
 8012c52:	9b01      	ldr	r3, [sp, #4]
 8012c54:	4912      	ldr	r1, [pc, #72]	; (8012ca0 <__ulp+0x54>)
 8012c56:	4019      	ands	r1, r3
 8012c58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012c5c:	2900      	cmp	r1, #0
 8012c5e:	dd05      	ble.n	8012c6c <__ulp+0x20>
 8012c60:	2200      	movs	r2, #0
 8012c62:	460b      	mov	r3, r1
 8012c64:	ec43 2b10 	vmov	d0, r2, r3
 8012c68:	b002      	add	sp, #8
 8012c6a:	4770      	bx	lr
 8012c6c:	4249      	negs	r1, r1
 8012c6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012c72:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012c76:	f04f 0200 	mov.w	r2, #0
 8012c7a:	f04f 0300 	mov.w	r3, #0
 8012c7e:	da04      	bge.n	8012c8a <__ulp+0x3e>
 8012c80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012c84:	fa41 f300 	asr.w	r3, r1, r0
 8012c88:	e7ec      	b.n	8012c64 <__ulp+0x18>
 8012c8a:	f1a0 0114 	sub.w	r1, r0, #20
 8012c8e:	291e      	cmp	r1, #30
 8012c90:	bfda      	itte	le
 8012c92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012c96:	fa20 f101 	lsrle.w	r1, r0, r1
 8012c9a:	2101      	movgt	r1, #1
 8012c9c:	460a      	mov	r2, r1
 8012c9e:	e7e1      	b.n	8012c64 <__ulp+0x18>
 8012ca0:	7ff00000 	.word	0x7ff00000

08012ca4 <__b2d>:
 8012ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca6:	6905      	ldr	r5, [r0, #16]
 8012ca8:	f100 0714 	add.w	r7, r0, #20
 8012cac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012cb0:	1f2e      	subs	r6, r5, #4
 8012cb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	f7ff fd52 	bl	8012760 <__hi0bits>
 8012cbc:	f1c0 0320 	rsb	r3, r0, #32
 8012cc0:	280a      	cmp	r0, #10
 8012cc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012d40 <__b2d+0x9c>
 8012cc6:	600b      	str	r3, [r1, #0]
 8012cc8:	dc14      	bgt.n	8012cf4 <__b2d+0x50>
 8012cca:	f1c0 0e0b 	rsb	lr, r0, #11
 8012cce:	fa24 f10e 	lsr.w	r1, r4, lr
 8012cd2:	42b7      	cmp	r7, r6
 8012cd4:	ea41 030c 	orr.w	r3, r1, ip
 8012cd8:	bf34      	ite	cc
 8012cda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012cde:	2100      	movcs	r1, #0
 8012ce0:	3015      	adds	r0, #21
 8012ce2:	fa04 f000 	lsl.w	r0, r4, r0
 8012ce6:	fa21 f10e 	lsr.w	r1, r1, lr
 8012cea:	ea40 0201 	orr.w	r2, r0, r1
 8012cee:	ec43 2b10 	vmov	d0, r2, r3
 8012cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cf4:	42b7      	cmp	r7, r6
 8012cf6:	bf3a      	itte	cc
 8012cf8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012cfc:	f1a5 0608 	subcc.w	r6, r5, #8
 8012d00:	2100      	movcs	r1, #0
 8012d02:	380b      	subs	r0, #11
 8012d04:	d017      	beq.n	8012d36 <__b2d+0x92>
 8012d06:	f1c0 0c20 	rsb	ip, r0, #32
 8012d0a:	fa04 f500 	lsl.w	r5, r4, r0
 8012d0e:	42be      	cmp	r6, r7
 8012d10:	fa21 f40c 	lsr.w	r4, r1, ip
 8012d14:	ea45 0504 	orr.w	r5, r5, r4
 8012d18:	bf8c      	ite	hi
 8012d1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012d1e:	2400      	movls	r4, #0
 8012d20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012d24:	fa01 f000 	lsl.w	r0, r1, r0
 8012d28:	fa24 f40c 	lsr.w	r4, r4, ip
 8012d2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012d30:	ea40 0204 	orr.w	r2, r0, r4
 8012d34:	e7db      	b.n	8012cee <__b2d+0x4a>
 8012d36:	ea44 030c 	orr.w	r3, r4, ip
 8012d3a:	460a      	mov	r2, r1
 8012d3c:	e7d7      	b.n	8012cee <__b2d+0x4a>
 8012d3e:	bf00      	nop
 8012d40:	3ff00000 	.word	0x3ff00000

08012d44 <__d2b>:
 8012d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012d48:	4689      	mov	r9, r1
 8012d4a:	2101      	movs	r1, #1
 8012d4c:	ec57 6b10 	vmov	r6, r7, d0
 8012d50:	4690      	mov	r8, r2
 8012d52:	f7ff fc0f 	bl	8012574 <_Balloc>
 8012d56:	4604      	mov	r4, r0
 8012d58:	b930      	cbnz	r0, 8012d68 <__d2b+0x24>
 8012d5a:	4602      	mov	r2, r0
 8012d5c:	4b25      	ldr	r3, [pc, #148]	; (8012df4 <__d2b+0xb0>)
 8012d5e:	4826      	ldr	r0, [pc, #152]	; (8012df8 <__d2b+0xb4>)
 8012d60:	f240 310a 	movw	r1, #778	; 0x30a
 8012d64:	f000 fd6a 	bl	801383c <__assert_func>
 8012d68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012d6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012d70:	bb35      	cbnz	r5, 8012dc0 <__d2b+0x7c>
 8012d72:	2e00      	cmp	r6, #0
 8012d74:	9301      	str	r3, [sp, #4]
 8012d76:	d028      	beq.n	8012dca <__d2b+0x86>
 8012d78:	4668      	mov	r0, sp
 8012d7a:	9600      	str	r6, [sp, #0]
 8012d7c:	f7ff fd10 	bl	80127a0 <__lo0bits>
 8012d80:	9900      	ldr	r1, [sp, #0]
 8012d82:	b300      	cbz	r0, 8012dc6 <__d2b+0x82>
 8012d84:	9a01      	ldr	r2, [sp, #4]
 8012d86:	f1c0 0320 	rsb	r3, r0, #32
 8012d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8012d8e:	430b      	orrs	r3, r1
 8012d90:	40c2      	lsrs	r2, r0
 8012d92:	6163      	str	r3, [r4, #20]
 8012d94:	9201      	str	r2, [sp, #4]
 8012d96:	9b01      	ldr	r3, [sp, #4]
 8012d98:	61a3      	str	r3, [r4, #24]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	bf14      	ite	ne
 8012d9e:	2202      	movne	r2, #2
 8012da0:	2201      	moveq	r2, #1
 8012da2:	6122      	str	r2, [r4, #16]
 8012da4:	b1d5      	cbz	r5, 8012ddc <__d2b+0x98>
 8012da6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012daa:	4405      	add	r5, r0
 8012dac:	f8c9 5000 	str.w	r5, [r9]
 8012db0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012db4:	f8c8 0000 	str.w	r0, [r8]
 8012db8:	4620      	mov	r0, r4
 8012dba:	b003      	add	sp, #12
 8012dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012dc4:	e7d5      	b.n	8012d72 <__d2b+0x2e>
 8012dc6:	6161      	str	r1, [r4, #20]
 8012dc8:	e7e5      	b.n	8012d96 <__d2b+0x52>
 8012dca:	a801      	add	r0, sp, #4
 8012dcc:	f7ff fce8 	bl	80127a0 <__lo0bits>
 8012dd0:	9b01      	ldr	r3, [sp, #4]
 8012dd2:	6163      	str	r3, [r4, #20]
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	6122      	str	r2, [r4, #16]
 8012dd8:	3020      	adds	r0, #32
 8012dda:	e7e3      	b.n	8012da4 <__d2b+0x60>
 8012ddc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012de0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012de4:	f8c9 0000 	str.w	r0, [r9]
 8012de8:	6918      	ldr	r0, [r3, #16]
 8012dea:	f7ff fcb9 	bl	8012760 <__hi0bits>
 8012dee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012df2:	e7df      	b.n	8012db4 <__d2b+0x70>
 8012df4:	08015cd8 	.word	0x08015cd8
 8012df8:	08015d7f 	.word	0x08015d7f

08012dfc <__ratio>:
 8012dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e00:	4688      	mov	r8, r1
 8012e02:	4669      	mov	r1, sp
 8012e04:	4681      	mov	r9, r0
 8012e06:	f7ff ff4d 	bl	8012ca4 <__b2d>
 8012e0a:	a901      	add	r1, sp, #4
 8012e0c:	4640      	mov	r0, r8
 8012e0e:	ec55 4b10 	vmov	r4, r5, d0
 8012e12:	f7ff ff47 	bl	8012ca4 <__b2d>
 8012e16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012e1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012e1e:	eba3 0c02 	sub.w	ip, r3, r2
 8012e22:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012e26:	1a9b      	subs	r3, r3, r2
 8012e28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012e2c:	ec51 0b10 	vmov	r0, r1, d0
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	bfd6      	itet	le
 8012e34:	460a      	movle	r2, r1
 8012e36:	462a      	movgt	r2, r5
 8012e38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012e3c:	468b      	mov	fp, r1
 8012e3e:	462f      	mov	r7, r5
 8012e40:	bfd4      	ite	le
 8012e42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012e46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	ee10 2a10 	vmov	r2, s0
 8012e50:	465b      	mov	r3, fp
 8012e52:	4639      	mov	r1, r7
 8012e54:	f7ed fd12 	bl	800087c <__aeabi_ddiv>
 8012e58:	ec41 0b10 	vmov	d0, r0, r1
 8012e5c:	b003      	add	sp, #12
 8012e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e62 <__copybits>:
 8012e62:	3901      	subs	r1, #1
 8012e64:	b570      	push	{r4, r5, r6, lr}
 8012e66:	1149      	asrs	r1, r1, #5
 8012e68:	6914      	ldr	r4, [r2, #16]
 8012e6a:	3101      	adds	r1, #1
 8012e6c:	f102 0314 	add.w	r3, r2, #20
 8012e70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012e74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012e78:	1f05      	subs	r5, r0, #4
 8012e7a:	42a3      	cmp	r3, r4
 8012e7c:	d30c      	bcc.n	8012e98 <__copybits+0x36>
 8012e7e:	1aa3      	subs	r3, r4, r2
 8012e80:	3b11      	subs	r3, #17
 8012e82:	f023 0303 	bic.w	r3, r3, #3
 8012e86:	3211      	adds	r2, #17
 8012e88:	42a2      	cmp	r2, r4
 8012e8a:	bf88      	it	hi
 8012e8c:	2300      	movhi	r3, #0
 8012e8e:	4418      	add	r0, r3
 8012e90:	2300      	movs	r3, #0
 8012e92:	4288      	cmp	r0, r1
 8012e94:	d305      	bcc.n	8012ea2 <__copybits+0x40>
 8012e96:	bd70      	pop	{r4, r5, r6, pc}
 8012e98:	f853 6b04 	ldr.w	r6, [r3], #4
 8012e9c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012ea0:	e7eb      	b.n	8012e7a <__copybits+0x18>
 8012ea2:	f840 3b04 	str.w	r3, [r0], #4
 8012ea6:	e7f4      	b.n	8012e92 <__copybits+0x30>

08012ea8 <__any_on>:
 8012ea8:	f100 0214 	add.w	r2, r0, #20
 8012eac:	6900      	ldr	r0, [r0, #16]
 8012eae:	114b      	asrs	r3, r1, #5
 8012eb0:	4298      	cmp	r0, r3
 8012eb2:	b510      	push	{r4, lr}
 8012eb4:	db11      	blt.n	8012eda <__any_on+0x32>
 8012eb6:	dd0a      	ble.n	8012ece <__any_on+0x26>
 8012eb8:	f011 011f 	ands.w	r1, r1, #31
 8012ebc:	d007      	beq.n	8012ece <__any_on+0x26>
 8012ebe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012ec2:	fa24 f001 	lsr.w	r0, r4, r1
 8012ec6:	fa00 f101 	lsl.w	r1, r0, r1
 8012eca:	428c      	cmp	r4, r1
 8012ecc:	d10b      	bne.n	8012ee6 <__any_on+0x3e>
 8012ece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d803      	bhi.n	8012ede <__any_on+0x36>
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	bd10      	pop	{r4, pc}
 8012eda:	4603      	mov	r3, r0
 8012edc:	e7f7      	b.n	8012ece <__any_on+0x26>
 8012ede:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012ee2:	2900      	cmp	r1, #0
 8012ee4:	d0f5      	beq.n	8012ed2 <__any_on+0x2a>
 8012ee6:	2001      	movs	r0, #1
 8012ee8:	e7f6      	b.n	8012ed8 <__any_on+0x30>

08012eea <_calloc_r>:
 8012eea:	b513      	push	{r0, r1, r4, lr}
 8012eec:	434a      	muls	r2, r1
 8012eee:	4611      	mov	r1, r2
 8012ef0:	9201      	str	r2, [sp, #4]
 8012ef2:	f7fd fb59 	bl	80105a8 <_malloc_r>
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	b118      	cbz	r0, 8012f02 <_calloc_r+0x18>
 8012efa:	9a01      	ldr	r2, [sp, #4]
 8012efc:	2100      	movs	r1, #0
 8012efe:	f7fd fafb 	bl	80104f8 <memset>
 8012f02:	4620      	mov	r0, r4
 8012f04:	b002      	add	sp, #8
 8012f06:	bd10      	pop	{r4, pc}

08012f08 <_realloc_r>:
 8012f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f0a:	4607      	mov	r7, r0
 8012f0c:	4614      	mov	r4, r2
 8012f0e:	460e      	mov	r6, r1
 8012f10:	b921      	cbnz	r1, 8012f1c <_realloc_r+0x14>
 8012f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f16:	4611      	mov	r1, r2
 8012f18:	f7fd bb46 	b.w	80105a8 <_malloc_r>
 8012f1c:	b922      	cbnz	r2, 8012f28 <_realloc_r+0x20>
 8012f1e:	f7fd faf3 	bl	8010508 <_free_r>
 8012f22:	4625      	mov	r5, r4
 8012f24:	4628      	mov	r0, r5
 8012f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f28:	f000 fcf4 	bl	8013914 <_malloc_usable_size_r>
 8012f2c:	42a0      	cmp	r0, r4
 8012f2e:	d20f      	bcs.n	8012f50 <_realloc_r+0x48>
 8012f30:	4621      	mov	r1, r4
 8012f32:	4638      	mov	r0, r7
 8012f34:	f7fd fb38 	bl	80105a8 <_malloc_r>
 8012f38:	4605      	mov	r5, r0
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	d0f2      	beq.n	8012f24 <_realloc_r+0x1c>
 8012f3e:	4631      	mov	r1, r6
 8012f40:	4622      	mov	r2, r4
 8012f42:	f7fd facb 	bl	80104dc <memcpy>
 8012f46:	4631      	mov	r1, r6
 8012f48:	4638      	mov	r0, r7
 8012f4a:	f7fd fadd 	bl	8010508 <_free_r>
 8012f4e:	e7e9      	b.n	8012f24 <_realloc_r+0x1c>
 8012f50:	4635      	mov	r5, r6
 8012f52:	e7e7      	b.n	8012f24 <_realloc_r+0x1c>

08012f54 <__ssputs_r>:
 8012f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f58:	688e      	ldr	r6, [r1, #8]
 8012f5a:	429e      	cmp	r6, r3
 8012f5c:	4682      	mov	sl, r0
 8012f5e:	460c      	mov	r4, r1
 8012f60:	4690      	mov	r8, r2
 8012f62:	461f      	mov	r7, r3
 8012f64:	d838      	bhi.n	8012fd8 <__ssputs_r+0x84>
 8012f66:	898a      	ldrh	r2, [r1, #12]
 8012f68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012f6c:	d032      	beq.n	8012fd4 <__ssputs_r+0x80>
 8012f6e:	6825      	ldr	r5, [r4, #0]
 8012f70:	6909      	ldr	r1, [r1, #16]
 8012f72:	eba5 0901 	sub.w	r9, r5, r1
 8012f76:	6965      	ldr	r5, [r4, #20]
 8012f78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f80:	3301      	adds	r3, #1
 8012f82:	444b      	add	r3, r9
 8012f84:	106d      	asrs	r5, r5, #1
 8012f86:	429d      	cmp	r5, r3
 8012f88:	bf38      	it	cc
 8012f8a:	461d      	movcc	r5, r3
 8012f8c:	0553      	lsls	r3, r2, #21
 8012f8e:	d531      	bpl.n	8012ff4 <__ssputs_r+0xa0>
 8012f90:	4629      	mov	r1, r5
 8012f92:	f7fd fb09 	bl	80105a8 <_malloc_r>
 8012f96:	4606      	mov	r6, r0
 8012f98:	b950      	cbnz	r0, 8012fb0 <__ssputs_r+0x5c>
 8012f9a:	230c      	movs	r3, #12
 8012f9c:	f8ca 3000 	str.w	r3, [sl]
 8012fa0:	89a3      	ldrh	r3, [r4, #12]
 8012fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fa6:	81a3      	strh	r3, [r4, #12]
 8012fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fb0:	6921      	ldr	r1, [r4, #16]
 8012fb2:	464a      	mov	r2, r9
 8012fb4:	f7fd fa92 	bl	80104dc <memcpy>
 8012fb8:	89a3      	ldrh	r3, [r4, #12]
 8012fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fc2:	81a3      	strh	r3, [r4, #12]
 8012fc4:	6126      	str	r6, [r4, #16]
 8012fc6:	6165      	str	r5, [r4, #20]
 8012fc8:	444e      	add	r6, r9
 8012fca:	eba5 0509 	sub.w	r5, r5, r9
 8012fce:	6026      	str	r6, [r4, #0]
 8012fd0:	60a5      	str	r5, [r4, #8]
 8012fd2:	463e      	mov	r6, r7
 8012fd4:	42be      	cmp	r6, r7
 8012fd6:	d900      	bls.n	8012fda <__ssputs_r+0x86>
 8012fd8:	463e      	mov	r6, r7
 8012fda:	4632      	mov	r2, r6
 8012fdc:	6820      	ldr	r0, [r4, #0]
 8012fde:	4641      	mov	r1, r8
 8012fe0:	f000 fc7e 	bl	80138e0 <memmove>
 8012fe4:	68a3      	ldr	r3, [r4, #8]
 8012fe6:	6822      	ldr	r2, [r4, #0]
 8012fe8:	1b9b      	subs	r3, r3, r6
 8012fea:	4432      	add	r2, r6
 8012fec:	60a3      	str	r3, [r4, #8]
 8012fee:	6022      	str	r2, [r4, #0]
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	e7db      	b.n	8012fac <__ssputs_r+0x58>
 8012ff4:	462a      	mov	r2, r5
 8012ff6:	f7ff ff87 	bl	8012f08 <_realloc_r>
 8012ffa:	4606      	mov	r6, r0
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d1e1      	bne.n	8012fc4 <__ssputs_r+0x70>
 8013000:	6921      	ldr	r1, [r4, #16]
 8013002:	4650      	mov	r0, sl
 8013004:	f7fd fa80 	bl	8010508 <_free_r>
 8013008:	e7c7      	b.n	8012f9a <__ssputs_r+0x46>
	...

0801300c <_svfiprintf_r>:
 801300c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013010:	4698      	mov	r8, r3
 8013012:	898b      	ldrh	r3, [r1, #12]
 8013014:	061b      	lsls	r3, r3, #24
 8013016:	b09d      	sub	sp, #116	; 0x74
 8013018:	4607      	mov	r7, r0
 801301a:	460d      	mov	r5, r1
 801301c:	4614      	mov	r4, r2
 801301e:	d50e      	bpl.n	801303e <_svfiprintf_r+0x32>
 8013020:	690b      	ldr	r3, [r1, #16]
 8013022:	b963      	cbnz	r3, 801303e <_svfiprintf_r+0x32>
 8013024:	2140      	movs	r1, #64	; 0x40
 8013026:	f7fd fabf 	bl	80105a8 <_malloc_r>
 801302a:	6028      	str	r0, [r5, #0]
 801302c:	6128      	str	r0, [r5, #16]
 801302e:	b920      	cbnz	r0, 801303a <_svfiprintf_r+0x2e>
 8013030:	230c      	movs	r3, #12
 8013032:	603b      	str	r3, [r7, #0]
 8013034:	f04f 30ff 	mov.w	r0, #4294967295
 8013038:	e0d1      	b.n	80131de <_svfiprintf_r+0x1d2>
 801303a:	2340      	movs	r3, #64	; 0x40
 801303c:	616b      	str	r3, [r5, #20]
 801303e:	2300      	movs	r3, #0
 8013040:	9309      	str	r3, [sp, #36]	; 0x24
 8013042:	2320      	movs	r3, #32
 8013044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013048:	f8cd 800c 	str.w	r8, [sp, #12]
 801304c:	2330      	movs	r3, #48	; 0x30
 801304e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80131f8 <_svfiprintf_r+0x1ec>
 8013052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013056:	f04f 0901 	mov.w	r9, #1
 801305a:	4623      	mov	r3, r4
 801305c:	469a      	mov	sl, r3
 801305e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013062:	b10a      	cbz	r2, 8013068 <_svfiprintf_r+0x5c>
 8013064:	2a25      	cmp	r2, #37	; 0x25
 8013066:	d1f9      	bne.n	801305c <_svfiprintf_r+0x50>
 8013068:	ebba 0b04 	subs.w	fp, sl, r4
 801306c:	d00b      	beq.n	8013086 <_svfiprintf_r+0x7a>
 801306e:	465b      	mov	r3, fp
 8013070:	4622      	mov	r2, r4
 8013072:	4629      	mov	r1, r5
 8013074:	4638      	mov	r0, r7
 8013076:	f7ff ff6d 	bl	8012f54 <__ssputs_r>
 801307a:	3001      	adds	r0, #1
 801307c:	f000 80aa 	beq.w	80131d4 <_svfiprintf_r+0x1c8>
 8013080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013082:	445a      	add	r2, fp
 8013084:	9209      	str	r2, [sp, #36]	; 0x24
 8013086:	f89a 3000 	ldrb.w	r3, [sl]
 801308a:	2b00      	cmp	r3, #0
 801308c:	f000 80a2 	beq.w	80131d4 <_svfiprintf_r+0x1c8>
 8013090:	2300      	movs	r3, #0
 8013092:	f04f 32ff 	mov.w	r2, #4294967295
 8013096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801309a:	f10a 0a01 	add.w	sl, sl, #1
 801309e:	9304      	str	r3, [sp, #16]
 80130a0:	9307      	str	r3, [sp, #28]
 80130a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130a6:	931a      	str	r3, [sp, #104]	; 0x68
 80130a8:	4654      	mov	r4, sl
 80130aa:	2205      	movs	r2, #5
 80130ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130b0:	4851      	ldr	r0, [pc, #324]	; (80131f8 <_svfiprintf_r+0x1ec>)
 80130b2:	f7ed f8ad 	bl	8000210 <memchr>
 80130b6:	9a04      	ldr	r2, [sp, #16]
 80130b8:	b9d8      	cbnz	r0, 80130f2 <_svfiprintf_r+0xe6>
 80130ba:	06d0      	lsls	r0, r2, #27
 80130bc:	bf44      	itt	mi
 80130be:	2320      	movmi	r3, #32
 80130c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130c4:	0711      	lsls	r1, r2, #28
 80130c6:	bf44      	itt	mi
 80130c8:	232b      	movmi	r3, #43	; 0x2b
 80130ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130ce:	f89a 3000 	ldrb.w	r3, [sl]
 80130d2:	2b2a      	cmp	r3, #42	; 0x2a
 80130d4:	d015      	beq.n	8013102 <_svfiprintf_r+0xf6>
 80130d6:	9a07      	ldr	r2, [sp, #28]
 80130d8:	4654      	mov	r4, sl
 80130da:	2000      	movs	r0, #0
 80130dc:	f04f 0c0a 	mov.w	ip, #10
 80130e0:	4621      	mov	r1, r4
 80130e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130e6:	3b30      	subs	r3, #48	; 0x30
 80130e8:	2b09      	cmp	r3, #9
 80130ea:	d94e      	bls.n	801318a <_svfiprintf_r+0x17e>
 80130ec:	b1b0      	cbz	r0, 801311c <_svfiprintf_r+0x110>
 80130ee:	9207      	str	r2, [sp, #28]
 80130f0:	e014      	b.n	801311c <_svfiprintf_r+0x110>
 80130f2:	eba0 0308 	sub.w	r3, r0, r8
 80130f6:	fa09 f303 	lsl.w	r3, r9, r3
 80130fa:	4313      	orrs	r3, r2
 80130fc:	9304      	str	r3, [sp, #16]
 80130fe:	46a2      	mov	sl, r4
 8013100:	e7d2      	b.n	80130a8 <_svfiprintf_r+0x9c>
 8013102:	9b03      	ldr	r3, [sp, #12]
 8013104:	1d19      	adds	r1, r3, #4
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	9103      	str	r1, [sp, #12]
 801310a:	2b00      	cmp	r3, #0
 801310c:	bfbb      	ittet	lt
 801310e:	425b      	neglt	r3, r3
 8013110:	f042 0202 	orrlt.w	r2, r2, #2
 8013114:	9307      	strge	r3, [sp, #28]
 8013116:	9307      	strlt	r3, [sp, #28]
 8013118:	bfb8      	it	lt
 801311a:	9204      	strlt	r2, [sp, #16]
 801311c:	7823      	ldrb	r3, [r4, #0]
 801311e:	2b2e      	cmp	r3, #46	; 0x2e
 8013120:	d10c      	bne.n	801313c <_svfiprintf_r+0x130>
 8013122:	7863      	ldrb	r3, [r4, #1]
 8013124:	2b2a      	cmp	r3, #42	; 0x2a
 8013126:	d135      	bne.n	8013194 <_svfiprintf_r+0x188>
 8013128:	9b03      	ldr	r3, [sp, #12]
 801312a:	1d1a      	adds	r2, r3, #4
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	9203      	str	r2, [sp, #12]
 8013130:	2b00      	cmp	r3, #0
 8013132:	bfb8      	it	lt
 8013134:	f04f 33ff 	movlt.w	r3, #4294967295
 8013138:	3402      	adds	r4, #2
 801313a:	9305      	str	r3, [sp, #20]
 801313c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013208 <_svfiprintf_r+0x1fc>
 8013140:	7821      	ldrb	r1, [r4, #0]
 8013142:	2203      	movs	r2, #3
 8013144:	4650      	mov	r0, sl
 8013146:	f7ed f863 	bl	8000210 <memchr>
 801314a:	b140      	cbz	r0, 801315e <_svfiprintf_r+0x152>
 801314c:	2340      	movs	r3, #64	; 0x40
 801314e:	eba0 000a 	sub.w	r0, r0, sl
 8013152:	fa03 f000 	lsl.w	r0, r3, r0
 8013156:	9b04      	ldr	r3, [sp, #16]
 8013158:	4303      	orrs	r3, r0
 801315a:	3401      	adds	r4, #1
 801315c:	9304      	str	r3, [sp, #16]
 801315e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013162:	4826      	ldr	r0, [pc, #152]	; (80131fc <_svfiprintf_r+0x1f0>)
 8013164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013168:	2206      	movs	r2, #6
 801316a:	f7ed f851 	bl	8000210 <memchr>
 801316e:	2800      	cmp	r0, #0
 8013170:	d038      	beq.n	80131e4 <_svfiprintf_r+0x1d8>
 8013172:	4b23      	ldr	r3, [pc, #140]	; (8013200 <_svfiprintf_r+0x1f4>)
 8013174:	bb1b      	cbnz	r3, 80131be <_svfiprintf_r+0x1b2>
 8013176:	9b03      	ldr	r3, [sp, #12]
 8013178:	3307      	adds	r3, #7
 801317a:	f023 0307 	bic.w	r3, r3, #7
 801317e:	3308      	adds	r3, #8
 8013180:	9303      	str	r3, [sp, #12]
 8013182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013184:	4433      	add	r3, r6
 8013186:	9309      	str	r3, [sp, #36]	; 0x24
 8013188:	e767      	b.n	801305a <_svfiprintf_r+0x4e>
 801318a:	fb0c 3202 	mla	r2, ip, r2, r3
 801318e:	460c      	mov	r4, r1
 8013190:	2001      	movs	r0, #1
 8013192:	e7a5      	b.n	80130e0 <_svfiprintf_r+0xd4>
 8013194:	2300      	movs	r3, #0
 8013196:	3401      	adds	r4, #1
 8013198:	9305      	str	r3, [sp, #20]
 801319a:	4619      	mov	r1, r3
 801319c:	f04f 0c0a 	mov.w	ip, #10
 80131a0:	4620      	mov	r0, r4
 80131a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131a6:	3a30      	subs	r2, #48	; 0x30
 80131a8:	2a09      	cmp	r2, #9
 80131aa:	d903      	bls.n	80131b4 <_svfiprintf_r+0x1a8>
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d0c5      	beq.n	801313c <_svfiprintf_r+0x130>
 80131b0:	9105      	str	r1, [sp, #20]
 80131b2:	e7c3      	b.n	801313c <_svfiprintf_r+0x130>
 80131b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80131b8:	4604      	mov	r4, r0
 80131ba:	2301      	movs	r3, #1
 80131bc:	e7f0      	b.n	80131a0 <_svfiprintf_r+0x194>
 80131be:	ab03      	add	r3, sp, #12
 80131c0:	9300      	str	r3, [sp, #0]
 80131c2:	462a      	mov	r2, r5
 80131c4:	4b0f      	ldr	r3, [pc, #60]	; (8013204 <_svfiprintf_r+0x1f8>)
 80131c6:	a904      	add	r1, sp, #16
 80131c8:	4638      	mov	r0, r7
 80131ca:	f3af 8000 	nop.w
 80131ce:	1c42      	adds	r2, r0, #1
 80131d0:	4606      	mov	r6, r0
 80131d2:	d1d6      	bne.n	8013182 <_svfiprintf_r+0x176>
 80131d4:	89ab      	ldrh	r3, [r5, #12]
 80131d6:	065b      	lsls	r3, r3, #25
 80131d8:	f53f af2c 	bmi.w	8013034 <_svfiprintf_r+0x28>
 80131dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131de:	b01d      	add	sp, #116	; 0x74
 80131e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e4:	ab03      	add	r3, sp, #12
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	462a      	mov	r2, r5
 80131ea:	4b06      	ldr	r3, [pc, #24]	; (8013204 <_svfiprintf_r+0x1f8>)
 80131ec:	a904      	add	r1, sp, #16
 80131ee:	4638      	mov	r0, r7
 80131f0:	f000 f9d4 	bl	801359c <_printf_i>
 80131f4:	e7eb      	b.n	80131ce <_svfiprintf_r+0x1c2>
 80131f6:	bf00      	nop
 80131f8:	08015edc 	.word	0x08015edc
 80131fc:	08015ee6 	.word	0x08015ee6
 8013200:	00000000 	.word	0x00000000
 8013204:	08012f55 	.word	0x08012f55
 8013208:	08015ee2 	.word	0x08015ee2

0801320c <__sfputc_r>:
 801320c:	6893      	ldr	r3, [r2, #8]
 801320e:	3b01      	subs	r3, #1
 8013210:	2b00      	cmp	r3, #0
 8013212:	b410      	push	{r4}
 8013214:	6093      	str	r3, [r2, #8]
 8013216:	da08      	bge.n	801322a <__sfputc_r+0x1e>
 8013218:	6994      	ldr	r4, [r2, #24]
 801321a:	42a3      	cmp	r3, r4
 801321c:	db01      	blt.n	8013222 <__sfputc_r+0x16>
 801321e:	290a      	cmp	r1, #10
 8013220:	d103      	bne.n	801322a <__sfputc_r+0x1e>
 8013222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013226:	f7fe bb05 	b.w	8011834 <__swbuf_r>
 801322a:	6813      	ldr	r3, [r2, #0]
 801322c:	1c58      	adds	r0, r3, #1
 801322e:	6010      	str	r0, [r2, #0]
 8013230:	7019      	strb	r1, [r3, #0]
 8013232:	4608      	mov	r0, r1
 8013234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013238:	4770      	bx	lr

0801323a <__sfputs_r>:
 801323a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801323c:	4606      	mov	r6, r0
 801323e:	460f      	mov	r7, r1
 8013240:	4614      	mov	r4, r2
 8013242:	18d5      	adds	r5, r2, r3
 8013244:	42ac      	cmp	r4, r5
 8013246:	d101      	bne.n	801324c <__sfputs_r+0x12>
 8013248:	2000      	movs	r0, #0
 801324a:	e007      	b.n	801325c <__sfputs_r+0x22>
 801324c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013250:	463a      	mov	r2, r7
 8013252:	4630      	mov	r0, r6
 8013254:	f7ff ffda 	bl	801320c <__sfputc_r>
 8013258:	1c43      	adds	r3, r0, #1
 801325a:	d1f3      	bne.n	8013244 <__sfputs_r+0xa>
 801325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013260 <_vfiprintf_r>:
 8013260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013264:	460d      	mov	r5, r1
 8013266:	b09d      	sub	sp, #116	; 0x74
 8013268:	4614      	mov	r4, r2
 801326a:	4698      	mov	r8, r3
 801326c:	4606      	mov	r6, r0
 801326e:	b118      	cbz	r0, 8013278 <_vfiprintf_r+0x18>
 8013270:	6983      	ldr	r3, [r0, #24]
 8013272:	b90b      	cbnz	r3, 8013278 <_vfiprintf_r+0x18>
 8013274:	f7fe fcda 	bl	8011c2c <__sinit>
 8013278:	4b89      	ldr	r3, [pc, #548]	; (80134a0 <_vfiprintf_r+0x240>)
 801327a:	429d      	cmp	r5, r3
 801327c:	d11b      	bne.n	80132b6 <_vfiprintf_r+0x56>
 801327e:	6875      	ldr	r5, [r6, #4]
 8013280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013282:	07d9      	lsls	r1, r3, #31
 8013284:	d405      	bmi.n	8013292 <_vfiprintf_r+0x32>
 8013286:	89ab      	ldrh	r3, [r5, #12]
 8013288:	059a      	lsls	r2, r3, #22
 801328a:	d402      	bmi.n	8013292 <_vfiprintf_r+0x32>
 801328c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801328e:	f7ff f8da 	bl	8012446 <__retarget_lock_acquire_recursive>
 8013292:	89ab      	ldrh	r3, [r5, #12]
 8013294:	071b      	lsls	r3, r3, #28
 8013296:	d501      	bpl.n	801329c <_vfiprintf_r+0x3c>
 8013298:	692b      	ldr	r3, [r5, #16]
 801329a:	b9eb      	cbnz	r3, 80132d8 <_vfiprintf_r+0x78>
 801329c:	4629      	mov	r1, r5
 801329e:	4630      	mov	r0, r6
 80132a0:	f7fe fb2c 	bl	80118fc <__swsetup_r>
 80132a4:	b1c0      	cbz	r0, 80132d8 <_vfiprintf_r+0x78>
 80132a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132a8:	07dc      	lsls	r4, r3, #31
 80132aa:	d50e      	bpl.n	80132ca <_vfiprintf_r+0x6a>
 80132ac:	f04f 30ff 	mov.w	r0, #4294967295
 80132b0:	b01d      	add	sp, #116	; 0x74
 80132b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b6:	4b7b      	ldr	r3, [pc, #492]	; (80134a4 <_vfiprintf_r+0x244>)
 80132b8:	429d      	cmp	r5, r3
 80132ba:	d101      	bne.n	80132c0 <_vfiprintf_r+0x60>
 80132bc:	68b5      	ldr	r5, [r6, #8]
 80132be:	e7df      	b.n	8013280 <_vfiprintf_r+0x20>
 80132c0:	4b79      	ldr	r3, [pc, #484]	; (80134a8 <_vfiprintf_r+0x248>)
 80132c2:	429d      	cmp	r5, r3
 80132c4:	bf08      	it	eq
 80132c6:	68f5      	ldreq	r5, [r6, #12]
 80132c8:	e7da      	b.n	8013280 <_vfiprintf_r+0x20>
 80132ca:	89ab      	ldrh	r3, [r5, #12]
 80132cc:	0598      	lsls	r0, r3, #22
 80132ce:	d4ed      	bmi.n	80132ac <_vfiprintf_r+0x4c>
 80132d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132d2:	f7ff f8b9 	bl	8012448 <__retarget_lock_release_recursive>
 80132d6:	e7e9      	b.n	80132ac <_vfiprintf_r+0x4c>
 80132d8:	2300      	movs	r3, #0
 80132da:	9309      	str	r3, [sp, #36]	; 0x24
 80132dc:	2320      	movs	r3, #32
 80132de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80132e6:	2330      	movs	r3, #48	; 0x30
 80132e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80134ac <_vfiprintf_r+0x24c>
 80132ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132f0:	f04f 0901 	mov.w	r9, #1
 80132f4:	4623      	mov	r3, r4
 80132f6:	469a      	mov	sl, r3
 80132f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132fc:	b10a      	cbz	r2, 8013302 <_vfiprintf_r+0xa2>
 80132fe:	2a25      	cmp	r2, #37	; 0x25
 8013300:	d1f9      	bne.n	80132f6 <_vfiprintf_r+0x96>
 8013302:	ebba 0b04 	subs.w	fp, sl, r4
 8013306:	d00b      	beq.n	8013320 <_vfiprintf_r+0xc0>
 8013308:	465b      	mov	r3, fp
 801330a:	4622      	mov	r2, r4
 801330c:	4629      	mov	r1, r5
 801330e:	4630      	mov	r0, r6
 8013310:	f7ff ff93 	bl	801323a <__sfputs_r>
 8013314:	3001      	adds	r0, #1
 8013316:	f000 80aa 	beq.w	801346e <_vfiprintf_r+0x20e>
 801331a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801331c:	445a      	add	r2, fp
 801331e:	9209      	str	r2, [sp, #36]	; 0x24
 8013320:	f89a 3000 	ldrb.w	r3, [sl]
 8013324:	2b00      	cmp	r3, #0
 8013326:	f000 80a2 	beq.w	801346e <_vfiprintf_r+0x20e>
 801332a:	2300      	movs	r3, #0
 801332c:	f04f 32ff 	mov.w	r2, #4294967295
 8013330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013334:	f10a 0a01 	add.w	sl, sl, #1
 8013338:	9304      	str	r3, [sp, #16]
 801333a:	9307      	str	r3, [sp, #28]
 801333c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013340:	931a      	str	r3, [sp, #104]	; 0x68
 8013342:	4654      	mov	r4, sl
 8013344:	2205      	movs	r2, #5
 8013346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801334a:	4858      	ldr	r0, [pc, #352]	; (80134ac <_vfiprintf_r+0x24c>)
 801334c:	f7ec ff60 	bl	8000210 <memchr>
 8013350:	9a04      	ldr	r2, [sp, #16]
 8013352:	b9d8      	cbnz	r0, 801338c <_vfiprintf_r+0x12c>
 8013354:	06d1      	lsls	r1, r2, #27
 8013356:	bf44      	itt	mi
 8013358:	2320      	movmi	r3, #32
 801335a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801335e:	0713      	lsls	r3, r2, #28
 8013360:	bf44      	itt	mi
 8013362:	232b      	movmi	r3, #43	; 0x2b
 8013364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013368:	f89a 3000 	ldrb.w	r3, [sl]
 801336c:	2b2a      	cmp	r3, #42	; 0x2a
 801336e:	d015      	beq.n	801339c <_vfiprintf_r+0x13c>
 8013370:	9a07      	ldr	r2, [sp, #28]
 8013372:	4654      	mov	r4, sl
 8013374:	2000      	movs	r0, #0
 8013376:	f04f 0c0a 	mov.w	ip, #10
 801337a:	4621      	mov	r1, r4
 801337c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013380:	3b30      	subs	r3, #48	; 0x30
 8013382:	2b09      	cmp	r3, #9
 8013384:	d94e      	bls.n	8013424 <_vfiprintf_r+0x1c4>
 8013386:	b1b0      	cbz	r0, 80133b6 <_vfiprintf_r+0x156>
 8013388:	9207      	str	r2, [sp, #28]
 801338a:	e014      	b.n	80133b6 <_vfiprintf_r+0x156>
 801338c:	eba0 0308 	sub.w	r3, r0, r8
 8013390:	fa09 f303 	lsl.w	r3, r9, r3
 8013394:	4313      	orrs	r3, r2
 8013396:	9304      	str	r3, [sp, #16]
 8013398:	46a2      	mov	sl, r4
 801339a:	e7d2      	b.n	8013342 <_vfiprintf_r+0xe2>
 801339c:	9b03      	ldr	r3, [sp, #12]
 801339e:	1d19      	adds	r1, r3, #4
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	9103      	str	r1, [sp, #12]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	bfbb      	ittet	lt
 80133a8:	425b      	neglt	r3, r3
 80133aa:	f042 0202 	orrlt.w	r2, r2, #2
 80133ae:	9307      	strge	r3, [sp, #28]
 80133b0:	9307      	strlt	r3, [sp, #28]
 80133b2:	bfb8      	it	lt
 80133b4:	9204      	strlt	r2, [sp, #16]
 80133b6:	7823      	ldrb	r3, [r4, #0]
 80133b8:	2b2e      	cmp	r3, #46	; 0x2e
 80133ba:	d10c      	bne.n	80133d6 <_vfiprintf_r+0x176>
 80133bc:	7863      	ldrb	r3, [r4, #1]
 80133be:	2b2a      	cmp	r3, #42	; 0x2a
 80133c0:	d135      	bne.n	801342e <_vfiprintf_r+0x1ce>
 80133c2:	9b03      	ldr	r3, [sp, #12]
 80133c4:	1d1a      	adds	r2, r3, #4
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	9203      	str	r2, [sp, #12]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	bfb8      	it	lt
 80133ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80133d2:	3402      	adds	r4, #2
 80133d4:	9305      	str	r3, [sp, #20]
 80133d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80134bc <_vfiprintf_r+0x25c>
 80133da:	7821      	ldrb	r1, [r4, #0]
 80133dc:	2203      	movs	r2, #3
 80133de:	4650      	mov	r0, sl
 80133e0:	f7ec ff16 	bl	8000210 <memchr>
 80133e4:	b140      	cbz	r0, 80133f8 <_vfiprintf_r+0x198>
 80133e6:	2340      	movs	r3, #64	; 0x40
 80133e8:	eba0 000a 	sub.w	r0, r0, sl
 80133ec:	fa03 f000 	lsl.w	r0, r3, r0
 80133f0:	9b04      	ldr	r3, [sp, #16]
 80133f2:	4303      	orrs	r3, r0
 80133f4:	3401      	adds	r4, #1
 80133f6:	9304      	str	r3, [sp, #16]
 80133f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133fc:	482c      	ldr	r0, [pc, #176]	; (80134b0 <_vfiprintf_r+0x250>)
 80133fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013402:	2206      	movs	r2, #6
 8013404:	f7ec ff04 	bl	8000210 <memchr>
 8013408:	2800      	cmp	r0, #0
 801340a:	d03f      	beq.n	801348c <_vfiprintf_r+0x22c>
 801340c:	4b29      	ldr	r3, [pc, #164]	; (80134b4 <_vfiprintf_r+0x254>)
 801340e:	bb1b      	cbnz	r3, 8013458 <_vfiprintf_r+0x1f8>
 8013410:	9b03      	ldr	r3, [sp, #12]
 8013412:	3307      	adds	r3, #7
 8013414:	f023 0307 	bic.w	r3, r3, #7
 8013418:	3308      	adds	r3, #8
 801341a:	9303      	str	r3, [sp, #12]
 801341c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801341e:	443b      	add	r3, r7
 8013420:	9309      	str	r3, [sp, #36]	; 0x24
 8013422:	e767      	b.n	80132f4 <_vfiprintf_r+0x94>
 8013424:	fb0c 3202 	mla	r2, ip, r2, r3
 8013428:	460c      	mov	r4, r1
 801342a:	2001      	movs	r0, #1
 801342c:	e7a5      	b.n	801337a <_vfiprintf_r+0x11a>
 801342e:	2300      	movs	r3, #0
 8013430:	3401      	adds	r4, #1
 8013432:	9305      	str	r3, [sp, #20]
 8013434:	4619      	mov	r1, r3
 8013436:	f04f 0c0a 	mov.w	ip, #10
 801343a:	4620      	mov	r0, r4
 801343c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013440:	3a30      	subs	r2, #48	; 0x30
 8013442:	2a09      	cmp	r2, #9
 8013444:	d903      	bls.n	801344e <_vfiprintf_r+0x1ee>
 8013446:	2b00      	cmp	r3, #0
 8013448:	d0c5      	beq.n	80133d6 <_vfiprintf_r+0x176>
 801344a:	9105      	str	r1, [sp, #20]
 801344c:	e7c3      	b.n	80133d6 <_vfiprintf_r+0x176>
 801344e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013452:	4604      	mov	r4, r0
 8013454:	2301      	movs	r3, #1
 8013456:	e7f0      	b.n	801343a <_vfiprintf_r+0x1da>
 8013458:	ab03      	add	r3, sp, #12
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	462a      	mov	r2, r5
 801345e:	4b16      	ldr	r3, [pc, #88]	; (80134b8 <_vfiprintf_r+0x258>)
 8013460:	a904      	add	r1, sp, #16
 8013462:	4630      	mov	r0, r6
 8013464:	f3af 8000 	nop.w
 8013468:	4607      	mov	r7, r0
 801346a:	1c78      	adds	r0, r7, #1
 801346c:	d1d6      	bne.n	801341c <_vfiprintf_r+0x1bc>
 801346e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013470:	07d9      	lsls	r1, r3, #31
 8013472:	d405      	bmi.n	8013480 <_vfiprintf_r+0x220>
 8013474:	89ab      	ldrh	r3, [r5, #12]
 8013476:	059a      	lsls	r2, r3, #22
 8013478:	d402      	bmi.n	8013480 <_vfiprintf_r+0x220>
 801347a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801347c:	f7fe ffe4 	bl	8012448 <__retarget_lock_release_recursive>
 8013480:	89ab      	ldrh	r3, [r5, #12]
 8013482:	065b      	lsls	r3, r3, #25
 8013484:	f53f af12 	bmi.w	80132ac <_vfiprintf_r+0x4c>
 8013488:	9809      	ldr	r0, [sp, #36]	; 0x24
 801348a:	e711      	b.n	80132b0 <_vfiprintf_r+0x50>
 801348c:	ab03      	add	r3, sp, #12
 801348e:	9300      	str	r3, [sp, #0]
 8013490:	462a      	mov	r2, r5
 8013492:	4b09      	ldr	r3, [pc, #36]	; (80134b8 <_vfiprintf_r+0x258>)
 8013494:	a904      	add	r1, sp, #16
 8013496:	4630      	mov	r0, r6
 8013498:	f000 f880 	bl	801359c <_printf_i>
 801349c:	e7e4      	b.n	8013468 <_vfiprintf_r+0x208>
 801349e:	bf00      	nop
 80134a0:	08015c98 	.word	0x08015c98
 80134a4:	08015cb8 	.word	0x08015cb8
 80134a8:	08015c78 	.word	0x08015c78
 80134ac:	08015edc 	.word	0x08015edc
 80134b0:	08015ee6 	.word	0x08015ee6
 80134b4:	00000000 	.word	0x00000000
 80134b8:	0801323b 	.word	0x0801323b
 80134bc:	08015ee2 	.word	0x08015ee2

080134c0 <_printf_common>:
 80134c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134c4:	4616      	mov	r6, r2
 80134c6:	4699      	mov	r9, r3
 80134c8:	688a      	ldr	r2, [r1, #8]
 80134ca:	690b      	ldr	r3, [r1, #16]
 80134cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80134d0:	4293      	cmp	r3, r2
 80134d2:	bfb8      	it	lt
 80134d4:	4613      	movlt	r3, r2
 80134d6:	6033      	str	r3, [r6, #0]
 80134d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80134dc:	4607      	mov	r7, r0
 80134de:	460c      	mov	r4, r1
 80134e0:	b10a      	cbz	r2, 80134e6 <_printf_common+0x26>
 80134e2:	3301      	adds	r3, #1
 80134e4:	6033      	str	r3, [r6, #0]
 80134e6:	6823      	ldr	r3, [r4, #0]
 80134e8:	0699      	lsls	r1, r3, #26
 80134ea:	bf42      	ittt	mi
 80134ec:	6833      	ldrmi	r3, [r6, #0]
 80134ee:	3302      	addmi	r3, #2
 80134f0:	6033      	strmi	r3, [r6, #0]
 80134f2:	6825      	ldr	r5, [r4, #0]
 80134f4:	f015 0506 	ands.w	r5, r5, #6
 80134f8:	d106      	bne.n	8013508 <_printf_common+0x48>
 80134fa:	f104 0a19 	add.w	sl, r4, #25
 80134fe:	68e3      	ldr	r3, [r4, #12]
 8013500:	6832      	ldr	r2, [r6, #0]
 8013502:	1a9b      	subs	r3, r3, r2
 8013504:	42ab      	cmp	r3, r5
 8013506:	dc26      	bgt.n	8013556 <_printf_common+0x96>
 8013508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801350c:	1e13      	subs	r3, r2, #0
 801350e:	6822      	ldr	r2, [r4, #0]
 8013510:	bf18      	it	ne
 8013512:	2301      	movne	r3, #1
 8013514:	0692      	lsls	r2, r2, #26
 8013516:	d42b      	bmi.n	8013570 <_printf_common+0xb0>
 8013518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801351c:	4649      	mov	r1, r9
 801351e:	4638      	mov	r0, r7
 8013520:	47c0      	blx	r8
 8013522:	3001      	adds	r0, #1
 8013524:	d01e      	beq.n	8013564 <_printf_common+0xa4>
 8013526:	6823      	ldr	r3, [r4, #0]
 8013528:	68e5      	ldr	r5, [r4, #12]
 801352a:	6832      	ldr	r2, [r6, #0]
 801352c:	f003 0306 	and.w	r3, r3, #6
 8013530:	2b04      	cmp	r3, #4
 8013532:	bf08      	it	eq
 8013534:	1aad      	subeq	r5, r5, r2
 8013536:	68a3      	ldr	r3, [r4, #8]
 8013538:	6922      	ldr	r2, [r4, #16]
 801353a:	bf0c      	ite	eq
 801353c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013540:	2500      	movne	r5, #0
 8013542:	4293      	cmp	r3, r2
 8013544:	bfc4      	itt	gt
 8013546:	1a9b      	subgt	r3, r3, r2
 8013548:	18ed      	addgt	r5, r5, r3
 801354a:	2600      	movs	r6, #0
 801354c:	341a      	adds	r4, #26
 801354e:	42b5      	cmp	r5, r6
 8013550:	d11a      	bne.n	8013588 <_printf_common+0xc8>
 8013552:	2000      	movs	r0, #0
 8013554:	e008      	b.n	8013568 <_printf_common+0xa8>
 8013556:	2301      	movs	r3, #1
 8013558:	4652      	mov	r2, sl
 801355a:	4649      	mov	r1, r9
 801355c:	4638      	mov	r0, r7
 801355e:	47c0      	blx	r8
 8013560:	3001      	adds	r0, #1
 8013562:	d103      	bne.n	801356c <_printf_common+0xac>
 8013564:	f04f 30ff 	mov.w	r0, #4294967295
 8013568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801356c:	3501      	adds	r5, #1
 801356e:	e7c6      	b.n	80134fe <_printf_common+0x3e>
 8013570:	18e1      	adds	r1, r4, r3
 8013572:	1c5a      	adds	r2, r3, #1
 8013574:	2030      	movs	r0, #48	; 0x30
 8013576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801357a:	4422      	add	r2, r4
 801357c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013584:	3302      	adds	r3, #2
 8013586:	e7c7      	b.n	8013518 <_printf_common+0x58>
 8013588:	2301      	movs	r3, #1
 801358a:	4622      	mov	r2, r4
 801358c:	4649      	mov	r1, r9
 801358e:	4638      	mov	r0, r7
 8013590:	47c0      	blx	r8
 8013592:	3001      	adds	r0, #1
 8013594:	d0e6      	beq.n	8013564 <_printf_common+0xa4>
 8013596:	3601      	adds	r6, #1
 8013598:	e7d9      	b.n	801354e <_printf_common+0x8e>
	...

0801359c <_printf_i>:
 801359c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80135a0:	460c      	mov	r4, r1
 80135a2:	4691      	mov	r9, r2
 80135a4:	7e27      	ldrb	r7, [r4, #24]
 80135a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80135a8:	2f78      	cmp	r7, #120	; 0x78
 80135aa:	4680      	mov	r8, r0
 80135ac:	469a      	mov	sl, r3
 80135ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80135b2:	d807      	bhi.n	80135c4 <_printf_i+0x28>
 80135b4:	2f62      	cmp	r7, #98	; 0x62
 80135b6:	d80a      	bhi.n	80135ce <_printf_i+0x32>
 80135b8:	2f00      	cmp	r7, #0
 80135ba:	f000 80d8 	beq.w	801376e <_printf_i+0x1d2>
 80135be:	2f58      	cmp	r7, #88	; 0x58
 80135c0:	f000 80a3 	beq.w	801370a <_printf_i+0x16e>
 80135c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80135c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80135cc:	e03a      	b.n	8013644 <_printf_i+0xa8>
 80135ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80135d2:	2b15      	cmp	r3, #21
 80135d4:	d8f6      	bhi.n	80135c4 <_printf_i+0x28>
 80135d6:	a001      	add	r0, pc, #4	; (adr r0, 80135dc <_printf_i+0x40>)
 80135d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80135dc:	08013635 	.word	0x08013635
 80135e0:	08013649 	.word	0x08013649
 80135e4:	080135c5 	.word	0x080135c5
 80135e8:	080135c5 	.word	0x080135c5
 80135ec:	080135c5 	.word	0x080135c5
 80135f0:	080135c5 	.word	0x080135c5
 80135f4:	08013649 	.word	0x08013649
 80135f8:	080135c5 	.word	0x080135c5
 80135fc:	080135c5 	.word	0x080135c5
 8013600:	080135c5 	.word	0x080135c5
 8013604:	080135c5 	.word	0x080135c5
 8013608:	08013755 	.word	0x08013755
 801360c:	08013679 	.word	0x08013679
 8013610:	08013737 	.word	0x08013737
 8013614:	080135c5 	.word	0x080135c5
 8013618:	080135c5 	.word	0x080135c5
 801361c:	08013777 	.word	0x08013777
 8013620:	080135c5 	.word	0x080135c5
 8013624:	08013679 	.word	0x08013679
 8013628:	080135c5 	.word	0x080135c5
 801362c:	080135c5 	.word	0x080135c5
 8013630:	0801373f 	.word	0x0801373f
 8013634:	680b      	ldr	r3, [r1, #0]
 8013636:	1d1a      	adds	r2, r3, #4
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	600a      	str	r2, [r1, #0]
 801363c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013644:	2301      	movs	r3, #1
 8013646:	e0a3      	b.n	8013790 <_printf_i+0x1f4>
 8013648:	6825      	ldr	r5, [r4, #0]
 801364a:	6808      	ldr	r0, [r1, #0]
 801364c:	062e      	lsls	r6, r5, #24
 801364e:	f100 0304 	add.w	r3, r0, #4
 8013652:	d50a      	bpl.n	801366a <_printf_i+0xce>
 8013654:	6805      	ldr	r5, [r0, #0]
 8013656:	600b      	str	r3, [r1, #0]
 8013658:	2d00      	cmp	r5, #0
 801365a:	da03      	bge.n	8013664 <_printf_i+0xc8>
 801365c:	232d      	movs	r3, #45	; 0x2d
 801365e:	426d      	negs	r5, r5
 8013660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013664:	485e      	ldr	r0, [pc, #376]	; (80137e0 <_printf_i+0x244>)
 8013666:	230a      	movs	r3, #10
 8013668:	e019      	b.n	801369e <_printf_i+0x102>
 801366a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801366e:	6805      	ldr	r5, [r0, #0]
 8013670:	600b      	str	r3, [r1, #0]
 8013672:	bf18      	it	ne
 8013674:	b22d      	sxthne	r5, r5
 8013676:	e7ef      	b.n	8013658 <_printf_i+0xbc>
 8013678:	680b      	ldr	r3, [r1, #0]
 801367a:	6825      	ldr	r5, [r4, #0]
 801367c:	1d18      	adds	r0, r3, #4
 801367e:	6008      	str	r0, [r1, #0]
 8013680:	0628      	lsls	r0, r5, #24
 8013682:	d501      	bpl.n	8013688 <_printf_i+0xec>
 8013684:	681d      	ldr	r5, [r3, #0]
 8013686:	e002      	b.n	801368e <_printf_i+0xf2>
 8013688:	0669      	lsls	r1, r5, #25
 801368a:	d5fb      	bpl.n	8013684 <_printf_i+0xe8>
 801368c:	881d      	ldrh	r5, [r3, #0]
 801368e:	4854      	ldr	r0, [pc, #336]	; (80137e0 <_printf_i+0x244>)
 8013690:	2f6f      	cmp	r7, #111	; 0x6f
 8013692:	bf0c      	ite	eq
 8013694:	2308      	moveq	r3, #8
 8013696:	230a      	movne	r3, #10
 8013698:	2100      	movs	r1, #0
 801369a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801369e:	6866      	ldr	r6, [r4, #4]
 80136a0:	60a6      	str	r6, [r4, #8]
 80136a2:	2e00      	cmp	r6, #0
 80136a4:	bfa2      	ittt	ge
 80136a6:	6821      	ldrge	r1, [r4, #0]
 80136a8:	f021 0104 	bicge.w	r1, r1, #4
 80136ac:	6021      	strge	r1, [r4, #0]
 80136ae:	b90d      	cbnz	r5, 80136b4 <_printf_i+0x118>
 80136b0:	2e00      	cmp	r6, #0
 80136b2:	d04d      	beq.n	8013750 <_printf_i+0x1b4>
 80136b4:	4616      	mov	r6, r2
 80136b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80136ba:	fb03 5711 	mls	r7, r3, r1, r5
 80136be:	5dc7      	ldrb	r7, [r0, r7]
 80136c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80136c4:	462f      	mov	r7, r5
 80136c6:	42bb      	cmp	r3, r7
 80136c8:	460d      	mov	r5, r1
 80136ca:	d9f4      	bls.n	80136b6 <_printf_i+0x11a>
 80136cc:	2b08      	cmp	r3, #8
 80136ce:	d10b      	bne.n	80136e8 <_printf_i+0x14c>
 80136d0:	6823      	ldr	r3, [r4, #0]
 80136d2:	07df      	lsls	r7, r3, #31
 80136d4:	d508      	bpl.n	80136e8 <_printf_i+0x14c>
 80136d6:	6923      	ldr	r3, [r4, #16]
 80136d8:	6861      	ldr	r1, [r4, #4]
 80136da:	4299      	cmp	r1, r3
 80136dc:	bfde      	ittt	le
 80136de:	2330      	movle	r3, #48	; 0x30
 80136e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80136e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80136e8:	1b92      	subs	r2, r2, r6
 80136ea:	6122      	str	r2, [r4, #16]
 80136ec:	f8cd a000 	str.w	sl, [sp]
 80136f0:	464b      	mov	r3, r9
 80136f2:	aa03      	add	r2, sp, #12
 80136f4:	4621      	mov	r1, r4
 80136f6:	4640      	mov	r0, r8
 80136f8:	f7ff fee2 	bl	80134c0 <_printf_common>
 80136fc:	3001      	adds	r0, #1
 80136fe:	d14c      	bne.n	801379a <_printf_i+0x1fe>
 8013700:	f04f 30ff 	mov.w	r0, #4294967295
 8013704:	b004      	add	sp, #16
 8013706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801370a:	4835      	ldr	r0, [pc, #212]	; (80137e0 <_printf_i+0x244>)
 801370c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013710:	6823      	ldr	r3, [r4, #0]
 8013712:	680e      	ldr	r6, [r1, #0]
 8013714:	061f      	lsls	r7, r3, #24
 8013716:	f856 5b04 	ldr.w	r5, [r6], #4
 801371a:	600e      	str	r6, [r1, #0]
 801371c:	d514      	bpl.n	8013748 <_printf_i+0x1ac>
 801371e:	07d9      	lsls	r1, r3, #31
 8013720:	bf44      	itt	mi
 8013722:	f043 0320 	orrmi.w	r3, r3, #32
 8013726:	6023      	strmi	r3, [r4, #0]
 8013728:	b91d      	cbnz	r5, 8013732 <_printf_i+0x196>
 801372a:	6823      	ldr	r3, [r4, #0]
 801372c:	f023 0320 	bic.w	r3, r3, #32
 8013730:	6023      	str	r3, [r4, #0]
 8013732:	2310      	movs	r3, #16
 8013734:	e7b0      	b.n	8013698 <_printf_i+0xfc>
 8013736:	6823      	ldr	r3, [r4, #0]
 8013738:	f043 0320 	orr.w	r3, r3, #32
 801373c:	6023      	str	r3, [r4, #0]
 801373e:	2378      	movs	r3, #120	; 0x78
 8013740:	4828      	ldr	r0, [pc, #160]	; (80137e4 <_printf_i+0x248>)
 8013742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013746:	e7e3      	b.n	8013710 <_printf_i+0x174>
 8013748:	065e      	lsls	r6, r3, #25
 801374a:	bf48      	it	mi
 801374c:	b2ad      	uxthmi	r5, r5
 801374e:	e7e6      	b.n	801371e <_printf_i+0x182>
 8013750:	4616      	mov	r6, r2
 8013752:	e7bb      	b.n	80136cc <_printf_i+0x130>
 8013754:	680b      	ldr	r3, [r1, #0]
 8013756:	6826      	ldr	r6, [r4, #0]
 8013758:	6960      	ldr	r0, [r4, #20]
 801375a:	1d1d      	adds	r5, r3, #4
 801375c:	600d      	str	r5, [r1, #0]
 801375e:	0635      	lsls	r5, r6, #24
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	d501      	bpl.n	8013768 <_printf_i+0x1cc>
 8013764:	6018      	str	r0, [r3, #0]
 8013766:	e002      	b.n	801376e <_printf_i+0x1d2>
 8013768:	0671      	lsls	r1, r6, #25
 801376a:	d5fb      	bpl.n	8013764 <_printf_i+0x1c8>
 801376c:	8018      	strh	r0, [r3, #0]
 801376e:	2300      	movs	r3, #0
 8013770:	6123      	str	r3, [r4, #16]
 8013772:	4616      	mov	r6, r2
 8013774:	e7ba      	b.n	80136ec <_printf_i+0x150>
 8013776:	680b      	ldr	r3, [r1, #0]
 8013778:	1d1a      	adds	r2, r3, #4
 801377a:	600a      	str	r2, [r1, #0]
 801377c:	681e      	ldr	r6, [r3, #0]
 801377e:	6862      	ldr	r2, [r4, #4]
 8013780:	2100      	movs	r1, #0
 8013782:	4630      	mov	r0, r6
 8013784:	f7ec fd44 	bl	8000210 <memchr>
 8013788:	b108      	cbz	r0, 801378e <_printf_i+0x1f2>
 801378a:	1b80      	subs	r0, r0, r6
 801378c:	6060      	str	r0, [r4, #4]
 801378e:	6863      	ldr	r3, [r4, #4]
 8013790:	6123      	str	r3, [r4, #16]
 8013792:	2300      	movs	r3, #0
 8013794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013798:	e7a8      	b.n	80136ec <_printf_i+0x150>
 801379a:	6923      	ldr	r3, [r4, #16]
 801379c:	4632      	mov	r2, r6
 801379e:	4649      	mov	r1, r9
 80137a0:	4640      	mov	r0, r8
 80137a2:	47d0      	blx	sl
 80137a4:	3001      	adds	r0, #1
 80137a6:	d0ab      	beq.n	8013700 <_printf_i+0x164>
 80137a8:	6823      	ldr	r3, [r4, #0]
 80137aa:	079b      	lsls	r3, r3, #30
 80137ac:	d413      	bmi.n	80137d6 <_printf_i+0x23a>
 80137ae:	68e0      	ldr	r0, [r4, #12]
 80137b0:	9b03      	ldr	r3, [sp, #12]
 80137b2:	4298      	cmp	r0, r3
 80137b4:	bfb8      	it	lt
 80137b6:	4618      	movlt	r0, r3
 80137b8:	e7a4      	b.n	8013704 <_printf_i+0x168>
 80137ba:	2301      	movs	r3, #1
 80137bc:	4632      	mov	r2, r6
 80137be:	4649      	mov	r1, r9
 80137c0:	4640      	mov	r0, r8
 80137c2:	47d0      	blx	sl
 80137c4:	3001      	adds	r0, #1
 80137c6:	d09b      	beq.n	8013700 <_printf_i+0x164>
 80137c8:	3501      	adds	r5, #1
 80137ca:	68e3      	ldr	r3, [r4, #12]
 80137cc:	9903      	ldr	r1, [sp, #12]
 80137ce:	1a5b      	subs	r3, r3, r1
 80137d0:	42ab      	cmp	r3, r5
 80137d2:	dcf2      	bgt.n	80137ba <_printf_i+0x21e>
 80137d4:	e7eb      	b.n	80137ae <_printf_i+0x212>
 80137d6:	2500      	movs	r5, #0
 80137d8:	f104 0619 	add.w	r6, r4, #25
 80137dc:	e7f5      	b.n	80137ca <_printf_i+0x22e>
 80137de:	bf00      	nop
 80137e0:	08015eed 	.word	0x08015eed
 80137e4:	08015efe 	.word	0x08015efe

080137e8 <_read_r>:
 80137e8:	b538      	push	{r3, r4, r5, lr}
 80137ea:	4d07      	ldr	r5, [pc, #28]	; (8013808 <_read_r+0x20>)
 80137ec:	4604      	mov	r4, r0
 80137ee:	4608      	mov	r0, r1
 80137f0:	4611      	mov	r1, r2
 80137f2:	2200      	movs	r2, #0
 80137f4:	602a      	str	r2, [r5, #0]
 80137f6:	461a      	mov	r2, r3
 80137f8:	f7ef fae2 	bl	8002dc0 <_read>
 80137fc:	1c43      	adds	r3, r0, #1
 80137fe:	d102      	bne.n	8013806 <_read_r+0x1e>
 8013800:	682b      	ldr	r3, [r5, #0]
 8013802:	b103      	cbz	r3, 8013806 <_read_r+0x1e>
 8013804:	6023      	str	r3, [r4, #0]
 8013806:	bd38      	pop	{r3, r4, r5, pc}
 8013808:	200034dc 	.word	0x200034dc
 801380c:	00000000 	.word	0x00000000

08013810 <nan>:
 8013810:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013818 <nan+0x8>
 8013814:	4770      	bx	lr
 8013816:	bf00      	nop
 8013818:	00000000 	.word	0x00000000
 801381c:	7ff80000 	.word	0x7ff80000

08013820 <__ascii_wctomb>:
 8013820:	b149      	cbz	r1, 8013836 <__ascii_wctomb+0x16>
 8013822:	2aff      	cmp	r2, #255	; 0xff
 8013824:	bf85      	ittet	hi
 8013826:	238a      	movhi	r3, #138	; 0x8a
 8013828:	6003      	strhi	r3, [r0, #0]
 801382a:	700a      	strbls	r2, [r1, #0]
 801382c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013830:	bf98      	it	ls
 8013832:	2001      	movls	r0, #1
 8013834:	4770      	bx	lr
 8013836:	4608      	mov	r0, r1
 8013838:	4770      	bx	lr
	...

0801383c <__assert_func>:
 801383c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801383e:	4614      	mov	r4, r2
 8013840:	461a      	mov	r2, r3
 8013842:	4b09      	ldr	r3, [pc, #36]	; (8013868 <__assert_func+0x2c>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	4605      	mov	r5, r0
 8013848:	68d8      	ldr	r0, [r3, #12]
 801384a:	b14c      	cbz	r4, 8013860 <__assert_func+0x24>
 801384c:	4b07      	ldr	r3, [pc, #28]	; (801386c <__assert_func+0x30>)
 801384e:	9100      	str	r1, [sp, #0]
 8013850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013854:	4906      	ldr	r1, [pc, #24]	; (8013870 <__assert_func+0x34>)
 8013856:	462b      	mov	r3, r5
 8013858:	f000 f80e 	bl	8013878 <fiprintf>
 801385c:	f000 f862 	bl	8013924 <abort>
 8013860:	4b04      	ldr	r3, [pc, #16]	; (8013874 <__assert_func+0x38>)
 8013862:	461c      	mov	r4, r3
 8013864:	e7f3      	b.n	801384e <__assert_func+0x12>
 8013866:	bf00      	nop
 8013868:	20000168 	.word	0x20000168
 801386c:	08015f0f 	.word	0x08015f0f
 8013870:	08015f1c 	.word	0x08015f1c
 8013874:	08015f4a 	.word	0x08015f4a

08013878 <fiprintf>:
 8013878:	b40e      	push	{r1, r2, r3}
 801387a:	b503      	push	{r0, r1, lr}
 801387c:	4601      	mov	r1, r0
 801387e:	ab03      	add	r3, sp, #12
 8013880:	4805      	ldr	r0, [pc, #20]	; (8013898 <fiprintf+0x20>)
 8013882:	f853 2b04 	ldr.w	r2, [r3], #4
 8013886:	6800      	ldr	r0, [r0, #0]
 8013888:	9301      	str	r3, [sp, #4]
 801388a:	f7ff fce9 	bl	8013260 <_vfiprintf_r>
 801388e:	b002      	add	sp, #8
 8013890:	f85d eb04 	ldr.w	lr, [sp], #4
 8013894:	b003      	add	sp, #12
 8013896:	4770      	bx	lr
 8013898:	20000168 	.word	0x20000168

0801389c <_fstat_r>:
 801389c:	b538      	push	{r3, r4, r5, lr}
 801389e:	4d07      	ldr	r5, [pc, #28]	; (80138bc <_fstat_r+0x20>)
 80138a0:	2300      	movs	r3, #0
 80138a2:	4604      	mov	r4, r0
 80138a4:	4608      	mov	r0, r1
 80138a6:	4611      	mov	r1, r2
 80138a8:	602b      	str	r3, [r5, #0]
 80138aa:	f7ef face 	bl	8002e4a <_fstat>
 80138ae:	1c43      	adds	r3, r0, #1
 80138b0:	d102      	bne.n	80138b8 <_fstat_r+0x1c>
 80138b2:	682b      	ldr	r3, [r5, #0]
 80138b4:	b103      	cbz	r3, 80138b8 <_fstat_r+0x1c>
 80138b6:	6023      	str	r3, [r4, #0]
 80138b8:	bd38      	pop	{r3, r4, r5, pc}
 80138ba:	bf00      	nop
 80138bc:	200034dc 	.word	0x200034dc

080138c0 <_isatty_r>:
 80138c0:	b538      	push	{r3, r4, r5, lr}
 80138c2:	4d06      	ldr	r5, [pc, #24]	; (80138dc <_isatty_r+0x1c>)
 80138c4:	2300      	movs	r3, #0
 80138c6:	4604      	mov	r4, r0
 80138c8:	4608      	mov	r0, r1
 80138ca:	602b      	str	r3, [r5, #0]
 80138cc:	f7ef facd 	bl	8002e6a <_isatty>
 80138d0:	1c43      	adds	r3, r0, #1
 80138d2:	d102      	bne.n	80138da <_isatty_r+0x1a>
 80138d4:	682b      	ldr	r3, [r5, #0]
 80138d6:	b103      	cbz	r3, 80138da <_isatty_r+0x1a>
 80138d8:	6023      	str	r3, [r4, #0]
 80138da:	bd38      	pop	{r3, r4, r5, pc}
 80138dc:	200034dc 	.word	0x200034dc

080138e0 <memmove>:
 80138e0:	4288      	cmp	r0, r1
 80138e2:	b510      	push	{r4, lr}
 80138e4:	eb01 0402 	add.w	r4, r1, r2
 80138e8:	d902      	bls.n	80138f0 <memmove+0x10>
 80138ea:	4284      	cmp	r4, r0
 80138ec:	4623      	mov	r3, r4
 80138ee:	d807      	bhi.n	8013900 <memmove+0x20>
 80138f0:	1e43      	subs	r3, r0, #1
 80138f2:	42a1      	cmp	r1, r4
 80138f4:	d008      	beq.n	8013908 <memmove+0x28>
 80138f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80138fe:	e7f8      	b.n	80138f2 <memmove+0x12>
 8013900:	4402      	add	r2, r0
 8013902:	4601      	mov	r1, r0
 8013904:	428a      	cmp	r2, r1
 8013906:	d100      	bne.n	801390a <memmove+0x2a>
 8013908:	bd10      	pop	{r4, pc}
 801390a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801390e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013912:	e7f7      	b.n	8013904 <memmove+0x24>

08013914 <_malloc_usable_size_r>:
 8013914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013918:	1f18      	subs	r0, r3, #4
 801391a:	2b00      	cmp	r3, #0
 801391c:	bfbc      	itt	lt
 801391e:	580b      	ldrlt	r3, [r1, r0]
 8013920:	18c0      	addlt	r0, r0, r3
 8013922:	4770      	bx	lr

08013924 <abort>:
 8013924:	b508      	push	{r3, lr}
 8013926:	2006      	movs	r0, #6
 8013928:	f000 f82c 	bl	8013984 <raise>
 801392c:	2001      	movs	r0, #1
 801392e:	f7ef fa3d 	bl	8002dac <_exit>

08013932 <_raise_r>:
 8013932:	291f      	cmp	r1, #31
 8013934:	b538      	push	{r3, r4, r5, lr}
 8013936:	4604      	mov	r4, r0
 8013938:	460d      	mov	r5, r1
 801393a:	d904      	bls.n	8013946 <_raise_r+0x14>
 801393c:	2316      	movs	r3, #22
 801393e:	6003      	str	r3, [r0, #0]
 8013940:	f04f 30ff 	mov.w	r0, #4294967295
 8013944:	bd38      	pop	{r3, r4, r5, pc}
 8013946:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013948:	b112      	cbz	r2, 8013950 <_raise_r+0x1e>
 801394a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801394e:	b94b      	cbnz	r3, 8013964 <_raise_r+0x32>
 8013950:	4620      	mov	r0, r4
 8013952:	f000 f831 	bl	80139b8 <_getpid_r>
 8013956:	462a      	mov	r2, r5
 8013958:	4601      	mov	r1, r0
 801395a:	4620      	mov	r0, r4
 801395c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013960:	f000 b818 	b.w	8013994 <_kill_r>
 8013964:	2b01      	cmp	r3, #1
 8013966:	d00a      	beq.n	801397e <_raise_r+0x4c>
 8013968:	1c59      	adds	r1, r3, #1
 801396a:	d103      	bne.n	8013974 <_raise_r+0x42>
 801396c:	2316      	movs	r3, #22
 801396e:	6003      	str	r3, [r0, #0]
 8013970:	2001      	movs	r0, #1
 8013972:	e7e7      	b.n	8013944 <_raise_r+0x12>
 8013974:	2400      	movs	r4, #0
 8013976:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801397a:	4628      	mov	r0, r5
 801397c:	4798      	blx	r3
 801397e:	2000      	movs	r0, #0
 8013980:	e7e0      	b.n	8013944 <_raise_r+0x12>
	...

08013984 <raise>:
 8013984:	4b02      	ldr	r3, [pc, #8]	; (8013990 <raise+0xc>)
 8013986:	4601      	mov	r1, r0
 8013988:	6818      	ldr	r0, [r3, #0]
 801398a:	f7ff bfd2 	b.w	8013932 <_raise_r>
 801398e:	bf00      	nop
 8013990:	20000168 	.word	0x20000168

08013994 <_kill_r>:
 8013994:	b538      	push	{r3, r4, r5, lr}
 8013996:	4d07      	ldr	r5, [pc, #28]	; (80139b4 <_kill_r+0x20>)
 8013998:	2300      	movs	r3, #0
 801399a:	4604      	mov	r4, r0
 801399c:	4608      	mov	r0, r1
 801399e:	4611      	mov	r1, r2
 80139a0:	602b      	str	r3, [r5, #0]
 80139a2:	f7ef f9f3 	bl	8002d8c <_kill>
 80139a6:	1c43      	adds	r3, r0, #1
 80139a8:	d102      	bne.n	80139b0 <_kill_r+0x1c>
 80139aa:	682b      	ldr	r3, [r5, #0]
 80139ac:	b103      	cbz	r3, 80139b0 <_kill_r+0x1c>
 80139ae:	6023      	str	r3, [r4, #0]
 80139b0:	bd38      	pop	{r3, r4, r5, pc}
 80139b2:	bf00      	nop
 80139b4:	200034dc 	.word	0x200034dc

080139b8 <_getpid_r>:
 80139b8:	f7ef b9e0 	b.w	8002d7c <_getpid>

080139bc <_init>:
 80139bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139be:	bf00      	nop
 80139c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139c2:	bc08      	pop	{r3}
 80139c4:	469e      	mov	lr, r3
 80139c6:	4770      	bx	lr

080139c8 <_fini>:
 80139c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ca:	bf00      	nop
 80139cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ce:	bc08      	pop	{r3}
 80139d0:	469e      	mov	lr, r3
 80139d2:	4770      	bx	lr
