
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdf4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  0800bf94  0800bf94  0001bf94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d52c  0800d52c  000201b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d52c  0800d52c  0001d52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d534  0800d534  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d534  0800d534  0001d534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d538  0800d538  0001d538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  0800d53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a3c  200001b8  0800d6f4  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bf4  0800d6f4  00022bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef38  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004461  00000000  00000000  0003f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00043588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001cdd0  00000000  00000000  00044a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b72a  00000000  00000000  00061808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a247a  00000000  00000000  0007cf32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0011f3ac  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000012e8  00000000  00000000  0011f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000602c  00000000  00000000  001206e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b8 	.word	0x200001b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf7c 	.word	0x0800bf7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001bc 	.word	0x200001bc
 80001dc:	0800bf7c 	.word	0x0800bf7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <KnobMap>:
//uint8_t Knob_Map(Knob *k) {
//	return k->value * k->max_range / (k->max_values - 1);
//}

// Maps values from (0, max_values-1) to (0, m)
uint8_t KnobMap(Knob *k, uint8_t value, uint8_t m) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	fb02 f203 	mul.w	r2, r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7f1b      	ldrb	r3, [r3, #28]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ffc2 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <SD_Toggle>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Polls each channel NUM_ADC_SAMPLES times and saves the average ADC reading

void SD_Toggle() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    (hsd.State != HAL_SD_STATE_READY) ? SD_Enable() : SD_Disable();
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SD_Toggle+0x20>)
 8000fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d002      	beq.n	8000ff2 <SD_Toggle+0x16>
 8000fec:	f000 f808 	bl	8001000 <SD_Enable>
}
 8000ff0:	e001      	b.n	8000ff6 <SD_Toggle+0x1a>
    (hsd.State != HAL_SD_STATE_READY) ? SD_Enable() : SD_Disable();
 8000ff2:	f000 f817 	bl	8001024 <SD_Disable>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20002284 	.word	0x20002284

08001000 <SD_Enable>:

void SD_Enable() {
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
    __HAL_SD_ENABLE(hsd);
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SD_Enable+0x1c>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]
    hsd.State = HAL_SD_STATE_READY;
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SD_Enable+0x20>)
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	422580a0 	.word	0x422580a0
 8001020:	20002284 	.word	0x20002284

08001024 <SD_Disable>:

void SD_Disable() {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
    __HAL_SD_DISABLE(hsd);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SD_Disable+0x1c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
    hsd.State = HAL_SD_STATE_RESET;
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SD_Disable+0x20>)
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	422580a0 	.word	0x422580a0
 8001044:	20002284 	.word	0x20002284

08001048 <ADC_Mux_Select>:

void ADC_Mux_Select(uint8_t c) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d824      	bhi.n	80010a2 <ADC_Mux_Select+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e01d      	b.n	800109a <ADC_Mux_Select+0x52>
        if (c & (1 << i)) {
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	fa42 f303 	asr.w	r3, r2, r3
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d009      	beq.n	8001082 <ADC_Mux_Select+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <ADC_Mux_Select+0x64>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001076:	2201      	movs	r2, #1
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <ADC_Mux_Select+0x68>)
 800107c:	f002 fcf8 	bl	8003a70 <HAL_GPIO_WritePin>
 8001080:	e008      	b.n	8001094 <ADC_Mux_Select+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <ADC_Mux_Select+0x64>)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	4808      	ldr	r0, [pc, #32]	; (80010b0 <ADC_Mux_Select+0x68>)
 8001090:	f002 fcee 	bl	8003a70 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3301      	adds	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b03      	cmp	r3, #3
 800109e:	ddde      	ble.n	800105e <ADC_Mux_Select+0x16>
 80010a0:	e000      	b.n	80010a4 <ADC_Mux_Select+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 80010a2:	bf00      	nop
        }
    }
}
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0800d474 	.word	0x0800d474
 80010b0:	40020400 	.word	0x40020400

080010b4 <ADC_Read_Knobs>:

void ADC_Read_Knobs() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08e      	sub	sp, #56	; 0x38
 80010b8:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010c0:	e06c      	b.n	800119c <ADC_Read_Knobs+0xe8>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_Mux_Select(channel);
 80010c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffbe 	bl	8001048 <ADC_Mux_Select>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 80010da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010de:	4a34      	ldr	r2, [pc, #208]	; (80011b0 <ADC_Read_Knobs+0xfc>)
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	623b      	str	r3, [r7, #32]
        sConfig.Rank = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4619      	mov	r1, r3
 80010f4:	482f      	ldr	r0, [pc, #188]	; (80011b4 <ADC_Read_Knobs+0x100>)
 80010f6:	f001 ffdf 	bl	80030b8 <HAL_ADC_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <ADC_Read_Knobs+0x50>
            Error_Handler();
 8001100:	f000 fd38 	bl	8001b74 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 8001104:	482b      	ldr	r0, [pc, #172]	; (80011b4 <ADC_Read_Knobs+0x100>)
 8001106:	f001 fe57 	bl	8002db8 <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001110:	e016      	b.n	8001140 <ADC_Read_Knobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 8001112:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001116:	4827      	ldr	r0, [pc, #156]	; (80011b4 <ADC_Read_Knobs+0x100>)
 8001118:	f001 ff35 	bl	8002f86 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 800111c:	4825      	ldr	r0, [pc, #148]	; (80011b4 <ADC_Read_Knobs+0x100>)
 800111e:	f001 ffbd 	bl	800309c <HAL_ADC_GetValue>
 8001122:	4602      	mov	r2, r0
 8001124:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001128:	b292      	uxth	r2, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001130:	440b      	add	r3, r1
 8001132:	f823 2c38 	strh.w	r2, [r3, #-56]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001136:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800113a:	3301      	adds	r3, #1
 800113c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001140:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d9e4      	bls.n	8001112 <ADC_Read_Knobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 8001148:	481a      	ldr	r0, [pc, #104]	; (80011b4 <ADC_Read_Knobs+0x100>)
 800114a:	f001 fee9 	bl	8002f20 <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	86bb      	strh	r3, [r7, #52]	; 0x34
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001158:	e00f      	b.n	800117a <ADC_Read_Knobs+0xc6>
            adc_sum += adcBuf[i];
 800115a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001164:	4413      	add	r3, r2
 8001166:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 800116a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800116c:	4413      	add	r3, r2
 800116e:	86bb      	strh	r3, [r7, #52]	; 0x34
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001170:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001174:	3301      	adds	r3, #1
 8001176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800117a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800117e:	2b0f      	cmp	r3, #15
 8001180:	d9eb      	bls.n	800115a <ADC_Read_Knobs+0xa6>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 8001182:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001186:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001188:	0912      	lsrs	r2, r2, #4
 800118a:	b291      	uxth	r1, r2
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <ADC_Read_Knobs+0x104>)
 800118e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 8001192:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001196:	3301      	adds	r3, #1
 8001198:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800119c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d98e      	bls.n	80010c2 <ADC_Read_Knobs+0xe>
    }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3738      	adds	r7, #56	; 0x38
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000010 	.word	0x20000010
 80011b4:	2000221c 	.word	0x2000221c
 80011b8:	200001d4 	.word	0x200001d4

080011bc <MIDI_Send>:

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, KnobMap(k, value, k->max_range));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7e1c      	ldrb	r4, [r3, #24]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7e5d      	ldrb	r5, [r3, #25]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7f5a      	ldrb	r2, [r3, #29]
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	4619      	mov	r1, r3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fe9b 	bl	8000f14 <KnobMap>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4629      	mov	r1, r5
 80011e4:	4620      	mov	r0, r4
 80011e6:	f009 f9d9 	bl	800a59c <MX_USB_Send_Midi>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080011f4 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7f1b      	ldrb	r3, [r3, #28]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f995 	bl	8000534 <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b45      	ldr	r3, [pc, #276]	; (8001324 <MIDI_Scale_And_Filter+0x130>)
 8001210:	f7ff fb24 	bl	800085c <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fcae 	bl	8000b7c <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f7ff f997 	bl	8000558 <__aeabi_f2d>
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b3e      	ldr	r3, [pc, #248]	; (8001328 <MIDI_Scale_And_Filter+0x134>)
 8001230:	f7ff f9ea 	bl	8000608 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4614      	mov	r4, r2
 800123a:	461d      	mov	r5, r3
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f978 	bl	8000534 <__aeabi_i2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff f9dc 	bl	8000608 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4614      	mov	r4, r2
 8001256:	461d      	mov	r5, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7edb      	ldrb	r3, [r3, #27]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f969 	bl	8000534 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <MIDI_Scale_And_Filter+0x134>)
 8001268:	f7ff f9ce 	bl	8000608 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f812 	bl	800029c <__adddf3>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4614      	mov	r4, r2
 800127e:	461d      	mov	r5, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7f5b      	ldrb	r3, [r3, #29]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f955 	bl	8000534 <__aeabi_i2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7ff fc2b 	bl	8000aec <__aeabi_dcmplt>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d032      	beq.n	8001302 <MIDI_Scale_And_Filter+0x10e>
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff f95b 	bl	8000558 <__aeabi_f2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MIDI_Scale_And_Filter+0x134>)
 80012a8:	f7ff f9ae 	bl	8000608 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4614      	mov	r4, r2
 80012b2:	461d      	mov	r5, r3
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f93c 	bl	8000534 <__aeabi_i2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4620      	mov	r0, r4
 80012c2:	4629      	mov	r1, r5
 80012c4:	f7ff f9a0 	bl	8000608 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4614      	mov	r4, r2
 80012ce:	461d      	mov	r5, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7edb      	ldrb	r3, [r3, #27]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f92d 	bl	8000534 <__aeabi_i2d>
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MIDI_Scale_And_Filter+0x134>)
 80012e0:	f7ff f992 	bl	8000608 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7fe ffd6 	bl	800029c <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc20 	bl	8000b3c <__aeabi_d2uiz>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	e00c      	b.n	800131c <MIDI_Scale_And_Filter+0x128>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7f5b      	ldrb	r3, [r3, #29]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f914 	bl	8000534 <__aeabi_i2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fc12 	bl	8000b3c <__aeabi_d2uiz>
 8001318:	4603      	mov	r3, r0
 800131a:	b2db      	uxtb	r3, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bdb0      	pop	{r4, r5, r7, pc}
 8001324:	406f4000 	.word	0x406f4000
 8001328:	3fe00000 	.word	0x3fe00000

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0a2      	sub	sp, #136	; 0x88
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    Knob knobs[4] = { { .init_value = 63, .row = 0, .col = 0, .label = "Cutoff", .channel = 0, .cc = 17, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 1 },
 8001332:	463b      	mov	r3, r7
 8001334:	2280      	movs	r2, #128	; 0x80
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f009 fff1 	bl	800b320 <memset>
 800133e:	4ad1      	ldr	r2, [pc, #836]	; (8001684 <main+0x358>)
 8001340:	1cbb      	adds	r3, r7, #2
 8001342:	6810      	ldr	r0, [r2, #0]
 8001344:	6018      	str	r0, [r3, #0]
 8001346:	8891      	ldrh	r1, [r2, #4]
 8001348:	7992      	ldrb	r2, [r2, #6]
 800134a:	8099      	strh	r1, [r3, #4]
 800134c:	719a      	strb	r2, [r3, #6]
 800134e:	f107 0309 	add.w	r3, r7, #9
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	2311      	movs	r3, #17
 800135a:	767b      	strb	r3, [r7, #25]
 800135c:	233f      	movs	r3, #63	; 0x3f
 800135e:	76bb      	strb	r3, [r7, #26]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	773b      	strb	r3, [r7, #28]
 8001364:	237f      	movs	r3, #127	; 0x7f
 8001366:	777b      	strb	r3, [r7, #29]
 8001368:	2301      	movs	r3, #1
 800136a:	77bb      	strb	r3, [r7, #30]
 800136c:	2301      	movs	r3, #1
 800136e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001372:	4bc5      	ldr	r3, [pc, #788]	; (8001688 <main+0x35c>)
 8001374:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001378:	cb03      	ldmia	r3!, {r0, r1}
 800137a:	6010      	str	r0, [r2, #0]
 800137c:	6051      	str	r1, [r2, #4]
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	8113      	strh	r3, [r2, #8]
 8001382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	711a      	strb	r2, [r3, #4]
 800138c:	2301      	movs	r3, #1
 800138e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001392:	2312      	movs	r3, #18
 8001394:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001398:	237f      	movs	r3, #127	; 0x7f
 800139a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80013a4:	237f      	movs	r3, #127	; 0x7f
 80013a6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80013aa:	2301      	movs	r3, #1
 80013ac:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80013b0:	4ab6      	ldr	r2, [pc, #728]	; (800168c <main+0x360>)
 80013b2:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80013b6:	6810      	ldr	r0, [r2, #0]
 80013b8:	6018      	str	r0, [r3, #0]
 80013ba:	8892      	ldrh	r2, [r2, #4]
 80013bc:	809a      	strh	r2, [r3, #4]
 80013be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	721a      	strb	r2, [r3, #8]
 80013ca:	2302      	movs	r3, #2
 80013cc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80013d0:	2313      	movs	r3, #19
 80013d2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80013d6:	2305      	movs	r3, #5
 80013d8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 80013dc:	230c      	movs	r3, #12
 80013de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80013e2:	237f      	movs	r3, #127	; 0x7f
 80013e4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80013e8:	2301      	movs	r3, #1
 80013ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80013ee:	2301      	movs	r3, #1
 80013f0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80013f4:	2301      	movs	r3, #1
 80013f6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80013fa:	4aa5      	ldr	r2, [pc, #660]	; (8001690 <main+0x364>)
 80013fc:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8001400:	6810      	ldr	r0, [r2, #0]
 8001402:	6018      	str	r0, [r3, #0]
 8001404:	8892      	ldrh	r2, [r2, #4]
 8001406:	809a      	strh	r2, [r3, #4]
 8001408:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	721a      	strb	r2, [r3, #8]
 8001414:	2303      	movs	r3, #3
 8001416:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 800141a:	2314      	movs	r3, #20
 800141c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8001420:	230b      	movs	r3, #11
 8001422:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8001426:	230c      	movs	r3, #12
 8001428:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 800142c:	230b      	movs	r3, #11
 800142e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8001432:	2301      	movs	r3, #1
 8001434:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
            { .init_value = 127, .row = 0, .col = 1, .label = "Resonance", .channel = 1, .cc = 18, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 0 },
            { .init_value = 5, .row = 1, .col = 0, .label = "Osc 0", .channel = 2, .cc = 19, .value = 0, .max_values = 12, .max_range = 127, .isLocked = 1 },
            { .init_value = 11, .row = 1, .col = 1, .label = "Osc 1", .channel = 3, .cc = 20, .value = 0, .max_values = 12, .max_range = 11, .isLocked = 1 } };

    for (int i = 2; i < 4; i++) {
 8001438:	2302      	movs	r3, #2
 800143a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800143e:	e0c4      	b.n	80015ca <main+0x29e>
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001444:	015b      	lsls	r3, r3, #5
 8001446:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800144a:	4413      	add	r3, r2
 800144c:	3b6c      	subs	r3, #108	; 0x6c
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f009 ff4b 	bl	800b2f4 <malloc>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001466:	015b      	lsls	r3, r3, #5
 8001468:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800146c:	440b      	add	r3, r1
 800146e:	3b74      	subs	r3, #116	; 0x74
 8001470:	601a      	str	r2, [r3, #0]
        strncpy(knobs[i].sub_labels[0], "MultiSaw", MAX_LABEL_CHARS);
 8001472:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001476:	015b      	lsls	r3, r3, #5
 8001478:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800147c:	4413      	add	r3, r2
 800147e:	3b74      	subs	r3, #116	; 0x74
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	220e      	movs	r2, #14
 8001484:	4983      	ldr	r1, [pc, #524]	; (8001694 <main+0x368>)
 8001486:	4618      	mov	r0, r3
 8001488:	f00a f8f9 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[1], "TriWrap", MAX_LABEL_CHARS);
 800148c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001490:	015b      	lsls	r3, r3, #5
 8001492:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001496:	4413      	add	r3, r2
 8001498:	3b74      	subs	r3, #116	; 0x74
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	330f      	adds	r3, #15
 800149e:	220e      	movs	r2, #14
 80014a0:	497d      	ldr	r1, [pc, #500]	; (8001698 <main+0x36c>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00a f8eb 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[2], "Noise", MAX_LABEL_CHARS);
 80014a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014ac:	015b      	lsls	r3, r3, #5
 80014ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014b2:	4413      	add	r3, r2
 80014b4:	3b74      	subs	r3, #116	; 0x74
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	331e      	adds	r3, #30
 80014ba:	220e      	movs	r2, #14
 80014bc:	4977      	ldr	r1, [pc, #476]	; (800169c <main+0x370>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f00a f8dd 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[3], "Feedback", MAX_LABEL_CHARS);
 80014c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014c8:	015b      	lsls	r3, r3, #5
 80014ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014ce:	4413      	add	r3, r2
 80014d0:	3b74      	subs	r3, #116	; 0x74
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	332d      	adds	r3, #45	; 0x2d
 80014d6:	220e      	movs	r2, #14
 80014d8:	4971      	ldr	r1, [pc, #452]	; (80016a0 <main+0x374>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f00a f8cf 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[4], "Pulse", MAX_LABEL_CHARS);
 80014e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014e4:	015b      	lsls	r3, r3, #5
 80014e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014ea:	4413      	add	r3, r2
 80014ec:	3b74      	subs	r3, #116	; 0x74
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	333c      	adds	r3, #60	; 0x3c
 80014f2:	220e      	movs	r2, #14
 80014f4:	496b      	ldr	r1, [pc, #428]	; (80016a4 <main+0x378>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00a f8c1 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[5], "Saw", MAX_LABEL_CHARS);
 80014fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001500:	015b      	lsls	r3, r3, #5
 8001502:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001506:	4413      	add	r3, r2
 8001508:	3b74      	subs	r3, #116	; 0x74
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	334b      	adds	r3, #75	; 0x4b
 800150e:	220e      	movs	r2, #14
 8001510:	4965      	ldr	r1, [pc, #404]	; (80016a8 <main+0x37c>)
 8001512:	4618      	mov	r0, r3
 8001514:	f00a f8b3 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[6], "Triangle", MAX_LABEL_CHARS);
 8001518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800151c:	015b      	lsls	r3, r3, #5
 800151e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001522:	4413      	add	r3, r2
 8001524:	3b74      	subs	r3, #116	; 0x74
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	335a      	adds	r3, #90	; 0x5a
 800152a:	220e      	movs	r2, #14
 800152c:	495f      	ldr	r1, [pc, #380]	; (80016ac <main+0x380>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00a f8a5 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[7], "Pulse5", MAX_LABEL_CHARS);
 8001534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001538:	015b      	lsls	r3, r3, #5
 800153a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800153e:	4413      	add	r3, r2
 8001540:	3b74      	subs	r3, #116	; 0x74
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3369      	adds	r3, #105	; 0x69
 8001546:	220e      	movs	r2, #14
 8001548:	4959      	ldr	r1, [pc, #356]	; (80016b0 <main+0x384>)
 800154a:	4618      	mov	r0, r3
 800154c:	f00a f897 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[8], "Pulse6", MAX_LABEL_CHARS);
 8001550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800155a:	4413      	add	r3, r2
 800155c:	3b74      	subs	r3, #116	; 0x74
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3378      	adds	r3, #120	; 0x78
 8001562:	220e      	movs	r2, #14
 8001564:	4953      	ldr	r1, [pc, #332]	; (80016b4 <main+0x388>)
 8001566:	4618      	mov	r0, r3
 8001568:	f00a f889 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[9], "Pulse7", MAX_LABEL_CHARS);
 800156c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001576:	4413      	add	r3, r2
 8001578:	3b74      	subs	r3, #116	; 0x74
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3387      	adds	r3, #135	; 0x87
 800157e:	220e      	movs	r2, #14
 8001580:	494d      	ldr	r1, [pc, #308]	; (80016b8 <main+0x38c>)
 8001582:	4618      	mov	r0, r3
 8001584:	f00a f87b 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[10], "Pulse8", MAX_LABEL_CHARS);
 8001588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800158c:	015b      	lsls	r3, r3, #5
 800158e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001592:	4413      	add	r3, r2
 8001594:	3b74      	subs	r3, #116	; 0x74
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3396      	adds	r3, #150	; 0x96
 800159a:	220e      	movs	r2, #14
 800159c:	4947      	ldr	r1, [pc, #284]	; (80016bc <main+0x390>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f00a f86d 	bl	800b67e <strncpy>
        strncpy(knobs[i].sub_labels[11], "Pulse9", MAX_LABEL_CHARS);
 80015a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015ae:	4413      	add	r3, r2
 80015b0:	3b74      	subs	r3, #116	; 0x74
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	33a5      	adds	r3, #165	; 0xa5
 80015b6:	220e      	movs	r2, #14
 80015b8:	4941      	ldr	r1, [pc, #260]	; (80016c0 <main+0x394>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00a f85f 	bl	800b67e <strncpy>
    for (int i = 2; i < 4; i++) {
 80015c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015c4:	3301      	adds	r3, #1
 80015c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	f77f af36 	ble.w	8001440 <main+0x114>
    }

    knobs[0].sub_labels = malloc(sizeof(*knobs[0].sub_labels));
 80015d4:	200f      	movs	r0, #15
 80015d6:	f009 fe8d 	bl	800b2f4 <malloc>
 80015da:	4603      	mov	r3, r0
 80015dc:	617b      	str	r3, [r7, #20]
    strncpy(knobs[0].sub_labels[0], "Filter 1", MAX_LABEL_CHARS);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	220e      	movs	r2, #14
 80015e2:	4938      	ldr	r1, [pc, #224]	; (80016c4 <main+0x398>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f00a f84a 	bl	800b67e <strncpy>

    knobs[1].sub_labels = malloc(sizeof(*knobs[1].sub_labels));
 80015ea:	200f      	movs	r0, #15
 80015ec:	f009 fe82 	bl	800b2f4 <malloc>
 80015f0:	4603      	mov	r3, r0
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
    strncpy(knobs[1].sub_labels[0], "Filter 2", MAX_LABEL_CHARS);
 80015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f6:	220e      	movs	r2, #14
 80015f8:	4933      	ldr	r1, [pc, #204]	; (80016c8 <main+0x39c>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00a f83f 	bl	800b67e <strncpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001600:	f001 fb00 	bl	8002c04 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001604:	f000 f8de 	bl	80017c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 8001608:	f000 f9e0 	bl	80019cc <MX_RTC_Init>
  MX_GPIO_Init();
 800160c:	f000 fa34 	bl	8001a78 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001610:	f000 f95a 	bl	80018c8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001614:	f000 f9ac 	bl	8001970 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001618:	f008 ff90 	bl	800a53c <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 800161c:	f000 f9fc 	bl	8001a18 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001626:	e016      	b.n	8001656 <main+0x32a>
        ssd1306_Init(&hi2c1, &knobs[i]);
 8001628:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800162c:	463a      	mov	r2, r7
 800162e:	015b      	lsls	r3, r3, #5
 8001630:	4413      	add	r3, r2
 8001632:	4619      	mov	r1, r3
 8001634:	4825      	ldr	r0, [pc, #148]	; (80016cc <main+0x3a0>)
 8001636:	f000 fab9 	bl	8001bac <ssd1306_Init>
        ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 800163a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800163e:	463a      	mov	r2, r7
 8001640:	015b      	lsls	r3, r3, #5
 8001642:	4413      	add	r3, r2
 8001644:	4619      	mov	r1, r3
 8001646:	4821      	ldr	r0, [pc, #132]	; (80016cc <main+0x3a0>)
 8001648:	f000 fc30 	bl	8001eac <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 800164c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001650:	3301      	adds	r3, #1
 8001652:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001656:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800165a:	2b03      	cmp	r3, #3
 800165c:	d9e4      	bls.n	8001628 <main+0x2fc>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 800165e:	f001 fa27 	bl	8002ab0 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <main+0x3a4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <main+0x3a8>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	095b      	lsrs	r3, r3, #5
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fc92 	bl	8000f98 <SysTick_Config>
    SD_Disable();
 8001674:	f7ff fcd6 	bl	8001024 <SD_Disable>

        //    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
        //} else {
        //    HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);

        ADC_Read_Knobs();
 8001678:	f7ff fd1c 	bl	80010b4 <ADC_Read_Knobs>

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 800167c:	2300      	movs	r3, #0
 800167e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8001682:	e095      	b.n	80017b0 <main+0x484>
 8001684:	0800c014 	.word	0x0800c014
 8001688:	0800c024 	.word	0x0800c024
 800168c:	0800c034 	.word	0x0800c034
 8001690:	0800c044 	.word	0x0800c044
 8001694:	0800bf94 	.word	0x0800bf94
 8001698:	0800bfa0 	.word	0x0800bfa0
 800169c:	0800bfa8 	.word	0x0800bfa8
 80016a0:	0800bfb0 	.word	0x0800bfb0
 80016a4:	0800bfbc 	.word	0x0800bfbc
 80016a8:	0800bfc4 	.word	0x0800bfc4
 80016ac:	0800bfc8 	.word	0x0800bfc8
 80016b0:	0800bfd4 	.word	0x0800bfd4
 80016b4:	0800bfdc 	.word	0x0800bfdc
 80016b8:	0800bfe4 	.word	0x0800bfe4
 80016bc:	0800bfec 	.word	0x0800bfec
 80016c0:	0800bff4 	.word	0x0800bff4
 80016c4:	0800bffc 	.word	0x0800bffc
 80016c8:	0800c008 	.word	0x0800c008
 80016cc:	200021c8 	.word	0x200021c8
 80016d0:	20000048 	.word	0x20000048
 80016d4:	cccccccd 	.word	0xcccccccd
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 80016d8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016dc:	463a      	mov	r2, r7
 80016de:	015b      	lsls	r3, r3, #5
 80016e0:	441a      	add	r2, r3
 80016e2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80016e6:	4935      	ldr	r1, [pc, #212]	; (80017bc <main+0x490>)
 80016e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	4610      	mov	r0, r2
 80016f2:	f7ff fd7f 	bl	80011f4 <MIDI_Scale_And_Filter>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

            if (curr_MIDI_val != knobs[i].value) {
 80016fc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001700:	015b      	lsls	r3, r3, #5
 8001702:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001706:	4413      	add	r3, r2
 8001708:	3b6d      	subs	r3, #109	; 0x6d
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8001710:	429a      	cmp	r2, r3
 8001712:	d048      	beq.n	80017a6 <main+0x47a>
                knobs[i].value = curr_MIDI_val;
 8001714:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800171e:	4413      	add	r3, r2
 8001720:	3b6d      	subs	r3, #109	; 0x6d
 8001722:	f897 2081 	ldrb.w	r2, [r7, #129]	; 0x81
 8001726:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 8001728:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800172c:	463a      	mov	r2, r7
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	4413      	add	r3, r2
 8001732:	4619      	mov	r1, r3
 8001734:	4822      	ldr	r0, [pc, #136]	; (80017c0 <main+0x494>)
 8001736:	f000 fbb9 	bl	8001eac <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 800173a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800173e:	015b      	lsls	r3, r3, #5
 8001740:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001744:	4413      	add	r3, r2
 8001746:	3b6d      	subs	r3, #109	; 0x6d
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001754:	440b      	add	r3, r1
 8001756:	3b6e      	subs	r3, #110	; 0x6e
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d108      	bne.n	8001770 <main+0x444>
 800175e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001762:	015b      	lsls	r3, r3, #5
 8001764:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001768:	4413      	add	r3, r2
 800176a:	3b6a      	subs	r3, #106	; 0x6a
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 8001770:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001774:	015b      	lsls	r3, r3, #5
 8001776:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800177a:	4413      	add	r3, r2
 800177c:	3b6a      	subs	r3, #106	; 0x6a
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d110      	bne.n	80017a6 <main+0x47a>
 8001784:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001788:	463a      	mov	r2, r7
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	441a      	add	r2, r3
 800178e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001792:	015b      	lsls	r3, r3, #5
 8001794:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001798:	440b      	add	r3, r1
 800179a:	3b6d      	subs	r3, #109	; 0x6d
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7ff fd0b 	bl	80011bc <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80017a6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80017aa:	3301      	adds	r3, #1
 80017ac:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80017b0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d98f      	bls.n	80016d8 <main+0x3ac>
        ADC_Read_Knobs();
 80017b8:	e75e      	b.n	8001678 <main+0x34c>
 80017ba:	bf00      	nop
 80017bc:	200001d4 	.word	0x200001d4
 80017c0:	200021c8 	.word	0x200021c8

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09a      	sub	sp, #104	; 0x68
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ce:	2230      	movs	r2, #48	; 0x30
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f009 fda4 	bl	800b320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <SystemClock_Config+0xfc>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <SystemClock_Config+0xfc>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <SystemClock_Config+0xfc>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <SystemClock_Config+0x100>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <SystemClock_Config+0x100>)
 8001820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <SystemClock_Config+0x100>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001832:	2309      	movs	r3, #9
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800183c:	2301      	movs	r3, #1
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001840:	2302      	movs	r3, #2
 8001842:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001844:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001848:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 800184a:	2319      	movs	r3, #25
 800184c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800184e:	23c0      	movs	r3, #192	; 0xc0
 8001850:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001852:	2302      	movs	r3, #2
 8001854:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001856:	2304      	movs	r3, #4
 8001858:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800185e:	4618      	mov	r0, r3
 8001860:	f004 f898 	bl	8005994 <HAL_RCC_OscConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800186a:	f000 f983 	bl	8001b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186e:	230f      	movs	r3, #15
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001872:	2302      	movs	r3, #2
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	2103      	movs	r1, #3
 800188a:	4618      	mov	r0, r3
 800188c:	f004 fafa 	bl	8005e84 <HAL_RCC_ClockConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001896:	f000 f96d 	bl	8001b74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800189a:	2302      	movs	r3, #2
 800189c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800189e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 fca7 	bl	80061fc <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80018b4:	f000 f95e 	bl	8001b74 <Error_Handler>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3768      	adds	r7, #104	; 0x68
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40007000 	.word	0x40007000

080018c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <MX_ADC1_Init+0x9c>)
 80018dc:	4a22      	ldr	r2, [pc, #136]	; (8001968 <MX_ADC1_Init+0xa0>)
 80018de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_ADC1_Init+0x9c>)
 80018e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <MX_ADC1_Init+0x9c>)
 80018ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <MX_ADC1_Init+0x9c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_ADC1_Init+0x9c>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_ADC1_Init+0x9c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_ADC1_Init+0x9c>)
 8001906:	2200      	movs	r2, #0
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_ADC1_Init+0x9c>)
 800190c:	4a17      	ldr	r2, [pc, #92]	; (800196c <MX_ADC1_Init+0xa4>)
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_ADC1_Init+0x9c>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_ADC1_Init+0x9c>)
 8001918:	2201      	movs	r2, #1
 800191a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_ADC1_Init+0x9c>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_ADC1_Init+0x9c>)
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800192a:	480e      	ldr	r0, [pc, #56]	; (8001964 <MX_ADC1_Init+0x9c>)
 800192c:	f001 fa00 	bl	8002d30 <HAL_ADC_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001936:	f000 f91d 	bl	8001b74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800193e:	2301      	movs	r3, #1
 8001940:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	4619      	mov	r1, r3
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <MX_ADC1_Init+0x9c>)
 800194c:	f001 fbb4 	bl	80030b8 <HAL_ADC_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001956:	f000 f90d 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000221c 	.word	0x2000221c
 8001968:	40012000 	.word	0x40012000
 800196c:	0f000001 	.word	0x0f000001

08001970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001976:	4a13      	ldr	r2, [pc, #76]	; (80019c4 <MX_I2C1_Init+0x54>)
 8001978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 800000;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_I2C1_Init+0x50>)
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <MX_I2C1_Init+0x58>)
 800197e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_I2C1_Init+0x50>)
 800198e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <MX_I2C1_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_I2C1_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_I2C1_Init+0x50>)
 80019ae:	f002 f893 	bl	8003ad8 <HAL_I2C_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b8:	f000 f8dc 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200021c8 	.word	0x200021c8
 80019c4:	40005400 	.word	0x40005400
 80019c8:	000c3500 	.word	0x000c3500

080019cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_RTC_Init+0x44>)
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <MX_RTC_Init+0x48>)
 80019d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <MX_RTC_Init+0x44>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_RTC_Init+0x44>)
 80019de:	227f      	movs	r2, #127	; 0x7f
 80019e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <MX_RTC_Init+0x44>)
 80019e4:	22ff      	movs	r2, #255	; 0xff
 80019e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_RTC_Init+0x44>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_RTC_Init+0x44>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_RTC_Init+0x44>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_RTC_Init+0x44>)
 80019fc:	f004 fcee 	bl	80063dc <HAL_RTC_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001a06:	f000 f8b5 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20002264 	.word	0x20002264
 8001a14:	40002800 	.word	0x40002800

08001a18 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_SDIO_SD_Init+0x58>)
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <MX_SDIO_SD_Init+0x5c>)
 8001a20:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_SDIO_SD_Init+0x58>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_SDIO_SD_Init+0x58>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_SDIO_SD_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_SDIO_SD_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <MX_SDIO_SD_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_SDIO_SD_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001a46:	480a      	ldr	r0, [pc, #40]	; (8001a70 <MX_SDIO_SD_Init+0x58>)
 8001a48:	f004 fdad 	bl	80065a6 <HAL_SD_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8001a52:	f000 f88f 	bl	8001b74 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001a56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_SDIO_SD_Init+0x58>)
 8001a5c:	f004 fff6 	bl	8006a4c <HAL_SD_ConfigWideBusOperation>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001a66:	f000 f885 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20002284 	.word	0x20002284
 8001a74:	40012c00 	.word	0x40012c00

08001a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a25      	ldr	r2, [pc, #148]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <MX_GPIO_Init+0xec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001afe:	2200      	movs	r2, #0
 8001b00:	f247 710f 	movw	r1, #30479	; 0x770f
 8001b04:	4818      	ldr	r0, [pc, #96]	; (8001b68 <MX_GPIO_Init+0xf0>)
 8001b06:	f001 ffb3 	bl	8003a70 <HAL_GPIO_WritePin>
                          |LED_5_Pin|LED_6_Pin|AMUX_S1_Pin|AMUX_S0_Pin
                          |AMUX_S2_Pin|AMUX_S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button_6_Pin */
  GPIO_InitStruct.Pin = Button_6_Pin;
 8001b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4813      	ldr	r0, [pc, #76]	; (8001b6c <MX_GPIO_Init+0xf4>)
 8001b20:	f001 fe0a 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
                           Button_5_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin|Button_3_Pin|Button_4_Pin
 8001b24:	f248 43b0 	movw	r3, #33968	; 0x84b0
 8001b28:	617b      	str	r3, [r7, #20]
                          |Button_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_GPIO_Init+0xf8>)
 8001b3a:	f001 fdfd 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
                           AMUX_S2_Pin AMUX_S3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001b3e:	f247 730f 	movw	r3, #30479	; 0x770f
 8001b42:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin|LED_6_Pin|AMUX_S1_Pin|AMUX_S0_Pin
                          |AMUX_S2_Pin|AMUX_S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_GPIO_Init+0xf0>)
 8001b58:	f001 fdee 	bl	8003738 <HAL_GPIO_Init>

}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020000 	.word	0x40020000

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    __disable_irq();
    while (1) {
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>

08001b7e <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af04      	add	r7, sp, #16
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	1cfb      	adds	r3, r7, #3
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2178      	movs	r1, #120	; 0x78
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f002 f9dd 	bl	8003f5c <HAL_I2C_Mem_Write>
 8001ba2:	4603      	mov	r3, r0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001bb6:	2064      	movs	r0, #100	; 0x64
 8001bb8:	f001 f896 	bl	8002ce8 <HAL_Delay>
    int status = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(hi2c, k);
 8001bc0:	6839      	ldr	r1, [r7, #0]
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fc10 	bl	80023e8 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001bc8:	21ae      	movs	r1, #174	; 0xae
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffd7 	bl	8001b7e <ssd1306_WriteCommand>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001bda:	2120      	movs	r1, #32
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ffce 	bl	8001b7e <ssd1306_WriteCommand>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bec:	2110      	movs	r1, #16
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffc5 	bl	8001b7e <ssd1306_WriteCommand>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001bfe:	21b0      	movs	r1, #176	; 0xb0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffbc 	bl	8001b7e <ssd1306_WriteCommand>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8001c10:	21c8      	movs	r1, #200	; 0xc8
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffb3 	bl	8001b7e <ssd1306_WriteCommand>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8001c22:	2100      	movs	r1, #0
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ffaa 	bl	8001b7e <ssd1306_WriteCommand>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001c34:	2110      	movs	r1, #16
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa1 	bl	8001b7e <ssd1306_WriteCommand>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff98 	bl	8001b7e <ssd1306_WriteCommand>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001c58:	2181      	movs	r1, #129	; 0x81
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ff8f 	bl	8001b7e <ssd1306_WriteCommand>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 8001c6a:	2140      	movs	r1, #64	; 0x40
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff86 	bl	8001b7e <ssd1306_WriteCommand>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001c7c:	21a1      	movs	r1, #161	; 0xa1
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff7d 	bl	8001b7e <ssd1306_WriteCommand>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001c8e:	21a6      	movs	r1, #166	; 0xa6
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff74 	bl	8001b7e <ssd1306_WriteCommand>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8001ca0:	21a8      	movs	r1, #168	; 0xa8
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff6b 	bl	8001b7e <ssd1306_WriteCommand>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8001cb2:	213f      	movs	r1, #63	; 0x3f
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff62 	bl	8001b7e <ssd1306_WriteCommand>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001cc4:	21a4      	movs	r1, #164	; 0xa4
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff59 	bl	8001b7e <ssd1306_WriteCommand>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001cd6:	21d3      	movs	r1, #211	; 0xd3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff50 	bl	8001b7e <ssd1306_WriteCommand>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001ce8:	2100      	movs	r1, #0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff47 	bl	8001b7e <ssd1306_WriteCommand>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8001cfa:	21d5      	movs	r1, #213	; 0xd5
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff3e 	bl	8001b7e <ssd1306_WriteCommand>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8001d0c:	21f0      	movs	r1, #240	; 0xf0
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ff35 	bl	8001b7e <ssd1306_WriteCommand>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8001d1e:	21d9      	movs	r1, #217	; 0xd9
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff2c 	bl	8001b7e <ssd1306_WriteCommand>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8001d30:	2122      	movs	r1, #34	; 0x22
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ff23 	bl	8001b7e <ssd1306_WriteCommand>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8001d42:	21da      	movs	r1, #218	; 0xda
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff1a 	bl	8001b7e <ssd1306_WriteCommand>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001d54:	2112      	movs	r1, #18
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ff11 	bl	8001b7e <ssd1306_WriteCommand>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001d66:	21db      	movs	r1, #219	; 0xdb
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff08 	bl	8001b7e <ssd1306_WriteCommand>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001d78:	2120      	movs	r1, #32
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff feff 	bl	8001b7e <ssd1306_WriteCommand>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001d8a:	218d      	movs	r1, #141	; 0x8d
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fef6 	bl	8001b7e <ssd1306_WriteCommand>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001d9c:	2114      	movs	r1, #20
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff feed 	bl	8001b7e <ssd1306_WriteCommand>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001dae:	21af      	movs	r1, #175	; 0xaf
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fee4 	bl	8001b7e <ssd1306_WriteCommand>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <ssd1306_Init+0x21e>
        return 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e013      	b.n	8001df2 <ssd1306_Init+0x246>
    }

    ssd1306_Fill(Black);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f000 f818 	bl	8001e00 <ssd1306_Fill>
    ssd1306_AdjustBrightness(hi2c, 0x7F);
 8001dd0:	217f      	movs	r1, #127	; 0x7f
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fae0 	bl	8002398 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(hi2c);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f835 	bl	8001e48 <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <ssd1306_Init+0x250>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <ssd1306_Init+0x250>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <ssd1306_Init+0x250>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	715a      	strb	r2, [r3, #5]

    return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200005dc 	.word	0x200005dc

08001e00 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	e00d      	b.n	8001e2c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <ssd1306_Fill+0x1a>
 8001e16:	2100      	movs	r1, #0
 8001e18:	e000      	b.n	8001e1c <ssd1306_Fill+0x1c>
 8001e1a:	21ff      	movs	r1, #255	; 0xff
 8001e1c:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <ssd1306_Fill+0x44>)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	460a      	mov	r2, r1
 8001e24:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e32:	d3ed      	bcc.n	8001e10 <ssd1306_Fill+0x10>
    }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200001dc 	.word	0x200001dc

08001e48 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af04      	add	r7, sp, #16
 8001e4e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e020      	b.n	8001e98 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	3b50      	subs	r3, #80	; 0x50
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fe8d 	bl	8001b7e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001e64:	2100      	movs	r1, #0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fe89 	bl	8001b7e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fe85 	bl	8001b7e <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	01db      	lsls	r3, r3, #7
 8001e78:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <ssd1306_UpdateScreen+0x60>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	2264      	movs	r2, #100	; 0x64
 8001e7e:	9202      	str	r2, [sp, #8]
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	9201      	str	r2, [sp, #4]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2301      	movs	r3, #1
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	2178      	movs	r1, #120	; 0x78
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f002 f865 	bl	8003f5c <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	3301      	adds	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b07      	cmp	r3, #7
 8001e9c:	d9db      	bls.n	8001e56 <ssd1306_UpdateScreen+0xe>
    }
}
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200001dc 	.word	0x200001dc

08001eac <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b08f      	sub	sp, #60	; 0x3c
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
    ssd1306_Select(hi2c, k);
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fa95 	bl	80023e8 <ssd1306_Select>
    ssd1306_Fill(Black);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff ff9e 	bl	8001e00 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001ec4:	4b9e      	ldr	r3, [pc, #632]	; (8002140 <ssd1306_WriteKnob+0x294>)
 8001ec6:	f107 0418 	add.w	r4, r7, #24
 8001eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel + 1);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	7e1b      	ldrb	r3, [r3, #24]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001eda:	4a9a      	ldr	r2, [pc, #616]	; (8002144 <ssd1306_WriteKnob+0x298>)
 8001edc:	2103      	movs	r1, #3
 8001ede:	f009 fb57 	bl	800b590 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	7e5b      	ldrb	r3, [r3, #25]
 8001ee6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001eea:	4a97      	ldr	r2, [pc, #604]	; (8002148 <ssd1306_WriteKnob+0x29c>)
 8001eec:	2104      	movs	r1, #4
 8001eee:	f009 fb4f 	bl	800b590 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001ef2:	f107 0318 	add.w	r3, r7, #24
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe f972 	bl	80001e0 <strlen>
 8001efc:	4604      	mov	r4, r0
 8001efe:	68b8      	ldr	r0, [r7, #8]
 8001f00:	f000 faaa 	bl	8002458 <update_init_indicator>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f107 0018 	add.w	r0, r7, #24
 8001f0a:	4a90      	ldr	r2, [pc, #576]	; (800214c <ssd1306_WriteKnob+0x2a0>)
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	f009 fb3f 	bl	800b590 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) KnobMap(k, k->value, k->max_range));
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	7ed9      	ldrb	r1, [r3, #27]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	7f5b      	ldrb	r3, [r3, #29]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68b8      	ldr	r0, [r7, #8]
 8001f1e:	f7fe fff9 	bl	8000f14 <KnobMap>
 8001f22:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8001f24:	f107 0014 	add.w	r0, r7, #20
 8001f28:	4a87      	ldr	r2, [pc, #540]	; (8002148 <ssd1306_WriteKnob+0x29c>)
 8001f2a:	2104      	movs	r1, #4
 8001f2c:	f009 fb30 	bl	800b590 <sniprintf>

    ssd1306_SetCursor(0, 0);
 8001f30:	2100      	movs	r1, #0
 8001f32:	2000      	movs	r0, #0
 8001f34:	f000 fa18 	bl	8002368 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8001f38:	4a85      	ldr	r2, [pc, #532]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001f3a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f3e:	2301      	movs	r3, #1
 8001f40:	ca06      	ldmia	r2, {r1, r2}
 8001f42:	f000 f9eb 	bl	800231c <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8001f46:	4b82      	ldr	r3, [pc, #520]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	4619      	mov	r1, r3
 8001f50:	2000      	movs	r0, #0
 8001f52:	f000 fa09 	bl	8002368 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8001f56:	4a7e      	ldr	r2, [pc, #504]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001f58:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	ca06      	ldmia	r2, {r1, r2}
 8001f60:	f000 f9dc 	bl	800231c <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe f939 	bl	80001e0 <strlen>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a77      	ldr	r2, [pc, #476]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	b2d8      	uxtb	r0, r3
 8001f80:	4b73      	ldr	r3, [pc, #460]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	3301      	adds	r3, #1
 8001f86:	0fda      	lsrs	r2, r3, #31
 8001f88:	4413      	add	r3, r2
 8001f8a:	105b      	asrs	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f000 f9ea 	bl	8002368 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8001f94:	4a6e      	ldr	r2, [pc, #440]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001f96:	f107 0018 	add.w	r0, r7, #24
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	ca06      	ldmia	r2, {r1, r2}
 8001f9e:	f000 f9bd 	bl	800231c <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 8001fa2:	4b6b      	ldr	r3, [pc, #428]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	f1c3 0320 	rsb	r3, r3, #32
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b2d8      	uxtb	r0, r3
 8001fb4:	4b66      	ldr	r3, [pc, #408]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001fb6:	785b      	ldrb	r3, [r3, #1]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	0fda      	lsrs	r2, r3, #31
 8001fbc:	4413      	add	r3, r2
 8001fbe:	105b      	asrs	r3, r3, #1
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f000 f9d0 	bl	8002368 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8001fc8:	4a61      	ldr	r2, [pc, #388]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001fca:	f107 0014 	add.w	r0, r7, #20
 8001fce:	2301      	movs	r3, #1
 8001fd0:	ca06      	ldmia	r2, {r1, r2}
 8001fd2:	f000 f9a3 	bl	800231c <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001fdc:	e013      	b.n	8002006 <ssd1306_WriteKnob+0x15a>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 8001fde:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <ssd1306_WriteKnob+0x2a8>)
 8001fe0:	885b      	ldrh	r3, [r3, #2]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	4413      	add	r3, r2
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3304      	adds	r3, #4
 8001fee:	b2d9      	uxtb	r1, r3
 8001ff0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f8b0 	bl	800215c <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8001ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002000:	3301      	adds	r3, #1
 8002002:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002006:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800200a:	2b00      	cmp	r3, #0
 800200c:	dae7      	bge.n	8001fde <ssd1306_WriteKnob+0x132>
    }

    uint8_t len_label = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint8_t x = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t y = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 8002020:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <ssd1306_WriteKnob+0x2a4>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	f1c3 0320 	rsb	r3, r3, #32
 8002028:	b2db      	uxtb	r3, r3
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    // Draw main label
    len_label = strlen(k->label);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3302      	adds	r3, #2
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe f8d3 	bl	80001e0 <strlen>
 800203a:	4603      	mov	r3, r0
 800203c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8002040:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002044:	4a44      	ldr	r2, [pc, #272]	; (8002158 <ssd1306_WriteKnob+0x2ac>)
 8002046:	7812      	ldrb	r2, [r2, #0]
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002050:	0fda      	lsrs	r2, r3, #31
 8002052:	4413      	add	r3, r2
 8002054:	105b      	asrs	r3, r3, #1
 8002056:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 800205a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002066:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800206a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <ssd1306_WriteKnob+0x2ac>)
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	b2db      	uxtb	r3, r3
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002086:	edc7 7a01 	vstr	s15, [r7, #4]
 800208a:	793b      	ldrb	r3, [r7, #4]
 800208c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    ssd1306_SetCursor(x, y);
 8002090:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002094:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f964 	bl	8002368 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1c98      	adds	r0, r3, #2
 80020a4:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <ssd1306_WriteKnob+0x2ac>)
 80020a6:	2301      	movs	r3, #1
 80020a8:	ca06      	ldmia	r2, {r1, r2}
 80020aa:	f000 f937 	bl	800231c <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	7f1b      	ldrb	r3, [r3, #28]
 80020b2:	b25b      	sxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db02      	blt.n	80020be <ssd1306_WriteKnob+0x212>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	7edb      	ldrb	r3, [r3, #27]
 80020bc:	e000      	b.n	80020c0 <ssd1306_WriteKnob+0x214>
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    len_label = strlen(k->sub_labels[sl_index]);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	6959      	ldr	r1, [r3, #20]
 80020c8:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80020cc:	4613      	mov	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe f883 	bl	80001e0 <strlen>
 80020da:	4603      	mov	r3, r0
 80020dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 80020e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80020e4:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <ssd1306_WriteKnob+0x2ac>)
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80020f0:	0fda      	lsrs	r2, r3, #31
 80020f2:	4413      	add	r3, r2
 80020f4:	105b      	asrs	r3, r3, #1
 80020f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <ssd1306_WriteKnob+0x2ac>)
 80020fc:	785b      	ldrb	r3, [r3, #1]
 80020fe:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002102:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    ssd1306_SetCursor(x, y);
 8002106:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800210a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f000 f929 	bl	8002368 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	6959      	ldr	r1, [r3, #20]
 800211a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	18c8      	adds	r0, r1, r3
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <ssd1306_WriteKnob+0x2ac>)
 8002128:	2301      	movs	r3, #1
 800212a:	ca06      	ldmia	r2, {r1, r2}
 800212c:	f000 f8f6 	bl	800231c <ssd1306_WriteString>

    ssd1306_UpdateScreen(hi2c);
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff fe89 	bl	8001e48 <ssd1306_UpdateScreen>
}
 8002136:	bf00      	nop
 8002138:	373c      	adds	r7, #60	; 0x3c
 800213a:	46bd      	mov	sp, r7
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	bf00      	nop
 8002140:	0800c068 	.word	0x0800c068
 8002144:	0800c054 	.word	0x0800c054
 8002148:	0800c05c 	.word	0x0800c05c
 800214c:	0800c064 	.word	0x0800c064
 8002150:	20000000 	.word	0x20000000
 8002154:	200005dc 	.word	0x200005dc
 8002158:	20000008 	.word	0x20000008

0800215c <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	460b      	mov	r3, r1
 8002168:	71bb      	strb	r3, [r7, #6]
 800216a:	4613      	mov	r3, r2
 800216c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db48      	blt.n	8002208 <ssd1306_DrawPixel+0xac>
 8002176:	79bb      	ldrb	r3, [r7, #6]
 8002178:	2b3f      	cmp	r3, #63	; 0x3f
 800217a:	d845      	bhi.n	8002208 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <ssd1306_DrawPixel+0xb8>)
 800217e:	791b      	ldrb	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8002184:	797b      	ldrb	r3, [r7, #5]
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 8002192:	797b      	ldrb	r3, [r7, #5]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d11a      	bne.n	80021ce <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002198:	79fa      	ldrb	r2, [r7, #7]
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	4603      	mov	r3, r0
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	4413      	add	r3, r2
 80021a6:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <ssd1306_DrawPixel+0xbc>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	79bb      	ldrb	r3, [r7, #6]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	4313      	orrs	r3, r2
 80021bc:	b259      	sxtb	r1, r3
 80021be:	79fa      	ldrb	r2, [r7, #7]
 80021c0:	4603      	mov	r3, r0
 80021c2:	01db      	lsls	r3, r3, #7
 80021c4:	4413      	add	r3, r2
 80021c6:	b2c9      	uxtb	r1, r1
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <ssd1306_DrawPixel+0xbc>)
 80021ca:	54d1      	strb	r1, [r2, r3]
 80021cc:	e01d      	b.n	800220a <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021ce:	79fa      	ldrb	r2, [r7, #7]
 80021d0:	79bb      	ldrb	r3, [r7, #6]
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	b2d8      	uxtb	r0, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	01db      	lsls	r3, r3, #7
 80021da:	4413      	add	r3, r2
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <ssd1306_DrawPixel+0xbc>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	b25a      	sxtb	r2, r3
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	b25b      	sxtb	r3, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	4013      	ands	r3, r2
 80021f6:	b259      	sxtb	r1, r3
 80021f8:	79fa      	ldrb	r2, [r7, #7]
 80021fa:	4603      	mov	r3, r0
 80021fc:	01db      	lsls	r3, r3, #7
 80021fe:	4413      	add	r3, r2
 8002200:	b2c9      	uxtb	r1, r1
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <ssd1306_DrawPixel+0xbc>)
 8002204:	54d1      	strb	r1, [r2, r3]
 8002206:	e000      	b.n	800220a <ssd1306_DrawPixel+0xae>
        return;
 8002208:	bf00      	nop
    }
}
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	200005dc 	.word	0x200005dc
 8002218:	200001dc 	.word	0x200001dc

0800221c <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	4604      	mov	r4, r0
 8002224:	1d38      	adds	r0, r7, #4
 8002226:	e880 0006 	stmia.w	r0, {r1, r2}
 800222a:	461a      	mov	r2, r3
 800222c:	4623      	mov	r3, r4
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	4613      	mov	r3, r2
 8002232:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002234:	4b38      	ldr	r3, [pc, #224]	; (8002318 <ssd1306_WriteChar+0xfc>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	793b      	ldrb	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	2b7f      	cmp	r3, #127	; 0x7f
 8002240:	dc06      	bgt.n	8002250 <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <ssd1306_WriteChar+0xfc>)
 8002244:	885b      	ldrh	r3, [r3, #2]
 8002246:	461a      	mov	r2, r3
 8002248:	797b      	ldrb	r3, [r7, #5]
 800224a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800224c:	2b3f      	cmp	r3, #63	; 0x3f
 800224e:	dd01      	ble.n	8002254 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8002250:	2300      	movs	r3, #0
 8002252:	e05d      	b.n	8002310 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
 8002258:	e04c      	b.n	80022f4 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3b20      	subs	r3, #32
 8002260:	7979      	ldrb	r1, [r7, #5]
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4619      	mov	r1, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	440b      	add	r3, r1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	e034      	b.n	80022e4 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d012      	beq.n	80022b0 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <ssd1306_WriteChar+0xfc>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4413      	add	r3, r2
 8002296:	b2d8      	uxtb	r0, r3
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <ssd1306_WriteChar+0xfc>)
 800229a:	885b      	ldrh	r3, [r3, #2]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	7bba      	ldrb	r2, [r7, #14]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7ff ff57 	bl	800215c <ssd1306_DrawPixel>
 80022ae:	e016      	b.n	80022de <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <ssd1306_WriteChar+0xfc>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	b2d8      	uxtb	r0, r3
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <ssd1306_WriteChar+0xfc>)
 80022c0:	885b      	ldrh	r3, [r3, #2]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	b2d9      	uxtb	r1, r3
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	f7ff ff3f 	bl	800215c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	3301      	adds	r3, #1
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	793b      	ldrb	r3, [r7, #4]
 80022e6:	461a      	mov	r2, r3
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d3c5      	bcc.n	800227a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	797b      	ldrb	r3, [r7, #5]
 80022f6:	461a      	mov	r2, r3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d3ad      	bcc.n	800225a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <ssd1306_WriteChar+0xfc>)
 8002300:	881a      	ldrh	r2, [r3, #0]
 8002302:	793b      	ldrb	r3, [r7, #4]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4413      	add	r3, r2
 8002308:	b29a      	uxth	r2, r3
 800230a:	4b03      	ldr	r3, [pc, #12]	; (8002318 <ssd1306_WriteChar+0xfc>)
 800230c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3724      	adds	r7, #36	; 0x24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	200005dc 	.word	0x200005dc

0800231c <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	1d38      	adds	r0, r7, #4
 8002326:	e880 0006 	stmia.w	r0, {r1, r2}
 800232a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800232c:	e012      	b.n	8002354 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	7818      	ldrb	r0, [r3, #0]
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	1d3a      	adds	r2, r7, #4
 8002336:	ca06      	ldmia	r2, {r1, r2}
 8002338:	f7ff ff70 	bl	800221c <ssd1306_WriteChar>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d002      	beq.n	800234e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	e008      	b.n	8002360 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3301      	adds	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e8      	bne.n	800232e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	781b      	ldrb	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	460a      	mov	r2, r1
 8002372:	71fb      	strb	r3, [r7, #7]
 8002374:	4613      	mov	r3, r2
 8002376:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	b29a      	uxth	r2, r3
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <ssd1306_SetCursor+0x2c>)
 800237e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002380:	79bb      	ldrb	r3, [r7, #6]
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <ssd1306_SetCursor+0x2c>)
 8002386:	805a      	strh	r2, [r3, #2]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	200005dc 	.word	0x200005dc

08002398 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(I2C_HandleTypeDef *hi2c, uint8_t brightness) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af04      	add	r7, sp, #16
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
    uint8_t contrast_cmd = 0x81;
 80023a4:	2381      	movs	r3, #129	; 0x81
 80023a6:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 80023ac:	230a      	movs	r3, #10
 80023ae:	9302      	str	r3, [sp, #8]
 80023b0:	2301      	movs	r3, #1
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	f107 030f 	add.w	r3, r7, #15
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2301      	movs	r3, #1
 80023bc:	2200      	movs	r2, #0
 80023be:	2178      	movs	r1, #120	; 0x78
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f001 fdcb 	bl	8003f5c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 80023c6:	230a      	movs	r3, #10
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	2301      	movs	r3, #1
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	f107 030e 	add.w	r3, r7, #14
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2301      	movs	r3, #1
 80023d6:	2200      	movs	r2, #0
 80023d8:	2178      	movs	r1, #120	; 0x78
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f001 fdbe 	bl	8003f5c <HAL_I2C_Mem_Write>
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <ssd1306_Select>:

// Select a display
void ssd1306_Select(I2C_HandleTypeDef *hi2c, Knob *k) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
    i2c_Select(hi2c, I2C_MUX_MASTER_ADDR, k->row);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	21e2      	movs	r1, #226	; 0xe2
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f80b 	bl	8002416 <i2c_Select>
    i2c_Select(hi2c, I2C_MUX_SLAVE_ADDR, k->col);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	461a      	mov	r2, r3
 8002406:	21e0      	movs	r1, #224	; 0xe0
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f804 	bl	8002416 <i2c_Select>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(I2C_HandleTypeDef *hi2c, uint8_t mux_addr, uint8_t i) {
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af02      	add	r7, sp, #8
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
 8002422:	4613      	mov	r3, r2
 8002424:	70bb      	strb	r3, [r7, #2]
    if (i > 7) return;
 8002426:	78bb      	ldrb	r3, [r7, #2]
 8002428:	2b07      	cmp	r3, #7
 800242a:	d810      	bhi.n	800244e <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 800242c:	78bb      	ldrb	r3, [r7, #2]
 800242e:	2201      	movs	r2, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(hi2c, mux_addr, temp, 1, 100);
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	b299      	uxth	r1, r3
 800243c:	f107 020c 	add.w	r2, r7, #12
 8002440:	2364      	movs	r3, #100	; 0x64
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f001 fc8a 	bl	8003d60 <HAL_I2C_Master_Transmit>
 800244c:	e000      	b.n	8002450 <i2c_Select+0x3a>
    if (i > 7) return;
 800244e:	bf00      	nop
}
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
    int8_t init_diff = KnobMap(k, k->init_value, MIDI_MAX) - KnobMap(k, k->value, MIDI_MAX);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7e9b      	ldrb	r3, [r3, #26]
 8002464:	227f      	movs	r2, #127	; 0x7f
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fe fd53 	bl	8000f14 <KnobMap>
 800246e:	4603      	mov	r3, r0
 8002470:	461c      	mov	r4, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7edb      	ldrb	r3, [r3, #27]
 8002476:	227f      	movs	r2, #127	; 0x7f
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe fd4a 	bl	8000f14 <KnobMap>
 8002480:	4603      	mov	r3, r0
 8002482:	1ae3      	subs	r3, r4, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 8002488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248c:	2b00      	cmp	r3, #0
 800248e:	bfb8      	it	lt
 8002490:	425b      	neglt	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800249c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002588 <update_init_indicator+0x130>
 80024a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800258c <update_init_indicator+0x134>
 80024a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b0:	edc7 7a00 	vstr	s15, [r7]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 80024b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <update_init_indicator+0x6c>
 80024c0:	4b33      	ldr	r3, [pc, #204]	; (8002590 <update_init_indicator+0x138>)
 80024c2:	e05c      	b.n	800257e <update_init_indicator+0x126>

    if (init_pct < 15) {
 80024c4:	7bbb      	ldrb	r3, [r7, #14]
 80024c6:	2b0e      	cmp	r3, #14
 80024c8:	d807      	bhi.n	80024da <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	dd01      	ble.n	80024d6 <update_init_indicator+0x7e>
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <update_init_indicator+0x13c>)
 80024d4:	e053      	b.n	800257e <update_init_indicator+0x126>
        else return "        <      ";
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <update_init_indicator+0x140>)
 80024d8:	e051      	b.n	800257e <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 80024da:	7bbb      	ldrb	r3, [r7, #14]
 80024dc:	2b0e      	cmp	r3, #14
 80024de:	d90a      	bls.n	80024f6 <update_init_indicator+0x9e>
 80024e0:	7bbb      	ldrb	r3, [r7, #14]
 80024e2:	2b1d      	cmp	r3, #29
 80024e4:	d807      	bhi.n	80024f6 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	dd01      	ble.n	80024f2 <update_init_indicator+0x9a>
 80024ee:	4b2b      	ldr	r3, [pc, #172]	; (800259c <update_init_indicator+0x144>)
 80024f0:	e045      	b.n	800257e <update_init_indicator+0x126>
        else return "        <<     ";
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <update_init_indicator+0x148>)
 80024f4:	e043      	b.n	800257e <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
 80024f8:	2b1d      	cmp	r3, #29
 80024fa:	d90a      	bls.n	8002512 <update_init_indicator+0xba>
 80024fc:	7bbb      	ldrb	r3, [r7, #14]
 80024fe:	2b2c      	cmp	r3, #44	; 0x2c
 8002500:	d807      	bhi.n	8002512 <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	dd01      	ble.n	800250e <update_init_indicator+0xb6>
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <update_init_indicator+0x14c>)
 800250c:	e037      	b.n	800257e <update_init_indicator+0x126>
        else return "        <<<    ";
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <update_init_indicator+0x150>)
 8002510:	e035      	b.n	800257e <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 8002512:	7bbb      	ldrb	r3, [r7, #14]
 8002514:	2b2c      	cmp	r3, #44	; 0x2c
 8002516:	d90a      	bls.n	800252e <update_init_indicator+0xd6>
 8002518:	7bbb      	ldrb	r3, [r7, #14]
 800251a:	2b3c      	cmp	r3, #60	; 0x3c
 800251c:	d807      	bhi.n	800252e <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	dd01      	ble.n	800252a <update_init_indicator+0xd2>
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <update_init_indicator+0x154>)
 8002528:	e029      	b.n	800257e <update_init_indicator+0x126>
        else return "        <<<<   ";
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <update_init_indicator+0x158>)
 800252c:	e027      	b.n	800257e <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 800252e:	7bbb      	ldrb	r3, [r7, #14]
 8002530:	2b3c      	cmp	r3, #60	; 0x3c
 8002532:	d90a      	bls.n	800254a <update_init_indicator+0xf2>
 8002534:	7bbb      	ldrb	r3, [r7, #14]
 8002536:	2b4c      	cmp	r3, #76	; 0x4c
 8002538:	d807      	bhi.n	800254a <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	dd01      	ble.n	8002546 <update_init_indicator+0xee>
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <update_init_indicator+0x15c>)
 8002544:	e01b      	b.n	800257e <update_init_indicator+0x126>
        else return "        <<<<<  ";
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <update_init_indicator+0x160>)
 8002548:	e019      	b.n	800257e <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	2b4c      	cmp	r3, #76	; 0x4c
 800254e:	d90a      	bls.n	8002566 <update_init_indicator+0x10e>
 8002550:	7bbb      	ldrb	r3, [r7, #14]
 8002552:	2b5c      	cmp	r3, #92	; 0x5c
 8002554:	d807      	bhi.n	8002566 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	dd01      	ble.n	8002562 <update_init_indicator+0x10a>
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <update_init_indicator+0x164>)
 8002560:	e00d      	b.n	800257e <update_init_indicator+0x126>
        else return "        <<<<<< ";
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <update_init_indicator+0x168>)
 8002564:	e00b      	b.n	800257e <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	2b5c      	cmp	r3, #92	; 0x5c
 800256a:	d907      	bls.n	800257c <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 800256c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	dd01      	ble.n	8002578 <update_init_indicator+0x120>
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <update_init_indicator+0x16c>)
 8002576:	e002      	b.n	800257e <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <update_init_indicator+0x170>)
 800257a:	e000      	b.n	800257e <update_init_indicator+0x126>
    } else {
        return " ";
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <update_init_indicator+0x174>)
    }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	bf00      	nop
 8002588:	42fe0000 	.word	0x42fe0000
 800258c:	42c80000 	.word	0x42c80000
 8002590:	0800c068 	.word	0x0800c068
 8002594:	0800c078 	.word	0x0800c078
 8002598:	0800c088 	.word	0x0800c088
 800259c:	0800c098 	.word	0x0800c098
 80025a0:	0800c0a8 	.word	0x0800c0a8
 80025a4:	0800c0b8 	.word	0x0800c0b8
 80025a8:	0800c0c8 	.word	0x0800c0c8
 80025ac:	0800c0d8 	.word	0x0800c0d8
 80025b0:	0800c0e8 	.word	0x0800c0e8
 80025b4:	0800c0f8 	.word	0x0800c0f8
 80025b8:	0800c108 	.word	0x0800c108
 80025bc:	0800c118 	.word	0x0800c118
 80025c0:	0800c128 	.word	0x0800c128
 80025c4:	0800c138 	.word	0x0800c138
 80025c8:	0800c148 	.word	0x0800c148
 80025cc:	0800c158 	.word	0x0800c158

080025d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_MspInit+0x4c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	4a0f      	ldr	r2, [pc, #60]	; (800261c <HAL_MspInit+0x4c>)
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <HAL_MspInit+0x4c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_MspInit+0x4c>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_MspInit+0x4c>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_MspInit+0x4c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800

08002620 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a17      	ldr	r2, [pc, #92]	; (800269c <HAL_ADC_MspInit+0x7c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d127      	bne.n	8002692 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_ADC_MspInit+0x80>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <HAL_ADC_MspInit+0x80>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6453      	str	r3, [r2, #68]	; 0x44
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_ADC_MspInit+0x80>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_ADC_MspInit+0x80>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <HAL_ADC_MspInit+0x80>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_ADC_MspInit+0x80>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800267a:	230f      	movs	r3, #15
 800267c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800267e:	2303      	movs	r3, #3
 8002680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <HAL_ADC_MspInit+0x84>)
 800268e:	f001 f853 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	; 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40012000 	.word	0x40012000
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020000 	.word	0x40020000

080026a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_I2C_MspInit+0x84>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d12b      	bne.n	8002722 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_I2C_MspInit+0x88>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_I2C_MspInit+0x88>)
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_I2C_MspInit+0x88>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026e6:	23c0      	movs	r3, #192	; 0xc0
 80026e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ea:	2312      	movs	r3, #18
 80026ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ee:	2301      	movs	r3, #1
 80026f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f2:	2303      	movs	r3, #3
 80026f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026f6:	2304      	movs	r3, #4
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	4619      	mov	r1, r3
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <HAL_I2C_MspInit+0x8c>)
 8002702:	f001 f819 	bl	8003738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_I2C_MspInit+0x88>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a08      	ldr	r2, [pc, #32]	; (8002730 <HAL_I2C_MspInit+0x88>)
 8002710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_I2C_MspInit+0x88>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002722:	bf00      	nop
 8002724:	3728      	adds	r7, #40	; 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40005400 	.word	0x40005400
 8002730:	40023800 	.word	0x40023800
 8002734:	40020400 	.word	0x40020400

08002738 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a05      	ldr	r2, [pc, #20]	; (800275c <HAL_RTC_MspInit+0x24>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d102      	bne.n	8002750 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RTC_MspInit+0x28>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40002800 	.word	0x40002800
 8002760:	42470e3c 	.word	0x42470e3c

08002764 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a29      	ldr	r2, [pc, #164]	; (8002828 <HAL_SD_MspInit+0xc4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d14b      	bne.n	800281e <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_SD_MspInit+0xc8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a27      	ldr	r2, [pc, #156]	; (800282c <HAL_SD_MspInit+0xc8>)
 8002790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_SD_MspInit+0xc8>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_SD_MspInit+0xc8>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_SD_MspInit+0xc8>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_SD_MspInit+0xc8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_SD_MspInit+0xc8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_SD_MspInit+0xc8>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <HAL_SD_MspInit+0xc8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80027da:	f44f 7350 	mov.w	r3, #832	; 0x340
 80027de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80027ec:	230c      	movs	r3, #12
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4619      	mov	r1, r3
 80027f6:	480e      	ldr	r0, [pc, #56]	; (8002830 <HAL_SD_MspInit+0xcc>)
 80027f8:	f000 ff9e 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 80027fc:	f248 0330 	movw	r3, #32816	; 0x8030
 8002800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800280e:	230c      	movs	r3, #12
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	4806      	ldr	r0, [pc, #24]	; (8002834 <HAL_SD_MspInit+0xd0>)
 800281a:	f000 ff8d 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800281e:	bf00      	nop
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40012c00 	.word	0x40012c00
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000
 8002834:	40020400 	.word	0x40020400

08002838 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 800283c:	e7fe      	b.n	800283c <NMI_Handler+0x4>

0800283e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8002842:	e7fe      	b.n	8002842 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8002848:	e7fe      	b.n	8002848 <MemManage_Handler+0x4>

0800284a <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 800284e:	e7fe      	b.n	800284e <BusFault_Handler+0x4>

08002850 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8002854:	e7fe      	b.n	8002854 <UsageFault_Handler+0x4>

08002856 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	e039      	b.n	8002900 <SysTick_Handler+0x80>
        GPIO_TypeDef *t = (i == NUM_BUTTONS - 1) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b05      	cmp	r3, #5
 8002890:	d101      	bne.n	8002896 <SysTick_Handler+0x16>
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <SysTick_Handler+0x94>)
 8002894:	e000      	b.n	8002898 <SysTick_Handler+0x18>
 8002896:	4b20      	ldr	r3, [pc, #128]	; (8002918 <SysTick_Handler+0x98>)
 8002898:	60bb      	str	r3, [r7, #8]
        uint8_t reading = HAL_GPIO_ReadPin(t, btnPins[i]);
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <SysTick_Handler+0x9c>)
 800289e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a2:	4619      	mov	r1, r3
 80028a4:	68b8      	ldr	r0, [r7, #8]
 80028a6:	f001 f8cb 	bl	8003a40 <HAL_GPIO_ReadPin>
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <SysTick_Handler+0xa0>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	79fa      	ldrb	r2, [r7, #7]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d11b      	bne.n	80028f2 <SysTick_Handler+0x72>
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <SysTick_Handler+0xa4>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	79fa      	ldrb	r2, [r7, #7]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d015      	beq.n	80028f2 <SysTick_Handler+0x72>
            btnStates[i] = reading;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	4916      	ldr	r1, [pc, #88]	; (8002924 <SysTick_Handler+0xa4>)
 80028ca:	79fa      	ldrb	r2, [r7, #7]
 80028cc:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <SysTick_Handler+0xa4>)
 80028d2:	5cd3      	ldrb	r3, [r2, r3]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10c      	bne.n	80028f2 <SysTick_Handler+0x72>
                if (i == NUM_BUTTONS - 1) {
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b05      	cmp	r3, #5
 80028dc:	d101      	bne.n	80028e2 <SysTick_Handler+0x62>
                    SD_Toggle();
 80028de:	f7fe fb7d 	bl	8000fdc <SD_Toggle>
                }
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	4a10      	ldr	r2, [pc, #64]	; (8002928 <SysTick_Handler+0xa8>)
 80028e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028ea:	4619      	mov	r1, r3
 80028ec:	480f      	ldr	r0, [pc, #60]	; (800292c <SysTick_Handler+0xac>)
 80028ee:	f001 f8d8 	bl	8003aa2 <HAL_GPIO_TogglePin>
            }
        }

        btnStatesLast[i] = reading;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	490a      	ldr	r1, [pc, #40]	; (8002920 <SysTick_Handler+0xa0>)
 80028f6:	79fa      	ldrb	r2, [r7, #7]
 80028f8:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	3301      	adds	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b05      	cmp	r3, #5
 8002904:	d9c2      	bls.n	800288c <SysTick_Handler+0xc>
    }
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002906:	f000 f9cf 	bl	8002ca8 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40020800 	.word	0x40020800
 8002918:	40020000 	.word	0x40020000
 800291c:	20000030 	.word	0x20000030
 8002920:	20000028 	.word	0x20000028
 8002924:	20000020 	.word	0x20000020
 8002928:	2000003c 	.word	0x2000003c
 800292c:	40020400 	.word	0x40020400

08002930 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <OTG_FS_IRQHandler+0x10>)
 8002936:	f001 fffa 	bl	800492e <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200027dc 	.word	0x200027dc

08002944 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e00a      	b.n	800296c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002956:	f3af 8000 	nop.w
 800295a:	4601      	mov	r1, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	60ba      	str	r2, [r7, #8]
 8002962:	b2ca      	uxtb	r2, r1
 8002964:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf0      	blt.n	8002956 <_read+0x12>
	}

return len;
 8002974:	687b      	ldr	r3, [r7, #4]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e009      	b.n	80029a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	60ba      	str	r2, [r7, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dbf1      	blt.n	8002990 <_write+0x12>
	}
	return len;
 80029ac:	687b      	ldr	r3, [r7, #4]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_close>:

int _close(int file)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
	return -1;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029de:	605a      	str	r2, [r3, #4]
	return 0;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_isatty>:

int _isatty(int file)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
	return 1;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <_sbrk+0x5c>)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <_sbrk+0x60>)
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <_sbrk+0x64>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <_sbrk+0x68>)
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a50:	f008 fa06 	bl	800ae60 <__errno>
 8002a54:	4603      	mov	r3, r0
 8002a56:	220c      	movs	r2, #12
 8002a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e009      	b.n	8002a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <_sbrk+0x64>)
 8002a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20020000 	.word	0x20020000
 8002a80:	00000400 	.word	0x00000400
 8002a84:	200005e4 	.word	0x200005e4
 8002a88:	20002bf8 	.word	0x20002bf8

08002a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <SystemInit+0x20>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <SystemInit+0x20>)
 8002a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	2302      	movs	r3, #2
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002aca:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d011      	beq.n	8002afe <SystemCoreClockUpdate+0x4e>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d844      	bhi.n	8002b6a <SystemCoreClockUpdate+0xba>
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <SystemCoreClockUpdate+0x3e>
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d004      	beq.n	8002af6 <SystemCoreClockUpdate+0x46>
 8002aec:	e03d      	b.n	8002b6a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002aee:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002af0:	4a2c      	ldr	r2, [pc, #176]	; (8002ba4 <SystemCoreClockUpdate+0xf4>)
 8002af2:	601a      	str	r2, [r3, #0]
      break;
 8002af4:	e03d      	b.n	8002b72 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002af6:	4b2a      	ldr	r3, [pc, #168]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002af8:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <SystemCoreClockUpdate+0xf8>)
 8002afa:	601a      	str	r2, [r3, #0]
      break;
 8002afc:	e039      	b.n	8002b72 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002afe:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	0d9b      	lsrs	r3, r3, #22
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b12:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <SystemCoreClockUpdate+0xf8>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b24:	6852      	ldr	r2, [r2, #4]
 8002b26:	0992      	lsrs	r2, r2, #6
 8002b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e00b      	b.n	8002b4c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <SystemCoreClockUpdate+0xf4>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b3e:	6852      	ldr	r2, [r2, #4]
 8002b40:	0992      	lsrs	r2, r2, #6
 8002b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002b66:	6013      	str	r3, [r2, #0]
      break;
 8002b68:	e003      	b.n	8002b72 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <SystemCoreClockUpdate+0xf4>)
 8002b6e:	601a      	str	r2, [r3, #0]
      break;
 8002b70:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <SystemCoreClockUpdate+0xec>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <SystemCoreClockUpdate+0xfc>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <SystemCoreClockUpdate+0xf0>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	20000048 	.word	0x20000048
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	017d7840 	.word	0x017d7840
 8002bac:	0800d47c 	.word	0x0800d47c

08002bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bb6:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bbc:	e002      	b.n	8002bc4 <LoopCopyDataInit>

08002bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc2:	3304      	adds	r3, #4

08002bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc8:	d3f9      	bcc.n	8002bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bca:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bcc:	4c0b      	ldr	r4, [pc, #44]	; (8002bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd0:	e001      	b.n	8002bd6 <LoopFillZerobss>

08002bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd4:	3204      	adds	r2, #4

08002bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd8:	d3fb      	bcc.n	8002bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bda:	f7ff ff57 	bl	8002a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bde:	f008 fafd 	bl	800b1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be2:	f7fe fba3 	bl	800132c <main>
  bx  lr    
 8002be6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf0:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8002bf4:	0800d53c 	.word	0x0800d53c
  ldr r2, =_sbss
 8002bf8:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002bfc:	20002bf4 	.word	0x20002bf4

08002c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c00:	e7fe      	b.n	8002c00 <ADC_IRQHandler>
	...

08002c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_Init+0x40>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <HAL_Init+0x40>)
 8002c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_Init+0x40>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <HAL_Init+0x40>)
 8002c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_Init+0x40>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <HAL_Init+0x40>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c2c:	2003      	movs	r0, #3
 8002c2e:	f000 fd41 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f000 f808 	bl	8002c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c38:	f7ff fcca 	bl	80025d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00

08002c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c50:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_InitTick+0x54>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_InitTick+0x58>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fd59 	bl	800371e <HAL_SYSTICK_Config>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00e      	b.n	8002c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b0f      	cmp	r3, #15
 8002c7a:	d80a      	bhi.n	8002c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f000 fd21 	bl	80036ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c88:	4a06      	ldr	r2, [pc, #24]	; (8002ca4 <HAL_InitTick+0x5c>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e000      	b.n	8002c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000048 	.word	0x20000048
 8002ca0:	20000050 	.word	0x20000050
 8002ca4:	2000004c 	.word	0x2000004c

08002ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_IncTick+0x20>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_IncTick+0x24>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_IncTick+0x24>)
 8002cba:	6013      	str	r3, [r2, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000050 	.word	0x20000050
 8002ccc:	20002308 	.word	0x20002308

08002cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_GetTick+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20002308 	.word	0x20002308

08002ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf0:	f7ff ffee 	bl	8002cd0 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d005      	beq.n	8002d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d02:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_Delay+0x44>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d0e:	bf00      	nop
 8002d10:	f7ff ffde 	bl	8002cd0 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d8f7      	bhi.n	8002d10 <HAL_Delay+0x28>
  {
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000050 	.word	0x20000050

08002d30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e033      	b.n	8002dae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fc66 	bl	8002620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d118      	bne.n	8002da0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d76:	f023 0302 	bic.w	r3, r3, #2
 8002d7a:	f043 0202 	orr.w	r2, r3, #2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 faca 	bl	800331c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f023 0303 	bic.w	r3, r3, #3
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d9e:	e001      	b.n	8002da4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_Start+0x1a>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e097      	b.n	8002f02 <HAL_ADC_Start+0x14a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d018      	beq.n	8002e1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002df8:	4b45      	ldr	r3, [pc, #276]	; (8002f10 <HAL_ADC_Start+0x158>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a45      	ldr	r2, [pc, #276]	; (8002f14 <HAL_ADC_Start+0x15c>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0c9a      	lsrs	r2, r3, #18
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e0c:	e002      	b.n	8002e14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f9      	bne.n	8002e0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d15f      	bne.n	8002ee8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e66:	d106      	bne.n	8002e76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	f023 0206 	bic.w	r2, r3, #6
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	645a      	str	r2, [r3, #68]	; 0x44
 8002e74:	e002      	b.n	8002e7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_ADC_Start+0x160>)
 8002e86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d129      	bne.n	8002f00 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e020      	b.n	8002f00 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <HAL_ADC_Start+0x164>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d11b      	bne.n	8002f00 <HAL_ADC_Start+0x148>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d114      	bne.n	8002f00 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	e00b      	b.n	8002f00 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f043 0210 	orr.w	r2, r3, #16
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000048 	.word	0x20000048
 8002f14:	431bde83 	.word	0x431bde83
 8002f18:	40012300 	.word	0x40012300
 8002f1c:	40012000 	.word	0x40012000

08002f20 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_ADC_Stop+0x16>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e021      	b.n	8002f7a <HAL_ADC_Stop+0x5a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa2:	d113      	bne.n	8002fcc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d10b      	bne.n	8002fcc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e063      	b.n	8003094 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002fcc:	f7ff fe80 	bl	8002cd0 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fd2:	e021      	b.n	8003018 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d01d      	beq.n	8003018 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_ADC_PollForConversion+0x6c>
 8002fe2:	f7ff fe75 	bl	8002cd0 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d212      	bcs.n	8003018 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d00b      	beq.n	8003018 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e03d      	b.n	8003094 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d1d6      	bne.n	8002fd4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f06f 0212 	mvn.w	r2, #18
 800302e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d123      	bne.n	8003092 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11f      	bne.n	8003092 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800306a:	2b00      	cmp	r3, #0
 800306c:	d111      	bne.n	8003092 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x1c>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e113      	b.n	80032fc <HAL_ADC_ConfigChannel+0x244>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b09      	cmp	r3, #9
 80030e2:	d925      	bls.n	8003130 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68d9      	ldr	r1, [r3, #12]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	3b1e      	subs	r3, #30
 80030fa:	2207      	movs	r2, #7
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43da      	mvns	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	400a      	ands	r2, r1
 8003108:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68d9      	ldr	r1, [r3, #12]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	4618      	mov	r0, r3
 800311c:	4603      	mov	r3, r0
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4403      	add	r3, r0
 8003122:	3b1e      	subs	r3, #30
 8003124:	409a      	lsls	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	e022      	b.n	8003176 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6919      	ldr	r1, [r3, #16]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	2207      	movs	r2, #7
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	400a      	ands	r2, r1
 8003152:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6919      	ldr	r1, [r3, #16]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	4618      	mov	r0, r3
 8003166:	4603      	mov	r3, r0
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4403      	add	r3, r0
 800316c:	409a      	lsls	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b06      	cmp	r3, #6
 800317c:	d824      	bhi.n	80031c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	3b05      	subs	r3, #5
 8003190:	221f      	movs	r2, #31
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43da      	mvns	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	400a      	ands	r2, r1
 800319e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4618      	mov	r0, r3
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	3b05      	subs	r3, #5
 80031ba:	fa00 f203 	lsl.w	r2, r0, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34
 80031c6:	e04c      	b.n	8003262 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d824      	bhi.n	800321a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	3b23      	subs	r3, #35	; 0x23
 80031e2:	221f      	movs	r2, #31
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43da      	mvns	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	400a      	ands	r2, r1
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	4618      	mov	r0, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	3b23      	subs	r3, #35	; 0x23
 800320c:	fa00 f203 	lsl.w	r2, r0, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
 8003218:	e023      	b.n	8003262 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	3b41      	subs	r3, #65	; 0x41
 800322c:	221f      	movs	r2, #31
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	400a      	ands	r2, r1
 800323a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	3b41      	subs	r3, #65	; 0x41
 8003256:	fa00 f203 	lsl.w	r2, r0, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003262:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_ADC_ConfigChannel+0x250>)
 8003264:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a28      	ldr	r2, [pc, #160]	; (800330c <HAL_ADC_ConfigChannel+0x254>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d10f      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1d8>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b12      	cmp	r3, #18
 8003276:	d10b      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1d      	ldr	r2, [pc, #116]	; (800330c <HAL_ADC_ConfigChannel+0x254>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d12b      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x23a>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <HAL_ADC_ConfigChannel+0x258>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <HAL_ADC_ConfigChannel+0x1f4>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b11      	cmp	r3, #17
 80032aa:	d122      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_ADC_ConfigChannel+0x258>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d111      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_ADC_ConfigChannel+0x25c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a11      	ldr	r2, [pc, #68]	; (8003318 <HAL_ADC_ConfigChannel+0x260>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	0c9a      	lsrs	r2, r3, #18
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032e4:	e002      	b.n	80032ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f9      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40012300 	.word	0x40012300
 800330c:	40012000 	.word	0x40012000
 8003310:	10000012 	.word	0x10000012
 8003314:	20000048 	.word	0x20000048
 8003318:	431bde83 	.word	0x431bde83

0800331c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003324:	4b79      	ldr	r3, [pc, #484]	; (800350c <ADC_Init+0x1f0>)
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	021a      	lsls	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6899      	ldr	r1, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	4a58      	ldr	r2, [pc, #352]	; (8003510 <ADC_Init+0x1f4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6899      	ldr	r1, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	e00f      	b.n	800341a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003418:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0202 	bic.w	r2, r2, #2
 8003428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7e1b      	ldrb	r3, [r3, #24]
 8003434:	005a      	lsls	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003456:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	3b01      	subs	r3, #1
 8003474:	035a      	lsls	r2, r3, #13
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	e007      	b.n	8003490 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	051a      	lsls	r2, r3, #20
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6899      	ldr	r1, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034d2:	025a      	lsls	r2, r3, #9
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	029a      	lsls	r2, r3, #10
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40012300 	.word	0x40012300
 8003510:	0f000001 	.word	0x0f000001

08003514 <__NVIC_SetPriorityGrouping>:
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003530:	4013      	ands	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800353c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003546:	4a04      	ldr	r2, [pc, #16]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	60d3      	str	r3, [r2, #12]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_GetPriorityGrouping>:
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <__NVIC_GetPriorityGrouping+0x18>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0307 	and.w	r3, r3, #7
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_EnableIRQ>:
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	2b00      	cmp	r3, #0
 8003588:	db0b      	blt.n	80035a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <__NVIC_EnableIRQ+0x38>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2001      	movs	r0, #1
 800359a:	fa00 f202 	lsl.w	r2, r0, r2
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e100 	.word	0xe000e100

080035b4 <__NVIC_SetPriority>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	490c      	ldr	r1, [pc, #48]	; (8003600 <__NVIC_SetPriority+0x4c>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035dc:	e00a      	b.n	80035f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <__NVIC_SetPriority+0x50>)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3b04      	subs	r3, #4
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	761a      	strb	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <NVIC_EncodePriority>:
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f1c3 0307 	rsb	r3, r3, #7
 8003622:	2b04      	cmp	r3, #4
 8003624:	bf28      	it	cs
 8003626:	2304      	movcs	r3, #4
 8003628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3304      	adds	r3, #4
 800362e:	2b06      	cmp	r3, #6
 8003630:	d902      	bls.n	8003638 <NVIC_EncodePriority+0x30>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3b03      	subs	r3, #3
 8003636:	e000      	b.n	800363a <NVIC_EncodePriority+0x32>
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	401a      	ands	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	43d9      	mvns	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	4313      	orrs	r3, r2
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <SysTick_Config>:
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003680:	d301      	bcc.n	8003686 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003682:	2301      	movs	r3, #1
 8003684:	e00f      	b.n	80036a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <SysTick_Config+0x40>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800368e:	210f      	movs	r1, #15
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	f7ff ff8e 	bl	80035b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <SysTick_Config+0x40>)
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <SysTick_Config+0x40>)
 80036a0:	2207      	movs	r2, #7
 80036a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	e000e010 	.word	0xe000e010

080036b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff29 	bl	8003514 <__NVIC_SetPriorityGrouping>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036dc:	f7ff ff3e 	bl	800355c <__NVIC_GetPriorityGrouping>
 80036e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7ff ff8e 	bl	8003608 <NVIC_EncodePriority>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff5d 	bl	80035b4 <__NVIC_SetPriority>
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff31 	bl	8003578 <__NVIC_EnableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffa2 	bl	8003670 <SysTick_Config>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e159      	b.n	8003a08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003754:	2201      	movs	r2, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	f040 8148 	bne.w	8003a02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d005      	beq.n	800378a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003786:	2b02      	cmp	r3, #2
 8003788:	d130      	bne.n	80037ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	2203      	movs	r2, #3
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c0:	2201      	movs	r2, #1
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0201 	and.w	r2, r3, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d017      	beq.n	8003828 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d123      	bne.n	800387c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3208      	adds	r2, #8
 800383c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	220f      	movs	r2, #15
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	08da      	lsrs	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3208      	adds	r2, #8
 8003876:	69b9      	ldr	r1, [r7, #24]
 8003878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 0203 	and.w	r2, r3, #3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80a2 	beq.w	8003a02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	4b57      	ldr	r3, [pc, #348]	; (8003a20 <HAL_GPIO_Init+0x2e8>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	4a56      	ldr	r2, [pc, #344]	; (8003a20 <HAL_GPIO_Init+0x2e8>)
 80038c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038cc:	6453      	str	r3, [r2, #68]	; 0x44
 80038ce:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <HAL_GPIO_Init+0x2e8>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038da:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_GPIO_Init+0x2ec>)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	220f      	movs	r2, #15
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a49      	ldr	r2, [pc, #292]	; (8003a28 <HAL_GPIO_Init+0x2f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d019      	beq.n	800393a <HAL_GPIO_Init+0x202>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a48      	ldr	r2, [pc, #288]	; (8003a2c <HAL_GPIO_Init+0x2f4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_GPIO_Init+0x1fe>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a47      	ldr	r2, [pc, #284]	; (8003a30 <HAL_GPIO_Init+0x2f8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00d      	beq.n	8003932 <HAL_GPIO_Init+0x1fa>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a46      	ldr	r2, [pc, #280]	; (8003a34 <HAL_GPIO_Init+0x2fc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <HAL_GPIO_Init+0x1f6>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a45      	ldr	r2, [pc, #276]	; (8003a38 <HAL_GPIO_Init+0x300>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_GPIO_Init+0x1f2>
 8003926:	2304      	movs	r3, #4
 8003928:	e008      	b.n	800393c <HAL_GPIO_Init+0x204>
 800392a:	2307      	movs	r3, #7
 800392c:	e006      	b.n	800393c <HAL_GPIO_Init+0x204>
 800392e:	2303      	movs	r3, #3
 8003930:	e004      	b.n	800393c <HAL_GPIO_Init+0x204>
 8003932:	2302      	movs	r3, #2
 8003934:	e002      	b.n	800393c <HAL_GPIO_Init+0x204>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_GPIO_Init+0x204>
 800393a:	2300      	movs	r3, #0
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	f002 0203 	and.w	r2, r2, #3
 8003942:	0092      	lsls	r2, r2, #2
 8003944:	4093      	lsls	r3, r2
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800394c:	4935      	ldr	r1, [pc, #212]	; (8003a24 <HAL_GPIO_Init+0x2ec>)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	089b      	lsrs	r3, r3, #2
 8003952:	3302      	adds	r3, #2
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800395a:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <HAL_GPIO_Init+0x304>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800397e:	4a2f      	ldr	r2, [pc, #188]	; (8003a3c <HAL_GPIO_Init+0x304>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003984:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <HAL_GPIO_Init+0x304>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039a8:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <HAL_GPIO_Init+0x304>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ae:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <HAL_GPIO_Init+0x304>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039d2:	4a1a      	ldr	r2, [pc, #104]	; (8003a3c <HAL_GPIO_Init+0x304>)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039d8:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <HAL_GPIO_Init+0x304>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039fc:	4a0f      	ldr	r2, [pc, #60]	; (8003a3c <HAL_GPIO_Init+0x304>)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	f67f aea2 	bls.w	8003754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40020000 	.word	0x40020000
 8003a2c:	40020400 	.word	0x40020400
 8003a30:	40020800 	.word	0x40020800
 8003a34:	40020c00 	.word	0x40020c00
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40013c00 	.word	0x40013c00

08003a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e001      	b.n	8003a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a80:	787b      	ldrb	r3, [r7, #1]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a8c:	e003      	b.n	8003a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	041a      	lsls	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	619a      	str	r2, [r3, #24]
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	041a      	lsls	r2, r3, #16
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e12b      	b.n	8003d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fe fdd2 	bl	80026a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f002 fb4a 	bl	80061d4 <HAL_RCC_GetPCLK1Freq>
 8003b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a81      	ldr	r2, [pc, #516]	; (8003d4c <HAL_I2C_Init+0x274>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d807      	bhi.n	8003b5c <HAL_I2C_Init+0x84>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a80      	ldr	r2, [pc, #512]	; (8003d50 <HAL_I2C_Init+0x278>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	bf94      	ite	ls
 8003b54:	2301      	movls	r3, #1
 8003b56:	2300      	movhi	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e006      	b.n	8003b6a <HAL_I2C_Init+0x92>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a7d      	ldr	r2, [pc, #500]	; (8003d54 <HAL_I2C_Init+0x27c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	bf94      	ite	ls
 8003b64:	2301      	movls	r3, #1
 8003b66:	2300      	movhi	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e0e7      	b.n	8003d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a78      	ldr	r2, [pc, #480]	; (8003d58 <HAL_I2C_Init+0x280>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	0c9b      	lsrs	r3, r3, #18
 8003b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a6a      	ldr	r2, [pc, #424]	; (8003d4c <HAL_I2C_Init+0x274>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d802      	bhi.n	8003bac <HAL_I2C_Init+0xd4>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	e009      	b.n	8003bc0 <HAL_I2C_Init+0xe8>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	4a69      	ldr	r2, [pc, #420]	; (8003d5c <HAL_I2C_Init+0x284>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	495c      	ldr	r1, [pc, #368]	; (8003d4c <HAL_I2C_Init+0x274>)
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d819      	bhi.n	8003c14 <HAL_I2C_Init+0x13c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e59      	subs	r1, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bee:	1c59      	adds	r1, r3, #1
 8003bf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_I2C_Init+0x138>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e59      	subs	r1, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0e:	e051      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c10:	2304      	movs	r3, #4
 8003c12:	e04f      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d111      	bne.n	8003c40 <HAL_I2C_Init+0x168>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1e58      	subs	r0, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	440b      	add	r3, r1
 8003c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e012      	b.n	8003c66 <HAL_I2C_Init+0x18e>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	0099      	lsls	r1, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_Init+0x196>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e022      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10e      	bne.n	8003c94 <HAL_I2C_Init+0x1bc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1e58      	subs	r0, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	440b      	add	r3, r1
 8003c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c92:	e00f      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	0099      	lsls	r1, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	6809      	ldr	r1, [r1, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6911      	ldr	r1, [r2, #16]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68d2      	ldr	r2, [r2, #12]
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	000186a0 	.word	0x000186a0
 8003d50:	001e847f 	.word	0x001e847f
 8003d54:	003d08ff 	.word	0x003d08ff
 8003d58:	431bde83 	.word	0x431bde83
 8003d5c:	10624dd3 	.word	0x10624dd3

08003d60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	817b      	strh	r3, [r7, #10]
 8003d70:	4613      	mov	r3, r2
 8003d72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d74:	f7fe ffac 	bl	8002cd0 <HAL_GetTick>
 8003d78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	f040 80e0 	bne.w	8003f48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2319      	movs	r3, #25
 8003d8e:	2201      	movs	r2, #1
 8003d90:	4970      	ldr	r1, [pc, #448]	; (8003f54 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 faf4 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e0d3      	b.n	8003f4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_I2C_Master_Transmit+0x50>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e0cc      	b.n	8003f4a <HAL_I2C_Master_Transmit+0x1ea>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d007      	beq.n	8003dd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2221      	movs	r2, #33	; 0x21
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2210      	movs	r2, #16
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	893a      	ldrh	r2, [r7, #8]
 8003e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a50      	ldr	r2, [pc, #320]	; (8003f58 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e18:	8979      	ldrh	r1, [r7, #10]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f996 	bl	8004150 <I2C_MasterRequestWrite>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e08d      	b.n	8003f4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e44:	e066      	b.n	8003f14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fb6e 	bl	800452c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d107      	bne.n	8003e6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e06b      	b.n	8003f4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	781a      	ldrb	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d11b      	bne.n	8003ee8 <HAL_I2C_Master_Transmit+0x188>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d017      	beq.n	8003ee8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	6a39      	ldr	r1, [r7, #32]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fb5e 	bl	80045ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00d      	beq.n	8003f14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d107      	bne.n	8003f10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e01a      	b.n	8003f4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d194      	bne.n	8003e46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	00100002 	.word	0x00100002
 8003f58:	ffff0000 	.word	0xffff0000

08003f5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	4608      	mov	r0, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	817b      	strh	r3, [r7, #10]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	813b      	strh	r3, [r7, #8]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f76:	f7fe feab 	bl	8002cd0 <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	f040 80d9 	bne.w	800413c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	2319      	movs	r3, #25
 8003f90:	2201      	movs	r2, #1
 8003f92:	496d      	ldr	r1, [pc, #436]	; (8004148 <HAL_I2C_Mem_Write+0x1ec>)
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f9f3 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e0cc      	b.n	800413e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_I2C_Mem_Write+0x56>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e0c5      	b.n	800413e <HAL_I2C_Mem_Write+0x1e2>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d007      	beq.n	8003fd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2221      	movs	r2, #33	; 0x21
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a4d      	ldr	r2, [pc, #308]	; (800414c <HAL_I2C_Mem_Write+0x1f0>)
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800401a:	88f8      	ldrh	r0, [r7, #6]
 800401c:	893a      	ldrh	r2, [r7, #8]
 800401e:	8979      	ldrh	r1, [r7, #10]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	9301      	str	r3, [sp, #4]
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4603      	mov	r3, r0
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f912 	bl	8004254 <I2C_RequestMemoryWrite>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d052      	beq.n	80040dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e081      	b.n	800413e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa74 	bl	800452c <I2C_WaitOnTXEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	2b04      	cmp	r3, #4
 8004050:	d107      	bne.n	8004062 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004060:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e06b      	b.n	800413e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	781a      	ldrb	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d11b      	bne.n	80040dc <HAL_I2C_Mem_Write+0x180>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d017      	beq.n	80040dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1aa      	bne.n	800403a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fa60 	bl	80045ae <I2C_WaitOnBTFFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00d      	beq.n	8004110 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d107      	bne.n	800410c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e016      	b.n	800413e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800413c:	2302      	movs	r3, #2
  }
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	00100002 	.word	0x00100002
 800414c:	ffff0000 	.word	0xffff0000

08004150 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	460b      	mov	r3, r1
 800415e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d006      	beq.n	800417a <I2C_MasterRequestWrite+0x2a>
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d003      	beq.n	800417a <I2C_MasterRequestWrite+0x2a>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004178:	d108      	bne.n	800418c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e00b      	b.n	80041a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	2b12      	cmp	r3, #18
 8004192:	d107      	bne.n	80041a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f8e5 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00d      	beq.n	80041d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ca:	d103      	bne.n	80041d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e035      	b.n	8004244 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e0:	d108      	bne.n	80041f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f0:	611a      	str	r2, [r3, #16]
 80041f2:	e01b      	b.n	800422c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041f4:	897b      	ldrh	r3, [r7, #10]
 80041f6:	11db      	asrs	r3, r3, #7
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 0306 	and.w	r3, r3, #6
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f063 030f 	orn	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	490e      	ldr	r1, [pc, #56]	; (800424c <I2C_MasterRequestWrite+0xfc>)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f90b 	bl	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e010      	b.n	8004244 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004222:	897b      	ldrh	r3, [r7, #10]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4907      	ldr	r1, [pc, #28]	; (8004250 <I2C_MasterRequestWrite+0x100>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f8fb 	bl	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00010008 	.word	0x00010008
 8004250:	00010002 	.word	0x00010002

08004254 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	817b      	strh	r3, [r7, #10]
 8004266:	460b      	mov	r3, r1
 8004268:	813b      	strh	r3, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	2200      	movs	r2, #0
 8004286:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f878 	bl	8004380 <I2C_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00d      	beq.n	80042b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a4:	d103      	bne.n	80042ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e05f      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042b2:	897b      	ldrh	r3, [r7, #10]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	492d      	ldr	r1, [pc, #180]	; (800437c <I2C_RequestMemoryWrite+0x128>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f8b0 	bl	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e04c      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f0:	6a39      	ldr	r1, [r7, #32]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f91a 	bl	800452c <I2C_WaitOnTXEFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2b04      	cmp	r3, #4
 8004304:	d107      	bne.n	8004316 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e02b      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004320:	893b      	ldrh	r3, [r7, #8]
 8004322:	b2da      	uxtb	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	e021      	b.n	8004370 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800432c:	893b      	ldrh	r3, [r7, #8]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433c:	6a39      	ldr	r1, [r7, #32]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f8f4 	bl	800452c <I2C_WaitOnTXEFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b04      	cmp	r3, #4
 8004350:	d107      	bne.n	8004362 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e005      	b.n	8004372 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	00010002 	.word	0x00010002

08004380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004390:	e025      	b.n	80043de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d021      	beq.n	80043de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fe fc99 	bl	8002cd0 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d116      	bne.n	80043de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e023      	b.n	8004426 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d10d      	bne.n	8004404 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	43da      	mvns	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4013      	ands	r3, r2
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	e00c      	b.n	800441e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	43da      	mvns	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	429a      	cmp	r2, r3
 8004422:	d0b6      	beq.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800443c:	e051      	b.n	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d123      	bne.n	8004496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004466:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f043 0204 	orr.w	r2, r3, #4
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e046      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d021      	beq.n	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fe fc17 	bl	8002cd0 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d116      	bne.n	80044e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e020      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10c      	bne.n	8004506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e00b      	b.n	800451e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	43da      	mvns	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4013      	ands	r3, r2
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d18d      	bne.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004538:	e02d      	b.n	8004596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f878 	bl	8004630 <I2C_IsAcknowledgeFailed>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e02d      	b.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d021      	beq.n	8004596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fe fbbd 	bl	8002cd0 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d116      	bne.n	8004596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e007      	b.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d1ca      	bne.n	800453a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ba:	e02d      	b.n	8004618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f837 	bl	8004630 <I2C_IsAcknowledgeFailed>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e02d      	b.n	8004628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d021      	beq.n	8004618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d4:	f7fe fb7c 	bl	8002cd0 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e007      	b.n	8004628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b04      	cmp	r3, #4
 8004624:	d1ca      	bne.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004646:	d11b      	bne.n	8004680 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004650:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f043 0204 	orr.w	r2, r3, #4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800468e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004690:	b08f      	sub	sp, #60	; 0x3c
 8004692:	af0a      	add	r7, sp, #40	; 0x28
 8004694:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e10f      	b.n	80048c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f006 f8d0 	bl	800a860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2203      	movs	r2, #3
 80046c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f003 fabd 	bl	8007c5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	687e      	ldr	r6, [r7, #4]
 80046ec:	466d      	mov	r5, sp
 80046ee:	f106 0410 	add.w	r4, r6, #16
 80046f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004702:	1d33      	adds	r3, r6, #4
 8004704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004706:	6838      	ldr	r0, [r7, #0]
 8004708:	f003 f994 	bl	8007a34 <USB_CoreInit>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e0d0      	b.n	80048c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f003 faab 	bl	8007c80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
 800472e:	e04a      	b.n	80047c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	333d      	adds	r3, #61	; 0x3d
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	333c      	adds	r3, #60	; 0x3c
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004758:	7bfa      	ldrb	r2, [r7, #15]
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	b298      	uxth	r0, r3
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	3342      	adds	r3, #66	; 0x42
 800476c:	4602      	mov	r2, r0
 800476e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004770:	7bfa      	ldrb	r2, [r7, #15]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	333f      	adds	r3, #63	; 0x3f
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004784:	7bfa      	ldrb	r2, [r7, #15]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	3344      	adds	r3, #68	; 0x44
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004798:	7bfa      	ldrb	r2, [r7, #15]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	3348      	adds	r3, #72	; 0x48
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047ac:	7bfa      	ldrb	r2, [r7, #15]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	3350      	adds	r3, #80	; 0x50
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	3301      	adds	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
 80047c6:	7bfa      	ldrb	r2, [r7, #15]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d3af      	bcc.n	8004730 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e044      	b.n	8004860 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047d6:	7bfa      	ldrb	r2, [r7, #15]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047fe:	7bfa      	ldrb	r2, [r7, #15]
 8004800:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004802:	7bfa      	ldrb	r2, [r7, #15]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004818:	7bfa      	ldrb	r2, [r7, #15]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800482e:	7bfa      	ldrb	r2, [r7, #15]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004844:	7bfa      	ldrb	r2, [r7, #15]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	3301      	adds	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
 8004860:	7bfa      	ldrb	r2, [r7, #15]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d3b5      	bcc.n	80047d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	687e      	ldr	r6, [r7, #4]
 8004872:	466d      	mov	r5, sp
 8004874:	f106 0410 	add.w	r4, r6, #16
 8004878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800487a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800487c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800487e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004880:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004884:	e885 0003 	stmia.w	r5, {r0, r1}
 8004888:	1d33      	adds	r3, r6, #4
 800488a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800488c:	6838      	ldr	r0, [r7, #0]
 800488e:	f003 fa21 	bl	8007cd4 <USB_DevInit>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e00d      	b.n	80048c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f004 fa69 	bl	8008d90 <USB_DevDisconnect>

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_PCD_Start+0x1c>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e020      	b.n	8004926 <HAL_PCD_Start+0x5e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d109      	bne.n	8004908 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d005      	beq.n	8004908 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f003 f995 	bl	8007c3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f004 fa19 	bl	8008d4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800492e:	b590      	push	{r4, r7, lr}
 8004930:	b08d      	sub	sp, #52	; 0x34
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f004 fad7 	bl	8008ef8 <USB_GetMode>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	f040 839d 	bne.w	800508c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f004 fa3b 	bl	8008dd2 <USB_ReadInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 8393 	beq.w	800508a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f004 fa32 	bl	8008dd2 <USB_ReadInterrupts>
 800496e:	4603      	mov	r3, r0
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b02      	cmp	r3, #2
 8004976:	d107      	bne.n	8004988 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f002 0202 	and.w	r2, r2, #2
 8004986:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f004 fa20 	bl	8008dd2 <USB_ReadInterrupts>
 8004992:	4603      	mov	r3, r0
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b10      	cmp	r3, #16
 800499a:	d161      	bne.n	8004a60 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0210 	bic.w	r2, r2, #16
 80049aa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f003 020f 	and.w	r2, r3, #15
 80049b8:	4613      	mov	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4413      	add	r3, r2
 80049c8:	3304      	adds	r3, #4
 80049ca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	0c5b      	lsrs	r3, r3, #17
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d124      	bne.n	8004a22 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80049de:	4013      	ands	r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d035      	beq.n	8004a50 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80049ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	6a38      	ldr	r0, [r7, #32]
 80049f8:	f004 f886 	bl	8008b08 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a08:	441a      	add	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a1a:	441a      	add	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	619a      	str	r2, [r3, #24]
 8004a20:	e016      	b.n	8004a50 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	0c5b      	lsrs	r3, r3, #17
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	2b06      	cmp	r3, #6
 8004a2c:	d110      	bne.n	8004a50 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a34:	2208      	movs	r2, #8
 8004a36:	4619      	mov	r1, r3
 8004a38:	6a38      	ldr	r0, [r7, #32]
 8004a3a:	f004 f865 	bl	8008b08 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a4a:	441a      	add	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0210 	orr.w	r2, r2, #16
 8004a5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f004 f9b4 	bl	8008dd2 <USB_ReadInterrupts>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a74:	d16e      	bne.n	8004b54 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f004 f9ba 	bl	8008df8 <USB_ReadDevAllOutEpInterrupt>
 8004a84:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004a86:	e062      	b.n	8004b4e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d057      	beq.n	8004b42 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f004 f9df 	bl	8008e60 <USB_ReadDevOutEPInterrupt>
 8004aa2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	2301      	movs	r3, #1
 8004abe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fdb0 	bl	8005628 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00c      	beq.n	8004aec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ade:	461a      	mov	r2, r3
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 feaa 	bl	8005840 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	461a      	mov	r2, r3
 8004b04:	2310      	movs	r3, #16
 8004b06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2320      	movs	r3, #32
 8004b22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	3301      	adds	r3, #1
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d199      	bne.n	8004a88 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f004 f93a 	bl	8008dd2 <USB_ReadInterrupts>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b68:	f040 80c0 	bne.w	8004cec <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f004 f95b 	bl	8008e2c <USB_ReadDevAllInEpInterrupt>
 8004b76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004b7c:	e0b2      	b.n	8004ce4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80a7 	beq.w	8004cd8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	4611      	mov	r1, r2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f004 f981 	bl	8008e9c <USB_ReadDevInEPInterrupt>
 8004b9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d057      	beq.n	8004c56 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	2201      	movs	r2, #1
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69f9      	ldr	r1, [r7, #28]
 8004bc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2301      	movs	r3, #1
 8004bda:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d132      	bne.n	8004c4a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3348      	adds	r3, #72	; 0x48
 8004bf4:	6819      	ldr	r1, [r3, #0]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4403      	add	r3, r0
 8004c04:	3344      	adds	r3, #68	; 0x44
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4419      	add	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0e:	4613      	mov	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4403      	add	r3, r0
 8004c18:	3348      	adds	r3, #72	; 0x48
 8004c1a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d113      	bne.n	8004c4a <HAL_PCD_IRQHandler+0x31c>
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	3350      	adds	r3, #80	; 0x50
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d108      	bne.n	8004c4a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c42:	461a      	mov	r2, r3
 8004c44:	2101      	movs	r1, #1
 8004c46:	f004 f989 	bl	8008f5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f005 fe86 	bl	800a962 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2308      	movs	r3, #8
 8004c70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2310      	movs	r3, #16
 8004c8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2340      	movs	r3, #64	; 0x40
 8004ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004cd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fc1b 	bl	800550e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	3301      	adds	r3, #1
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f47f af49 	bne.w	8004b7e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f004 f86e 	bl	8008dd2 <USB_ReadInterrupts>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d00:	d122      	bne.n	8004d48 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d108      	bne.n	8004d32 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d28:	2100      	movs	r1, #0
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fe26 	bl	800597c <HAL_PCDEx_LPM_Callback>
 8004d30:	e002      	b.n	8004d38 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f005 fe82 	bl	800aa3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f004 f840 	bl	8008dd2 <USB_ReadInterrupts>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5c:	d112      	bne.n	8004d84 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d102      	bne.n	8004d74 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f005 fe3e 	bl	800a9f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004d82:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f004 f822 	bl	8008dd2 <USB_ReadInterrupts>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d98:	f040 80c7 	bne.w	8004f2a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2110      	movs	r1, #16
 8004db6:	4618      	mov	r0, r3
 8004db8:	f003 f8f0 	bl	8007f9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc0:	e056      	b.n	8004e70 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dd4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004df4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	461a      	mov	r2, r3
 8004e24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3a3      	bcc.n	8004dc2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004e8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea6:	f043 030b 	orr.w	r3, r3, #11
 8004eaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ebc:	f043 030b 	orr.w	r3, r3, #11
 8004ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ec2:	e015      	b.n	8004ef0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ed6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004eda:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eea:	f043 030b 	orr.w	r3, r3, #11
 8004eee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004efe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f14:	461a      	mov	r2, r3
 8004f16:	f004 f821 	bl	8008f5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f003 ff4f 	bl	8008dd2 <USB_ReadInterrupts>
 8004f34:	4603      	mov	r3, r0
 8004f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3e:	d124      	bne.n	8004f8a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f003 ffe5 	bl	8008f14 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f003 f885 	bl	800805e <USB_GetDevSpeed>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681c      	ldr	r4, [r3, #0]
 8004f60:	f001 f92c 	bl	80061bc <HAL_RCC_GetHCLKFreq>
 8004f64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f002 fdc2 	bl	8007af8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f005 fd1c 	bl	800a9b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f003 ff1f 	bl	8008dd2 <USB_ReadInterrupts>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d10a      	bne.n	8004fb4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f005 fcf9 	bl	800a996 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f002 0208 	and.w	r2, r2, #8
 8004fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f003 ff0a 	bl	8008dd2 <USB_ReadInterrupts>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc8:	d10f      	bne.n	8004fea <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f005 fd51 	bl	800aa7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f003 feef 	bl	8008dd2 <USB_ReadInterrupts>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ffe:	d10f      	bne.n	8005020 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	b2db      	uxtb	r3, r3
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f005 fd24 	bl	800aa58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800501e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f003 fed4 	bl	8008dd2 <USB_ReadInterrupts>
 800502a:	4603      	mov	r3, r0
 800502c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005034:	d10a      	bne.n	800504c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f005 fd32 	bl	800aaa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800504a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f003 febe 	bl	8008dd2 <USB_ReadInterrupts>
 8005056:	4603      	mov	r3, r0
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b04      	cmp	r3, #4
 800505e:	d115      	bne.n	800508c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f005 fd22 	bl	800aabc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6859      	ldr	r1, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
 8005088:	e000      	b.n	800508c <HAL_PCD_IRQHandler+0x75e>
      return;
 800508a:	bf00      	nop
    }
  }
}
 800508c:	3734      	adds	r7, #52	; 0x34
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}

08005092 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_PCD_SetAddress+0x1a>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e013      	b.n	80050d4 <HAL_PCD_SetAddress+0x42>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	78fa      	ldrb	r2, [r7, #3]
 80050b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f003 fe1c 	bl	8008d02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	4608      	mov	r0, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	461a      	mov	r2, r3
 80050ea:	4603      	mov	r3, r0
 80050ec:	70fb      	strb	r3, [r7, #3]
 80050ee:	460b      	mov	r3, r1
 80050f0:	803b      	strh	r3, [r7, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	da0f      	bge.n	8005122 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	f003 020f 	and.w	r2, r3, #15
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	3338      	adds	r3, #56	; 0x38
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4413      	add	r3, r2
 8005116:	3304      	adds	r3, #4
 8005118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	705a      	strb	r2, [r3, #1]
 8005120:	e00f      	b.n	8005142 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	f003 020f 	and.w	r2, r3, #15
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	1a9b      	subs	r3, r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	4413      	add	r3, r2
 8005138:	3304      	adds	r3, #4
 800513a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	b2da      	uxtb	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800514e:	883a      	ldrh	r2, [r7, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	78ba      	ldrb	r2, [r7, #2]
 8005158:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	785b      	ldrb	r3, [r3, #1]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800516c:	78bb      	ldrb	r3, [r7, #2]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d102      	bne.n	8005178 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_PCD_EP_Open+0xaa>
 8005182:	2302      	movs	r3, #2
 8005184:	e00e      	b.n	80051a4 <HAL_PCD_EP_Open+0xc8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68f9      	ldr	r1, [r7, #12]
 8005194:	4618      	mov	r0, r3
 8005196:	f002 ff87 	bl	80080a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80051a2:	7afb      	ldrb	r3, [r7, #11]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	da0f      	bge.n	80051e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	f003 020f 	and.w	r2, r3, #15
 80051c6:	4613      	mov	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	3338      	adds	r3, #56	; 0x38
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	3304      	adds	r3, #4
 80051d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	705a      	strb	r2, [r3, #1]
 80051de:	e00f      	b.n	8005200 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 020f 	and.w	r2, r3, #15
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	3304      	adds	r3, #4
 80051f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	b2da      	uxtb	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_PCD_EP_Close+0x6e>
 8005216:	2302      	movs	r3, #2
 8005218:	e00e      	b.n	8005238 <HAL_PCD_EP_Close+0x8c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	4618      	mov	r0, r3
 800522a:	f002 ffc5 	bl	80081b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	460b      	mov	r3, r1
 800524e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005250:	7afb      	ldrb	r3, [r7, #11]
 8005252:	f003 020f 	and.w	r2, r3, #15
 8005256:	4613      	mov	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	3304      	adds	r3, #4
 8005268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2200      	movs	r2, #0
 800527a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2200      	movs	r2, #0
 8005280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005282:	7afb      	ldrb	r3, [r7, #11]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	b2da      	uxtb	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d102      	bne.n	800529c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800529c:	7afb      	ldrb	r3, [r7, #11]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	6979      	ldr	r1, [r7, #20]
 80052b4:	f003 faa0 	bl	80087f8 <USB_EP0StartXfer>
 80052b8:	e008      	b.n	80052cc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	f003 f852 	bl	8008370 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80052f8:	681b      	ldr	r3, [r3, #0]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b086      	sub	sp, #24
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	460b      	mov	r3, r1
 8005314:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005316:	7afb      	ldrb	r3, [r7, #11]
 8005318:	f003 020f 	and.w	r2, r3, #15
 800531c:	4613      	mov	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	3338      	adds	r3, #56	; 0x38
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	3304      	adds	r3, #4
 800532c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2200      	movs	r2, #0
 800533e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2201      	movs	r2, #1
 8005344:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	b2da      	uxtb	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d102      	bne.n	8005360 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005360:	7afb      	ldrb	r3, [r7, #11]
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	f003 fa3e 	bl	80087f8 <USB_EP0StartXfer>
 800537c:	e008      	b.n	8005390 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	6979      	ldr	r1, [r7, #20]
 800538c:	f002 fff0 	bl	8008370 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	460b      	mov	r3, r1
 80053a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	f003 020f 	and.w	r2, r3, #15
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d901      	bls.n	80053b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e050      	b.n	800545a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	da0f      	bge.n	80053e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	f003 020f 	and.w	r2, r3, #15
 80053c6:	4613      	mov	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	3338      	adds	r3, #56	; 0x38
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	3304      	adds	r3, #4
 80053d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	705a      	strb	r2, [r3, #1]
 80053de:	e00d      	b.n	80053fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	3304      	adds	r3, #4
 80053f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_PCD_EP_SetStall+0x82>
 8005418:	2302      	movs	r3, #2
 800541a:	e01e      	b.n	800545a <HAL_PCD_EP_SetStall+0xc0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	4618      	mov	r0, r3
 800542c:	f003 fb95 	bl	8008b5a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	b2d9      	uxtb	r1, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800544a:	461a      	mov	r2, r3
 800544c:	f003 fd86 	bl	8008f5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 020f 	and.w	r2, r3, #15
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d901      	bls.n	8005480 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e042      	b.n	8005506 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005484:	2b00      	cmp	r3, #0
 8005486:	da0f      	bge.n	80054a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 020f 	and.w	r2, r3, #15
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	3338      	adds	r3, #56	; 0x38
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4413      	add	r3, r2
 800549c:	3304      	adds	r3, #4
 800549e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2201      	movs	r2, #1
 80054a4:	705a      	strb	r2, [r3, #1]
 80054a6:	e00f      	b.n	80054c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	f003 020f 	and.w	r2, r3, #15
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	3304      	adds	r3, #4
 80054c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_PCD_EP_ClrStall+0x86>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e00e      	b.n	8005506 <HAL_PCD_EP_ClrStall+0xa4>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68f9      	ldr	r1, [r7, #12]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f003 fb9d 	bl	8008c36 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b08a      	sub	sp, #40	; 0x28
 8005512:	af02      	add	r7, sp, #8
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	4613      	mov	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	3338      	adds	r3, #56	; 0x38
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	3304      	adds	r3, #4
 8005534:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	429a      	cmp	r2, r3
 8005540:	d901      	bls.n	8005546 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e06c      	b.n	8005620 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	429a      	cmp	r2, r3
 800555a:	d902      	bls.n	8005562 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3303      	adds	r3, #3
 8005566:	089b      	lsrs	r3, r3, #2
 8005568:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800556a:	e02b      	b.n	80055c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	429a      	cmp	r2, r3
 8005580:	d902      	bls.n	8005588 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3303      	adds	r3, #3
 800558c:	089b      	lsrs	r3, r3, #2
 800558e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68d9      	ldr	r1, [r3, #12]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	4603      	mov	r3, r0
 80055a6:	6978      	ldr	r0, [r7, #20]
 80055a8:	f003 fa79 	bl	8008a9e <USB_WritePacket>

    ep->xfer_buff  += len;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	441a      	add	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	441a      	add	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d809      	bhi.n	80055ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d203      	bcs.n	80055ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1be      	bne.n	800556c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d811      	bhi.n	800561e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2201      	movs	r2, #1
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	43db      	mvns	r3, r3
 8005614:	6939      	ldr	r1, [r7, #16]
 8005616:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800561a:	4013      	ands	r3, r2
 800561c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3720      	adds	r7, #32
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	333c      	adds	r3, #60	; 0x3c
 8005640:	3304      	adds	r3, #4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b01      	cmp	r3, #1
 800565c:	f040 80a0 	bne.w	80057a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d015      	beq.n	8005696 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a72      	ldr	r2, [pc, #456]	; (8005838 <PCD_EP_OutXfrComplete_int+0x210>)
 800566e:	4293      	cmp	r3, r2
 8005670:	f240 80dd 	bls.w	800582e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80d7 	beq.w	800582e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	461a      	mov	r2, r3
 800568e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005692:	6093      	str	r3, [r2, #8]
 8005694:	e0cb      	b.n	800582e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d009      	beq.n	80056b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	461a      	mov	r2, r3
 80056ae:	2320      	movs	r3, #32
 80056b0:	6093      	str	r3, [r2, #8]
 80056b2:	e0bc      	b.n	800582e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f040 80b7 	bne.w	800582e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4a5d      	ldr	r2, [pc, #372]	; (8005838 <PCD_EP_OutXfrComplete_int+0x210>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d90f      	bls.n	80056e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	461a      	mov	r2, r3
 80056e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e4:	6093      	str	r3, [r2, #8]
 80056e6:	e0a2      	b.n	800582e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80056fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	0159      	lsls	r1, r3, #5
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	440b      	add	r3, r1
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800570e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4403      	add	r3, r0
 800571e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005722:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005736:	6819      	ldr	r1, [r3, #0]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4403      	add	r3, r0
 8005746:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4419      	add	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4403      	add	r3, r0
 800575c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005760:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d114      	bne.n	8005792 <PCD_EP_OutXfrComplete_int+0x16a>
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800578a:	461a      	mov	r2, r3
 800578c:	2101      	movs	r1, #1
 800578e:	f003 fbe5 	bl	8008f5c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f005 f8c7 	bl	800a92c <HAL_PCD_DataOutStageCallback>
 800579e:	e046      	b.n	800582e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a26      	ldr	r2, [pc, #152]	; (800583c <PCD_EP_OutXfrComplete_int+0x214>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d124      	bne.n	80057f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	461a      	mov	r2, r3
 80057c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c4:	6093      	str	r3, [r2, #8]
 80057c6:	e032      	b.n	800582e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	461a      	mov	r2, r3
 80057e0:	2320      	movs	r3, #32
 80057e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f005 f89e 	bl	800a92c <HAL_PCD_DataOutStageCallback>
 80057f0:	e01d      	b.n	800582e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d114      	bne.n	8005822 <PCD_EP_OutXfrComplete_int+0x1fa>
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	1a9b      	subs	r3, r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d108      	bne.n	8005822 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800581a:	461a      	mov	r2, r3
 800581c:	2100      	movs	r1, #0
 800581e:	f003 fb9d 	bl	8008f5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f005 f87f 	bl	800a92c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	4f54300a 	.word	0x4f54300a
 800583c:	4f54310a 	.word	0x4f54310a

08005840 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	333c      	adds	r3, #60	; 0x3c
 8005858:	3304      	adds	r3, #4
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d90e      	bls.n	8005894 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	461a      	mov	r2, r3
 800588e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005892:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f005 f837 	bl	800a908 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a0a      	ldr	r2, [pc, #40]	; (80058c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d90c      	bls.n	80058bc <PCD_EP_OutSetupPacket_int+0x7c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d108      	bne.n	80058bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058b4:	461a      	mov	r2, r3
 80058b6:	2101      	movs	r1, #1
 80058b8:	f003 fb50 	bl	8008f5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	4f54300a 	.word	0x4f54300a

080058cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
 80058d8:	4613      	mov	r3, r2
 80058da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d107      	bne.n	80058fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80058ea:	883b      	ldrh	r3, [r7, #0]
 80058ec:	0419      	lsls	r1, r3, #16
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	629a      	str	r2, [r3, #40]	; 0x28
 80058f8:	e028      	b.n	800594c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	0c1b      	lsrs	r3, r3, #16
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	4413      	add	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005908:	2300      	movs	r3, #0
 800590a:	73fb      	strb	r3, [r7, #15]
 800590c:	e00d      	b.n	800592a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	3340      	adds	r3, #64	; 0x40
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4413      	add	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	3301      	adds	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
 800592a:	7bfa      	ldrb	r2, [r7, #15]
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	3b01      	subs	r3, #1
 8005930:	429a      	cmp	r2, r3
 8005932:	d3ec      	bcc.n	800590e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005934:	883b      	ldrh	r3, [r7, #0]
 8005936:	0418      	lsls	r0, r3, #16
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6819      	ldr	r1, [r3, #0]
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	3b01      	subs	r3, #1
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	4302      	orrs	r2, r0
 8005944:	3340      	adds	r3, #64	; 0x40
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	460b      	mov	r3, r1
 8005964:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	887a      	ldrh	r2, [r7, #2]
 800596c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e264      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d075      	beq.n	8005a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059b2:	4ba3      	ldr	r3, [pc, #652]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d00c      	beq.n	80059d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059be:	4ba0      	ldr	r3, [pc, #640]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d112      	bne.n	80059f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ca:	4b9d      	ldr	r3, [pc, #628]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059d6:	d10b      	bne.n	80059f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d8:	4b99      	ldr	r3, [pc, #612]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d05b      	beq.n	8005a9c <HAL_RCC_OscConfig+0x108>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d157      	bne.n	8005a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e23f      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f8:	d106      	bne.n	8005a08 <HAL_RCC_OscConfig+0x74>
 80059fa:	4b91      	ldr	r3, [pc, #580]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a90      	ldr	r2, [pc, #576]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	e01d      	b.n	8005a44 <HAL_RCC_OscConfig+0xb0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a10:	d10c      	bne.n	8005a2c <HAL_RCC_OscConfig+0x98>
 8005a12:	4b8b      	ldr	r3, [pc, #556]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a8a      	ldr	r2, [pc, #552]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	4b88      	ldr	r3, [pc, #544]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a87      	ldr	r2, [pc, #540]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	e00b      	b.n	8005a44 <HAL_RCC_OscConfig+0xb0>
 8005a2c:	4b84      	ldr	r3, [pc, #528]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a83      	ldr	r2, [pc, #524]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	4b81      	ldr	r3, [pc, #516]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a80      	ldr	r2, [pc, #512]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d013      	beq.n	8005a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4c:	f7fd f940 	bl	8002cd0 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a54:	f7fd f93c 	bl	8002cd0 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b64      	cmp	r3, #100	; 0x64
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e204      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a66:	4b76      	ldr	r3, [pc, #472]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f0      	beq.n	8005a54 <HAL_RCC_OscConfig+0xc0>
 8005a72:	e014      	b.n	8005a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a74:	f7fd f92c 	bl	8002cd0 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a7c:	f7fd f928 	bl	8002cd0 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b64      	cmp	r3, #100	; 0x64
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e1f0      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a8e:	4b6c      	ldr	r3, [pc, #432]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0xe8>
 8005a9a:	e000      	b.n	8005a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d063      	beq.n	8005b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aaa:	4b65      	ldr	r3, [pc, #404]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 030c 	and.w	r3, r3, #12
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ab6:	4b62      	ldr	r3, [pc, #392]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d11c      	bne.n	8005afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ac2:	4b5f      	ldr	r3, [pc, #380]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d116      	bne.n	8005afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ace:	4b5c      	ldr	r3, [pc, #368]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x152>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d001      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e1c4      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae6:	4b56      	ldr	r3, [pc, #344]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4952      	ldr	r1, [pc, #328]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005afa:	e03a      	b.n	8005b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d020      	beq.n	8005b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b04:	4b4f      	ldr	r3, [pc, #316]	; (8005c44 <HAL_RCC_OscConfig+0x2b0>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0a:	f7fd f8e1 	bl	8002cd0 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b12:	f7fd f8dd 	bl	8002cd0 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e1a5      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b24:	4b46      	ldr	r3, [pc, #280]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b30:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4940      	ldr	r1, [pc, #256]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	600b      	str	r3, [r1, #0]
 8005b44:	e015      	b.n	8005b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b46:	4b3f      	ldr	r3, [pc, #252]	; (8005c44 <HAL_RCC_OscConfig+0x2b0>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4c:	f7fd f8c0 	bl	8002cd0 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b54:	f7fd f8bc 	bl	8002cd0 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e184      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b66:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f0      	bne.n	8005b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d030      	beq.n	8005be0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d016      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b86:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <HAL_RCC_OscConfig+0x2b4>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8c:	f7fd f8a0 	bl	8002cd0 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b94:	f7fd f89c 	bl	8002cd0 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e164      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ba6:	4b26      	ldr	r3, [pc, #152]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <HAL_RCC_OscConfig+0x200>
 8005bb2:	e015      	b.n	8005be0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb4:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <HAL_RCC_OscConfig+0x2b4>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bba:	f7fd f889 	bl	8002cd0 <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc2:	f7fd f885 	bl	8002cd0 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e14d      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd4:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f0      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80a0 	beq.w	8005d2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf2:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10f      	bne.n	8005c1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	4a0e      	ldr	r2, [pc, #56]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0e:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1e:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <HAL_RCC_OscConfig+0x2b8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d121      	bne.n	8005c6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c2a:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <HAL_RCC_OscConfig+0x2b8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a07      	ldr	r2, [pc, #28]	; (8005c4c <HAL_RCC_OscConfig+0x2b8>)
 8005c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c36:	f7fd f84b 	bl	8002cd0 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3c:	e011      	b.n	8005c62 <HAL_RCC_OscConfig+0x2ce>
 8005c3e:	bf00      	nop
 8005c40:	40023800 	.word	0x40023800
 8005c44:	42470000 	.word	0x42470000
 8005c48:	42470e80 	.word	0x42470e80
 8005c4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c50:	f7fd f83e 	bl	8002cd0 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e106      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c62:	4b85      	ldr	r3, [pc, #532]	; (8005e78 <HAL_RCC_OscConfig+0x4e4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d106      	bne.n	8005c84 <HAL_RCC_OscConfig+0x2f0>
 8005c76:	4b81      	ldr	r3, [pc, #516]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	4a80      	ldr	r2, [pc, #512]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6713      	str	r3, [r2, #112]	; 0x70
 8005c82:	e01c      	b.n	8005cbe <HAL_RCC_OscConfig+0x32a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b05      	cmp	r3, #5
 8005c8a:	d10c      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x312>
 8005c8c:	4b7b      	ldr	r3, [pc, #492]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	4a7a      	ldr	r2, [pc, #488]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005c92:	f043 0304 	orr.w	r3, r3, #4
 8005c96:	6713      	str	r3, [r2, #112]	; 0x70
 8005c98:	4b78      	ldr	r3, [pc, #480]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9c:	4a77      	ldr	r2, [pc, #476]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca4:	e00b      	b.n	8005cbe <HAL_RCC_OscConfig+0x32a>
 8005ca6:	4b75      	ldr	r3, [pc, #468]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	4a74      	ldr	r2, [pc, #464]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb2:	4b72      	ldr	r3, [pc, #456]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb6:	4a71      	ldr	r2, [pc, #452]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005cb8:	f023 0304 	bic.w	r3, r3, #4
 8005cbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d015      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc6:	f7fd f803 	bl	8002cd0 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ccc:	e00a      	b.n	8005ce4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cce:	f7fc ffff 	bl	8002cd0 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e0c5      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce4:	4b65      	ldr	r3, [pc, #404]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0ee      	beq.n	8005cce <HAL_RCC_OscConfig+0x33a>
 8005cf0:	e014      	b.n	8005d1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf2:	f7fc ffed 	bl	8002cd0 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf8:	e00a      	b.n	8005d10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cfa:	f7fc ffe9 	bl	8002cd0 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e0af      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d10:	4b5a      	ldr	r3, [pc, #360]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1ee      	bne.n	8005cfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d105      	bne.n	8005d2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d22:	4b56      	ldr	r3, [pc, #344]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	4a55      	ldr	r2, [pc, #340]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 809b 	beq.w	8005e6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d38:	4b50      	ldr	r3, [pc, #320]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 030c 	and.w	r3, r3, #12
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d05c      	beq.n	8005dfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d141      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4c:	4b4c      	ldr	r3, [pc, #304]	; (8005e80 <HAL_RCC_OscConfig+0x4ec>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d52:	f7fc ffbd 	bl	8002cd0 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d5a:	f7fc ffb9 	bl	8002cd0 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e081      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6c:	4b43      	ldr	r3, [pc, #268]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f0      	bne.n	8005d5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	019b      	lsls	r3, r3, #6
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	3b01      	subs	r3, #1
 8005d92:	041b      	lsls	r3, r3, #16
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	061b      	lsls	r3, r3, #24
 8005d9c:	4937      	ldr	r1, [pc, #220]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da2:	4b37      	ldr	r3, [pc, #220]	; (8005e80 <HAL_RCC_OscConfig+0x4ec>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da8:	f7fc ff92 	bl	8002cd0 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db0:	f7fc ff8e 	bl	8002cd0 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e056      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc2:	4b2e      	ldr	r3, [pc, #184]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0x41c>
 8005dce:	e04e      	b.n	8005e6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd0:	4b2b      	ldr	r3, [pc, #172]	; (8005e80 <HAL_RCC_OscConfig+0x4ec>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd6:	f7fc ff7b 	bl	8002cd0 <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dde:	f7fc ff77 	bl	8002cd0 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e03f      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df0:	4b22      	ldr	r3, [pc, #136]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f0      	bne.n	8005dde <HAL_RCC_OscConfig+0x44a>
 8005dfc:	e037      	b.n	8005e6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e032      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e0a:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <HAL_RCC_OscConfig+0x4e8>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d028      	beq.n	8005e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d121      	bne.n	8005e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d11a      	bne.n	8005e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d111      	bne.n	8005e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	085b      	lsrs	r3, r3, #1
 8005e52:	3b01      	subs	r3, #1
 8005e54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d107      	bne.n	8005e6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40007000 	.word	0x40007000
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	42470060 	.word	0x42470060

08005e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0cc      	b.n	8006032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e98:	4b68      	ldr	r3, [pc, #416]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d90c      	bls.n	8005ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea6:	4b65      	ldr	r3, [pc, #404]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eae:	4b63      	ldr	r3, [pc, #396]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d001      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0b8      	b.n	8006032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d020      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ed8:	4b59      	ldr	r3, [pc, #356]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	4a58      	ldr	r2, [pc, #352]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ef0:	4b53      	ldr	r3, [pc, #332]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	4a52      	ldr	r2, [pc, #328]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005efc:	4b50      	ldr	r3, [pc, #320]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	494d      	ldr	r1, [pc, #308]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d044      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d107      	bne.n	8005f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f22:	4b47      	ldr	r3, [pc, #284]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d119      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e07f      	b.n	8006032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d003      	beq.n	8005f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d107      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f42:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d109      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e06f      	b.n	8006032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f52:	4b3b      	ldr	r3, [pc, #236]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e067      	b.n	8006032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f62:	4b37      	ldr	r3, [pc, #220]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f023 0203 	bic.w	r2, r3, #3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4934      	ldr	r1, [pc, #208]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f74:	f7fc feac 	bl	8002cd0 <HAL_GetTick>
 8005f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7a:	e00a      	b.n	8005f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f7c:	f7fc fea8 	bl	8002cd0 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e04f      	b.n	8006032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f92:	4b2b      	ldr	r3, [pc, #172]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 020c 	and.w	r2, r3, #12
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d1eb      	bne.n	8005f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fa4:	4b25      	ldr	r3, [pc, #148]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d20c      	bcs.n	8005fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb2:	4b22      	ldr	r3, [pc, #136]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fba:	4b20      	ldr	r3, [pc, #128]	; (800603c <HAL_RCC_ClockConfig+0x1b8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e032      	b.n	8006032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fd8:	4b19      	ldr	r3, [pc, #100]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4916      	ldr	r1, [pc, #88]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	490e      	ldr	r1, [pc, #56]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	4313      	orrs	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800600a:	f000 f821 	bl	8006050 <HAL_RCC_GetSysClockFreq>
 800600e:	4602      	mov	r2, r0
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	091b      	lsrs	r3, r3, #4
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	490a      	ldr	r1, [pc, #40]	; (8006044 <HAL_RCC_ClockConfig+0x1c0>)
 800601c:	5ccb      	ldrb	r3, [r1, r3]
 800601e:	fa22 f303 	lsr.w	r3, r2, r3
 8006022:	4a09      	ldr	r2, [pc, #36]	; (8006048 <HAL_RCC_ClockConfig+0x1c4>)
 8006024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006026:	4b09      	ldr	r3, [pc, #36]	; (800604c <HAL_RCC_ClockConfig+0x1c8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f7fc fe0c 	bl	8002c48 <HAL_InitTick>

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40023c00 	.word	0x40023c00
 8006040:	40023800 	.word	0x40023800
 8006044:	0800d47c 	.word	0x0800d47c
 8006048:	20000048 	.word	0x20000048
 800604c:	2000004c 	.word	0x2000004c

08006050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006050:	b5b0      	push	{r4, r5, r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006056:	2100      	movs	r1, #0
 8006058:	6079      	str	r1, [r7, #4]
 800605a:	2100      	movs	r1, #0
 800605c:	60f9      	str	r1, [r7, #12]
 800605e:	2100      	movs	r1, #0
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006062:	2100      	movs	r1, #0
 8006064:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006066:	4952      	ldr	r1, [pc, #328]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006068:	6889      	ldr	r1, [r1, #8]
 800606a:	f001 010c 	and.w	r1, r1, #12
 800606e:	2908      	cmp	r1, #8
 8006070:	d00d      	beq.n	800608e <HAL_RCC_GetSysClockFreq+0x3e>
 8006072:	2908      	cmp	r1, #8
 8006074:	f200 8094 	bhi.w	80061a0 <HAL_RCC_GetSysClockFreq+0x150>
 8006078:	2900      	cmp	r1, #0
 800607a:	d002      	beq.n	8006082 <HAL_RCC_GetSysClockFreq+0x32>
 800607c:	2904      	cmp	r1, #4
 800607e:	d003      	beq.n	8006088 <HAL_RCC_GetSysClockFreq+0x38>
 8006080:	e08e      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006082:	4b4c      	ldr	r3, [pc, #304]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8006084:	60bb      	str	r3, [r7, #8]
       break;
 8006086:	e08e      	b.n	80061a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006088:	4b4b      	ldr	r3, [pc, #300]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800608a:	60bb      	str	r3, [r7, #8]
      break;
 800608c:	e08b      	b.n	80061a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800608e:	4948      	ldr	r1, [pc, #288]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006090:	6849      	ldr	r1, [r1, #4]
 8006092:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006096:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006098:	4945      	ldr	r1, [pc, #276]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800609a:	6849      	ldr	r1, [r1, #4]
 800609c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80060a0:	2900      	cmp	r1, #0
 80060a2:	d024      	beq.n	80060ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a4:	4942      	ldr	r1, [pc, #264]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80060a6:	6849      	ldr	r1, [r1, #4]
 80060a8:	0989      	lsrs	r1, r1, #6
 80060aa:	4608      	mov	r0, r1
 80060ac:	f04f 0100 	mov.w	r1, #0
 80060b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80060b4:	f04f 0500 	mov.w	r5, #0
 80060b8:	ea00 0204 	and.w	r2, r0, r4
 80060bc:	ea01 0305 	and.w	r3, r1, r5
 80060c0:	493d      	ldr	r1, [pc, #244]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80060c2:	fb01 f003 	mul.w	r0, r1, r3
 80060c6:	2100      	movs	r1, #0
 80060c8:	fb01 f102 	mul.w	r1, r1, r2
 80060cc:	1844      	adds	r4, r0, r1
 80060ce:	493a      	ldr	r1, [pc, #232]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80060d0:	fba2 0101 	umull	r0, r1, r2, r1
 80060d4:	1863      	adds	r3, r4, r1
 80060d6:	4619      	mov	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	461a      	mov	r2, r3
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	f7fa fd9c 	bl	8000c1c <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4613      	mov	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e04a      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ee:	4b30      	ldr	r3, [pc, #192]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	099b      	lsrs	r3, r3, #6
 80060f4:	461a      	mov	r2, r3
 80060f6:	f04f 0300 	mov.w	r3, #0
 80060fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	ea02 0400 	and.w	r4, r2, r0
 8006106:	ea03 0501 	and.w	r5, r3, r1
 800610a:	4620      	mov	r0, r4
 800610c:	4629      	mov	r1, r5
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	014b      	lsls	r3, r1, #5
 8006118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800611c:	0142      	lsls	r2, r0, #5
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	1b00      	subs	r0, r0, r4
 8006124:	eb61 0105 	sbc.w	r1, r1, r5
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	018b      	lsls	r3, r1, #6
 8006132:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006136:	0182      	lsls	r2, r0, #6
 8006138:	1a12      	subs	r2, r2, r0
 800613a:	eb63 0301 	sbc.w	r3, r3, r1
 800613e:	f04f 0000 	mov.w	r0, #0
 8006142:	f04f 0100 	mov.w	r1, #0
 8006146:	00d9      	lsls	r1, r3, #3
 8006148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800614c:	00d0      	lsls	r0, r2, #3
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	1912      	adds	r2, r2, r4
 8006154:	eb45 0303 	adc.w	r3, r5, r3
 8006158:	f04f 0000 	mov.w	r0, #0
 800615c:	f04f 0100 	mov.w	r1, #0
 8006160:	0299      	lsls	r1, r3, #10
 8006162:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006166:	0290      	lsls	r0, r2, #10
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4610      	mov	r0, r2
 800616e:	4619      	mov	r1, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	461a      	mov	r2, r3
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	f7fa fd50 	bl	8000c1c <__aeabi_uldivmod>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4613      	mov	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	3301      	adds	r3, #1
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	fbb2 f3f3 	udiv	r3, r2, r3
 800619c:	60bb      	str	r3, [r7, #8]
      break;
 800619e:	e002      	b.n	80061a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80061a2:	60bb      	str	r3, [r7, #8]
      break;
 80061a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061a6:	68bb      	ldr	r3, [r7, #8]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bdb0      	pop	{r4, r5, r7, pc}
 80061b0:	40023800 	.word	0x40023800
 80061b4:	00f42400 	.word	0x00f42400
 80061b8:	017d7840 	.word	0x017d7840

080061bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061c0:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80061c2:	681b      	ldr	r3, [r3, #0]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	20000048 	.word	0x20000048

080061d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061d8:	f7ff fff0 	bl	80061bc <HAL_RCC_GetHCLKFreq>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	0a9b      	lsrs	r3, r3, #10
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	4903      	ldr	r1, [pc, #12]	; (80061f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ea:	5ccb      	ldrb	r3, [r1, r3]
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40023800 	.word	0x40023800
 80061f8:	0800d48c 	.word	0x0800d48c

080061fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006220:	2b00      	cmp	r3, #0
 8006222:	d038      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006224:	4b68      	ldr	r3, [pc, #416]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800622a:	f7fc fd51 	bl	8002cd0 <HAL_GetTick>
 800622e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006230:	e008      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006232:	f7fc fd4d 	bl	8002cd0 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e0bd      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006244:	4b61      	ldr	r3, [pc, #388]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	019b      	lsls	r3, r3, #6
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	071b      	lsls	r3, r3, #28
 8006262:	495a      	ldr	r1, [pc, #360]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800626a:	4b57      	ldr	r3, [pc, #348]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006270:	f7fc fd2e 	bl	8002cd0 <HAL_GetTick>
 8006274:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006276:	e008      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006278:	f7fc fd2a 	bl	8002cd0 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e09a      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800628a:	4b50      	ldr	r3, [pc, #320]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8083 	beq.w	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062a4:	2300      	movs	r3, #0
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	4b48      	ldr	r3, [pc, #288]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	4a47      	ldr	r2, [pc, #284]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b2:	6413      	str	r3, [r2, #64]	; 0x40
 80062b4:	4b45      	ldr	r3, [pc, #276]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062c0:	4b43      	ldr	r3, [pc, #268]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a42      	ldr	r2, [pc, #264]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062cc:	f7fc fd00 	bl	8002cd0 <HAL_GetTick>
 80062d0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062d4:	f7fc fcfc 	bl	8002cd0 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e06c      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062e6:	4b3a      	ldr	r3, [pc, #232]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f0      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062f2:	4b36      	ldr	r3, [pc, #216]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d02f      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	429a      	cmp	r2, r3
 800630e:	d028      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006310:	4b2e      	ldr	r3, [pc, #184]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006318:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800631a:	4b2e      	ldr	r3, [pc, #184]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006320:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006326:	4a29      	ldr	r2, [pc, #164]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800632c:	4b27      	ldr	r3, [pc, #156]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d114      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006338:	f7fc fcca 	bl	8002cd0 <HAL_GetTick>
 800633c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800633e:	e00a      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006340:	f7fc fcc6 	bl	8002cd0 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	f241 3288 	movw	r2, #5000	; 0x1388
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e034      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0ee      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800636a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800636e:	d10d      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006370:	4b16      	ldr	r3, [pc, #88]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006384:	4911      	ldr	r1, [pc, #68]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
 800638a:	e005      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006392:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006396:	6093      	str	r3, [r2, #8]
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800639a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063a4:	4909      	ldr	r1, [pc, #36]	; (80063cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7d1a      	ldrb	r2, [r3, #20]
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80063bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	42470068 	.word	0x42470068
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40007000 	.word	0x40007000
 80063d4:	42470e40 	.word	0x42470e40
 80063d8:	424711e0 	.word	0x424711e0

080063dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e083      	b.n	80064f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7f5b      	ldrb	r3, [r3, #29]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d105      	bne.n	8006404 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fc f99a 	bl	8002738 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	22ca      	movs	r2, #202	; 0xca
 8006410:	625a      	str	r2, [r3, #36]	; 0x24
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2253      	movs	r2, #83	; 0x53
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f897 	bl	800654e <RTC_EnterInitMode>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	22ff      	movs	r2, #255	; 0xff
 800642c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2204      	movs	r2, #4
 8006432:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e05e      	b.n	80064f6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800644a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6899      	ldr	r1, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68d2      	ldr	r2, [r2, #12]
 8006472:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6919      	ldr	r1, [r3, #16]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	041a      	lsls	r2, r3, #16
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006496:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10e      	bne.n	80064c4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f829 	bl	80064fe <HAL_RTC_WaitForSynchro>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d008      	beq.n	80064c4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	22ff      	movs	r2, #255	; 0xff
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2204      	movs	r2, #4
 80064be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e018      	b.n	80064f6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	22ff      	movs	r2, #255	; 0xff
 80064ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
  }
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006518:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800651a:	f7fc fbd9 	bl	8002cd0 <HAL_GetTick>
 800651e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006520:	e009      	b.n	8006536 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006522:	f7fc fbd5 	bl	8002cd0 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006530:	d901      	bls.n	8006536 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e007      	b.n	8006546 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0ee      	beq.n	8006522 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d119      	bne.n	800659c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f04f 32ff 	mov.w	r2, #4294967295
 8006570:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006572:	f7fc fbad 	bl	8002cd0 <HAL_GetTick>
 8006576:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006578:	e009      	b.n	800658e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800657a:	f7fc fba9 	bl	8002cd0 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006588:	d901      	bls.n	800658e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e007      	b.n	800659e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0ee      	beq.n	800657a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e022      	b.n	80065fe <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d105      	bne.n	80065d0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fc f8ca 	bl	8002764 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2203      	movs	r2, #3
 80065d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f815 	bl	8006608 <HAL_SD_InitCard>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e00a      	b.n	80065fe <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
 }
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006608:	b5b0      	push	{r4, r5, r7, lr}
 800660a:	b08e      	sub	sp, #56	; 0x38
 800660c:	af04      	add	r7, sp, #16
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006610:	2300      	movs	r3, #0
 8006612:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006618:	2300      	movs	r3, #0
 800661a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006620:	2300      	movs	r3, #0
 8006622:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006624:	2376      	movs	r3, #118	; 0x76
 8006626:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681d      	ldr	r5, [r3, #0]
 800662c:	466c      	mov	r4, sp
 800662e:	f107 0314 	add.w	r3, r7, #20
 8006632:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800663a:	f107 0308 	add.w	r3, r7, #8
 800663e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006640:	4628      	mov	r0, r5
 8006642:	f000 fd60 	bl	8007106 <SDIO_Init>
 8006646:	4603      	mov	r3, r0
 8006648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800664c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e04c      	b.n	80066f2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006658:	4b28      	ldr	r3, [pc, #160]	; (80066fc <HAL_SD_InitCard+0xf4>)
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fd87 	bl	8007176 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006668:	4b24      	ldr	r3, [pc, #144]	; (80066fc <HAL_SD_InitCard+0xf4>)
 800666a:	2201      	movs	r2, #1
 800666c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fb52 	bl	8006d18 <SD_PowerON>
 8006674:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e02e      	b.n	80066f2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fa73 	bl	8006b80 <SD_InitCard>
 800669a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e01b      	b.n	80066f2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fdea 	bl	800729c <SDMMC_CmdBlockLength>
 80066c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00f      	beq.n	80066f0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a0a      	ldr	r2, [pc, #40]	; (8006700 <HAL_SD_InitCard+0xf8>)
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3728      	adds	r7, #40	; 0x28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bdb0      	pop	{r4, r5, r7, pc}
 80066fa:	bf00      	nop
 80066fc:	422580a0 	.word	0x422580a0
 8006700:	004005ff 	.word	0x004005ff

08006704 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006712:	0f9b      	lsrs	r3, r3, #30
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671e:	0e9b      	lsrs	r3, r3, #26
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	b2da      	uxtb	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006730:	0e1b      	lsrs	r3, r3, #24
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	b2da      	uxtb	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	b2da      	uxtb	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	b2da      	uxtb	r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800675a:	b2da      	uxtb	r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006764:	0d1b      	lsrs	r3, r3, #20
 8006766:	b29a      	uxth	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	b2da      	uxtb	r2, r3
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006782:	0bdb      	lsrs	r3, r3, #15
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	b2da      	uxtb	r2, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006794:	0b9b      	lsrs	r3, r3, #14
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	b2da      	uxtb	r2, r3
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a6:	0b5b      	lsrs	r3, r3, #13
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b8:	0b1b      	lsrs	r3, r3, #12
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d163      	bne.n	800689c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067d8:	009a      	lsls	r2, r3, #2
 80067da:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067de:	4013      	ands	r3, r2
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80067e4:	0f92      	lsrs	r2, r2, #30
 80067e6:	431a      	orrs	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f0:	0edb      	lsrs	r3, r3, #27
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006802:	0e1b      	lsrs	r3, r3, #24
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006814:	0d5b      	lsrs	r3, r3, #21
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	b2da      	uxtb	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006826:	0c9b      	lsrs	r3, r3, #18
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	b2da      	uxtb	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006838:	0bdb      	lsrs	r3, r3, #15
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	b2da      	uxtb	r2, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	7e1b      	ldrb	r3, [r3, #24]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	3302      	adds	r3, #2
 800685c:	2201      	movs	r2, #1
 800685e:	fa02 f303 	lsl.w	r3, r2, r3
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006866:	fb02 f203 	mul.w	r2, r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	7a1b      	ldrb	r3, [r3, #8]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 030f 	and.w	r3, r3, #15
 8006878:	2201      	movs	r2, #1
 800687a:	409a      	lsls	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006888:	0a52      	lsrs	r2, r2, #9
 800688a:	fb02 f203 	mul.w	r2, r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006898:	661a      	str	r2, [r3, #96]	; 0x60
 800689a:	e031      	b.n	8006900 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d11d      	bne.n	80068e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068a8:	041b      	lsls	r3, r3, #16
 80068aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b2:	0c1b      	lsrs	r3, r3, #16
 80068b4:	431a      	orrs	r2, r3
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	3301      	adds	r3, #1
 80068c0:	029a      	lsls	r2, r3, #10
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	661a      	str	r2, [r3, #96]	; 0x60
 80068de:	e00f      	b.n	8006900 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a58      	ldr	r2, [pc, #352]	; (8006a48 <HAL_SD_GetCardCSD+0x344>)
 80068e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e09d      	b.n	8006a3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006904:	0b9b      	lsrs	r3, r3, #14
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	b2da      	uxtb	r2, r3
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006916:	09db      	lsrs	r3, r3, #7
 8006918:	b2db      	uxtb	r3, r3
 800691a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691e:	b2da      	uxtb	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692e:	b2da      	uxtb	r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006938:	0fdb      	lsrs	r3, r3, #31
 800693a:	b2da      	uxtb	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006944:	0f5b      	lsrs	r3, r3, #29
 8006946:	b2db      	uxtb	r3, r3
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	b2da      	uxtb	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	0e9b      	lsrs	r3, r3, #26
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	b2da      	uxtb	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	0d9b      	lsrs	r3, r3, #22
 800696a:	b2db      	uxtb	r3, r3
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	b2da      	uxtb	r2, r3
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697a:	0d5b      	lsrs	r3, r3, #21
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	0c1b      	lsrs	r3, r3, #16
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069aa:	0bdb      	lsrs	r3, r3, #15
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	0b9b      	lsrs	r3, r3, #14
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	0b5b      	lsrs	r3, r3, #13
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e6:	0b1b      	lsrs	r3, r3, #12
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fa:	0a9b      	lsrs	r3, r3, #10
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	085b      	lsrs	r3, r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	004005ff 	.word	0x004005ff

08006a4c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006a4c:	b5b0      	push	{r4, r5, r7, lr}
 8006a4e:	b08e      	sub	sp, #56	; 0x38
 8006a50:	af04      	add	r7, sp, #16
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2203      	movs	r2, #3
 8006a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d02e      	beq.n	8006aca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a72:	d106      	bne.n	8006a82 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
 8006a80:	e029      	b.n	8006ad6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a88:	d10a      	bne.n	8006aa0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f9d2 	bl	8006e34 <SD_WideBus_Enable>
 8006a90:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
 8006a9e:	e01a      	b.n	8006ad6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fa0f 	bl	8006eca <SD_WideBus_Disable>
 8006aac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
 8006aba:	e00c      	b.n	8006ad6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
 8006ac8:	e005      	b.n	8006ad6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a26      	ldr	r2, [pc, #152]	; (8006b7c <HAL_SD_ConfigWideBusOperation+0x130>)
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006af4:	e01f      	b.n	8006b36 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681d      	ldr	r5, [r3, #0]
 8006b1c:	466c      	mov	r4, sp
 8006b1e:	f107 0314 	add.w	r3, r7, #20
 8006b22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b2a:	f107 0308 	add.w	r3, r7, #8
 8006b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b30:	4628      	mov	r0, r5
 8006b32:	f000 fae8 	bl	8007106 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fbac 	bl	800729c <SDMMC_CmdBlockLength>
 8006b44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <HAL_SD_ConfigWideBusOperation+0x130>)
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3728      	adds	r7, #40	; 0x28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bdb0      	pop	{r4, r5, r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	004005ff 	.word	0x004005ff

08006b80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b80:	b5b0      	push	{r4, r5, r7, lr}
 8006b82:	b094      	sub	sp, #80	; 0x50
 8006b84:	af04      	add	r7, sp, #16
 8006b86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 faff 	bl	8007194 <SDIO_GetPowerState>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006ba0:	e0b6      	b.n	8006d10 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d02f      	beq.n	8006c0a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fc7e 	bl	80074b0 <SDMMC_CmdSendCID>
 8006bb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <SD_InitCard+0x40>
    {
      return errorstate;
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbe:	e0a7      	b.n	8006d10 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fb29 	bl	800721e <SDIO_GetResponse>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fb20 	bl	800721e <SDIO_GetResponse>
 8006bde:	4602      	mov	r2, r0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2108      	movs	r1, #8
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fb17 	bl	800721e <SDIO_GetResponse>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	210c      	movs	r1, #12
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb0e 	bl	800721e <SDIO_GetResponse>
 8006c02:	4602      	mov	r2, r0
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d00d      	beq.n	8006c2e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f107 020e 	add.w	r2, r7, #14
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fc84 	bl	800752a <SDMMC_CmdSetRelAdd>
 8006c22:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <SD_InitCard+0xae>
    {
      return errorstate;
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	e070      	b.n	8006d10 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d036      	beq.n	8006ca4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006c36:	89fb      	ldrh	r3, [r7, #14]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f000 fc4e 	bl	80074ec <SDMMC_CmdSendCSD>
 8006c50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c5a:	e059      	b.n	8006d10 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fadb 	bl	800721e <SDIO_GetResponse>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2104      	movs	r1, #4
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fad2 	bl	800721e <SDIO_GetResponse>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2108      	movs	r1, #8
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fac9 	bl	800721e <SDIO_GetResponse>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	210c      	movs	r1, #12
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fac0 	bl	800721e <SDIO_GetResponse>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2104      	movs	r1, #4
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fab7 	bl	800721e <SDIO_GetResponse>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	0d1a      	lsrs	r2, r3, #20
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006cb8:	f107 0310 	add.w	r3, r7, #16
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fd20 	bl	8006704 <HAL_SD_GetCardCSD>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cce:	e01f      	b.n	8006d10 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	f000 fafd 	bl	80072e0 <SDMMC_CmdSelDesel>
 8006ce6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <SD_InitCard+0x172>
  {
    return errorstate;
 8006cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf0:	e00e      	b.n	8006d10 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681d      	ldr	r5, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	466c      	mov	r4, sp
 8006cfa:	f103 0210 	add.w	r2, r3, #16
 8006cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d04:	3304      	adds	r3, #4
 8006d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f000 f9fc 	bl	8007106 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3740      	adds	r7, #64	; 0x40
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bdb0      	pop	{r4, r5, r7, pc}

08006d18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 faf8 	bl	8007326 <SDMMC_CmdGoIdleState>
 8006d36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	e072      	b.n	8006e28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fb0b 	bl	8007362 <SDMMC_CmdOperCond>
 8006d4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fae1 	bl	8007326 <SDMMC_CmdGoIdleState>
 8006d64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	e05b      	b.n	8006e28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d137      	bne.n	8006dee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fb0b 	bl	80073a0 <SDMMC_CmdAppCommand>
 8006d8a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d02d      	beq.n	8006dee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d96:	e047      	b.n	8006e28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fafe 	bl	80073a0 <SDMMC_CmdAppCommand>
 8006da4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <SD_PowerON+0x98>
    {
      return errorstate;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	e03b      	b.n	8006e28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	491e      	ldr	r1, [pc, #120]	; (8006e30 <SD_PowerON+0x118>)
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fb14 	bl	80073e4 <SDMMC_CmdAppOperCommand>
 8006dbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dc8:	e02e      	b.n	8006e28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fa24 	bl	800721e <SDIO_GetResponse>
 8006dd6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	0fdb      	lsrs	r3, r3, #31
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <SD_PowerON+0xcc>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <SD_PowerON+0xce>
 8006de4:	2300      	movs	r3, #0
 8006de6:	613b      	str	r3, [r7, #16]

    count++;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d802      	bhi.n	8006dfe <SD_PowerON+0xe6>
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0cc      	beq.n	8006d98 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d902      	bls.n	8006e0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e0c:	e00c      	b.n	8006e28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	645a      	str	r2, [r3, #68]	; 0x44
 8006e1e:	e002      	b.n	8006e26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	c1100000 	.word	0xc1100000

08006e34 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	2300      	movs	r3, #0
 8006e42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f9e7 	bl	800721e <SDIO_GetResponse>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e5a:	d102      	bne.n	8006e62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e60:	e02f      	b.n	8006ec2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e62:	f107 030c 	add.w	r3, r7, #12
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f879 	bl	8006f60 <SD_FindSCR>
 8006e6e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	e023      	b.n	8006ec2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01c      	beq.n	8006ebe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8c:	041b      	lsls	r3, r3, #16
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f000 fa85 	bl	80073a0 <SDMMC_CmdAppCommand>
 8006e96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	e00f      	b.n	8006ec2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2102      	movs	r1, #2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fabe 	bl	800742a <SDMMC_CmdBusWidth>
 8006eae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	e003      	b.n	8006ec2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e001      	b.n	8006ec2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ebe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 f99c 	bl	800721e <SDIO_GetResponse>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ef0:	d102      	bne.n	8006ef8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ef6:	e02f      	b.n	8006f58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ef8:	f107 030c 	add.w	r3, r7, #12
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f82e 	bl	8006f60 <SD_FindSCR>
 8006f04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	e023      	b.n	8006f58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01c      	beq.n	8006f54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f000 fa3a 	bl	80073a0 <SDMMC_CmdAppCommand>
 8006f2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	e00f      	b.n	8006f58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fa73 	bl	800742a <SDMMC_CmdBusWidth>
 8006f44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	e003      	b.n	8006f58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	e001      	b.n	8006f58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006f60:	b590      	push	{r4, r7, lr}
 8006f62:	b08f      	sub	sp, #60	; 0x3c
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f6a:	f7fb feb1 	bl	8002cd0 <HAL_GetTick>
 8006f6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006f74:	2300      	movs	r3, #0
 8006f76:	60bb      	str	r3, [r7, #8]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2108      	movs	r1, #8
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 f988 	bl	800729c <SDMMC_CmdBlockLength>
 8006f8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	e0b2      	b.n	80070fe <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f000 f9fb 	bl	80073a0 <SDMMC_CmdAppCommand>
 8006faa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	e0a3      	b.n	80070fe <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006fc0:	2330      	movs	r3, #48	; 0x30
 8006fc2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f107 0210 	add.w	r2, r7, #16
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f932 	bl	8007244 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fa42 	bl	800746e <SDMMC_CmdSendSCR>
 8006fea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02a      	beq.n	8007048 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	e083      	b.n	80070fe <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00f      	beq.n	8007024 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6819      	ldr	r1, [r3, #0]
 8007008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	f107 0208 	add.w	r2, r7, #8
 8007010:	18d4      	adds	r4, r2, r3
 8007012:	4608      	mov	r0, r1
 8007014:	f000 f8a2 	bl	800715c <SDIO_ReadFIFO>
 8007018:	4603      	mov	r3, r0
 800701a:	6023      	str	r3, [r4, #0]
      index++;
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	3301      	adds	r3, #1
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
 8007022:	e006      	b.n	8007032 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d012      	beq.n	8007058 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007032:	f7fb fe4d 	bl	8002cd0 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007040:	d102      	bne.n	8007048 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007042:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007046:	e05a      	b.n	80070fe <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0cf      	beq.n	8006ff6 <SD_FindSCR+0x96>
 8007056:	e000      	b.n	800705a <SD_FindSCR+0xfa>
      break;
 8007058:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2208      	movs	r2, #8
 800706e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007070:	2308      	movs	r3, #8
 8007072:	e044      	b.n	80070fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2202      	movs	r2, #2
 8007088:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800708a:	2302      	movs	r3, #2
 800708c:	e037      	b.n	80070fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2220      	movs	r2, #32
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80070a4:	2320      	movs	r3, #32
 80070a6:	e02a      	b.n	80070fe <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	061a      	lsls	r2, r3, #24
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	0e1b      	lsrs	r3, r3, #24
 80070ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	601a      	str	r2, [r3, #0]
    scr++;
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	3304      	adds	r3, #4
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	061a      	lsls	r2, r3, #24
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	0e1b      	lsrs	r3, r3, #24
 80070f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	373c      	adds	r7, #60	; 0x3c
 8007102:	46bd      	mov	sp, r7
 8007104:	bd90      	pop	{r4, r7, pc}

08007106 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007106:	b084      	sub	sp, #16
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	f107 001c 	add.w	r0, r7, #28
 8007114:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800711c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800711e:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007120:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007124:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007128:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800712c:	431a      	orrs	r2, r3
             Init.ClockDiv
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007130:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007140:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	b004      	add	sp, #16
 800715a:	4770      	bx	lr

0800715c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2203      	movs	r2, #3
 8007182:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007184:	2002      	movs	r0, #2
 8007186:	f7fb fdaf 	bl	8002ce8 <HAL_Delay>
  
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0303 	and.w	r3, r3, #3
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071ce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80071d4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80071da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80071ea:	f023 030f 	bic.w	r3, r3, #15
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	431a      	orrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	b2db      	uxtb	r3, r3
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3314      	adds	r3, #20
 800722c:	461a      	mov	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	4413      	add	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
}  
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800726a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007270:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007276:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800728e:	2300      	movs	r3, #0

}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072aa:	2310      	movs	r3, #16
 80072ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072ae:	2340      	movs	r3, #64	; 0x40
 80072b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072b2:	2300      	movs	r3, #0
 80072b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072bc:	f107 0308 	add.w	r3, r7, #8
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff ff74 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80072c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072cc:	2110      	movs	r1, #16
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f978 	bl	80075c4 <SDMMC_GetCmdResp1>
 80072d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072d6:	69fb      	ldr	r3, [r7, #28]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	; 0x28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80072f0:	2307      	movs	r3, #7
 80072f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072f4:	2340      	movs	r3, #64	; 0x40
 80072f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072f8:	2300      	movs	r3, #0
 80072fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007300:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007302:	f107 0310 	add.w	r3, r7, #16
 8007306:	4619      	mov	r1, r3
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7ff ff51 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800730e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007312:	2107      	movs	r1, #7
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f955 	bl	80075c4 <SDMMC_GetCmdResp1>
 800731a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800731e:	4618      	mov	r0, r3
 8007320:	3728      	adds	r7, #40	; 0x28
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b088      	sub	sp, #32
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007336:	2300      	movs	r3, #0
 8007338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800733e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007342:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007344:	f107 0308 	add.w	r3, r7, #8
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff ff30 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f90b 	bl	800756c <SDMMC_GetCmdError>
 8007356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007358:	69fb      	ldr	r3, [r7, #28]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3720      	adds	r7, #32
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b088      	sub	sp, #32
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800736a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800736e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007370:	2308      	movs	r3, #8
 8007372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007374:	2340      	movs	r3, #64	; 0x40
 8007376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800737c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007380:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007382:	f107 0308 	add.w	r3, r7, #8
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff ff11 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fb02 	bl	8007998 <SDMMC_GetCmdResp7>
 8007394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007396:	69fb      	ldr	r3, [r7, #28]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3720      	adds	r7, #32
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80073ae:	2337      	movs	r3, #55	; 0x37
 80073b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073b2:	2340      	movs	r3, #64	; 0x40
 80073b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073c0:	f107 0308 	add.w	r3, r7, #8
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff fef2 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80073cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d0:	2137      	movs	r1, #55	; 0x37
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8f6 	bl	80075c4 <SDMMC_GetCmdResp1>
 80073d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073da:	69fb      	ldr	r3, [r7, #28]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3720      	adds	r7, #32
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80073fa:	2329      	movs	r3, #41	; 0x29
 80073fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073fe:	2340      	movs	r3, #64	; 0x40
 8007400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800740a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800740c:	f107 0308 	add.w	r3, r7, #8
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff fecc 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fa09 	bl	8007830 <SDMMC_GetCmdResp3>
 800741e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007420:	69fb      	ldr	r3, [r7, #28]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3720      	adds	r7, #32
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b088      	sub	sp, #32
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007438:	2306      	movs	r3, #6
 800743a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800743c:	2340      	movs	r3, #64	; 0x40
 800743e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007448:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800744a:	f107 0308 	add.w	r3, r7, #8
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff fead 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007456:	f241 3288 	movw	r2, #5000	; 0x1388
 800745a:	2106      	movs	r1, #6
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f8b1 	bl	80075c4 <SDMMC_GetCmdResp1>
 8007462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007464:	69fb      	ldr	r3, [r7, #28]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b088      	sub	sp, #32
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800747a:	2333      	movs	r3, #51	; 0x33
 800747c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800747e:	2340      	movs	r3, #64	; 0x40
 8007480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800748a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800748c:	f107 0308 	add.w	r3, r7, #8
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff fe8c 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007498:	f241 3288 	movw	r2, #5000	; 0x1388
 800749c:	2133      	movs	r1, #51	; 0x33
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f890 	bl	80075c4 <SDMMC_GetCmdResp1>
 80074a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074a6:	69fb      	ldr	r3, [r7, #28]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80074bc:	2302      	movs	r3, #2
 80074be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80074c0:	23c0      	movs	r3, #192	; 0xc0
 80074c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074ce:	f107 0308 	add.w	r3, r7, #8
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff fe6b 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f960 	bl	80077a0 <SDMMC_GetCmdResp2>
 80074e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074e2:	69fb      	ldr	r3, [r7, #28]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80074fa:	2309      	movs	r3, #9
 80074fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80074fe:	23c0      	movs	r3, #192	; 0xc0
 8007500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800750a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800750c:	f107 0308 	add.w	r3, r7, #8
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff fe4c 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f941 	bl	80077a0 <SDMMC_GetCmdResp2>
 800751e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007520:	69fb      	ldr	r3, [r7, #28]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b088      	sub	sp, #32
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007538:	2303      	movs	r3, #3
 800753a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800753c:	2340      	movs	r3, #64	; 0x40
 800753e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007548:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800754a:	f107 0308 	add.w	r3, r7, #8
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff fe2d 	bl	80071b0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	2103      	movs	r1, #3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f9a6 	bl	80078ac <SDMMC_GetCmdResp6>
 8007560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007562:	69fb      	ldr	r3, [r7, #28]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3720      	adds	r7, #32
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007574:	4b11      	ldr	r3, [pc, #68]	; (80075bc <SDMMC_GetCmdError+0x50>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a11      	ldr	r2, [pc, #68]	; (80075c0 <SDMMC_GetCmdError+0x54>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	0a5b      	lsrs	r3, r3, #9
 8007580:	f241 3288 	movw	r2, #5000	; 0x1388
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	1e5a      	subs	r2, r3, #1
 800758e:	60fa      	str	r2, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007594:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007598:	e009      	b.n	80075ae <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0f1      	beq.n	800758a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	22c5      	movs	r2, #197	; 0xc5
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	20000048 	.word	0x20000048
 80075c0:	10624dd3 	.word	0x10624dd3

080075c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	460b      	mov	r3, r1
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80075d2:	4b70      	ldr	r3, [pc, #448]	; (8007794 <SDMMC_GetCmdResp1+0x1d0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a70      	ldr	r2, [pc, #448]	; (8007798 <SDMMC_GetCmdResp1+0x1d4>)
 80075d8:	fba2 2303 	umull	r2, r3, r2, r3
 80075dc:	0a5a      	lsrs	r2, r3, #9
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
 80075e4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	1e5a      	subs	r2, r3, #1
 80075ea:	61fa      	str	r2, [r7, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075f4:	e0c9      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0ef      	beq.n	80075e6 <SDMMC_GetCmdResp1+0x22>
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1ea      	bne.n	80075e6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2204      	movs	r2, #4
 8007620:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007622:	2304      	movs	r3, #4
 8007624:	e0b1      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d004      	beq.n	800763c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2201      	movs	r2, #1
 8007636:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007638:	2301      	movs	r3, #1
 800763a:	e0a6      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	22c5      	movs	r2, #197	; 0xc5
 8007640:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff fdde 	bl	8007204 <SDIO_GetCommandResponse>
 8007648:	4603      	mov	r3, r0
 800764a:	461a      	mov	r2, r3
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	4293      	cmp	r3, r2
 8007650:	d001      	beq.n	8007656 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007652:	2301      	movs	r3, #1
 8007654:	e099      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007656:	2100      	movs	r1, #0
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff fde0 	bl	800721e <SDIO_GetResponse>
 800765e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	4b4e      	ldr	r3, [pc, #312]	; (800779c <SDMMC_GetCmdResp1+0x1d8>)
 8007664:	4013      	ands	r3, r2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800766a:	2300      	movs	r3, #0
 800766c:	e08d      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	da02      	bge.n	800767a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007674:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007678:	e087      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007684:	2340      	movs	r3, #64	; 0x40
 8007686:	e080      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007692:	2380      	movs	r3, #128	; 0x80
 8007694:	e079      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80076a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076a4:	e071      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80076b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076b4:	e069      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80076c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076c4:	e061      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80076d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076d4:	e059      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80076e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076e4:	e051      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80076f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076f4:	e049      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007704:	e041      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007714:	e039      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007720:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007724:	e031      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007730:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007734:	e029      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007740:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007744:	e021      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007754:	e019      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007760:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007764:	e011      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007770:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007774:	e009      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007780:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007784:	e001      	b.n	800778a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3720      	adds	r7, #32
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000048 	.word	0x20000048
 8007798:	10624dd3 	.word	0x10624dd3
 800779c:	fdffe008 	.word	0xfdffe008

080077a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077a8:	4b1f      	ldr	r3, [pc, #124]	; (8007828 <SDMMC_GetCmdResp2+0x88>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1f      	ldr	r2, [pc, #124]	; (800782c <SDMMC_GetCmdResp2+0x8c>)
 80077ae:	fba2 2303 	umull	r2, r3, r2, r3
 80077b2:	0a5b      	lsrs	r3, r3, #9
 80077b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1e5a      	subs	r2, r3, #1
 80077c2:	60fa      	str	r2, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077cc:	e026      	b.n	800781c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ef      	beq.n	80077be <SDMMC_GetCmdResp2+0x1e>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1ea      	bne.n	80077be <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2204      	movs	r2, #4
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077fa:	2304      	movs	r3, #4
 80077fc:	e00e      	b.n	800781c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d004      	beq.n	8007814 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007810:	2301      	movs	r3, #1
 8007812:	e003      	b.n	800781c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	22c5      	movs	r2, #197	; 0xc5
 8007818:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	20000048 	.word	0x20000048
 800782c:	10624dd3 	.word	0x10624dd3

08007830 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007838:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <SDMMC_GetCmdResp3+0x74>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1a      	ldr	r2, [pc, #104]	; (80078a8 <SDMMC_GetCmdResp3+0x78>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	0a5b      	lsrs	r3, r3, #9
 8007844:	f241 3288 	movw	r2, #5000	; 0x1388
 8007848:	fb02 f303 	mul.w	r3, r2, r3
 800784c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	1e5a      	subs	r2, r3, #1
 8007852:	60fa      	str	r2, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007858:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800785c:	e01b      	b.n	8007896 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0ef      	beq.n	800784e <SDMMC_GetCmdResp3+0x1e>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1ea      	bne.n	800784e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d004      	beq.n	800788e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2204      	movs	r2, #4
 8007888:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800788a:	2304      	movs	r3, #4
 800788c:	e003      	b.n	8007896 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	22c5      	movs	r2, #197	; 0xc5
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	20000048 	.word	0x20000048
 80078a8:	10624dd3 	.word	0x10624dd3

080078ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	460b      	mov	r3, r1
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078ba:	4b35      	ldr	r3, [pc, #212]	; (8007990 <SDMMC_GetCmdResp6+0xe4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a35      	ldr	r2, [pc, #212]	; (8007994 <SDMMC_GetCmdResp6+0xe8>)
 80078c0:	fba2 2303 	umull	r2, r3, r2, r3
 80078c4:	0a5b      	lsrs	r3, r3, #9
 80078c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ca:	fb02 f303 	mul.w	r3, r2, r3
 80078ce:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	1e5a      	subs	r2, r3, #1
 80078d4:	61fa      	str	r2, [r7, #28]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078de:	e052      	b.n	8007986 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0ef      	beq.n	80078d0 <SDMMC_GetCmdResp6+0x24>
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1ea      	bne.n	80078d0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2204      	movs	r2, #4
 800790a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800790c:	2304      	movs	r3, #4
 800790e:	e03a      	b.n	8007986 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d004      	beq.n	8007926 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007922:	2301      	movs	r3, #1
 8007924:	e02f      	b.n	8007986 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f7ff fc6c 	bl	8007204 <SDIO_GetCommandResponse>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	4293      	cmp	r3, r2
 8007934:	d001      	beq.n	800793a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007936:	2301      	movs	r3, #1
 8007938:	e025      	b.n	8007986 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	22c5      	movs	r2, #197	; 0xc5
 800793e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007940:	2100      	movs	r1, #0
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fc6b 	bl	800721e <SDIO_GetResponse>
 8007948:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	0c1b      	lsrs	r3, r3, #16
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800795e:	2300      	movs	r3, #0
 8007960:	e011      	b.n	8007986 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800796c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007970:	e009      	b.n	8007986 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800797c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007980:	e001      	b.n	8007986 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000048 	.word	0x20000048
 8007994:	10624dd3 	.word	0x10624dd3

08007998 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079a0:	4b22      	ldr	r3, [pc, #136]	; (8007a2c <SDMMC_GetCmdResp7+0x94>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a22      	ldr	r2, [pc, #136]	; (8007a30 <SDMMC_GetCmdResp7+0x98>)
 80079a6:	fba2 2303 	umull	r2, r3, r2, r3
 80079aa:	0a5b      	lsrs	r3, r3, #9
 80079ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b0:	fb02 f303 	mul.w	r3, r2, r3
 80079b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	1e5a      	subs	r2, r3, #1
 80079ba:	60fa      	str	r2, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d102      	bne.n	80079c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079c4:	e02c      	b.n	8007a20 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0ef      	beq.n	80079b6 <SDMMC_GetCmdResp7+0x1e>
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1ea      	bne.n	80079b6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e4:	f003 0304 	and.w	r3, r3, #4
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2204      	movs	r2, #4
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079f2:	2304      	movs	r3, #4
 80079f4:	e014      	b.n	8007a20 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d004      	beq.n	8007a0c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e009      	b.n	8007a20 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2240      	movs	r2, #64	; 0x40
 8007a1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007a1e:	2300      	movs	r3, #0
  
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	20000048 	.word	0x20000048
 8007a30:	10624dd3 	.word	0x10624dd3

08007a34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a34:	b084      	sub	sp, #16
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	f107 001c 	add.w	r0, r7, #28
 8007a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d122      	bne.n	8007a92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d105      	bne.n	8007a86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fac6 	bl	8009018 <USB_CoreReset>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
 8007a90:	e01a      	b.n	8007ac8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 faba 	bl	8009018 <USB_CoreReset>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
 8007aba:	e005      	b.n	8007ac8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d10b      	bne.n	8007ae6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f043 0206 	orr.w	r2, r3, #6
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f043 0220 	orr.w	r2, r3, #32
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007af2:	b004      	add	sp, #16
 8007af4:	4770      	bx	lr
	...

08007af8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	4613      	mov	r3, r2
 8007b04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d165      	bne.n	8007bd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4a41      	ldr	r2, [pc, #260]	; (8007c14 <USB_SetTurnaroundTime+0x11c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d906      	bls.n	8007b22 <USB_SetTurnaroundTime+0x2a>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4a40      	ldr	r2, [pc, #256]	; (8007c18 <USB_SetTurnaroundTime+0x120>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d202      	bcs.n	8007b22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b1c:	230f      	movs	r3, #15
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	e062      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	4a3c      	ldr	r2, [pc, #240]	; (8007c18 <USB_SetTurnaroundTime+0x120>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d306      	bcc.n	8007b38 <USB_SetTurnaroundTime+0x40>
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	4a3b      	ldr	r2, [pc, #236]	; (8007c1c <USB_SetTurnaroundTime+0x124>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d202      	bcs.n	8007b38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b32:	230e      	movs	r3, #14
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	e057      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4a38      	ldr	r2, [pc, #224]	; (8007c1c <USB_SetTurnaroundTime+0x124>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d306      	bcc.n	8007b4e <USB_SetTurnaroundTime+0x56>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4a37      	ldr	r2, [pc, #220]	; (8007c20 <USB_SetTurnaroundTime+0x128>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d202      	bcs.n	8007b4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b48:	230d      	movs	r3, #13
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	e04c      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	4a33      	ldr	r2, [pc, #204]	; (8007c20 <USB_SetTurnaroundTime+0x128>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d306      	bcc.n	8007b64 <USB_SetTurnaroundTime+0x6c>
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	4a32      	ldr	r2, [pc, #200]	; (8007c24 <USB_SetTurnaroundTime+0x12c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d802      	bhi.n	8007b64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b5e:	230c      	movs	r3, #12
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	e041      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4a2f      	ldr	r2, [pc, #188]	; (8007c24 <USB_SetTurnaroundTime+0x12c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d906      	bls.n	8007b7a <USB_SetTurnaroundTime+0x82>
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4a2e      	ldr	r2, [pc, #184]	; (8007c28 <USB_SetTurnaroundTime+0x130>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d802      	bhi.n	8007b7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007b74:	230b      	movs	r3, #11
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	e036      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4a2a      	ldr	r2, [pc, #168]	; (8007c28 <USB_SetTurnaroundTime+0x130>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d906      	bls.n	8007b90 <USB_SetTurnaroundTime+0x98>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	4a29      	ldr	r2, [pc, #164]	; (8007c2c <USB_SetTurnaroundTime+0x134>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d802      	bhi.n	8007b90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007b8a:	230a      	movs	r3, #10
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	e02b      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4a26      	ldr	r2, [pc, #152]	; (8007c2c <USB_SetTurnaroundTime+0x134>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d906      	bls.n	8007ba6 <USB_SetTurnaroundTime+0xae>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4a25      	ldr	r2, [pc, #148]	; (8007c30 <USB_SetTurnaroundTime+0x138>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d202      	bcs.n	8007ba6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ba0:	2309      	movs	r3, #9
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e020      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4a21      	ldr	r2, [pc, #132]	; (8007c30 <USB_SetTurnaroundTime+0x138>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d306      	bcc.n	8007bbc <USB_SetTurnaroundTime+0xc4>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4a20      	ldr	r2, [pc, #128]	; (8007c34 <USB_SetTurnaroundTime+0x13c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d802      	bhi.n	8007bbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	617b      	str	r3, [r7, #20]
 8007bba:	e015      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <USB_SetTurnaroundTime+0x13c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d906      	bls.n	8007bd2 <USB_SetTurnaroundTime+0xda>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4a1c      	ldr	r2, [pc, #112]	; (8007c38 <USB_SetTurnaroundTime+0x140>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d202      	bcs.n	8007bd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007bcc:	2307      	movs	r3, #7
 8007bce:	617b      	str	r3, [r7, #20]
 8007bd0:	e00a      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007bd2:	2306      	movs	r3, #6
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	e007      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007bde:	2309      	movs	r3, #9
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	e001      	b.n	8007be8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007be4:	2309      	movs	r3, #9
 8007be6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	029b      	lsls	r3, r3, #10
 8007bfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c00:	431a      	orrs	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	00d8acbf 	.word	0x00d8acbf
 8007c18:	00e4e1c0 	.word	0x00e4e1c0
 8007c1c:	00f42400 	.word	0x00f42400
 8007c20:	01067380 	.word	0x01067380
 8007c24:	011a499f 	.word	0x011a499f
 8007c28:	01312cff 	.word	0x01312cff
 8007c2c:	014ca43f 	.word	0x014ca43f
 8007c30:	016e3600 	.word	0x016e3600
 8007c34:	01a6ab1f 	.word	0x01a6ab1f
 8007c38:	01e84800 	.word	0x01e84800

08007c3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f043 0201 	orr.w	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f023 0201 	bic.w	r2, r3, #1
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d106      	bne.n	8007cac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60da      	str	r2, [r3, #12]
 8007caa:	e00b      	b.n	8007cc4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60da      	str	r2, [r3, #12]
 8007cbe:	e001      	b.n	8007cc4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e003      	b.n	8007ccc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007cc4:	2032      	movs	r0, #50	; 0x32
 8007cc6:	f7fb f80f 	bl	8002ce8 <HAL_Delay>

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007cee:	2300      	movs	r3, #0
 8007cf0:	613b      	str	r3, [r7, #16]
 8007cf2:	e009      	b.n	8007d08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	3340      	adds	r3, #64	; 0x40
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	2200      	movs	r2, #0
 8007d00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3301      	adds	r3, #1
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	2b0e      	cmp	r3, #14
 8007d0c:	d9f2      	bls.n	8007cf4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d11c      	bne.n	8007d4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d22:	f043 0302 	orr.w	r3, r3, #2
 8007d26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8007d4c:	e00b      	b.n	8007d66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	2300      	movs	r3, #0
 8007d70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d78:	4619      	mov	r1, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d80:	461a      	mov	r2, r3
 8007d82:	680b      	ldr	r3, [r1, #0]
 8007d84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d10c      	bne.n	8007da6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d92:	2100      	movs	r1, #0
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f949 	bl	800802c <USB_SetDevSpeed>
 8007d9a:	e008      	b.n	8007dae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f944 	bl	800802c <USB_SetDevSpeed>
 8007da4:	e003      	b.n	8007dae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007da6:	2103      	movs	r1, #3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f93f 	bl	800802c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dae:	2110      	movs	r1, #16
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f8f3 	bl	8007f9c <USB_FlushTxFifo>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f911 	bl	8007fe8 <USB_FlushRxFifo>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de2:	461a      	mov	r2, r3
 8007de4:	2300      	movs	r3, #0
 8007de6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dee:	461a      	mov	r2, r3
 8007df0:	2300      	movs	r3, #0
 8007df2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007df4:	2300      	movs	r3, #0
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	e043      	b.n	8007e82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e10:	d118      	bne.n	8007e44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10a      	bne.n	8007e2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e24:	461a      	mov	r2, r3
 8007e26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e2a:	6013      	str	r3, [r2, #0]
 8007e2c:	e013      	b.n	8007e56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	e008      	b.n	8007e56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	461a      	mov	r2, r3
 8007e52:	2300      	movs	r3, #0
 8007e54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e62:	461a      	mov	r2, r3
 8007e64:	2300      	movs	r3, #0
 8007e66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e74:	461a      	mov	r2, r3
 8007e76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d3b7      	bcc.n	8007dfa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	613b      	str	r3, [r7, #16]
 8007e8e:	e043      	b.n	8007f18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ea6:	d118      	bne.n	8007eda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	e013      	b.n	8007eec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	e008      	b.n	8007eec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	2300      	movs	r3, #0
 8007eea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef8:	461a      	mov	r2, r3
 8007efa:	2300      	movs	r3, #0
 8007efc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	3301      	adds	r3, #1
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3b7      	bcc.n	8007e90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d105      	bne.n	8007f54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	f043 0210 	orr.w	r2, r3, #16
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <USB_DevInit+0x2c4>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d005      	beq.n	8007f72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	f043 0208 	orr.w	r2, r3, #8
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d107      	bne.n	8007f88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f80:	f043 0304 	orr.w	r3, r3, #4
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f94:	b004      	add	sp, #16
 8007f96:	4770      	bx	lr
 8007f98:	803c3800 	.word	0x803c3800

08007f9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	019b      	lsls	r3, r3, #6
 8007fae:	f043 0220 	orr.w	r2, r3, #32
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4a09      	ldr	r2, [pc, #36]	; (8007fe4 <USB_FlushTxFifo+0x48>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d901      	bls.n	8007fc8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e006      	b.n	8007fd6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	d0f0      	beq.n	8007fb6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	00030d40 	.word	0x00030d40

08007fe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2210      	movs	r2, #16
 8007ff8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a09      	ldr	r2, [pc, #36]	; (8008028 <USB_FlushRxFifo+0x40>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d901      	bls.n	800800c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e006      	b.n	800801a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f003 0310 	and.w	r3, r3, #16
 8008014:	2b10      	cmp	r3, #16
 8008016:	d0f0      	beq.n	8007ffa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	00030d40 	.word	0x00030d40

0800802c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800804c:	4313      	orrs	r3, r2
 800804e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800805e:	b480      	push	{r7}
 8008060:	b087      	sub	sp, #28
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 0306 	and.w	r3, r3, #6
 8008076:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800807e:	2300      	movs	r3, #0
 8008080:	75fb      	strb	r3, [r7, #23]
 8008082:	e00a      	b.n	800809a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b02      	cmp	r3, #2
 8008088:	d002      	beq.n	8008090 <USB_GetDevSpeed+0x32>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b06      	cmp	r3, #6
 800808e:	d102      	bne.n	8008096 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008090:	2302      	movs	r3, #2
 8008092:	75fb      	strb	r3, [r7, #23]
 8008094:	e001      	b.n	800809a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008096:	230f      	movs	r3, #15
 8008098:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800809a:	7dfb      	ldrb	r3, [r7, #23]
}
 800809c:	4618      	mov	r0, r3
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d13a      	bne.n	800813a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ca:	69da      	ldr	r2, [r3, #28]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 030f 	and.w	r3, r3, #15
 80080d4:	2101      	movs	r1, #1
 80080d6:	fa01 f303 	lsl.w	r3, r1, r3
 80080da:	b29b      	uxth	r3, r3
 80080dc:	68f9      	ldr	r1, [r7, #12]
 80080de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080e2:	4313      	orrs	r3, r2
 80080e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d155      	bne.n	80081a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	78db      	ldrb	r3, [r3, #3]
 8008116:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008118:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	059b      	lsls	r3, r3, #22
 800811e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008120:	4313      	orrs	r3, r2
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	0151      	lsls	r1, r2, #5
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	440a      	add	r2, r1
 800812a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800812e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e036      	b.n	80081a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008140:	69da      	ldr	r2, [r3, #28]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	2101      	movs	r1, #1
 800814c:	fa01 f303 	lsl.w	r3, r1, r3
 8008150:	041b      	lsls	r3, r3, #16
 8008152:	68f9      	ldr	r1, [r7, #12]
 8008154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008158:	4313      	orrs	r3, r2
 800815a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d11a      	bne.n	80081a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800818e:	430b      	orrs	r3, r1
 8008190:	4313      	orrs	r3, r2
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	0151      	lsls	r1, r2, #5
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	440a      	add	r2, r1
 800819a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800819e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
	...

080081b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d161      	bne.n	8008298 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081ea:	d11f      	bne.n	800822c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	0151      	lsls	r1, r2, #5
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	440a      	add	r2, r1
 8008202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008206:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800820a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	0151      	lsls	r1, r2, #5
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	440a      	add	r2, r1
 8008222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008226:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800822a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 030f 	and.w	r3, r3, #15
 800823c:	2101      	movs	r1, #1
 800823e:	fa01 f303 	lsl.w	r3, r1, r3
 8008242:	b29b      	uxth	r3, r3
 8008244:	43db      	mvns	r3, r3
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800824c:	4013      	ands	r3, r2
 800824e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008256:	69da      	ldr	r2, [r3, #28]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	f003 030f 	and.w	r3, r3, #15
 8008260:	2101      	movs	r1, #1
 8008262:	fa01 f303 	lsl.w	r3, r1, r3
 8008266:	b29b      	uxth	r3, r3
 8008268:	43db      	mvns	r3, r3
 800826a:	68f9      	ldr	r1, [r7, #12]
 800826c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008270:	4013      	ands	r3, r2
 8008272:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	0159      	lsls	r1, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	440b      	add	r3, r1
 800828a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828e:	4619      	mov	r1, r3
 8008290:	4b35      	ldr	r3, [pc, #212]	; (8008368 <USB_DeactivateEndpoint+0x1b0>)
 8008292:	4013      	ands	r3, r2
 8008294:	600b      	str	r3, [r1, #0]
 8008296:	e060      	b.n	800835a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082ae:	d11f      	bne.n	80082f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	0151      	lsls	r1, r2, #5
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	440a      	add	r2, r1
 80082c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	0151      	lsls	r1, r2, #5
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	440a      	add	r2, r1
 80082e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	f003 030f 	and.w	r3, r3, #15
 8008300:	2101      	movs	r1, #1
 8008302:	fa01 f303 	lsl.w	r3, r1, r3
 8008306:	041b      	lsls	r3, r3, #16
 8008308:	43db      	mvns	r3, r3
 800830a:	68f9      	ldr	r1, [r7, #12]
 800830c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008310:	4013      	ands	r3, r2
 8008312:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831a:	69da      	ldr	r2, [r3, #28]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	2101      	movs	r1, #1
 8008326:	fa01 f303 	lsl.w	r3, r1, r3
 800832a:	041b      	lsls	r3, r3, #16
 800832c:	43db      	mvns	r3, r3
 800832e:	68f9      	ldr	r1, [r7, #12]
 8008330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008334:	4013      	ands	r3, r2
 8008336:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	0159      	lsls	r1, r3, #5
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	440b      	add	r3, r1
 800834e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008352:	4619      	mov	r1, r3
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <USB_DeactivateEndpoint+0x1b4>)
 8008356:	4013      	ands	r3, r2
 8008358:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	ec337800 	.word	0xec337800
 800836c:	eff37800 	.word	0xeff37800

08008370 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	; 0x28
 8008374:	af02      	add	r7, sp, #8
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	785b      	ldrb	r3, [r3, #1]
 800838c:	2b01      	cmp	r3, #1
 800838e:	f040 815c 	bne.w	800864a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d132      	bne.n	8008400 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	0151      	lsls	r1, r2, #5
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	440a      	add	r2, r1
 80083b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083f8:	0cdb      	lsrs	r3, r3, #19
 80083fa:	04db      	lsls	r3, r3, #19
 80083fc:	6113      	str	r3, [r2, #16]
 80083fe:	e074      	b.n	80084ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	0151      	lsls	r1, r2, #5
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	440a      	add	r2, r1
 8008416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800841a:	0cdb      	lsrs	r3, r3, #19
 800841c:	04db      	lsls	r3, r3, #19
 800841e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	0151      	lsls	r1, r2, #5
 8008432:	69fa      	ldr	r2, [r7, #28]
 8008434:	440a      	add	r2, r1
 8008436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800843a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800843e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008450:	691a      	ldr	r2, [r3, #16]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6959      	ldr	r1, [r3, #20]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	440b      	add	r3, r1
 800845c:	1e59      	subs	r1, r3, #1
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	fbb1 f3f3 	udiv	r3, r1, r3
 8008466:	04d9      	lsls	r1, r3, #19
 8008468:	4b9d      	ldr	r3, [pc, #628]	; (80086e0 <USB_EPStartXfer+0x370>)
 800846a:	400b      	ands	r3, r1
 800846c:	69b9      	ldr	r1, [r7, #24]
 800846e:	0148      	lsls	r0, r1, #5
 8008470:	69f9      	ldr	r1, [r7, #28]
 8008472:	4401      	add	r1, r0
 8008474:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008478:	4313      	orrs	r3, r2
 800847a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008492:	69b9      	ldr	r1, [r7, #24]
 8008494:	0148      	lsls	r0, r1, #5
 8008496:	69f9      	ldr	r1, [r7, #28]
 8008498:	4401      	add	r1, r0
 800849a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800849e:	4313      	orrs	r3, r2
 80084a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	78db      	ldrb	r3, [r3, #3]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d11f      	bne.n	80084ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80084c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d14b      	bne.n	8008588 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d009      	beq.n	800850c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008504:	461a      	mov	r2, r3
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	78db      	ldrb	r3, [r3, #3]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d128      	bne.n	8008566 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008520:	2b00      	cmp	r3, #0
 8008522:	d110      	bne.n	8008546 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	440a      	add	r2, r1
 800853a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	e00f      	b.n	8008566 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	0151      	lsls	r1, r2, #5
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	440a      	add	r2, r1
 800855c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008564:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	0151      	lsls	r1, r2, #5
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	440a      	add	r2, r1
 800857c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008580:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	e12f      	b.n	80087e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d015      	beq.n	80085dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8117 	beq.w	80087e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	2101      	movs	r1, #1
 80085cc:	fa01 f303 	lsl.w	r3, r1, r3
 80085d0:	69f9      	ldr	r1, [r7, #28]
 80085d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085d6:	4313      	orrs	r3, r2
 80085d8:	634b      	str	r3, [r1, #52]	; 0x34
 80085da:	e105      	b.n	80087e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d110      	bne.n	800860e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	0151      	lsls	r1, r2, #5
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	440a      	add	r2, r1
 8008602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	e00f      	b.n	800862e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	0151      	lsls	r1, r2, #5
 8008620:	69fa      	ldr	r2, [r7, #28]
 8008622:	440a      	add	r2, r1
 8008624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800862c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	68d9      	ldr	r1, [r3, #12]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	781a      	ldrb	r2, [r3, #0]
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	b298      	uxth	r0, r3
 800863c:	79fb      	ldrb	r3, [r7, #7]
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	4603      	mov	r3, r0
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 fa2b 	bl	8008a9e <USB_WritePacket>
 8008648:	e0ce      	b.n	80087e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	69fa      	ldr	r2, [r7, #28]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008664:	0cdb      	lsrs	r3, r3, #19
 8008666:	04db      	lsls	r3, r3, #19
 8008668:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	015a      	lsls	r2, r3, #5
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	4413      	add	r3, r2
 8008672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	0151      	lsls	r1, r2, #5
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	440a      	add	r2, r1
 8008680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008684:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008688:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800868c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d126      	bne.n	80086e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a2:	691a      	ldr	r2, [r3, #16]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086ac:	69b9      	ldr	r1, [r7, #24]
 80086ae:	0148      	lsls	r0, r1, #5
 80086b0:	69f9      	ldr	r1, [r7, #28]
 80086b2:	4401      	add	r1, r0
 80086b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086b8:	4313      	orrs	r3, r2
 80086ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086da:	6113      	str	r3, [r2, #16]
 80086dc:	e036      	b.n	800874c <USB_EPStartXfer+0x3dc>
 80086de:	bf00      	nop
 80086e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	695a      	ldr	r2, [r3, #20]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	1e5a      	subs	r2, r3, #1
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	8afb      	ldrh	r3, [r7, #22]
 800870a:	04d9      	lsls	r1, r3, #19
 800870c:	4b39      	ldr	r3, [pc, #228]	; (80087f4 <USB_EPStartXfer+0x484>)
 800870e:	400b      	ands	r3, r1
 8008710:	69b9      	ldr	r1, [r7, #24]
 8008712:	0148      	lsls	r0, r1, #5
 8008714:	69f9      	ldr	r1, [r7, #28]
 8008716:	4401      	add	r1, r0
 8008718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800871c:	4313      	orrs	r3, r2
 800871e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872c:	691a      	ldr	r2, [r3, #16]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	8af9      	ldrh	r1, [r7, #22]
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800873c:	69b9      	ldr	r1, [r7, #24]
 800873e:	0148      	lsls	r0, r1, #5
 8008740:	69f9      	ldr	r1, [r7, #28]
 8008742:	4401      	add	r1, r0
 8008744:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008748:	4313      	orrs	r3, r2
 800874a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d10d      	bne.n	800876e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d009      	beq.n	800876e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	68d9      	ldr	r1, [r3, #12]
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876a:	460a      	mov	r2, r1
 800876c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	78db      	ldrb	r3, [r3, #3]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d128      	bne.n	80087c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008782:	2b00      	cmp	r3, #0
 8008784:	d110      	bne.n	80087a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	0151      	lsls	r1, r2, #5
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	440a      	add	r2, r1
 800879c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	e00f      	b.n	80087c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	0151      	lsls	r1, r2, #5
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	440a      	add	r2, r1
 80087be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	0151      	lsls	r1, r2, #5
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	440a      	add	r2, r1
 80087de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3720      	adds	r7, #32
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	1ff80000 	.word	0x1ff80000

080087f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	4613      	mov	r3, r2
 8008804:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	785b      	ldrb	r3, [r3, #1]
 8008814:	2b01      	cmp	r3, #1
 8008816:	f040 80cd 	bne.w	80089b4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d132      	bne.n	8008888 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	0151      	lsls	r1, r2, #5
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	440a      	add	r2, r1
 8008838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800883c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008840:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008844:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	0151      	lsls	r1, r2, #5
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	440a      	add	r2, r1
 800885c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	0151      	lsls	r1, r2, #5
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	440a      	add	r2, r1
 800887c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008880:	0cdb      	lsrs	r3, r3, #19
 8008882:	04db      	lsls	r3, r3, #19
 8008884:	6113      	str	r3, [r2, #16]
 8008886:	e04e      	b.n	8008926 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a2:	0cdb      	lsrs	r3, r3, #19
 80088a4:	04db      	lsls	r3, r3, #19
 80088a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	0151      	lsls	r1, r2, #5
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	440a      	add	r2, r1
 80088be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	695a      	ldr	r2, [r3, #20]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d903      	bls.n	80088e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	0151      	lsls	r1, r2, #5
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	440a      	add	r2, r1
 80088f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008916:	6939      	ldr	r1, [r7, #16]
 8008918:	0148      	lsls	r0, r1, #5
 800891a:	6979      	ldr	r1, [r7, #20]
 800891c:	4401      	add	r1, r0
 800891e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008922:	4313      	orrs	r3, r2
 8008924:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d11e      	bne.n	800896a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008940:	461a      	mov	r2, r3
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	015a      	lsls	r2, r3, #5
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	4413      	add	r3, r2
 8008950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	0151      	lsls	r1, r2, #5
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	440a      	add	r2, r1
 800895e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	e092      	b.n	8008a90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	0151      	lsls	r1, r2, #5
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	440a      	add	r2, r1
 8008980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008984:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008988:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d07e      	beq.n	8008a90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	2101      	movs	r1, #1
 80089a4:	fa01 f303 	lsl.w	r3, r1, r3
 80089a8:	6979      	ldr	r1, [r7, #20]
 80089aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089ae:	4313      	orrs	r3, r2
 80089b0:	634b      	str	r3, [r1, #52]	; 0x34
 80089b2:	e06d      	b.n	8008a90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ce:	0cdb      	lsrs	r3, r3, #19
 80089d0:	04db      	lsls	r3, r3, #19
 80089d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089f6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	0151      	lsls	r1, r2, #5
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	440a      	add	r2, r1
 8008a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a34:	691a      	ldr	r2, [r3, #16]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a3e:	6939      	ldr	r1, [r7, #16]
 8008a40:	0148      	lsls	r0, r1, #5
 8008a42:	6979      	ldr	r1, [r7, #20]
 8008a44:	4401      	add	r1, r0
 8008a46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008a4e:	79fb      	ldrb	r3, [r7, #7]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d10d      	bne.n	8008a70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	68d9      	ldr	r1, [r3, #12]
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	460a      	mov	r2, r1
 8008a6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	0151      	lsls	r1, r2, #5
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	440a      	add	r2, r1
 8008a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b089      	sub	sp, #36	; 0x24
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	461a      	mov	r2, r3
 8008aac:	460b      	mov	r3, r1
 8008aae:	71fb      	strb	r3, [r7, #7]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008abc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d11a      	bne.n	8008afa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ac4:	88bb      	ldrh	r3, [r7, #4]
 8008ac6:	3303      	adds	r3, #3
 8008ac8:	089b      	lsrs	r3, r3, #2
 8008aca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008acc:	2300      	movs	r3, #0
 8008ace:	61bb      	str	r3, [r7, #24]
 8008ad0:	e00f      	b.n	8008af2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	031a      	lsls	r2, r3, #12
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ade:	461a      	mov	r2, r3
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	3301      	adds	r3, #1
 8008af0:	61bb      	str	r3, [r7, #24]
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d3eb      	bcc.n	8008ad2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3724      	adds	r7, #36	; 0x24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b089      	sub	sp, #36	; 0x24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	4613      	mov	r3, r2
 8008b14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008b1e:	88fb      	ldrh	r3, [r7, #6]
 8008b20:	3303      	adds	r3, #3
 8008b22:	089b      	lsrs	r3, r3, #2
 8008b24:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008b26:	2300      	movs	r3, #0
 8008b28:	61bb      	str	r3, [r7, #24]
 8008b2a:	e00b      	b.n	8008b44 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	3301      	adds	r3, #1
 8008b42:	61bb      	str	r3, [r7, #24]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d3ef      	bcc.n	8008b2c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008b4c:	69fb      	ldr	r3, [r7, #28]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3724      	adds	r7, #36	; 0x24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d12c      	bne.n	8008bd0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	db12      	blt.n	8008bae <USB_EPSetStall+0x54>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00f      	beq.n	8008bae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	0151      	lsls	r1, r2, #5
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	440a      	add	r2, r1
 8008ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	0151      	lsls	r1, r2, #5
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	440a      	add	r2, r1
 8008bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	e02b      	b.n	8008c28 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	db12      	blt.n	8008c08 <USB_EPSetStall+0xae>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00f      	beq.n	8008c08 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c06:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	0151      	lsls	r1, r2, #5
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d128      	bne.n	8008ca4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	0151      	lsls	r1, r2, #5
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	440a      	add	r2, r1
 8008c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	78db      	ldrb	r3, [r3, #3]
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d003      	beq.n	8008c82 <USB_EPClearStall+0x4c>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	78db      	ldrb	r3, [r3, #3]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d138      	bne.n	8008cf4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	0151      	lsls	r1, r2, #5
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	440a      	add	r2, r1
 8008c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ca0:	6013      	str	r3, [r2, #0]
 8008ca2:	e027      	b.n	8008cf4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	0151      	lsls	r1, r2, #5
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	440a      	add	r2, r1
 8008cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	78db      	ldrb	r3, [r3, #3]
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d003      	beq.n	8008cd4 <USB_EPClearStall+0x9e>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d10f      	bne.n	8008cf4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d24:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	011b      	lsls	r3, r3, #4
 8008d32:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d36:	68f9      	ldr	r1, [r7, #12]
 8008d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b085      	sub	sp, #20
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d68:	f023 0303 	bic.w	r3, r3, #3
 8008d6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d7c:	f023 0302 	bic.w	r3, r3, #2
 8008d80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008daa:	f023 0303 	bic.w	r3, r3, #3
 8008dae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dbe:	f043 0302 	orr.w	r3, r3, #2
 8008dc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	4013      	ands	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008dea:	68fb      	ldr	r3, [r7, #12]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	4013      	ands	r3, r2
 8008e1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	0c1b      	lsrs	r3, r3, #16
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	b29b      	uxth	r3, r3
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e8e:	68bb      	ldr	r3, [r7, #8]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008ec0:	78fb      	ldrb	r3, [r7, #3]
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ecc:	01db      	lsls	r3, r3, #7
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	015a      	lsls	r2, r3, #5
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	4413      	add	r3, r2
 8008ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008eea:	68bb      	ldr	r3, [r7, #8]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	371c      	adds	r7, #28
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	f003 0301 	and.w	r3, r3, #1
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f2e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f32:	f023 0307 	bic.w	r3, r3, #7
 8008f36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
	...

08008f5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	460b      	mov	r3, r1
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	333c      	adds	r3, #60	; 0x3c
 8008f72:	3304      	adds	r3, #4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	4a26      	ldr	r2, [pc, #152]	; (8009014 <USB_EP0_OutStart+0xb8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d90a      	bls.n	8008f96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f90:	d101      	bne.n	8008f96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e037      	b.n	8009006 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc4:	f043 0318 	orr.w	r3, r3, #24
 8008fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fde:	7afb      	ldrb	r3, [r7, #11]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d10f      	bne.n	8009004 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fea:	461a      	mov	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009002:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	4f54300a 	.word	0x4f54300a

08009018 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	3301      	adds	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4a13      	ldr	r2, [pc, #76]	; (800907c <USB_CoreReset+0x64>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d901      	bls.n	8009036 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e01b      	b.n	800906e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	2b00      	cmp	r3, #0
 800903c:	daf2      	bge.n	8009024 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	f043 0201 	orr.w	r2, r3, #1
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3301      	adds	r3, #1
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4a09      	ldr	r2, [pc, #36]	; (800907c <USB_CoreReset+0x64>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d901      	bls.n	8009060 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e006      	b.n	800906e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b01      	cmp	r3, #1
 800906a:	d0f0      	beq.n	800904e <USB_CoreReset+0x36>

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	00030d40 	.word	0x00030d40

08009080 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 800908c:	2044      	movs	r0, #68	; 0x44
 800908e:	f001 fead 	bl	800adec <USBD_static_malloc>
 8009092:	4602      	mov	r2, r0
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e016      	b.n	80090d6 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 80090b0:	2340      	movs	r3, #64	; 0x40
 80090b2:	2202      	movs	r2, #2
 80090b4:	2181      	movs	r1, #129	; 0x81
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 fd75 	bl	800aba6 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	2202      	movs	r2, #2
 80090c0:	2101      	movs	r1, #1
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 fd6f 	bl	800aba6 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 80090c8:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 80090ca:	2340      	movs	r3, #64	; 0x40
 80090cc:	2101      	movs	r1, #1
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 fe58 	bl	800ad84 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
  }
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 80090ea:	2181      	movs	r1, #129	; 0x81
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 fd80 	bl	800abf2 <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 80090f2:	2101      	movs	r1, #1
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 fd7c 	bl	800abf2 <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <USBD_Midi_Setup+0x26>
 800911a:	2b20      	cmp	r3, #32
 800911c:	d10b      	bne.n	8009136 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f001 f937 	bl	800a394 <USBD_CtlError>
      return USBD_FAIL;
 8009126:	2303      	movs	r3, #3
 8009128:	e006      	b.n	8009138 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 f931 	bl	800a394 <USBD_CtlError>
      return USBD_FAIL;
 8009132:	2303      	movs	r3, #3
 8009134:	e000      	b.n	8009138 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2265      	movs	r2, #101	; 0x65
 800914c:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 800914e:	4b03      	ldr	r3, [pc, #12]	; (800915c <USBD_Midi_GetCfgDesc+0x1c>)
}
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	2000008c 	.word	0x2000008c

08009160 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	460b      	mov	r3, r1
 80091e0:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009202:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fddc 	bl	800adc6 <USBD_LL_GetRxDataSize>
 800920e:	4602      	mov	r2, r0
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	e00c      	b.n	8009238 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68f9      	ldr	r1, [r7, #12]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	440a      	add	r2, r1
 800922c:	2104      	movs	r1, #4
 800922e:	4610      	mov	r0, r2
 8009230:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	3304      	adds	r3, #4
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	429a      	cmp	r2, r3
 8009240:	d3ed      	bcc.n	800921e <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 8009242:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	2101      	movs	r1, #1
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 fd9b 	bl	800ad84 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	220a      	movs	r2, #10
 8009264:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8009266:	4b03      	ldr	r3, [pc, #12]	; (8009274 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	200000f4 	.word	0x200000f4

08009278 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009282:	2303      	movs	r3, #3
 8009284:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d005      	beq.n	8009298 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b086      	sub	sp, #24
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	4613      	mov	r3, r2
 80092b2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e01f      	b.n	80092fe <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	79fa      	ldrb	r2, [r7, #7]
 80092f0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f001 fbf0 	bl	800aad8 <USBD_LL_Init>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800931a:	2303      	movs	r3, #3
 800931c:	e016      	b.n	800934c <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	683a      	ldr	r2, [r7, #0]
 8009322:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00b      	beq.n	800934a <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933a:	f107 020e 	add.w	r2, r7, #14
 800933e:	4610      	mov	r0, r2
 8009340:	4798      	blx	r3
 8009342:	4602      	mov	r2, r0
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 fc07 	bl	800ab70 <USBD_LL_Start>
 8009362:	4603      	mov	r3, r0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800938e:	2303      	movs	r3, #3
 8009390:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009398:	2b00      	cmp	r3, #0
 800939a:	d009      	beq.n	80093b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	78fa      	ldrb	r2, [r7, #3]
 80093a6:	4611      	mov	r1, r2
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	4798      	blx	r3
 80093ac:	4603      	mov	r3, r0
 80093ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d007      	beq.n	80093e0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	4611      	mov	r1, r2
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	4798      	blx	r3
  }

  return USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 ff8f 	bl	800a320 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009410:	461a      	mov	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800941e:	f003 031f 	and.w	r3, r3, #31
 8009422:	2b02      	cmp	r3, #2
 8009424:	d01a      	beq.n	800945c <USBD_LL_SetupStage+0x72>
 8009426:	2b02      	cmp	r3, #2
 8009428:	d822      	bhi.n	8009470 <USBD_LL_SetupStage+0x86>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <USBD_LL_SetupStage+0x4a>
 800942e:	2b01      	cmp	r3, #1
 8009430:	d00a      	beq.n	8009448 <USBD_LL_SetupStage+0x5e>
 8009432:	e01d      	b.n	8009470 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fa61 	bl	8009904 <USBD_StdDevReq>
 8009442:	4603      	mov	r3, r0
 8009444:	73fb      	strb	r3, [r7, #15]
      break;
 8009446:	e020      	b.n	800948a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fac5 	bl	80099e0 <USBD_StdItfReq>
 8009456:	4603      	mov	r3, r0
 8009458:	73fb      	strb	r3, [r7, #15]
      break;
 800945a:	e016      	b.n	800948a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fb04 	bl	8009a72 <USBD_StdEPReq>
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]
      break;
 800946e:	e00c      	b.n	800948a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009476:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800947a:	b2db      	uxtb	r3, r3
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fbd6 	bl	800ac30 <USBD_LL_StallEP>
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]
      break;
 8009488:	bf00      	nop
  }

  return ret;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	460b      	mov	r3, r1
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d138      	bne.n	800951a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80094ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d14a      	bne.n	8009550 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	689a      	ldr	r2, [r3, #8]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d913      	bls.n	80094ee <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	1ad2      	subs	r2, r2, r3
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	4293      	cmp	r3, r2
 80094de:	bf28      	it	cs
 80094e0:	4613      	movcs	r3, r2
 80094e2:	461a      	mov	r2, r3
 80094e4:	6879      	ldr	r1, [r7, #4]
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 fff1 	bl	800a4ce <USBD_CtlContinueRx>
 80094ec:	e030      	b.n	8009550 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d10b      	bne.n	8009512 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d005      	beq.n	8009512 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 ffec 	bl	800a4f0 <USBD_CtlSendStatus>
 8009518:	e01a      	b.n	8009550 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b03      	cmp	r3, #3
 8009524:	d114      	bne.n	8009550 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00e      	beq.n	8009550 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	7afa      	ldrb	r2, [r7, #11]
 800953c:	4611      	mov	r1, r2
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	4798      	blx	r3
 8009542:	4603      	mov	r3, r0
 8009544:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	e000      	b.n	8009552 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b086      	sub	sp, #24
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	460b      	mov	r3, r1
 8009564:	607a      	str	r2, [r7, #4]
 8009566:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009568:	7afb      	ldrb	r3, [r7, #11]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d16b      	bne.n	8009646 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3314      	adds	r3, #20
 8009572:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800957a:	2b02      	cmp	r3, #2
 800957c:	d156      	bne.n	800962c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	689a      	ldr	r2, [r3, #8]
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	429a      	cmp	r2, r3
 8009588:	d914      	bls.n	80095b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	689a      	ldr	r2, [r3, #8]
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	1ad2      	subs	r2, r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	461a      	mov	r2, r3
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 ff83 	bl	800a4ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095a6:	2300      	movs	r3, #0
 80095a8:	2200      	movs	r2, #0
 80095aa:	2100      	movs	r1, #0
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f001 fbe9 	bl	800ad84 <USBD_LL_PrepareReceive>
 80095b2:	e03b      	b.n	800962c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d11c      	bne.n	80095fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d316      	bcc.n	80095fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d20f      	bcs.n	80095fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095da:	2200      	movs	r2, #0
 80095dc:	2100      	movs	r1, #0
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 ff64 	bl	800a4ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095ec:	2300      	movs	r3, #0
 80095ee:	2200      	movs	r2, #0
 80095f0:	2100      	movs	r1, #0
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f001 fbc6 	bl	800ad84 <USBD_LL_PrepareReceive>
 80095f8:	e018      	b.n	800962c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b03      	cmp	r3, #3
 8009604:	d10b      	bne.n	800961e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d005      	beq.n	800961e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800961e:	2180      	movs	r1, #128	; 0x80
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f001 fb05 	bl	800ac30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 ff75 	bl	800a516 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009632:	2b01      	cmp	r3, #1
 8009634:	d122      	bne.n	800967c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7ff fe98 	bl	800936c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009644:	e01a      	b.n	800967c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b03      	cmp	r3, #3
 8009650:	d114      	bne.n	800967c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00e      	beq.n	800967c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	7afa      	ldrb	r2, [r7, #11]
 8009668:	4611      	mov	r1, r2
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	4798      	blx	r3
 800966e:	4603      	mov	r3, r0
 8009670:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009678:	7dfb      	ldrb	r3, [r7, #23]
 800967a:	e000      	b.n	800967e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e02f      	b.n	800971a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00f      	beq.n	80096e4 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d009      	beq.n	80096e4 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	6852      	ldr	r2, [r2, #4]
 80096dc:	b2d2      	uxtb	r2, r2
 80096de:	4611      	mov	r1, r2
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096e4:	2340      	movs	r3, #64	; 0x40
 80096e6:	2200      	movs	r2, #0
 80096e8:	2100      	movs	r1, #0
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 fa5b 	bl	800aba6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2240      	movs	r2, #64	; 0x40
 80096fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009700:	2340      	movs	r3, #64	; 0x40
 8009702:	2200      	movs	r2, #0
 8009704:	2180      	movs	r1, #128	; 0x80
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 fa4d 	bl	800aba6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2240      	movs	r2, #64	; 0x40
 8009716:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	460b      	mov	r3, r1
 800972c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	78fa      	ldrb	r2, [r7, #3]
 8009732:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009750:	b2da      	uxtb	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2204      	movs	r2, #4
 800975c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800976e:	b480      	push	{r7}
 8009770:	b083      	sub	sp, #12
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b04      	cmp	r3, #4
 8009780:	d106      	bne.n	8009790 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009788:	b2da      	uxtb	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b082      	sub	sp, #8
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e012      	b.n	80097da <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d10b      	bne.n	80097d8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d005      	beq.n	80097d8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	460b      	mov	r3, r1
 80097ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e014      	b.n	8009826 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b03      	cmp	r3, #3
 8009806:	d10d      	bne.n	8009824 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800981a:	6a1b      	ldr	r3, [r3, #32]
 800981c:	78fa      	ldrb	r2, [r7, #3]
 800981e:	4611      	mov	r1, r2
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	460b      	mov	r3, r1
 8009838:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009844:	2303      	movs	r3, #3
 8009846:	e014      	b.n	8009872 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b03      	cmp	r3, #3
 8009852:	d10d      	bne.n	8009870 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	2b00      	cmp	r3, #0
 800985e:	d007      	beq.n	8009870 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	4611      	mov	r1, r2
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d009      	beq.n	80098be <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	6852      	ldr	r2, [r2, #4]
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	4611      	mov	r1, r2
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	4798      	blx	r3
  }

  return USBD_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	3301      	adds	r3, #1
 80098de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098e6:	8a3b      	ldrh	r3, [r7, #16]
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	b21a      	sxth	r2, r3
 80098ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	b21b      	sxth	r3, r3
 80098f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098f6:	89fb      	ldrh	r3, [r7, #14]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800991a:	2b40      	cmp	r3, #64	; 0x40
 800991c:	d005      	beq.n	800992a <USBD_StdDevReq+0x26>
 800991e:	2b40      	cmp	r3, #64	; 0x40
 8009920:	d853      	bhi.n	80099ca <USBD_StdDevReq+0xc6>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <USBD_StdDevReq+0x3a>
 8009926:	2b20      	cmp	r3, #32
 8009928:	d14f      	bne.n	80099ca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	4798      	blx	r3
 8009938:	4603      	mov	r3, r0
 800993a:	73fb      	strb	r3, [r7, #15]
      break;
 800993c:	e04a      	b.n	80099d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	2b09      	cmp	r3, #9
 8009944:	d83b      	bhi.n	80099be <USBD_StdDevReq+0xba>
 8009946:	a201      	add	r2, pc, #4	; (adr r2, 800994c <USBD_StdDevReq+0x48>)
 8009948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994c:	080099a1 	.word	0x080099a1
 8009950:	080099b5 	.word	0x080099b5
 8009954:	080099bf 	.word	0x080099bf
 8009958:	080099ab 	.word	0x080099ab
 800995c:	080099bf 	.word	0x080099bf
 8009960:	0800997f 	.word	0x0800997f
 8009964:	08009975 	.word	0x08009975
 8009968:	080099bf 	.word	0x080099bf
 800996c:	08009997 	.word	0x08009997
 8009970:	08009989 	.word	0x08009989
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f9de 	bl	8009d38 <USBD_GetDescriptor>
          break;
 800997c:	e024      	b.n	80099c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fb43 	bl	800a00c <USBD_SetAddress>
          break;
 8009986:	e01f      	b.n	80099c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fb82 	bl	800a094 <USBD_SetConfig>
 8009990:	4603      	mov	r3, r0
 8009992:	73fb      	strb	r3, [r7, #15]
          break;
 8009994:	e018      	b.n	80099c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fc21 	bl	800a1e0 <USBD_GetConfig>
          break;
 800999e:	e013      	b.n	80099c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fc52 	bl	800a24c <USBD_GetStatus>
          break;
 80099a8:	e00e      	b.n	80099c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fc81 	bl	800a2b4 <USBD_SetFeature>
          break;
 80099b2:	e009      	b.n	80099c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fc90 	bl	800a2dc <USBD_ClrFeature>
          break;
 80099bc:	e004      	b.n	80099c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fce7 	bl	800a394 <USBD_CtlError>
          break;
 80099c6:	bf00      	nop
      }
      break;
 80099c8:	e004      	b.n	80099d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fce1 	bl	800a394 <USBD_CtlError>
      break;
 80099d2:	bf00      	nop
  }

  return ret;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop

080099e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099f6:	2b40      	cmp	r3, #64	; 0x40
 80099f8:	d005      	beq.n	8009a06 <USBD_StdItfReq+0x26>
 80099fa:	2b40      	cmp	r3, #64	; 0x40
 80099fc:	d82f      	bhi.n	8009a5e <USBD_StdItfReq+0x7e>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <USBD_StdItfReq+0x26>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d12b      	bne.n	8009a5e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d81d      	bhi.n	8009a50 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	889b      	ldrh	r3, [r3, #4]
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d813      	bhi.n	8009a46 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	4798      	blx	r3
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	88db      	ldrh	r3, [r3, #6]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d110      	bne.n	8009a5a <USBD_StdItfReq+0x7a>
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10d      	bne.n	8009a5a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fd56 	bl	800a4f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a44:	e009      	b.n	8009a5a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fca3 	bl	800a394 <USBD_CtlError>
          break;
 8009a4e:	e004      	b.n	8009a5a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fc9e 	bl	800a394 <USBD_CtlError>
          break;
 8009a58:	e000      	b.n	8009a5c <USBD_StdItfReq+0x7c>
          break;
 8009a5a:	bf00      	nop
      }
      break;
 8009a5c:	e004      	b.n	8009a68 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fc97 	bl	800a394 <USBD_CtlError>
      break;
 8009a66:	bf00      	nop
  }

  return ret;
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	889b      	ldrh	r3, [r3, #4]
 8009a84:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8e:	2b40      	cmp	r3, #64	; 0x40
 8009a90:	d007      	beq.n	8009aa2 <USBD_StdEPReq+0x30>
 8009a92:	2b40      	cmp	r3, #64	; 0x40
 8009a94:	f200 8145 	bhi.w	8009d22 <USBD_StdEPReq+0x2b0>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00c      	beq.n	8009ab6 <USBD_StdEPReq+0x44>
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	f040 8140 	bne.w	8009d22 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	4798      	blx	r3
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ab4:	e13a      	b.n	8009d2c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	785b      	ldrb	r3, [r3, #1]
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d007      	beq.n	8009ace <USBD_StdEPReq+0x5c>
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	f300 8129 	bgt.w	8009d16 <USBD_StdEPReq+0x2a4>
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d07f      	beq.n	8009bc8 <USBD_StdEPReq+0x156>
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d03c      	beq.n	8009b46 <USBD_StdEPReq+0xd4>
 8009acc:	e123      	b.n	8009d16 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d002      	beq.n	8009ae0 <USBD_StdEPReq+0x6e>
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d016      	beq.n	8009b0c <USBD_StdEPReq+0x9a>
 8009ade:	e02c      	b.n	8009b3a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00d      	beq.n	8009b02 <USBD_StdEPReq+0x90>
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b80      	cmp	r3, #128	; 0x80
 8009aea:	d00a      	beq.n	8009b02 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 f89d 	bl	800ac30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009af6:	2180      	movs	r1, #128	; 0x80
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f001 f899 	bl	800ac30 <USBD_LL_StallEP>
 8009afe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b00:	e020      	b.n	8009b44 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fc45 	bl	800a394 <USBD_CtlError>
              break;
 8009b0a:	e01b      	b.n	8009b44 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	885b      	ldrh	r3, [r3, #2]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10e      	bne.n	8009b32 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00b      	beq.n	8009b32 <USBD_StdEPReq+0xc0>
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	2b80      	cmp	r3, #128	; 0x80
 8009b1e:	d008      	beq.n	8009b32 <USBD_StdEPReq+0xc0>
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	88db      	ldrh	r3, [r3, #6]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d104      	bne.n	8009b32 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f001 f87f 	bl	800ac30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fcdc 	bl	800a4f0 <USBD_CtlSendStatus>

              break;
 8009b38:	e004      	b.n	8009b44 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fc29 	bl	800a394 <USBD_CtlError>
              break;
 8009b42:	bf00      	nop
          }
          break;
 8009b44:	e0ec      	b.n	8009d20 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d002      	beq.n	8009b58 <USBD_StdEPReq+0xe6>
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d016      	beq.n	8009b84 <USBD_StdEPReq+0x112>
 8009b56:	e030      	b.n	8009bba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00d      	beq.n	8009b7a <USBD_StdEPReq+0x108>
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
 8009b60:	2b80      	cmp	r3, #128	; 0x80
 8009b62:	d00a      	beq.n	8009b7a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f001 f861 	bl	800ac30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b6e:	2180      	movs	r1, #128	; 0x80
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 f85d 	bl	800ac30 <USBD_LL_StallEP>
 8009b76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b78:	e025      	b.n	8009bc6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fc09 	bl	800a394 <USBD_CtlError>
              break;
 8009b82:	e020      	b.n	8009bc6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	885b      	ldrh	r3, [r3, #2]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d11b      	bne.n	8009bc4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b96:	7bbb      	ldrb	r3, [r7, #14]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f001 f867 	bl	800ac6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fca5 	bl	800a4f0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	4798      	blx	r3
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009bb8:	e004      	b.n	8009bc4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fbe9 	bl	800a394 <USBD_CtlError>
              break;
 8009bc2:	e000      	b.n	8009bc6 <USBD_StdEPReq+0x154>
              break;
 8009bc4:	bf00      	nop
          }
          break;
 8009bc6:	e0ab      	b.n	8009d20 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d002      	beq.n	8009bda <USBD_StdEPReq+0x168>
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d032      	beq.n	8009c3e <USBD_StdEPReq+0x1cc>
 8009bd8:	e097      	b.n	8009d0a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <USBD_StdEPReq+0x17e>
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b80      	cmp	r3, #128	; 0x80
 8009be4:	d004      	beq.n	8009bf0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fbd3 	bl	800a394 <USBD_CtlError>
                break;
 8009bee:	e091      	b.n	8009d14 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	da0b      	bge.n	8009c10 <USBD_StdEPReq+0x19e>
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	3310      	adds	r3, #16
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	e00b      	b.n	8009c28 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
 8009c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c16:	4613      	mov	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	4413      	add	r3, r2
 8009c26:	3304      	adds	r3, #4
 8009c28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2202      	movs	r2, #2
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fc1d 	bl	800a476 <USBD_CtlSendData>
              break;
 8009c3c:	e06a      	b.n	8009d14 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	da11      	bge.n	8009c6a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c46:	7bbb      	ldrb	r3, [r7, #14]
 8009c48:	f003 020f 	and.w	r2, r3, #15
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	440b      	add	r3, r1
 8009c58:	3324      	adds	r3, #36	; 0x24
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d117      	bne.n	8009c90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fb96 	bl	800a394 <USBD_CtlError>
                  break;
 8009c68:	e054      	b.n	8009d14 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d104      	bne.n	8009c90 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fb83 	bl	800a394 <USBD_CtlError>
                  break;
 8009c8e:	e041      	b.n	8009d14 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	da0b      	bge.n	8009cb0 <USBD_StdEPReq+0x23e>
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	3310      	adds	r3, #16
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	4413      	add	r3, r2
 8009cac:	3304      	adds	r3, #4
 8009cae:	e00b      	b.n	8009cc8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <USBD_StdEPReq+0x264>
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	2b80      	cmp	r3, #128	; 0x80
 8009cd4:	d103      	bne.n	8009cde <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	e00e      	b.n	8009cfc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 ffe2 	bl	800acac <USBD_LL_IsStallEP>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	e002      	b.n	8009cfc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fbb7 	bl	800a476 <USBD_CtlSendData>
              break;
 8009d08:	e004      	b.n	8009d14 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fb41 	bl	800a394 <USBD_CtlError>
              break;
 8009d12:	bf00      	nop
          }
          break;
 8009d14:	e004      	b.n	8009d20 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb3b 	bl	800a394 <USBD_CtlError>
          break;
 8009d1e:	bf00      	nop
      }
      break;
 8009d20:	e004      	b.n	8009d2c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fb35 	bl	800a394 <USBD_CtlError>
      break;
 8009d2a:	bf00      	nop
  }

  return ret;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	885b      	ldrh	r3, [r3, #2]
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	2b06      	cmp	r3, #6
 8009d5a:	f200 8128 	bhi.w	8009fae <USBD_GetDescriptor+0x276>
 8009d5e:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <USBD_GetDescriptor+0x2c>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009d81 	.word	0x08009d81
 8009d68:	08009d99 	.word	0x08009d99
 8009d6c:	08009dd9 	.word	0x08009dd9
 8009d70:	08009faf 	.word	0x08009faf
 8009d74:	08009faf 	.word	0x08009faf
 8009d78:	08009f4f 	.word	0x08009f4f
 8009d7c:	08009f7b 	.word	0x08009f7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	7c12      	ldrb	r2, [r2, #16]
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	60f8      	str	r0, [r7, #12]
      break;
 8009d96:	e112      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7c1b      	ldrb	r3, [r3, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10d      	bne.n	8009dbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	f107 0208 	add.w	r2, r7, #8
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	2202      	movs	r2, #2
 8009db8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dba:	e100      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	f107 0208 	add.w	r2, r7, #8
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
 8009dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	701a      	strb	r2, [r3, #0]
      break;
 8009dd6:	e0f2      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	885b      	ldrh	r3, [r3, #2]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	f200 80ac 	bhi.w	8009f3c <USBD_GetDescriptor+0x204>
 8009de4:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <USBD_GetDescriptor+0xb4>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009e05 	.word	0x08009e05
 8009df0:	08009e39 	.word	0x08009e39
 8009df4:	08009e6d 	.word	0x08009e6d
 8009df8:	08009ea1 	.word	0x08009ea1
 8009dfc:	08009ed5 	.word	0x08009ed5
 8009e00:	08009f09 	.word	0x08009f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	7c12      	ldrb	r2, [r2, #16]
 8009e1c:	f107 0108 	add.w	r1, r7, #8
 8009e20:	4610      	mov	r0, r2
 8009e22:	4798      	blx	r3
 8009e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e26:	e091      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fab2 	bl	800a394 <USBD_CtlError>
            err++;
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	3301      	adds	r3, #1
 8009e34:	72fb      	strb	r3, [r7, #11]
          break;
 8009e36:	e089      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	7c12      	ldrb	r2, [r2, #16]
 8009e50:	f107 0108 	add.w	r1, r7, #8
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e5a:	e077      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa98 	bl	800a394 <USBD_CtlError>
            err++;
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	3301      	adds	r3, #1
 8009e68:	72fb      	strb	r3, [r7, #11]
          break;
 8009e6a:	e06f      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7c12      	ldrb	r2, [r2, #16]
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e8e:	e05d      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa7e 	bl	800a394 <USBD_CtlError>
            err++;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e9e:	e055      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	7c12      	ldrb	r2, [r2, #16]
 8009eb8:	f107 0108 	add.w	r1, r7, #8
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec2:	e043      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa64 	bl	800a394 <USBD_CtlError>
            err++;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ed2:	e03b      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	7c12      	ldrb	r2, [r2, #16]
 8009eec:	f107 0108 	add.w	r1, r7, #8
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4798      	blx	r3
 8009ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef6:	e029      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fa4a 	bl	800a394 <USBD_CtlError>
            err++;
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	3301      	adds	r3, #1
 8009f04:	72fb      	strb	r3, [r7, #11]
          break;
 8009f06:	e021      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	7c12      	ldrb	r2, [r2, #16]
 8009f20:	f107 0108 	add.w	r1, r7, #8
 8009f24:	4610      	mov	r0, r2
 8009f26:	4798      	blx	r3
 8009f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2a:	e00f      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa30 	bl	800a394 <USBD_CtlError>
            err++;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	3301      	adds	r3, #1
 8009f38:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3a:	e007      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa28 	bl	800a394 <USBD_CtlError>
          err++;
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	3301      	adds	r3, #1
 8009f48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009f4a:	bf00      	nop
      }
      break;
 8009f4c:	e037      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	7c1b      	ldrb	r3, [r3, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5e:	f107 0208 	add.w	r2, r7, #8
 8009f62:	4610      	mov	r0, r2
 8009f64:	4798      	blx	r3
 8009f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f68:	e029      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fa11 	bl	800a394 <USBD_CtlError>
        err++;
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	3301      	adds	r3, #1
 8009f76:	72fb      	strb	r3, [r7, #11]
      break;
 8009f78:	e021      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	7c1b      	ldrb	r3, [r3, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10d      	bne.n	8009f9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	f107 0208 	add.w	r2, r7, #8
 8009f8e:	4610      	mov	r0, r2
 8009f90:	4798      	blx	r3
 8009f92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3301      	adds	r3, #1
 8009f98:	2207      	movs	r2, #7
 8009f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f9c:	e00f      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f9f7 	bl	800a394 <USBD_CtlError>
        err++;
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	72fb      	strb	r3, [r7, #11]
      break;
 8009fac:	e007      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f9ef 	bl	800a394 <USBD_CtlError>
      err++;
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	72fb      	strb	r3, [r7, #11]
      break;
 8009fbc:	bf00      	nop
  }

  if (err != 0U)
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d11e      	bne.n	800a002 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	88db      	ldrh	r3, [r3, #6]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d016      	beq.n	8009ffa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009fcc:	893b      	ldrh	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00e      	beq.n	8009ff0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	88da      	ldrh	r2, [r3, #6]
 8009fd6:	893b      	ldrh	r3, [r7, #8]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	bf28      	it	cs
 8009fdc:	4613      	movcs	r3, r2
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fe2:	893b      	ldrh	r3, [r7, #8]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	68f9      	ldr	r1, [r7, #12]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fa44 	bl	800a476 <USBD_CtlSendData>
 8009fee:	e009      	b.n	800a004 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f9ce 	bl	800a394 <USBD_CtlError>
 8009ff8:	e004      	b.n	800a004 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fa78 	bl	800a4f0 <USBD_CtlSendStatus>
 800a000:	e000      	b.n	800a004 <USBD_GetDescriptor+0x2cc>
    return;
 800a002:	bf00      	nop
  }
}
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop

0800a00c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	889b      	ldrh	r3, [r3, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d131      	bne.n	800a082 <USBD_SetAddress+0x76>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	88db      	ldrh	r3, [r3, #6]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d12d      	bne.n	800a082 <USBD_SetAddress+0x76>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	885b      	ldrh	r3, [r3, #2]
 800a02a:	2b7f      	cmp	r3, #127	; 0x7f
 800a02c:	d829      	bhi.n	800a082 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	885b      	ldrh	r3, [r3, #2]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a038:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b03      	cmp	r3, #3
 800a044:	d104      	bne.n	800a050 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f9a3 	bl	800a394 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a04e:	e01d      	b.n	800a08c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	7bfa      	ldrb	r2, [r7, #15]
 800a054:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fe51 	bl	800ad04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fa44 	bl	800a4f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a068:	7bfb      	ldrb	r3, [r7, #15]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d004      	beq.n	800a078 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2202      	movs	r2, #2
 800a072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a076:	e009      	b.n	800a08c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a080:	e004      	b.n	800a08c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 f985 	bl	800a394 <USBD_CtlError>
  }
}
 800a08a:	bf00      	nop
 800a08c:	bf00      	nop
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	4b4c      	ldr	r3, [pc, #304]	; (800a1dc <USBD_SetConfig+0x148>)
 800a0aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0ac:	4b4b      	ldr	r3, [pc, #300]	; (800a1dc <USBD_SetConfig+0x148>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d905      	bls.n	800a0c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f96c 	bl	800a394 <USBD_CtlError>
    return USBD_FAIL;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e088      	b.n	800a1d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d002      	beq.n	800a0d2 <USBD_SetConfig+0x3e>
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d025      	beq.n	800a11c <USBD_SetConfig+0x88>
 800a0d0:	e071      	b.n	800a1b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a0d2:	4b42      	ldr	r3, [pc, #264]	; (800a1dc <USBD_SetConfig+0x148>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01c      	beq.n	800a114 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a0da:	4b40      	ldr	r3, [pc, #256]	; (800a1dc <USBD_SetConfig+0x148>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0e4:	4b3d      	ldr	r3, [pc, #244]	; (800a1dc <USBD_SetConfig+0x148>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7ff f949 	bl	8009382 <USBD_SetClassConfig>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d004      	beq.n	800a104 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f949 	bl	800a394 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a102:	e065      	b.n	800a1d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f9f3 	bl	800a4f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2203      	movs	r2, #3
 800a10e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a112:	e05d      	b.n	800a1d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f9eb 	bl	800a4f0 <USBD_CtlSendStatus>
      break;
 800a11a:	e059      	b.n	800a1d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a11c:	4b2f      	ldr	r3, [pc, #188]	; (800a1dc <USBD_SetConfig+0x148>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d112      	bne.n	800a14a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a12c:	4b2b      	ldr	r3, [pc, #172]	; (800a1dc <USBD_SetConfig+0x148>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a136:	4b29      	ldr	r3, [pc, #164]	; (800a1dc <USBD_SetConfig+0x148>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff f93c 	bl	80093ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f9d4 	bl	800a4f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a148:	e042      	b.n	800a1d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a14a:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <USBD_SetConfig+0x148>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	429a      	cmp	r2, r3
 800a156:	d02a      	beq.n	800a1ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff f92a 	bl	80093ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a166:	4b1d      	ldr	r3, [pc, #116]	; (800a1dc <USBD_SetConfig+0x148>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a170:	4b1a      	ldr	r3, [pc, #104]	; (800a1dc <USBD_SetConfig+0x148>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff f903 	bl	8009382 <USBD_SetClassConfig>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a180:	7bfb      	ldrb	r3, [r7, #15]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00f      	beq.n	800a1a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f903 	bl	800a394 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	b2db      	uxtb	r3, r3
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff f90f 	bl	80093ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1a4:	e014      	b.n	800a1d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f9a2 	bl	800a4f0 <USBD_CtlSendStatus>
      break;
 800a1ac:	e010      	b.n	800a1d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f99e 	bl	800a4f0 <USBD_CtlSendStatus>
      break;
 800a1b4:	e00c      	b.n	800a1d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a1b6:	6839      	ldr	r1, [r7, #0]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f8eb 	bl	800a394 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1be:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <USBD_SetConfig+0x148>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff f8f8 	bl	80093ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ce:	bf00      	nop
  }

  return ret;
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	200005e8 	.word	0x200005e8

0800a1e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	88db      	ldrh	r3, [r3, #6]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d004      	beq.n	800a1fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f8cd 	bl	800a394 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1fa:	e023      	b.n	800a244 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b02      	cmp	r3, #2
 800a206:	dc02      	bgt.n	800a20e <USBD_GetConfig+0x2e>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	dc03      	bgt.n	800a214 <USBD_GetConfig+0x34>
 800a20c:	e015      	b.n	800a23a <USBD_GetConfig+0x5a>
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d00b      	beq.n	800a22a <USBD_GetConfig+0x4a>
 800a212:	e012      	b.n	800a23a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3308      	adds	r3, #8
 800a21e:	2201      	movs	r2, #1
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f927 	bl	800a476 <USBD_CtlSendData>
        break;
 800a228:	e00c      	b.n	800a244 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3304      	adds	r3, #4
 800a22e:	2201      	movs	r2, #1
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f91f 	bl	800a476 <USBD_CtlSendData>
        break;
 800a238:	e004      	b.n	800a244 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f8a9 	bl	800a394 <USBD_CtlError>
        break;
 800a242:	bf00      	nop
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	3b01      	subs	r3, #1
 800a260:	2b02      	cmp	r3, #2
 800a262:	d81e      	bhi.n	800a2a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	88db      	ldrh	r3, [r3, #6]
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d004      	beq.n	800a276 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f890 	bl	800a394 <USBD_CtlError>
        break;
 800a274:	e01a      	b.n	800a2ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a282:	2b00      	cmp	r3, #0
 800a284:	d005      	beq.n	800a292 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f043 0202 	orr.w	r2, r3, #2
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	330c      	adds	r3, #12
 800a296:	2202      	movs	r2, #2
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f8eb 	bl	800a476 <USBD_CtlSendData>
      break;
 800a2a0:	e004      	b.n	800a2ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f875 	bl	800a394 <USBD_CtlError>
      break;
 800a2aa:	bf00      	nop
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	885b      	ldrh	r3, [r3, #2]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d106      	bne.n	800a2d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f90e 	bl	800a4f0 <USBD_CtlSendStatus>
  }
}
 800a2d4:	bf00      	nop
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d80b      	bhi.n	800a30c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	885b      	ldrh	r3, [r3, #2]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d10c      	bne.n	800a316 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f8f3 	bl	800a4f0 <USBD_CtlSendStatus>
      }
      break;
 800a30a:	e004      	b.n	800a316 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f840 	bl	800a394 <USBD_CtlError>
      break;
 800a314:	e000      	b.n	800a318 <USBD_ClrFeature+0x3c>
      break;
 800a316:	bf00      	nop
  }
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	781a      	ldrb	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3301      	adds	r3, #1
 800a33a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	781a      	ldrb	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3301      	adds	r3, #1
 800a348:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7ff fabc 	bl	80098c8 <SWAPBYTE>
 800a350:	4603      	mov	r3, r0
 800a352:	461a      	mov	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3301      	adds	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3301      	adds	r3, #1
 800a362:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff faaf 	bl	80098c8 <SWAPBYTE>
 800a36a:	4603      	mov	r3, r0
 800a36c:	461a      	mov	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3301      	adds	r3, #1
 800a376:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3301      	adds	r3, #1
 800a37c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f7ff faa2 	bl	80098c8 <SWAPBYTE>
 800a384:	4603      	mov	r3, r0
 800a386:	461a      	mov	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	80da      	strh	r2, [r3, #6]
}
 800a38c:	bf00      	nop
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a39e:	2180      	movs	r1, #128	; 0x80
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fc45 	bl	800ac30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fc41 	bl	800ac30 <USBD_LL_StallEP>
}
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b086      	sub	sp, #24
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d036      	beq.n	800a43a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a3d0:	6938      	ldr	r0, [r7, #16]
 800a3d2:	f000 f836 	bl	800a442 <USBD_GetLen>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	3301      	adds	r3, #1
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	68ba      	ldr	r2, [r7, #8]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	7812      	ldrb	r2, [r2, #0]
 800a3ee:	701a      	strb	r2, [r3, #0]
  idx++;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	2203      	movs	r2, #3
 800a3fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	3301      	adds	r3, #1
 800a404:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a406:	e013      	b.n	800a430 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	4413      	add	r3, r2
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	7812      	ldrb	r2, [r2, #0]
 800a412:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	3301      	adds	r3, #1
 800a418:	613b      	str	r3, [r7, #16]
    idx++;
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	3301      	adds	r3, #1
 800a41e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	4413      	add	r3, r2
 800a426:	2200      	movs	r2, #0
 800a428:	701a      	strb	r2, [r3, #0]
    idx++;
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	3301      	adds	r3, #1
 800a42e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e7      	bne.n	800a408 <USBD_GetString+0x52>
 800a438:	e000      	b.n	800a43c <USBD_GetString+0x86>
    return;
 800a43a:	bf00      	nop
  }
}
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a442:	b480      	push	{r7}
 800a444:	b085      	sub	sp, #20
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a452:	e005      	b.n	800a460 <USBD_GetLen+0x1e>
  {
    len++;
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	3301      	adds	r3, #1
 800a458:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	3301      	adds	r3, #1
 800a45e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1f5      	bne.n	800a454 <USBD_GetLen+0x12>
  }

  return len;
 800a468:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2202      	movs	r2, #2
 800a486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	2100      	movs	r1, #0
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fc50 	bl	800ad42 <USBD_LL_Transmit>

  return USBD_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 fc3f 	bl	800ad42 <USBD_LL_Transmit>

  return USBD_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	2100      	movs	r1, #0
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 fc4f 	bl	800ad84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2204      	movs	r2, #4
 800a4fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a500:	2300      	movs	r3, #0
 800a502:	2200      	movs	r2, #0
 800a504:	2100      	movs	r1, #0
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fc1b 	bl	800ad42 <USBD_LL_Transmit>

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2205      	movs	r2, #5
 800a522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a526:	2300      	movs	r3, #0
 800a528:	2200      	movs	r2, #0
 800a52a:	2100      	movs	r1, #0
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fc29 	bl	800ad84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800a540:	2200      	movs	r2, #0
 800a542:	4912      	ldr	r1, [pc, #72]	; (800a58c <MX_USB_DEVICE_Init+0x50>)
 800a544:	4812      	ldr	r0, [pc, #72]	; (800a590 <MX_USB_DEVICE_Init+0x54>)
 800a546:	f7fe feae 	bl	80092a6 <USBD_Init>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d001      	beq.n	800a554 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800a550:	f7f7 fb10 	bl	8001b74 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 800a554:	490f      	ldr	r1, [pc, #60]	; (800a594 <MX_USB_DEVICE_Init+0x58>)
 800a556:	480e      	ldr	r0, [pc, #56]	; (800a590 <MX_USB_DEVICE_Init+0x54>)
 800a558:	f7fe fed5 	bl	8009306 <USBD_RegisterClass>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800a562:	f7f7 fb07 	bl	8001b74 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 800a566:	490c      	ldr	r1, [pc, #48]	; (800a598 <MX_USB_DEVICE_Init+0x5c>)
 800a568:	4809      	ldr	r0, [pc, #36]	; (800a590 <MX_USB_DEVICE_Init+0x54>)
 800a56a:	f7fe fe85 	bl	8009278 <USBD_Midi_RegisterInterface>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800a574:	f7f7 fafe 	bl	8001b74 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a578:	4805      	ldr	r0, [pc, #20]	; (800a590 <MX_USB_DEVICE_Init+0x54>)
 800a57a:	f7fe feeb 	bl	8009354 <USBD_Start>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800a584:	f7f7 faf6 	bl	8001b74 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a588:	bf00      	nop
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	20000100 	.word	0x20000100
 800a590:	2000230c 	.word	0x2000230c
 800a594:	20000054 	.word	0x20000054
 800a598:	20000150 	.word	0x20000150

0800a59c <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	71fb      	strb	r3, [r7, #7]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	71bb      	strb	r3, [r7, #6]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 800a5ae:	230b      	movs	r3, #11
 800a5b0:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800a5b8:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800a5c2:	79bb      	ldrb	r3, [r7, #6]
 800a5c4:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 800a5c6:	797b      	ldrb	r3, [r7, #5]
 800a5c8:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 800a5ca:	f107 0208 	add.w	r2, r7, #8
 800a5ce:	2304      	movs	r3, #4
 800a5d0:	2181      	movs	r1, #129	; 0x81
 800a5d2:	4810      	ldr	r0, [pc, #64]	; (800a614 <MX_USB_Send_Midi+0x78>)
 800a5d4:	f000 fbb5 	bl	800ad42 <USBD_LL_Transmit>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b03      	cmp	r3, #3
 800a5dc:	d00a      	beq.n	800a5f4 <MX_USB_Send_Midi+0x58>
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	dc10      	bgt.n	800a604 <MX_USB_Send_Midi+0x68>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <MX_USB_Send_Midi+0x50>
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d008      	beq.n	800a5fc <MX_USB_Send_Midi+0x60>
 800a5ea:	e00b      	b.n	800a604 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 800a5ec:	480a      	ldr	r0, [pc, #40]	; (800a618 <MX_USB_Send_Midi+0x7c>)
 800a5ee:	f000 ffb7 	bl	800b560 <puts>
        break;
 800a5f2:	e00b      	b.n	800a60c <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 800a5f4:	4809      	ldr	r0, [pc, #36]	; (800a61c <MX_USB_Send_Midi+0x80>)
 800a5f6:	f000 ffb3 	bl	800b560 <puts>
        break;
 800a5fa:	e007      	b.n	800a60c <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 800a5fc:	4808      	ldr	r0, [pc, #32]	; (800a620 <MX_USB_Send_Midi+0x84>)
 800a5fe:	f000 ffaf 	bl	800b560 <puts>
        break;
 800a602:	e003      	b.n	800a60c <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 800a604:	4807      	ldr	r0, [pc, #28]	; (800a624 <MX_USB_Send_Midi+0x88>)
 800a606:	f000 ffab 	bl	800b560 <puts>
    }
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	2000230c 	.word	0x2000230c
 800a618:	0800c15c 	.word	0x0800c15c
 800a61c:	0800c160 	.word	0x0800c160
 800a620:	0800c170 	.word	0x0800c170
 800a624:	0800c180 	.word	0x0800c180

0800a628 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	6039      	str	r1, [r7, #0]
 800a632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2212      	movs	r2, #18
 800a638:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a63a:	4b03      	ldr	r3, [pc, #12]	; (800a648 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	2000011c 	.word	0x2000011c

0800a64c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	6039      	str	r1, [r7, #0]
 800a656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2204      	movs	r2, #4
 800a65c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a65e:	4b03      	ldr	r3, [pc, #12]	; (800a66c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	20000130 	.word	0x20000130

0800a670 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d105      	bne.n	800a68e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	4907      	ldr	r1, [pc, #28]	; (800a6a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a686:	4808      	ldr	r0, [pc, #32]	; (800a6a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a688:	f7ff fe95 	bl	800a3b6 <USBD_GetString>
 800a68c:	e004      	b.n	800a698 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	4904      	ldr	r1, [pc, #16]	; (800a6a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a692:	4805      	ldr	r0, [pc, #20]	; (800a6a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a694:	f7ff fe8f 	bl	800a3b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	200025dc 	.word	0x200025dc
 800a6a8:	0800c19c 	.word	0x0800c19c

0800a6ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	6039      	str	r1, [r7, #0]
 800a6b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	4904      	ldr	r1, [pc, #16]	; (800a6cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6bc:	4804      	ldr	r0, [pc, #16]	; (800a6d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6be:	f7ff fe7a 	bl	800a3b6 <USBD_GetString>
  return USBD_StrDesc;
 800a6c2:	4b02      	ldr	r3, [pc, #8]	; (800a6cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	200025dc 	.word	0x200025dc
 800a6d0:	0800c1b0 	.word	0x0800c1b0

0800a6d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	4603      	mov	r3, r0
 800a6dc:	6039      	str	r1, [r7, #0]
 800a6de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	221a      	movs	r2, #26
 800a6e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6e6:	f000 f843 	bl	800a770 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6ea:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	20000134 	.word	0x20000134

0800a6f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	6039      	str	r1, [r7, #0]
 800a702:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d105      	bne.n	800a716 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	4907      	ldr	r1, [pc, #28]	; (800a72c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a70e:	4808      	ldr	r0, [pc, #32]	; (800a730 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a710:	f7ff fe51 	bl	800a3b6 <USBD_GetString>
 800a714:	e004      	b.n	800a720 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	4904      	ldr	r1, [pc, #16]	; (800a72c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a71a:	4805      	ldr	r0, [pc, #20]	; (800a730 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a71c:	f7ff fe4b 	bl	800a3b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a720:	4b02      	ldr	r3, [pc, #8]	; (800a72c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a722:	4618      	mov	r0, r3
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	200025dc 	.word	0x200025dc
 800a730:	0800c1c4 	.word	0x0800c1c4

0800a734 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	6039      	str	r1, [r7, #0]
 800a73e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d105      	bne.n	800a752 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	4907      	ldr	r1, [pc, #28]	; (800a768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a74a:	4808      	ldr	r0, [pc, #32]	; (800a76c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a74c:	f7ff fe33 	bl	800a3b6 <USBD_GetString>
 800a750:	e004      	b.n	800a75c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	4904      	ldr	r1, [pc, #16]	; (800a768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a756:	4805      	ldr	r0, [pc, #20]	; (800a76c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a758:	f7ff fe2d 	bl	800a3b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	200025dc 	.word	0x200025dc
 800a76c:	0800c1d4 	.word	0x0800c1d4

0800a770 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a776:	4b0f      	ldr	r3, [pc, #60]	; (800a7b4 <Get_SerialNum+0x44>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a77c:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <Get_SerialNum+0x48>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a782:	4b0e      	ldr	r3, [pc, #56]	; (800a7bc <Get_SerialNum+0x4c>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4413      	add	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d009      	beq.n	800a7aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a796:	2208      	movs	r2, #8
 800a798:	4909      	ldr	r1, [pc, #36]	; (800a7c0 <Get_SerialNum+0x50>)
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f000 f814 	bl	800a7c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7a0:	2204      	movs	r2, #4
 800a7a2:	4908      	ldr	r1, [pc, #32]	; (800a7c4 <Get_SerialNum+0x54>)
 800a7a4:	68b8      	ldr	r0, [r7, #8]
 800a7a6:	f000 f80f 	bl	800a7c8 <IntToUnicode>
  }
}
 800a7aa:	bf00      	nop
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	1fff7a10 	.word	0x1fff7a10
 800a7b8:	1fff7a14 	.word	0x1fff7a14
 800a7bc:	1fff7a18 	.word	0x1fff7a18
 800a7c0:	20000136 	.word	0x20000136
 800a7c4:	20000146 	.word	0x20000146

0800a7c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7da:	2300      	movs	r3, #0
 800a7dc:	75fb      	strb	r3, [r7, #23]
 800a7de:	e027      	b.n	800a830 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	0f1b      	lsrs	r3, r3, #28
 800a7e4:	2b09      	cmp	r3, #9
 800a7e6:	d80b      	bhi.n	800a800 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	0f1b      	lsrs	r3, r3, #28
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	440b      	add	r3, r1
 800a7f8:	3230      	adds	r2, #48	; 0x30
 800a7fa:	b2d2      	uxtb	r2, r2
 800a7fc:	701a      	strb	r2, [r3, #0]
 800a7fe:	e00a      	b.n	800a816 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	0f1b      	lsrs	r3, r3, #28
 800a804:	b2da      	uxtb	r2, r3
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	005b      	lsls	r3, r3, #1
 800a80a:	4619      	mov	r1, r3
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	440b      	add	r3, r1
 800a810:	3237      	adds	r2, #55	; 0x37
 800a812:	b2d2      	uxtb	r2, r2
 800a814:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	011b      	lsls	r3, r3, #4
 800a81a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	3301      	adds	r3, #1
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	4413      	add	r3, r2
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	3301      	adds	r3, #1
 800a82e:	75fb      	strb	r3, [r7, #23]
 800a830:	7dfa      	ldrb	r2, [r7, #23]
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	429a      	cmp	r2, r3
 800a836:	d3d3      	bcc.n	800a7e0 <IntToUnicode+0x18>
  }
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	371c      	adds	r7, #28
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
	...

0800a860 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08a      	sub	sp, #40	; 0x28
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a868:	f107 0314 	add.w	r3, r7, #20
 800a86c:	2200      	movs	r2, #0
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	605a      	str	r2, [r3, #4]
 800a872:	609a      	str	r2, [r3, #8]
 800a874:	60da      	str	r2, [r3, #12]
 800a876:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a880:	d13a      	bne.n	800a8f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a882:	2300      	movs	r3, #0
 800a884:	613b      	str	r3, [r7, #16]
 800a886:	4b1e      	ldr	r3, [pc, #120]	; (800a900 <HAL_PCD_MspInit+0xa0>)
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	4a1d      	ldr	r2, [pc, #116]	; (800a900 <HAL_PCD_MspInit+0xa0>)
 800a88c:	f043 0301 	orr.w	r3, r3, #1
 800a890:	6313      	str	r3, [r2, #48]	; 0x30
 800a892:	4b1b      	ldr	r3, [pc, #108]	; (800a900 <HAL_PCD_MspInit+0xa0>)
 800a894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	613b      	str	r3, [r7, #16]
 800a89c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800a89e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a8a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8b0:	230a      	movs	r3, #10
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8b4:	f107 0314 	add.w	r3, r7, #20
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4812      	ldr	r0, [pc, #72]	; (800a904 <HAL_PCD_MspInit+0xa4>)
 800a8bc:	f7f8 ff3c 	bl	8003738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8c0:	4b0f      	ldr	r3, [pc, #60]	; (800a900 <HAL_PCD_MspInit+0xa0>)
 800a8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c4:	4a0e      	ldr	r2, [pc, #56]	; (800a900 <HAL_PCD_MspInit+0xa0>)
 800a8c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ca:	6353      	str	r3, [r2, #52]	; 0x34
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <HAL_PCD_MspInit+0xa0>)
 800a8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8d4:	4a0a      	ldr	r2, [pc, #40]	; (800a900 <HAL_PCD_MspInit+0xa0>)
 800a8d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8da:	6453      	str	r3, [r2, #68]	; 0x44
 800a8dc:	4b08      	ldr	r3, [pc, #32]	; (800a900 <HAL_PCD_MspInit+0xa0>)
 800a8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	2043      	movs	r0, #67	; 0x43
 800a8ee:	f7f8 feec 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8f2:	2043      	movs	r0, #67	; 0x43
 800a8f4:	f7f8 ff05 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8f8:	bf00      	nop
 800a8fa:	3728      	adds	r7, #40	; 0x28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	40023800 	.word	0x40023800
 800a904:	40020000 	.word	0x40020000

0800a908 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a91c:	4619      	mov	r1, r3
 800a91e:	4610      	mov	r0, r2
 800a920:	f7fe fd63 	bl	80093ea <USBD_LL_SetupStage>
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a93e:	78fa      	ldrb	r2, [r7, #3]
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	4613      	mov	r3, r2
 800a944:	00db      	lsls	r3, r3, #3
 800a946:	1a9b      	subs	r3, r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	440b      	add	r3, r1
 800a94c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	78fb      	ldrb	r3, [r7, #3]
 800a954:	4619      	mov	r1, r3
 800a956:	f7fe fd9d 	bl	8009494 <USBD_LL_DataOutStage>
}
 800a95a:	bf00      	nop
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b082      	sub	sp, #8
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	460b      	mov	r3, r1
 800a96c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a974:	78fa      	ldrb	r2, [r7, #3]
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	4613      	mov	r3, r2
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	1a9b      	subs	r3, r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	440b      	add	r3, r1
 800a982:	3348      	adds	r3, #72	; 0x48
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	78fb      	ldrb	r3, [r7, #3]
 800a988:	4619      	mov	r1, r3
 800a98a:	f7fe fde6 	bl	800955a <USBD_LL_DataInStage>
}
 800a98e:	bf00      	nop
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b082      	sub	sp, #8
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fe fefa 	bl	800979e <USBD_LL_SOF>
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b084      	sub	sp, #16
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d001      	beq.n	800a9ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a9c6:	f7f7 f8d5 	bl	8001b74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9d0:	7bfa      	ldrb	r2, [r7, #15]
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fe fea4 	bl	8009722 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe fe50 	bl	8009686 <USBD_LL_Reset>
}
 800a9e6:	bf00      	nop
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
	...

0800a9f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fe9f 	bl	8009742 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	6812      	ldr	r2, [r2, #0]
 800aa12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa16:	f043 0301 	orr.w	r3, r3, #1
 800aa1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d005      	beq.n	800aa30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa24:	4b04      	ldr	r3, [pc, #16]	; (800aa38 <HAL_PCD_SuspendCallback+0x48>)
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	4a03      	ldr	r2, [pc, #12]	; (800aa38 <HAL_PCD_SuspendCallback+0x48>)
 800aa2a:	f043 0306 	orr.w	r3, r3, #6
 800aa2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	e000ed00 	.word	0xe000ed00

0800aa3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fe8f 	bl	800976e <USBD_LL_Resume>
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fedd 	bl	800982e <USBD_LL_IsoOUTIncomplete>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa8e:	78fa      	ldrb	r2, [r7, #3]
 800aa90:	4611      	mov	r1, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe fea5 	bl	80097e2 <USBD_LL_IsoINIncomplete>
}
 800aa98:	bf00      	nop
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fee3 	bl	800987a <USBD_LL_DevConnected>
}
 800aab4:	bf00      	nop
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe fee0 	bl	8009890 <USBD_LL_DevDisconnected>
}
 800aad0:	bf00      	nop
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d13c      	bne.n	800ab62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aae8:	4a20      	ldr	r2, [pc, #128]	; (800ab6c <USBD_LL_Init+0x94>)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a1e      	ldr	r2, [pc, #120]	; (800ab6c <USBD_LL_Init+0x94>)
 800aaf4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aaf8:	4b1c      	ldr	r3, [pc, #112]	; (800ab6c <USBD_LL_Init+0x94>)
 800aafa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aafe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ab00:	4b1a      	ldr	r3, [pc, #104]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab02:	2204      	movs	r2, #4
 800ab04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab06:	4b19      	ldr	r3, [pc, #100]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab08:	2202      	movs	r2, #2
 800ab0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab0c:	4b17      	ldr	r3, [pc, #92]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab12:	4b16      	ldr	r3, [pc, #88]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab14:	2202      	movs	r2, #2
 800ab16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab18:	4b14      	ldr	r3, [pc, #80]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab1e:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab24:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ab2a:	4b10      	ldr	r3, [pc, #64]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab30:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab36:	480d      	ldr	r0, [pc, #52]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab38:	f7f9 fda9 	bl	800468e <HAL_PCD_Init>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ab42:	f7f7 f817 	bl	8001b74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab46:	2180      	movs	r1, #128	; 0x80
 800ab48:	4808      	ldr	r0, [pc, #32]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab4a:	f7fa ff06 	bl	800595a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab4e:	2240      	movs	r2, #64	; 0x40
 800ab50:	2100      	movs	r1, #0
 800ab52:	4806      	ldr	r0, [pc, #24]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab54:	f7fa feba 	bl	80058cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab58:	2280      	movs	r2, #128	; 0x80
 800ab5a:	2101      	movs	r1, #1
 800ab5c:	4803      	ldr	r0, [pc, #12]	; (800ab6c <USBD_LL_Init+0x94>)
 800ab5e:	f7fa feb5 	bl	80058cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	200027dc 	.word	0x200027dc

0800ab70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7f9 fe9e 	bl	80048c8 <HAL_PCD_Start>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 f938 	bl	800ae08 <USBD_Get_USB_Status>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b084      	sub	sp, #16
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	4608      	mov	r0, r1
 800abb0:	4611      	mov	r1, r2
 800abb2:	461a      	mov	r2, r3
 800abb4:	4603      	mov	r3, r0
 800abb6:	70fb      	strb	r3, [r7, #3]
 800abb8:	460b      	mov	r3, r1
 800abba:	70bb      	strb	r3, [r7, #2]
 800abbc:	4613      	mov	r3, r2
 800abbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800abce:	78bb      	ldrb	r3, [r7, #2]
 800abd0:	883a      	ldrh	r2, [r7, #0]
 800abd2:	78f9      	ldrb	r1, [r7, #3]
 800abd4:	f7fa fa82 	bl	80050dc <HAL_PCD_EP_Open>
 800abd8:	4603      	mov	r3, r0
 800abda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 f912 	bl	800ae08 <USBD_Get_USB_Status>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b084      	sub	sp, #16
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	460b      	mov	r3, r1
 800abfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac0c:	78fa      	ldrb	r2, [r7, #3]
 800ac0e:	4611      	mov	r1, r2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fa facb 	bl	80051ac <HAL_PCD_EP_Close>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 f8f3 	bl	800ae08 <USBD_Get_USB_Status>
 800ac22:	4603      	mov	r3, r0
 800ac24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac4a:	78fa      	ldrb	r2, [r7, #3]
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fa fba3 	bl	800539a <HAL_PCD_EP_SetStall>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f8d4 	bl	800ae08 <USBD_Get_USB_Status>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac88:	78fa      	ldrb	r2, [r7, #3]
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fa fbe8 	bl	8005462 <HAL_PCD_EP_ClrStall>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 f8b5 	bl	800ae08 <USBD_Get_USB_Status>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800acbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	da0b      	bge.n	800ace0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acc8:	78fb      	ldrb	r3, [r7, #3]
 800acca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acce:	68f9      	ldr	r1, [r7, #12]
 800acd0:	4613      	mov	r3, r2
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	1a9b      	subs	r3, r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	440b      	add	r3, r1
 800acda:	333e      	adds	r3, #62	; 0x3e
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	e00b      	b.n	800acf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ace6:	68f9      	ldr	r1, [r7, #12]
 800ace8:	4613      	mov	r3, r2
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	1a9b      	subs	r3, r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	440b      	add	r3, r1
 800acf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800acf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad1e:	78fa      	ldrb	r2, [r7, #3]
 800ad20:	4611      	mov	r1, r2
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fa f9b5 	bl	8005092 <HAL_PCD_SetAddress>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 f86a 	bl	800ae08 <USBD_Get_USB_Status>
 800ad34:	4603      	mov	r3, r0
 800ad36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b086      	sub	sp, #24
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	60f8      	str	r0, [r7, #12]
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]
 800ad4e:	460b      	mov	r3, r1
 800ad50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad60:	7af9      	ldrb	r1, [r7, #11]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	f7fa face 	bl	8005306 <HAL_PCD_EP_Transmit>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 f849 	bl	800ae08 <USBD_Get_USB_Status>
 800ad76:	4603      	mov	r3, r0
 800ad78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	607a      	str	r2, [r7, #4]
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	460b      	mov	r3, r1
 800ad92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ada2:	7af9      	ldrb	r1, [r7, #11]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	f7fa fa4a 	bl	8005240 <HAL_PCD_EP_Receive>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb0:	7dfb      	ldrb	r3, [r7, #23]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 f828 	bl	800ae08 <USBD_Get_USB_Status>
 800adb8:	4603      	mov	r3, r0
 800adba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adbc:	7dbb      	ldrb	r3, [r7, #22]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800add8:	78fa      	ldrb	r2, [r7, #3]
 800adda:	4611      	mov	r1, r2
 800addc:	4618      	mov	r0, r3
 800adde:	f7fa fa7a 	bl	80052d6 <HAL_PCD_EP_GetRxCount>
 800ade2:	4603      	mov	r3, r0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800adf4:	4b03      	ldr	r3, [pc, #12]	; (800ae04 <USBD_static_malloc+0x18>)
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	370c      	adds	r7, #12
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	200005ec 	.word	0x200005ec

0800ae08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	4603      	mov	r3, r0
 800ae10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	2b03      	cmp	r3, #3
 800ae1a:	d817      	bhi.n	800ae4c <USBD_Get_USB_Status+0x44>
 800ae1c:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <USBD_Get_USB_Status+0x1c>)
 800ae1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae22:	bf00      	nop
 800ae24:	0800ae35 	.word	0x0800ae35
 800ae28:	0800ae3b 	.word	0x0800ae3b
 800ae2c:	0800ae41 	.word	0x0800ae41
 800ae30:	0800ae47 	.word	0x0800ae47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73fb      	strb	r3, [r7, #15]
    break;
 800ae38:	e00b      	b.n	800ae52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae3a:	2303      	movs	r3, #3
 800ae3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3e:	e008      	b.n	800ae52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae40:	2301      	movs	r3, #1
 800ae42:	73fb      	strb	r3, [r7, #15]
    break;
 800ae44:	e005      	b.n	800ae52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae46:	2303      	movs	r3, #3
 800ae48:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4a:	e002      	b.n	800ae52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae50:	bf00      	nop
  }
  return usb_status;
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <__errno>:
 800ae60:	4b01      	ldr	r3, [pc, #4]	; (800ae68 <__errno+0x8>)
 800ae62:	6818      	ldr	r0, [r3, #0]
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	20000154 	.word	0x20000154

0800ae6c <__sflush_r>:
 800ae6c:	898a      	ldrh	r2, [r1, #12]
 800ae6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae72:	4605      	mov	r5, r0
 800ae74:	0710      	lsls	r0, r2, #28
 800ae76:	460c      	mov	r4, r1
 800ae78:	d458      	bmi.n	800af2c <__sflush_r+0xc0>
 800ae7a:	684b      	ldr	r3, [r1, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dc05      	bgt.n	800ae8c <__sflush_r+0x20>
 800ae80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	dc02      	bgt.n	800ae8c <__sflush_r+0x20>
 800ae86:	2000      	movs	r0, #0
 800ae88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae8e:	2e00      	cmp	r6, #0
 800ae90:	d0f9      	beq.n	800ae86 <__sflush_r+0x1a>
 800ae92:	2300      	movs	r3, #0
 800ae94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae98:	682f      	ldr	r7, [r5, #0]
 800ae9a:	602b      	str	r3, [r5, #0]
 800ae9c:	d032      	beq.n	800af04 <__sflush_r+0x98>
 800ae9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	075a      	lsls	r2, r3, #29
 800aea4:	d505      	bpl.n	800aeb2 <__sflush_r+0x46>
 800aea6:	6863      	ldr	r3, [r4, #4]
 800aea8:	1ac0      	subs	r0, r0, r3
 800aeaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aeac:	b10b      	cbz	r3, 800aeb2 <__sflush_r+0x46>
 800aeae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aeb0:	1ac0      	subs	r0, r0, r3
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeb8:	6a21      	ldr	r1, [r4, #32]
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b0      	blx	r6
 800aebe:	1c43      	adds	r3, r0, #1
 800aec0:	89a3      	ldrh	r3, [r4, #12]
 800aec2:	d106      	bne.n	800aed2 <__sflush_r+0x66>
 800aec4:	6829      	ldr	r1, [r5, #0]
 800aec6:	291d      	cmp	r1, #29
 800aec8:	d82c      	bhi.n	800af24 <__sflush_r+0xb8>
 800aeca:	4a2a      	ldr	r2, [pc, #168]	; (800af74 <__sflush_r+0x108>)
 800aecc:	40ca      	lsrs	r2, r1
 800aece:	07d6      	lsls	r6, r2, #31
 800aed0:	d528      	bpl.n	800af24 <__sflush_r+0xb8>
 800aed2:	2200      	movs	r2, #0
 800aed4:	6062      	str	r2, [r4, #4]
 800aed6:	04d9      	lsls	r1, r3, #19
 800aed8:	6922      	ldr	r2, [r4, #16]
 800aeda:	6022      	str	r2, [r4, #0]
 800aedc:	d504      	bpl.n	800aee8 <__sflush_r+0x7c>
 800aede:	1c42      	adds	r2, r0, #1
 800aee0:	d101      	bne.n	800aee6 <__sflush_r+0x7a>
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	b903      	cbnz	r3, 800aee8 <__sflush_r+0x7c>
 800aee6:	6560      	str	r0, [r4, #84]	; 0x54
 800aee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeea:	602f      	str	r7, [r5, #0]
 800aeec:	2900      	cmp	r1, #0
 800aeee:	d0ca      	beq.n	800ae86 <__sflush_r+0x1a>
 800aef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aef4:	4299      	cmp	r1, r3
 800aef6:	d002      	beq.n	800aefe <__sflush_r+0x92>
 800aef8:	4628      	mov	r0, r5
 800aefa:	f000 fa19 	bl	800b330 <_free_r>
 800aefe:	2000      	movs	r0, #0
 800af00:	6360      	str	r0, [r4, #52]	; 0x34
 800af02:	e7c1      	b.n	800ae88 <__sflush_r+0x1c>
 800af04:	6a21      	ldr	r1, [r4, #32]
 800af06:	2301      	movs	r3, #1
 800af08:	4628      	mov	r0, r5
 800af0a:	47b0      	blx	r6
 800af0c:	1c41      	adds	r1, r0, #1
 800af0e:	d1c7      	bne.n	800aea0 <__sflush_r+0x34>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0c4      	beq.n	800aea0 <__sflush_r+0x34>
 800af16:	2b1d      	cmp	r3, #29
 800af18:	d001      	beq.n	800af1e <__sflush_r+0xb2>
 800af1a:	2b16      	cmp	r3, #22
 800af1c:	d101      	bne.n	800af22 <__sflush_r+0xb6>
 800af1e:	602f      	str	r7, [r5, #0]
 800af20:	e7b1      	b.n	800ae86 <__sflush_r+0x1a>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af28:	81a3      	strh	r3, [r4, #12]
 800af2a:	e7ad      	b.n	800ae88 <__sflush_r+0x1c>
 800af2c:	690f      	ldr	r7, [r1, #16]
 800af2e:	2f00      	cmp	r7, #0
 800af30:	d0a9      	beq.n	800ae86 <__sflush_r+0x1a>
 800af32:	0793      	lsls	r3, r2, #30
 800af34:	680e      	ldr	r6, [r1, #0]
 800af36:	bf08      	it	eq
 800af38:	694b      	ldreq	r3, [r1, #20]
 800af3a:	600f      	str	r7, [r1, #0]
 800af3c:	bf18      	it	ne
 800af3e:	2300      	movne	r3, #0
 800af40:	eba6 0807 	sub.w	r8, r6, r7
 800af44:	608b      	str	r3, [r1, #8]
 800af46:	f1b8 0f00 	cmp.w	r8, #0
 800af4a:	dd9c      	ble.n	800ae86 <__sflush_r+0x1a>
 800af4c:	6a21      	ldr	r1, [r4, #32]
 800af4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af50:	4643      	mov	r3, r8
 800af52:	463a      	mov	r2, r7
 800af54:	4628      	mov	r0, r5
 800af56:	47b0      	blx	r6
 800af58:	2800      	cmp	r0, #0
 800af5a:	dc06      	bgt.n	800af6a <__sflush_r+0xfe>
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af62:	81a3      	strh	r3, [r4, #12]
 800af64:	f04f 30ff 	mov.w	r0, #4294967295
 800af68:	e78e      	b.n	800ae88 <__sflush_r+0x1c>
 800af6a:	4407      	add	r7, r0
 800af6c:	eba8 0800 	sub.w	r8, r8, r0
 800af70:	e7e9      	b.n	800af46 <__sflush_r+0xda>
 800af72:	bf00      	nop
 800af74:	20400001 	.word	0x20400001

0800af78 <_fflush_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	690b      	ldr	r3, [r1, #16]
 800af7c:	4605      	mov	r5, r0
 800af7e:	460c      	mov	r4, r1
 800af80:	b913      	cbnz	r3, 800af88 <_fflush_r+0x10>
 800af82:	2500      	movs	r5, #0
 800af84:	4628      	mov	r0, r5
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	b118      	cbz	r0, 800af92 <_fflush_r+0x1a>
 800af8a:	6983      	ldr	r3, [r0, #24]
 800af8c:	b90b      	cbnz	r3, 800af92 <_fflush_r+0x1a>
 800af8e:	f000 f887 	bl	800b0a0 <__sinit>
 800af92:	4b14      	ldr	r3, [pc, #80]	; (800afe4 <_fflush_r+0x6c>)
 800af94:	429c      	cmp	r4, r3
 800af96:	d11b      	bne.n	800afd0 <_fflush_r+0x58>
 800af98:	686c      	ldr	r4, [r5, #4]
 800af9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0ef      	beq.n	800af82 <_fflush_r+0xa>
 800afa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afa4:	07d0      	lsls	r0, r2, #31
 800afa6:	d404      	bmi.n	800afb2 <_fflush_r+0x3a>
 800afa8:	0599      	lsls	r1, r3, #22
 800afaa:	d402      	bmi.n	800afb2 <_fflush_r+0x3a>
 800afac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afae:	f000 f93a 	bl	800b226 <__retarget_lock_acquire_recursive>
 800afb2:	4628      	mov	r0, r5
 800afb4:	4621      	mov	r1, r4
 800afb6:	f7ff ff59 	bl	800ae6c <__sflush_r>
 800afba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afbc:	07da      	lsls	r2, r3, #31
 800afbe:	4605      	mov	r5, r0
 800afc0:	d4e0      	bmi.n	800af84 <_fflush_r+0xc>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	059b      	lsls	r3, r3, #22
 800afc6:	d4dd      	bmi.n	800af84 <_fflush_r+0xc>
 800afc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afca:	f000 f92d 	bl	800b228 <__retarget_lock_release_recursive>
 800afce:	e7d9      	b.n	800af84 <_fflush_r+0xc>
 800afd0:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <_fflush_r+0x70>)
 800afd2:	429c      	cmp	r4, r3
 800afd4:	d101      	bne.n	800afda <_fflush_r+0x62>
 800afd6:	68ac      	ldr	r4, [r5, #8]
 800afd8:	e7df      	b.n	800af9a <_fflush_r+0x22>
 800afda:	4b04      	ldr	r3, [pc, #16]	; (800afec <_fflush_r+0x74>)
 800afdc:	429c      	cmp	r4, r3
 800afde:	bf08      	it	eq
 800afe0:	68ec      	ldreq	r4, [r5, #12]
 800afe2:	e7da      	b.n	800af9a <_fflush_r+0x22>
 800afe4:	0800d4b4 	.word	0x0800d4b4
 800afe8:	0800d4d4 	.word	0x0800d4d4
 800afec:	0800d494 	.word	0x0800d494

0800aff0 <std>:
 800aff0:	2300      	movs	r3, #0
 800aff2:	b510      	push	{r4, lr}
 800aff4:	4604      	mov	r4, r0
 800aff6:	e9c0 3300 	strd	r3, r3, [r0]
 800affa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800affe:	6083      	str	r3, [r0, #8]
 800b000:	8181      	strh	r1, [r0, #12]
 800b002:	6643      	str	r3, [r0, #100]	; 0x64
 800b004:	81c2      	strh	r2, [r0, #14]
 800b006:	6183      	str	r3, [r0, #24]
 800b008:	4619      	mov	r1, r3
 800b00a:	2208      	movs	r2, #8
 800b00c:	305c      	adds	r0, #92	; 0x5c
 800b00e:	f000 f987 	bl	800b320 <memset>
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <std+0x38>)
 800b014:	6263      	str	r3, [r4, #36]	; 0x24
 800b016:	4b05      	ldr	r3, [pc, #20]	; (800b02c <std+0x3c>)
 800b018:	62a3      	str	r3, [r4, #40]	; 0x28
 800b01a:	4b05      	ldr	r3, [pc, #20]	; (800b030 <std+0x40>)
 800b01c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b01e:	4b05      	ldr	r3, [pc, #20]	; (800b034 <std+0x44>)
 800b020:	6224      	str	r4, [r4, #32]
 800b022:	6323      	str	r3, [r4, #48]	; 0x30
 800b024:	bd10      	pop	{r4, pc}
 800b026:	bf00      	nop
 800b028:	0800b5f9 	.word	0x0800b5f9
 800b02c:	0800b61b 	.word	0x0800b61b
 800b030:	0800b653 	.word	0x0800b653
 800b034:	0800b677 	.word	0x0800b677

0800b038 <_cleanup_r>:
 800b038:	4901      	ldr	r1, [pc, #4]	; (800b040 <_cleanup_r+0x8>)
 800b03a:	f000 b8af 	b.w	800b19c <_fwalk_reent>
 800b03e:	bf00      	nop
 800b040:	0800af79 	.word	0x0800af79

0800b044 <__sfmoreglue>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	1e4a      	subs	r2, r1, #1
 800b048:	2568      	movs	r5, #104	; 0x68
 800b04a:	4355      	muls	r5, r2
 800b04c:	460e      	mov	r6, r1
 800b04e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b052:	f000 f9bd 	bl	800b3d0 <_malloc_r>
 800b056:	4604      	mov	r4, r0
 800b058:	b140      	cbz	r0, 800b06c <__sfmoreglue+0x28>
 800b05a:	2100      	movs	r1, #0
 800b05c:	e9c0 1600 	strd	r1, r6, [r0]
 800b060:	300c      	adds	r0, #12
 800b062:	60a0      	str	r0, [r4, #8]
 800b064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b068:	f000 f95a 	bl	800b320 <memset>
 800b06c:	4620      	mov	r0, r4
 800b06e:	bd70      	pop	{r4, r5, r6, pc}

0800b070 <__sfp_lock_acquire>:
 800b070:	4801      	ldr	r0, [pc, #4]	; (800b078 <__sfp_lock_acquire+0x8>)
 800b072:	f000 b8d8 	b.w	800b226 <__retarget_lock_acquire_recursive>
 800b076:	bf00      	nop
 800b078:	20002bec 	.word	0x20002bec

0800b07c <__sfp_lock_release>:
 800b07c:	4801      	ldr	r0, [pc, #4]	; (800b084 <__sfp_lock_release+0x8>)
 800b07e:	f000 b8d3 	b.w	800b228 <__retarget_lock_release_recursive>
 800b082:	bf00      	nop
 800b084:	20002bec 	.word	0x20002bec

0800b088 <__sinit_lock_acquire>:
 800b088:	4801      	ldr	r0, [pc, #4]	; (800b090 <__sinit_lock_acquire+0x8>)
 800b08a:	f000 b8cc 	b.w	800b226 <__retarget_lock_acquire_recursive>
 800b08e:	bf00      	nop
 800b090:	20002be7 	.word	0x20002be7

0800b094 <__sinit_lock_release>:
 800b094:	4801      	ldr	r0, [pc, #4]	; (800b09c <__sinit_lock_release+0x8>)
 800b096:	f000 b8c7 	b.w	800b228 <__retarget_lock_release_recursive>
 800b09a:	bf00      	nop
 800b09c:	20002be7 	.word	0x20002be7

0800b0a0 <__sinit>:
 800b0a0:	b510      	push	{r4, lr}
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	f7ff fff0 	bl	800b088 <__sinit_lock_acquire>
 800b0a8:	69a3      	ldr	r3, [r4, #24]
 800b0aa:	b11b      	cbz	r3, 800b0b4 <__sinit+0x14>
 800b0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b0:	f7ff bff0 	b.w	800b094 <__sinit_lock_release>
 800b0b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0b8:	6523      	str	r3, [r4, #80]	; 0x50
 800b0ba:	4b13      	ldr	r3, [pc, #76]	; (800b108 <__sinit+0x68>)
 800b0bc:	4a13      	ldr	r2, [pc, #76]	; (800b10c <__sinit+0x6c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0c2:	42a3      	cmp	r3, r4
 800b0c4:	bf04      	itt	eq
 800b0c6:	2301      	moveq	r3, #1
 800b0c8:	61a3      	streq	r3, [r4, #24]
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 f820 	bl	800b110 <__sfp>
 800b0d0:	6060      	str	r0, [r4, #4]
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 f81c 	bl	800b110 <__sfp>
 800b0d8:	60a0      	str	r0, [r4, #8]
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 f818 	bl	800b110 <__sfp>
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	60e0      	str	r0, [r4, #12]
 800b0e4:	2104      	movs	r1, #4
 800b0e6:	6860      	ldr	r0, [r4, #4]
 800b0e8:	f7ff ff82 	bl	800aff0 <std>
 800b0ec:	68a0      	ldr	r0, [r4, #8]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	2109      	movs	r1, #9
 800b0f2:	f7ff ff7d 	bl	800aff0 <std>
 800b0f6:	68e0      	ldr	r0, [r4, #12]
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	2112      	movs	r1, #18
 800b0fc:	f7ff ff78 	bl	800aff0 <std>
 800b100:	2301      	movs	r3, #1
 800b102:	61a3      	str	r3, [r4, #24]
 800b104:	e7d2      	b.n	800b0ac <__sinit+0xc>
 800b106:	bf00      	nop
 800b108:	0800d4f4 	.word	0x0800d4f4
 800b10c:	0800b039 	.word	0x0800b039

0800b110 <__sfp>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	4607      	mov	r7, r0
 800b114:	f7ff ffac 	bl	800b070 <__sfp_lock_acquire>
 800b118:	4b1e      	ldr	r3, [pc, #120]	; (800b194 <__sfp+0x84>)
 800b11a:	681e      	ldr	r6, [r3, #0]
 800b11c:	69b3      	ldr	r3, [r6, #24]
 800b11e:	b913      	cbnz	r3, 800b126 <__sfp+0x16>
 800b120:	4630      	mov	r0, r6
 800b122:	f7ff ffbd 	bl	800b0a0 <__sinit>
 800b126:	3648      	adds	r6, #72	; 0x48
 800b128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	d503      	bpl.n	800b138 <__sfp+0x28>
 800b130:	6833      	ldr	r3, [r6, #0]
 800b132:	b30b      	cbz	r3, 800b178 <__sfp+0x68>
 800b134:	6836      	ldr	r6, [r6, #0]
 800b136:	e7f7      	b.n	800b128 <__sfp+0x18>
 800b138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b13c:	b9d5      	cbnz	r5, 800b174 <__sfp+0x64>
 800b13e:	4b16      	ldr	r3, [pc, #88]	; (800b198 <__sfp+0x88>)
 800b140:	60e3      	str	r3, [r4, #12]
 800b142:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b146:	6665      	str	r5, [r4, #100]	; 0x64
 800b148:	f000 f86c 	bl	800b224 <__retarget_lock_init_recursive>
 800b14c:	f7ff ff96 	bl	800b07c <__sfp_lock_release>
 800b150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b158:	6025      	str	r5, [r4, #0]
 800b15a:	61a5      	str	r5, [r4, #24]
 800b15c:	2208      	movs	r2, #8
 800b15e:	4629      	mov	r1, r5
 800b160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b164:	f000 f8dc 	bl	800b320 <memset>
 800b168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b16c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b170:	4620      	mov	r0, r4
 800b172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b174:	3468      	adds	r4, #104	; 0x68
 800b176:	e7d9      	b.n	800b12c <__sfp+0x1c>
 800b178:	2104      	movs	r1, #4
 800b17a:	4638      	mov	r0, r7
 800b17c:	f7ff ff62 	bl	800b044 <__sfmoreglue>
 800b180:	4604      	mov	r4, r0
 800b182:	6030      	str	r0, [r6, #0]
 800b184:	2800      	cmp	r0, #0
 800b186:	d1d5      	bne.n	800b134 <__sfp+0x24>
 800b188:	f7ff ff78 	bl	800b07c <__sfp_lock_release>
 800b18c:	230c      	movs	r3, #12
 800b18e:	603b      	str	r3, [r7, #0]
 800b190:	e7ee      	b.n	800b170 <__sfp+0x60>
 800b192:	bf00      	nop
 800b194:	0800d4f4 	.word	0x0800d4f4
 800b198:	ffff0001 	.word	0xffff0001

0800b19c <_fwalk_reent>:
 800b19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	4688      	mov	r8, r1
 800b1a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1a8:	2700      	movs	r7, #0
 800b1aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1ae:	f1b9 0901 	subs.w	r9, r9, #1
 800b1b2:	d505      	bpl.n	800b1c0 <_fwalk_reent+0x24>
 800b1b4:	6824      	ldr	r4, [r4, #0]
 800b1b6:	2c00      	cmp	r4, #0
 800b1b8:	d1f7      	bne.n	800b1aa <_fwalk_reent+0xe>
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1c0:	89ab      	ldrh	r3, [r5, #12]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d907      	bls.n	800b1d6 <_fwalk_reent+0x3a>
 800b1c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	d003      	beq.n	800b1d6 <_fwalk_reent+0x3a>
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	47c0      	blx	r8
 800b1d4:	4307      	orrs	r7, r0
 800b1d6:	3568      	adds	r5, #104	; 0x68
 800b1d8:	e7e9      	b.n	800b1ae <_fwalk_reent+0x12>
	...

0800b1dc <__libc_init_array>:
 800b1dc:	b570      	push	{r4, r5, r6, lr}
 800b1de:	4d0d      	ldr	r5, [pc, #52]	; (800b214 <__libc_init_array+0x38>)
 800b1e0:	4c0d      	ldr	r4, [pc, #52]	; (800b218 <__libc_init_array+0x3c>)
 800b1e2:	1b64      	subs	r4, r4, r5
 800b1e4:	10a4      	asrs	r4, r4, #2
 800b1e6:	2600      	movs	r6, #0
 800b1e8:	42a6      	cmp	r6, r4
 800b1ea:	d109      	bne.n	800b200 <__libc_init_array+0x24>
 800b1ec:	4d0b      	ldr	r5, [pc, #44]	; (800b21c <__libc_init_array+0x40>)
 800b1ee:	4c0c      	ldr	r4, [pc, #48]	; (800b220 <__libc_init_array+0x44>)
 800b1f0:	f000 fec4 	bl	800bf7c <_init>
 800b1f4:	1b64      	subs	r4, r4, r5
 800b1f6:	10a4      	asrs	r4, r4, #2
 800b1f8:	2600      	movs	r6, #0
 800b1fa:	42a6      	cmp	r6, r4
 800b1fc:	d105      	bne.n	800b20a <__libc_init_array+0x2e>
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
 800b200:	f855 3b04 	ldr.w	r3, [r5], #4
 800b204:	4798      	blx	r3
 800b206:	3601      	adds	r6, #1
 800b208:	e7ee      	b.n	800b1e8 <__libc_init_array+0xc>
 800b20a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b20e:	4798      	blx	r3
 800b210:	3601      	adds	r6, #1
 800b212:	e7f2      	b.n	800b1fa <__libc_init_array+0x1e>
 800b214:	0800d534 	.word	0x0800d534
 800b218:	0800d534 	.word	0x0800d534
 800b21c:	0800d534 	.word	0x0800d534
 800b220:	0800d538 	.word	0x0800d538

0800b224 <__retarget_lock_init_recursive>:
 800b224:	4770      	bx	lr

0800b226 <__retarget_lock_acquire_recursive>:
 800b226:	4770      	bx	lr

0800b228 <__retarget_lock_release_recursive>:
 800b228:	4770      	bx	lr

0800b22a <__swhatbuf_r>:
 800b22a:	b570      	push	{r4, r5, r6, lr}
 800b22c:	460e      	mov	r6, r1
 800b22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b232:	2900      	cmp	r1, #0
 800b234:	b096      	sub	sp, #88	; 0x58
 800b236:	4614      	mov	r4, r2
 800b238:	461d      	mov	r5, r3
 800b23a:	da07      	bge.n	800b24c <__swhatbuf_r+0x22>
 800b23c:	2300      	movs	r3, #0
 800b23e:	602b      	str	r3, [r5, #0]
 800b240:	89b3      	ldrh	r3, [r6, #12]
 800b242:	061a      	lsls	r2, r3, #24
 800b244:	d410      	bmi.n	800b268 <__swhatbuf_r+0x3e>
 800b246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24a:	e00e      	b.n	800b26a <__swhatbuf_r+0x40>
 800b24c:	466a      	mov	r2, sp
 800b24e:	f000 fb0b 	bl	800b868 <_fstat_r>
 800b252:	2800      	cmp	r0, #0
 800b254:	dbf2      	blt.n	800b23c <__swhatbuf_r+0x12>
 800b256:	9a01      	ldr	r2, [sp, #4]
 800b258:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b25c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b260:	425a      	negs	r2, r3
 800b262:	415a      	adcs	r2, r3
 800b264:	602a      	str	r2, [r5, #0]
 800b266:	e7ee      	b.n	800b246 <__swhatbuf_r+0x1c>
 800b268:	2340      	movs	r3, #64	; 0x40
 800b26a:	2000      	movs	r0, #0
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	b016      	add	sp, #88	; 0x58
 800b270:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b274 <__smakebuf_r>:
 800b274:	898b      	ldrh	r3, [r1, #12]
 800b276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b278:	079d      	lsls	r5, r3, #30
 800b27a:	4606      	mov	r6, r0
 800b27c:	460c      	mov	r4, r1
 800b27e:	d507      	bpl.n	800b290 <__smakebuf_r+0x1c>
 800b280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	6123      	str	r3, [r4, #16]
 800b288:	2301      	movs	r3, #1
 800b28a:	6163      	str	r3, [r4, #20]
 800b28c:	b002      	add	sp, #8
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	ab01      	add	r3, sp, #4
 800b292:	466a      	mov	r2, sp
 800b294:	f7ff ffc9 	bl	800b22a <__swhatbuf_r>
 800b298:	9900      	ldr	r1, [sp, #0]
 800b29a:	4605      	mov	r5, r0
 800b29c:	4630      	mov	r0, r6
 800b29e:	f000 f897 	bl	800b3d0 <_malloc_r>
 800b2a2:	b948      	cbnz	r0, 800b2b8 <__smakebuf_r+0x44>
 800b2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a8:	059a      	lsls	r2, r3, #22
 800b2aa:	d4ef      	bmi.n	800b28c <__smakebuf_r+0x18>
 800b2ac:	f023 0303 	bic.w	r3, r3, #3
 800b2b0:	f043 0302 	orr.w	r3, r3, #2
 800b2b4:	81a3      	strh	r3, [r4, #12]
 800b2b6:	e7e3      	b.n	800b280 <__smakebuf_r+0xc>
 800b2b8:	4b0d      	ldr	r3, [pc, #52]	; (800b2f0 <__smakebuf_r+0x7c>)
 800b2ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	6020      	str	r0, [r4, #0]
 800b2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	9b00      	ldr	r3, [sp, #0]
 800b2c8:	6163      	str	r3, [r4, #20]
 800b2ca:	9b01      	ldr	r3, [sp, #4]
 800b2cc:	6120      	str	r0, [r4, #16]
 800b2ce:	b15b      	cbz	r3, 800b2e8 <__smakebuf_r+0x74>
 800b2d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f000 fad9 	bl	800b88c <_isatty_r>
 800b2da:	b128      	cbz	r0, 800b2e8 <__smakebuf_r+0x74>
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	f023 0303 	bic.w	r3, r3, #3
 800b2e2:	f043 0301 	orr.w	r3, r3, #1
 800b2e6:	81a3      	strh	r3, [r4, #12]
 800b2e8:	89a0      	ldrh	r0, [r4, #12]
 800b2ea:	4305      	orrs	r5, r0
 800b2ec:	81a5      	strh	r5, [r4, #12]
 800b2ee:	e7cd      	b.n	800b28c <__smakebuf_r+0x18>
 800b2f0:	0800b039 	.word	0x0800b039

0800b2f4 <malloc>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	; (800b300 <malloc+0xc>)
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	f000 b869 	b.w	800b3d0 <_malloc_r>
 800b2fe:	bf00      	nop
 800b300:	20000154 	.word	0x20000154

0800b304 <memcpy>:
 800b304:	440a      	add	r2, r1
 800b306:	4291      	cmp	r1, r2
 800b308:	f100 33ff 	add.w	r3, r0, #4294967295
 800b30c:	d100      	bne.n	800b310 <memcpy+0xc>
 800b30e:	4770      	bx	lr
 800b310:	b510      	push	{r4, lr}
 800b312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b31a:	4291      	cmp	r1, r2
 800b31c:	d1f9      	bne.n	800b312 <memcpy+0xe>
 800b31e:	bd10      	pop	{r4, pc}

0800b320 <memset>:
 800b320:	4402      	add	r2, r0
 800b322:	4603      	mov	r3, r0
 800b324:	4293      	cmp	r3, r2
 800b326:	d100      	bne.n	800b32a <memset+0xa>
 800b328:	4770      	bx	lr
 800b32a:	f803 1b01 	strb.w	r1, [r3], #1
 800b32e:	e7f9      	b.n	800b324 <memset+0x4>

0800b330 <_free_r>:
 800b330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b332:	2900      	cmp	r1, #0
 800b334:	d048      	beq.n	800b3c8 <_free_r+0x98>
 800b336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b33a:	9001      	str	r0, [sp, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f1a1 0404 	sub.w	r4, r1, #4
 800b342:	bfb8      	it	lt
 800b344:	18e4      	addlt	r4, r4, r3
 800b346:	f000 fac3 	bl	800b8d0 <__malloc_lock>
 800b34a:	4a20      	ldr	r2, [pc, #128]	; (800b3cc <_free_r+0x9c>)
 800b34c:	9801      	ldr	r0, [sp, #4]
 800b34e:	6813      	ldr	r3, [r2, #0]
 800b350:	4615      	mov	r5, r2
 800b352:	b933      	cbnz	r3, 800b362 <_free_r+0x32>
 800b354:	6063      	str	r3, [r4, #4]
 800b356:	6014      	str	r4, [r2, #0]
 800b358:	b003      	add	sp, #12
 800b35a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b35e:	f000 babd 	b.w	800b8dc <__malloc_unlock>
 800b362:	42a3      	cmp	r3, r4
 800b364:	d90b      	bls.n	800b37e <_free_r+0x4e>
 800b366:	6821      	ldr	r1, [r4, #0]
 800b368:	1862      	adds	r2, r4, r1
 800b36a:	4293      	cmp	r3, r2
 800b36c:	bf04      	itt	eq
 800b36e:	681a      	ldreq	r2, [r3, #0]
 800b370:	685b      	ldreq	r3, [r3, #4]
 800b372:	6063      	str	r3, [r4, #4]
 800b374:	bf04      	itt	eq
 800b376:	1852      	addeq	r2, r2, r1
 800b378:	6022      	streq	r2, [r4, #0]
 800b37a:	602c      	str	r4, [r5, #0]
 800b37c:	e7ec      	b.n	800b358 <_free_r+0x28>
 800b37e:	461a      	mov	r2, r3
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	b10b      	cbz	r3, 800b388 <_free_r+0x58>
 800b384:	42a3      	cmp	r3, r4
 800b386:	d9fa      	bls.n	800b37e <_free_r+0x4e>
 800b388:	6811      	ldr	r1, [r2, #0]
 800b38a:	1855      	adds	r5, r2, r1
 800b38c:	42a5      	cmp	r5, r4
 800b38e:	d10b      	bne.n	800b3a8 <_free_r+0x78>
 800b390:	6824      	ldr	r4, [r4, #0]
 800b392:	4421      	add	r1, r4
 800b394:	1854      	adds	r4, r2, r1
 800b396:	42a3      	cmp	r3, r4
 800b398:	6011      	str	r1, [r2, #0]
 800b39a:	d1dd      	bne.n	800b358 <_free_r+0x28>
 800b39c:	681c      	ldr	r4, [r3, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	6053      	str	r3, [r2, #4]
 800b3a2:	4421      	add	r1, r4
 800b3a4:	6011      	str	r1, [r2, #0]
 800b3a6:	e7d7      	b.n	800b358 <_free_r+0x28>
 800b3a8:	d902      	bls.n	800b3b0 <_free_r+0x80>
 800b3aa:	230c      	movs	r3, #12
 800b3ac:	6003      	str	r3, [r0, #0]
 800b3ae:	e7d3      	b.n	800b358 <_free_r+0x28>
 800b3b0:	6825      	ldr	r5, [r4, #0]
 800b3b2:	1961      	adds	r1, r4, r5
 800b3b4:	428b      	cmp	r3, r1
 800b3b6:	bf04      	itt	eq
 800b3b8:	6819      	ldreq	r1, [r3, #0]
 800b3ba:	685b      	ldreq	r3, [r3, #4]
 800b3bc:	6063      	str	r3, [r4, #4]
 800b3be:	bf04      	itt	eq
 800b3c0:	1949      	addeq	r1, r1, r5
 800b3c2:	6021      	streq	r1, [r4, #0]
 800b3c4:	6054      	str	r4, [r2, #4]
 800b3c6:	e7c7      	b.n	800b358 <_free_r+0x28>
 800b3c8:	b003      	add	sp, #12
 800b3ca:	bd30      	pop	{r4, r5, pc}
 800b3cc:	200021c0 	.word	0x200021c0

0800b3d0 <_malloc_r>:
 800b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d2:	1ccd      	adds	r5, r1, #3
 800b3d4:	f025 0503 	bic.w	r5, r5, #3
 800b3d8:	3508      	adds	r5, #8
 800b3da:	2d0c      	cmp	r5, #12
 800b3dc:	bf38      	it	cc
 800b3de:	250c      	movcc	r5, #12
 800b3e0:	2d00      	cmp	r5, #0
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	db01      	blt.n	800b3ea <_malloc_r+0x1a>
 800b3e6:	42a9      	cmp	r1, r5
 800b3e8:	d903      	bls.n	800b3f2 <_malloc_r+0x22>
 800b3ea:	230c      	movs	r3, #12
 800b3ec:	6033      	str	r3, [r6, #0]
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f2:	f000 fa6d 	bl	800b8d0 <__malloc_lock>
 800b3f6:	4921      	ldr	r1, [pc, #132]	; (800b47c <_malloc_r+0xac>)
 800b3f8:	680a      	ldr	r2, [r1, #0]
 800b3fa:	4614      	mov	r4, r2
 800b3fc:	b99c      	cbnz	r4, 800b426 <_malloc_r+0x56>
 800b3fe:	4f20      	ldr	r7, [pc, #128]	; (800b480 <_malloc_r+0xb0>)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	b923      	cbnz	r3, 800b40e <_malloc_r+0x3e>
 800b404:	4621      	mov	r1, r4
 800b406:	4630      	mov	r0, r6
 800b408:	f000 f8b2 	bl	800b570 <_sbrk_r>
 800b40c:	6038      	str	r0, [r7, #0]
 800b40e:	4629      	mov	r1, r5
 800b410:	4630      	mov	r0, r6
 800b412:	f000 f8ad 	bl	800b570 <_sbrk_r>
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	d123      	bne.n	800b462 <_malloc_r+0x92>
 800b41a:	230c      	movs	r3, #12
 800b41c:	6033      	str	r3, [r6, #0]
 800b41e:	4630      	mov	r0, r6
 800b420:	f000 fa5c 	bl	800b8dc <__malloc_unlock>
 800b424:	e7e3      	b.n	800b3ee <_malloc_r+0x1e>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	1b5b      	subs	r3, r3, r5
 800b42a:	d417      	bmi.n	800b45c <_malloc_r+0x8c>
 800b42c:	2b0b      	cmp	r3, #11
 800b42e:	d903      	bls.n	800b438 <_malloc_r+0x68>
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	441c      	add	r4, r3
 800b434:	6025      	str	r5, [r4, #0]
 800b436:	e004      	b.n	800b442 <_malloc_r+0x72>
 800b438:	6863      	ldr	r3, [r4, #4]
 800b43a:	42a2      	cmp	r2, r4
 800b43c:	bf0c      	ite	eq
 800b43e:	600b      	streq	r3, [r1, #0]
 800b440:	6053      	strne	r3, [r2, #4]
 800b442:	4630      	mov	r0, r6
 800b444:	f000 fa4a 	bl	800b8dc <__malloc_unlock>
 800b448:	f104 000b 	add.w	r0, r4, #11
 800b44c:	1d23      	adds	r3, r4, #4
 800b44e:	f020 0007 	bic.w	r0, r0, #7
 800b452:	1ac2      	subs	r2, r0, r3
 800b454:	d0cc      	beq.n	800b3f0 <_malloc_r+0x20>
 800b456:	1a1b      	subs	r3, r3, r0
 800b458:	50a3      	str	r3, [r4, r2]
 800b45a:	e7c9      	b.n	800b3f0 <_malloc_r+0x20>
 800b45c:	4622      	mov	r2, r4
 800b45e:	6864      	ldr	r4, [r4, #4]
 800b460:	e7cc      	b.n	800b3fc <_malloc_r+0x2c>
 800b462:	1cc4      	adds	r4, r0, #3
 800b464:	f024 0403 	bic.w	r4, r4, #3
 800b468:	42a0      	cmp	r0, r4
 800b46a:	d0e3      	beq.n	800b434 <_malloc_r+0x64>
 800b46c:	1a21      	subs	r1, r4, r0
 800b46e:	4630      	mov	r0, r6
 800b470:	f000 f87e 	bl	800b570 <_sbrk_r>
 800b474:	3001      	adds	r0, #1
 800b476:	d1dd      	bne.n	800b434 <_malloc_r+0x64>
 800b478:	e7cf      	b.n	800b41a <_malloc_r+0x4a>
 800b47a:	bf00      	nop
 800b47c:	200021c0 	.word	0x200021c0
 800b480:	200021c4 	.word	0x200021c4

0800b484 <_puts_r>:
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	460e      	mov	r6, r1
 800b488:	4605      	mov	r5, r0
 800b48a:	b118      	cbz	r0, 800b494 <_puts_r+0x10>
 800b48c:	6983      	ldr	r3, [r0, #24]
 800b48e:	b90b      	cbnz	r3, 800b494 <_puts_r+0x10>
 800b490:	f7ff fe06 	bl	800b0a0 <__sinit>
 800b494:	69ab      	ldr	r3, [r5, #24]
 800b496:	68ac      	ldr	r4, [r5, #8]
 800b498:	b913      	cbnz	r3, 800b4a0 <_puts_r+0x1c>
 800b49a:	4628      	mov	r0, r5
 800b49c:	f7ff fe00 	bl	800b0a0 <__sinit>
 800b4a0:	4b2c      	ldr	r3, [pc, #176]	; (800b554 <_puts_r+0xd0>)
 800b4a2:	429c      	cmp	r4, r3
 800b4a4:	d120      	bne.n	800b4e8 <_puts_r+0x64>
 800b4a6:	686c      	ldr	r4, [r5, #4]
 800b4a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4aa:	07db      	lsls	r3, r3, #31
 800b4ac:	d405      	bmi.n	800b4ba <_puts_r+0x36>
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	0598      	lsls	r0, r3, #22
 800b4b2:	d402      	bmi.n	800b4ba <_puts_r+0x36>
 800b4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4b6:	f7ff feb6 	bl	800b226 <__retarget_lock_acquire_recursive>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	0719      	lsls	r1, r3, #28
 800b4be:	d51d      	bpl.n	800b4fc <_puts_r+0x78>
 800b4c0:	6923      	ldr	r3, [r4, #16]
 800b4c2:	b1db      	cbz	r3, 800b4fc <_puts_r+0x78>
 800b4c4:	3e01      	subs	r6, #1
 800b4c6:	68a3      	ldr	r3, [r4, #8]
 800b4c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	60a3      	str	r3, [r4, #8]
 800b4d0:	bb39      	cbnz	r1, 800b522 <_puts_r+0x9e>
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	da38      	bge.n	800b548 <_puts_r+0xc4>
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	210a      	movs	r1, #10
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f000 f8e2 	bl	800b6a4 <__swbuf_r>
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d011      	beq.n	800b508 <_puts_r+0x84>
 800b4e4:	250a      	movs	r5, #10
 800b4e6:	e011      	b.n	800b50c <_puts_r+0x88>
 800b4e8:	4b1b      	ldr	r3, [pc, #108]	; (800b558 <_puts_r+0xd4>)
 800b4ea:	429c      	cmp	r4, r3
 800b4ec:	d101      	bne.n	800b4f2 <_puts_r+0x6e>
 800b4ee:	68ac      	ldr	r4, [r5, #8]
 800b4f0:	e7da      	b.n	800b4a8 <_puts_r+0x24>
 800b4f2:	4b1a      	ldr	r3, [pc, #104]	; (800b55c <_puts_r+0xd8>)
 800b4f4:	429c      	cmp	r4, r3
 800b4f6:	bf08      	it	eq
 800b4f8:	68ec      	ldreq	r4, [r5, #12]
 800b4fa:	e7d5      	b.n	800b4a8 <_puts_r+0x24>
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	4628      	mov	r0, r5
 800b500:	f000 f934 	bl	800b76c <__swsetup_r>
 800b504:	2800      	cmp	r0, #0
 800b506:	d0dd      	beq.n	800b4c4 <_puts_r+0x40>
 800b508:	f04f 35ff 	mov.w	r5, #4294967295
 800b50c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b50e:	07da      	lsls	r2, r3, #31
 800b510:	d405      	bmi.n	800b51e <_puts_r+0x9a>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	059b      	lsls	r3, r3, #22
 800b516:	d402      	bmi.n	800b51e <_puts_r+0x9a>
 800b518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b51a:	f7ff fe85 	bl	800b228 <__retarget_lock_release_recursive>
 800b51e:	4628      	mov	r0, r5
 800b520:	bd70      	pop	{r4, r5, r6, pc}
 800b522:	2b00      	cmp	r3, #0
 800b524:	da04      	bge.n	800b530 <_puts_r+0xac>
 800b526:	69a2      	ldr	r2, [r4, #24]
 800b528:	429a      	cmp	r2, r3
 800b52a:	dc06      	bgt.n	800b53a <_puts_r+0xb6>
 800b52c:	290a      	cmp	r1, #10
 800b52e:	d004      	beq.n	800b53a <_puts_r+0xb6>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	6022      	str	r2, [r4, #0]
 800b536:	7019      	strb	r1, [r3, #0]
 800b538:	e7c5      	b.n	800b4c6 <_puts_r+0x42>
 800b53a:	4622      	mov	r2, r4
 800b53c:	4628      	mov	r0, r5
 800b53e:	f000 f8b1 	bl	800b6a4 <__swbuf_r>
 800b542:	3001      	adds	r0, #1
 800b544:	d1bf      	bne.n	800b4c6 <_puts_r+0x42>
 800b546:	e7df      	b.n	800b508 <_puts_r+0x84>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	250a      	movs	r5, #10
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	6022      	str	r2, [r4, #0]
 800b550:	701d      	strb	r5, [r3, #0]
 800b552:	e7db      	b.n	800b50c <_puts_r+0x88>
 800b554:	0800d4b4 	.word	0x0800d4b4
 800b558:	0800d4d4 	.word	0x0800d4d4
 800b55c:	0800d494 	.word	0x0800d494

0800b560 <puts>:
 800b560:	4b02      	ldr	r3, [pc, #8]	; (800b56c <puts+0xc>)
 800b562:	4601      	mov	r1, r0
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	f7ff bf8d 	b.w	800b484 <_puts_r>
 800b56a:	bf00      	nop
 800b56c:	20000154 	.word	0x20000154

0800b570 <_sbrk_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4d06      	ldr	r5, [pc, #24]	; (800b58c <_sbrk_r+0x1c>)
 800b574:	2300      	movs	r3, #0
 800b576:	4604      	mov	r4, r0
 800b578:	4608      	mov	r0, r1
 800b57a:	602b      	str	r3, [r5, #0]
 800b57c:	f7f7 fa50 	bl	8002a20 <_sbrk>
 800b580:	1c43      	adds	r3, r0, #1
 800b582:	d102      	bne.n	800b58a <_sbrk_r+0x1a>
 800b584:	682b      	ldr	r3, [r5, #0]
 800b586:	b103      	cbz	r3, 800b58a <_sbrk_r+0x1a>
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	bd38      	pop	{r3, r4, r5, pc}
 800b58c:	20002bf0 	.word	0x20002bf0

0800b590 <sniprintf>:
 800b590:	b40c      	push	{r2, r3}
 800b592:	b530      	push	{r4, r5, lr}
 800b594:	4b17      	ldr	r3, [pc, #92]	; (800b5f4 <sniprintf+0x64>)
 800b596:	1e0c      	subs	r4, r1, #0
 800b598:	681d      	ldr	r5, [r3, #0]
 800b59a:	b09d      	sub	sp, #116	; 0x74
 800b59c:	da08      	bge.n	800b5b0 <sniprintf+0x20>
 800b59e:	238b      	movs	r3, #139	; 0x8b
 800b5a0:	602b      	str	r3, [r5, #0]
 800b5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a6:	b01d      	add	sp, #116	; 0x74
 800b5a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5ac:	b002      	add	sp, #8
 800b5ae:	4770      	bx	lr
 800b5b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b5b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b5b8:	bf14      	ite	ne
 800b5ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b5be:	4623      	moveq	r3, r4
 800b5c0:	9304      	str	r3, [sp, #16]
 800b5c2:	9307      	str	r3, [sp, #28]
 800b5c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5c8:	9002      	str	r0, [sp, #8]
 800b5ca:	9006      	str	r0, [sp, #24]
 800b5cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b5d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b5d2:	ab21      	add	r3, sp, #132	; 0x84
 800b5d4:	a902      	add	r1, sp, #8
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	f000 fa07 	bl	800b9ec <_svfiprintf_r>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	bfbc      	itt	lt
 800b5e2:	238b      	movlt	r3, #139	; 0x8b
 800b5e4:	602b      	strlt	r3, [r5, #0]
 800b5e6:	2c00      	cmp	r4, #0
 800b5e8:	d0dd      	beq.n	800b5a6 <sniprintf+0x16>
 800b5ea:	9b02      	ldr	r3, [sp, #8]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	e7d9      	b.n	800b5a6 <sniprintf+0x16>
 800b5f2:	bf00      	nop
 800b5f4:	20000154 	.word	0x20000154

0800b5f8 <__sread>:
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b600:	f000 fc88 	bl	800bf14 <_read_r>
 800b604:	2800      	cmp	r0, #0
 800b606:	bfab      	itete	ge
 800b608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b60a:	89a3      	ldrhlt	r3, [r4, #12]
 800b60c:	181b      	addge	r3, r3, r0
 800b60e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b612:	bfac      	ite	ge
 800b614:	6563      	strge	r3, [r4, #84]	; 0x54
 800b616:	81a3      	strhlt	r3, [r4, #12]
 800b618:	bd10      	pop	{r4, pc}

0800b61a <__swrite>:
 800b61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b61e:	461f      	mov	r7, r3
 800b620:	898b      	ldrh	r3, [r1, #12]
 800b622:	05db      	lsls	r3, r3, #23
 800b624:	4605      	mov	r5, r0
 800b626:	460c      	mov	r4, r1
 800b628:	4616      	mov	r6, r2
 800b62a:	d505      	bpl.n	800b638 <__swrite+0x1e>
 800b62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b630:	2302      	movs	r3, #2
 800b632:	2200      	movs	r2, #0
 800b634:	f000 f93a 	bl	800b8ac <_lseek_r>
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b63e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b642:	81a3      	strh	r3, [r4, #12]
 800b644:	4632      	mov	r2, r6
 800b646:	463b      	mov	r3, r7
 800b648:	4628      	mov	r0, r5
 800b64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b64e:	f000 b87b 	b.w	800b748 <_write_r>

0800b652 <__sseek>:
 800b652:	b510      	push	{r4, lr}
 800b654:	460c      	mov	r4, r1
 800b656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b65a:	f000 f927 	bl	800b8ac <_lseek_r>
 800b65e:	1c43      	adds	r3, r0, #1
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	bf15      	itete	ne
 800b664:	6560      	strne	r0, [r4, #84]	; 0x54
 800b666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b66a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b66e:	81a3      	strheq	r3, [r4, #12]
 800b670:	bf18      	it	ne
 800b672:	81a3      	strhne	r3, [r4, #12]
 800b674:	bd10      	pop	{r4, pc}

0800b676 <__sclose>:
 800b676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b67a:	f000 b8e5 	b.w	800b848 <_close_r>

0800b67e <strncpy>:
 800b67e:	b510      	push	{r4, lr}
 800b680:	3901      	subs	r1, #1
 800b682:	4603      	mov	r3, r0
 800b684:	b132      	cbz	r2, 800b694 <strncpy+0x16>
 800b686:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b68a:	f803 4b01 	strb.w	r4, [r3], #1
 800b68e:	3a01      	subs	r2, #1
 800b690:	2c00      	cmp	r4, #0
 800b692:	d1f7      	bne.n	800b684 <strncpy+0x6>
 800b694:	441a      	add	r2, r3
 800b696:	2100      	movs	r1, #0
 800b698:	4293      	cmp	r3, r2
 800b69a:	d100      	bne.n	800b69e <strncpy+0x20>
 800b69c:	bd10      	pop	{r4, pc}
 800b69e:	f803 1b01 	strb.w	r1, [r3], #1
 800b6a2:	e7f9      	b.n	800b698 <strncpy+0x1a>

0800b6a4 <__swbuf_r>:
 800b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a6:	460e      	mov	r6, r1
 800b6a8:	4614      	mov	r4, r2
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	b118      	cbz	r0, 800b6b6 <__swbuf_r+0x12>
 800b6ae:	6983      	ldr	r3, [r0, #24]
 800b6b0:	b90b      	cbnz	r3, 800b6b6 <__swbuf_r+0x12>
 800b6b2:	f7ff fcf5 	bl	800b0a0 <__sinit>
 800b6b6:	4b21      	ldr	r3, [pc, #132]	; (800b73c <__swbuf_r+0x98>)
 800b6b8:	429c      	cmp	r4, r3
 800b6ba:	d12b      	bne.n	800b714 <__swbuf_r+0x70>
 800b6bc:	686c      	ldr	r4, [r5, #4]
 800b6be:	69a3      	ldr	r3, [r4, #24]
 800b6c0:	60a3      	str	r3, [r4, #8]
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	071a      	lsls	r2, r3, #28
 800b6c6:	d52f      	bpl.n	800b728 <__swbuf_r+0x84>
 800b6c8:	6923      	ldr	r3, [r4, #16]
 800b6ca:	b36b      	cbz	r3, 800b728 <__swbuf_r+0x84>
 800b6cc:	6923      	ldr	r3, [r4, #16]
 800b6ce:	6820      	ldr	r0, [r4, #0]
 800b6d0:	1ac0      	subs	r0, r0, r3
 800b6d2:	6963      	ldr	r3, [r4, #20]
 800b6d4:	b2f6      	uxtb	r6, r6
 800b6d6:	4283      	cmp	r3, r0
 800b6d8:	4637      	mov	r7, r6
 800b6da:	dc04      	bgt.n	800b6e6 <__swbuf_r+0x42>
 800b6dc:	4621      	mov	r1, r4
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f7ff fc4a 	bl	800af78 <_fflush_r>
 800b6e4:	bb30      	cbnz	r0, 800b734 <__swbuf_r+0x90>
 800b6e6:	68a3      	ldr	r3, [r4, #8]
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	60a3      	str	r3, [r4, #8]
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	6022      	str	r2, [r4, #0]
 800b6f2:	701e      	strb	r6, [r3, #0]
 800b6f4:	6963      	ldr	r3, [r4, #20]
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	4283      	cmp	r3, r0
 800b6fa:	d004      	beq.n	800b706 <__swbuf_r+0x62>
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	07db      	lsls	r3, r3, #31
 800b700:	d506      	bpl.n	800b710 <__swbuf_r+0x6c>
 800b702:	2e0a      	cmp	r6, #10
 800b704:	d104      	bne.n	800b710 <__swbuf_r+0x6c>
 800b706:	4621      	mov	r1, r4
 800b708:	4628      	mov	r0, r5
 800b70a:	f7ff fc35 	bl	800af78 <_fflush_r>
 800b70e:	b988      	cbnz	r0, 800b734 <__swbuf_r+0x90>
 800b710:	4638      	mov	r0, r7
 800b712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b714:	4b0a      	ldr	r3, [pc, #40]	; (800b740 <__swbuf_r+0x9c>)
 800b716:	429c      	cmp	r4, r3
 800b718:	d101      	bne.n	800b71e <__swbuf_r+0x7a>
 800b71a:	68ac      	ldr	r4, [r5, #8]
 800b71c:	e7cf      	b.n	800b6be <__swbuf_r+0x1a>
 800b71e:	4b09      	ldr	r3, [pc, #36]	; (800b744 <__swbuf_r+0xa0>)
 800b720:	429c      	cmp	r4, r3
 800b722:	bf08      	it	eq
 800b724:	68ec      	ldreq	r4, [r5, #12]
 800b726:	e7ca      	b.n	800b6be <__swbuf_r+0x1a>
 800b728:	4621      	mov	r1, r4
 800b72a:	4628      	mov	r0, r5
 800b72c:	f000 f81e 	bl	800b76c <__swsetup_r>
 800b730:	2800      	cmp	r0, #0
 800b732:	d0cb      	beq.n	800b6cc <__swbuf_r+0x28>
 800b734:	f04f 37ff 	mov.w	r7, #4294967295
 800b738:	e7ea      	b.n	800b710 <__swbuf_r+0x6c>
 800b73a:	bf00      	nop
 800b73c:	0800d4b4 	.word	0x0800d4b4
 800b740:	0800d4d4 	.word	0x0800d4d4
 800b744:	0800d494 	.word	0x0800d494

0800b748 <_write_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4d07      	ldr	r5, [pc, #28]	; (800b768 <_write_r+0x20>)
 800b74c:	4604      	mov	r4, r0
 800b74e:	4608      	mov	r0, r1
 800b750:	4611      	mov	r1, r2
 800b752:	2200      	movs	r2, #0
 800b754:	602a      	str	r2, [r5, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	f7f7 f911 	bl	800297e <_write>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	d102      	bne.n	800b766 <_write_r+0x1e>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	b103      	cbz	r3, 800b766 <_write_r+0x1e>
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	20002bf0 	.word	0x20002bf0

0800b76c <__swsetup_r>:
 800b76c:	4b32      	ldr	r3, [pc, #200]	; (800b838 <__swsetup_r+0xcc>)
 800b76e:	b570      	push	{r4, r5, r6, lr}
 800b770:	681d      	ldr	r5, [r3, #0]
 800b772:	4606      	mov	r6, r0
 800b774:	460c      	mov	r4, r1
 800b776:	b125      	cbz	r5, 800b782 <__swsetup_r+0x16>
 800b778:	69ab      	ldr	r3, [r5, #24]
 800b77a:	b913      	cbnz	r3, 800b782 <__swsetup_r+0x16>
 800b77c:	4628      	mov	r0, r5
 800b77e:	f7ff fc8f 	bl	800b0a0 <__sinit>
 800b782:	4b2e      	ldr	r3, [pc, #184]	; (800b83c <__swsetup_r+0xd0>)
 800b784:	429c      	cmp	r4, r3
 800b786:	d10f      	bne.n	800b7a8 <__swsetup_r+0x3c>
 800b788:	686c      	ldr	r4, [r5, #4]
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b790:	0719      	lsls	r1, r3, #28
 800b792:	d42c      	bmi.n	800b7ee <__swsetup_r+0x82>
 800b794:	06dd      	lsls	r5, r3, #27
 800b796:	d411      	bmi.n	800b7bc <__swsetup_r+0x50>
 800b798:	2309      	movs	r3, #9
 800b79a:	6033      	str	r3, [r6, #0]
 800b79c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7a0:	81a3      	strh	r3, [r4, #12]
 800b7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a6:	e03e      	b.n	800b826 <__swsetup_r+0xba>
 800b7a8:	4b25      	ldr	r3, [pc, #148]	; (800b840 <__swsetup_r+0xd4>)
 800b7aa:	429c      	cmp	r4, r3
 800b7ac:	d101      	bne.n	800b7b2 <__swsetup_r+0x46>
 800b7ae:	68ac      	ldr	r4, [r5, #8]
 800b7b0:	e7eb      	b.n	800b78a <__swsetup_r+0x1e>
 800b7b2:	4b24      	ldr	r3, [pc, #144]	; (800b844 <__swsetup_r+0xd8>)
 800b7b4:	429c      	cmp	r4, r3
 800b7b6:	bf08      	it	eq
 800b7b8:	68ec      	ldreq	r4, [r5, #12]
 800b7ba:	e7e6      	b.n	800b78a <__swsetup_r+0x1e>
 800b7bc:	0758      	lsls	r0, r3, #29
 800b7be:	d512      	bpl.n	800b7e6 <__swsetup_r+0x7a>
 800b7c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7c2:	b141      	cbz	r1, 800b7d6 <__swsetup_r+0x6a>
 800b7c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7c8:	4299      	cmp	r1, r3
 800b7ca:	d002      	beq.n	800b7d2 <__swsetup_r+0x66>
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7ff fdaf 	bl	800b330 <_free_r>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	6063      	str	r3, [r4, #4]
 800b7e2:	6923      	ldr	r3, [r4, #16]
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	f043 0308 	orr.w	r3, r3, #8
 800b7ec:	81a3      	strh	r3, [r4, #12]
 800b7ee:	6923      	ldr	r3, [r4, #16]
 800b7f0:	b94b      	cbnz	r3, 800b806 <__swsetup_r+0x9a>
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7fc:	d003      	beq.n	800b806 <__swsetup_r+0x9a>
 800b7fe:	4621      	mov	r1, r4
 800b800:	4630      	mov	r0, r6
 800b802:	f7ff fd37 	bl	800b274 <__smakebuf_r>
 800b806:	89a0      	ldrh	r0, [r4, #12]
 800b808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b80c:	f010 0301 	ands.w	r3, r0, #1
 800b810:	d00a      	beq.n	800b828 <__swsetup_r+0xbc>
 800b812:	2300      	movs	r3, #0
 800b814:	60a3      	str	r3, [r4, #8]
 800b816:	6963      	ldr	r3, [r4, #20]
 800b818:	425b      	negs	r3, r3
 800b81a:	61a3      	str	r3, [r4, #24]
 800b81c:	6923      	ldr	r3, [r4, #16]
 800b81e:	b943      	cbnz	r3, 800b832 <__swsetup_r+0xc6>
 800b820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b824:	d1ba      	bne.n	800b79c <__swsetup_r+0x30>
 800b826:	bd70      	pop	{r4, r5, r6, pc}
 800b828:	0781      	lsls	r1, r0, #30
 800b82a:	bf58      	it	pl
 800b82c:	6963      	ldrpl	r3, [r4, #20]
 800b82e:	60a3      	str	r3, [r4, #8]
 800b830:	e7f4      	b.n	800b81c <__swsetup_r+0xb0>
 800b832:	2000      	movs	r0, #0
 800b834:	e7f7      	b.n	800b826 <__swsetup_r+0xba>
 800b836:	bf00      	nop
 800b838:	20000154 	.word	0x20000154
 800b83c:	0800d4b4 	.word	0x0800d4b4
 800b840:	0800d4d4 	.word	0x0800d4d4
 800b844:	0800d494 	.word	0x0800d494

0800b848 <_close_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	4d06      	ldr	r5, [pc, #24]	; (800b864 <_close_r+0x1c>)
 800b84c:	2300      	movs	r3, #0
 800b84e:	4604      	mov	r4, r0
 800b850:	4608      	mov	r0, r1
 800b852:	602b      	str	r3, [r5, #0]
 800b854:	f7f7 f8af 	bl	80029b6 <_close>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d102      	bne.n	800b862 <_close_r+0x1a>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b103      	cbz	r3, 800b862 <_close_r+0x1a>
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	20002bf0 	.word	0x20002bf0

0800b868 <_fstat_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d07      	ldr	r5, [pc, #28]	; (800b888 <_fstat_r+0x20>)
 800b86c:	2300      	movs	r3, #0
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	4611      	mov	r1, r2
 800b874:	602b      	str	r3, [r5, #0]
 800b876:	f7f7 f8aa 	bl	80029ce <_fstat>
 800b87a:	1c43      	adds	r3, r0, #1
 800b87c:	d102      	bne.n	800b884 <_fstat_r+0x1c>
 800b87e:	682b      	ldr	r3, [r5, #0]
 800b880:	b103      	cbz	r3, 800b884 <_fstat_r+0x1c>
 800b882:	6023      	str	r3, [r4, #0]
 800b884:	bd38      	pop	{r3, r4, r5, pc}
 800b886:	bf00      	nop
 800b888:	20002bf0 	.word	0x20002bf0

0800b88c <_isatty_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d06      	ldr	r5, [pc, #24]	; (800b8a8 <_isatty_r+0x1c>)
 800b890:	2300      	movs	r3, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	602b      	str	r3, [r5, #0]
 800b898:	f7f7 f8a9 	bl	80029ee <_isatty>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d102      	bne.n	800b8a6 <_isatty_r+0x1a>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	b103      	cbz	r3, 800b8a6 <_isatty_r+0x1a>
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	20002bf0 	.word	0x20002bf0

0800b8ac <_lseek_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	4d07      	ldr	r5, [pc, #28]	; (800b8cc <_lseek_r+0x20>)
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	4608      	mov	r0, r1
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	602a      	str	r2, [r5, #0]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	f7f7 f8a2 	bl	8002a04 <_lseek>
 800b8c0:	1c43      	adds	r3, r0, #1
 800b8c2:	d102      	bne.n	800b8ca <_lseek_r+0x1e>
 800b8c4:	682b      	ldr	r3, [r5, #0]
 800b8c6:	b103      	cbz	r3, 800b8ca <_lseek_r+0x1e>
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	bd38      	pop	{r3, r4, r5, pc}
 800b8cc:	20002bf0 	.word	0x20002bf0

0800b8d0 <__malloc_lock>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	; (800b8d8 <__malloc_lock+0x8>)
 800b8d2:	f7ff bca8 	b.w	800b226 <__retarget_lock_acquire_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	20002be8 	.word	0x20002be8

0800b8dc <__malloc_unlock>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	; (800b8e4 <__malloc_unlock+0x8>)
 800b8de:	f7ff bca3 	b.w	800b228 <__retarget_lock_release_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	20002be8 	.word	0x20002be8

0800b8e8 <_realloc_r>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	4607      	mov	r7, r0
 800b8ec:	4614      	mov	r4, r2
 800b8ee:	460e      	mov	r6, r1
 800b8f0:	b921      	cbnz	r1, 800b8fc <_realloc_r+0x14>
 800b8f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	f7ff bd6a 	b.w	800b3d0 <_malloc_r>
 800b8fc:	b922      	cbnz	r2, 800b908 <_realloc_r+0x20>
 800b8fe:	f7ff fd17 	bl	800b330 <_free_r>
 800b902:	4625      	mov	r5, r4
 800b904:	4628      	mov	r0, r5
 800b906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b908:	f000 fb30 	bl	800bf6c <_malloc_usable_size_r>
 800b90c:	42a0      	cmp	r0, r4
 800b90e:	d20f      	bcs.n	800b930 <_realloc_r+0x48>
 800b910:	4621      	mov	r1, r4
 800b912:	4638      	mov	r0, r7
 800b914:	f7ff fd5c 	bl	800b3d0 <_malloc_r>
 800b918:	4605      	mov	r5, r0
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d0f2      	beq.n	800b904 <_realloc_r+0x1c>
 800b91e:	4631      	mov	r1, r6
 800b920:	4622      	mov	r2, r4
 800b922:	f7ff fcef 	bl	800b304 <memcpy>
 800b926:	4631      	mov	r1, r6
 800b928:	4638      	mov	r0, r7
 800b92a:	f7ff fd01 	bl	800b330 <_free_r>
 800b92e:	e7e9      	b.n	800b904 <_realloc_r+0x1c>
 800b930:	4635      	mov	r5, r6
 800b932:	e7e7      	b.n	800b904 <_realloc_r+0x1c>

0800b934 <__ssputs_r>:
 800b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	688e      	ldr	r6, [r1, #8]
 800b93a:	429e      	cmp	r6, r3
 800b93c:	4682      	mov	sl, r0
 800b93e:	460c      	mov	r4, r1
 800b940:	4690      	mov	r8, r2
 800b942:	461f      	mov	r7, r3
 800b944:	d838      	bhi.n	800b9b8 <__ssputs_r+0x84>
 800b946:	898a      	ldrh	r2, [r1, #12]
 800b948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b94c:	d032      	beq.n	800b9b4 <__ssputs_r+0x80>
 800b94e:	6825      	ldr	r5, [r4, #0]
 800b950:	6909      	ldr	r1, [r1, #16]
 800b952:	eba5 0901 	sub.w	r9, r5, r1
 800b956:	6965      	ldr	r5, [r4, #20]
 800b958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b95c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b960:	3301      	adds	r3, #1
 800b962:	444b      	add	r3, r9
 800b964:	106d      	asrs	r5, r5, #1
 800b966:	429d      	cmp	r5, r3
 800b968:	bf38      	it	cc
 800b96a:	461d      	movcc	r5, r3
 800b96c:	0553      	lsls	r3, r2, #21
 800b96e:	d531      	bpl.n	800b9d4 <__ssputs_r+0xa0>
 800b970:	4629      	mov	r1, r5
 800b972:	f7ff fd2d 	bl	800b3d0 <_malloc_r>
 800b976:	4606      	mov	r6, r0
 800b978:	b950      	cbnz	r0, 800b990 <__ssputs_r+0x5c>
 800b97a:	230c      	movs	r3, #12
 800b97c:	f8ca 3000 	str.w	r3, [sl]
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b986:	81a3      	strh	r3, [r4, #12]
 800b988:	f04f 30ff 	mov.w	r0, #4294967295
 800b98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b990:	6921      	ldr	r1, [r4, #16]
 800b992:	464a      	mov	r2, r9
 800b994:	f7ff fcb6 	bl	800b304 <memcpy>
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a2:	81a3      	strh	r3, [r4, #12]
 800b9a4:	6126      	str	r6, [r4, #16]
 800b9a6:	6165      	str	r5, [r4, #20]
 800b9a8:	444e      	add	r6, r9
 800b9aa:	eba5 0509 	sub.w	r5, r5, r9
 800b9ae:	6026      	str	r6, [r4, #0]
 800b9b0:	60a5      	str	r5, [r4, #8]
 800b9b2:	463e      	mov	r6, r7
 800b9b4:	42be      	cmp	r6, r7
 800b9b6:	d900      	bls.n	800b9ba <__ssputs_r+0x86>
 800b9b8:	463e      	mov	r6, r7
 800b9ba:	4632      	mov	r2, r6
 800b9bc:	6820      	ldr	r0, [r4, #0]
 800b9be:	4641      	mov	r1, r8
 800b9c0:	f000 faba 	bl	800bf38 <memmove>
 800b9c4:	68a3      	ldr	r3, [r4, #8]
 800b9c6:	6822      	ldr	r2, [r4, #0]
 800b9c8:	1b9b      	subs	r3, r3, r6
 800b9ca:	4432      	add	r2, r6
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	6022      	str	r2, [r4, #0]
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	e7db      	b.n	800b98c <__ssputs_r+0x58>
 800b9d4:	462a      	mov	r2, r5
 800b9d6:	f7ff ff87 	bl	800b8e8 <_realloc_r>
 800b9da:	4606      	mov	r6, r0
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d1e1      	bne.n	800b9a4 <__ssputs_r+0x70>
 800b9e0:	6921      	ldr	r1, [r4, #16]
 800b9e2:	4650      	mov	r0, sl
 800b9e4:	f7ff fca4 	bl	800b330 <_free_r>
 800b9e8:	e7c7      	b.n	800b97a <__ssputs_r+0x46>
	...

0800b9ec <_svfiprintf_r>:
 800b9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f0:	4698      	mov	r8, r3
 800b9f2:	898b      	ldrh	r3, [r1, #12]
 800b9f4:	061b      	lsls	r3, r3, #24
 800b9f6:	b09d      	sub	sp, #116	; 0x74
 800b9f8:	4607      	mov	r7, r0
 800b9fa:	460d      	mov	r5, r1
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	d50e      	bpl.n	800ba1e <_svfiprintf_r+0x32>
 800ba00:	690b      	ldr	r3, [r1, #16]
 800ba02:	b963      	cbnz	r3, 800ba1e <_svfiprintf_r+0x32>
 800ba04:	2140      	movs	r1, #64	; 0x40
 800ba06:	f7ff fce3 	bl	800b3d0 <_malloc_r>
 800ba0a:	6028      	str	r0, [r5, #0]
 800ba0c:	6128      	str	r0, [r5, #16]
 800ba0e:	b920      	cbnz	r0, 800ba1a <_svfiprintf_r+0x2e>
 800ba10:	230c      	movs	r3, #12
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	e0d1      	b.n	800bbbe <_svfiprintf_r+0x1d2>
 800ba1a:	2340      	movs	r3, #64	; 0x40
 800ba1c:	616b      	str	r3, [r5, #20]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	9309      	str	r3, [sp, #36]	; 0x24
 800ba22:	2320      	movs	r3, #32
 800ba24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba2c:	2330      	movs	r3, #48	; 0x30
 800ba2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bbd8 <_svfiprintf_r+0x1ec>
 800ba32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba36:	f04f 0901 	mov.w	r9, #1
 800ba3a:	4623      	mov	r3, r4
 800ba3c:	469a      	mov	sl, r3
 800ba3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba42:	b10a      	cbz	r2, 800ba48 <_svfiprintf_r+0x5c>
 800ba44:	2a25      	cmp	r2, #37	; 0x25
 800ba46:	d1f9      	bne.n	800ba3c <_svfiprintf_r+0x50>
 800ba48:	ebba 0b04 	subs.w	fp, sl, r4
 800ba4c:	d00b      	beq.n	800ba66 <_svfiprintf_r+0x7a>
 800ba4e:	465b      	mov	r3, fp
 800ba50:	4622      	mov	r2, r4
 800ba52:	4629      	mov	r1, r5
 800ba54:	4638      	mov	r0, r7
 800ba56:	f7ff ff6d 	bl	800b934 <__ssputs_r>
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	f000 80aa 	beq.w	800bbb4 <_svfiprintf_r+0x1c8>
 800ba60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba62:	445a      	add	r2, fp
 800ba64:	9209      	str	r2, [sp, #36]	; 0x24
 800ba66:	f89a 3000 	ldrb.w	r3, [sl]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f000 80a2 	beq.w	800bbb4 <_svfiprintf_r+0x1c8>
 800ba70:	2300      	movs	r3, #0
 800ba72:	f04f 32ff 	mov.w	r2, #4294967295
 800ba76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba7a:	f10a 0a01 	add.w	sl, sl, #1
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	9307      	str	r3, [sp, #28]
 800ba82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba86:	931a      	str	r3, [sp, #104]	; 0x68
 800ba88:	4654      	mov	r4, sl
 800ba8a:	2205      	movs	r2, #5
 800ba8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba90:	4851      	ldr	r0, [pc, #324]	; (800bbd8 <_svfiprintf_r+0x1ec>)
 800ba92:	f7f4 fbad 	bl	80001f0 <memchr>
 800ba96:	9a04      	ldr	r2, [sp, #16]
 800ba98:	b9d8      	cbnz	r0, 800bad2 <_svfiprintf_r+0xe6>
 800ba9a:	06d0      	lsls	r0, r2, #27
 800ba9c:	bf44      	itt	mi
 800ba9e:	2320      	movmi	r3, #32
 800baa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baa4:	0711      	lsls	r1, r2, #28
 800baa6:	bf44      	itt	mi
 800baa8:	232b      	movmi	r3, #43	; 0x2b
 800baaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baae:	f89a 3000 	ldrb.w	r3, [sl]
 800bab2:	2b2a      	cmp	r3, #42	; 0x2a
 800bab4:	d015      	beq.n	800bae2 <_svfiprintf_r+0xf6>
 800bab6:	9a07      	ldr	r2, [sp, #28]
 800bab8:	4654      	mov	r4, sl
 800baba:	2000      	movs	r0, #0
 800babc:	f04f 0c0a 	mov.w	ip, #10
 800bac0:	4621      	mov	r1, r4
 800bac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bac6:	3b30      	subs	r3, #48	; 0x30
 800bac8:	2b09      	cmp	r3, #9
 800baca:	d94e      	bls.n	800bb6a <_svfiprintf_r+0x17e>
 800bacc:	b1b0      	cbz	r0, 800bafc <_svfiprintf_r+0x110>
 800bace:	9207      	str	r2, [sp, #28]
 800bad0:	e014      	b.n	800bafc <_svfiprintf_r+0x110>
 800bad2:	eba0 0308 	sub.w	r3, r0, r8
 800bad6:	fa09 f303 	lsl.w	r3, r9, r3
 800bada:	4313      	orrs	r3, r2
 800badc:	9304      	str	r3, [sp, #16]
 800bade:	46a2      	mov	sl, r4
 800bae0:	e7d2      	b.n	800ba88 <_svfiprintf_r+0x9c>
 800bae2:	9b03      	ldr	r3, [sp, #12]
 800bae4:	1d19      	adds	r1, r3, #4
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	9103      	str	r1, [sp, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	bfbb      	ittet	lt
 800baee:	425b      	neglt	r3, r3
 800baf0:	f042 0202 	orrlt.w	r2, r2, #2
 800baf4:	9307      	strge	r3, [sp, #28]
 800baf6:	9307      	strlt	r3, [sp, #28]
 800baf8:	bfb8      	it	lt
 800bafa:	9204      	strlt	r2, [sp, #16]
 800bafc:	7823      	ldrb	r3, [r4, #0]
 800bafe:	2b2e      	cmp	r3, #46	; 0x2e
 800bb00:	d10c      	bne.n	800bb1c <_svfiprintf_r+0x130>
 800bb02:	7863      	ldrb	r3, [r4, #1]
 800bb04:	2b2a      	cmp	r3, #42	; 0x2a
 800bb06:	d135      	bne.n	800bb74 <_svfiprintf_r+0x188>
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	1d1a      	adds	r2, r3, #4
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	9203      	str	r2, [sp, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	bfb8      	it	lt
 800bb14:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb18:	3402      	adds	r4, #2
 800bb1a:	9305      	str	r3, [sp, #20]
 800bb1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bbe8 <_svfiprintf_r+0x1fc>
 800bb20:	7821      	ldrb	r1, [r4, #0]
 800bb22:	2203      	movs	r2, #3
 800bb24:	4650      	mov	r0, sl
 800bb26:	f7f4 fb63 	bl	80001f0 <memchr>
 800bb2a:	b140      	cbz	r0, 800bb3e <_svfiprintf_r+0x152>
 800bb2c:	2340      	movs	r3, #64	; 0x40
 800bb2e:	eba0 000a 	sub.w	r0, r0, sl
 800bb32:	fa03 f000 	lsl.w	r0, r3, r0
 800bb36:	9b04      	ldr	r3, [sp, #16]
 800bb38:	4303      	orrs	r3, r0
 800bb3a:	3401      	adds	r4, #1
 800bb3c:	9304      	str	r3, [sp, #16]
 800bb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb42:	4826      	ldr	r0, [pc, #152]	; (800bbdc <_svfiprintf_r+0x1f0>)
 800bb44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb48:	2206      	movs	r2, #6
 800bb4a:	f7f4 fb51 	bl	80001f0 <memchr>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d038      	beq.n	800bbc4 <_svfiprintf_r+0x1d8>
 800bb52:	4b23      	ldr	r3, [pc, #140]	; (800bbe0 <_svfiprintf_r+0x1f4>)
 800bb54:	bb1b      	cbnz	r3, 800bb9e <_svfiprintf_r+0x1b2>
 800bb56:	9b03      	ldr	r3, [sp, #12]
 800bb58:	3307      	adds	r3, #7
 800bb5a:	f023 0307 	bic.w	r3, r3, #7
 800bb5e:	3308      	adds	r3, #8
 800bb60:	9303      	str	r3, [sp, #12]
 800bb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb64:	4433      	add	r3, r6
 800bb66:	9309      	str	r3, [sp, #36]	; 0x24
 800bb68:	e767      	b.n	800ba3a <_svfiprintf_r+0x4e>
 800bb6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb6e:	460c      	mov	r4, r1
 800bb70:	2001      	movs	r0, #1
 800bb72:	e7a5      	b.n	800bac0 <_svfiprintf_r+0xd4>
 800bb74:	2300      	movs	r3, #0
 800bb76:	3401      	adds	r4, #1
 800bb78:	9305      	str	r3, [sp, #20]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	f04f 0c0a 	mov.w	ip, #10
 800bb80:	4620      	mov	r0, r4
 800bb82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb86:	3a30      	subs	r2, #48	; 0x30
 800bb88:	2a09      	cmp	r2, #9
 800bb8a:	d903      	bls.n	800bb94 <_svfiprintf_r+0x1a8>
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0c5      	beq.n	800bb1c <_svfiprintf_r+0x130>
 800bb90:	9105      	str	r1, [sp, #20]
 800bb92:	e7c3      	b.n	800bb1c <_svfiprintf_r+0x130>
 800bb94:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb98:	4604      	mov	r4, r0
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e7f0      	b.n	800bb80 <_svfiprintf_r+0x194>
 800bb9e:	ab03      	add	r3, sp, #12
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	462a      	mov	r2, r5
 800bba4:	4b0f      	ldr	r3, [pc, #60]	; (800bbe4 <_svfiprintf_r+0x1f8>)
 800bba6:	a904      	add	r1, sp, #16
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f3af 8000 	nop.w
 800bbae:	1c42      	adds	r2, r0, #1
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	d1d6      	bne.n	800bb62 <_svfiprintf_r+0x176>
 800bbb4:	89ab      	ldrh	r3, [r5, #12]
 800bbb6:	065b      	lsls	r3, r3, #25
 800bbb8:	f53f af2c 	bmi.w	800ba14 <_svfiprintf_r+0x28>
 800bbbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbbe:	b01d      	add	sp, #116	; 0x74
 800bbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc4:	ab03      	add	r3, sp, #12
 800bbc6:	9300      	str	r3, [sp, #0]
 800bbc8:	462a      	mov	r2, r5
 800bbca:	4b06      	ldr	r3, [pc, #24]	; (800bbe4 <_svfiprintf_r+0x1f8>)
 800bbcc:	a904      	add	r1, sp, #16
 800bbce:	4638      	mov	r0, r7
 800bbd0:	f000 f87a 	bl	800bcc8 <_printf_i>
 800bbd4:	e7eb      	b.n	800bbae <_svfiprintf_r+0x1c2>
 800bbd6:	bf00      	nop
 800bbd8:	0800d4f8 	.word	0x0800d4f8
 800bbdc:	0800d502 	.word	0x0800d502
 800bbe0:	00000000 	.word	0x00000000
 800bbe4:	0800b935 	.word	0x0800b935
 800bbe8:	0800d4fe 	.word	0x0800d4fe

0800bbec <_printf_common>:
 800bbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf0:	4616      	mov	r6, r2
 800bbf2:	4699      	mov	r9, r3
 800bbf4:	688a      	ldr	r2, [r1, #8]
 800bbf6:	690b      	ldr	r3, [r1, #16]
 800bbf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	bfb8      	it	lt
 800bc00:	4613      	movlt	r3, r2
 800bc02:	6033      	str	r3, [r6, #0]
 800bc04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc08:	4607      	mov	r7, r0
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	b10a      	cbz	r2, 800bc12 <_printf_common+0x26>
 800bc0e:	3301      	adds	r3, #1
 800bc10:	6033      	str	r3, [r6, #0]
 800bc12:	6823      	ldr	r3, [r4, #0]
 800bc14:	0699      	lsls	r1, r3, #26
 800bc16:	bf42      	ittt	mi
 800bc18:	6833      	ldrmi	r3, [r6, #0]
 800bc1a:	3302      	addmi	r3, #2
 800bc1c:	6033      	strmi	r3, [r6, #0]
 800bc1e:	6825      	ldr	r5, [r4, #0]
 800bc20:	f015 0506 	ands.w	r5, r5, #6
 800bc24:	d106      	bne.n	800bc34 <_printf_common+0x48>
 800bc26:	f104 0a19 	add.w	sl, r4, #25
 800bc2a:	68e3      	ldr	r3, [r4, #12]
 800bc2c:	6832      	ldr	r2, [r6, #0]
 800bc2e:	1a9b      	subs	r3, r3, r2
 800bc30:	42ab      	cmp	r3, r5
 800bc32:	dc26      	bgt.n	800bc82 <_printf_common+0x96>
 800bc34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc38:	1e13      	subs	r3, r2, #0
 800bc3a:	6822      	ldr	r2, [r4, #0]
 800bc3c:	bf18      	it	ne
 800bc3e:	2301      	movne	r3, #1
 800bc40:	0692      	lsls	r2, r2, #26
 800bc42:	d42b      	bmi.n	800bc9c <_printf_common+0xb0>
 800bc44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc48:	4649      	mov	r1, r9
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	47c0      	blx	r8
 800bc4e:	3001      	adds	r0, #1
 800bc50:	d01e      	beq.n	800bc90 <_printf_common+0xa4>
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	68e5      	ldr	r5, [r4, #12]
 800bc56:	6832      	ldr	r2, [r6, #0]
 800bc58:	f003 0306 	and.w	r3, r3, #6
 800bc5c:	2b04      	cmp	r3, #4
 800bc5e:	bf08      	it	eq
 800bc60:	1aad      	subeq	r5, r5, r2
 800bc62:	68a3      	ldr	r3, [r4, #8]
 800bc64:	6922      	ldr	r2, [r4, #16]
 800bc66:	bf0c      	ite	eq
 800bc68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc6c:	2500      	movne	r5, #0
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	bfc4      	itt	gt
 800bc72:	1a9b      	subgt	r3, r3, r2
 800bc74:	18ed      	addgt	r5, r5, r3
 800bc76:	2600      	movs	r6, #0
 800bc78:	341a      	adds	r4, #26
 800bc7a:	42b5      	cmp	r5, r6
 800bc7c:	d11a      	bne.n	800bcb4 <_printf_common+0xc8>
 800bc7e:	2000      	movs	r0, #0
 800bc80:	e008      	b.n	800bc94 <_printf_common+0xa8>
 800bc82:	2301      	movs	r3, #1
 800bc84:	4652      	mov	r2, sl
 800bc86:	4649      	mov	r1, r9
 800bc88:	4638      	mov	r0, r7
 800bc8a:	47c0      	blx	r8
 800bc8c:	3001      	adds	r0, #1
 800bc8e:	d103      	bne.n	800bc98 <_printf_common+0xac>
 800bc90:	f04f 30ff 	mov.w	r0, #4294967295
 800bc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc98:	3501      	adds	r5, #1
 800bc9a:	e7c6      	b.n	800bc2a <_printf_common+0x3e>
 800bc9c:	18e1      	adds	r1, r4, r3
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	2030      	movs	r0, #48	; 0x30
 800bca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bca6:	4422      	add	r2, r4
 800bca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcb0:	3302      	adds	r3, #2
 800bcb2:	e7c7      	b.n	800bc44 <_printf_common+0x58>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	4649      	mov	r1, r9
 800bcba:	4638      	mov	r0, r7
 800bcbc:	47c0      	blx	r8
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	d0e6      	beq.n	800bc90 <_printf_common+0xa4>
 800bcc2:	3601      	adds	r6, #1
 800bcc4:	e7d9      	b.n	800bc7a <_printf_common+0x8e>
	...

0800bcc8 <_printf_i>:
 800bcc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bccc:	460c      	mov	r4, r1
 800bcce:	4691      	mov	r9, r2
 800bcd0:	7e27      	ldrb	r7, [r4, #24]
 800bcd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bcd4:	2f78      	cmp	r7, #120	; 0x78
 800bcd6:	4680      	mov	r8, r0
 800bcd8:	469a      	mov	sl, r3
 800bcda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcde:	d807      	bhi.n	800bcf0 <_printf_i+0x28>
 800bce0:	2f62      	cmp	r7, #98	; 0x62
 800bce2:	d80a      	bhi.n	800bcfa <_printf_i+0x32>
 800bce4:	2f00      	cmp	r7, #0
 800bce6:	f000 80d8 	beq.w	800be9a <_printf_i+0x1d2>
 800bcea:	2f58      	cmp	r7, #88	; 0x58
 800bcec:	f000 80a3 	beq.w	800be36 <_printf_i+0x16e>
 800bcf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bcf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bcf8:	e03a      	b.n	800bd70 <_printf_i+0xa8>
 800bcfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcfe:	2b15      	cmp	r3, #21
 800bd00:	d8f6      	bhi.n	800bcf0 <_printf_i+0x28>
 800bd02:	a001      	add	r0, pc, #4	; (adr r0, 800bd08 <_printf_i+0x40>)
 800bd04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bd08:	0800bd61 	.word	0x0800bd61
 800bd0c:	0800bd75 	.word	0x0800bd75
 800bd10:	0800bcf1 	.word	0x0800bcf1
 800bd14:	0800bcf1 	.word	0x0800bcf1
 800bd18:	0800bcf1 	.word	0x0800bcf1
 800bd1c:	0800bcf1 	.word	0x0800bcf1
 800bd20:	0800bd75 	.word	0x0800bd75
 800bd24:	0800bcf1 	.word	0x0800bcf1
 800bd28:	0800bcf1 	.word	0x0800bcf1
 800bd2c:	0800bcf1 	.word	0x0800bcf1
 800bd30:	0800bcf1 	.word	0x0800bcf1
 800bd34:	0800be81 	.word	0x0800be81
 800bd38:	0800bda5 	.word	0x0800bda5
 800bd3c:	0800be63 	.word	0x0800be63
 800bd40:	0800bcf1 	.word	0x0800bcf1
 800bd44:	0800bcf1 	.word	0x0800bcf1
 800bd48:	0800bea3 	.word	0x0800bea3
 800bd4c:	0800bcf1 	.word	0x0800bcf1
 800bd50:	0800bda5 	.word	0x0800bda5
 800bd54:	0800bcf1 	.word	0x0800bcf1
 800bd58:	0800bcf1 	.word	0x0800bcf1
 800bd5c:	0800be6b 	.word	0x0800be6b
 800bd60:	680b      	ldr	r3, [r1, #0]
 800bd62:	1d1a      	adds	r2, r3, #4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	600a      	str	r2, [r1, #0]
 800bd68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd70:	2301      	movs	r3, #1
 800bd72:	e0a3      	b.n	800bebc <_printf_i+0x1f4>
 800bd74:	6825      	ldr	r5, [r4, #0]
 800bd76:	6808      	ldr	r0, [r1, #0]
 800bd78:	062e      	lsls	r6, r5, #24
 800bd7a:	f100 0304 	add.w	r3, r0, #4
 800bd7e:	d50a      	bpl.n	800bd96 <_printf_i+0xce>
 800bd80:	6805      	ldr	r5, [r0, #0]
 800bd82:	600b      	str	r3, [r1, #0]
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	da03      	bge.n	800bd90 <_printf_i+0xc8>
 800bd88:	232d      	movs	r3, #45	; 0x2d
 800bd8a:	426d      	negs	r5, r5
 800bd8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd90:	485e      	ldr	r0, [pc, #376]	; (800bf0c <_printf_i+0x244>)
 800bd92:	230a      	movs	r3, #10
 800bd94:	e019      	b.n	800bdca <_printf_i+0x102>
 800bd96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bd9a:	6805      	ldr	r5, [r0, #0]
 800bd9c:	600b      	str	r3, [r1, #0]
 800bd9e:	bf18      	it	ne
 800bda0:	b22d      	sxthne	r5, r5
 800bda2:	e7ef      	b.n	800bd84 <_printf_i+0xbc>
 800bda4:	680b      	ldr	r3, [r1, #0]
 800bda6:	6825      	ldr	r5, [r4, #0]
 800bda8:	1d18      	adds	r0, r3, #4
 800bdaa:	6008      	str	r0, [r1, #0]
 800bdac:	0628      	lsls	r0, r5, #24
 800bdae:	d501      	bpl.n	800bdb4 <_printf_i+0xec>
 800bdb0:	681d      	ldr	r5, [r3, #0]
 800bdb2:	e002      	b.n	800bdba <_printf_i+0xf2>
 800bdb4:	0669      	lsls	r1, r5, #25
 800bdb6:	d5fb      	bpl.n	800bdb0 <_printf_i+0xe8>
 800bdb8:	881d      	ldrh	r5, [r3, #0]
 800bdba:	4854      	ldr	r0, [pc, #336]	; (800bf0c <_printf_i+0x244>)
 800bdbc:	2f6f      	cmp	r7, #111	; 0x6f
 800bdbe:	bf0c      	ite	eq
 800bdc0:	2308      	moveq	r3, #8
 800bdc2:	230a      	movne	r3, #10
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdca:	6866      	ldr	r6, [r4, #4]
 800bdcc:	60a6      	str	r6, [r4, #8]
 800bdce:	2e00      	cmp	r6, #0
 800bdd0:	bfa2      	ittt	ge
 800bdd2:	6821      	ldrge	r1, [r4, #0]
 800bdd4:	f021 0104 	bicge.w	r1, r1, #4
 800bdd8:	6021      	strge	r1, [r4, #0]
 800bdda:	b90d      	cbnz	r5, 800bde0 <_printf_i+0x118>
 800bddc:	2e00      	cmp	r6, #0
 800bdde:	d04d      	beq.n	800be7c <_printf_i+0x1b4>
 800bde0:	4616      	mov	r6, r2
 800bde2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bde6:	fb03 5711 	mls	r7, r3, r1, r5
 800bdea:	5dc7      	ldrb	r7, [r0, r7]
 800bdec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bdf0:	462f      	mov	r7, r5
 800bdf2:	42bb      	cmp	r3, r7
 800bdf4:	460d      	mov	r5, r1
 800bdf6:	d9f4      	bls.n	800bde2 <_printf_i+0x11a>
 800bdf8:	2b08      	cmp	r3, #8
 800bdfa:	d10b      	bne.n	800be14 <_printf_i+0x14c>
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	07df      	lsls	r7, r3, #31
 800be00:	d508      	bpl.n	800be14 <_printf_i+0x14c>
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	6861      	ldr	r1, [r4, #4]
 800be06:	4299      	cmp	r1, r3
 800be08:	bfde      	ittt	le
 800be0a:	2330      	movle	r3, #48	; 0x30
 800be0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be10:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be14:	1b92      	subs	r2, r2, r6
 800be16:	6122      	str	r2, [r4, #16]
 800be18:	f8cd a000 	str.w	sl, [sp]
 800be1c:	464b      	mov	r3, r9
 800be1e:	aa03      	add	r2, sp, #12
 800be20:	4621      	mov	r1, r4
 800be22:	4640      	mov	r0, r8
 800be24:	f7ff fee2 	bl	800bbec <_printf_common>
 800be28:	3001      	adds	r0, #1
 800be2a:	d14c      	bne.n	800bec6 <_printf_i+0x1fe>
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	b004      	add	sp, #16
 800be32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be36:	4835      	ldr	r0, [pc, #212]	; (800bf0c <_printf_i+0x244>)
 800be38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	680e      	ldr	r6, [r1, #0]
 800be40:	061f      	lsls	r7, r3, #24
 800be42:	f856 5b04 	ldr.w	r5, [r6], #4
 800be46:	600e      	str	r6, [r1, #0]
 800be48:	d514      	bpl.n	800be74 <_printf_i+0x1ac>
 800be4a:	07d9      	lsls	r1, r3, #31
 800be4c:	bf44      	itt	mi
 800be4e:	f043 0320 	orrmi.w	r3, r3, #32
 800be52:	6023      	strmi	r3, [r4, #0]
 800be54:	b91d      	cbnz	r5, 800be5e <_printf_i+0x196>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	f023 0320 	bic.w	r3, r3, #32
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	2310      	movs	r3, #16
 800be60:	e7b0      	b.n	800bdc4 <_printf_i+0xfc>
 800be62:	6823      	ldr	r3, [r4, #0]
 800be64:	f043 0320 	orr.w	r3, r3, #32
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	2378      	movs	r3, #120	; 0x78
 800be6c:	4828      	ldr	r0, [pc, #160]	; (800bf10 <_printf_i+0x248>)
 800be6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be72:	e7e3      	b.n	800be3c <_printf_i+0x174>
 800be74:	065e      	lsls	r6, r3, #25
 800be76:	bf48      	it	mi
 800be78:	b2ad      	uxthmi	r5, r5
 800be7a:	e7e6      	b.n	800be4a <_printf_i+0x182>
 800be7c:	4616      	mov	r6, r2
 800be7e:	e7bb      	b.n	800bdf8 <_printf_i+0x130>
 800be80:	680b      	ldr	r3, [r1, #0]
 800be82:	6826      	ldr	r6, [r4, #0]
 800be84:	6960      	ldr	r0, [r4, #20]
 800be86:	1d1d      	adds	r5, r3, #4
 800be88:	600d      	str	r5, [r1, #0]
 800be8a:	0635      	lsls	r5, r6, #24
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	d501      	bpl.n	800be94 <_printf_i+0x1cc>
 800be90:	6018      	str	r0, [r3, #0]
 800be92:	e002      	b.n	800be9a <_printf_i+0x1d2>
 800be94:	0671      	lsls	r1, r6, #25
 800be96:	d5fb      	bpl.n	800be90 <_printf_i+0x1c8>
 800be98:	8018      	strh	r0, [r3, #0]
 800be9a:	2300      	movs	r3, #0
 800be9c:	6123      	str	r3, [r4, #16]
 800be9e:	4616      	mov	r6, r2
 800bea0:	e7ba      	b.n	800be18 <_printf_i+0x150>
 800bea2:	680b      	ldr	r3, [r1, #0]
 800bea4:	1d1a      	adds	r2, r3, #4
 800bea6:	600a      	str	r2, [r1, #0]
 800bea8:	681e      	ldr	r6, [r3, #0]
 800beaa:	6862      	ldr	r2, [r4, #4]
 800beac:	2100      	movs	r1, #0
 800beae:	4630      	mov	r0, r6
 800beb0:	f7f4 f99e 	bl	80001f0 <memchr>
 800beb4:	b108      	cbz	r0, 800beba <_printf_i+0x1f2>
 800beb6:	1b80      	subs	r0, r0, r6
 800beb8:	6060      	str	r0, [r4, #4]
 800beba:	6863      	ldr	r3, [r4, #4]
 800bebc:	6123      	str	r3, [r4, #16]
 800bebe:	2300      	movs	r3, #0
 800bec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec4:	e7a8      	b.n	800be18 <_printf_i+0x150>
 800bec6:	6923      	ldr	r3, [r4, #16]
 800bec8:	4632      	mov	r2, r6
 800beca:	4649      	mov	r1, r9
 800becc:	4640      	mov	r0, r8
 800bece:	47d0      	blx	sl
 800bed0:	3001      	adds	r0, #1
 800bed2:	d0ab      	beq.n	800be2c <_printf_i+0x164>
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	079b      	lsls	r3, r3, #30
 800bed8:	d413      	bmi.n	800bf02 <_printf_i+0x23a>
 800beda:	68e0      	ldr	r0, [r4, #12]
 800bedc:	9b03      	ldr	r3, [sp, #12]
 800bede:	4298      	cmp	r0, r3
 800bee0:	bfb8      	it	lt
 800bee2:	4618      	movlt	r0, r3
 800bee4:	e7a4      	b.n	800be30 <_printf_i+0x168>
 800bee6:	2301      	movs	r3, #1
 800bee8:	4632      	mov	r2, r6
 800beea:	4649      	mov	r1, r9
 800beec:	4640      	mov	r0, r8
 800beee:	47d0      	blx	sl
 800bef0:	3001      	adds	r0, #1
 800bef2:	d09b      	beq.n	800be2c <_printf_i+0x164>
 800bef4:	3501      	adds	r5, #1
 800bef6:	68e3      	ldr	r3, [r4, #12]
 800bef8:	9903      	ldr	r1, [sp, #12]
 800befa:	1a5b      	subs	r3, r3, r1
 800befc:	42ab      	cmp	r3, r5
 800befe:	dcf2      	bgt.n	800bee6 <_printf_i+0x21e>
 800bf00:	e7eb      	b.n	800beda <_printf_i+0x212>
 800bf02:	2500      	movs	r5, #0
 800bf04:	f104 0619 	add.w	r6, r4, #25
 800bf08:	e7f5      	b.n	800bef6 <_printf_i+0x22e>
 800bf0a:	bf00      	nop
 800bf0c:	0800d509 	.word	0x0800d509
 800bf10:	0800d51a 	.word	0x0800d51a

0800bf14 <_read_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4d07      	ldr	r5, [pc, #28]	; (800bf34 <_read_r+0x20>)
 800bf18:	4604      	mov	r4, r0
 800bf1a:	4608      	mov	r0, r1
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	602a      	str	r2, [r5, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	f7f6 fd0e 	bl	8002944 <_read>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d102      	bne.n	800bf32 <_read_r+0x1e>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	b103      	cbz	r3, 800bf32 <_read_r+0x1e>
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	20002bf0 	.word	0x20002bf0

0800bf38 <memmove>:
 800bf38:	4288      	cmp	r0, r1
 800bf3a:	b510      	push	{r4, lr}
 800bf3c:	eb01 0402 	add.w	r4, r1, r2
 800bf40:	d902      	bls.n	800bf48 <memmove+0x10>
 800bf42:	4284      	cmp	r4, r0
 800bf44:	4623      	mov	r3, r4
 800bf46:	d807      	bhi.n	800bf58 <memmove+0x20>
 800bf48:	1e43      	subs	r3, r0, #1
 800bf4a:	42a1      	cmp	r1, r4
 800bf4c:	d008      	beq.n	800bf60 <memmove+0x28>
 800bf4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf56:	e7f8      	b.n	800bf4a <memmove+0x12>
 800bf58:	4402      	add	r2, r0
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	428a      	cmp	r2, r1
 800bf5e:	d100      	bne.n	800bf62 <memmove+0x2a>
 800bf60:	bd10      	pop	{r4, pc}
 800bf62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf6a:	e7f7      	b.n	800bf5c <memmove+0x24>

0800bf6c <_malloc_usable_size_r>:
 800bf6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf70:	1f18      	subs	r0, r3, #4
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	bfbc      	itt	lt
 800bf76:	580b      	ldrlt	r3, [r1, r0]
 800bf78:	18c0      	addlt	r0, r0, r3
 800bf7a:	4770      	bx	lr

0800bf7c <_init>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	bf00      	nop
 800bf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf82:	bc08      	pop	{r3}
 800bf84:	469e      	mov	lr, r3
 800bf86:	4770      	bx	lr

0800bf88 <_fini>:
 800bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8a:	bf00      	nop
 800bf8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf8e:	bc08      	pop	{r3}
 800bf90:	469e      	mov	lr, r3
 800bf92:	4770      	bx	lr
