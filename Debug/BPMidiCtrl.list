
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dec  08012c20  08012c20  00022c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a0c  08014a0c  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08014a0c  08014a0c  00024a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a14  08014a14  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a14  08014a14  00024a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a18  08014a18  00024a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08014a1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003168  20000334  08014d50  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000349c  08014d50  0003349c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d990  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006220  00000000  00000000  0005dcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  00063f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020ecc  00000000  00000000  00065bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002829f  00000000  00000000  00086a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6cad  00000000  00000000  000aed3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001559e8  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001ac0  00000000  00000000  00155a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089f4  00000000  00000000  00157500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000334 	.word	0x20000334
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012c04 	.word	0x08012c04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000338 	.word	0x20000338
 80001dc:	08012c04 	.word	0x08012c04

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b9a4 	b.w	8000fec <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f83c 	bl	8000d28 <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_d2lz>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	f7ff ff21 	bl	8000b0c <__aeabi_dcmplt>
 8000cca:	b928      	cbnz	r0, 8000cd8 <__aeabi_d2lz+0x1c>
 8000ccc:	4620      	mov	r0, r4
 8000cce:	4629      	mov	r1, r5
 8000cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd4:	f000 b80a 	b.w	8000cec <__aeabi_d2ulz>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cde:	f000 f805 	bl	8000cec <__aeabi_d2ulz>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop

08000cec <__aeabi_d2ulz>:
 8000cec:	b5d0      	push	{r4, r6, r7, lr}
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__aeabi_d2ulz+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	f7ff fc97 	bl	8000628 <__aeabi_dmul>
 8000cfa:	f7ff ff57 	bl	8000bac <__aeabi_d2uiz>
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_ui2d>
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <__aeabi_d2ulz+0x38>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f7ff fc8e 	bl	8000628 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4630      	mov	r0, r6
 8000d12:	4639      	mov	r1, r7
 8000d14:	f7ff fad0 	bl	80002b8 <__aeabi_dsub>
 8000d18:	f7ff ff48 	bl	8000bac <__aeabi_d2uiz>
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d20:	3df00000 	.word	0x3df00000
 8000d24:	41f00000 	.word	0x41f00000

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	468c      	mov	ip, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8083 	bne.w	8000e3e <__udivmoddi4+0x116>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	4617      	mov	r7, r2
 8000d3c:	d947      	bls.n	8000dce <__udivmoddi4+0xa6>
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	b142      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d44:	f1c2 0020 	rsb	r0, r2, #32
 8000d48:	fa24 f000 	lsr.w	r0, r4, r0
 8000d4c:	4091      	lsls	r1, r2
 8000d4e:	4097      	lsls	r7, r2
 8000d50:	ea40 0c01 	orr.w	ip, r0, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d60:	fa1f fe87 	uxth.w	lr, r7
 8000d64:	fb08 c116 	mls	r1, r8, r6, ip
 8000d68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 8119 	bcs.w	8000fb0 <__udivmoddi4+0x288>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8116 	bls.w	8000fb0 <__udivmoddi4+0x288>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da6:	f080 8105 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	f240 8102 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000db0:	3802      	subs	r0, #2
 8000db2:	443c      	add	r4, r7
 8000db4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	b902      	cbnz	r2, 8000dd2 <__udivmoddi4+0xaa>
 8000dd0:	deff      	udf	#255	; 0xff
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	d150      	bne.n	8000e7c <__udivmoddi4+0x154>
 8000dda:	1bcb      	subs	r3, r1, r7
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fa1f f887 	uxth.w	r8, r7
 8000de4:	2601      	movs	r6, #1
 8000de6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dea:	0c21      	lsrs	r1, r4, #16
 8000dec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb08 f30c 	mul.w	r3, r8, ip
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000dfc:	1879      	adds	r1, r7, r1
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0xe2>
 8000e04:	428b      	cmp	r3, r1
 8000e06:	f200 80e9 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1ac9      	subs	r1, r1, r3
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x10c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x10a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80d9 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e7bf      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d909      	bls.n	8000e56 <__udivmoddi4+0x12e>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	f000 80b1 	beq.w	8000faa <__udivmoddi4+0x282>
 8000e48:	2600      	movs	r6, #0
 8000e4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4e:	4630      	mov	r0, r6
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	fab3 f683 	clz	r6, r3
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	d14a      	bne.n	8000ef4 <__udivmoddi4+0x1cc>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d302      	bcc.n	8000e68 <__udivmoddi4+0x140>
 8000e62:	4282      	cmp	r2, r0
 8000e64:	f200 80b8 	bhi.w	8000fd8 <__udivmoddi4+0x2b0>
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	468c      	mov	ip, r1
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d0a8      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e7a:	e7a5      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f603 	lsr.w	r6, r0, r3
 8000e84:	4097      	lsls	r7, r2
 8000e86:	fa01 f002 	lsl.w	r0, r1, r2
 8000e8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8e:	40d9      	lsrs	r1, r3
 8000e90:	4330      	orrs	r0, r6
 8000e92:	0c03      	lsrs	r3, r0, #16
 8000e94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ea0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea4:	fb06 f108 	mul.w	r1, r6, r8
 8000ea8:	4299      	cmp	r1, r3
 8000eaa:	fa04 f402 	lsl.w	r4, r4, r2
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x19c>
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb6:	f080 808d 	bcs.w	8000fd4 <__udivmoddi4+0x2ac>
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	f240 808a 	bls.w	8000fd4 <__udivmoddi4+0x2ac>
 8000ec0:	3e02      	subs	r6, #2
 8000ec2:	443b      	add	r3, r7
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b281      	uxth	r1, r0
 8000ec8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ecc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ed0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed4:	fb00 f308 	mul.w	r3, r0, r8
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d907      	bls.n	8000eec <__udivmoddi4+0x1c4>
 8000edc:	1879      	adds	r1, r7, r1
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d273      	bcs.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d971      	bls.n	8000fcc <__udivmoddi4+0x2a4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4439      	add	r1, r7
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ef2:	e778      	b.n	8000de6 <__udivmoddi4+0xbe>
 8000ef4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef8:	fa03 f406 	lsl.w	r4, r3, r6
 8000efc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f00:	431c      	orrs	r4, r3
 8000f02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f06:	fa01 f306 	lsl.w	r3, r1, r6
 8000f0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f12:	431f      	orrs	r7, r3
 8000f14:	0c3b      	lsrs	r3, r7, #16
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fa1f f884 	uxth.w	r8, r4
 8000f1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f26:	fb09 fa08 	mul.w	sl, r9, r8
 8000f2a:	458a      	cmp	sl, r1
 8000f2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f30:	fa00 f306 	lsl.w	r3, r0, r6
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x220>
 8000f36:	1861      	adds	r1, r4, r1
 8000f38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f3c:	d248      	bcs.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f3e:	458a      	cmp	sl, r1
 8000f40:	d946      	bls.n	8000fd0 <__udivmoddi4+0x2a8>
 8000f42:	f1a9 0902 	sub.w	r9, r9, #2
 8000f46:	4421      	add	r1, r4
 8000f48:	eba1 010a 	sub.w	r1, r1, sl
 8000f4c:	b2bf      	uxth	r7, r7
 8000f4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f5a:	fb00 f808 	mul.w	r8, r0, r8
 8000f5e:	45b8      	cmp	r8, r7
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x24a>
 8000f62:	19e7      	adds	r7, r4, r7
 8000f64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f68:	d22e      	bcs.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d92c      	bls.n	8000fc8 <__udivmoddi4+0x2a0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	4427      	add	r7, r4
 8000f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f76:	eba7 0708 	sub.w	r7, r7, r8
 8000f7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7e:	454f      	cmp	r7, r9
 8000f80:	46c6      	mov	lr, r8
 8000f82:	4649      	mov	r1, r9
 8000f84:	d31a      	bcc.n	8000fbc <__udivmoddi4+0x294>
 8000f86:	d017      	beq.n	8000fb8 <__udivmoddi4+0x290>
 8000f88:	b15d      	cbz	r5, 8000fa2 <__udivmoddi4+0x27a>
 8000f8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f96:	40f2      	lsrs	r2, r6
 8000f98:	ea4c 0202 	orr.w	r2, ip, r2
 8000f9c:	40f7      	lsrs	r7, r6
 8000f9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000fa2:	2600      	movs	r6, #0
 8000fa4:	4631      	mov	r1, r6
 8000fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e70b      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6fd      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fb8:	4543      	cmp	r3, r8
 8000fba:	d2e5      	bcs.n	8000f88 <__udivmoddi4+0x260>
 8000fbc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fc0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7df      	b.n	8000f88 <__udivmoddi4+0x260>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e7d2      	b.n	8000f72 <__udivmoddi4+0x24a>
 8000fcc:	4660      	mov	r0, ip
 8000fce:	e78d      	b.n	8000eec <__udivmoddi4+0x1c4>
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	e7b9      	b.n	8000f48 <__udivmoddi4+0x220>
 8000fd4:	4666      	mov	r6, ip
 8000fd6:	e775      	b.n	8000ec4 <__udivmoddi4+0x19c>
 8000fd8:	4630      	mov	r0, r6
 8000fda:	e74a      	b.n	8000e72 <__udivmoddi4+0x14a>
 8000fdc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe0:	4439      	add	r1, r7
 8000fe2:	e713      	b.n	8000e0c <__udivmoddi4+0xe4>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	443c      	add	r4, r7
 8000fe8:	e724      	b.n	8000e34 <__udivmoddi4+0x10c>
 8000fea:	bf00      	nop

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <Knob_Map>:
void Knob_Free(Knob *k) {
    free(k->sub_labels);
}

// Maps values from (0, max_values-1) to (0, m)
uint8_t Knob_Map(Knob *k, uint8_t value, uint8_t m) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	78ba      	ldrb	r2, [r7, #2]
 8001004:	fb02 f203 	mul.w	r2, r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7f1b      	ldrb	r3, [r3, #28]
 800100c:	3b01      	subs	r3, #1
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ffc2 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80010be:	f001 fe49 	bl	8002d54 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80010c2:	f000 f8fd 	bl	80012c0 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80010c6:	f000 fa45 	bl	8001554 <MX_GPIO_Init>
    MX_ADC1_Init();
 80010ca:	f000 f97b 	bl	80013c4 <MX_ADC1_Init>
    MX_I2C1_Init();
 80010ce:	f000 f9cd 	bl	800146c <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 80010d2:	f00c ff69 	bl	800dfa8 <MX_USB_DEVICE_Init>
    MX_SDIO_SD_Init();
 80010d6:	f000 fa1d 	bl	8001514 <MX_SDIO_SD_Init>
    MX_RTC_Init();
 80010da:	f000 f9f5 	bl	80014c8 <MX_RTC_Init>
    MX_FATFS_Init();
 80010de:	f008 fd2d 	bl	8009b3c <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80010e2:	f001 fd8d 	bl	8002c00 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80010e6:	4b6e      	ldr	r3, [pc, #440]	; (80012a0 <main+0x1e8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6e      	ldr	r2, [pc, #440]	; (80012a4 <main+0x1ec>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffbe 	bl	8001074 <SysTick_Config>

    SD_LoadPreset(knobs, "knobs.json");
 80010f8:	496b      	ldr	r1, [pc, #428]	; (80012a8 <main+0x1f0>)
 80010fa:	486c      	ldr	r0, [pc, #432]	; (80012ac <main+0x1f4>)
 80010fc:	f000 fd4c 	bl	8001b98 <SD_LoadPreset>

    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	75fb      	strb	r3, [r7, #23]
 8001104:	e010      	b.n	8001128 <main+0x70>
        ssd1306_Init(&knobs[i]);
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	015b      	lsls	r3, r3, #5
 800110a:	4a68      	ldr	r2, [pc, #416]	; (80012ac <main+0x1f4>)
 800110c:	4413      	add	r3, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fde8 	bl	8001ce4 <ssd1306_Init>
        ssd1306_WriteKnob(&knobs[i]);
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	015b      	lsls	r3, r3, #5
 8001118:	4a64      	ldr	r2, [pc, #400]	; (80012ac <main+0x1f4>)
 800111a:	4413      	add	r3, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 ff3f 	bl	8001fa0 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	3301      	adds	r3, #1
 8001126:	75fb      	strb	r3, [r7, #23]
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d9eb      	bls.n	8001106 <main+0x4e>
    }

    while (1) {
        ADC_Read_Knobs();
 800112e:	f000 fad3 	bl	80016d8 <ADC_Read_Knobs>

        if (isMenuActive) {
 8001132:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <main+0x1f8>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d057      	beq.n	80011ea <main+0x132>
            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 800113a:	2300      	movs	r3, #0
 800113c:	75bb      	strb	r3, [r7, #22]
 800113e:	e03c      	b.n	80011ba <main+0x102>
                ssd1306_Select(&knobs[i]);
 8001140:	7dbb      	ldrb	r3, [r7, #22]
 8001142:	015b      	lsls	r3, r3, #5
 8001144:	4a59      	ldr	r2, [pc, #356]	; (80012ac <main+0x1f4>)
 8001146:	4413      	add	r3, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f001 f9c7 	bl	80024dc <ssd1306_Select>
                ssd1306_Fill(Black);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 fed2 	bl	8001ef8 <ssd1306_Fill>
                char presetString[MAX_LABEL_CHARS+1] = "String";
 8001154:	4a57      	ldr	r2, [pc, #348]	; (80012b4 <main+0x1fc>)
 8001156:	463b      	mov	r3, r7
 8001158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115c:	6018      	str	r0, [r3, #0]
 800115e:	3304      	adds	r3, #4
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	3302      	adds	r3, #2
 8001164:	0c0a      	lsrs	r2, r1, #16
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
                uint8_t x = (SSD1306_WIDTH - strlen(presetString) * Font_10x18.FontWidth) / 2;
 8001170:	463b      	mov	r3, r7
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f83e 	bl	80001f4 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	4a4f      	ldr	r2, [pc, #316]	; (80012b8 <main+0x200>)
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001186:	085b      	lsrs	r3, r3, #1
 8001188:	74fb      	strb	r3, [r7, #19]
                uint8_t y = SSD1306_HEIGHT / 2 -  Font_10x18.FontHeight / 2;
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <main+0x200>)
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	085b      	lsrs	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f1c3 0320 	rsb	r3, r3, #32
 8001196:	74bb      	strb	r3, [r7, #18]
                ssd1306_SetCursor(x, y);
 8001198:	7cba      	ldrb	r2, [r7, #18]
 800119a:	7cfb      	ldrb	r3, [r7, #19]
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 f95a 	bl	8002458 <ssd1306_SetCursor>

                ssd1306_WriteString(presetString, Font_10x18, White);
 80011a4:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <main+0x200>)
 80011a6:	4638      	mov	r0, r7
 80011a8:	2301      	movs	r3, #1
 80011aa:	ca06      	ldmia	r2, {r1, r2}
 80011ac:	f001 f92e 	bl	800240c <ssd1306_WriteString>
                ssd1306_UpdateScreen();
 80011b0:	f000 fec6 	bl	8001f40 <ssd1306_UpdateScreen>
            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	3301      	adds	r3, #1
 80011b8:	75bb      	strb	r3, [r7, #22]
 80011ba:	7dbb      	ldrb	r3, [r7, #22]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d9bf      	bls.n	8001140 <main+0x88>
            }

            while (isMenuActive) {
 80011c0:	bf00      	nop
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <main+0x1f8>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1fb      	bne.n	80011c2 <main+0x10a>

            }

            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80011ca:	2300      	movs	r3, #0
 80011cc:	757b      	strb	r3, [r7, #21]
 80011ce:	e009      	b.n	80011e4 <main+0x12c>
                ssd1306_WriteKnob(&knobs[i]);
 80011d0:	7d7b      	ldrb	r3, [r7, #21]
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	4a35      	ldr	r2, [pc, #212]	; (80012ac <main+0x1f4>)
 80011d6:	4413      	add	r3, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fee1 	bl	8001fa0 <ssd1306_WriteKnob>
            for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80011de:	7d7b      	ldrb	r3, [r7, #21]
 80011e0:	3301      	adds	r3, #1
 80011e2:	757b      	strb	r3, [r7, #21]
 80011e4:	7d7b      	ldrb	r3, [r7, #21]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d9f2      	bls.n	80011d0 <main+0x118>
            }
        }

        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	753b      	strb	r3, [r7, #20]
 80011ee:	e053      	b.n	8001298 <main+0x1e0>
            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 80011f0:	7d3b      	ldrb	r3, [r7, #20]
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <main+0x1f4>)
 80011f6:	441a      	add	r2, r3
 80011f8:	7d3b      	ldrb	r3, [r7, #20]
 80011fa:	4930      	ldr	r1, [pc, #192]	; (80012bc <main+0x204>)
 80011fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4619      	mov	r1, r3
 8001204:	4610      	mov	r0, r2
 8001206:	f000 fb0f 	bl	8001828 <MIDI_Scale_And_Filter>
 800120a:	4603      	mov	r3, r0
 800120c:	747b      	strb	r3, [r7, #17]

            if (curr_MIDI_val != knobs[i].value) {
 800120e:	7d3b      	ldrb	r3, [r7, #20]
 8001210:	4a26      	ldr	r2, [pc, #152]	; (80012ac <main+0x1f4>)
 8001212:	015b      	lsls	r3, r3, #5
 8001214:	4413      	add	r3, r2
 8001216:	331b      	adds	r3, #27
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	7c7a      	ldrb	r2, [r7, #17]
 800121c:	429a      	cmp	r2, r3
 800121e:	d038      	beq.n	8001292 <main+0x1da>
                knobs[i].value = curr_MIDI_val;
 8001220:	7d3b      	ldrb	r3, [r7, #20]
 8001222:	4a22      	ldr	r2, [pc, #136]	; (80012ac <main+0x1f4>)
 8001224:	015b      	lsls	r3, r3, #5
 8001226:	4413      	add	r3, r2
 8001228:	331b      	adds	r3, #27
 800122a:	7c7a      	ldrb	r2, [r7, #17]
 800122c:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&knobs[i]);
 800122e:	7d3b      	ldrb	r3, [r7, #20]
 8001230:	015b      	lsls	r3, r3, #5
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <main+0x1f4>)
 8001234:	4413      	add	r3, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f000 feb2 	bl	8001fa0 <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 800123c:	7d3b      	ldrb	r3, [r7, #20]
 800123e:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <main+0x1f4>)
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	4413      	add	r3, r2
 8001244:	331b      	adds	r3, #27
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	7d3b      	ldrb	r3, [r7, #20]
 800124a:	4918      	ldr	r1, [pc, #96]	; (80012ac <main+0x1f4>)
 800124c:	015b      	lsls	r3, r3, #5
 800124e:	440b      	add	r3, r1
 8001250:	331a      	adds	r3, #26
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d106      	bne.n	8001266 <main+0x1ae>
 8001258:	7d3b      	ldrb	r3, [r7, #20]
 800125a:	4a14      	ldr	r2, [pc, #80]	; (80012ac <main+0x1f4>)
 800125c:	015b      	lsls	r3, r3, #5
 800125e:	4413      	add	r3, r2
 8001260:	331e      	adds	r3, #30
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 8001266:	7d3b      	ldrb	r3, [r7, #20]
 8001268:	4a10      	ldr	r2, [pc, #64]	; (80012ac <main+0x1f4>)
 800126a:	015b      	lsls	r3, r3, #5
 800126c:	4413      	add	r3, r2
 800126e:	331e      	adds	r3, #30
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10d      	bne.n	8001292 <main+0x1da>
 8001276:	7d3b      	ldrb	r3, [r7, #20]
 8001278:	015b      	lsls	r3, r3, #5
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <main+0x1f4>)
 800127c:	441a      	add	r2, r3
 800127e:	7d3b      	ldrb	r3, [r7, #20]
 8001280:	490a      	ldr	r1, [pc, #40]	; (80012ac <main+0x1f4>)
 8001282:	015b      	lsls	r3, r3, #5
 8001284:	440b      	add	r3, r1
 8001286:	331b      	adds	r3, #27
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	4610      	mov	r0, r2
 800128e:	f000 fab0 	bl	80017f2 <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001292:	7d3b      	ldrb	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	753b      	strb	r3, [r7, #20]
 8001298:	7d3b      	ldrb	r3, [r7, #20]
 800129a:	2b03      	cmp	r3, #3
 800129c:	d9a8      	bls.n	80011f0 <main+0x138>
        ADC_Read_Knobs();
 800129e:	e746      	b.n	800112e <main+0x76>
 80012a0:	20000048 	.word	0x20000048
 80012a4:	cccccccd 	.word	0xcccccccd
 80012a8:	08012c20 	.word	0x08012c20
 80012ac:	20002620 	.word	0x20002620
 80012b0:	2000261c 	.word	0x2000261c
 80012b4:	08012c2c 	.word	0x08012c2c
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000350 	.word	0x20000350

080012c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09a      	sub	sp, #104	; 0x68
 80012c4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012ca:	2230      	movs	r2, #48	; 0x30
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00e fbd6 	bl	800fa80 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <SystemClock_Config+0xfc>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <SystemClock_Config+0xfc>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <SystemClock_Config+0xfc>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <SystemClock_Config+0x100>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a29      	ldr	r2, [pc, #164]	; (80013c0 <SystemClock_Config+0x100>)
 800131c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <SystemClock_Config+0x100>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800132e:	2309      	movs	r3, #9
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001340:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001344:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 8001346:	2319      	movs	r3, #25
 8001348:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 800134a:	23c0      	movs	r3, #192	; 0xc0
 800134c:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001352:	2304      	movs	r3, #4
 8001354:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800135a:	4618      	mov	r0, r3
 800135c:	f004 fbc2 	bl	8005ae4 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xaa>
            {
        Error_Handler();
 8001366:	f000 fa3f 	bl	80017e8 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	2103      	movs	r1, #3
 8001386:	4618      	mov	r0, r3
 8001388:	f004 fe24 	bl	8005fd4 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xd6>
            {
        Error_Handler();
 8001392:	f000 fa29 	bl	80017e8 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001396:	2302      	movs	r3, #2
 8001398:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800139a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 ffd1 	bl	800634c <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xf4>
            {
        Error_Handler();
 80013b0:	f000 fa1a 	bl	80017e8 <Error_Handler>
    }
}
 80013b4:	bf00      	nop
 80013b6:	3768      	adds	r7, #104	; 0x68
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 80013ca:	463b      	mov	r3, r7
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_ADC1_Init+0x9c>)
 80013d8:	4a22      	ldr	r2, [pc, #136]	; (8001464 <MX_ADC1_Init+0xa0>)
 80013da:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <MX_ADC1_Init+0x9c>)
 80013de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013e2:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <MX_ADC1_Init+0x9c>)
 80013e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ea:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_ADC1_Init+0x9c>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <MX_ADC1_Init+0x9c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_ADC1_Init+0x9c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <MX_ADC1_Init+0x9c>)
 8001402:	2200      	movs	r2, #0
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_ADC1_Init+0x9c>)
 8001408:	4a17      	ldr	r2, [pc, #92]	; (8001468 <MX_ADC1_Init+0xa4>)
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_ADC1_Init+0x9c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_ADC1_Init+0x9c>)
 8001414:	2201      	movs	r2, #1
 8001416:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_ADC1_Init+0x9c>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_ADC1_Init+0x9c>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <MX_ADC1_Init+0x9c>)
 8001428:	f001 fd2a 	bl	8002e80 <HAL_ADC_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x72>
            {
        Error_Handler();
 8001432:	f000 f9d9 	bl	80017e8 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <MX_ADC1_Init+0x9c>)
 8001448:	f001 fede 	bl	8003208 <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC1_Init+0x92>
            {
        Error_Handler();
 8001452:	f000 f9c9 	bl	80017e8 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200025d4 	.word	0x200025d4
 8001464:	40012000 	.word	0x40012000
 8001468:	0f000001 	.word	0x0f000001

0800146c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_I2C1_Init+0x50>)
 8001472:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <MX_I2C1_Init+0x54>)
 8001474:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_I2C1_Init+0x50>)
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_I2C1_Init+0x58>)
 800147a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_I2C1_Init+0x50>)
 800148a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_I2C1_Init+0x50>)
 80014aa:	f002 fbbd 	bl	8003c28 <HAL_I2C_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 80014b4:	f000 f998 	bl	80017e8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20002580 	.word	0x20002580
 80014c0:	40005400 	.word	0x40005400
 80014c4:	000c3500 	.word	0x000c3500

080014c8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_RTC_Init+0x44>)
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <MX_RTC_Init+0x48>)
 80014d0:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_RTC_Init+0x44>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_RTC_Init+0x44>)
 80014da:	227f      	movs	r2, #127	; 0x7f
 80014dc:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_RTC_Init+0x44>)
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_RTC_Init+0x44>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_RTC_Init+0x44>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_RTC_Init+0x44>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_RTC_Init+0x44>)
 80014f8:	f005 f818 	bl	800652c <HAL_RTC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_RTC_Init+0x3e>
            {
        Error_Handler();
 8001502:	f000 f971 	bl	80017e8 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200026a0 	.word	0x200026a0
 8001510:	40002800 	.word	0x40002800

08001514 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_SDIO_SD_Init+0x38>)
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <MX_SDIO_SD_Init+0x3c>)
 800151c:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_SDIO_SD_Init+0x38>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_SDIO_SD_Init+0x38>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_SDIO_SD_Init+0x38>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_SDIO_SD_Init+0x38>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <MX_SDIO_SD_Init+0x38>)
 8001538:	2200      	movs	r2, #0
 800153a:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 12;
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <MX_SDIO_SD_Init+0x38>)
 800153e:	220c      	movs	r2, #12
 8001540:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	200026c0 	.word	0x200026c0
 8001550:	40012c00 	.word	0x40012c00

08001554 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <MX_GPIO_Init+0x108>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a3a      	ldr	r2, [pc, #232]	; (800165c <MX_GPIO_Init+0x108>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b38      	ldr	r3, [pc, #224]	; (800165c <MX_GPIO_Init+0x108>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b34      	ldr	r3, [pc, #208]	; (800165c <MX_GPIO_Init+0x108>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a33      	ldr	r2, [pc, #204]	; (800165c <MX_GPIO_Init+0x108>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <MX_GPIO_Init+0x108>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <MX_GPIO_Init+0x108>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <MX_GPIO_Init+0x108>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <MX_GPIO_Init+0x108>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_GPIO_Init+0x108>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a25      	ldr	r2, [pc, #148]	; (800165c <MX_GPIO_Init+0x108>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_GPIO_Init+0x108>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 80015da:	2200      	movs	r2, #0
 80015dc:	f247 710f 	movw	r1, #30479	; 0x770f
 80015e0:	481f      	ldr	r0, [pc, #124]	; (8001660 <MX_GPIO_Init+0x10c>)
 80015e2:	f002 faed 	bl	8003bc0 <HAL_GPIO_WritePin>
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : Detect_SDIO_Pin */
    GPIO_InitStruct.Pin = Detect_SDIO_Pin;
 80015e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f0:	2302      	movs	r3, #2
 80015f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Detect_SDIO_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	481a      	ldr	r0, [pc, #104]	; (8001664 <MX_GPIO_Init+0x110>)
 80015fc:	f002 f944 	bl	8003888 <HAL_GPIO_Init>

    /*Configure GPIO pin : Button_6_Pin */
    GPIO_InitStruct.Pin = Button_6_Pin;
 8001600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160a:	2301      	movs	r3, #1
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <MX_GPIO_Init+0x110>)
 8001616:	f002 f937 	bl	8003888 <HAL_GPIO_Init>

    /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
     Button_5_Pin */
    GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin | Button_4_Pin
 800161a:	f248 43b0 	movw	r3, #33968	; 0x84b0
 800161e:	617b      	str	r3, [r7, #20]
            | Button_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001624:	2301      	movs	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <MX_GPIO_Init+0x114>)
 8001630:	f002 f92a 	bl	8003888 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
     LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
     AMUX_S2_Pin AMUX_S3_Pin */
    GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001634:	f247 730f 	movw	r3, #30479	; 0x770f
 8001638:	617b      	str	r3, [r7, #20]
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_GPIO_Init+0x10c>)
 800164e:	f002 f91b 	bl	8003888 <HAL_GPIO_Init>

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	; 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	40020000 	.word	0x40020000

0800166c <ADC_Mux_Select>:

/* USER CODE BEGIN 4 */
void ADC_Mux_Select(uint8_t c) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
    if (c > NUM_ADC_CHANNELS) return;
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d824      	bhi.n	80016c6 <ADC_Mux_Select+0x5a>

    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e01d      	b.n	80016be <ADC_Mux_Select+0x52>
        if (c & (1 << i)) {
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	fa42 f303 	asr.w	r3, r2, r3
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <ADC_Mux_Select+0x3a>
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_SET);
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <ADC_Mux_Select+0x64>)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800169a:	2201      	movs	r2, #1
 800169c:	4619      	mov	r1, r3
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <ADC_Mux_Select+0x68>)
 80016a0:	f002 fa8e 	bl	8003bc0 <HAL_GPIO_WritePin>
 80016a4:	e008      	b.n	80016b8 <ADC_Mux_Select+0x4c>
        } else {
            HAL_GPIO_WritePin(GPIO_PORT_AMUX, AMUXPins[i], GPIO_PIN_RESET);
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <ADC_Mux_Select+0x64>)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4808      	ldr	r0, [pc, #32]	; (80016d4 <ADC_Mux_Select+0x68>)
 80016b4:	f002 fa84 	bl	8003bc0 <HAL_GPIO_WritePin>
    for (int i = 0; i < NUM_ADC_CHANNELS; i++) {
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	ddde      	ble.n	8001682 <ADC_Mux_Select+0x16>
 80016c4:	e000      	b.n	80016c8 <ADC_Mux_Select+0x5c>
    if (c > NUM_ADC_CHANNELS) return;
 80016c6:	bf00      	nop
        }
    }
}
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	0801415c 	.word	0x0801415c
 80016d4:	40020400 	.word	0x40020400

080016d8 <ADC_Read_Knobs>:

void ADC_Read_Knobs() {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b096      	sub	sp, #88	; 0x58
 80016dc:	af00      	add	r7, sp, #0
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80016e4:	e070      	b.n	80017c8 <ADC_Read_Knobs+0xf0>
        uint16_t adcBuf[NUM_ADC_SAMPLES];

        ADC_Mux_Select(channel);
 80016e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ffbe 	bl	800166c <ADC_Mux_Select>

        // Select channel
        ADC_ChannelConfTypeDef sConfig = { 0 };
 80016f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
        sConfig.Channel = adcChannels[channel];
 80016fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001702:	4a36      	ldr	r2, [pc, #216]	; (80017dc <ADC_Read_Knobs+0x104>)
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	643b      	str	r3, [r7, #64]	; 0x40
        sConfig.Rank = 1;
 800170a:	2301      	movs	r3, #1
 800170c:	647b      	str	r3, [r7, #68]	; 0x44
        sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800170e:	2300      	movs	r3, #0
 8001710:	64bb      	str	r3, [r7, #72]	; 0x48
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001712:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001716:	4619      	mov	r1, r3
 8001718:	4831      	ldr	r0, [pc, #196]	; (80017e0 <ADC_Read_Knobs+0x108>)
 800171a:	f001 fd75 	bl	8003208 <HAL_ADC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <ADC_Read_Knobs+0x50>
            Error_Handler();
 8001724:	f000 f860 	bl	80017e8 <Error_Handler>
        }

        // Sample the channel NUM_ADC_SAMPLES times to the buffer
        HAL_ADC_Start(&hadc1);
 8001728:	482d      	ldr	r0, [pc, #180]	; (80017e0 <ADC_Read_Knobs+0x108>)
 800172a:	f001 fbed 	bl	8002f08 <HAL_ADC_Start>
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001734:	e016      	b.n	8001764 <ADC_Read_Knobs+0x8c>
            HAL_ADC_PollForConversion(&hadc1, 1000);
 8001736:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800173a:	4829      	ldr	r0, [pc, #164]	; (80017e0 <ADC_Read_Knobs+0x108>)
 800173c:	f001 fccb 	bl	80030d6 <HAL_ADC_PollForConversion>
            adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 8001740:	4827      	ldr	r0, [pc, #156]	; (80017e0 <ADC_Read_Knobs+0x108>)
 8001742:	f001 fd53 	bl	80031ec <HAL_ADC_GetValue>
 8001746:	4602      	mov	r2, r0
 8001748:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800174c:	b292      	uxth	r2, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001754:	440b      	add	r3, r1
 8001756:	f823 2c58 	strh.w	r2, [r3, #-88]
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800175a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800175e:	3301      	adds	r3, #1
 8001760:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001764:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001768:	2b1f      	cmp	r3, #31
 800176a:	d9e4      	bls.n	8001736 <ADC_Read_Knobs+0x5e>
        }
        HAL_ADC_Stop(&hadc1);
 800176c:	481c      	ldr	r0, [pc, #112]	; (80017e0 <ADC_Read_Knobs+0x108>)
 800176e:	f001 fc7f 	bl	8003070 <HAL_ADC_Stop>

        // Calculate average of all samples for the channel
        uint16_t adc_sum = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800177e:	e011      	b.n	80017a4 <ADC_Read_Knobs+0xcc>
            adc_sum += adcBuf[i];
 8001780:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800178a:	4413      	add	r3, r2
 800178c:	f833 2c58 	ldrh.w	r2, [r3, #-88]
 8001790:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001794:	4413      	add	r3, r2
 8001796:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 800179a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800179e:	3301      	adds	r3, #1
 80017a0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80017a4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80017a8:	2b1f      	cmp	r3, #31
 80017aa:	d9e9      	bls.n	8001780 <ADC_Read_Knobs+0xa8>
        }

        adcAveraged[channel] = adc_sum / NUM_ADC_SAMPLES;
 80017ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017b0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80017b4:	0952      	lsrs	r2, r2, #5
 80017b6:	b291      	uxth	r1, r2
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <ADC_Read_Knobs+0x10c>)
 80017ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t channel = 0; channel < NUM_ADC_CHANNELS; channel++) {
 80017be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017c2:	3301      	adds	r3, #1
 80017c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80017c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d98a      	bls.n	80016e6 <ADC_Read_Knobs+0xe>
    }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3758      	adds	r7, #88	; 0x58
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000010 	.word	0x20000010
 80017e0:	200025d4 	.word	0x200025d4
 80017e4:	20000350 	.word	0x20000350

080017e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    __disable_irq();
    while (1) {
 80017f0:	e7fe      	b.n	80017f0 <Error_Handler+0x8>

080017f2 <MIDI_Send>:

#include "midi.h"
#include "usb_device.h"

// Sends a CC message for knob k with the specified value
void MIDI_Send(Knob *k, uint8_t value) {
 80017f2:	b5b0      	push	{r4, r5, r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, Knob_Map(k, value, k->max_range));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7e1c      	ldrb	r4, [r3, #24]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7e5d      	ldrb	r5, [r3, #25]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7f5a      	ldrb	r2, [r3, #29]
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	4619      	mov	r1, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fbee 	bl	8000ff0 <Knob_Map>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	4629      	mov	r1, r5
 800181a:	4620      	mov	r0, r4
 800181c:	f00c fbf4 	bl	800e008 <MX_USB_Send_Midi>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bdb0      	pop	{r4, r5, r7, pc}

08001828 <MIDI_Scale_And_Filter>:

// Scales an ADC value from (0, 255) to (0, k->max_values) an applies EMA filter
uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * k->max_values / UPPER_BOUND_ADC;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7f1b      	ldrb	r3, [r3, #28]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe8b 	bl	8000554 <__aeabi_i2d>
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b45      	ldr	r3, [pc, #276]	; (8001958 <MIDI_Scale_And_Filter+0x130>)
 8001844:	f7ff f81a 	bl	800087c <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f9cc 	bl	8000bec <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7fe fe8d 	bl	8000578 <__aeabi_f2d>
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b3e      	ldr	r3, [pc, #248]	; (800195c <MIDI_Scale_And_Filter+0x134>)
 8001864:	f7fe fee0 	bl	8000628 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4614      	mov	r4, r2
 800186e:	461d      	mov	r5, r3
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe6e 	bl	8000554 <__aeabi_i2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fed2 	bl	8000628 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7edb      	ldrb	r3, [r3, #27]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe5f 	bl	8000554 <__aeabi_i2d>
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <MIDI_Scale_And_Filter+0x134>)
 800189c:	f7fe fec4 	bl	8000628 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fd08 	bl	80002bc <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7f5b      	ldrb	r3, [r3, #29]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe4b 	bl	8000554 <__aeabi_i2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7ff f921 	bl	8000b0c <__aeabi_dcmplt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <MIDI_Scale_And_Filter+0x10e>
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7fe fe51 	bl	8000578 <__aeabi_f2d>
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <MIDI_Scale_And_Filter+0x134>)
 80018dc:	f7fe fea4 	bl	8000628 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	461d      	mov	r5, r3
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe32 	bl	8000554 <__aeabi_i2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fe96 	bl	8000628 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7edb      	ldrb	r3, [r3, #27]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe23 	bl	8000554 <__aeabi_i2d>
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <MIDI_Scale_And_Filter+0x134>)
 8001914:	f7fe fe88 	bl	8000628 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fccc 	bl	80002bc <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f93e 	bl	8000bac <__aeabi_d2uiz>
 8001930:	4603      	mov	r3, r0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	e00c      	b.n	8001950 <MIDI_Scale_And_Filter+0x128>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7f5b      	ldrb	r3, [r3, #29]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fe0a 	bl	8000554 <__aeabi_i2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f930 	bl	8000bac <__aeabi_d2uiz>
 800194c:	4603      	mov	r3, r0
 800194e:	b2db      	uxtb	r3, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bdb0      	pop	{r4, r5, r7, pc}
 8001958:	406f4000 	.word	0x406f4000
 800195c:	3fe00000 	.word	0x3fe00000

08001960 <Preset_Load>:
#include "preset.h"

void Preset_Load(Knob *knobs, char *buffer) {
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b095      	sub	sp, #84	; 0x54
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
    cJSON *preset_json = cJSON_Parse(buffer);
 800196a:	6838      	ldr	r0, [r7, #0]
 800196c:	f00d fd2c 	bl	800f3c8 <cJSON_Parse>
 8001970:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (preset_json == NULL) return;
 8001972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80ef 	beq.w	8001b58 <Preset_Load+0x1f8>

    const cJSON *name = cJSON_GetObjectItemCaseSensitive(preset_json, "name");
 800197a:	497a      	ldr	r1, [pc, #488]	; (8001b64 <Preset_Load+0x204>)
 800197c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800197e:	f00e f828 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 8001982:	63b8      	str	r0, [r7, #56]	; 0x38
    const cJSON *knobs_json = cJSON_GetObjectItemCaseSensitive(preset_json, "knobs");
 8001984:	4978      	ldr	r1, [pc, #480]	; (8001b68 <Preset_Load+0x208>)
 8001986:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001988:	f00e f823 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 800198c:	6378      	str	r0, [r7, #52]	; 0x34
    const cJSON *knob_json = NULL;
 800198e:	2300      	movs	r3, #0
 8001990:	64fb      	str	r3, [r7, #76]	; 0x4c

    uint8_t i = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    cJSON_ArrayForEach(knob_json, knobs_json)
 8001998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <Preset_Load+0x44>
 800199e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	e000      	b.n	80019a6 <Preset_Load+0x46>
 80019a4:	2300      	movs	r3, #0
 80019a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019a8:	e0d1      	b.n	8001b4e <Preset_Load+0x1ee>
    {
        if (i >= NUM_KNOBS) return;
 80019aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	f200 80d4 	bhi.w	8001b5c <Preset_Load+0x1fc>

        const cJSON *row = cJSON_GetObjectItemCaseSensitive(knob_json, "row");
 80019b4:	496d      	ldr	r1, [pc, #436]	; (8001b6c <Preset_Load+0x20c>)
 80019b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019b8:	f00e f80b 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 80019bc:	6338      	str	r0, [r7, #48]	; 0x30
        const cJSON *col = cJSON_GetObjectItemCaseSensitive(knob_json, "col");
 80019be:	496c      	ldr	r1, [pc, #432]	; (8001b70 <Preset_Load+0x210>)
 80019c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019c2:	f00e f806 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 80019c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        const cJSON *label = cJSON_GetObjectItemCaseSensitive(knob_json, "label");
 80019c8:	496a      	ldr	r1, [pc, #424]	; (8001b74 <Preset_Load+0x214>)
 80019ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019cc:	f00e f801 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 80019d0:	62b8      	str	r0, [r7, #40]	; 0x28
        const cJSON *channel = cJSON_GetObjectItemCaseSensitive(knob_json, "channel");
 80019d2:	4969      	ldr	r1, [pc, #420]	; (8001b78 <Preset_Load+0x218>)
 80019d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019d6:	f00d fffc 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 80019da:	6278      	str	r0, [r7, #36]	; 0x24
        const cJSON *cc = cJSON_GetObjectItemCaseSensitive(knob_json, "cc");
 80019dc:	4967      	ldr	r1, [pc, #412]	; (8001b7c <Preset_Load+0x21c>)
 80019de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019e0:	f00d fff7 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 80019e4:	6238      	str	r0, [r7, #32]
        const cJSON *init_value = cJSON_GetObjectItemCaseSensitive(knob_json, "init_value");
 80019e6:	4966      	ldr	r1, [pc, #408]	; (8001b80 <Preset_Load+0x220>)
 80019e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019ea:	f00d fff2 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 80019ee:	61f8      	str	r0, [r7, #28]
        const cJSON *max_values = cJSON_GetObjectItemCaseSensitive(knob_json, "max_values");
 80019f0:	4964      	ldr	r1, [pc, #400]	; (8001b84 <Preset_Load+0x224>)
 80019f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019f4:	f00d ffed 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 80019f8:	61b8      	str	r0, [r7, #24]
        const cJSON *max_range = cJSON_GetObjectItemCaseSensitive(knob_json, "max_range");
 80019fa:	4963      	ldr	r1, [pc, #396]	; (8001b88 <Preset_Load+0x228>)
 80019fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019fe:	f00d ffe8 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 8001a02:	6178      	str	r0, [r7, #20]
        const cJSON *isLocked = cJSON_GetObjectItemCaseSensitive(knob_json, "isLocked");
 8001a04:	4961      	ldr	r1, [pc, #388]	; (8001b8c <Preset_Load+0x22c>)
 8001a06:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a08:	f00d ffe3 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 8001a0c:	6138      	str	r0, [r7, #16]

        knobs[i].row = row->valueint;
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	6959      	ldr	r1, [r3, #20]
 8001a12:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2ca      	uxtb	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
        knobs[i].col = col->valueint;
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	6959      	ldr	r1, [r3, #20]
 8001a24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a28:	015b      	lsls	r3, r3, #5
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	705a      	strb	r2, [r3, #1]
        snprintf(knobs[i].label, sizeof(knobs[i].label) / sizeof(knobs[i].label[0]), "%s", label->valuestring);
 8001a32:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a36:	015b      	lsls	r3, r3, #5
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	1c98      	adds	r0, r3, #2
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4a53      	ldr	r2, [pc, #332]	; (8001b90 <Preset_Load+0x230>)
 8001a44:	210f      	movs	r1, #15
 8001a46:	f00e f95b 	bl	800fd00 <sniprintf>
        knobs[i].channel = channel->valueint;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	6959      	ldr	r1, [r3, #20]
 8001a4e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a52:	015b      	lsls	r3, r3, #5
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	b2ca      	uxtb	r2, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
        knobs[i].cc = cc->valueint;
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	6959      	ldr	r1, [r3, #20]
 8001a60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	765a      	strb	r2, [r3, #25]
        knobs[i].init_value = init_value->valueint;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	6959      	ldr	r1, [r3, #20]
 8001a72:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a76:	015b      	lsls	r3, r3, #5
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b2ca      	uxtb	r2, r1
 8001a7e:	769a      	strb	r2, [r3, #26]
        knobs[i].max_values = max_values->valueint;
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	6959      	ldr	r1, [r3, #20]
 8001a84:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a88:	015b      	lsls	r3, r3, #5
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b2ca      	uxtb	r2, r1
 8001a90:	771a      	strb	r2, [r3, #28]
        knobs[i].max_range = max_range->valueint;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	6959      	ldr	r1, [r3, #20]
 8001a96:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b2ca      	uxtb	r2, r1
 8001aa2:	775a      	strb	r2, [r3, #29]
        knobs[i].isLocked = isLocked->valueint;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	6959      	ldr	r1, [r3, #20]
 8001aa8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001aac:	015b      	lsls	r3, r3, #5
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	779a      	strb	r2, [r3, #30]

        const cJSON *sub_labels = cJSON_GetObjectItemCaseSensitive(knob_json, "sub_labels");
 8001ab6:	4937      	ldr	r1, [pc, #220]	; (8001b94 <Preset_Load+0x234>)
 8001ab8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001aba:	f00d ff8a 	bl	800f9d2 <cJSON_GetObjectItemCaseSensitive>
 8001abe:	60f8      	str	r0, [r7, #12]
        const cJSON *sub_label = NULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	647b      	str	r3, [r7, #68]	; 0x44
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001ac4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001ac8:	015b      	lsls	r3, r3, #5
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	7f1b      	ldrb	r3, [r3, #28]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a99      	subs	r1, r3, r2
 8001ad8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001adc:	015b      	lsls	r3, r3, #5
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	18d4      	adds	r4, r2, r3
 8001ae2:	4608      	mov	r0, r1
 8001ae4:	f00d ffae 	bl	800fa44 <malloc>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	6163      	str	r3, [r4, #20]

        uint8_t label_index = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <Preset_Load+0x19e>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	e000      	b.n	8001b00 <Preset_Load+0x1a0>
 8001afe:	2300      	movs	r3, #0
 8001b00:	647b      	str	r3, [r7, #68]	; 0x44
 8001b02:	e019      	b.n	8001b38 <Preset_Load+0x1d8>
        {
            snprintf(knobs[i].sub_labels[label_index], sizeof(knobs[i].sub_labels[0]) / sizeof(knobs[i].sub_labels[0][0]), "%s", sub_label->valuestring);
 8001b04:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b08:	015b      	lsls	r3, r3, #5
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	6959      	ldr	r1, [r3, #20]
 8001b10:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001b14:	4613      	mov	r3, r2
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	18c8      	adds	r0, r1, r3
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	4a1b      	ldr	r2, [pc, #108]	; (8001b90 <Preset_Load+0x230>)
 8001b22:	210f      	movs	r1, #15
 8001b24:	f00e f8ec 	bl	800fd00 <sniprintf>
            label_index++;
 8001b28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	647b      	str	r3, [r7, #68]	; 0x44
 8001b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1e2      	bne.n	8001b04 <Preset_Load+0x1a4>
        }
        i++;
 8001b3e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b42:	3301      	adds	r3, #1
 8001b44:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    cJSON_ArrayForEach(knob_json, knobs_json)
 8001b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f47f af2a 	bne.w	80019aa <Preset_Load+0x4a>
 8001b56:	e002      	b.n	8001b5e <Preset_Load+0x1fe>
    if (preset_json == NULL) return;
 8001b58:	bf00      	nop
 8001b5a:	e000      	b.n	8001b5e <Preset_Load+0x1fe>
        if (i >= NUM_KNOBS) return;
 8001b5c:	bf00      	nop
    }
}
 8001b5e:	3754      	adds	r7, #84	; 0x54
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	08012c3c 	.word	0x08012c3c
 8001b68:	08012c44 	.word	0x08012c44
 8001b6c:	08012c4c 	.word	0x08012c4c
 8001b70:	08012c50 	.word	0x08012c50
 8001b74:	08012c54 	.word	0x08012c54
 8001b78:	08012c5c 	.word	0x08012c5c
 8001b7c:	08012c64 	.word	0x08012c64
 8001b80:	08012c68 	.word	0x08012c68
 8001b84:	08012c74 	.word	0x08012c74
 8001b88:	08012c80 	.word	0x08012c80
 8001b8c:	08012c8c 	.word	0x08012c8c
 8001b90:	08012c98 	.word	0x08012c98
 8001b94:	08012c9c 	.word	0x08012c9c

08001b98 <SD_LoadPreset>:
#include "stm32f4xx_hal.h"
#include "sd.h"
#include "fatfs.h"
#include "preset.h"

void SD_LoadPreset(Knob *knobs, char* filename) {
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b0a4      	sub	sp, #144	; 0x90
 8001b9c:	af1e      	add	r7, sp, #120	; 0x78
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	466b      	mov	r3, sp
 8001ba4:	461d      	mov	r5, r3
    retSD = f_mount(&SDFatFS, "", 1);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4934      	ldr	r1, [pc, #208]	; (8001c7c <SD_LoadPreset+0xe4>)
 8001baa:	4835      	ldr	r0, [pc, #212]	; (8001c80 <SD_LoadPreset+0xe8>)
 8001bac:	f00b fcee 	bl	800d58c <f_mount>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <SD_LoadPreset+0xec>)
 8001bb6:	701a      	strb	r2, [r3, #0]
    retSD = f_open(&SDFile, filename, FA_READ);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	4832      	ldr	r0, [pc, #200]	; (8001c88 <SD_LoadPreset+0xf0>)
 8001bbe:	f00b fd2b 	bl	800d618 <f_open>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <SD_LoadPreset+0xec>)
 8001bc8:	701a      	strb	r2, [r3, #0]

    char presetBuffer[f_size(&SDFile) + 1];
 8001bca:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <SD_LoadPreset+0xf0>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	1c5c      	adds	r4, r3, #1
 8001bd0:	4623      	mov	r3, r4
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	00cb      	lsls	r3, r1, #3
 8001be6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001bea:	00c2      	lsls	r2, r0, #3
 8001bec:	4620      	mov	r0, r4
 8001bee:	f04f 0100 	mov.w	r1, #0
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	00cb      	lsls	r3, r1, #3
 8001bfc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c00:	00c2      	lsls	r2, r0, #3
 8001c02:	1de3      	adds	r3, r4, #7
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	ebad 0d03 	sub.w	sp, sp, r3
 8001c0c:	ab1e      	add	r3, sp, #120	; 0x78
 8001c0e:	3300      	adds	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
    unsigned int bytesRead;

    retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001c12:	6939      	ldr	r1, [r7, #16]
 8001c14:	1e62      	subs	r2, r4, #1
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	481b      	ldr	r0, [pc, #108]	; (8001c88 <SD_LoadPreset+0xf0>)
 8001c1c:	f00b feba 	bl	800d994 <f_read>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <SD_LoadPreset+0xec>)
 8001c26:	701a      	strb	r2, [r3, #0]
    presetBuffer[bytesRead] = '\0';
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	54d1      	strb	r1, [r2, r3]

    Preset_Load(knobs, presetBuffer);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fe93 	bl	8001960 <Preset_Load>

    retSD = f_close(&SDFile);
 8001c3a:	4813      	ldr	r0, [pc, #76]	; (8001c88 <SD_LoadPreset+0xf0>)
 8001c3c:	f00c f867 	bl	800dd0e <f_close>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <SD_LoadPreset+0xec>)
 8001c46:	701a      	strb	r2, [r3, #0]
    retSD = f_mount(NULL, "", 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	490c      	ldr	r1, [pc, #48]	; (8001c7c <SD_LoadPreset+0xe4>)
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f00b fc9d 	bl	800d58c <f_mount>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <SD_LoadPreset+0xec>)
 8001c58:	701a      	strb	r2, [r3, #0]

    SD_Disable(hsd);
 8001c5a:	4c0c      	ldr	r4, [pc, #48]	; (8001c8c <SD_LoadPreset+0xf4>)
 8001c5c:	4668      	mov	r0, sp
 8001c5e:	f104 0310 	add.w	r3, r4, #16
 8001c62:	2274      	movs	r2, #116	; 0x74
 8001c64:	4619      	mov	r1, r3
 8001c66:	f00d fefd 	bl	800fa64 <memcpy>
 8001c6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c6e:	f000 f80f 	bl	8001c90 <SD_Disable>
 8001c72:	46ad      	mov	sp, r5
}
 8001c74:	bf00      	nop
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7c:	08012ca8 	.word	0x08012ca8
 8001c80:	20002980 	.word	0x20002980
 8001c84:	20002748 	.word	0x20002748
 8001c88:	20002750 	.word	0x20002750
 8001c8c:	200026c0 	.word	0x200026c0

08001c90 <SD_Disable>:
void SD_Enable() {
    __HAL_SD_ENABLE(hsd);
    hsd.State = HAL_SD_STATE_READY;
}

void SD_Disable() {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
    __HAL_SD_DISABLE(hsd);
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SD_Disable+0x1c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
    hsd.State = HAL_SD_STATE_RESET;
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SD_Disable+0x20>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	422580a0 	.word	0x422580a0
 8001cb0:	200026c0 	.word	0x200026c0

08001cb4 <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(uint8_t command) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af04      	add	r7, sp, #16
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	9302      	str	r3, [sp, #8]
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2178      	movs	r1, #120	; 0x78
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <ssd1306_WriteCommand+0x2c>)
 8001cd2:	f002 f9eb 	bl	80040ac <HAL_I2C_Mem_Write>
 8001cd6:	4603      	mov	r3, r0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20002580 	.word	0x20002580

08001ce4 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(Knob *k) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    int status = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(k);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fbf3 	bl	80024dc <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(0xAE);   // Display off
 8001cf6:	20ae      	movs	r0, #174	; 0xae
 8001cf8:	f7ff ffdc 	bl	8001cb4 <ssd1306_WriteCommand>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // Set Memory Addressing Mode
 8001d06:	2020      	movs	r0, #32
 8001d08:	f7ff ffd4 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d16:	2010      	movs	r0, #16
 8001d18:	f7ff ffcc 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001d26:	20b0      	movs	r0, #176	; 0xb0
 8001d28:	f7ff ffc4 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xC8);   // Set COM Output Scan Direction
 8001d36:	20c8      	movs	r0, #200	; 0xc8
 8001d38:	f7ff ffbc 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // Set low column address
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff ffb4 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // Set high column address
 8001d56:	2010      	movs	r0, #16
 8001d58:	f7ff ffac 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);   // Set start line address
 8001d66:	2040      	movs	r0, #64	; 0x40
 8001d68:	f7ff ffa4 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x81);   // set contrast control register
 8001d76:	2081      	movs	r0, #129	; 0x81
 8001d78:	f7ff ff9c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);
 8001d86:	2040      	movs	r0, #64	; 0x40
 8001d88:	f7ff ff94 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA1);   // Set segment re-map 0 to 127
 8001d96:	20a1      	movs	r0, #161	; 0xa1
 8001d98:	f7ff ff8c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA6);   // Set normal display
 8001da6:	20a6      	movs	r0, #166	; 0xa6
 8001da8:	f7ff ff84 	bl	8001cb4 <ssd1306_WriteCommand>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA8);   // Set multiplex ratio(1 to 64)
 8001db6:	20a8      	movs	r0, #168	; 0xa8
 8001db8:	f7ff ff7c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(SSD1306_HEIGHT - 1);
 8001dc6:	203f      	movs	r0, #63	; 0x3f
 8001dc8:	f7ff ff74 	bl	8001cb4 <ssd1306_WriteCommand>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001dd6:	20a4      	movs	r0, #164	; 0xa4
 8001dd8:	f7ff ff6c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD3);   // Set display offset
 8001de6:	20d3      	movs	r0, #211	; 0xd3
 8001de8:	f7ff ff64 	bl	8001cb4 <ssd1306_WriteCommand>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // No offset
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff ff5c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD5);   // Set display clock divide ratio/oscillator frequency
 8001e06:	20d5      	movs	r0, #213	; 0xd5
 8001e08:	f7ff ff54 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xF0);   // Set divide ratio
 8001e16:	20f0      	movs	r0, #240	; 0xf0
 8001e18:	f7ff ff4c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD9);   // Set pre-charge period
 8001e26:	20d9      	movs	r0, #217	; 0xd9
 8001e28:	f7ff ff44 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x22);
 8001e36:	2022      	movs	r0, #34	; 0x22
 8001e38:	f7ff ff3c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xDA);   // Set com pins hardware configuration
 8001e46:	20da      	movs	r0, #218	; 0xda
 8001e48:	f7ff ff34 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(0x12);   // Do not use COM left/right remap
 8001e56:	2012      	movs	r0, #18
 8001e58:	f7ff ff2c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(0xDB);   // Set vcomh
 8001e66:	20db      	movs	r0, #219	; 0xdb
 8001e68:	f7ff ff24 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // 0x20,0.77xVcc
 8001e76:	2020      	movs	r0, #32
 8001e78:	f7ff ff1c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x8D);   // Set DC-DC enable
 8001e86:	208d      	movs	r0, #141	; 0x8d
 8001e88:	f7ff ff14 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x14);   //
 8001e96:	2014      	movs	r0, #20
 8001e98:	f7ff ff0c 	bl	8001cb4 <ssd1306_WriteCommand>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xAF);   // Turn on SSD1306 panel
 8001ea6:	20af      	movs	r0, #175	; 0xaf
 8001ea8:	f7ff ff04 	bl	8001cb4 <ssd1306_WriteCommand>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <ssd1306_Init+0x1dc>
        return 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e012      	b.n	8001ee6 <ssd1306_Init+0x202>
    }

    ssd1306_Fill(Black);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f000 f819 	bl	8001ef8 <ssd1306_Fill>
    ssd1306_AdjustBrightness(0x63);
 8001ec6:	2063      	movs	r0, #99	; 0x63
 8001ec8:	f000 fade 	bl	8002488 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(&hi2c1);
 8001ecc:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <ssd1306_Init+0x20c>)
 8001ece:	f000 f837 	bl	8001f40 <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <ssd1306_Init+0x210>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <ssd1306_Init+0x210>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <ssd1306_Init+0x210>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	715a      	strb	r2, [r3, #5]

    return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20002580 	.word	0x20002580
 8001ef4:	20000758 	.word	0x20000758

08001ef8 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e00d      	b.n	8001f24 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <ssd1306_Fill+0x1a>
 8001f0e:	2100      	movs	r1, #0
 8001f10:	e000      	b.n	8001f14 <ssd1306_Fill+0x1c>
 8001f12:	21ff      	movs	r1, #255	; 0xff
 8001f14:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <ssd1306_Fill+0x44>)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	460a      	mov	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3301      	adds	r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2a:	d3ed      	bcc.n	8001f08 <ssd1306_Fill+0x10>
    }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000358 	.word	0x20000358

08001f40 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen() {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af04      	add	r7, sp, #16
    for (uint8_t i = 0; i < 8; i++) {
 8001f46:	2300      	movs	r3, #0
 8001f48:	71fb      	strb	r3, [r7, #7]
 8001f4a:	e01d      	b.n	8001f88 <ssd1306_UpdateScreen+0x48>
        ssd1306_WriteCommand(0xB0 + i);
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	3b50      	subs	r3, #80	; 0x50
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff feae 	bl	8001cb4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff feab 	bl	8001cb4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001f5e:	2010      	movs	r0, #16
 8001f60:	f7ff fea8 	bl	8001cb4 <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	01db      	lsls	r3, r3, #7
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <ssd1306_UpdateScreen+0x58>)
 8001f6a:	4413      	add	r3, r2
 8001f6c:	2264      	movs	r2, #100	; 0x64
 8001f6e:	9202      	str	r2, [sp, #8]
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	9201      	str	r2, [sp, #4]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2301      	movs	r3, #1
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	2178      	movs	r1, #120	; 0x78
 8001f7c:	4807      	ldr	r0, [pc, #28]	; (8001f9c <ssd1306_UpdateScreen+0x5c>)
 8001f7e:	f002 f895 	bl	80040ac <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	3301      	adds	r3, #1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	2b07      	cmp	r3, #7
 8001f8c:	d9de      	bls.n	8001f4c <ssd1306_UpdateScreen+0xc>
    }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000358 	.word	0x20000358
 8001f9c:	20002580 	.word	0x20002580

08001fa0 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(Knob *k) {
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b08d      	sub	sp, #52	; 0x34
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    ssd1306_Select(k);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fa97 	bl	80024dc <ssd1306_Select>
    ssd1306_Fill(Black);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7ff ffa2 	bl	8001ef8 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001fb4:	4b9d      	ldr	r3, [pc, #628]	; (800222c <ssd1306_WriteKnob+0x28c>)
 8001fb6:	f107 0410 	add.w	r4, r7, #16
 8001fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7e1b      	ldrb	r3, [r3, #24]
 8001fc4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001fc8:	4a99      	ldr	r2, [pc, #612]	; (8002230 <ssd1306_WriteKnob+0x290>)
 8001fca:	2103      	movs	r1, #3
 8001fcc:	f00d fe98 	bl	800fd00 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7e5b      	ldrb	r3, [r3, #25]
 8001fd4:	f107 0020 	add.w	r0, r7, #32
 8001fd8:	4a96      	ldr	r2, [pc, #600]	; (8002234 <ssd1306_WriteKnob+0x294>)
 8001fda:	2104      	movs	r1, #4
 8001fdc:	f00d fe90 	bl	800fd00 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe f905 	bl	80001f4 <strlen>
 8001fea:	4604      	mov	r4, r0
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 faab 	bl	8002548 <update_init_indicator>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f107 0010 	add.w	r0, r7, #16
 8001ff8:	4a8f      	ldr	r2, [pc, #572]	; (8002238 <ssd1306_WriteKnob+0x298>)
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	f00d fe80 	bl	800fd00 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) Knob_Map(k, k->value, k->max_range));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	7ed9      	ldrb	r1, [r3, #27]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f5b      	ldrb	r3, [r3, #29]
 8002008:	461a      	mov	r2, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fff0 	bl	8000ff0 <Knob_Map>
 8002010:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8002012:	f107 000c 	add.w	r0, r7, #12
 8002016:	4a87      	ldr	r2, [pc, #540]	; (8002234 <ssd1306_WriteKnob+0x294>)
 8002018:	2104      	movs	r1, #4
 800201a:	f00d fe71 	bl	800fd00 <sniprintf>

    ssd1306_SetCursor(0, 0);
 800201e:	2100      	movs	r1, #0
 8002020:	2000      	movs	r0, #0
 8002022:	f000 fa19 	bl	8002458 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8002026:	4a85      	ldr	r2, [pc, #532]	; (800223c <ssd1306_WriteKnob+0x29c>)
 8002028:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800202c:	2301      	movs	r3, #1
 800202e:	ca06      	ldmia	r2, {r1, r2}
 8002030:	f000 f9ec 	bl	800240c <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8002034:	4b81      	ldr	r3, [pc, #516]	; (800223c <ssd1306_WriteKnob+0x29c>)
 8002036:	785b      	ldrb	r3, [r3, #1]
 8002038:	3301      	adds	r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4619      	mov	r1, r3
 800203e:	2000      	movs	r0, #0
 8002040:	f000 fa0a 	bl	8002458 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8002044:	4a7d      	ldr	r2, [pc, #500]	; (800223c <ssd1306_WriteKnob+0x29c>)
 8002046:	f107 0020 	add.w	r0, r7, #32
 800204a:	2301      	movs	r3, #1
 800204c:	ca06      	ldmia	r2, {r1, r2}
 800204e:	f000 f9dd 	bl	800240c <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe f8cc 	bl	80001f4 <strlen>
 800205c:	4603      	mov	r3, r0
 800205e:	4a77      	ldr	r2, [pc, #476]	; (800223c <ssd1306_WriteKnob+0x29c>)
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	b2d8      	uxtb	r0, r3
 800206e:	4b73      	ldr	r3, [pc, #460]	; (800223c <ssd1306_WriteKnob+0x29c>)
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	3301      	adds	r3, #1
 8002074:	0fda      	lsrs	r2, r3, #31
 8002076:	4413      	add	r3, r2
 8002078:	105b      	asrs	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4619      	mov	r1, r3
 800207e:	f000 f9eb 	bl	8002458 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8002082:	4a6e      	ldr	r2, [pc, #440]	; (800223c <ssd1306_WriteKnob+0x29c>)
 8002084:	f107 0010 	add.w	r0, r7, #16
 8002088:	2301      	movs	r3, #1
 800208a:	ca06      	ldmia	r2, {r1, r2}
 800208c:	f000 f9be 	bl	800240c <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <ssd1306_WriteKnob+0x29c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f1c3 0320 	rsb	r3, r3, #32
 8002098:	b2db      	uxtb	r3, r3
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b2d8      	uxtb	r0, r3
 80020a2:	4b66      	ldr	r3, [pc, #408]	; (800223c <ssd1306_WriteKnob+0x29c>)
 80020a4:	785b      	ldrb	r3, [r3, #1]
 80020a6:	3301      	adds	r3, #1
 80020a8:	0fda      	lsrs	r2, r3, #31
 80020aa:	4413      	add	r3, r2
 80020ac:	105b      	asrs	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4619      	mov	r1, r3
 80020b2:	f000 f9d1 	bl	8002458 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 80020b6:	4a61      	ldr	r2, [pc, #388]	; (800223c <ssd1306_WriteKnob+0x29c>)
 80020b8:	f107 000c 	add.w	r0, r7, #12
 80020bc:	2301      	movs	r3, #1
 80020be:	ca06      	ldmia	r2, {r1, r2}
 80020c0:	f000 f9a4 	bl	800240c <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80020ca:	e013      	b.n	80020f4 <ssd1306_WriteKnob+0x154>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 80020cc:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <ssd1306_WriteKnob+0x2a0>)
 80020ce:	885b      	ldrh	r3, [r3, #2]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b5a      	ldr	r3, [pc, #360]	; (800223c <ssd1306_WriteKnob+0x29c>)
 80020d4:	785b      	ldrb	r3, [r3, #1]
 80020d6:	4413      	add	r3, r2
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	3304      	adds	r3, #4
 80020dc:	b2d9      	uxtb	r1, r3
 80020de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020e2:	2201      	movs	r2, #1
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f8b1 	bl	800224c <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 80020ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020ee:	3301      	adds	r3, #1
 80020f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80020f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	dae7      	bge.n	80020cc <ssd1306_WriteKnob+0x12c>
    }

    uint8_t len_label = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t y = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 800210e:	4b4b      	ldr	r3, [pc, #300]	; (800223c <ssd1306_WriteKnob+0x29c>)
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	f1c3 0320 	rsb	r3, r3, #32
 8002116:	b2db      	uxtb	r3, r3
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    // Draw main label
    len_label = strlen(k->label);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3302      	adds	r3, #2
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f866 	bl	80001f4 <strlen>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 800212e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002132:	4a44      	ldr	r2, [pc, #272]	; (8002244 <ssd1306_WriteKnob+0x2a4>)
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800213e:	0fda      	lsrs	r2, r3, #31
 8002140:	4413      	add	r3, r2
 8002142:	105b      	asrs	r3, r3, #1
 8002144:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 8002148:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002154:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002158:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800215c:	4b39      	ldr	r3, [pc, #228]	; (8002244 <ssd1306_WriteKnob+0x2a4>)
 800215e:	785b      	ldrb	r3, [r3, #1]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	b2db      	uxtb	r3, r3
 8002164:	ee07 3a90 	vmov	s15, r3
 8002168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002174:	edc7 7a00 	vstr	s15, [r7]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 800217e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002182:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f965 	bl	8002458 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	1c98      	adds	r0, r3, #2
 8002192:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <ssd1306_WriteKnob+0x2a4>)
 8002194:	2301      	movs	r3, #1
 8002196:	ca06      	ldmia	r2, {r1, r2}
 8002198:	f000 f938 	bl	800240c <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7f1b      	ldrb	r3, [r3, #28]
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db02      	blt.n	80021ac <ssd1306_WriteKnob+0x20c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7edb      	ldrb	r3, [r3, #27]
 80021aa:	e000      	b.n	80021ae <ssd1306_WriteKnob+0x20e>
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    len_label = strlen(k->sub_labels[sl_index]);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6959      	ldr	r1, [r3, #20]
 80021b6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f816 	bl	80001f4 <strlen>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 80021ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021d2:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <ssd1306_WriteKnob+0x2a4>)
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80021de:	0fda      	lsrs	r2, r3, #31
 80021e0:	4413      	add	r3, r2
 80021e2:	105b      	asrs	r3, r3, #1
 80021e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <ssd1306_WriteKnob+0x2a4>)
 80021ea:	785b      	ldrb	r3, [r3, #1]
 80021ec:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80021f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 80021f4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80021f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f92a 	bl	8002458 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6959      	ldr	r1, [r3, #20]
 8002208:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800220c:	4613      	mov	r3, r2
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	18c8      	adds	r0, r1, r3
 8002214:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <ssd1306_WriteKnob+0x2a4>)
 8002216:	2301      	movs	r3, #1
 8002218:	ca06      	ldmia	r2, {r1, r2}
 800221a:	f000 f8f7 	bl	800240c <ssd1306_WriteString>

    ssd1306_UpdateScreen(&hi2c1);
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <ssd1306_WriteKnob+0x2a8>)
 8002220:	f7ff fe8e 	bl	8001f40 <ssd1306_UpdateScreen>
}
 8002224:	bf00      	nop
 8002226:	3734      	adds	r7, #52	; 0x34
 8002228:	46bd      	mov	sp, r7
 800222a:	bd90      	pop	{r4, r7, pc}
 800222c:	08012cc0 	.word	0x08012cc0
 8002230:	08012cac 	.word	0x08012cac
 8002234:	08012cb4 	.word	0x08012cb4
 8002238:	08012cbc 	.word	0x08012cbc
 800223c:	20000000 	.word	0x20000000
 8002240:	20000758 	.word	0x20000758
 8002244:	20000008 	.word	0x20000008
 8002248:	20002580 	.word	0x20002580

0800224c <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	460b      	mov	r3, r1
 8002258:	71bb      	strb	r3, [r7, #6]
 800225a:	4613      	mov	r3, r2
 800225c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db48      	blt.n	80022f8 <ssd1306_DrawPixel+0xac>
 8002266:	79bb      	ldrb	r3, [r7, #6]
 8002268:	2b3f      	cmp	r3, #63	; 0x3f
 800226a:	d845      	bhi.n	80022f8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <ssd1306_DrawPixel+0xb8>)
 800226e:	791b      	ldrb	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8002274:	797b      	ldrb	r3, [r7, #5]
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf0c      	ite	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	2300      	movne	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 8002282:	797b      	ldrb	r3, [r7, #5]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d11a      	bne.n	80022be <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002288:	79fa      	ldrb	r2, [r7, #7]
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	b2d8      	uxtb	r0, r3
 8002290:	4603      	mov	r3, r0
 8002292:	01db      	lsls	r3, r3, #7
 8002294:	4413      	add	r3, r2
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <ssd1306_DrawPixel+0xbc>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	b25a      	sxtb	r2, r3
 800229c:	79bb      	ldrb	r3, [r7, #6]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b259      	sxtb	r1, r3
 80022ae:	79fa      	ldrb	r2, [r7, #7]
 80022b0:	4603      	mov	r3, r0
 80022b2:	01db      	lsls	r3, r3, #7
 80022b4:	4413      	add	r3, r2
 80022b6:	b2c9      	uxtb	r1, r1
 80022b8:	4a13      	ldr	r2, [pc, #76]	; (8002308 <ssd1306_DrawPixel+0xbc>)
 80022ba:	54d1      	strb	r1, [r2, r3]
 80022bc:	e01d      	b.n	80022fa <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022be:	79fa      	ldrb	r2, [r7, #7]
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	b2d8      	uxtb	r0, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	01db      	lsls	r3, r3, #7
 80022ca:	4413      	add	r3, r2
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <ssd1306_DrawPixel+0xbc>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	b25a      	sxtb	r2, r3
 80022d2:	79bb      	ldrb	r3, [r7, #6]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	4013      	ands	r3, r2
 80022e6:	b259      	sxtb	r1, r3
 80022e8:	79fa      	ldrb	r2, [r7, #7]
 80022ea:	4603      	mov	r3, r0
 80022ec:	01db      	lsls	r3, r3, #7
 80022ee:	4413      	add	r3, r2
 80022f0:	b2c9      	uxtb	r1, r1
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <ssd1306_DrawPixel+0xbc>)
 80022f4:	54d1      	strb	r1, [r2, r3]
 80022f6:	e000      	b.n	80022fa <ssd1306_DrawPixel+0xae>
        return;
 80022f8:	bf00      	nop
    }
}
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	20000758 	.word	0x20000758
 8002308:	20000358 	.word	0x20000358

0800230c <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	4604      	mov	r4, r0
 8002314:	1d38      	adds	r0, r7, #4
 8002316:	e880 0006 	stmia.w	r0, {r1, r2}
 800231a:	461a      	mov	r2, r3
 800231c:	4623      	mov	r3, r4
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	4613      	mov	r3, r2
 8002322:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <ssd1306_WriteChar+0xfc>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	793b      	ldrb	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	2b7f      	cmp	r3, #127	; 0x7f
 8002330:	dc06      	bgt.n	8002340 <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 8002332:	4b35      	ldr	r3, [pc, #212]	; (8002408 <ssd1306_WriteChar+0xfc>)
 8002334:	885b      	ldrh	r3, [r3, #2]
 8002336:	461a      	mov	r2, r3
 8002338:	797b      	ldrb	r3, [r7, #5]
 800233a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800233c:	2b3f      	cmp	r3, #63	; 0x3f
 800233e:	dd01      	ble.n	8002344 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8002340:	2300      	movs	r3, #0
 8002342:	e05d      	b.n	8002400 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	e04c      	b.n	80023e4 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	3b20      	subs	r3, #32
 8002350:	7979      	ldrb	r1, [r7, #5]
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4619      	mov	r1, r3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	440b      	add	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	e034      	b.n	80023d4 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d012      	beq.n	80023a0 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <ssd1306_WriteChar+0xfc>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	4413      	add	r3, r2
 8002386:	b2d8      	uxtb	r0, r3
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <ssd1306_WriteChar+0xfc>)
 800238a:	885b      	ldrh	r3, [r3, #2]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4413      	add	r3, r2
 8002394:	b2db      	uxtb	r3, r3
 8002396:	7bba      	ldrb	r2, [r7, #14]
 8002398:	4619      	mov	r1, r3
 800239a:	f7ff ff57 	bl	800224c <ssd1306_DrawPixel>
 800239e:	e016      	b.n	80023ce <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <ssd1306_WriteChar+0xfc>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	b2d8      	uxtb	r0, r3
 80023ae:	4b16      	ldr	r3, [pc, #88]	; (8002408 <ssd1306_WriteChar+0xfc>)
 80023b0:	885b      	ldrh	r3, [r3, #2]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	b2d9      	uxtb	r1, r3
 80023bc:	7bbb      	ldrb	r3, [r7, #14]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	f7ff ff3f 	bl	800224c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	793b      	ldrb	r3, [r7, #4]
 80023d6:	461a      	mov	r2, r3
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	4293      	cmp	r3, r2
 80023dc:	d3c5      	bcc.n	800236a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	797b      	ldrb	r3, [r7, #5]
 80023e6:	461a      	mov	r2, r3
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d3ad      	bcc.n	800234a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <ssd1306_WriteChar+0xfc>)
 80023f0:	881a      	ldrh	r2, [r3, #0]
 80023f2:	793b      	ldrb	r3, [r7, #4]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b03      	ldr	r3, [pc, #12]	; (8002408 <ssd1306_WriteChar+0xfc>)
 80023fc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3724      	adds	r7, #36	; 0x24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	20000758 	.word	0x20000758

0800240c <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	1d38      	adds	r0, r7, #4
 8002416:	e880 0006 	stmia.w	r0, {r1, r2}
 800241a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800241c:	e012      	b.n	8002444 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	7818      	ldrb	r0, [r3, #0]
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	1d3a      	adds	r2, r7, #4
 8002426:	ca06      	ldmia	r2, {r1, r2}
 8002428:	f7ff ff70 	bl	800230c <ssd1306_WriteChar>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d002      	beq.n	800243e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	e008      	b.n	8002450 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3301      	adds	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e8      	bne.n	800241e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	781b      	ldrb	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	460a      	mov	r2, r1
 8002462:	71fb      	strb	r3, [r7, #7]
 8002464:	4613      	mov	r3, r2
 8002466:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	b29a      	uxth	r2, r3
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <ssd1306_SetCursor+0x2c>)
 800246e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002470:	79bb      	ldrb	r3, [r7, #6]
 8002472:	b29a      	uxth	r2, r3
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <ssd1306_SetCursor+0x2c>)
 8002476:	805a      	strh	r2, [r3, #2]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	20000758 	.word	0x20000758

08002488 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(uint8_t brightness) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af04      	add	r7, sp, #16
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
    uint8_t contrast_cmd = 0x81;
 8002492:	2381      	movs	r3, #129	; 0x81
 8002494:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 800249a:	230a      	movs	r3, #10
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	2301      	movs	r3, #1
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	f107 030f 	add.w	r3, r7, #15
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2301      	movs	r3, #1
 80024aa:	2200      	movs	r2, #0
 80024ac:	2178      	movs	r1, #120	; 0x78
 80024ae:	480a      	ldr	r0, [pc, #40]	; (80024d8 <ssd1306_AdjustBrightness+0x50>)
 80024b0:	f001 fdfc 	bl	80040ac <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 80024b4:	230a      	movs	r3, #10
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	2301      	movs	r3, #1
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	f107 030e 	add.w	r3, r7, #14
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2301      	movs	r3, #1
 80024c4:	2200      	movs	r2, #0
 80024c6:	2178      	movs	r1, #120	; 0x78
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <ssd1306_AdjustBrightness+0x50>)
 80024ca:	f001 fdef 	bl	80040ac <HAL_I2C_Mem_Write>
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20002580 	.word	0x20002580

080024dc <ssd1306_Select>:

// Select a display
void ssd1306_Select(Knob *k) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
    i2c_Select(I2C_MUX_MASTER_ADDR, k->row);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	20e2      	movs	r0, #226	; 0xe2
 80024ec:	f000 f80a 	bl	8002504 <i2c_Select>
    i2c_Select(I2C_MUX_SLAVE_ADDR, k->col);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	4619      	mov	r1, r3
 80024f6:	20e0      	movs	r0, #224	; 0xe0
 80024f8:	f000 f804 	bl	8002504 <i2c_Select>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(uint8_t mux_addr, uint8_t i) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af02      	add	r7, sp, #8
 800250a:	4603      	mov	r3, r0
 800250c:	460a      	mov	r2, r1
 800250e:	71fb      	strb	r3, [r7, #7]
 8002510:	4613      	mov	r3, r2
 8002512:	71bb      	strb	r3, [r7, #6]
    if (i > 7) return;
 8002514:	79bb      	ldrb	r3, [r7, #6]
 8002516:	2b07      	cmp	r3, #7
 8002518:	d810      	bhi.n	800253c <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 800251a:	79bb      	ldrb	r3, [r7, #6]
 800251c:	2201      	movs	r2, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	b299      	uxth	r1, r3
 800252a:	f107 020c 	add.w	r2, r7, #12
 800252e:	2364      	movs	r3, #100	; 0x64
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2301      	movs	r3, #1
 8002534:	4803      	ldr	r0, [pc, #12]	; (8002544 <i2c_Select+0x40>)
 8002536:	f001 fcbb 	bl	8003eb0 <HAL_I2C_Master_Transmit>
 800253a:	e000      	b.n	800253e <i2c_Select+0x3a>
    if (i > 7) return;
 800253c:	bf00      	nop
}
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20002580 	.word	0x20002580

08002548 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
    int8_t init_diff = Knob_Map(k, k->init_value, MIDI_MAX) - Knob_Map(k, k->value, MIDI_MAX);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e9b      	ldrb	r3, [r3, #26]
 8002554:	227f      	movs	r2, #127	; 0x7f
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe fd49 	bl	8000ff0 <Knob_Map>
 800255e:	4603      	mov	r3, r0
 8002560:	461c      	mov	r4, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7edb      	ldrb	r3, [r3, #27]
 8002566:	227f      	movs	r2, #127	; 0x7f
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fd40 	bl	8000ff0 <Knob_Map>
 8002570:	4603      	mov	r3, r0
 8002572:	1ae3      	subs	r3, r4, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 8002578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	bfb8      	it	lt
 8002580:	425b      	neglt	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002678 <update_init_indicator+0x130>
 8002590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002594:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800267c <update_init_indicator+0x134>
 8002598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a0:	edc7 7a00 	vstr	s15, [r7]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 80025a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <update_init_indicator+0x6c>
 80025b0:	4b33      	ldr	r3, [pc, #204]	; (8002680 <update_init_indicator+0x138>)
 80025b2:	e05c      	b.n	800266e <update_init_indicator+0x126>

    if (init_pct < 15) {
 80025b4:	7bbb      	ldrb	r3, [r7, #14]
 80025b6:	2b0e      	cmp	r3, #14
 80025b8:	d807      	bhi.n	80025ca <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	dd01      	ble.n	80025c6 <update_init_indicator+0x7e>
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <update_init_indicator+0x13c>)
 80025c4:	e053      	b.n	800266e <update_init_indicator+0x126>
        else return "        <      ";
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <update_init_indicator+0x140>)
 80025c8:	e051      	b.n	800266e <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	2b0e      	cmp	r3, #14
 80025ce:	d90a      	bls.n	80025e6 <update_init_indicator+0x9e>
 80025d0:	7bbb      	ldrb	r3, [r7, #14]
 80025d2:	2b1d      	cmp	r3, #29
 80025d4:	d807      	bhi.n	80025e6 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	dd01      	ble.n	80025e2 <update_init_indicator+0x9a>
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <update_init_indicator+0x144>)
 80025e0:	e045      	b.n	800266e <update_init_indicator+0x126>
        else return "        <<     ";
 80025e2:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <update_init_indicator+0x148>)
 80025e4:	e043      	b.n	800266e <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 80025e6:	7bbb      	ldrb	r3, [r7, #14]
 80025e8:	2b1d      	cmp	r3, #29
 80025ea:	d90a      	bls.n	8002602 <update_init_indicator+0xba>
 80025ec:	7bbb      	ldrb	r3, [r7, #14]
 80025ee:	2b2c      	cmp	r3, #44	; 0x2c
 80025f0:	d807      	bhi.n	8002602 <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dd01      	ble.n	80025fe <update_init_indicator+0xb6>
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <update_init_indicator+0x14c>)
 80025fc:	e037      	b.n	800266e <update_init_indicator+0x126>
        else return "        <<<    ";
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <update_init_indicator+0x150>)
 8002600:	e035      	b.n	800266e <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 8002602:	7bbb      	ldrb	r3, [r7, #14]
 8002604:	2b2c      	cmp	r3, #44	; 0x2c
 8002606:	d90a      	bls.n	800261e <update_init_indicator+0xd6>
 8002608:	7bbb      	ldrb	r3, [r7, #14]
 800260a:	2b3c      	cmp	r3, #60	; 0x3c
 800260c:	d807      	bhi.n	800261e <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	dd01      	ble.n	800261a <update_init_indicator+0xd2>
 8002616:	4b21      	ldr	r3, [pc, #132]	; (800269c <update_init_indicator+0x154>)
 8002618:	e029      	b.n	800266e <update_init_indicator+0x126>
        else return "        <<<<   ";
 800261a:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <update_init_indicator+0x158>)
 800261c:	e027      	b.n	800266e <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 800261e:	7bbb      	ldrb	r3, [r7, #14]
 8002620:	2b3c      	cmp	r3, #60	; 0x3c
 8002622:	d90a      	bls.n	800263a <update_init_indicator+0xf2>
 8002624:	7bbb      	ldrb	r3, [r7, #14]
 8002626:	2b4c      	cmp	r3, #76	; 0x4c
 8002628:	d807      	bhi.n	800263a <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 800262a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	dd01      	ble.n	8002636 <update_init_indicator+0xee>
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <update_init_indicator+0x15c>)
 8002634:	e01b      	b.n	800266e <update_init_indicator+0x126>
        else return "        <<<<<  ";
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <update_init_indicator+0x160>)
 8002638:	e019      	b.n	800266e <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 800263a:	7bbb      	ldrb	r3, [r7, #14]
 800263c:	2b4c      	cmp	r3, #76	; 0x4c
 800263e:	d90a      	bls.n	8002656 <update_init_indicator+0x10e>
 8002640:	7bbb      	ldrb	r3, [r7, #14]
 8002642:	2b5c      	cmp	r3, #92	; 0x5c
 8002644:	d807      	bhi.n	8002656 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	dd01      	ble.n	8002652 <update_init_indicator+0x10a>
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <update_init_indicator+0x164>)
 8002650:	e00d      	b.n	800266e <update_init_indicator+0x126>
        else return "        <<<<<< ";
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <update_init_indicator+0x168>)
 8002654:	e00b      	b.n	800266e <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002656:	7bbb      	ldrb	r3, [r7, #14]
 8002658:	2b5c      	cmp	r3, #92	; 0x5c
 800265a:	d907      	bls.n	800266c <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 800265c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002660:	2b00      	cmp	r3, #0
 8002662:	dd01      	ble.n	8002668 <update_init_indicator+0x120>
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <update_init_indicator+0x16c>)
 8002666:	e002      	b.n	800266e <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <update_init_indicator+0x170>)
 800266a:	e000      	b.n	800266e <update_init_indicator+0x126>
    } else {
        return " ";
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <update_init_indicator+0x174>)
    }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	bf00      	nop
 8002678:	42fe0000 	.word	0x42fe0000
 800267c:	42c80000 	.word	0x42c80000
 8002680:	08012cc0 	.word	0x08012cc0
 8002684:	08012cd0 	.word	0x08012cd0
 8002688:	08012ce0 	.word	0x08012ce0
 800268c:	08012cf0 	.word	0x08012cf0
 8002690:	08012d00 	.word	0x08012d00
 8002694:	08012d10 	.word	0x08012d10
 8002698:	08012d20 	.word	0x08012d20
 800269c:	08012d30 	.word	0x08012d30
 80026a0:	08012d40 	.word	0x08012d40
 80026a4:	08012d50 	.word	0x08012d50
 80026a8:	08012d60 	.word	0x08012d60
 80026ac:	08012d70 	.word	0x08012d70
 80026b0:	08012d80 	.word	0x08012d80
 80026b4:	08012d90 	.word	0x08012d90
 80026b8:	08012da0 	.word	0x08012da0
 80026bc:	08012db0 	.word	0x08012db0

080026c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_MspInit+0x4c>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_MspInit+0x4c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_MspInit+0x4c>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_MspInit+0x4c>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_ADC_MspInit+0x7c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d127      	bne.n	8002782 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a15      	ldr	r2, [pc, #84]	; (8002790 <HAL_ADC_MspInit+0x80>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800276a:	230f      	movs	r3, #15
 800276c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276e:	2303      	movs	r3, #3
 8002770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_ADC_MspInit+0x84>)
 800277e:	f001 f883 	bl	8003888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002782:	bf00      	nop
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40012000 	.word	0x40012000
 8002790:	40023800 	.word	0x40023800
 8002794:	40020000 	.word	0x40020000

08002798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_I2C_MspInit+0x84>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d12b      	bne.n	8002812 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_I2C_MspInit+0x88>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a17      	ldr	r2, [pc, #92]	; (8002820 <HAL_I2C_MspInit+0x88>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_I2C_MspInit+0x88>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027d6:	23c0      	movs	r3, #192	; 0xc0
 80027d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027da:	2312      	movs	r3, #18
 80027dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027de:	2301      	movs	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e6:	2304      	movs	r3, #4
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	480c      	ldr	r0, [pc, #48]	; (8002824 <HAL_I2C_MspInit+0x8c>)
 80027f2:	f001 f849 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_I2C_MspInit+0x88>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_I2C_MspInit+0x88>)
 8002800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_I2C_MspInit+0x88>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002812:	bf00      	nop
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40005400 	.word	0x40005400
 8002820:	40023800 	.word	0x40023800
 8002824:	40020400 	.word	0x40020400

08002828 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a05      	ldr	r2, [pc, #20]	; (800284c <HAL_RTC_MspInit+0x24>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d102      	bne.n	8002840 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RTC_MspInit+0x28>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40002800 	.word	0x40002800
 8002850:	42470e3c 	.word	0x42470e3c

08002854 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a29      	ldr	r2, [pc, #164]	; (8002918 <HAL_SD_MspInit+0xc4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d14b      	bne.n	800290e <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_SD_MspInit+0xc8>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_SD_MspInit+0xc8>)
 8002880:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_SD_MspInit+0xc8>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_SD_MspInit+0xc8>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_SD_MspInit+0xc8>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_SD_MspInit+0xc8>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_SD_MspInit+0xc8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a19      	ldr	r2, [pc, #100]	; (800291c <HAL_SD_MspInit+0xc8>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <HAL_SD_MspInit+0xc8>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80028ca:	f44f 7350 	mov.w	r3, #832	; 0x340
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80028dc:	230c      	movs	r3, #12
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	480e      	ldr	r0, [pc, #56]	; (8002920 <HAL_SD_MspInit+0xcc>)
 80028e8:	f000 ffce 	bl	8003888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 80028ec:	f248 0330 	movw	r3, #32816	; 0x8030
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80028fe:	230c      	movs	r3, #12
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4806      	ldr	r0, [pc, #24]	; (8002924 <HAL_SD_MspInit+0xd0>)
 800290a:	f000 ffbd 	bl	8003888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800290e:	bf00      	nop
 8002910:	3728      	adds	r7, #40	; 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40023800 	.word	0x40023800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020400 	.word	0x40020400

08002928 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 800292c:	e7fe      	b.n	800292c <NMI_Handler+0x4>

0800292e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8002932:	e7fe      	b.n	8002932 <HardFault_Handler+0x4>

08002934 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8002938:	e7fe      	b.n	8002938 <MemManage_Handler+0x4>

0800293a <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 800293e:	e7fe      	b.n	800293e <BusFault_Handler+0x4>

08002940 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8002944:	e7fe      	b.n	8002944 <UsageFault_Handler+0x4>

08002946 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	e046      	b.n	8002a0a <SysTick_Handler+0x9a>
        GPIO_TypeDef *t = (i == BUTTON_MENU) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d101      	bne.n	8002986 <SysTick_Handler+0x16>
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <SysTick_Handler+0xac>)
 8002984:	e000      	b.n	8002988 <SysTick_Handler+0x18>
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <SysTick_Handler+0xb0>)
 8002988:	60bb      	str	r3, [r7, #8]
        uint8_t reading = HAL_GPIO_ReadPin(t, btnPins[i]);
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <SysTick_Handler+0xb4>)
 800298e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002992:	4619      	mov	r1, r3
 8002994:	68b8      	ldr	r0, [r7, #8]
 8002996:	f001 f8fb 	bl	8003b90 <HAL_GPIO_ReadPin>
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]

        if (reading == btnStatesLast[i] && reading != btnStates[i]) {
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <SysTick_Handler+0xb8>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	79fa      	ldrb	r2, [r7, #7]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d128      	bne.n	80029fc <SysTick_Handler+0x8c>
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <SysTick_Handler+0xbc>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	79fa      	ldrb	r2, [r7, #7]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d022      	beq.n	80029fc <SysTick_Handler+0x8c>
            btnStates[i] = reading;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	491c      	ldr	r1, [pc, #112]	; (8002a2c <SysTick_Handler+0xbc>)
 80029ba:	79fa      	ldrb	r2, [r7, #7]
 80029bc:	54ca      	strb	r2, [r1, r3]

            if (btnStates[i] == GPIO_PIN_RESET) {
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <SysTick_Handler+0xbc>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d119      	bne.n	80029fc <SysTick_Handler+0x8c>
                if (i == BUTTON_MENU) {
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d10e      	bne.n	80029ec <SysTick_Handler+0x7c>
                    isMenuActive = !isMenuActive;
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <SysTick_Handler+0xc0>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf14      	ite	ne
 80029d6:	2301      	movne	r3, #1
 80029d8:	2300      	moveq	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <SysTick_Handler+0xc0>)
 80029ea:	701a      	strb	r2, [r3, #0]
                }
                HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <SysTick_Handler+0xc4>)
 80029f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029f4:	4619      	mov	r1, r3
 80029f6:	4810      	ldr	r0, [pc, #64]	; (8002a38 <SysTick_Handler+0xc8>)
 80029f8:	f001 f8fb 	bl	8003bf2 <HAL_GPIO_TogglePin>
            }
        }

        btnStatesLast[i] = reading;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	490a      	ldr	r1, [pc, #40]	; (8002a28 <SysTick_Handler+0xb8>)
 8002a00:	79fa      	ldrb	r2, [r7, #7]
 8002a02:	54ca      	strb	r2, [r1, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	3301      	adds	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d9b5      	bls.n	800297c <SysTick_Handler+0xc>
    }
    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8002a10:	f000 f9f2 	bl	8002df8 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	20000030 	.word	0x20000030
 8002a28:	20000028 	.word	0x20000028
 8002a2c:	20000020 	.word	0x20000020
 8002a30:	2000261c 	.word	0x2000261c
 8002a34:	2000003c 	.word	0x2000003c
 8002a38:	40020400 	.word	0x40020400

08002a3c <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <OTG_FS_IRQHandler+0x10>)
 8002a42:	f002 f81c 	bl	8004a7e <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20003084 	.word	0x20003084

08002a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
	return 1;
 8002a54:	2301      	movs	r3, #1
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <_kill>:

int _kill(int pid, int sig)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a6a:	f00c ffc1 	bl	800f9f0 <__errno>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2216      	movs	r2, #22
 8002a72:	601a      	str	r2, [r3, #0]
	return -1;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_exit>:

void _exit (int status)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ffe7 	bl	8002a60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a92:	e7fe      	b.n	8002a92 <_exit+0x12>

08002a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e00a      	b.n	8002abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aa6:	f3af 8000 	nop.w
 8002aaa:	4601      	mov	r1, r0
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	60ba      	str	r2, [r7, #8]
 8002ab2:	b2ca      	uxtb	r2, r1
 8002ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	dbf0      	blt.n	8002aa6 <_read+0x12>
	}

return len;
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e009      	b.n	8002af4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	60ba      	str	r2, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3301      	adds	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	dbf1      	blt.n	8002ae0 <_write+0x12>
	}
	return len;
 8002afc:	687b      	ldr	r3, [r7, #4]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_close>:

int _close(int file)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <_isatty>:

int _isatty(int file)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
	return 1;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <_sbrk+0x5c>)
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <_sbrk+0x60>)
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <_sbrk+0x64>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <_sbrk+0x64>)
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <_sbrk+0x68>)
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <_sbrk+0x64>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d207      	bcs.n	8002bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba0:	f00c ff26 	bl	800f9f0 <__errno>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	e009      	b.n	8002bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <_sbrk+0x64>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <_sbrk+0x64>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <_sbrk+0x64>)
 8002bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20020000 	.word	0x20020000
 8002bd0:	00000400 	.word	0x00000400
 8002bd4:	20000760 	.word	0x20000760
 8002bd8:	200034a0 	.word	0x200034a0

08002bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <SystemInit+0x20>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <SystemInit+0x20>)
 8002be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	2302      	movs	r3, #2
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	2302      	movs	r3, #2
 8002c18:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <SystemCoreClockUpdate+0xec>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d011      	beq.n	8002c4e <SystemCoreClockUpdate+0x4e>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d844      	bhi.n	8002cba <SystemCoreClockUpdate+0xba>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <SystemCoreClockUpdate+0x3e>
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d004      	beq.n	8002c46 <SystemCoreClockUpdate+0x46>
 8002c3c:	e03d      	b.n	8002cba <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <SystemCoreClockUpdate+0xf0>)
 8002c40:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <SystemCoreClockUpdate+0xf4>)
 8002c42:	601a      	str	r2, [r3, #0]
      break;
 8002c44:	e03d      	b.n	8002cc2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002c46:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <SystemCoreClockUpdate+0xf0>)
 8002c48:	4a2b      	ldr	r2, [pc, #172]	; (8002cf8 <SystemCoreClockUpdate+0xf8>)
 8002c4a:	601a      	str	r2, [r3, #0]
      break;
 8002c4c:	e039      	b.n	8002cc2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002c4e:	4b27      	ldr	r3, [pc, #156]	; (8002cec <SystemCoreClockUpdate+0xec>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	0d9b      	lsrs	r3, r3, #22
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <SystemCoreClockUpdate+0xec>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c62:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002c6a:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <SystemCoreClockUpdate+0xf8>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <SystemCoreClockUpdate+0xec>)
 8002c74:	6852      	ldr	r2, [r2, #4]
 8002c76:	0992      	lsrs	r2, r2, #6
 8002c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e00b      	b.n	8002c9c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002c84:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <SystemCoreClockUpdate+0xf4>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <SystemCoreClockUpdate+0xec>)
 8002c8e:	6852      	ldr	r2, [r2, #4]
 8002c90:	0992      	lsrs	r2, r2, #6
 8002c92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <SystemCoreClockUpdate+0xec>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <SystemCoreClockUpdate+0xf0>)
 8002cb6:	6013      	str	r3, [r2, #0]
      break;
 8002cb8:	e003      	b.n	8002cc2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <SystemCoreClockUpdate+0xf0>)
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <SystemCoreClockUpdate+0xf4>)
 8002cbe:	601a      	str	r2, [r3, #0]
      break;
 8002cc0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <SystemCoreClockUpdate+0xec>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <SystemCoreClockUpdate+0xfc>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <SystemCoreClockUpdate+0xf0>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cdc:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <SystemCoreClockUpdate+0xf0>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	20000048 	.word	0x20000048
 8002cf4:	00f42400 	.word	0x00f42400
 8002cf8:	017d7840 	.word	0x017d7840
 8002cfc:	08014164 	.word	0x08014164

08002d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d06:	490e      	ldr	r1, [pc, #56]	; (8002d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d08:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d0c:	e002      	b.n	8002d14 <LoopCopyDataInit>

08002d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d12:	3304      	adds	r3, #4

08002d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d18:	d3f9      	bcc.n	8002d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d1c:	4c0b      	ldr	r4, [pc, #44]	; (8002d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d20:	e001      	b.n	8002d26 <LoopFillZerobss>

08002d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d24:	3204      	adds	r2, #4

08002d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d2a:	f7ff ff57 	bl	8002bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2e:	f00c fe65 	bl	800f9fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d32:	f7fe f9c1 	bl	80010b8 <main>
  bx  lr    
 8002d36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d40:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8002d44:	08014a1c 	.word	0x08014a1c
  ldr r2, =_sbss
 8002d48:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8002d4c:	2000349c 	.word	0x2000349c

08002d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d50:	e7fe      	b.n	8002d50 <ADC_IRQHandler>
	...

08002d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_Init+0x40>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <HAL_Init+0x40>)
 8002d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_Init+0x40>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <HAL_Init+0x40>)
 8002d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_Init+0x40>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <HAL_Init+0x40>)
 8002d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	f000 fd41 	bl	8003804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f000 f808 	bl	8002d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d88:	f7ff fc9a 	bl	80026c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023c00 	.word	0x40023c00

08002d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_InitTick+0x54>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_InitTick+0x58>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd59 	bl	800386e <HAL_SYSTICK_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00e      	b.n	8002de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d80a      	bhi.n	8002de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f000 fd21 	bl	800381a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd8:	4a06      	ldr	r2, [pc, #24]	; (8002df4 <HAL_InitTick+0x5c>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20000048 	.word	0x20000048
 8002df0:	20000050 	.word	0x20000050
 8002df4:	2000004c 	.word	0x2000004c

08002df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_IncTick+0x20>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_IncTick+0x24>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4413      	add	r3, r2
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_IncTick+0x24>)
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000050 	.word	0x20000050
 8002e1c:	20002744 	.word	0x20002744

08002e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return uwTick;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_GetTick+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20002744 	.word	0x20002744

08002e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e40:	f7ff ffee 	bl	8002e20 <HAL_GetTick>
 8002e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d005      	beq.n	8002e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_Delay+0x44>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e5e:	bf00      	nop
 8002e60:	f7ff ffde 	bl	8002e20 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d8f7      	bhi.n	8002e60 <HAL_Delay+0x28>
  {
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000050 	.word	0x20000050

08002e80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e033      	b.n	8002efe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff fc36 	bl	8002710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d118      	bne.n	8002ef0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ec6:	f023 0302 	bic.w	r3, r3, #2
 8002eca:	f043 0202 	orr.w	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 faca 	bl	800346c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
 8002eee:	e001      	b.n	8002ef4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_Start+0x1a>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e097      	b.n	8003052 <HAL_ADC_Start+0x14a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d018      	beq.n	8002f6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f48:	4b45      	ldr	r3, [pc, #276]	; (8003060 <HAL_ADC_Start+0x158>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a45      	ldr	r2, [pc, #276]	; (8003064 <HAL_ADC_Start+0x15c>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0c9a      	lsrs	r2, r3, #18
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f5c:	e002      	b.n	8002f64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f9      	bne.n	8002f5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d15f      	bne.n	8003038 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb6:	d106      	bne.n	8002fc6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f023 0206 	bic.w	r2, r3, #6
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_ADC_Start+0x160>)
 8002fd6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fe0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d129      	bne.n	8003050 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	e020      	b.n	8003050 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <HAL_ADC_Start+0x164>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d11b      	bne.n	8003050 <HAL_ADC_Start+0x148>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d114      	bne.n	8003050 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	e00b      	b.n	8003050 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f043 0210 	orr.w	r2, r3, #16
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000048 	.word	0x20000048
 8003064:	431bde83 	.word	0x431bde83
 8003068:	40012300 	.word	0x40012300
 800306c:	40012000 	.word	0x40012000

08003070 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_ADC_Stop+0x16>
 8003082:	2302      	movs	r3, #2
 8003084:	e021      	b.n	80030ca <HAL_ADC_Stop+0x5a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	f043 0201 	orr.w	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	d113      	bne.n	800311c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003102:	d10b      	bne.n	800311c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e063      	b.n	80031e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800311c:	f7ff fe80 	bl	8002e20 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003122:	e021      	b.n	8003168 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d01d      	beq.n	8003168 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_ADC_PollForConversion+0x6c>
 8003132:	f7ff fe75 	bl	8002e20 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d212      	bcs.n	8003168 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b02      	cmp	r3, #2
 800314e:	d00b      	beq.n	8003168 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e03d      	b.n	80031e4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b02      	cmp	r3, #2
 8003174:	d1d6      	bne.n	8003124 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0212 	mvn.w	r2, #18
 800317e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d123      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d11f      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d111      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e113      	b.n	800344c <HAL_ADC_ConfigChannel+0x244>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b09      	cmp	r3, #9
 8003232:	d925      	bls.n	8003280 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68d9      	ldr	r1, [r3, #12]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	3b1e      	subs	r3, #30
 800324a:	2207      	movs	r2, #7
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43da      	mvns	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	400a      	ands	r2, r1
 8003258:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	4603      	mov	r3, r0
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4403      	add	r3, r0
 8003272:	3b1e      	subs	r3, #30
 8003274:	409a      	lsls	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e022      	b.n	80032c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6919      	ldr	r1, [r3, #16]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	2207      	movs	r2, #7
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	400a      	ands	r2, r1
 80032a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6919      	ldr	r1, [r3, #16]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4618      	mov	r0, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4403      	add	r3, r0
 80032bc:	409a      	lsls	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d824      	bhi.n	8003318 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	3b05      	subs	r3, #5
 80032e0:	221f      	movs	r2, #31
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	400a      	ands	r2, r1
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4618      	mov	r0, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	3b05      	subs	r3, #5
 800330a:	fa00 f203 	lsl.w	r2, r0, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	635a      	str	r2, [r3, #52]	; 0x34
 8003316:	e04c      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d824      	bhi.n	800336a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	3b23      	subs	r3, #35	; 0x23
 8003332:	221f      	movs	r2, #31
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43da      	mvns	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	400a      	ands	r2, r1
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4618      	mov	r0, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	3b23      	subs	r3, #35	; 0x23
 800335c:	fa00 f203 	lsl.w	r2, r0, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
 8003368:	e023      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	3b41      	subs	r3, #65	; 0x41
 800337c:	221f      	movs	r2, #31
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	400a      	ands	r2, r1
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	4618      	mov	r0, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	3b41      	subs	r3, #65	; 0x41
 80033a6:	fa00 f203 	lsl.w	r2, r0, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033b2:	4b29      	ldr	r3, [pc, #164]	; (8003458 <HAL_ADC_ConfigChannel+0x250>)
 80033b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a28      	ldr	r2, [pc, #160]	; (800345c <HAL_ADC_ConfigChannel+0x254>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10f      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1d8>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b12      	cmp	r3, #18
 80033c6:	d10b      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_ADC_ConfigChannel+0x254>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d12b      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x23a>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <HAL_ADC_ConfigChannel+0x258>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x1f4>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b11      	cmp	r3, #17
 80033fa:	d122      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_ADC_ConfigChannel+0x258>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d111      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_ADC_ConfigChannel+0x25c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_ADC_ConfigChannel+0x260>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	0c9a      	lsrs	r2, r3, #18
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003434:	e002      	b.n	800343c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3b01      	subs	r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f9      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40012300 	.word	0x40012300
 800345c:	40012000 	.word	0x40012000
 8003460:	10000012 	.word	0x10000012
 8003464:	20000048 	.word	0x20000048
 8003468:	431bde83 	.word	0x431bde83

0800346c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003474:	4b79      	ldr	r3, [pc, #484]	; (800365c <ADC_Init+0x1f0>)
 8003476:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	431a      	orrs	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	021a      	lsls	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	4a58      	ldr	r2, [pc, #352]	; (8003660 <ADC_Init+0x1f4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003512:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	e00f      	b.n	800356a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003568:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0202 	bic.w	r2, r2, #2
 8003578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7e1b      	ldrb	r3, [r3, #24]
 8003584:	005a      	lsls	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	3b01      	subs	r3, #1
 80035c4:	035a      	lsls	r2, r3, #13
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	e007      	b.n	80035e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	051a      	lsls	r2, r3, #20
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003622:	025a      	lsls	r2, r3, #9
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	029a      	lsls	r2, r3, #10
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40012300 	.word	0x40012300
 8003660:	0f000001 	.word	0x0f000001

08003664 <__NVIC_SetPriorityGrouping>:
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800368c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	60d3      	str	r3, [r2, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_GetPriorityGrouping>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <__NVIC_GetPriorityGrouping+0x18>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	f003 0307 	and.w	r3, r3, #7
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_EnableIRQ>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	db0b      	blt.n	80036f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	f003 021f 	and.w	r2, r3, #31
 80036e0:	4907      	ldr	r1, [pc, #28]	; (8003700 <__NVIC_EnableIRQ+0x38>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2001      	movs	r0, #1
 80036ea:	fa00 f202 	lsl.w	r2, r0, r2
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e100 	.word	0xe000e100

08003704 <__NVIC_SetPriority>:
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db0a      	blt.n	800372e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	490c      	ldr	r1, [pc, #48]	; (8003750 <__NVIC_SetPriority+0x4c>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	440b      	add	r3, r1
 8003728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800372c:	e00a      	b.n	8003744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <__NVIC_SetPriority+0x50>)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	3b04      	subs	r3, #4
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	440b      	add	r3, r1
 8003742:	761a      	strb	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000e100 	.word	0xe000e100
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <NVIC_EncodePriority>:
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f1c3 0307 	rsb	r3, r3, #7
 8003772:	2b04      	cmp	r3, #4
 8003774:	bf28      	it	cs
 8003776:	2304      	movcs	r3, #4
 8003778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3304      	adds	r3, #4
 800377e:	2b06      	cmp	r3, #6
 8003780:	d902      	bls.n	8003788 <NVIC_EncodePriority+0x30>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3b03      	subs	r3, #3
 8003786:	e000      	b.n	800378a <NVIC_EncodePriority+0x32>
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	401a      	ands	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43d9      	mvns	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	4313      	orrs	r3, r2
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <SysTick_Config>:
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d0:	d301      	bcc.n	80037d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037d2:	2301      	movs	r3, #1
 80037d4:	e00f      	b.n	80037f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <SysTick_Config+0x40>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037de:	210f      	movs	r1, #15
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	f7ff ff8e 	bl	8003704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <SysTick_Config+0x40>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <SysTick_Config+0x40>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010

08003804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff29 	bl	8003664 <__NVIC_SetPriorityGrouping>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800382c:	f7ff ff3e 	bl	80036ac <__NVIC_GetPriorityGrouping>
 8003830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	6978      	ldr	r0, [r7, #20]
 8003838:	f7ff ff8e 	bl	8003758 <NVIC_EncodePriority>
 800383c:	4602      	mov	r2, r0
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff5d 	bl	8003704 <__NVIC_SetPriority>
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	4603      	mov	r3, r0
 800385a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800385c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff31 	bl	80036c8 <__NVIC_EnableIRQ>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ffa2 	bl	80037c0 <SysTick_Config>
 800387c:	4603      	mov	r3, r0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	e159      	b.n	8003b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a4:	2201      	movs	r2, #1
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	429a      	cmp	r2, r3
 80038be:	f040 8148 	bne.w	8003b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d005      	beq.n	80038da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d130      	bne.n	800393c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	2203      	movs	r2, #3
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003910:	2201      	movs	r2, #1
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 0201 	and.w	r2, r3, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b03      	cmp	r3, #3
 8003946:	d017      	beq.n	8003978 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d123      	bne.n	80039cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	08da      	lsrs	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3208      	adds	r2, #8
 800398c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	220f      	movs	r2, #15
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3208      	adds	r2, #8
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0203 	and.w	r2, r3, #3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a2 	beq.w	8003b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b57      	ldr	r3, [pc, #348]	; (8003b70 <HAL_GPIO_Init+0x2e8>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	4a56      	ldr	r2, [pc, #344]	; (8003b70 <HAL_GPIO_Init+0x2e8>)
 8003a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1e:	4b54      	ldr	r3, [pc, #336]	; (8003b70 <HAL_GPIO_Init+0x2e8>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2a:	4a52      	ldr	r2, [pc, #328]	; (8003b74 <HAL_GPIO_Init+0x2ec>)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	3302      	adds	r3, #2
 8003a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	220f      	movs	r2, #15
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a49      	ldr	r2, [pc, #292]	; (8003b78 <HAL_GPIO_Init+0x2f0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d019      	beq.n	8003a8a <HAL_GPIO_Init+0x202>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a48      	ldr	r2, [pc, #288]	; (8003b7c <HAL_GPIO_Init+0x2f4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d013      	beq.n	8003a86 <HAL_GPIO_Init+0x1fe>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a47      	ldr	r2, [pc, #284]	; (8003b80 <HAL_GPIO_Init+0x2f8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00d      	beq.n	8003a82 <HAL_GPIO_Init+0x1fa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a46      	ldr	r2, [pc, #280]	; (8003b84 <HAL_GPIO_Init+0x2fc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <HAL_GPIO_Init+0x1f6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a45      	ldr	r2, [pc, #276]	; (8003b88 <HAL_GPIO_Init+0x300>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_GPIO_Init+0x1f2>
 8003a76:	2304      	movs	r3, #4
 8003a78:	e008      	b.n	8003a8c <HAL_GPIO_Init+0x204>
 8003a7a:	2307      	movs	r3, #7
 8003a7c:	e006      	b.n	8003a8c <HAL_GPIO_Init+0x204>
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e004      	b.n	8003a8c <HAL_GPIO_Init+0x204>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e002      	b.n	8003a8c <HAL_GPIO_Init+0x204>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_GPIO_Init+0x204>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	f002 0203 	and.w	r2, r2, #3
 8003a92:	0092      	lsls	r2, r2, #2
 8003a94:	4093      	lsls	r3, r2
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a9c:	4935      	ldr	r1, [pc, #212]	; (8003b74 <HAL_GPIO_Init+0x2ec>)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aaa:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ace:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003af8:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003afe:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b22:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b4c:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <HAL_GPIO_Init+0x304>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	f67f aea2 	bls.w	80038a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40013800 	.word	0x40013800
 8003b78:	40020000 	.word	0x40020000
 8003b7c:	40020400 	.word	0x40020400
 8003b80:	40020800 	.word	0x40020800
 8003b84:	40020c00 	.word	0x40020c00
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40013c00 	.word	0x40013c00

08003b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	887b      	ldrh	r3, [r7, #2]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	e001      	b.n	8003bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd0:	787b      	ldrb	r3, [r7, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bdc:	e003      	b.n	8003be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	619a      	str	r2, [r3, #24]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c04:	887a      	ldrh	r2, [r7, #2]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	041a      	lsls	r2, r3, #16
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	887b      	ldrh	r3, [r7, #2]
 8003c12:	400b      	ands	r3, r1
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	619a      	str	r2, [r3, #24]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e12b      	b.n	8003e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe fda2 	bl	8002798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	; 0x24
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f002 fb4a 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8003c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4a81      	ldr	r2, [pc, #516]	; (8003e9c <HAL_I2C_Init+0x274>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d807      	bhi.n	8003cac <HAL_I2C_Init+0x84>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a80      	ldr	r2, [pc, #512]	; (8003ea0 <HAL_I2C_Init+0x278>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	bf94      	ite	ls
 8003ca4:	2301      	movls	r3, #1
 8003ca6:	2300      	movhi	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e006      	b.n	8003cba <HAL_I2C_Init+0x92>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a7d      	ldr	r2, [pc, #500]	; (8003ea4 <HAL_I2C_Init+0x27c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	bf94      	ite	ls
 8003cb4:	2301      	movls	r3, #1
 8003cb6:	2300      	movhi	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0e7      	b.n	8003e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a78      	ldr	r2, [pc, #480]	; (8003ea8 <HAL_I2C_Init+0x280>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0c9b      	lsrs	r3, r3, #18
 8003ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a6a      	ldr	r2, [pc, #424]	; (8003e9c <HAL_I2C_Init+0x274>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d802      	bhi.n	8003cfc <HAL_I2C_Init+0xd4>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	e009      	b.n	8003d10 <HAL_I2C_Init+0xe8>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	4a69      	ldr	r2, [pc, #420]	; (8003eac <HAL_I2C_Init+0x284>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	3301      	adds	r3, #1
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	495c      	ldr	r1, [pc, #368]	; (8003e9c <HAL_I2C_Init+0x274>)
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	d819      	bhi.n	8003d64 <HAL_I2C_Init+0x13c>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1e59      	subs	r1, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d3e:	1c59      	adds	r1, r3, #1
 8003d40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d44:	400b      	ands	r3, r1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_I2C_Init+0x138>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1e59      	subs	r1, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5e:	e051      	b.n	8003e04 <HAL_I2C_Init+0x1dc>
 8003d60:	2304      	movs	r3, #4
 8003d62:	e04f      	b.n	8003e04 <HAL_I2C_Init+0x1dc>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d111      	bne.n	8003d90 <HAL_I2C_Init+0x168>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1e58      	subs	r0, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	440b      	add	r3, r1
 8003d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e012      	b.n	8003db6 <HAL_I2C_Init+0x18e>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1e58      	subs	r0, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	0099      	lsls	r1, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da6:	3301      	adds	r3, #1
 8003da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Init+0x196>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e022      	b.n	8003e04 <HAL_I2C_Init+0x1dc>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10e      	bne.n	8003de4 <HAL_I2C_Init+0x1bc>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1e58      	subs	r0, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	440b      	add	r3, r1
 8003dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de2:	e00f      	b.n	8003e04 <HAL_I2C_Init+0x1dc>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	1e58      	subs	r0, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	0099      	lsls	r1, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	6809      	ldr	r1, [r1, #0]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6911      	ldr	r1, [r2, #16]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68d2      	ldr	r2, [r2, #12]
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	000186a0 	.word	0x000186a0
 8003ea0:	001e847f 	.word	0x001e847f
 8003ea4:	003d08ff 	.word	0x003d08ff
 8003ea8:	431bde83 	.word	0x431bde83
 8003eac:	10624dd3 	.word	0x10624dd3

08003eb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	817b      	strh	r3, [r7, #10]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7fe ffac 	bl	8002e20 <HAL_GetTick>
 8003ec8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	f040 80e0 	bne.w	8004098 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2319      	movs	r3, #25
 8003ede:	2201      	movs	r2, #1
 8003ee0:	4970      	ldr	r1, [pc, #448]	; (80040a4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 faf4 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e0d3      	b.n	800409a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_I2C_Master_Transmit+0x50>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e0cc      	b.n	800409a <HAL_I2C_Master_Transmit+0x1ea>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d007      	beq.n	8003f26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2221      	movs	r2, #33	; 0x21
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2210      	movs	r2, #16
 8003f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	893a      	ldrh	r2, [r7, #8]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a50      	ldr	r2, [pc, #320]	; (80040a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f68:	8979      	ldrh	r1, [r7, #10]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6a3a      	ldr	r2, [r7, #32]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f996 	bl	80042a0 <I2C_MasterRequestWrite>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e08d      	b.n	800409a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f94:	e066      	b.n	8004064 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	6a39      	ldr	r1, [r7, #32]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fb6e 	bl	800467c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d107      	bne.n	8003fbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e06b      	b.n	800409a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d11b      	bne.n	8004038 <HAL_I2C_Master_Transmit+0x188>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	d017      	beq.n	8004038 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	6a39      	ldr	r1, [r7, #32]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fb5e 	bl	80046fe <I2C_WaitOnBTFFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	2b04      	cmp	r3, #4
 800404e:	d107      	bne.n	8004060 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e01a      	b.n	800409a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d194      	bne.n	8003f96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004098:	2302      	movs	r3, #2
  }
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	00100002 	.word	0x00100002
 80040a8:	ffff0000 	.word	0xffff0000

080040ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	4608      	mov	r0, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	461a      	mov	r2, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	817b      	strh	r3, [r7, #10]
 80040be:	460b      	mov	r3, r1
 80040c0:	813b      	strh	r3, [r7, #8]
 80040c2:	4613      	mov	r3, r2
 80040c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040c6:	f7fe feab 	bl	8002e20 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	f040 80d9 	bne.w	800428c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	2319      	movs	r3, #25
 80040e0:	2201      	movs	r2, #1
 80040e2:	496d      	ldr	r1, [pc, #436]	; (8004298 <HAL_I2C_Mem_Write+0x1ec>)
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f9f3 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
 80040f2:	e0cc      	b.n	800428e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_I2C_Mem_Write+0x56>
 80040fe:	2302      	movs	r3, #2
 8004100:	e0c5      	b.n	800428e <HAL_I2C_Mem_Write+0x1e2>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d007      	beq.n	8004128 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004136:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2221      	movs	r2, #33	; 0x21
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2240      	movs	r2, #64	; 0x40
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004158:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a4d      	ldr	r2, [pc, #308]	; (800429c <HAL_I2C_Mem_Write+0x1f0>)
 8004168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800416a:	88f8      	ldrh	r0, [r7, #6]
 800416c:	893a      	ldrh	r2, [r7, #8]
 800416e:	8979      	ldrh	r1, [r7, #10]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	4603      	mov	r3, r0
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f912 	bl	80043a4 <I2C_RequestMemoryWrite>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d052      	beq.n	800422c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e081      	b.n	800428e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fa74 	bl	800467c <I2C_WaitOnTXEFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00d      	beq.n	80041b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d107      	bne.n	80041b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06b      	b.n	800428e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	781a      	ldrb	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d11b      	bne.n	800422c <HAL_I2C_Mem_Write+0x180>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d017      	beq.n	800422c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	781a      	ldrb	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1aa      	bne.n	800418a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 fa60 	bl	80046fe <I2C_WaitOnBTFFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	2b04      	cmp	r3, #4
 800424a:	d107      	bne.n	800425c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e016      	b.n	800428e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	00100002 	.word	0x00100002
 800429c:	ffff0000 	.word	0xffff0000

080042a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	460b      	mov	r3, r1
 80042ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d006      	beq.n	80042ca <I2C_MasterRequestWrite+0x2a>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d003      	beq.n	80042ca <I2C_MasterRequestWrite+0x2a>
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c8:	d108      	bne.n	80042dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e00b      	b.n	80042f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	2b12      	cmp	r3, #18
 80042e2:	d107      	bne.n	80042f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f8e5 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00d      	beq.n	8004328 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431a:	d103      	bne.n	8004324 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e035      	b.n	8004394 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004330:	d108      	bne.n	8004344 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004332:	897b      	ldrh	r3, [r7, #10]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004340:	611a      	str	r2, [r3, #16]
 8004342:	e01b      	b.n	800437c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004344:	897b      	ldrh	r3, [r7, #10]
 8004346:	11db      	asrs	r3, r3, #7
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0306 	and.w	r3, r3, #6
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f063 030f 	orn	r3, r3, #15
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	490e      	ldr	r1, [pc, #56]	; (800439c <I2C_MasterRequestWrite+0xfc>)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f90b 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e010      	b.n	8004394 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004372:	897b      	ldrh	r3, [r7, #10]
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4907      	ldr	r1, [pc, #28]	; (80043a0 <I2C_MasterRequestWrite+0x100>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f8fb 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	00010008 	.word	0x00010008
 80043a0:	00010002 	.word	0x00010002

080043a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	4608      	mov	r0, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	461a      	mov	r2, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	817b      	strh	r3, [r7, #10]
 80043b6:	460b      	mov	r3, r1
 80043b8:	813b      	strh	r3, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f878 	bl	80044d0 <I2C_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f4:	d103      	bne.n	80043fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e05f      	b.n	80044c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004410:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	6a3a      	ldr	r2, [r7, #32]
 8004416:	492d      	ldr	r1, [pc, #180]	; (80044cc <I2C_RequestMemoryWrite+0x128>)
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f8b0 	bl	800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e04c      	b.n	80044c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	6a39      	ldr	r1, [r7, #32]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f91a 	bl	800467c <I2C_WaitOnTXEFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00d      	beq.n	800446a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b04      	cmp	r3, #4
 8004454:	d107      	bne.n	8004466 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004464:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e02b      	b.n	80044c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d105      	bne.n	800447c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004470:	893b      	ldrh	r3, [r7, #8]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	611a      	str	r2, [r3, #16]
 800447a:	e021      	b.n	80044c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800447c:	893b      	ldrh	r3, [r7, #8]
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	b29b      	uxth	r3, r3
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448c:	6a39      	ldr	r1, [r7, #32]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f8f4 	bl	800467c <I2C_WaitOnTXEFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d107      	bne.n	80044b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e005      	b.n	80044c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044b6:	893b      	ldrh	r3, [r7, #8]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	00010002 	.word	0x00010002

080044d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e0:	e025      	b.n	800452e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d021      	beq.n	800452e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe fc99 	bl	8002e20 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d116      	bne.n	800452e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e023      	b.n	8004576 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d10d      	bne.n	8004554 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	43da      	mvns	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	e00c      	b.n	800456e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	43da      	mvns	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4013      	ands	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	429a      	cmp	r2, r3
 8004572:	d0b6      	beq.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800458c:	e051      	b.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459c:	d123      	bne.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e046      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d021      	beq.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fe fc17 	bl	8002e20 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d116      	bne.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0220 	orr.w	r2, r3, #32
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e020      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	43da      	mvns	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e00b      	b.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	43da      	mvns	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d18d      	bne.n	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004688:	e02d      	b.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f878 	bl	8004780 <I2C_IsAcknowledgeFailed>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e02d      	b.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d021      	beq.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fe fbbd 	bl	8002e20 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d116      	bne.n	80046e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e007      	b.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d1ca      	bne.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470a:	e02d      	b.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f837 	bl	8004780 <I2C_IsAcknowledgeFailed>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e02d      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d021      	beq.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004724:	f7fe fb7c 	bl	8002e20 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d116      	bne.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e007      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b04      	cmp	r3, #4
 8004774:	d1ca      	bne.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004796:	d11b      	bne.n	80047d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	f043 0204 	orr.w	r2, r3, #4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e0:	b08f      	sub	sp, #60	; 0x3c
 80047e2:	af0a      	add	r7, sp, #40	; 0x28
 80047e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e10f      	b.n	8004a10 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f009 fd5e 	bl	800e2cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2203      	movs	r2, #3
 8004814:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f003 ff73 	bl	800871a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	687e      	ldr	r6, [r7, #4]
 800483c:	466d      	mov	r5, sp
 800483e:	f106 0410 	add.w	r4, r6, #16
 8004842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800484a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800484e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004852:	1d33      	adds	r3, r6, #4
 8004854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004856:	6838      	ldr	r0, [r7, #0]
 8004858:	f003 fe4a 	bl	80084f0 <USB_CoreInit>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e0d0      	b.n	8004a10 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f003 ff61 	bl	800873c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
 800487e:	e04a      	b.n	8004916 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004880:	7bfa      	ldrb	r2, [r7, #15]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	333d      	adds	r3, #61	; 0x3d
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004894:	7bfa      	ldrb	r2, [r7, #15]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	333c      	adds	r3, #60	; 0x3c
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048a8:	7bfa      	ldrb	r2, [r7, #15]
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	b298      	uxth	r0, r3
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	3342      	adds	r3, #66	; 0x42
 80048bc:	4602      	mov	r2, r0
 80048be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048c0:	7bfa      	ldrb	r2, [r7, #15]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	333f      	adds	r3, #63	; 0x3f
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048d4:	7bfa      	ldrb	r2, [r7, #15]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	3344      	adds	r3, #68	; 0x44
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	3348      	adds	r3, #72	; 0x48
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048fc:	7bfa      	ldrb	r2, [r7, #15]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	3350      	adds	r3, #80	; 0x50
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	3301      	adds	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
 8004916:	7bfa      	ldrb	r2, [r7, #15]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d3af      	bcc.n	8004880 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	e044      	b.n	80049b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800493c:	7bfa      	ldrb	r2, [r7, #15]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004952:	7bfa      	ldrb	r2, [r7, #15]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004968:	7bfa      	ldrb	r2, [r7, #15]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004994:	7bfa      	ldrb	r2, [r7, #15]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	3301      	adds	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	7bfa      	ldrb	r2, [r7, #15]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3b5      	bcc.n	8004926 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	687e      	ldr	r6, [r7, #4]
 80049c2:	466d      	mov	r5, sp
 80049c4:	f106 0410 	add.w	r4, r6, #16
 80049c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80049d8:	1d33      	adds	r3, r6, #4
 80049da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049dc:	6838      	ldr	r0, [r7, #0]
 80049de:	f003 fed7 	bl	8008790 <USB_DevInit>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e00d      	b.n	8004a10 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f004 ff1f 	bl	800984c <USB_DevDisconnect>

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_PCD_Start+0x1c>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e020      	b.n	8004a76 <HAL_PCD_Start+0x5e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d109      	bne.n	8004a58 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d005      	beq.n	8004a58 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f003 fe4b 	bl	80086f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f004 fecf 	bl	800980a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a7e:	b590      	push	{r4, r7, lr}
 8004a80:	b08d      	sub	sp, #52	; 0x34
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f004 ff8d 	bl	80099b4 <USB_GetMode>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 839d 	bne.w	80051dc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f004 fef1 	bl	800988e <USB_ReadInterrupts>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8393 	beq.w	80051da <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f004 fee8 	bl	800988e <USB_ReadInterrupts>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d107      	bne.n	8004ad8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f002 0202 	and.w	r2, r2, #2
 8004ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f004 fed6 	bl	800988e <USB_ReadInterrupts>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d161      	bne.n	8004bb0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0210 	bic.w	r2, r2, #16
 8004afa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	f003 020f 	and.w	r2, r3, #15
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4413      	add	r3, r2
 8004b18:	3304      	adds	r3, #4
 8004b1a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	0c5b      	lsrs	r3, r3, #17
 8004b20:	f003 030f 	and.w	r3, r3, #15
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d124      	bne.n	8004b72 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d035      	beq.n	8004ba0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	6a38      	ldr	r0, [r7, #32]
 8004b48:	f004 fd3c 	bl	80095c4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b58:	441a      	add	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b6a:	441a      	add	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	619a      	str	r2, [r3, #24]
 8004b70:	e016      	b.n	8004ba0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	0c5b      	lsrs	r3, r3, #17
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	2b06      	cmp	r3, #6
 8004b7c:	d110      	bne.n	8004ba0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b84:	2208      	movs	r2, #8
 8004b86:	4619      	mov	r1, r3
 8004b88:	6a38      	ldr	r0, [r7, #32]
 8004b8a:	f004 fd1b 	bl	80095c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b9a:	441a      	add	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0210 	orr.w	r2, r2, #16
 8004bae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f004 fe6a 	bl	800988e <USB_ReadInterrupts>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bc4:	d16e      	bne.n	8004ca4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f004 fe70 	bl	80098b4 <USB_ReadDevAllOutEpInterrupt>
 8004bd4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004bd6:	e062      	b.n	8004c9e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d057      	beq.n	8004c92 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f004 fe95 	bl	800991c <USB_ReadDevOutEPInterrupt>
 8004bf2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fdb0 	bl	8005778 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2308      	movs	r3, #8
 8004c32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 feaa 	bl	8005990 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	461a      	mov	r2, r3
 8004c54:	2310      	movs	r3, #16
 8004c56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2320      	movs	r3, #32
 8004c72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	3301      	adds	r3, #1
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d199      	bne.n	8004bd8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f004 fdf0 	bl	800988e <USB_ReadInterrupts>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cb8:	f040 80c0 	bne.w	8004e3c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f004 fe11 	bl	80098e8 <USB_ReadDevAllInEpInterrupt>
 8004cc6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ccc:	e0b2      	b.n	8004e34 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80a7 	beq.w	8004e28 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f004 fe37 	bl	8009958 <USB_ReadDevInEPInterrupt>
 8004cea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d057      	beq.n	8004da6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69f9      	ldr	r1, [r7, #28]
 8004d12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d16:	4013      	ands	r3, r2
 8004d18:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d26:	461a      	mov	r2, r3
 8004d28:	2301      	movs	r3, #1
 8004d2a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d132      	bne.n	8004d9a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	3348      	adds	r3, #72	; 0x48
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4403      	add	r3, r0
 8004d54:	3344      	adds	r3, #68	; 0x44
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4419      	add	r1, r3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4403      	add	r3, r0
 8004d68:	3348      	adds	r3, #72	; 0x48
 8004d6a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d113      	bne.n	8004d9a <HAL_PCD_IRQHandler+0x31c>
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	3350      	adds	r3, #80	; 0x50
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d108      	bne.n	8004d9a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d92:	461a      	mov	r2, r3
 8004d94:	2101      	movs	r1, #1
 8004d96:	f004 fe3f 	bl	8009a18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f009 fb14 	bl	800e3ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2310      	movs	r3, #16
 8004ddc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df4:	461a      	mov	r2, r3
 8004df6:	2340      	movs	r3, #64	; 0x40
 8004df8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	461a      	mov	r2, r3
 8004e12:	2302      	movs	r3, #2
 8004e14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fc1b 	bl	800565e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f47f af49 	bne.w	8004cce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f004 fd24 	bl	800988e <USB_ReadInterrupts>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e50:	d122      	bne.n	8004e98 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d108      	bne.n	8004e82 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e78:	2100      	movs	r1, #0
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fe26 	bl	8005acc <HAL_PCDEx_LPM_Callback>
 8004e80:	e002      	b.n	8004e88 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f009 fb10 	bl	800e4a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f004 fcf6 	bl	800988e <USB_ReadInterrupts>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eac:	d112      	bne.n	8004ed4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d102      	bne.n	8004ec4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f009 facc 	bl	800e45c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ed2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f004 fcd8 	bl	800988e <USB_ReadInterrupts>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee8:	f040 80c7 	bne.w	800507a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2110      	movs	r1, #16
 8004f06:	4618      	mov	r0, r3
 8004f08:	f003 fda6 	bl	8008a58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f10:	e056      	b.n	8004fc0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f36:	0151      	lsls	r1, r2, #5
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	440a      	add	r2, r1
 8004f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f44:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	461a      	mov	r2, r3
 8004f74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fb8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d3a3      	bcc.n	8004f12 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004fdc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff6:	f043 030b 	orr.w	r3, r3, #11
 8004ffa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800500c:	f043 030b 	orr.w	r3, r3, #11
 8005010:	6453      	str	r3, [r2, #68]	; 0x44
 8005012:	e015      	b.n	8005040 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005022:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005026:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800502a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800503a:	f043 030b 	orr.w	r3, r3, #11
 800503e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800504e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005052:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005064:	461a      	mov	r2, r3
 8005066:	f004 fcd7 	bl	8009a18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f004 fc05 	bl	800988e <USB_ReadInterrupts>
 8005084:	4603      	mov	r3, r0
 8005086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800508a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508e:	d124      	bne.n	80050da <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f004 fc9b 	bl	80099d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f003 fd3b 	bl	8008b1a <USB_GetDevSpeed>
 80050a4:	4603      	mov	r3, r0
 80050a6:	461a      	mov	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681c      	ldr	r4, [r3, #0]
 80050b0:	f001 f92c 	bl	800630c <HAL_RCC_GetHCLKFreq>
 80050b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	4620      	mov	r0, r4
 80050c0:	f003 fa78 	bl	80085b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f009 f9aa 	bl	800e41e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695a      	ldr	r2, [r3, #20]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80050d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 fbd5 	bl	800988e <USB_ReadInterrupts>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d10a      	bne.n	8005104 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f009 f987 	bl	800e402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f002 0208 	and.w	r2, r2, #8
 8005102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f004 fbc0 	bl	800988e <USB_ReadInterrupts>
 800510e:	4603      	mov	r3, r0
 8005110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005118:	d10f      	bne.n	800513a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	b2db      	uxtb	r3, r3
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f009 f9df 	bl	800e4e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005138:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f004 fba5 	bl	800988e <USB_ReadInterrupts>
 8005144:	4603      	mov	r3, r0
 8005146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800514a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800514e:	d10f      	bne.n	8005170 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	b2db      	uxtb	r3, r3
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f009 f9b2 	bl	800e4c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800516e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f004 fb8a 	bl	800988e <USB_ReadInterrupts>
 800517a:	4603      	mov	r3, r0
 800517c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005184:	d10a      	bne.n	800519c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f009 f9c0 	bl	800e50c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800519a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f004 fb74 	bl	800988e <USB_ReadInterrupts>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d115      	bne.n	80051dc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f009 f9b0 	bl	800e528 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	e000      	b.n	80051dc <HAL_PCD_IRQHandler+0x75e>
      return;
 80051da:	bf00      	nop
    }
  }
}
 80051dc:	3734      	adds	r7, #52	; 0x34
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd90      	pop	{r4, r7, pc}

080051e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_PCD_SetAddress+0x1a>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e013      	b.n	8005224 <HAL_PCD_SetAddress+0x42>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f004 fad2 	bl	80097be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4603      	mov	r3, r0
 800523c:	70fb      	strb	r3, [r7, #3]
 800523e:	460b      	mov	r3, r1
 8005240:	803b      	strh	r3, [r7, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800524a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800524e:	2b00      	cmp	r3, #0
 8005250:	da0f      	bge.n	8005272 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	3338      	adds	r3, #56	; 0x38
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4413      	add	r3, r2
 8005266:	3304      	adds	r3, #4
 8005268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	705a      	strb	r2, [r3, #1]
 8005270:	e00f      	b.n	8005292 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4413      	add	r3, r2
 8005288:	3304      	adds	r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	b2da      	uxtb	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800529e:	883a      	ldrh	r2, [r7, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	78ba      	ldrb	r2, [r7, #2]
 80052a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052bc:	78bb      	ldrb	r3, [r7, #2]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d102      	bne.n	80052c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_PCD_EP_Open+0xaa>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e00e      	b.n	80052f4 <HAL_PCD_EP_Open+0xc8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f003 fc3d 	bl	8008b64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80052f2:	7afb      	ldrb	r3, [r7, #11]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800530c:	2b00      	cmp	r3, #0
 800530e:	da0f      	bge.n	8005330 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	f003 020f 	and.w	r2, r3, #15
 8005316:	4613      	mov	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	3338      	adds	r3, #56	; 0x38
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	4413      	add	r3, r2
 8005324:	3304      	adds	r3, #4
 8005326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	705a      	strb	r2, [r3, #1]
 800532e:	e00f      	b.n	8005350 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	3304      	adds	r3, #4
 8005348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_PCD_EP_Close+0x6e>
 8005366:	2302      	movs	r3, #2
 8005368:	e00e      	b.n	8005388 <HAL_PCD_EP_Close+0x8c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68f9      	ldr	r1, [r7, #12]
 8005378:	4618      	mov	r0, r3
 800537a:	f003 fc7b 	bl	8008c74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	460b      	mov	r3, r1
 800539e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053a0:	7afb      	ldrb	r3, [r7, #11]
 80053a2:	f003 020f 	and.w	r2, r3, #15
 80053a6:	4613      	mov	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	3304      	adds	r3, #4
 80053b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2200      	movs	r2, #0
 80053ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2200      	movs	r2, #0
 80053d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053d2:	7afb      	ldrb	r3, [r7, #11]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d102      	bne.n	80053ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053ec:	7afb      	ldrb	r3, [r7, #11]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	6979      	ldr	r1, [r7, #20]
 8005404:	f003 ff56 	bl	80092b4 <USB_EP0StartXfer>
 8005408:	e008      	b.n	800541c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	6979      	ldr	r1, [r7, #20]
 8005418:	f003 fd08 	bl	8008e2c <USB_EPStartXfer>
  }

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	460b      	mov	r3, r1
 8005430:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005448:	681b      	ldr	r3, [r3, #0]
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b086      	sub	sp, #24
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	460b      	mov	r3, r1
 8005464:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005466:	7afb      	ldrb	r3, [r7, #11]
 8005468:	f003 020f 	and.w	r2, r3, #15
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	3338      	adds	r3, #56	; 0x38
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	3304      	adds	r3, #4
 800547c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2201      	movs	r2, #1
 8005494:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005496:	7afb      	ldrb	r3, [r7, #11]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	b2da      	uxtb	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d102      	bne.n	80054b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054b0:	7afb      	ldrb	r3, [r7, #11]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	f003 fef4 	bl	80092b4 <USB_EP0StartXfer>
 80054cc:	e008      	b.n	80054e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	6979      	ldr	r1, [r7, #20]
 80054dc:	f003 fca6 	bl	8008e2c <USB_EPStartXfer>
  }

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	460b      	mov	r3, r1
 80054f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	f003 020f 	and.w	r2, r3, #15
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d901      	bls.n	8005508 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e050      	b.n	80055aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800550c:	2b00      	cmp	r3, #0
 800550e:	da0f      	bge.n	8005530 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	f003 020f 	and.w	r2, r3, #15
 8005516:	4613      	mov	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	3338      	adds	r3, #56	; 0x38
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	4413      	add	r3, r2
 8005524:	3304      	adds	r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	705a      	strb	r2, [r3, #1]
 800552e:	e00d      	b.n	800554c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	4613      	mov	r3, r2
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	3304      	adds	r3, #4
 8005544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_PCD_EP_SetStall+0x82>
 8005568:	2302      	movs	r3, #2
 800556a:	e01e      	b.n	80055aa <HAL_PCD_EP_SetStall+0xc0>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68f9      	ldr	r1, [r7, #12]
 800557a:	4618      	mov	r0, r3
 800557c:	f004 f84b 	bl	8009616 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	b2d9      	uxtb	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800559a:	461a      	mov	r2, r3
 800559c:	f004 fa3c 	bl	8009a18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	460b      	mov	r3, r1
 80055bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	f003 020f 	and.w	r2, r3, #15
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d901      	bls.n	80055d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e042      	b.n	8005656 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	da0f      	bge.n	80055f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	f003 020f 	and.w	r2, r3, #15
 80055de:	4613      	mov	r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	3338      	adds	r3, #56	; 0x38
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	4413      	add	r3, r2
 80055ec:	3304      	adds	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	705a      	strb	r2, [r3, #1]
 80055f6:	e00f      	b.n	8005618 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	f003 020f 	and.w	r2, r3, #15
 80055fe:	4613      	mov	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	3304      	adds	r3, #4
 8005610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_PCD_EP_ClrStall+0x86>
 8005634:	2302      	movs	r3, #2
 8005636:	e00e      	b.n	8005656 <HAL_PCD_EP_ClrStall+0xa4>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68f9      	ldr	r1, [r7, #12]
 8005646:	4618      	mov	r0, r3
 8005648:	f004 f853 	bl	80096f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b08a      	sub	sp, #40	; 0x28
 8005662:	af02      	add	r7, sp, #8
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	3338      	adds	r3, #56	; 0x38
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	3304      	adds	r3, #4
 8005684:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	429a      	cmp	r2, r3
 8005690:	d901      	bls.n	8005696 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e06c      	b.n	8005770 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d902      	bls.n	80056b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	3303      	adds	r3, #3
 80056b6:	089b      	lsrs	r3, r3, #2
 80056b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056ba:	e02b      	b.n	8005714 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	695a      	ldr	r2, [r3, #20]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d902      	bls.n	80056d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	3303      	adds	r3, #3
 80056dc:	089b      	lsrs	r3, r3, #2
 80056de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68d9      	ldr	r1, [r3, #12]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	4603      	mov	r3, r0
 80056f6:	6978      	ldr	r0, [r7, #20]
 80056f8:	f003 ff2f 	bl	800955a <USB_WritePacket>

    ep->xfer_buff  += len;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	441a      	add	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	441a      	add	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	b29b      	uxth	r3, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	429a      	cmp	r2, r3
 8005728:	d809      	bhi.n	800573e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005732:	429a      	cmp	r2, r3
 8005734:	d203      	bcs.n	800573e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1be      	bne.n	80056bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	429a      	cmp	r2, r3
 8005748:	d811      	bhi.n	800576e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	2201      	movs	r2, #1
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	43db      	mvns	r3, r3
 8005764:	6939      	ldr	r1, [r7, #16]
 8005766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800576a:	4013      	ands	r3, r2
 800576c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	333c      	adds	r3, #60	; 0x3c
 8005790:	3304      	adds	r3, #4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	f040 80a0 	bne.w	80058f0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d015      	beq.n	80057e6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4a72      	ldr	r2, [pc, #456]	; (8005988 <PCD_EP_OutXfrComplete_int+0x210>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	f240 80dd 	bls.w	800597e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80d7 	beq.w	800597e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	461a      	mov	r2, r3
 80057de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e2:	6093      	str	r3, [r2, #8]
 80057e4:	e0cb      	b.n	800597e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	461a      	mov	r2, r3
 80057fe:	2320      	movs	r3, #32
 8005800:	6093      	str	r3, [r2, #8]
 8005802:	e0bc      	b.n	800597e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 80b7 	bne.w	800597e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a5d      	ldr	r2, [pc, #372]	; (8005988 <PCD_EP_OutXfrComplete_int+0x210>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d90f      	bls.n	8005838 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	461a      	mov	r2, r3
 8005830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005834:	6093      	str	r3, [r2, #8]
 8005836:	e0a2      	b.n	800597e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800584a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	0159      	lsls	r1, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	440b      	add	r3, r1
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800585e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4403      	add	r3, r0
 800586e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005872:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	4613      	mov	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005886:	6819      	ldr	r1, [r3, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4403      	add	r3, r0
 8005896:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4419      	add	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	4613      	mov	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4403      	add	r3, r0
 80058ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058b0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d114      	bne.n	80058e2 <PCD_EP_OutXfrComplete_int+0x16a>
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d108      	bne.n	80058e2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058da:	461a      	mov	r2, r3
 80058dc:	2101      	movs	r1, #1
 80058de:	f004 f89b 	bl	8009a18 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f008 fd55 	bl	800e398 <HAL_PCD_DataOutStageCallback>
 80058ee:	e046      	b.n	800597e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a26      	ldr	r2, [pc, #152]	; (800598c <PCD_EP_OutXfrComplete_int+0x214>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d124      	bne.n	8005942 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590e:	461a      	mov	r2, r3
 8005910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005914:	6093      	str	r3, [r2, #8]
 8005916:	e032      	b.n	800597e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	461a      	mov	r2, r3
 8005930:	2320      	movs	r3, #32
 8005932:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f008 fd2c 	bl	800e398 <HAL_PCD_DataOutStageCallback>
 8005940:	e01d      	b.n	800597e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d114      	bne.n	8005972 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800596a:	461a      	mov	r2, r3
 800596c:	2100      	movs	r1, #0
 800596e:	f004 f853 	bl	8009a18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f008 fd0d 	bl	800e398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	4f54300a 	.word	0x4f54300a
 800598c:	4f54310a 	.word	0x4f54310a

08005990 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	333c      	adds	r3, #60	; 0x3c
 80059a8:	3304      	adds	r3, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <PCD_EP_OutSetupPacket_int+0x88>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d90e      	bls.n	80059e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	461a      	mov	r2, r3
 80059de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f008 fcc5 	bl	800e374 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a0a      	ldr	r2, [pc, #40]	; (8005a18 <PCD_EP_OutSetupPacket_int+0x88>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d90c      	bls.n	8005a0c <PCD_EP_OutSetupPacket_int+0x7c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d108      	bne.n	8005a0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a04:	461a      	mov	r2, r3
 8005a06:	2101      	movs	r1, #1
 8005a08:	f004 f806 	bl	8009a18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	4f54300a 	.word	0x4f54300a

08005a1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d107      	bne.n	8005a4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a3a:	883b      	ldrh	r3, [r7, #0]
 8005a3c:	0419      	lsls	r1, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	629a      	str	r2, [r3, #40]	; 0x28
 8005a48:	e028      	b.n	8005a9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	0c1b      	lsrs	r3, r3, #16
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a58:	2300      	movs	r3, #0
 8005a5a:	73fb      	strb	r3, [r7, #15]
 8005a5c:	e00d      	b.n	8005a7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	3340      	adds	r3, #64	; 0x40
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	3301      	adds	r3, #1
 8005a78:	73fb      	strb	r3, [r7, #15]
 8005a7a:	7bfa      	ldrb	r2, [r7, #15]
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3ec      	bcc.n	8005a5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a84:	883b      	ldrh	r3, [r7, #0]
 8005a86:	0418      	lsls	r0, r3, #16
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6819      	ldr	r1, [r3, #0]
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	4302      	orrs	r2, r0
 8005a94:	3340      	adds	r3, #64	; 0x40
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	887a      	ldrh	r2, [r7, #2]
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e264      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d075      	beq.n	8005bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b02:	4ba3      	ldr	r3, [pc, #652]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d00c      	beq.n	8005b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b0e:	4ba0      	ldr	r3, [pc, #640]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d112      	bne.n	8005b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b1a:	4b9d      	ldr	r3, [pc, #628]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b26:	d10b      	bne.n	8005b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b28:	4b99      	ldr	r3, [pc, #612]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d05b      	beq.n	8005bec <HAL_RCC_OscConfig+0x108>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d157      	bne.n	8005bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e23f      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d106      	bne.n	8005b58 <HAL_RCC_OscConfig+0x74>
 8005b4a:	4b91      	ldr	r3, [pc, #580]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a90      	ldr	r2, [pc, #576]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e01d      	b.n	8005b94 <HAL_RCC_OscConfig+0xb0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x98>
 8005b62:	4b8b      	ldr	r3, [pc, #556]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a8a      	ldr	r2, [pc, #552]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4b88      	ldr	r3, [pc, #544]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a87      	ldr	r2, [pc, #540]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e00b      	b.n	8005b94 <HAL_RCC_OscConfig+0xb0>
 8005b7c:	4b84      	ldr	r3, [pc, #528]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a83      	ldr	r2, [pc, #524]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	4b81      	ldr	r3, [pc, #516]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a80      	ldr	r2, [pc, #512]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d013      	beq.n	8005bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9c:	f7fd f940 	bl	8002e20 <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba4:	f7fd f93c 	bl	8002e20 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	; 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e204      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb6:	4b76      	ldr	r3, [pc, #472]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0xc0>
 8005bc2:	e014      	b.n	8005bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fd f92c 	bl	8002e20 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fd f928 	bl	8002e20 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	; 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e1f0      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bde:	4b6c      	ldr	r3, [pc, #432]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f0      	bne.n	8005bcc <HAL_RCC_OscConfig+0xe8>
 8005bea:	e000      	b.n	8005bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d063      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bfa:	4b65      	ldr	r3, [pc, #404]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00b      	beq.n	8005c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c06:	4b62      	ldr	r3, [pc, #392]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d11c      	bne.n	8005c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c12:	4b5f      	ldr	r3, [pc, #380]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d116      	bne.n	8005c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c1e:	4b5c      	ldr	r3, [pc, #368]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_RCC_OscConfig+0x152>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d001      	beq.n	8005c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e1c4      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c36:	4b56      	ldr	r3, [pc, #344]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4952      	ldr	r1, [pc, #328]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c4a:	e03a      	b.n	8005cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d020      	beq.n	8005c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c54:	4b4f      	ldr	r3, [pc, #316]	; (8005d94 <HAL_RCC_OscConfig+0x2b0>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5a:	f7fd f8e1 	bl	8002e20 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c62:	f7fd f8dd 	bl	8002e20 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e1a5      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c74:	4b46      	ldr	r3, [pc, #280]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f0      	beq.n	8005c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c80:	4b43      	ldr	r3, [pc, #268]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4940      	ldr	r1, [pc, #256]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	600b      	str	r3, [r1, #0]
 8005c94:	e015      	b.n	8005cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c96:	4b3f      	ldr	r3, [pc, #252]	; (8005d94 <HAL_RCC_OscConfig+0x2b0>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fd f8c0 	bl	8002e20 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ca4:	f7fd f8bc 	bl	8002e20 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e184      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cb6:	4b36      	ldr	r3, [pc, #216]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d030      	beq.n	8005d30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd6:	4b30      	ldr	r3, [pc, #192]	; (8005d98 <HAL_RCC_OscConfig+0x2b4>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cdc:	f7fd f8a0 	bl	8002e20 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ce4:	f7fd f89c 	bl	8002e20 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e164      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cf6:	4b26      	ldr	r3, [pc, #152]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x200>
 8005d02:	e015      	b.n	8005d30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d04:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <HAL_RCC_OscConfig+0x2b4>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d0a:	f7fd f889 	bl	8002e20 <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d12:	f7fd f885 	bl	8002e20 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e14d      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d24:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f0      	bne.n	8005d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80a0 	beq.w	8005e7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d42:	4b13      	ldr	r3, [pc, #76]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10f      	bne.n	8005d6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	4a0e      	ldr	r2, [pc, #56]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <HAL_RCC_OscConfig+0x2ac>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6e:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <HAL_RCC_OscConfig+0x2b8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d121      	bne.n	8005dbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d7a:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <HAL_RCC_OscConfig+0x2b8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a07      	ldr	r2, [pc, #28]	; (8005d9c <HAL_RCC_OscConfig+0x2b8>)
 8005d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d86:	f7fd f84b 	bl	8002e20 <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8c:	e011      	b.n	8005db2 <HAL_RCC_OscConfig+0x2ce>
 8005d8e:	bf00      	nop
 8005d90:	40023800 	.word	0x40023800
 8005d94:	42470000 	.word	0x42470000
 8005d98:	42470e80 	.word	0x42470e80
 8005d9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da0:	f7fd f83e 	bl	8002e20 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e106      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db2:	4b85      	ldr	r3, [pc, #532]	; (8005fc8 <HAL_RCC_OscConfig+0x4e4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d106      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x2f0>
 8005dc6:	4b81      	ldr	r3, [pc, #516]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	4a80      	ldr	r2, [pc, #512]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd2:	e01c      	b.n	8005e0e <HAL_RCC_OscConfig+0x32a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b05      	cmp	r3, #5
 8005dda:	d10c      	bne.n	8005df6 <HAL_RCC_OscConfig+0x312>
 8005ddc:	4b7b      	ldr	r3, [pc, #492]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de0:	4a7a      	ldr	r2, [pc, #488]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005de2:	f043 0304 	orr.w	r3, r3, #4
 8005de6:	6713      	str	r3, [r2, #112]	; 0x70
 8005de8:	4b78      	ldr	r3, [pc, #480]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dec:	4a77      	ldr	r2, [pc, #476]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	6713      	str	r3, [r2, #112]	; 0x70
 8005df4:	e00b      	b.n	8005e0e <HAL_RCC_OscConfig+0x32a>
 8005df6:	4b75      	ldr	r3, [pc, #468]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	4a74      	ldr	r2, [pc, #464]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005dfc:	f023 0301 	bic.w	r3, r3, #1
 8005e00:	6713      	str	r3, [r2, #112]	; 0x70
 8005e02:	4b72      	ldr	r3, [pc, #456]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	4a71      	ldr	r2, [pc, #452]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005e08:	f023 0304 	bic.w	r3, r3, #4
 8005e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d015      	beq.n	8005e42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e16:	f7fd f803 	bl	8002e20 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1c:	e00a      	b.n	8005e34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e1e:	f7fc ffff 	bl	8002e20 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e0c5      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e34:	4b65      	ldr	r3, [pc, #404]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ee      	beq.n	8005e1e <HAL_RCC_OscConfig+0x33a>
 8005e40:	e014      	b.n	8005e6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e42:	f7fc ffed 	bl	8002e20 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e48:	e00a      	b.n	8005e60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e4a:	f7fc ffe9 	bl	8002e20 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e0af      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e60:	4b5a      	ldr	r3, [pc, #360]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ee      	bne.n	8005e4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d105      	bne.n	8005e7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e72:	4b56      	ldr	r3, [pc, #344]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	4a55      	ldr	r2, [pc, #340]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 809b 	beq.w	8005fbe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e88:	4b50      	ldr	r3, [pc, #320]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 030c 	and.w	r3, r3, #12
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d05c      	beq.n	8005f4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d141      	bne.n	8005f20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e9c:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <HAL_RCC_OscConfig+0x4ec>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea2:	f7fc ffbd 	bl	8002e20 <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea8:	e008      	b.n	8005ebc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eaa:	f7fc ffb9 	bl	8002e20 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e081      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebc:	4b43      	ldr	r3, [pc, #268]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f0      	bne.n	8005eaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	019b      	lsls	r3, r3, #6
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	061b      	lsls	r3, r3, #24
 8005eec:	4937      	ldr	r1, [pc, #220]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ef2:	4b37      	ldr	r3, [pc, #220]	; (8005fd0 <HAL_RCC_OscConfig+0x4ec>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fc ff92 	bl	8002e20 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f00:	f7fc ff8e 	bl	8002e20 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e056      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f12:	4b2e      	ldr	r3, [pc, #184]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0f0      	beq.n	8005f00 <HAL_RCC_OscConfig+0x41c>
 8005f1e:	e04e      	b.n	8005fbe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f20:	4b2b      	ldr	r3, [pc, #172]	; (8005fd0 <HAL_RCC_OscConfig+0x4ec>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f26:	f7fc ff7b 	bl	8002e20 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f2e:	f7fc ff77 	bl	8002e20 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e03f      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f40:	4b22      	ldr	r3, [pc, #136]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f0      	bne.n	8005f2e <HAL_RCC_OscConfig+0x44a>
 8005f4c:	e037      	b.n	8005fbe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e032      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f5a:	4b1c      	ldr	r3, [pc, #112]	; (8005fcc <HAL_RCC_OscConfig+0x4e8>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d028      	beq.n	8005fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d121      	bne.n	8005fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d11a      	bne.n	8005fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d111      	bne.n	8005fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d107      	bne.n	8005fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d001      	beq.n	8005fbe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40007000 	.word	0x40007000
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	42470060 	.word	0x42470060

08005fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0cc      	b.n	8006182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe8:	4b68      	ldr	r3, [pc, #416]	; (800618c <HAL_RCC_ClockConfig+0x1b8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d90c      	bls.n	8006010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff6:	4b65      	ldr	r3, [pc, #404]	; (800618c <HAL_RCC_ClockConfig+0x1b8>)
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffe:	4b63      	ldr	r3, [pc, #396]	; (800618c <HAL_RCC_ClockConfig+0x1b8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d001      	beq.n	8006010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0b8      	b.n	8006182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d020      	beq.n	800605e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006028:	4b59      	ldr	r3, [pc, #356]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a58      	ldr	r2, [pc, #352]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006040:	4b53      	ldr	r3, [pc, #332]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4a52      	ldr	r2, [pc, #328]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 8006046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800604a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800604c:	4b50      	ldr	r3, [pc, #320]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	494d      	ldr	r1, [pc, #308]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 800605a:	4313      	orrs	r3, r2
 800605c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d044      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d107      	bne.n	8006082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006072:	4b47      	ldr	r3, [pc, #284]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d119      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e07f      	b.n	8006182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d003      	beq.n	8006092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800608e:	2b03      	cmp	r3, #3
 8006090:	d107      	bne.n	80060a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006092:	4b3f      	ldr	r3, [pc, #252]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e06f      	b.n	8006182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a2:	4b3b      	ldr	r3, [pc, #236]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e067      	b.n	8006182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060b2:	4b37      	ldr	r3, [pc, #220]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f023 0203 	bic.w	r2, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	4934      	ldr	r1, [pc, #208]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060c4:	f7fc feac 	bl	8002e20 <HAL_GetTick>
 80060c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060cc:	f7fc fea8 	bl	8002e20 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e04f      	b.n	8006182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060e2:	4b2b      	ldr	r3, [pc, #172]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 020c 	and.w	r2, r3, #12
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d1eb      	bne.n	80060cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060f4:	4b25      	ldr	r3, [pc, #148]	; (800618c <HAL_RCC_ClockConfig+0x1b8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d20c      	bcs.n	800611c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006102:	4b22      	ldr	r3, [pc, #136]	; (800618c <HAL_RCC_ClockConfig+0x1b8>)
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800610a:	4b20      	ldr	r3, [pc, #128]	; (800618c <HAL_RCC_ClockConfig+0x1b8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d001      	beq.n	800611c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e032      	b.n	8006182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006128:	4b19      	ldr	r3, [pc, #100]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4916      	ldr	r1, [pc, #88]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	4313      	orrs	r3, r2
 8006138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	490e      	ldr	r1, [pc, #56]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	4313      	orrs	r3, r2
 8006158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800615a:	f000 f821 	bl	80061a0 <HAL_RCC_GetSysClockFreq>
 800615e:	4602      	mov	r2, r0
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <HAL_RCC_ClockConfig+0x1bc>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	091b      	lsrs	r3, r3, #4
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	490a      	ldr	r1, [pc, #40]	; (8006194 <HAL_RCC_ClockConfig+0x1c0>)
 800616c:	5ccb      	ldrb	r3, [r1, r3]
 800616e:	fa22 f303 	lsr.w	r3, r2, r3
 8006172:	4a09      	ldr	r2, [pc, #36]	; (8006198 <HAL_RCC_ClockConfig+0x1c4>)
 8006174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006176:	4b09      	ldr	r3, [pc, #36]	; (800619c <HAL_RCC_ClockConfig+0x1c8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f7fc fe0c 	bl	8002d98 <HAL_InitTick>

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40023c00 	.word	0x40023c00
 8006190:	40023800 	.word	0x40023800
 8006194:	08014164 	.word	0x08014164
 8006198:	20000048 	.word	0x20000048
 800619c:	2000004c 	.word	0x2000004c

080061a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061a0:	b5b0      	push	{r4, r5, r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061a6:	2100      	movs	r1, #0
 80061a8:	6079      	str	r1, [r7, #4]
 80061aa:	2100      	movs	r1, #0
 80061ac:	60f9      	str	r1, [r7, #12]
 80061ae:	2100      	movs	r1, #0
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80061b2:	2100      	movs	r1, #0
 80061b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061b6:	4952      	ldr	r1, [pc, #328]	; (8006300 <HAL_RCC_GetSysClockFreq+0x160>)
 80061b8:	6889      	ldr	r1, [r1, #8]
 80061ba:	f001 010c 	and.w	r1, r1, #12
 80061be:	2908      	cmp	r1, #8
 80061c0:	d00d      	beq.n	80061de <HAL_RCC_GetSysClockFreq+0x3e>
 80061c2:	2908      	cmp	r1, #8
 80061c4:	f200 8094 	bhi.w	80062f0 <HAL_RCC_GetSysClockFreq+0x150>
 80061c8:	2900      	cmp	r1, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_RCC_GetSysClockFreq+0x32>
 80061cc:	2904      	cmp	r1, #4
 80061ce:	d003      	beq.n	80061d8 <HAL_RCC_GetSysClockFreq+0x38>
 80061d0:	e08e      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061d2:	4b4c      	ldr	r3, [pc, #304]	; (8006304 <HAL_RCC_GetSysClockFreq+0x164>)
 80061d4:	60bb      	str	r3, [r7, #8]
       break;
 80061d6:	e08e      	b.n	80062f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061d8:	4b4b      	ldr	r3, [pc, #300]	; (8006308 <HAL_RCC_GetSysClockFreq+0x168>)
 80061da:	60bb      	str	r3, [r7, #8]
      break;
 80061dc:	e08b      	b.n	80062f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061de:	4948      	ldr	r1, [pc, #288]	; (8006300 <HAL_RCC_GetSysClockFreq+0x160>)
 80061e0:	6849      	ldr	r1, [r1, #4]
 80061e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80061e6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061e8:	4945      	ldr	r1, [pc, #276]	; (8006300 <HAL_RCC_GetSysClockFreq+0x160>)
 80061ea:	6849      	ldr	r1, [r1, #4]
 80061ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d024      	beq.n	800623e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f4:	4942      	ldr	r1, [pc, #264]	; (8006300 <HAL_RCC_GetSysClockFreq+0x160>)
 80061f6:	6849      	ldr	r1, [r1, #4]
 80061f8:	0989      	lsrs	r1, r1, #6
 80061fa:	4608      	mov	r0, r1
 80061fc:	f04f 0100 	mov.w	r1, #0
 8006200:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006204:	f04f 0500 	mov.w	r5, #0
 8006208:	ea00 0204 	and.w	r2, r0, r4
 800620c:	ea01 0305 	and.w	r3, r1, r5
 8006210:	493d      	ldr	r1, [pc, #244]	; (8006308 <HAL_RCC_GetSysClockFreq+0x168>)
 8006212:	fb01 f003 	mul.w	r0, r1, r3
 8006216:	2100      	movs	r1, #0
 8006218:	fb01 f102 	mul.w	r1, r1, r2
 800621c:	1844      	adds	r4, r0, r1
 800621e:	493a      	ldr	r1, [pc, #232]	; (8006308 <HAL_RCC_GetSysClockFreq+0x168>)
 8006220:	fba2 0101 	umull	r0, r1, r2, r1
 8006224:	1863      	adds	r3, r4, r1
 8006226:	4619      	mov	r1, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	461a      	mov	r2, r3
 800622c:	f04f 0300 	mov.w	r3, #0
 8006230:	f7fa fd2c 	bl	8000c8c <__aeabi_uldivmod>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4613      	mov	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e04a      	b.n	80062d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800623e:	4b30      	ldr	r3, [pc, #192]	; (8006300 <HAL_RCC_GetSysClockFreq+0x160>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	099b      	lsrs	r3, r3, #6
 8006244:	461a      	mov	r2, r3
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800624e:	f04f 0100 	mov.w	r1, #0
 8006252:	ea02 0400 	and.w	r4, r2, r0
 8006256:	ea03 0501 	and.w	r5, r3, r1
 800625a:	4620      	mov	r0, r4
 800625c:	4629      	mov	r1, r5
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	014b      	lsls	r3, r1, #5
 8006268:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800626c:	0142      	lsls	r2, r0, #5
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	1b00      	subs	r0, r0, r4
 8006274:	eb61 0105 	sbc.w	r1, r1, r5
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	018b      	lsls	r3, r1, #6
 8006282:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006286:	0182      	lsls	r2, r0, #6
 8006288:	1a12      	subs	r2, r2, r0
 800628a:	eb63 0301 	sbc.w	r3, r3, r1
 800628e:	f04f 0000 	mov.w	r0, #0
 8006292:	f04f 0100 	mov.w	r1, #0
 8006296:	00d9      	lsls	r1, r3, #3
 8006298:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800629c:	00d0      	lsls	r0, r2, #3
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	1912      	adds	r2, r2, r4
 80062a4:	eb45 0303 	adc.w	r3, r5, r3
 80062a8:	f04f 0000 	mov.w	r0, #0
 80062ac:	f04f 0100 	mov.w	r1, #0
 80062b0:	0299      	lsls	r1, r3, #10
 80062b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062b6:	0290      	lsls	r0, r2, #10
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4610      	mov	r0, r2
 80062be:	4619      	mov	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	f7fa fce0 	bl	8000c8c <__aeabi_uldivmod>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4613      	mov	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <HAL_RCC_GetSysClockFreq+0x160>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	0c1b      	lsrs	r3, r3, #16
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	3301      	adds	r3, #1
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	60bb      	str	r3, [r7, #8]
      break;
 80062ee:	e002      	b.n	80062f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062f0:	4b04      	ldr	r3, [pc, #16]	; (8006304 <HAL_RCC_GetSysClockFreq+0x164>)
 80062f2:	60bb      	str	r3, [r7, #8]
      break;
 80062f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062f6:	68bb      	ldr	r3, [r7, #8]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006300:	40023800 	.word	0x40023800
 8006304:	00f42400 	.word	0x00f42400
 8006308:	017d7840 	.word	0x017d7840

0800630c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <HAL_RCC_GetHCLKFreq+0x14>)
 8006312:	681b      	ldr	r3, [r3, #0]
}
 8006314:	4618      	mov	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000048 	.word	0x20000048

08006324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006328:	f7ff fff0 	bl	800630c <HAL_RCC_GetHCLKFreq>
 800632c:	4602      	mov	r2, r0
 800632e:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	0a9b      	lsrs	r3, r3, #10
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	4903      	ldr	r1, [pc, #12]	; (8006348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800633a:	5ccb      	ldrb	r3, [r1, r3]
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40023800 	.word	0x40023800
 8006348:	08014174 	.word	0x08014174

0800634c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d105      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006370:	2b00      	cmp	r3, #0
 8006372:	d038      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006374:	4b68      	ldr	r3, [pc, #416]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800637a:	f7fc fd51 	bl	8002e20 <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006380:	e008      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006382:	f7fc fd4d 	bl	8002e20 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e0bd      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006394:	4b61      	ldr	r3, [pc, #388]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f0      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	019b      	lsls	r3, r3, #6
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	071b      	lsls	r3, r3, #28
 80063b2:	495a      	ldr	r1, [pc, #360]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80063ba:	4b57      	ldr	r3, [pc, #348]	; (8006518 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063c0:	f7fc fd2e 	bl	8002e20 <HAL_GetTick>
 80063c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063c6:	e008      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063c8:	f7fc fd2a 	bl	8002e20 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e09a      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063da:	4b50      	ldr	r3, [pc, #320]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f0      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 8083 	beq.w	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	4b48      	ldr	r3, [pc, #288]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	4a47      	ldr	r2, [pc, #284]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006402:	6413      	str	r3, [r2, #64]	; 0x40
 8006404:	4b45      	ldr	r3, [pc, #276]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006410:	4b43      	ldr	r3, [pc, #268]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a42      	ldr	r2, [pc, #264]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800641c:	f7fc fd00 	bl	8002e20 <HAL_GetTick>
 8006420:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006422:	e008      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006424:	f7fc fcfc 	bl	8002e20 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e06c      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006436:	4b3a      	ldr	r3, [pc, #232]	; (8006520 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f0      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006442:	4b36      	ldr	r3, [pc, #216]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d02f      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	429a      	cmp	r2, r3
 800645e:	d028      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006460:	4b2e      	ldr	r3, [pc, #184]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006468:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800646a:	4b2e      	ldr	r3, [pc, #184]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006470:	4b2c      	ldr	r3, [pc, #176]	; (8006524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006476:	4a29      	ldr	r2, [pc, #164]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800647c:	4b27      	ldr	r3, [pc, #156]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b01      	cmp	r3, #1
 8006486:	d114      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006488:	f7fc fcca 	bl	8002e20 <HAL_GetTick>
 800648c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648e:	e00a      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006490:	f7fc fcc6 	bl	8002e20 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	f241 3288 	movw	r2, #5000	; 0x1388
 800649e:	4293      	cmp	r3, r2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e034      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a6:	4b1d      	ldr	r3, [pc, #116]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0ee      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064be:	d10d      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80064c0:	4b16      	ldr	r3, [pc, #88]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d4:	4911      	ldr	r1, [pc, #68]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	608b      	str	r3, [r1, #8]
 80064da:	e005      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	4a0e      	ldr	r2, [pc, #56]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80064e6:	6093      	str	r3, [r2, #8]
 80064e8:	4b0c      	ldr	r3, [pc, #48]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f4:	4909      	ldr	r1, [pc, #36]	; (800651c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	7d1a      	ldrb	r2, [r3, #20]
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800650c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	42470068 	.word	0x42470068
 800651c:	40023800 	.word	0x40023800
 8006520:	40007000 	.word	0x40007000
 8006524:	42470e40 	.word	0x42470e40
 8006528:	424711e0 	.word	0x424711e0

0800652c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e083      	b.n	8006646 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	7f5b      	ldrb	r3, [r3, #29]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d105      	bne.n	8006554 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fc f96a 	bl	8002828 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	22ca      	movs	r2, #202	; 0xca
 8006560:	625a      	str	r2, [r3, #36]	; 0x24
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2253      	movs	r2, #83	; 0x53
 8006568:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f897 	bl	800669e <RTC_EnterInitMode>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	22ff      	movs	r2, #255	; 0xff
 800657c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2204      	movs	r2, #4
 8006582:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e05e      	b.n	8006646 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6899      	ldr	r1, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	68d2      	ldr	r2, [r2, #12]
 80065c2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6919      	ldr	r1, [r3, #16]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	041a      	lsls	r2, r3, #16
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10e      	bne.n	8006614 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f829 	bl	800664e <HAL_RTC_WaitForSynchro>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	22ff      	movs	r2, #255	; 0xff
 8006608:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2204      	movs	r2, #4
 800660e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e018      	b.n	8006646 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006622:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	22ff      	movs	r2, #255	; 0xff
 800663c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006644:	2300      	movs	r3, #0
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006668:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800666a:	f7fc fbd9 	bl	8002e20 <HAL_GetTick>
 800666e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006670:	e009      	b.n	8006686 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006672:	f7fc fbd5 	bl	8002e20 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006680:	d901      	bls.n	8006686 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e007      	b.n	8006696 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0ee      	beq.n	8006672 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d119      	bne.n	80066ec <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f04f 32ff 	mov.w	r2, #4294967295
 80066c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066c2:	f7fc fbad 	bl	8002e20 <HAL_GetTick>
 80066c6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066c8:	e009      	b.n	80066de <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80066ca:	f7fc fba9 	bl	8002e20 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066d8:	d901      	bls.n	80066de <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e007      	b.n	80066ee <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0ee      	beq.n	80066ca <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e022      	b.n	800674e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fc f89a 	bl	8002854 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2203      	movs	r2, #3
 8006724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f815 	bl	8006758 <HAL_SD_InitCard>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e00a      	b.n	800674e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006758:	b5b0      	push	{r4, r5, r7, lr}
 800675a:	b08e      	sub	sp, #56	; 0x38
 800675c:	af04      	add	r7, sp, #16
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006760:	2300      	movs	r3, #0
 8006762:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006770:	2300      	movs	r3, #0
 8006772:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006774:	2376      	movs	r3, #118	; 0x76
 8006776:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681d      	ldr	r5, [r3, #0]
 800677c:	466c      	mov	r4, sp
 800677e:	f107 0314 	add.w	r3, r7, #20
 8006782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006790:	4628      	mov	r0, r5
 8006792:	f001 f938 	bl	8007a06 <SDIO_Init>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800679c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e04c      	b.n	8006842 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80067a8:	4b28      	ldr	r3, [pc, #160]	; (800684c <HAL_SD_InitCard+0xf4>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 f970 	bl	8007a98 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80067b8:	4b24      	ldr	r3, [pc, #144]	; (800684c <HAL_SD_InitCard+0xf4>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 ff02 	bl	80075c8 <SD_PowerON>
 80067c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e02e      	b.n	8006842 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fe23 	bl	8007430 <SD_InitCard>
 80067ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00b      	beq.n	800680a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e01b      	b.n	8006842 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006812:	4618      	mov	r0, r3
 8006814:	f001 f9d3 	bl	8007bbe <SDMMC_CmdBlockLength>
 8006818:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00f      	beq.n	8006840 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a0a      	ldr	r2, [pc, #40]	; (8006850 <HAL_SD_InitCard+0xf8>)
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3728      	adds	r7, #40	; 0x28
 8006846:	46bd      	mov	sp, r7
 8006848:	bdb0      	pop	{r4, r5, r7, pc}
 800684a:	bf00      	nop
 800684c:	422580a0 	.word	0x422580a0
 8006850:	004005ff 	.word	0x004005ff

08006854 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b092      	sub	sp, #72	; 0x48
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006862:	f7fc fadd 	bl	8002e20 <HAL_GetTick>
 8006866:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d107      	bne.n	8006886 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e1bd      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	f040 81b0 	bne.w	8006bf4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800689a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	441a      	add	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d907      	bls.n	80068b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e1a4      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2203      	movs	r2, #3
 80068bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2200      	movs	r2, #0
 80068c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d002      	beq.n	80068d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	025b      	lsls	r3, r3, #9
 80068d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295
 80068da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	025b      	lsls	r3, r3, #9
 80068e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80068e2:	2390      	movs	r3, #144	; 0x90
 80068e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80068e6:	2302      	movs	r3, #2
 80068e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80068ee:	2301      	movs	r3, #1
 80068f0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f107 0214 	add.w	r2, r7, #20
 80068fa:	4611      	mov	r1, r2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f001 f932 	bl	8007b66 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d90a      	bls.n	800691e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2202      	movs	r2, #2
 800690c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f996 	bl	8007c46 <SDMMC_CmdReadMultiBlock>
 800691a:	6478      	str	r0, [r7, #68]	; 0x44
 800691c:	e009      	b.n	8006932 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800692a:	4618      	mov	r0, r3
 800692c:	f001 f969 	bl	8007c02 <SDMMC_CmdReadSingleBlock>
 8006930:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006934:	2b00      	cmp	r3, #0
 8006936:	d012      	beq.n	800695e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a7a      	ldr	r2, [pc, #488]	; (8006b28 <HAL_SD_ReadBlocks+0x2d4>)
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006946:	431a      	orrs	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e151      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006962:	e061      	b.n	8006a28 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d03c      	beq.n	80069ec <HAL_SD_ReadBlocks+0x198>
 8006972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d039      	beq.n	80069ec <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006978:	2300      	movs	r3, #0
 800697a:	643b      	str	r3, [r7, #64]	; 0x40
 800697c:	e033      	b.n	80069e6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4618      	mov	r0, r3
 8006984:	f001 f86a 	bl	8007a5c <SDIO_ReadFIFO>
 8006988:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006994:	3301      	adds	r3, #1
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	3b01      	subs	r3, #1
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	0a1b      	lsrs	r3, r3, #8
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069aa:	3301      	adds	r3, #1
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80069ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b0:	3b01      	subs	r3, #1
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	3301      	adds	r3, #1
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80069c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c6:	3b01      	subs	r3, #1
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	0e1b      	lsrs	r3, r3, #24
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	3301      	adds	r3, #1
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80069da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069dc:	3b01      	subs	r3, #1
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80069e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e2:	3301      	adds	r3, #1
 80069e4:	643b      	str	r3, [r7, #64]	; 0x40
 80069e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e8:	2b07      	cmp	r3, #7
 80069ea:	d9c8      	bls.n	800697e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80069ec:	f7fc fa18 	bl	8002e20 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d902      	bls.n	8006a02 <HAL_SD_ReadBlocks+0x1ae>
 80069fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d112      	bne.n	8006a28 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a48      	ldr	r2, [pc, #288]	; (8006b28 <HAL_SD_ReadBlocks+0x2d4>)
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e0ec      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a2e:	f240 332a 	movw	r3, #810	; 0x32a
 8006a32:	4013      	ands	r3, r2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d095      	beq.n	8006964 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d022      	beq.n	8006a8c <HAL_SD_ReadBlocks+0x238>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d91f      	bls.n	8006a8c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d01b      	beq.n	8006a8c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 f95b 	bl	8007d14 <SDMMC_CmdStopTransfer>
 8006a5e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d012      	beq.n	8006a8c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a2f      	ldr	r2, [pc, #188]	; (8006b28 <HAL_SD_ReadBlocks+0x2d4>)
 8006a6c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a74:	431a      	orrs	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0ba      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	f003 0308 	and.w	r3, r3, #8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d012      	beq.n	8006ac0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a22      	ldr	r2, [pc, #136]	; (8006b28 <HAL_SD_ReadBlocks+0x2d4>)
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	f043 0208 	orr.w	r2, r3, #8
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0a0      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d012      	beq.n	8006af4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <HAL_SD_ReadBlocks+0x2d4>)
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	f043 0202 	orr.w	r2, r3, #2
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e086      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d063      	beq.n	8006bca <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <HAL_SD_ReadBlocks+0x2d4>)
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	f043 0220 	orr.w	r2, r3, #32
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e06c      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
 8006b28:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 ff93 	bl	8007a5c <SDIO_ReadFIFO>
 8006b36:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b42:	3301      	adds	r3, #1
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	3301      	adds	r3, #1
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	0c1b      	lsrs	r3, r3, #16
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6e:	3301      	adds	r3, #1
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b74:	3b01      	subs	r3, #1
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	0e1b      	lsrs	r3, r3, #24
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b84:	3301      	adds	r3, #1
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006b8e:	f7fc f947 	bl	8002e20 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d902      	bls.n	8006ba4 <HAL_SD_ReadBlocks+0x350>
 8006b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d112      	bne.n	8006bca <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <HAL_SD_ReadBlocks+0x3b8>)
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e01b      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <HAL_SD_ReadBlocks+0x38a>
 8006bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1a6      	bne.n	8006b2c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f240 523a 	movw	r2, #1338	; 0x53a
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e006      	b.n	8006c02 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3748      	adds	r7, #72	; 0x48
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	004005ff 	.word	0x004005ff

08006c10 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b092      	sub	sp, #72	; 0x48
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c1e:	f7fc f8ff 	bl	8002e20 <HAL_GetTick>
 8006c22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d107      	bne.n	8006c42 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e166      	b.n	8006f10 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	f040 8159 	bne.w	8006f02 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	441a      	add	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d907      	bls.n	8006c74 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e14d      	b.n	8006f10 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2203      	movs	r2, #3
 8006c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2200      	movs	r2, #0
 8006c82:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d002      	beq.n	8006c92 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	025b      	lsls	r3, r3, #9
 8006c90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c92:	f04f 33ff 	mov.w	r3, #4294967295
 8006c96:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	025b      	lsls	r3, r3, #9
 8006c9c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c9e:	2390      	movs	r3, #144	; 0x90
 8006ca0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006caa:	2301      	movs	r3, #1
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f107 0218 	add.w	r2, r7, #24
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 ff54 	bl	8007b66 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d90a      	bls.n	8006cda <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fffc 	bl	8007cce <SDMMC_CmdWriteMultiBlock>
 8006cd6:	6478      	str	r0, [r7, #68]	; 0x44
 8006cd8:	e009      	b.n	8006cee <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2210      	movs	r2, #16
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 ffcf 	bl	8007c8a <SDMMC_CmdWriteSingleBlock>
 8006cec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d012      	beq.n	8006d1a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a87      	ldr	r2, [pc, #540]	; (8006f18 <HAL_SD_WriteBlocks+0x308>)
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e0fa      	b.n	8006f10 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006d1e:	e065      	b.n	8006dec <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d040      	beq.n	8006db0 <HAL_SD_WriteBlocks+0x1a0>
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d03d      	beq.n	8006db0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006d34:	2300      	movs	r3, #0
 8006d36:	643b      	str	r3, [r7, #64]	; 0x40
 8006d38:	e037      	b.n	8006daa <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d42:	3301      	adds	r3, #1
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	021a      	lsls	r2, r3, #8
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d60:	3b01      	subs	r3, #1
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	041a      	lsls	r2, r3, #16
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	3301      	adds	r3, #1
 8006d74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	061a      	lsls	r2, r3, #24
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d90:	3b01      	subs	r3, #1
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f107 0214 	add.w	r2, r7, #20
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fe69 	bl	8007a76 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da6:	3301      	adds	r3, #1
 8006da8:	643b      	str	r3, [r7, #64]	; 0x40
 8006daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dac:	2b07      	cmp	r3, #7
 8006dae:	d9c4      	bls.n	8006d3a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006db0:	f7fc f836 	bl	8002e20 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d902      	bls.n	8006dc6 <HAL_SD_WriteBlocks+0x1b6>
 8006dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d112      	bne.n	8006dec <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a53      	ldr	r2, [pc, #332]	; (8006f18 <HAL_SD_WriteBlocks+0x308>)
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e091      	b.n	8006f10 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df2:	f240 331a 	movw	r3, #794	; 0x31a
 8006df6:	4013      	ands	r3, r2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d091      	beq.n	8006d20 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d022      	beq.n	8006e50 <HAL_SD_WriteBlocks+0x240>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d91f      	bls.n	8006e50 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d01b      	beq.n	8006e50 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 ff79 	bl	8007d14 <SDMMC_CmdStopTransfer>
 8006e22:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d012      	beq.n	8006e50 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a3a      	ldr	r2, [pc, #232]	; (8006f18 <HAL_SD_WriteBlocks+0x308>)
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e05f      	b.n	8006f10 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d012      	beq.n	8006e84 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a2d      	ldr	r2, [pc, #180]	; (8006f18 <HAL_SD_WriteBlocks+0x308>)
 8006e64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	f043 0208 	orr.w	r2, r3, #8
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e045      	b.n	8006f10 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d012      	beq.n	8006eb8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a20      	ldr	r2, [pc, #128]	; (8006f18 <HAL_SD_WriteBlocks+0x308>)
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	f043 0202 	orr.w	r2, r3, #2
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e02b      	b.n	8006f10 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebe:	f003 0310 	and.w	r3, r3, #16
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d012      	beq.n	8006eec <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <HAL_SD_WriteBlocks+0x308>)
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	f043 0210 	orr.w	r2, r3, #16
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e011      	b.n	8006f10 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e006      	b.n	8006f10 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3748      	adds	r7, #72	; 0x48
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	004005ff 	.word	0x004005ff

08006f1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f2a:	0f9b      	lsrs	r3, r3, #30
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f36:	0e9b      	lsrs	r3, r3, #26
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	f003 030f 	and.w	r3, r3, #15
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f48:	0e1b      	lsrs	r3, r3, #24
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	f003 0303 	and.w	r3, r3, #3
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f5a:	0c1b      	lsrs	r3, r3, #16
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f7c:	0d1b      	lsrs	r3, r3, #20
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f003 030f 	and.w	r3, r3, #15
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f9a:	0bdb      	lsrs	r3, r3, #15
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fac:	0b9b      	lsrs	r3, r3, #14
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fbe:	0b5b      	lsrs	r3, r3, #13
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd0:	0b1b      	lsrs	r3, r3, #12
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d163      	bne.n	80070b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff0:	009a      	lsls	r2, r3, #2
 8006ff2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006ffc:	0f92      	lsrs	r2, r2, #30
 8006ffe:	431a      	orrs	r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007008:	0edb      	lsrs	r3, r3, #27
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	b2da      	uxtb	r2, r3
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800701a:	0e1b      	lsrs	r3, r3, #24
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	b2da      	uxtb	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702c:	0d5b      	lsrs	r3, r3, #21
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	b2da      	uxtb	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703e:	0c9b      	lsrs	r3, r3, #18
 8007040:	b2db      	uxtb	r3, r3
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	b2da      	uxtb	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007050:	0bdb      	lsrs	r3, r3, #15
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	b2da      	uxtb	r2, r3
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	7e1b      	ldrb	r3, [r3, #24]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	3302      	adds	r3, #2
 8007074:	2201      	movs	r2, #1
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800707e:	fb02 f203 	mul.w	r2, r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	7a1b      	ldrb	r3, [r3, #8]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	2201      	movs	r2, #1
 8007092:	409a      	lsls	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80070a0:	0a52      	lsrs	r2, r2, #9
 80070a2:	fb02 f203 	mul.w	r2, r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b0:	661a      	str	r2, [r3, #96]	; 0x60
 80070b2:	e031      	b.n	8007118 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d11d      	bne.n	80070f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c0:	041b      	lsls	r3, r3, #16
 80070c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ca:	0c1b      	lsrs	r3, r3, #16
 80070cc:	431a      	orrs	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	3301      	adds	r3, #1
 80070d8:	029a      	lsls	r2, r3, #10
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	661a      	str	r2, [r3, #96]	; 0x60
 80070f6:	e00f      	b.n	8007118 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a58      	ldr	r2, [pc, #352]	; (8007260 <HAL_SD_GetCardCSD+0x344>)
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e09d      	b.n	8007254 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800711c:	0b9b      	lsrs	r3, r3, #14
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	b2da      	uxtb	r2, r3
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712e:	09db      	lsrs	r3, r3, #7
 8007130:	b2db      	uxtb	r3, r3
 8007132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007136:	b2da      	uxtb	r2, r3
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007146:	b2da      	uxtb	r2, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007150:	0fdb      	lsrs	r3, r3, #31
 8007152:	b2da      	uxtb	r2, r3
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715c:	0f5b      	lsrs	r3, r3, #29
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	b2da      	uxtb	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716e:	0e9b      	lsrs	r3, r3, #26
 8007170:	b2db      	uxtb	r3, r3
 8007172:	f003 0307 	and.w	r3, r3, #7
 8007176:	b2da      	uxtb	r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007180:	0d9b      	lsrs	r3, r3, #22
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	b2da      	uxtb	r2, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	0d5b      	lsrs	r3, r3, #21
 8007194:	b2db      	uxtb	r3, r3
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	b2da      	uxtb	r2, r3
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ae:	0c1b      	lsrs	r3, r3, #16
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c2:	0bdb      	lsrs	r3, r3, #15
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	0b9b      	lsrs	r3, r3, #14
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	0b5b      	lsrs	r3, r3, #13
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	0b1b      	lsrs	r3, r3, #12
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	b2da      	uxtb	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007212:	0a9b      	lsrs	r3, r3, #10
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	b2da      	uxtb	r2, r3
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 0303 	and.w	r3, r3, #3
 800722e:	b2da      	uxtb	r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723a:	085b      	lsrs	r3, r3, #1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007242:	b2da      	uxtb	r2, r3
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	004005ff 	.word	0x004005ff

08007264 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b08e      	sub	sp, #56	; 0x38
 80072c0:	af04      	add	r7, sp, #16
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2203      	movs	r2, #3
 80072d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d02e      	beq.n	800733a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e2:	d106      	bne.n	80072f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	639a      	str	r2, [r3, #56]	; 0x38
 80072f0:	e029      	b.n	8007346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f8:	d10a      	bne.n	8007310 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fa1a 	bl	8007734 <SD_WideBus_Enable>
 8007300:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	639a      	str	r2, [r3, #56]	; 0x38
 800730e:	e01a      	b.n	8007346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa57 	bl	80077ca <SD_WideBus_Disable>
 800731c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
 800732a:	e00c      	b.n	8007346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	639a      	str	r2, [r3, #56]	; 0x38
 8007338:	e005      	b.n	8007346 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a26      	ldr	r2, [pc, #152]	; (80073ec <HAL_SD_ConfigWideBusOperation+0x130>)
 8007354:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007364:	e01f      	b.n	80073a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681d      	ldr	r5, [r3, #0]
 800738c:	466c      	mov	r4, sp
 800738e:	f107 0314 	add.w	r3, r7, #20
 8007392:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800739a:	f107 0308 	add.w	r3, r7, #8
 800739e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 fb30 	bl	8007a06 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fc05 	bl	8007bbe <SDMMC_CmdBlockLength>
 80073b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00c      	beq.n	80073d6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <HAL_SD_ConfigWideBusOperation+0x130>)
 80073c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80073de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3728      	adds	r7, #40	; 0x28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bdb0      	pop	{r4, r5, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	004005ff 	.word	0x004005ff

080073f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80073fc:	f107 030c 	add.w	r3, r7, #12
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f96e 	bl	80076e4 <SD_SendStatus>
 8007408:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d005      	beq.n	800741c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	0a5b      	lsrs	r3, r3, #9
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007426:	693b      	ldr	r3, [r7, #16]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007430:	b5b0      	push	{r4, r5, r7, lr}
 8007432:	b094      	sub	sp, #80	; 0x50
 8007434:	af04      	add	r7, sp, #16
 8007436:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007438:	2301      	movs	r3, #1
 800743a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fb38 	bl	8007ab6 <SDIO_GetPowerState>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800744c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007450:	e0b6      	b.n	80075c0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007456:	2b03      	cmp	r3, #3
 8007458:	d02f      	beq.n	80074ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fd62 	bl	8007f28 <SDMMC_CmdSendCID>
 8007464:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <SD_InitCard+0x40>
    {
      return errorstate;
 800746c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746e:	e0a7      	b.n	80075c0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fb62 	bl	8007b40 <SDIO_GetResponse>
 800747c:	4602      	mov	r2, r0
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2104      	movs	r1, #4
 8007488:	4618      	mov	r0, r3
 800748a:	f000 fb59 	bl	8007b40 <SDIO_GetResponse>
 800748e:	4602      	mov	r2, r0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2108      	movs	r1, #8
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fb50 	bl	8007b40 <SDIO_GetResponse>
 80074a0:	4602      	mov	r2, r0
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	210c      	movs	r1, #12
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fb47 	bl	8007b40 <SDIO_GetResponse>
 80074b2:	4602      	mov	r2, r0
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d00d      	beq.n	80074de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f107 020e 	add.w	r2, r7, #14
 80074ca:	4611      	mov	r1, r2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fd68 	bl	8007fa2 <SDMMC_CmdSetRelAdd>
 80074d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <SD_InitCard+0xae>
    {
      return errorstate;
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	e070      	b.n	80075c0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d036      	beq.n	8007554 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80074e6:	89fb      	ldrh	r3, [r7, #14]
 80074e8:	461a      	mov	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f6:	041b      	lsls	r3, r3, #16
 80074f8:	4619      	mov	r1, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	f000 fd32 	bl	8007f64 <SDMMC_CmdSendCSD>
 8007500:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750a:	e059      	b.n	80075c0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2100      	movs	r1, #0
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fb14 	bl	8007b40 <SDIO_GetResponse>
 8007518:	4602      	mov	r2, r0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2104      	movs	r1, #4
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fb0b 	bl	8007b40 <SDIO_GetResponse>
 800752a:	4602      	mov	r2, r0
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2108      	movs	r1, #8
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fb02 	bl	8007b40 <SDIO_GetResponse>
 800753c:	4602      	mov	r2, r0
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	210c      	movs	r1, #12
 8007548:	4618      	mov	r0, r3
 800754a:	f000 faf9 	bl	8007b40 <SDIO_GetResponse>
 800754e:	4602      	mov	r2, r0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2104      	movs	r1, #4
 800755a:	4618      	mov	r0, r3
 800755c:	f000 faf0 	bl	8007b40 <SDIO_GetResponse>
 8007560:	4603      	mov	r3, r0
 8007562:	0d1a      	lsrs	r2, r3, #20
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007568:	f107 0310 	add.w	r3, r7, #16
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fcd4 	bl	8006f1c <HAL_SD_GetCardCSD>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800757a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800757e:	e01f      	b.n	80075c0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6819      	ldr	r1, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	461a      	mov	r2, r3
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	4608      	mov	r0, r1
 8007592:	f000 fbe1 	bl	8007d58 <SDMMC_CmdSelDesel>
 8007596:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <SD_InitCard+0x172>
  {
    return errorstate;
 800759e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a0:	e00e      	b.n	80075c0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681d      	ldr	r5, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	466c      	mov	r4, sp
 80075aa:	f103 0210 	add.w	r2, r3, #16
 80075ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80075b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80075b4:	3304      	adds	r3, #4
 80075b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 fa24 	bl	8007a06 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3740      	adds	r7, #64	; 0x40
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bdb0      	pop	{r4, r5, r7, pc}

080075c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fbdc 	bl	8007d9e <SDMMC_CmdGoIdleState>
 80075e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	e072      	b.n	80076d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fbef 	bl	8007dda <SDMMC_CmdOperCond>
 80075fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00d      	beq.n	8007620 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fbc5 	bl	8007d9e <SDMMC_CmdGoIdleState>
 8007614:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <SD_PowerON+0x5e>
    {
      return errorstate;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	e05b      	b.n	80076d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800762a:	2b01      	cmp	r3, #1
 800762c:	d137      	bne.n	800769e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2100      	movs	r1, #0
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fbef 	bl	8007e18 <SDMMC_CmdAppCommand>
 800763a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d02d      	beq.n	800769e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007642:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007646:	e047      	b.n	80076d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fbe2 	bl	8007e18 <SDMMC_CmdAppCommand>
 8007654:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <SD_PowerON+0x98>
    {
      return errorstate;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	e03b      	b.n	80076d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	491e      	ldr	r1, [pc, #120]	; (80076e0 <SD_PowerON+0x118>)
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fbf8 	bl	8007e5c <SDMMC_CmdAppOperCommand>
 800766c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007674:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007678:	e02e      	b.n	80076d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2100      	movs	r1, #0
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fa5d 	bl	8007b40 <SDIO_GetResponse>
 8007686:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	0fdb      	lsrs	r3, r3, #31
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <SD_PowerON+0xcc>
 8007690:	2301      	movs	r3, #1
 8007692:	e000      	b.n	8007696 <SD_PowerON+0xce>
 8007694:	2300      	movs	r3, #0
 8007696:	613b      	str	r3, [r7, #16]

    count++;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	3301      	adds	r3, #1
 800769c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d802      	bhi.n	80076ae <SD_PowerON+0xe6>
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0cc      	beq.n	8007648 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d902      	bls.n	80076be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80076b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076bc:	e00c      	b.n	80076d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	645a      	str	r2, [r3, #68]	; 0x44
 80076ce:	e002      	b.n	80076d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	c1100000 	.word	0xc1100000

080076e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d102      	bne.n	80076fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80076f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076f8:	e018      	b.n	800772c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007702:	041b      	lsls	r3, r3, #16
 8007704:	4619      	mov	r1, r3
 8007706:	4610      	mov	r0, r2
 8007708:	f000 fc6c 	bl	8007fe4 <SDMMC_CmdSendStatus>
 800770c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	e009      	b.n	800772c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2100      	movs	r1, #0
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fa0e 	bl	8007b40 <SDIO_GetResponse>
 8007724:	4602      	mov	r2, r0
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	2300      	movs	r3, #0
 8007742:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2100      	movs	r1, #0
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f9f8 	bl	8007b40 <SDIO_GetResponse>
 8007750:	4603      	mov	r3, r0
 8007752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800775a:	d102      	bne.n	8007762 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800775c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007760:	e02f      	b.n	80077c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007762:	f107 030c 	add.w	r3, r7, #12
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f879 	bl	8007860 <SD_FindSCR>
 800776e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	e023      	b.n	80077c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01c      	beq.n	80077be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	041b      	lsls	r3, r3, #16
 800778e:	4619      	mov	r1, r3
 8007790:	4610      	mov	r0, r2
 8007792:	f000 fb41 	bl	8007e18 <SDMMC_CmdAppCommand>
 8007796:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	e00f      	b.n	80077c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2102      	movs	r1, #2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fb7a 	bl	8007ea2 <SDMMC_CmdBusWidth>
 80077ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	e003      	b.n	80077c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	e001      	b.n	80077c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b086      	sub	sp, #24
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 f9ad 	bl	8007b40 <SDIO_GetResponse>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077f0:	d102      	bne.n	80077f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077f6:	e02f      	b.n	8007858 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80077f8:	f107 030c 	add.w	r3, r7, #12
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f82e 	bl	8007860 <SD_FindSCR>
 8007804:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	e023      	b.n	8007858 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d01c      	beq.n	8007854 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f000 faf6 	bl	8007e18 <SDMMC_CmdAppCommand>
 800782c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	e00f      	b.n	8007858 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2100      	movs	r1, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f000 fb2f 	bl	8007ea2 <SDMMC_CmdBusWidth>
 8007844:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	e003      	b.n	8007858 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007850:	2300      	movs	r3, #0
 8007852:	e001      	b.n	8007858 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007854:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007858:	4618      	mov	r0, r3
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007860:	b590      	push	{r4, r7, lr}
 8007862:	b08f      	sub	sp, #60	; 0x3c
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800786a:	f7fb fad9 	bl	8002e20 <HAL_GetTick>
 800786e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007874:	2300      	movs	r3, #0
 8007876:	60bb      	str	r3, [r7, #8]
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2108      	movs	r1, #8
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f999 	bl	8007bbe <SDMMC_CmdBlockLength>
 800788c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	e0b2      	b.n	80079fe <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a0:	041b      	lsls	r3, r3, #16
 80078a2:	4619      	mov	r1, r3
 80078a4:	4610      	mov	r0, r2
 80078a6:	f000 fab7 	bl	8007e18 <SDMMC_CmdAppCommand>
 80078aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	e0a3      	b.n	80079fe <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80078bc:	2308      	movs	r3, #8
 80078be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80078c0:	2330      	movs	r3, #48	; 0x30
 80078c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80078c4:	2302      	movs	r3, #2
 80078c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80078cc:	2301      	movs	r3, #1
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f107 0210 	add.w	r2, r7, #16
 80078d8:	4611      	mov	r1, r2
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f943 	bl	8007b66 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fafe 	bl	8007ee6 <SDMMC_CmdSendSCR>
 80078ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d02a      	beq.n	8007948 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	e083      	b.n	80079fe <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00f      	beq.n	8007924 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6819      	ldr	r1, [r3, #0]
 8007908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	f107 0208 	add.w	r2, r7, #8
 8007910:	18d4      	adds	r4, r2, r3
 8007912:	4608      	mov	r0, r1
 8007914:	f000 f8a2 	bl	8007a5c <SDIO_ReadFIFO>
 8007918:	4603      	mov	r3, r0
 800791a:	6023      	str	r3, [r4, #0]
      index++;
 800791c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791e:	3301      	adds	r3, #1
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
 8007922:	e006      	b.n	8007932 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d012      	beq.n	8007958 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007932:	f7fb fa75 	bl	8002e20 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d102      	bne.n	8007948 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007942:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007946:	e05a      	b.n	80079fe <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0cf      	beq.n	80078f6 <SD_FindSCR+0x96>
 8007956:	e000      	b.n	800795a <SD_FindSCR+0xfa>
      break;
 8007958:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2208      	movs	r2, #8
 800796e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007970:	2308      	movs	r3, #8
 8007972:	e044      	b.n	80079fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2202      	movs	r2, #2
 8007988:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800798a:	2302      	movs	r3, #2
 800798c:	e037      	b.n	80079fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2220      	movs	r2, #32
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80079a4:	2320      	movs	r3, #32
 80079a6:	e02a      	b.n	80079fe <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	061a      	lsls	r2, r3, #24
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	021b      	lsls	r3, r3, #8
 80079ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	0a1b      	lsrs	r3, r3, #8
 80079c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80079c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	0e1b      	lsrs	r3, r3, #24
 80079ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	601a      	str	r2, [r3, #0]
    scr++;
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	3304      	adds	r3, #4
 80079d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	061a      	lsls	r2, r3, #24
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	021b      	lsls	r3, r3, #8
 80079e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	0e1b      	lsrs	r3, r3, #24
 80079f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	373c      	adds	r7, #60	; 0x3c
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd90      	pop	{r4, r7, pc}

08007a06 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007a06:	b084      	sub	sp, #16
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	f107 001c 	add.w	r0, r7, #28
 8007a14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007a1c:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007a20:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007a24:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007a28:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007a2c:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007a30:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007a40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	b004      	add	sp, #16
 8007a5a:	4770      	bx	lr

08007a5c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007aa6:	2002      	movs	r0, #2
 8007aa8:	f7fb f9c6 	bl	8002e38 <HAL_Delay>
  
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0303 	and.w	r3, r3, #3
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007af0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007af6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007afc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007b0c:	f023 030f 	bic.w	r3, r3, #15
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	431a      	orrs	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	b2db      	uxtb	r3, r3
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3314      	adds	r3, #20
 8007b4e:	461a      	mov	r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	4413      	add	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
}  
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b8c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007b92:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007b98:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0

}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b088      	sub	sp, #32
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007bcc:	2310      	movs	r3, #16
 8007bce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bde:	f107 0308 	add.w	r3, r7, #8
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ff74 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bee:	2110      	movs	r1, #16
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fa45 	bl	8008080 <SDMMC_GetCmdResp1>
 8007bf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3720      	adds	r7, #32
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b088      	sub	sp, #32
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007c10:	2311      	movs	r3, #17
 8007c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff ff52 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c32:	2111      	movs	r1, #17
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fa23 	bl	8008080 <SDMMC_GetCmdResp1>
 8007c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b088      	sub	sp, #32
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007c54:	2312      	movs	r3, #18
 8007c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c66:	f107 0308 	add.w	r3, r7, #8
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff ff30 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c76:	2112      	movs	r1, #18
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fa01 	bl	8008080 <SDMMC_GetCmdResp1>
 8007c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c80:	69fb      	ldr	r3, [r7, #28]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3720      	adds	r7, #32
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b088      	sub	sp, #32
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007c98:	2318      	movs	r3, #24
 8007c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007caa:	f107 0308 	add.w	r3, r7, #8
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff ff0e 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cba:	2118      	movs	r1, #24
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f9df 	bl	8008080 <SDMMC_GetCmdResp1>
 8007cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3720      	adds	r7, #32
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b088      	sub	sp, #32
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007cdc:	2319      	movs	r3, #25
 8007cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ce0:	2340      	movs	r3, #64	; 0x40
 8007ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cee:	f107 0308 	add.w	r3, r7, #8
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff feec 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cfe:	2119      	movs	r1, #25
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f9bd 	bl	8008080 <SDMMC_GetCmdResp1>
 8007d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d08:	69fb      	ldr	r3, [r7, #28]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3720      	adds	r7, #32
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007d20:	230c      	movs	r3, #12
 8007d22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d24:	2340      	movs	r3, #64	; 0x40
 8007d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d32:	f107 0308 	add.w	r3, r7, #8
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff feca 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007d3e:	4a05      	ldr	r2, [pc, #20]	; (8007d54 <SDMMC_CmdStopTransfer+0x40>)
 8007d40:	210c      	movs	r1, #12
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f99c 	bl	8008080 <SDMMC_GetCmdResp1>
 8007d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d4a:	69fb      	ldr	r3, [r7, #28]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	05f5e100 	.word	0x05f5e100

08007d58 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007d68:	2307      	movs	r3, #7
 8007d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d6c:	2340      	movs	r3, #64	; 0x40
 8007d6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d78:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d7a:	f107 0310 	add.w	r3, r7, #16
 8007d7e:	4619      	mov	r1, r3
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff fea6 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8a:	2107      	movs	r1, #7
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f977 	bl	8008080 <SDMMC_GetCmdResp1>
 8007d92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3728      	adds	r7, #40	; 0x28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b088      	sub	sp, #32
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007db2:	2300      	movs	r3, #0
 8007db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dbc:	f107 0308 	add.w	r3, r7, #8
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff fe85 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f92d 	bl	8008028 <SDMMC_GetCmdError>
 8007dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dd0:	69fb      	ldr	r3, [r7, #28]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3720      	adds	r7, #32
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b088      	sub	sp, #32
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007de2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007de8:	2308      	movs	r3, #8
 8007dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dec:	2340      	movs	r3, #64	; 0x40
 8007dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007df0:	2300      	movs	r3, #0
 8007df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dfa:	f107 0308 	add.w	r3, r7, #8
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff fe66 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fb24 	bl	8008454 <SDMMC_GetCmdResp7>
 8007e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e0e:	69fb      	ldr	r3, [r7, #28]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3720      	adds	r7, #32
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007e26:	2337      	movs	r3, #55	; 0x37
 8007e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e2a:	2340      	movs	r3, #64	; 0x40
 8007e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e38:	f107 0308 	add.w	r3, r7, #8
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fe47 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e48:	2137      	movs	r1, #55	; 0x37
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f918 	bl	8008080 <SDMMC_GetCmdResp1>
 8007e50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e52:	69fb      	ldr	r3, [r7, #28]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3720      	adds	r7, #32
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007e72:	2329      	movs	r3, #41	; 0x29
 8007e74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e76:	2340      	movs	r3, #64	; 0x40
 8007e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e84:	f107 0308 	add.w	r3, r7, #8
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff fe21 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa2b 	bl	80082ec <SDMMC_GetCmdResp3>
 8007e96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e98:	69fb      	ldr	r3, [r7, #28]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b088      	sub	sp, #32
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007eb0:	2306      	movs	r3, #6
 8007eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ec2:	f107 0308 	add.w	r3, r7, #8
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff fe02 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed2:	2106      	movs	r1, #6
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8d3 	bl	8008080 <SDMMC_GetCmdResp1>
 8007eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007edc:	69fb      	ldr	r3, [r7, #28]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b088      	sub	sp, #32
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007ef2:	2333      	movs	r3, #51	; 0x33
 8007ef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ef6:	2340      	movs	r3, #64	; 0x40
 8007ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007efa:	2300      	movs	r3, #0
 8007efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f04:	f107 0308 	add.w	r3, r7, #8
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fde1 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f14:	2133      	movs	r1, #51	; 0x33
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8b2 	bl	8008080 <SDMMC_GetCmdResp1>
 8007f1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f1e:	69fb      	ldr	r3, [r7, #28]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3720      	adds	r7, #32
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007f34:	2302      	movs	r3, #2
 8007f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007f38:	23c0      	movs	r3, #192	; 0xc0
 8007f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f46:	f107 0308 	add.w	r3, r7, #8
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff fdc0 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f982 	bl	800825c <SDMMC_GetCmdResp2>
 8007f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3720      	adds	r7, #32
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007f72:	2309      	movs	r3, #9
 8007f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007f76:	23c0      	movs	r3, #192	; 0xc0
 8007f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f84:	f107 0308 	add.w	r3, r7, #8
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7ff fda1 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f963 	bl	800825c <SDMMC_GetCmdResp2>
 8007f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f98:	69fb      	ldr	r3, [r7, #28]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b088      	sub	sp, #32
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fb4:	2340      	movs	r3, #64	; 0x40
 8007fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fc2:	f107 0308 	add.w	r3, r7, #8
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff fd82 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	2103      	movs	r1, #3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9c8 	bl	8008368 <SDMMC_GetCmdResp6>
 8007fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fda:	69fb      	ldr	r3, [r7, #28]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3720      	adds	r7, #32
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007ff2:	230d      	movs	r3, #13
 8007ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008002:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008004:	f107 0308 	add.w	r3, r7, #8
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff fd61 	bl	8007ad2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008010:	f241 3288 	movw	r2, #5000	; 0x1388
 8008014:	210d      	movs	r1, #13
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f832 	bl	8008080 <SDMMC_GetCmdResp1>
 800801c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800801e:	69fb      	ldr	r3, [r7, #28]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3720      	adds	r7, #32
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008030:	4b11      	ldr	r3, [pc, #68]	; (8008078 <SDMMC_GetCmdError+0x50>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a11      	ldr	r2, [pc, #68]	; (800807c <SDMMC_GetCmdError+0x54>)
 8008036:	fba2 2303 	umull	r2, r3, r2, r3
 800803a:	0a5b      	lsrs	r3, r3, #9
 800803c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008040:	fb02 f303 	mul.w	r3, r2, r3
 8008044:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1e5a      	subs	r2, r3, #1
 800804a:	60fa      	str	r2, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008050:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008054:	e009      	b.n	800806a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0f1      	beq.n	8008046 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	22c5      	movs	r2, #197	; 0xc5
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000048 	.word	0x20000048
 800807c:	10624dd3 	.word	0x10624dd3

08008080 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	460b      	mov	r3, r1
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800808e:	4b70      	ldr	r3, [pc, #448]	; (8008250 <SDMMC_GetCmdResp1+0x1d0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a70      	ldr	r2, [pc, #448]	; (8008254 <SDMMC_GetCmdResp1+0x1d4>)
 8008094:	fba2 2303 	umull	r2, r3, r2, r3
 8008098:	0a5a      	lsrs	r2, r3, #9
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	fb02 f303 	mul.w	r3, r2, r3
 80080a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	1e5a      	subs	r2, r3, #1
 80080a6:	61fa      	str	r2, [r7, #28]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d102      	bne.n	80080b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080b0:	e0c9      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0ef      	beq.n	80080a2 <SDMMC_GetCmdResp1+0x22>
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1ea      	bne.n	80080a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d004      	beq.n	80080e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2204      	movs	r2, #4
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080de:	2304      	movs	r3, #4
 80080e0:	e0b1      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d004      	beq.n	80080f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e0a6      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	22c5      	movs	r2, #197	; 0xc5
 80080fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff fd11 	bl	8007b26 <SDIO_GetCommandResponse>
 8008104:	4603      	mov	r3, r0
 8008106:	461a      	mov	r2, r3
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	4293      	cmp	r3, r2
 800810c:	d001      	beq.n	8008112 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800810e:	2301      	movs	r3, #1
 8008110:	e099      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008112:	2100      	movs	r1, #0
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f7ff fd13 	bl	8007b40 <SDIO_GetResponse>
 800811a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	4b4e      	ldr	r3, [pc, #312]	; (8008258 <SDMMC_GetCmdResp1+0x1d8>)
 8008120:	4013      	ands	r3, r2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008126:	2300      	movs	r3, #0
 8008128:	e08d      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	da02      	bge.n	8008136 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008134:	e087      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008140:	2340      	movs	r3, #64	; 0x40
 8008142:	e080      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800814e:	2380      	movs	r3, #128	; 0x80
 8008150:	e079      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800815c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008160:	e071      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800816c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008170:	e069      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800817c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008180:	e061      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800818c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008190:	e059      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800819c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081a0:	e051      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80081ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081b0:	e049      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80081bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80081c0:	e041      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80081cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081d0:	e039      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80081dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081e0:	e031      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80081ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80081f0:	e029      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80081fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008200:	e021      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800820c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008210:	e019      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800821c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008220:	e011      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800822c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008230:	e009      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800823c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008240:	e001      	b.n	8008246 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	3720      	adds	r7, #32
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000048 	.word	0x20000048
 8008254:	10624dd3 	.word	0x10624dd3
 8008258:	fdffe008 	.word	0xfdffe008

0800825c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008264:	4b1f      	ldr	r3, [pc, #124]	; (80082e4 <SDMMC_GetCmdResp2+0x88>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1f      	ldr	r2, [pc, #124]	; (80082e8 <SDMMC_GetCmdResp2+0x8c>)
 800826a:	fba2 2303 	umull	r2, r3, r2, r3
 800826e:	0a5b      	lsrs	r3, r3, #9
 8008270:	f241 3288 	movw	r2, #5000	; 0x1388
 8008274:	fb02 f303 	mul.w	r3, r2, r3
 8008278:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	1e5a      	subs	r2, r3, #1
 800827e:	60fa      	str	r2, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008284:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008288:	e026      	b.n	80082d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0ef      	beq.n	800827a <SDMMC_GetCmdResp2+0x1e>
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1ea      	bne.n	800827a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2204      	movs	r2, #4
 80082b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082b6:	2304      	movs	r3, #4
 80082b8:	e00e      	b.n	80082d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d004      	beq.n	80082d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e003      	b.n	80082d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	22c5      	movs	r2, #197	; 0xc5
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	20000048 	.word	0x20000048
 80082e8:	10624dd3 	.word	0x10624dd3

080082ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082f4:	4b1a      	ldr	r3, [pc, #104]	; (8008360 <SDMMC_GetCmdResp3+0x74>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <SDMMC_GetCmdResp3+0x78>)
 80082fa:	fba2 2303 	umull	r2, r3, r2, r3
 80082fe:	0a5b      	lsrs	r3, r3, #9
 8008300:	f241 3288 	movw	r2, #5000	; 0x1388
 8008304:	fb02 f303 	mul.w	r3, r2, r3
 8008308:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	1e5a      	subs	r2, r3, #1
 800830e:	60fa      	str	r2, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008318:	e01b      	b.n	8008352 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0ef      	beq.n	800830a <SDMMC_GetCmdResp3+0x1e>
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1ea      	bne.n	800830a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2204      	movs	r2, #4
 8008344:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008346:	2304      	movs	r3, #4
 8008348:	e003      	b.n	8008352 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	22c5      	movs	r2, #197	; 0xc5
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20000048 	.word	0x20000048
 8008364:	10624dd3 	.word	0x10624dd3

08008368 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	460b      	mov	r3, r1
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008376:	4b35      	ldr	r3, [pc, #212]	; (800844c <SDMMC_GetCmdResp6+0xe4>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a35      	ldr	r2, [pc, #212]	; (8008450 <SDMMC_GetCmdResp6+0xe8>)
 800837c:	fba2 2303 	umull	r2, r3, r2, r3
 8008380:	0a5b      	lsrs	r3, r3, #9
 8008382:	f241 3288 	movw	r2, #5000	; 0x1388
 8008386:	fb02 f303 	mul.w	r3, r2, r3
 800838a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	1e5a      	subs	r2, r3, #1
 8008390:	61fa      	str	r2, [r7, #28]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008396:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800839a:	e052      	b.n	8008442 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0ef      	beq.n	800838c <SDMMC_GetCmdResp6+0x24>
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1ea      	bne.n	800838c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	f003 0304 	and.w	r3, r3, #4
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d004      	beq.n	80083cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2204      	movs	r2, #4
 80083c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083c8:	2304      	movs	r3, #4
 80083ca:	e03a      	b.n	8008442 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2201      	movs	r2, #1
 80083dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083de:	2301      	movs	r3, #1
 80083e0:	e02f      	b.n	8008442 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff fb9f 	bl	8007b26 <SDIO_GetCommandResponse>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	7afb      	ldrb	r3, [r7, #11]
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d001      	beq.n	80083f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e025      	b.n	8008442 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	22c5      	movs	r2, #197	; 0xc5
 80083fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80083fc:	2100      	movs	r1, #0
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff fb9e 	bl	8007b40 <SDIO_GetResponse>
 8008404:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d106      	bne.n	800841e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	0c1b      	lsrs	r3, r3, #16
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800841a:	2300      	movs	r3, #0
 800841c:	e011      	b.n	8008442 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800842c:	e009      	b.n	8008442 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800843c:	e001      	b.n	8008442 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800843e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008442:	4618      	mov	r0, r3
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20000048 	.word	0x20000048
 8008450:	10624dd3 	.word	0x10624dd3

08008454 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800845c:	4b22      	ldr	r3, [pc, #136]	; (80084e8 <SDMMC_GetCmdResp7+0x94>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a22      	ldr	r2, [pc, #136]	; (80084ec <SDMMC_GetCmdResp7+0x98>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	0a5b      	lsrs	r3, r3, #9
 8008468:	f241 3288 	movw	r2, #5000	; 0x1388
 800846c:	fb02 f303 	mul.w	r3, r2, r3
 8008470:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	1e5a      	subs	r2, r3, #1
 8008476:	60fa      	str	r2, [r7, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800847c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008480:	e02c      	b.n	80084dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008486:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0ef      	beq.n	8008472 <SDMMC_GetCmdResp7+0x1e>
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1ea      	bne.n	8008472 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2204      	movs	r2, #4
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084ae:	2304      	movs	r3, #4
 80084b0:	e014      	b.n	80084dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e009      	b.n	80084dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2240      	movs	r2, #64	; 0x40
 80084d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80084da:	2300      	movs	r3, #0
  
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	20000048 	.word	0x20000048
 80084ec:	10624dd3 	.word	0x10624dd3

080084f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084f0:	b084      	sub	sp, #16
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	f107 001c 	add.w	r0, r7, #28
 80084fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	2b01      	cmp	r3, #1
 8008506:	d122      	bne.n	800854e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800851c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008532:	2b01      	cmp	r3, #1
 8008534:	d105      	bne.n	8008542 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fac6 	bl	8009ad4 <USB_CoreReset>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]
 800854c:	e01a      	b.n	8008584 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 faba 	bl	8009ad4 <USB_CoreReset>
 8008560:	4603      	mov	r3, r0
 8008562:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d106      	bne.n	8008578 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	639a      	str	r2, [r3, #56]	; 0x38
 8008576:	e005      	b.n	8008584 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	2b01      	cmp	r3, #1
 8008588:	d10b      	bne.n	80085a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f043 0206 	orr.w	r2, r3, #6
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f043 0220 	orr.w	r2, r3, #32
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085ae:	b004      	add	sp, #16
 80085b0:	4770      	bx	lr
	...

080085b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	4613      	mov	r3, r2
 80085c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d165      	bne.n	8008694 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4a41      	ldr	r2, [pc, #260]	; (80086d0 <USB_SetTurnaroundTime+0x11c>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d906      	bls.n	80085de <USB_SetTurnaroundTime+0x2a>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4a40      	ldr	r2, [pc, #256]	; (80086d4 <USB_SetTurnaroundTime+0x120>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d202      	bcs.n	80085de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80085d8:	230f      	movs	r3, #15
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	e062      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	4a3c      	ldr	r2, [pc, #240]	; (80086d4 <USB_SetTurnaroundTime+0x120>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d306      	bcc.n	80085f4 <USB_SetTurnaroundTime+0x40>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	4a3b      	ldr	r2, [pc, #236]	; (80086d8 <USB_SetTurnaroundTime+0x124>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d202      	bcs.n	80085f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80085ee:	230e      	movs	r3, #14
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	e057      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4a38      	ldr	r2, [pc, #224]	; (80086d8 <USB_SetTurnaroundTime+0x124>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d306      	bcc.n	800860a <USB_SetTurnaroundTime+0x56>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4a37      	ldr	r2, [pc, #220]	; (80086dc <USB_SetTurnaroundTime+0x128>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d202      	bcs.n	800860a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008604:	230d      	movs	r3, #13
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e04c      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	4a33      	ldr	r2, [pc, #204]	; (80086dc <USB_SetTurnaroundTime+0x128>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d306      	bcc.n	8008620 <USB_SetTurnaroundTime+0x6c>
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4a32      	ldr	r2, [pc, #200]	; (80086e0 <USB_SetTurnaroundTime+0x12c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d802      	bhi.n	8008620 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800861a:	230c      	movs	r3, #12
 800861c:	617b      	str	r3, [r7, #20]
 800861e:	e041      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4a2f      	ldr	r2, [pc, #188]	; (80086e0 <USB_SetTurnaroundTime+0x12c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d906      	bls.n	8008636 <USB_SetTurnaroundTime+0x82>
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4a2e      	ldr	r2, [pc, #184]	; (80086e4 <USB_SetTurnaroundTime+0x130>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d802      	bhi.n	8008636 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008630:	230b      	movs	r3, #11
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e036      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	4a2a      	ldr	r2, [pc, #168]	; (80086e4 <USB_SetTurnaroundTime+0x130>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d906      	bls.n	800864c <USB_SetTurnaroundTime+0x98>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	4a29      	ldr	r2, [pc, #164]	; (80086e8 <USB_SetTurnaroundTime+0x134>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d802      	bhi.n	800864c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008646:	230a      	movs	r3, #10
 8008648:	617b      	str	r3, [r7, #20]
 800864a:	e02b      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4a26      	ldr	r2, [pc, #152]	; (80086e8 <USB_SetTurnaroundTime+0x134>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d906      	bls.n	8008662 <USB_SetTurnaroundTime+0xae>
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	4a25      	ldr	r2, [pc, #148]	; (80086ec <USB_SetTurnaroundTime+0x138>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d202      	bcs.n	8008662 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800865c:	2309      	movs	r3, #9
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	e020      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	4a21      	ldr	r2, [pc, #132]	; (80086ec <USB_SetTurnaroundTime+0x138>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d306      	bcc.n	8008678 <USB_SetTurnaroundTime+0xc4>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	4a20      	ldr	r2, [pc, #128]	; (80086f0 <USB_SetTurnaroundTime+0x13c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d802      	bhi.n	8008678 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008672:	2308      	movs	r3, #8
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	e015      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4a1d      	ldr	r2, [pc, #116]	; (80086f0 <USB_SetTurnaroundTime+0x13c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d906      	bls.n	800868e <USB_SetTurnaroundTime+0xda>
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	4a1c      	ldr	r2, [pc, #112]	; (80086f4 <USB_SetTurnaroundTime+0x140>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d202      	bcs.n	800868e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008688:	2307      	movs	r3, #7
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	e00a      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800868e:	2306      	movs	r3, #6
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	e007      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d102      	bne.n	80086a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800869a:	2309      	movs	r3, #9
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e001      	b.n	80086a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80086a0:	2309      	movs	r3, #9
 80086a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	029b      	lsls	r3, r3, #10
 80086b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80086bc:	431a      	orrs	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	00d8acbf 	.word	0x00d8acbf
 80086d4:	00e4e1c0 	.word	0x00e4e1c0
 80086d8:	00f42400 	.word	0x00f42400
 80086dc:	01067380 	.word	0x01067380
 80086e0:	011a499f 	.word	0x011a499f
 80086e4:	01312cff 	.word	0x01312cff
 80086e8:	014ca43f 	.word	0x014ca43f
 80086ec:	016e3600 	.word	0x016e3600
 80086f0:	01a6ab1f 	.word	0x01a6ab1f
 80086f4:	01e84800 	.word	0x01e84800

080086f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f043 0201 	orr.w	r2, r3, #1
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f023 0201 	bic.w	r2, r3, #1
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008754:	78fb      	ldrb	r3, [r7, #3]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d106      	bne.n	8008768 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60da      	str	r2, [r3, #12]
 8008766:	e00b      	b.n	8008780 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60da      	str	r2, [r3, #12]
 800877a:	e001      	b.n	8008780 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e003      	b.n	8008788 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008780:	2032      	movs	r0, #50	; 0x32
 8008782:	f7fa fb59 	bl	8002e38 <HAL_Delay>

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008790:	b084      	sub	sp, #16
 8008792:	b580      	push	{r7, lr}
 8008794:	b086      	sub	sp, #24
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800879e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087aa:	2300      	movs	r3, #0
 80087ac:	613b      	str	r3, [r7, #16]
 80087ae:	e009      	b.n	80087c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	3340      	adds	r3, #64	; 0x40
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	3301      	adds	r3, #1
 80087c2:	613b      	str	r3, [r7, #16]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	2b0e      	cmp	r3, #14
 80087c8:	d9f2      	bls.n	80087b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d11c      	bne.n	800880a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087de:	f043 0302 	orr.w	r3, r3, #2
 80087e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008800:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	639a      	str	r2, [r3, #56]	; 0x38
 8008808:	e00b      	b.n	8008822 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008828:	461a      	mov	r2, r3
 800882a:	2300      	movs	r3, #0
 800882c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008834:	4619      	mov	r1, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883c:	461a      	mov	r2, r3
 800883e:	680b      	ldr	r3, [r1, #0]
 8008840:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	2b01      	cmp	r3, #1
 8008846:	d10c      	bne.n	8008862 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d104      	bne.n	8008858 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800884e:	2100      	movs	r1, #0
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f949 	bl	8008ae8 <USB_SetDevSpeed>
 8008856:	e008      	b.n	800886a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008858:	2101      	movs	r1, #1
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f944 	bl	8008ae8 <USB_SetDevSpeed>
 8008860:	e003      	b.n	800886a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008862:	2103      	movs	r1, #3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f93f 	bl	8008ae8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800886a:	2110      	movs	r1, #16
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f8f3 	bl	8008a58 <USB_FlushTxFifo>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f911 	bl	8008aa4 <USB_FlushRxFifo>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008892:	461a      	mov	r2, r3
 8008894:	2300      	movs	r3, #0
 8008896:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889e:	461a      	mov	r2, r3
 80088a0:	2300      	movs	r3, #0
 80088a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088aa:	461a      	mov	r2, r3
 80088ac:	2300      	movs	r3, #0
 80088ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088b0:	2300      	movs	r3, #0
 80088b2:	613b      	str	r3, [r7, #16]
 80088b4:	e043      	b.n	800893e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088cc:	d118      	bne.n	8008900 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e0:	461a      	mov	r2, r3
 80088e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	e013      	b.n	8008912 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f6:	461a      	mov	r2, r3
 80088f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	e008      	b.n	8008912 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890c:	461a      	mov	r2, r3
 800890e:	2300      	movs	r3, #0
 8008910:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800891e:	461a      	mov	r2, r3
 8008920:	2300      	movs	r3, #0
 8008922:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008930:	461a      	mov	r2, r3
 8008932:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008936:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	3301      	adds	r3, #1
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	429a      	cmp	r2, r3
 8008944:	d3b7      	bcc.n	80088b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008946:	2300      	movs	r3, #0
 8008948:	613b      	str	r3, [r7, #16]
 800894a:	e043      	b.n	80089d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800895e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008962:	d118      	bne.n	8008996 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008976:	461a      	mov	r2, r3
 8008978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	e013      	b.n	80089a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898c:	461a      	mov	r2, r3
 800898e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008992:	6013      	str	r3, [r2, #0]
 8008994:	e008      	b.n	80089a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a2:	461a      	mov	r2, r3
 80089a4:	2300      	movs	r3, #0
 80089a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	461a      	mov	r2, r3
 80089b6:	2300      	movs	r3, #0
 80089b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c6:	461a      	mov	r2, r3
 80089c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	3301      	adds	r3, #1
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d3b7      	bcc.n	800894c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	f043 0210 	orr.w	r2, r3, #16
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	699a      	ldr	r2, [r3, #24]
 8008a14:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <USB_DevInit+0x2c4>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	f043 0208 	orr.w	r2, r3, #8
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d107      	bne.n	8008a44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a3c:	f043 0304 	orr.w	r3, r3, #4
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a50:	b004      	add	sp, #16
 8008a52:	4770      	bx	lr
 8008a54:	803c3800 	.word	0x803c3800

08008a58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	019b      	lsls	r3, r3, #6
 8008a6a:	f043 0220 	orr.w	r2, r3, #32
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <USB_FlushTxFifo+0x48>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d901      	bls.n	8008a84 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e006      	b.n	8008a92 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d0f0      	beq.n	8008a72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	00030d40 	.word	0x00030d40

08008aa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2210      	movs	r2, #16
 8008ab4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4a09      	ldr	r2, [pc, #36]	; (8008ae4 <USB_FlushRxFifo+0x40>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d901      	bls.n	8008ac8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e006      	b.n	8008ad6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f003 0310 	and.w	r3, r3, #16
 8008ad0:	2b10      	cmp	r3, #16
 8008ad2:	d0f0      	beq.n	8008ab6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	00030d40 	.word	0x00030d40

08008ae8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b087      	sub	sp, #28
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f003 0306 	and.w	r3, r3, #6
 8008b32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
 8008b3e:	e00a      	b.n	8008b56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d002      	beq.n	8008b4c <USB_GetDevSpeed+0x32>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b06      	cmp	r3, #6
 8008b4a:	d102      	bne.n	8008b52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	75fb      	strb	r3, [r7, #23]
 8008b50:	e001      	b.n	8008b56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b52:	230f      	movs	r3, #15
 8008b54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d13a      	bne.n	8008bf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b86:	69da      	ldr	r2, [r3, #28]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	f003 030f 	and.w	r3, r3, #15
 8008b90:	2101      	movs	r1, #1
 8008b92:	fa01 f303 	lsl.w	r3, r1, r3
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	68f9      	ldr	r1, [r7, #12]
 8008b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d155      	bne.n	8008c64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	78db      	ldrb	r3, [r3, #3]
 8008bd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	059b      	lsls	r3, r3, #22
 8008bda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	e036      	b.n	8008c64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfc:	69da      	ldr	r2, [r3, #28]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	f003 030f 	and.w	r3, r3, #15
 8008c06:	2101      	movs	r1, #1
 8008c08:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c14:	4313      	orrs	r3, r2
 8008c16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d11a      	bne.n	8008c64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	78db      	ldrb	r3, [r3, #3]
 8008c48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c4a:	430b      	orrs	r3, r1
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	0151      	lsls	r1, r2, #5
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	440a      	add	r2, r1
 8008c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	785b      	ldrb	r3, [r3, #1]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d161      	bne.n	8008d54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ca6:	d11f      	bne.n	8008ce8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	0151      	lsls	r1, r2, #5
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	0151      	lsls	r1, r2, #5
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	440a      	add	r2, r1
 8008cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	43db      	mvns	r3, r3
 8008d02:	68f9      	ldr	r1, [r7, #12]
 8008d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d08:	4013      	ands	r3, r2
 8008d0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d12:	69da      	ldr	r2, [r3, #28]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	43db      	mvns	r3, r3
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	0159      	lsls	r1, r3, #5
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	440b      	add	r3, r1
 8008d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4b35      	ldr	r3, [pc, #212]	; (8008e24 <USB_DeactivateEndpoint+0x1b0>)
 8008d4e:	4013      	ands	r3, r2
 8008d50:	600b      	str	r3, [r1, #0]
 8008d52:	e060      	b.n	8008e16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d6a:	d11f      	bne.n	8008dac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	0151      	lsls	r1, r2, #5
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	440a      	add	r2, r1
 8008da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008daa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc2:	041b      	lsls	r3, r3, #16
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dcc:	4013      	ands	r3, r2
 8008dce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd6:	69da      	ldr	r2, [r3, #28]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 030f 	and.w	r3, r3, #15
 8008de0:	2101      	movs	r1, #1
 8008de2:	fa01 f303 	lsl.w	r3, r1, r3
 8008de6:	041b      	lsls	r3, r3, #16
 8008de8:	43db      	mvns	r3, r3
 8008dea:	68f9      	ldr	r1, [r7, #12]
 8008dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008df0:	4013      	ands	r3, r2
 8008df2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	0159      	lsls	r1, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	440b      	add	r3, r1
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <USB_DeactivateEndpoint+0x1b4>)
 8008e12:	4013      	ands	r3, r2
 8008e14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	ec337800 	.word	0xec337800
 8008e28:	eff37800 	.word	0xeff37800

08008e2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08a      	sub	sp, #40	; 0x28
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	785b      	ldrb	r3, [r3, #1]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	f040 815c 	bne.w	8009106 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d132      	bne.n	8008ebc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	0151      	lsls	r1, r2, #5
 8008e68:	69fa      	ldr	r2, [r7, #28]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	0151      	lsls	r1, r2, #5
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	440a      	add	r2, r1
 8008e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	0151      	lsls	r1, r2, #5
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	440a      	add	r2, r1
 8008eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb4:	0cdb      	lsrs	r3, r3, #19
 8008eb6:	04db      	lsls	r3, r3, #19
 8008eb8:	6113      	str	r3, [r2, #16]
 8008eba:	e074      	b.n	8008fa6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	0151      	lsls	r1, r2, #5
 8008ece:	69fa      	ldr	r2, [r7, #28]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed6:	0cdb      	lsrs	r3, r3, #19
 8008ed8:	04db      	lsls	r3, r3, #19
 8008eda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008efa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008efe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0c:	691a      	ldr	r2, [r3, #16]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6959      	ldr	r1, [r3, #20]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	440b      	add	r3, r1
 8008f18:	1e59      	subs	r1, r3, #1
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f22:	04d9      	lsls	r1, r3, #19
 8008f24:	4b9d      	ldr	r3, [pc, #628]	; (800919c <USB_EPStartXfer+0x370>)
 8008f26:	400b      	ands	r3, r1
 8008f28:	69b9      	ldr	r1, [r7, #24]
 8008f2a:	0148      	lsls	r0, r1, #5
 8008f2c:	69f9      	ldr	r1, [r7, #28]
 8008f2e:	4401      	add	r1, r0
 8008f30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f34:	4313      	orrs	r3, r2
 8008f36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	691a      	ldr	r2, [r3, #16]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f4e:	69b9      	ldr	r1, [r7, #24]
 8008f50:	0148      	lsls	r0, r1, #5
 8008f52:	69f9      	ldr	r1, [r7, #28]
 8008f54:	4401      	add	r1, r0
 8008f56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	78db      	ldrb	r3, [r3, #3]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d11f      	bne.n	8008fa6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	69ba      	ldr	r2, [r7, #24]
 8008f76:	0151      	lsls	r1, r2, #5
 8008f78:	69fa      	ldr	r2, [r7, #28]
 8008f7a:	440a      	add	r2, r1
 8008f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008f84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	0151      	lsls	r1, r2, #5
 8008f98:	69fa      	ldr	r2, [r7, #28]
 8008f9a:	440a      	add	r2, r1
 8008f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fa4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d14b      	bne.n	8009044 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d009      	beq.n	8008fc8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	78db      	ldrb	r3, [r3, #3]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d128      	bne.n	8009022 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d110      	bne.n	8009002 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	0151      	lsls	r1, r2, #5
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	440a      	add	r2, r1
 8008ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	e00f      	b.n	8009022 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	4413      	add	r3, r2
 800900a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	0151      	lsls	r1, r2, #5
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	440a      	add	r2, r1
 8009018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800901c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009020:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	0151      	lsls	r1, r2, #5
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	440a      	add	r2, r1
 8009038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800903c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	e12f      	b.n	80092a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	4413      	add	r3, r2
 800904c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	0151      	lsls	r1, r2, #5
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	440a      	add	r2, r1
 800905a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800905e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009062:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	78db      	ldrb	r3, [r3, #3]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d015      	beq.n	8009098 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 8117 	beq.w	80092a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	2101      	movs	r1, #1
 8009088:	fa01 f303 	lsl.w	r3, r1, r3
 800908c:	69f9      	ldr	r1, [r7, #28]
 800908e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009092:	4313      	orrs	r3, r2
 8009094:	634b      	str	r3, [r1, #52]	; 0x34
 8009096:	e105      	b.n	80092a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d110      	bne.n	80090ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	0151      	lsls	r1, r2, #5
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	440a      	add	r2, r1
 80090be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	e00f      	b.n	80090ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	0151      	lsls	r1, r2, #5
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	440a      	add	r2, r1
 80090e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	68d9      	ldr	r1, [r3, #12]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	781a      	ldrb	r2, [r3, #0]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	b298      	uxth	r0, r3
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	4603      	mov	r3, r0
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 fa2b 	bl	800955a <USB_WritePacket>
 8009104:	e0ce      	b.n	80092a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	0151      	lsls	r1, r2, #5
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	440a      	add	r2, r1
 800911c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009120:	0cdb      	lsrs	r3, r3, #19
 8009122:	04db      	lsls	r3, r3, #19
 8009124:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	0151      	lsls	r1, r2, #5
 8009138:	69fa      	ldr	r2, [r7, #28]
 800913a:	440a      	add	r2, r1
 800913c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009140:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009144:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009148:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d126      	bne.n	80091a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009168:	69b9      	ldr	r1, [r7, #24]
 800916a:	0148      	lsls	r0, r1, #5
 800916c:	69f9      	ldr	r1, [r7, #28]
 800916e:	4401      	add	r1, r0
 8009170:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009174:	4313      	orrs	r3, r2
 8009176:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009196:	6113      	str	r3, [r2, #16]
 8009198:	e036      	b.n	8009208 <USB_EPStartXfer+0x3dc>
 800919a:	bf00      	nop
 800919c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	695a      	ldr	r2, [r3, #20]
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	4413      	add	r3, r2
 80091aa:	1e5a      	subs	r2, r3, #1
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c2:	691a      	ldr	r2, [r3, #16]
 80091c4:	8afb      	ldrh	r3, [r7, #22]
 80091c6:	04d9      	lsls	r1, r3, #19
 80091c8:	4b39      	ldr	r3, [pc, #228]	; (80092b0 <USB_EPStartXfer+0x484>)
 80091ca:	400b      	ands	r3, r1
 80091cc:	69b9      	ldr	r1, [r7, #24]
 80091ce:	0148      	lsls	r0, r1, #5
 80091d0:	69f9      	ldr	r1, [r7, #28]
 80091d2:	4401      	add	r1, r0
 80091d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091d8:	4313      	orrs	r3, r2
 80091da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e8:	691a      	ldr	r2, [r3, #16]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	8af9      	ldrh	r1, [r7, #22]
 80091f0:	fb01 f303 	mul.w	r3, r1, r3
 80091f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091f8:	69b9      	ldr	r1, [r7, #24]
 80091fa:	0148      	lsls	r0, r1, #5
 80091fc:	69f9      	ldr	r1, [r7, #28]
 80091fe:	4401      	add	r1, r0
 8009200:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009204:	4313      	orrs	r3, r2
 8009206:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d10d      	bne.n	800922a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d009      	beq.n	800922a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	68d9      	ldr	r1, [r3, #12]
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009226:	460a      	mov	r2, r1
 8009228:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	78db      	ldrb	r3, [r3, #3]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d128      	bne.n	8009284 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923e:	2b00      	cmp	r3, #0
 8009240:	d110      	bne.n	8009264 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	0151      	lsls	r1, r2, #5
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	440a      	add	r2, r1
 8009258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800925c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	e00f      	b.n	8009284 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	0151      	lsls	r1, r2, #5
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	440a      	add	r2, r1
 800927a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009282:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	0151      	lsls	r1, r2, #5
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	440a      	add	r2, r1
 800929a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3720      	adds	r7, #32
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	1ff80000 	.word	0x1ff80000

080092b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	785b      	ldrb	r3, [r3, #1]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	f040 80cd 	bne.w	8009470 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d132      	bne.n	8009344 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	693a      	ldr	r2, [r7, #16]
 80092ee:	0151      	lsls	r1, r2, #5
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	440a      	add	r2, r1
 80092f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009300:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	0151      	lsls	r1, r2, #5
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	440a      	add	r2, r1
 8009318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009320:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	4413      	add	r3, r2
 800932a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	0151      	lsls	r1, r2, #5
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	440a      	add	r2, r1
 8009338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933c:	0cdb      	lsrs	r3, r3, #19
 800933e:	04db      	lsls	r3, r3, #19
 8009340:	6113      	str	r3, [r2, #16]
 8009342:	e04e      	b.n	80093e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935e:	0cdb      	lsrs	r3, r3, #19
 8009360:	04db      	lsls	r3, r3, #19
 8009362:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	0151      	lsls	r1, r2, #5
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	440a      	add	r2, r1
 800937a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800937e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009382:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009386:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	695a      	ldr	r2, [r3, #20]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	429a      	cmp	r2, r3
 8009392:	d903      	bls.n	800939c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	0151      	lsls	r1, r2, #5
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	440a      	add	r2, r1
 80093b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093d2:	6939      	ldr	r1, [r7, #16]
 80093d4:	0148      	lsls	r0, r1, #5
 80093d6:	6979      	ldr	r1, [r7, #20]
 80093d8:	4401      	add	r1, r0
 80093da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093de:	4313      	orrs	r3, r2
 80093e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80093e2:	79fb      	ldrb	r3, [r7, #7]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d11e      	bne.n	8009426 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fc:	461a      	mov	r2, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	4413      	add	r3, r2
 800940c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	0151      	lsls	r1, r2, #5
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	440a      	add	r2, r1
 800941a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800941e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	e092      	b.n	800954c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009440:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009444:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d07e      	beq.n	800954c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	f003 030f 	and.w	r3, r3, #15
 800945e:	2101      	movs	r1, #1
 8009460:	fa01 f303 	lsl.w	r3, r1, r3
 8009464:	6979      	ldr	r1, [r7, #20]
 8009466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800946a:	4313      	orrs	r3, r2
 800946c:	634b      	str	r3, [r1, #52]	; 0x34
 800946e:	e06d      	b.n	800954c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	0151      	lsls	r1, r2, #5
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	440a      	add	r2, r1
 8009486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800948a:	0cdb      	lsrs	r3, r3, #19
 800948c:	04db      	lsls	r3, r3, #19
 800948e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	0151      	lsls	r1, r2, #5
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	440a      	add	r2, r1
 80094a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	0151      	lsls	r1, r2, #5
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	440a      	add	r2, r1
 80094da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f0:	691a      	ldr	r2, [r3, #16]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094fa:	6939      	ldr	r1, [r7, #16]
 80094fc:	0148      	lsls	r0, r1, #5
 80094fe:	6979      	ldr	r1, [r7, #20]
 8009500:	4401      	add	r1, r0
 8009502:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009506:	4313      	orrs	r3, r2
 8009508:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d10d      	bne.n	800952c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d009      	beq.n	800952c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	68d9      	ldr	r1, [r3, #12]
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009528:	460a      	mov	r2, r1
 800952a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	4413      	add	r3, r2
 8009534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	0151      	lsls	r1, r2, #5
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	440a      	add	r2, r1
 8009542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009546:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800954a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800955a:	b480      	push	{r7}
 800955c:	b089      	sub	sp, #36	; 0x24
 800955e:	af00      	add	r7, sp, #0
 8009560:	60f8      	str	r0, [r7, #12]
 8009562:	60b9      	str	r1, [r7, #8]
 8009564:	4611      	mov	r1, r2
 8009566:	461a      	mov	r2, r3
 8009568:	460b      	mov	r3, r1
 800956a:	71fb      	strb	r3, [r7, #7]
 800956c:	4613      	mov	r3, r2
 800956e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009578:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800957c:	2b00      	cmp	r3, #0
 800957e:	d11a      	bne.n	80095b6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009580:	88bb      	ldrh	r3, [r7, #4]
 8009582:	3303      	adds	r3, #3
 8009584:	089b      	lsrs	r3, r3, #2
 8009586:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009588:	2300      	movs	r3, #0
 800958a:	61bb      	str	r3, [r7, #24]
 800958c:	e00f      	b.n	80095ae <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	031a      	lsls	r2, r3, #12
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	4413      	add	r3, r2
 8009596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959a:	461a      	mov	r2, r3
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	3304      	adds	r3, #4
 80095a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	3301      	adds	r3, #1
 80095ac:	61bb      	str	r3, [r7, #24]
 80095ae:	69ba      	ldr	r2, [r7, #24]
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d3eb      	bcc.n	800958e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3724      	adds	r7, #36	; 0x24
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b089      	sub	sp, #36	; 0x24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	4613      	mov	r3, r2
 80095d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	3303      	adds	r3, #3
 80095de:	089b      	lsrs	r3, r3, #2
 80095e0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80095e2:	2300      	movs	r3, #0
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	e00b      	b.n	8009600 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	3304      	adds	r3, #4
 80095f8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	3301      	adds	r3, #1
 80095fe:	61bb      	str	r3, [r7, #24]
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	429a      	cmp	r2, r3
 8009606:	d3ef      	bcc.n	80095e8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009608:	69fb      	ldr	r3, [r7, #28]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3724      	adds	r7, #36	; 0x24
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009616:	b480      	push	{r7}
 8009618:	b085      	sub	sp, #20
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d12c      	bne.n	800968c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	db12      	blt.n	800966a <USB_EPSetStall+0x54>
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00f      	beq.n	800966a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009664:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009668:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	0151      	lsls	r1, r2, #5
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	440a      	add	r2, r1
 8009680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009684:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	e02b      	b.n	80096e4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	db12      	blt.n	80096c4 <USB_EPSetStall+0xae>
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00f      	beq.n	80096c4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	015a      	lsls	r2, r3, #5
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4413      	add	r3, r2
 80096ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	0151      	lsls	r1, r2, #5
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	440a      	add	r2, r1
 80096ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096c2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	0151      	lsls	r1, r2, #5
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	440a      	add	r2, r1
 80096da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b085      	sub	sp, #20
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d128      	bne.n	8009760 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	0151      	lsls	r1, r2, #5
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	440a      	add	r2, r1
 8009724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009728:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800972c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	78db      	ldrb	r3, [r3, #3]
 8009732:	2b03      	cmp	r3, #3
 8009734:	d003      	beq.n	800973e <USB_EPClearStall+0x4c>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	78db      	ldrb	r3, [r3, #3]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d138      	bne.n	80097b0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	0151      	lsls	r1, r2, #5
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	440a      	add	r2, r1
 8009754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	e027      	b.n	80097b0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68ba      	ldr	r2, [r7, #8]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800977a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800977e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	78db      	ldrb	r3, [r3, #3]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d003      	beq.n	8009790 <USB_EPClearStall+0x9e>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	78db      	ldrb	r3, [r3, #3]
 800978c:	2b02      	cmp	r3, #2
 800978e:	d10f      	bne.n	80097b0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	0151      	lsls	r1, r2, #5
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	440a      	add	r2, r1
 80097a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80097e0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	011b      	lsls	r3, r3, #4
 80097ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80097f2:	68f9      	ldr	r1, [r7, #12]
 80097f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097f8:	4313      	orrs	r3, r2
 80097fa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800980a:	b480      	push	{r7}
 800980c:	b085      	sub	sp, #20
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009824:	f023 0303 	bic.w	r3, r3, #3
 8009828:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009838:	f023 0302 	bic.w	r3, r3, #2
 800983c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800987a:	f043 0302 	orr.w	r3, r3, #2
 800987e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800988e:	b480      	push	{r7}
 8009890:	b085      	sub	sp, #20
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	4013      	ands	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098a6:	68fb      	ldr	r3, [r7, #12]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	4013      	ands	r3, r2
 80098d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	0c1b      	lsrs	r3, r3, #16
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	4013      	ands	r3, r2
 800990a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	b29b      	uxth	r3, r3
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	4013      	ands	r3, r2
 8009948:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800994a:	68bb      	ldr	r3, [r7, #8]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	fa22 f303 	lsr.w	r3, r2, r3
 8009988:	01db      	lsls	r3, r3, #7
 800998a:	b2db      	uxtb	r3, r3
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	4313      	orrs	r3, r2
 8009990:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009992:	78fb      	ldrb	r3, [r7, #3]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	4413      	add	r3, r2
 800999a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4013      	ands	r3, r2
 80099a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099a6:	68bb      	ldr	r3, [r7, #8]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	371c      	adds	r7, #28
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	f003 0301 	and.w	r3, r3, #1
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80099ee:	f023 0307 	bic.w	r3, r3, #7
 80099f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
	...

08009a18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	460b      	mov	r3, r1
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	333c      	adds	r3, #60	; 0x3c
 8009a2e:	3304      	adds	r3, #4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	4a26      	ldr	r2, [pc, #152]	; (8009ad0 <USB_EP0_OutStart+0xb8>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d90a      	bls.n	8009a52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a4c:	d101      	bne.n	8009a52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e037      	b.n	8009ac2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a80:	f043 0318 	orr.w	r3, r3, #24
 8009a84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009a98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10f      	bne.n	8009ac0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009abe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	371c      	adds	r7, #28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	4f54300a 	.word	0x4f54300a

08009ad4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4a13      	ldr	r2, [pc, #76]	; (8009b38 <USB_CoreReset+0x64>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d901      	bls.n	8009af2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e01b      	b.n	8009b2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	daf2      	bge.n	8009ae0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f043 0201 	orr.w	r2, r3, #1
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4a09      	ldr	r2, [pc, #36]	; (8009b38 <USB_CoreReset+0x64>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d901      	bls.n	8009b1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e006      	b.n	8009b2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d0f0      	beq.n	8009b0a <USB_CoreReset+0x36>

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	00030d40 	.word	0x00030d40

08009b3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009b40:	4904      	ldr	r1, [pc, #16]	; (8009b54 <MX_FATFS_Init+0x18>)
 8009b42:	4805      	ldr	r0, [pc, #20]	; (8009b58 <MX_FATFS_Init+0x1c>)
 8009b44:	f004 f95a 	bl	800ddfc <FATFS_LinkDriver>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	4b03      	ldr	r3, [pc, #12]	; (8009b5c <MX_FATFS_Init+0x20>)
 8009b4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b50:	bf00      	nop
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	2000274c 	.word	0x2000274c
 8009b58:	0801417c 	.word	0x0801417c
 8009b5c:	20002748 	.word	0x20002748

08009b60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009b64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009b7a:	f000 f879 	bl	8009c70 <BSP_SD_IsDetected>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d001      	beq.n	8009b88 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e012      	b.n	8009bae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009b88:	480b      	ldr	r0, [pc, #44]	; (8009bb8 <BSP_SD_Init+0x48>)
 8009b8a:	f7fc fdb4 	bl	80066f6 <HAL_SD_Init>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009b92:	79fb      	ldrb	r3, [r7, #7]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d109      	bne.n	8009bac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009b98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009b9c:	4806      	ldr	r0, [pc, #24]	; (8009bb8 <BSP_SD_Init+0x48>)
 8009b9e:	f7fd fb8d 	bl	80072bc <HAL_SD_ConfigWideBusOperation>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009bac:	79fb      	ldrb	r3, [r7, #7]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	200026c0 	.word	0x200026c0

08009bbc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af02      	add	r7, sp, #8
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	4806      	ldr	r0, [pc, #24]	; (8009bf4 <BSP_SD_ReadBlocks+0x38>)
 8009bda:	f7fc fe3b 	bl	8006854 <HAL_SD_ReadBlocks>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200026c0 	.word	0x200026c0

08009bf8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	68f9      	ldr	r1, [r7, #12]
 8009c14:	4806      	ldr	r0, [pc, #24]	; (8009c30 <BSP_SD_WriteBlocks+0x38>)
 8009c16:	f7fc fffb 	bl	8006c10 <HAL_SD_WriteBlocks>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200026c0 	.word	0x200026c0

08009c34 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009c38:	4805      	ldr	r0, [pc, #20]	; (8009c50 <BSP_SD_GetCardState+0x1c>)
 8009c3a:	f7fd fbd9 	bl	80073f0 <HAL_SD_GetCardState>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	bf14      	ite	ne
 8009c44:	2301      	movne	r3, #1
 8009c46:	2300      	moveq	r3, #0
 8009c48:	b2db      	uxtb	r3, r3
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	200026c0 	.word	0x200026c0

08009c54 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	4803      	ldr	r0, [pc, #12]	; (8009c6c <BSP_SD_GetCardInfo+0x18>)
 8009c60:	f7fd fb00 	bl	8007264 <HAL_SD_GetCardInfo>
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	200026c0 	.word	0x200026c0

08009c70 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009c76:	2301      	movs	r3, #1
 8009c78:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009c7a:	f000 f80b 	bl	8009c94 <BSP_PlatformIsDetected>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009c84:	2300      	movs	r3, #0
 8009c86:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009c88:	79fb      	ldrb	r3, [r7, #7]
 8009c8a:	b2db      	uxtb	r3, r3
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009ca2:	4807      	ldr	r0, [pc, #28]	; (8009cc0 <BSP_PlatformIsDetected+0x2c>)
 8009ca4:	f7f9 ff74 	bl	8003b90 <HAL_GPIO_ReadPin>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */
    return status;
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	40020800 	.word	0x40020800

08009cc4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009cce:	4b0b      	ldr	r3, [pc, #44]	; (8009cfc <SD_CheckStatus+0x38>)
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009cd4:	f7ff ffae 	bl	8009c34 <BSP_SD_GetCardState>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d107      	bne.n	8009cee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009cde:	4b07      	ldr	r3, [pc, #28]	; (8009cfc <SD_CheckStatus+0x38>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f023 0301 	bic.w	r3, r3, #1
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	4b04      	ldr	r3, [pc, #16]	; (8009cfc <SD_CheckStatus+0x38>)
 8009cec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009cee:	4b03      	ldr	r3, [pc, #12]	; (8009cfc <SD_CheckStatus+0x38>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	b2db      	uxtb	r3, r3
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	20000051 	.word	0x20000051

08009d00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	4603      	mov	r3, r0
 8009d08:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009d0a:	4b0b      	ldr	r3, [pc, #44]	; (8009d38 <SD_initialize+0x38>)
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009d10:	f7ff ff2e 	bl	8009b70 <BSP_SD_Init>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d107      	bne.n	8009d2a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff ffd1 	bl	8009cc4 <SD_CheckStatus>
 8009d22:	4603      	mov	r3, r0
 8009d24:	461a      	mov	r2, r3
 8009d26:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <SD_initialize+0x38>)
 8009d28:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009d2a:	4b03      	ldr	r3, [pc, #12]	; (8009d38 <SD_initialize+0x38>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b2db      	uxtb	r3, r3
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	20000051 	.word	0x20000051

08009d3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7ff ffbb 	bl	8009cc4 <SD_CheckStatus>
 8009d4e:	4603      	mov	r3, r0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60b9      	str	r1, [r7, #8]
 8009d60:	607a      	str	r2, [r7, #4]
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	68b8      	ldr	r0, [r7, #8]
 8009d76:	f7ff ff21 	bl	8009bbc <BSP_SD_ReadBlocks>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d107      	bne.n	8009d90 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009d80:	bf00      	nop
 8009d82:	f7ff ff57 	bl	8009c34 <BSP_SD_GetCardState>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1fa      	bne.n	8009d82 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b086      	sub	sp, #24
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
 8009da6:	4603      	mov	r3, r0
 8009da8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	68b8      	ldr	r0, [r7, #8]
 8009db8:	f7ff ff1e 	bl	8009bf8 <BSP_SD_WriteBlocks>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d107      	bne.n	8009dd2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009dc2:	bf00      	nop
 8009dc4:	f7ff ff36 	bl	8009c34 <BSP_SD_GetCardState>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1fa      	bne.n	8009dc4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08c      	sub	sp, #48	; 0x30
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	603a      	str	r2, [r7, #0]
 8009de6:	71fb      	strb	r3, [r7, #7]
 8009de8:	460b      	mov	r3, r1
 8009dea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009df2:	4b25      	ldr	r3, [pc, #148]	; (8009e88 <SD_ioctl+0xac>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <SD_ioctl+0x28>
 8009e00:	2303      	movs	r3, #3
 8009e02:	e03c      	b.n	8009e7e <SD_ioctl+0xa2>

  switch (cmd)
 8009e04:	79bb      	ldrb	r3, [r7, #6]
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d834      	bhi.n	8009e74 <SD_ioctl+0x98>
 8009e0a:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <SD_ioctl+0x34>)
 8009e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e10:	08009e21 	.word	0x08009e21
 8009e14:	08009e29 	.word	0x08009e29
 8009e18:	08009e41 	.word	0x08009e41
 8009e1c:	08009e5b 	.word	0x08009e5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e26:	e028      	b.n	8009e7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff ff11 	bl	8009c54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e3e:	e01c      	b.n	8009e7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e40:	f107 030c 	add.w	r3, r7, #12
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff ff05 	bl	8009c54 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e58:	e00f      	b.n	8009e7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e5a:	f107 030c 	add.w	r3, r7, #12
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff fef8 	bl	8009c54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e66:	0a5a      	lsrs	r2, r3, #9
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e72:	e002      	b.n	8009e7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009e74:	2304      	movs	r3, #4
 8009e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009e7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3730      	adds	r7, #48	; 0x30
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20000051 	.word	0x20000051

08009e8c <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 8009e98:	2044      	movs	r0, #68	; 0x44
 8009e9a:	f004 fcdd 	bl	800e858 <USBD_static_malloc>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e016      	b.n	8009ee2 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 8009ebc:	2340      	movs	r3, #64	; 0x40
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	2181      	movs	r1, #129	; 0x81
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f004 fba5 	bl	800e612 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 8009ec8:	2340      	movs	r3, #64	; 0x40
 8009eca:	2202      	movs	r2, #2
 8009ecc:	2101      	movs	r1, #1
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f004 fb9f 	bl	800e612 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8009ed4:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 8009ed6:	2340      	movs	r3, #64	; 0x40
 8009ed8:	2101      	movs	r1, #1
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f004 fc88 	bl	800e7f0 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8009ee0:	2300      	movs	r3, #0
  }
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 8009ef6:	2181      	movs	r1, #129	; 0x81
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f004 fbb0 	bl	800e65e <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 8009efe:	2101      	movs	r1, #1
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f004 fbac 	bl	800e65e <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d007      	beq.n	8009f36 <USBD_Midi_Setup+0x26>
 8009f26:	2b20      	cmp	r3, #32
 8009f28:	d10b      	bne.n	8009f42 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 f937 	bl	800b1a0 <USBD_CtlError>
      return USBD_FAIL;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e006      	b.n	8009f44 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 f931 	bl	800b1a0 <USBD_CtlError>
      return USBD_FAIL;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e000      	b.n	8009f44 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2265      	movs	r2, #101	; 0x65
 8009f58:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 8009f5a:	4b03      	ldr	r3, [pc, #12]	; (8009f68 <USBD_Midi_GetCfgDesc+0x1c>)
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	2000008c 	.word	0x2000008c

08009f6c <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	460b      	mov	r3, r1
 8009fec:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a00e:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f004 fc0c 	bl	800e832 <USBD_LL_GetRxDataSize>
 800a01a:	4602      	mov	r2, r0
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
 800a028:	e00c      	b.n	800a044 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68f9      	ldr	r1, [r7, #12]
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	440a      	add	r2, r1
 800a038:	2104      	movs	r1, #4
 800a03a:	4610      	mov	r0, r2
 800a03c:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	3304      	adds	r3, #4
 800a042:	617b      	str	r3, [r7, #20]
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d3ed      	bcc.n	800a02a <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 800a04e:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 800a050:	2340      	movs	r3, #64	; 0x40
 800a052:	2101      	movs	r1, #1
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f004 fbcb 	bl	800e7f0 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	220a      	movs	r2, #10
 800a070:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 800a072:	4b03      	ldr	r3, [pc, #12]	; (800a080 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 800a074:	4618      	mov	r0, r3
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	200000f4 	.word	0x200000f4

0800a084 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a08e:	2303      	movs	r3, #3
 800a090:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d005      	beq.n	800a0a4 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b086      	sub	sp, #24
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e01f      	b.n	800a10a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d003      	beq.n	800a0f0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	79fa      	ldrb	r2, [r7, #7]
 800a0fc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f004 fa20 	bl	800e544 <USBD_LL_Init>
 800a104:	4603      	mov	r3, r0
 800a106:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a108:	7dfb      	ldrb	r3, [r7, #23]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3718      	adds	r7, #24
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a11c:	2300      	movs	r3, #0
 800a11e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d101      	bne.n	800a12a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a126:	2303      	movs	r3, #3
 800a128:	e016      	b.n	800a158 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	f107 020e 	add.w	r2, r7, #14
 800a14a:	4610      	mov	r0, r2
 800a14c:	4798      	blx	r3
 800a14e:	4602      	mov	r2, r0
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f004 fa37 	bl	800e5dc <USBD_LL_Start>
 800a16e:	4603      	mov	r3, r0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a19a:	2303      	movs	r3, #3
 800a19c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d009      	beq.n	800a1bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	78fa      	ldrb	r2, [r7, #3]
 800a1b2:	4611      	mov	r1, r2
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	4798      	blx	r3
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d007      	beq.n	800a1ec <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	78fa      	ldrb	r2, [r7, #3]
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	4798      	blx	r3
  }

  return USBD_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 ff8f 	bl	800b12c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a21c:	461a      	mov	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a22a:	f003 031f 	and.w	r3, r3, #31
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d01a      	beq.n	800a268 <USBD_LL_SetupStage+0x72>
 800a232:	2b02      	cmp	r3, #2
 800a234:	d822      	bhi.n	800a27c <USBD_LL_SetupStage+0x86>
 800a236:	2b00      	cmp	r3, #0
 800a238:	d002      	beq.n	800a240 <USBD_LL_SetupStage+0x4a>
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d00a      	beq.n	800a254 <USBD_LL_SetupStage+0x5e>
 800a23e:	e01d      	b.n	800a27c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fa61 	bl	800a710 <USBD_StdDevReq>
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]
      break;
 800a252:	e020      	b.n	800a296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fac5 	bl	800a7ec <USBD_StdItfReq>
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]
      break;
 800a266:	e016      	b.n	800a296 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fb04 	bl	800a87e <USBD_StdEPReq>
 800a276:	4603      	mov	r3, r0
 800a278:	73fb      	strb	r3, [r7, #15]
      break;
 800a27a:	e00c      	b.n	800a296 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a282:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a286:	b2db      	uxtb	r3, r3
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f004 fa06 	bl	800e69c <USBD_LL_StallEP>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]
      break;
 800a294:	bf00      	nop
  }

  return ret;
 800a296:	7bfb      	ldrb	r3, [r7, #15]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	607a      	str	r2, [r7, #4]
 800a2ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a2ae:	7afb      	ldrb	r3, [r7, #11]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d138      	bne.n	800a326 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a2ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d14a      	bne.n	800a35c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d913      	bls.n	800a2fa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	689a      	ldr	r2, [r3, #8]
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	bf28      	it	cs
 800a2ec:	4613      	movcs	r3, r2
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	6879      	ldr	r1, [r7, #4]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 fff1 	bl	800b2da <USBD_CtlContinueRx>
 800a2f8:	e030      	b.n	800a35c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b03      	cmp	r3, #3
 800a304:	d10b      	bne.n	800a31e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d005      	beq.n	800a31e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 ffec 	bl	800b2fc <USBD_CtlSendStatus>
 800a324:	e01a      	b.n	800a35c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d114      	bne.n	800a35c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00e      	beq.n	800a35c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	7afa      	ldrb	r2, [r7, #11]
 800a348:	4611      	mov	r1, r2
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	4798      	blx	r3
 800a34e:	4603      	mov	r3, r0
 800a350:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a358:	7dfb      	ldrb	r3, [r7, #23]
 800a35a:	e000      	b.n	800a35e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	460b      	mov	r3, r1
 800a370:	607a      	str	r2, [r7, #4]
 800a372:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d16b      	bne.n	800a452 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3314      	adds	r3, #20
 800a37e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a386:	2b02      	cmp	r3, #2
 800a388:	d156      	bne.n	800a438 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	429a      	cmp	r2, r3
 800a394:	d914      	bls.n	800a3c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	689a      	ldr	r2, [r3, #8]
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	1ad2      	subs	r2, r2, r3
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	6879      	ldr	r1, [r7, #4]
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 ff83 	bl	800b2b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f004 fa19 	bl	800e7f0 <USBD_LL_PrepareReceive>
 800a3be:	e03b      	b.n	800a438 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d11c      	bne.n	800a406 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d316      	bcc.n	800a406 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d20f      	bcs.n	800a406 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 ff64 	bl	800b2b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f004 f9f6 	bl	800e7f0 <USBD_LL_PrepareReceive>
 800a404:	e018      	b.n	800a438 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b03      	cmp	r3, #3
 800a410:	d10b      	bne.n	800a42a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d005      	beq.n	800a42a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a42a:	2180      	movs	r1, #128	; 0x80
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f004 f935 	bl	800e69c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f000 ff75 	bl	800b322 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d122      	bne.n	800a488 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f7ff fe98 	bl	800a178 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a450:	e01a      	b.n	800a488 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d114      	bne.n	800a488 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00e      	beq.n	800a488 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	7afa      	ldrb	r2, [r7, #11]
 800a474:	4611      	mov	r1, r2
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	4798      	blx	r3
 800a47a:	4603      	mov	r3, r0
 800a47c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a47e:	7dfb      	ldrb	r3, [r7, #23]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d001      	beq.n	800a488 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a484:	7dfb      	ldrb	r3, [r7, #23]
 800a486:	e000      	b.n	800a48a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e02f      	b.n	800a526 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00f      	beq.n	800a4f0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d009      	beq.n	800a4f0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	6852      	ldr	r2, [r2, #4]
 800a4e8:	b2d2      	uxtb	r2, r2
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4f0:	2340      	movs	r3, #64	; 0x40
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f004 f88b 	bl	800e612 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2240      	movs	r2, #64	; 0x40
 800a508:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a50c:	2340      	movs	r3, #64	; 0x40
 800a50e:	2200      	movs	r2, #0
 800a510:	2180      	movs	r1, #128	; 0x80
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f004 f87d 	bl	800e612 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2240      	movs	r2, #64	; 0x40
 800a522:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	78fa      	ldrb	r2, [r7, #3]
 800a53e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a54e:	b480      	push	{r7}
 800a550:	b083      	sub	sp, #12
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2204      	movs	r2, #4
 800a568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	d106      	bne.n	800a59c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a594:	b2da      	uxtb	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b082      	sub	sp, #8
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e012      	b.n	800a5e6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	d10b      	bne.n	800a5e4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a604:	2303      	movs	r3, #3
 800a606:	e014      	b.n	800a632 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b03      	cmp	r3, #3
 800a612:	d10d      	bne.n	800a630 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a61a:	6a1b      	ldr	r3, [r3, #32]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d007      	beq.n	800a630 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	78fa      	ldrb	r2, [r7, #3]
 800a62a:	4611      	mov	r1, r2
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a650:	2303      	movs	r3, #3
 800a652:	e014      	b.n	800a67e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d10d      	bne.n	800a67c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d007      	beq.n	800a67c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	78fa      	ldrb	r2, [r7, #3]
 800a676:	4611      	mov	r1, r2
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d009      	beq.n	800a6ca <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	6852      	ldr	r2, [r2, #4]
 800a6c2:	b2d2      	uxtb	r2, r2
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	4798      	blx	r3
  }

  return USBD_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b087      	sub	sp, #28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6f2:	8a3b      	ldrh	r3, [r7, #16]
 800a6f4:	021b      	lsls	r3, r3, #8
 800a6f6:	b21a      	sxth	r2, r3
 800a6f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	b21b      	sxth	r3, r3
 800a700:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a702:	89fb      	ldrh	r3, [r7, #14]
}
 800a704:	4618      	mov	r0, r3
 800a706:	371c      	adds	r7, #28
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a726:	2b40      	cmp	r3, #64	; 0x40
 800a728:	d005      	beq.n	800a736 <USBD_StdDevReq+0x26>
 800a72a:	2b40      	cmp	r3, #64	; 0x40
 800a72c:	d853      	bhi.n	800a7d6 <USBD_StdDevReq+0xc6>
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00b      	beq.n	800a74a <USBD_StdDevReq+0x3a>
 800a732:	2b20      	cmp	r3, #32
 800a734:	d14f      	bne.n	800a7d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
 800a744:	4603      	mov	r3, r0
 800a746:	73fb      	strb	r3, [r7, #15]
      break;
 800a748:	e04a      	b.n	800a7e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	785b      	ldrb	r3, [r3, #1]
 800a74e:	2b09      	cmp	r3, #9
 800a750:	d83b      	bhi.n	800a7ca <USBD_StdDevReq+0xba>
 800a752:	a201      	add	r2, pc, #4	; (adr r2, 800a758 <USBD_StdDevReq+0x48>)
 800a754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a758:	0800a7ad 	.word	0x0800a7ad
 800a75c:	0800a7c1 	.word	0x0800a7c1
 800a760:	0800a7cb 	.word	0x0800a7cb
 800a764:	0800a7b7 	.word	0x0800a7b7
 800a768:	0800a7cb 	.word	0x0800a7cb
 800a76c:	0800a78b 	.word	0x0800a78b
 800a770:	0800a781 	.word	0x0800a781
 800a774:	0800a7cb 	.word	0x0800a7cb
 800a778:	0800a7a3 	.word	0x0800a7a3
 800a77c:	0800a795 	.word	0x0800a795
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f9de 	bl	800ab44 <USBD_GetDescriptor>
          break;
 800a788:	e024      	b.n	800a7d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fb43 	bl	800ae18 <USBD_SetAddress>
          break;
 800a792:	e01f      	b.n	800a7d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fb82 	bl	800aea0 <USBD_SetConfig>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]
          break;
 800a7a0:	e018      	b.n	800a7d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fc21 	bl	800afec <USBD_GetConfig>
          break;
 800a7aa:	e013      	b.n	800a7d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fc52 	bl	800b058 <USBD_GetStatus>
          break;
 800a7b4:	e00e      	b.n	800a7d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fc81 	bl	800b0c0 <USBD_SetFeature>
          break;
 800a7be:	e009      	b.n	800a7d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fc90 	bl	800b0e8 <USBD_ClrFeature>
          break;
 800a7c8:	e004      	b.n	800a7d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fce7 	bl	800b1a0 <USBD_CtlError>
          break;
 800a7d2:	bf00      	nop
      }
      break;
 800a7d4:	e004      	b.n	800a7e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fce1 	bl	800b1a0 <USBD_CtlError>
      break;
 800a7de:	bf00      	nop
  }

  return ret;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop

0800a7ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a802:	2b40      	cmp	r3, #64	; 0x40
 800a804:	d005      	beq.n	800a812 <USBD_StdItfReq+0x26>
 800a806:	2b40      	cmp	r3, #64	; 0x40
 800a808:	d82f      	bhi.n	800a86a <USBD_StdItfReq+0x7e>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <USBD_StdItfReq+0x26>
 800a80e:	2b20      	cmp	r3, #32
 800a810:	d12b      	bne.n	800a86a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	3b01      	subs	r3, #1
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d81d      	bhi.n	800a85c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	889b      	ldrh	r3, [r3, #4]
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b01      	cmp	r3, #1
 800a828:	d813      	bhi.n	800a852 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	4798      	blx	r3
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	88db      	ldrh	r3, [r3, #6]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d110      	bne.n	800a866 <USBD_StdItfReq+0x7a>
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10d      	bne.n	800a866 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fd56 	bl	800b2fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a850:	e009      	b.n	800a866 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a852:	6839      	ldr	r1, [r7, #0]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fca3 	bl	800b1a0 <USBD_CtlError>
          break;
 800a85a:	e004      	b.n	800a866 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a85c:	6839      	ldr	r1, [r7, #0]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fc9e 	bl	800b1a0 <USBD_CtlError>
          break;
 800a864:	e000      	b.n	800a868 <USBD_StdItfReq+0x7c>
          break;
 800a866:	bf00      	nop
      }
      break;
 800a868:	e004      	b.n	800a874 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fc97 	bl	800b1a0 <USBD_CtlError>
      break;
 800a872:	bf00      	nop
  }

  return ret;
 800a874:	7bfb      	ldrb	r3, [r7, #15]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	889b      	ldrh	r3, [r3, #4]
 800a890:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a89a:	2b40      	cmp	r3, #64	; 0x40
 800a89c:	d007      	beq.n	800a8ae <USBD_StdEPReq+0x30>
 800a89e:	2b40      	cmp	r3, #64	; 0x40
 800a8a0:	f200 8145 	bhi.w	800ab2e <USBD_StdEPReq+0x2b0>
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00c      	beq.n	800a8c2 <USBD_StdEPReq+0x44>
 800a8a8:	2b20      	cmp	r3, #32
 800a8aa:	f040 8140 	bne.w	800ab2e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	4798      	blx	r3
 800a8bc:	4603      	mov	r3, r0
 800a8be:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c0:	e13a      	b.n	800ab38 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	785b      	ldrb	r3, [r3, #1]
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d007      	beq.n	800a8da <USBD_StdEPReq+0x5c>
 800a8ca:	2b03      	cmp	r3, #3
 800a8cc:	f300 8129 	bgt.w	800ab22 <USBD_StdEPReq+0x2a4>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d07f      	beq.n	800a9d4 <USBD_StdEPReq+0x156>
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d03c      	beq.n	800a952 <USBD_StdEPReq+0xd4>
 800a8d8:	e123      	b.n	800ab22 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d002      	beq.n	800a8ec <USBD_StdEPReq+0x6e>
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	d016      	beq.n	800a918 <USBD_StdEPReq+0x9a>
 800a8ea:	e02c      	b.n	800a946 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00d      	beq.n	800a90e <USBD_StdEPReq+0x90>
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b80      	cmp	r3, #128	; 0x80
 800a8f6:	d00a      	beq.n	800a90e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f003 fecd 	bl	800e69c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a902:	2180      	movs	r1, #128	; 0x80
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f003 fec9 	bl	800e69c <USBD_LL_StallEP>
 800a90a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a90c:	e020      	b.n	800a950 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fc45 	bl	800b1a0 <USBD_CtlError>
              break;
 800a916:	e01b      	b.n	800a950 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	885b      	ldrh	r3, [r3, #2]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10e      	bne.n	800a93e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a920:	7bbb      	ldrb	r3, [r7, #14]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00b      	beq.n	800a93e <USBD_StdEPReq+0xc0>
 800a926:	7bbb      	ldrb	r3, [r7, #14]
 800a928:	2b80      	cmp	r3, #128	; 0x80
 800a92a:	d008      	beq.n	800a93e <USBD_StdEPReq+0xc0>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	88db      	ldrh	r3, [r3, #6]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d104      	bne.n	800a93e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f003 feaf 	bl	800e69c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fcdc 	bl	800b2fc <USBD_CtlSendStatus>

              break;
 800a944:	e004      	b.n	800a950 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fc29 	bl	800b1a0 <USBD_CtlError>
              break;
 800a94e:	bf00      	nop
          }
          break;
 800a950:	e0ec      	b.n	800ab2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d002      	beq.n	800a964 <USBD_StdEPReq+0xe6>
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d016      	beq.n	800a990 <USBD_StdEPReq+0x112>
 800a962:	e030      	b.n	800a9c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00d      	beq.n	800a986 <USBD_StdEPReq+0x108>
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	2b80      	cmp	r3, #128	; 0x80
 800a96e:	d00a      	beq.n	800a986 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	4619      	mov	r1, r3
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f003 fe91 	bl	800e69c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a97a:	2180      	movs	r1, #128	; 0x80
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f003 fe8d 	bl	800e69c <USBD_LL_StallEP>
 800a982:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a984:	e025      	b.n	800a9d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fc09 	bl	800b1a0 <USBD_CtlError>
              break;
 800a98e:	e020      	b.n	800a9d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	885b      	ldrh	r3, [r3, #2]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d11b      	bne.n	800a9d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d004      	beq.n	800a9ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f003 fe97 	bl	800e6da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fca5 	bl	800b2fc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	4798      	blx	r3
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a9c4:	e004      	b.n	800a9d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fbe9 	bl	800b1a0 <USBD_CtlError>
              break;
 800a9ce:	e000      	b.n	800a9d2 <USBD_StdEPReq+0x154>
              break;
 800a9d0:	bf00      	nop
          }
          break;
 800a9d2:	e0ab      	b.n	800ab2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d002      	beq.n	800a9e6 <USBD_StdEPReq+0x168>
 800a9e0:	2b03      	cmp	r3, #3
 800a9e2:	d032      	beq.n	800aa4a <USBD_StdEPReq+0x1cc>
 800a9e4:	e097      	b.n	800ab16 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <USBD_StdEPReq+0x17e>
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	2b80      	cmp	r3, #128	; 0x80
 800a9f0:	d004      	beq.n	800a9fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fbd3 	bl	800b1a0 <USBD_CtlError>
                break;
 800a9fa:	e091      	b.n	800ab20 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	da0b      	bge.n	800aa1c <USBD_StdEPReq+0x19e>
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	4413      	add	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	3310      	adds	r3, #16
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	4413      	add	r3, r2
 800aa18:	3304      	adds	r3, #4
 800aa1a:	e00b      	b.n	800aa34 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa22:	4613      	mov	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	4413      	add	r3, r2
 800aa32:	3304      	adds	r3, #4
 800aa34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	4619      	mov	r1, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fc1d 	bl	800b282 <USBD_CtlSendData>
              break;
 800aa48:	e06a      	b.n	800ab20 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	da11      	bge.n	800aa76 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	f003 020f 	and.w	r2, r3, #15
 800aa58:	6879      	ldr	r1, [r7, #4]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	440b      	add	r3, r1
 800aa64:	3324      	adds	r3, #36	; 0x24
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d117      	bne.n	800aa9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fb96 	bl	800b1a0 <USBD_CtlError>
                  break;
 800aa74:	e054      	b.n	800ab20 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa76:	7bbb      	ldrb	r3, [r7, #14]
 800aa78:	f003 020f 	and.w	r2, r3, #15
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	440b      	add	r3, r1
 800aa88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d104      	bne.n	800aa9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fb83 	bl	800b1a0 <USBD_CtlError>
                  break;
 800aa9a:	e041      	b.n	800ab20 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	da0b      	bge.n	800aabc <USBD_StdEPReq+0x23e>
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	3310      	adds	r3, #16
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	4413      	add	r3, r2
 800aab8:	3304      	adds	r3, #4
 800aaba:	e00b      	b.n	800aad4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	4413      	add	r3, r2
 800aad2:	3304      	adds	r3, #4
 800aad4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <USBD_StdEPReq+0x264>
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	2b80      	cmp	r3, #128	; 0x80
 800aae0:	d103      	bne.n	800aaea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
 800aae8:	e00e      	b.n	800ab08 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f003 fe12 	bl	800e718 <USBD_LL_IsStallEP>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2201      	movs	r2, #1
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	e002      	b.n	800ab08 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	2200      	movs	r2, #0
 800ab06:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fbb7 	bl	800b282 <USBD_CtlSendData>
              break;
 800ab14:	e004      	b.n	800ab20 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fb41 	bl	800b1a0 <USBD_CtlError>
              break;
 800ab1e:	bf00      	nop
          }
          break;
 800ab20:	e004      	b.n	800ab2c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fb3b 	bl	800b1a0 <USBD_CtlError>
          break;
 800ab2a:	bf00      	nop
      }
      break;
 800ab2c:	e004      	b.n	800ab38 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fb35 	bl	800b1a0 <USBD_CtlError>
      break;
 800ab36:	bf00      	nop
  }

  return ret;
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	885b      	ldrh	r3, [r3, #2]
 800ab5e:	0a1b      	lsrs	r3, r3, #8
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	3b01      	subs	r3, #1
 800ab64:	2b06      	cmp	r3, #6
 800ab66:	f200 8128 	bhi.w	800adba <USBD_GetDescriptor+0x276>
 800ab6a:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <USBD_GetDescriptor+0x2c>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800ab8d 	.word	0x0800ab8d
 800ab74:	0800aba5 	.word	0x0800aba5
 800ab78:	0800abe5 	.word	0x0800abe5
 800ab7c:	0800adbb 	.word	0x0800adbb
 800ab80:	0800adbb 	.word	0x0800adbb
 800ab84:	0800ad5b 	.word	0x0800ad5b
 800ab88:	0800ad87 	.word	0x0800ad87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	7c12      	ldrb	r2, [r2, #16]
 800ab98:	f107 0108 	add.w	r1, r7, #8
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
 800aba0:	60f8      	str	r0, [r7, #12]
      break;
 800aba2:	e112      	b.n	800adca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	7c1b      	ldrb	r3, [r3, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10d      	bne.n	800abc8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb4:	f107 0208 	add.w	r2, r7, #8
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3301      	adds	r3, #1
 800abc2:	2202      	movs	r2, #2
 800abc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abc6:	e100      	b.n	800adca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	f107 0208 	add.w	r2, r7, #8
 800abd4:	4610      	mov	r0, r2
 800abd6:	4798      	blx	r3
 800abd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3301      	adds	r3, #1
 800abde:	2202      	movs	r2, #2
 800abe0:	701a      	strb	r2, [r3, #0]
      break;
 800abe2:	e0f2      	b.n	800adca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	885b      	ldrh	r3, [r3, #2]
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b05      	cmp	r3, #5
 800abec:	f200 80ac 	bhi.w	800ad48 <USBD_GetDescriptor+0x204>
 800abf0:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <USBD_GetDescriptor+0xb4>)
 800abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf6:	bf00      	nop
 800abf8:	0800ac11 	.word	0x0800ac11
 800abfc:	0800ac45 	.word	0x0800ac45
 800ac00:	0800ac79 	.word	0x0800ac79
 800ac04:	0800acad 	.word	0x0800acad
 800ac08:	0800ace1 	.word	0x0800ace1
 800ac0c:	0800ad15 	.word	0x0800ad15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00b      	beq.n	800ac34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	7c12      	ldrb	r2, [r2, #16]
 800ac28:	f107 0108 	add.w	r1, r7, #8
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	4798      	blx	r3
 800ac30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac32:	e091      	b.n	800ad58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fab2 	bl	800b1a0 <USBD_CtlError>
            err++;
 800ac3c:	7afb      	ldrb	r3, [r7, #11]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	72fb      	strb	r3, [r7, #11]
          break;
 800ac42:	e089      	b.n	800ad58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00b      	beq.n	800ac68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	7c12      	ldrb	r2, [r2, #16]
 800ac5c:	f107 0108 	add.w	r1, r7, #8
 800ac60:	4610      	mov	r0, r2
 800ac62:	4798      	blx	r3
 800ac64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac66:	e077      	b.n	800ad58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fa98 	bl	800b1a0 <USBD_CtlError>
            err++;
 800ac70:	7afb      	ldrb	r3, [r7, #11]
 800ac72:	3301      	adds	r3, #1
 800ac74:	72fb      	strb	r3, [r7, #11]
          break;
 800ac76:	e06f      	b.n	800ad58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00b      	beq.n	800ac9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	7c12      	ldrb	r2, [r2, #16]
 800ac90:	f107 0108 	add.w	r1, r7, #8
 800ac94:	4610      	mov	r0, r2
 800ac96:	4798      	blx	r3
 800ac98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac9a:	e05d      	b.n	800ad58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fa7e 	bl	800b1a0 <USBD_CtlError>
            err++;
 800aca4:	7afb      	ldrb	r3, [r7, #11]
 800aca6:	3301      	adds	r3, #1
 800aca8:	72fb      	strb	r3, [r7, #11]
          break;
 800acaa:	e055      	b.n	800ad58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00b      	beq.n	800acd0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	7c12      	ldrb	r2, [r2, #16]
 800acc4:	f107 0108 	add.w	r1, r7, #8
 800acc8:	4610      	mov	r0, r2
 800acca:	4798      	blx	r3
 800accc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acce:	e043      	b.n	800ad58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fa64 	bl	800b1a0 <USBD_CtlError>
            err++;
 800acd8:	7afb      	ldrb	r3, [r7, #11]
 800acda:	3301      	adds	r3, #1
 800acdc:	72fb      	strb	r3, [r7, #11]
          break;
 800acde:	e03b      	b.n	800ad58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00b      	beq.n	800ad04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	7c12      	ldrb	r2, [r2, #16]
 800acf8:	f107 0108 	add.w	r1, r7, #8
 800acfc:	4610      	mov	r0, r2
 800acfe:	4798      	blx	r3
 800ad00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad02:	e029      	b.n	800ad58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fa4a 	bl	800b1a0 <USBD_CtlError>
            err++;
 800ad0c:	7afb      	ldrb	r3, [r7, #11]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	72fb      	strb	r3, [r7, #11]
          break;
 800ad12:	e021      	b.n	800ad58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00b      	beq.n	800ad38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	7c12      	ldrb	r2, [r2, #16]
 800ad2c:	f107 0108 	add.w	r1, r7, #8
 800ad30:	4610      	mov	r0, r2
 800ad32:	4798      	blx	r3
 800ad34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad36:	e00f      	b.n	800ad58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa30 	bl	800b1a0 <USBD_CtlError>
            err++;
 800ad40:	7afb      	ldrb	r3, [r7, #11]
 800ad42:	3301      	adds	r3, #1
 800ad44:	72fb      	strb	r3, [r7, #11]
          break;
 800ad46:	e007      	b.n	800ad58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fa28 	bl	800b1a0 <USBD_CtlError>
          err++;
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	3301      	adds	r3, #1
 800ad54:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ad56:	bf00      	nop
      }
      break;
 800ad58:	e037      	b.n	800adca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7c1b      	ldrb	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d109      	bne.n	800ad76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad6a:	f107 0208 	add.w	r2, r7, #8
 800ad6e:	4610      	mov	r0, r2
 800ad70:	4798      	blx	r3
 800ad72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad74:	e029      	b.n	800adca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fa11 	bl	800b1a0 <USBD_CtlError>
        err++;
 800ad7e:	7afb      	ldrb	r3, [r7, #11]
 800ad80:	3301      	adds	r3, #1
 800ad82:	72fb      	strb	r3, [r7, #11]
      break;
 800ad84:	e021      	b.n	800adca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	7c1b      	ldrb	r3, [r3, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10d      	bne.n	800adaa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad96:	f107 0208 	add.w	r2, r7, #8
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	4798      	blx	r3
 800ad9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3301      	adds	r3, #1
 800ada4:	2207      	movs	r2, #7
 800ada6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ada8:	e00f      	b.n	800adca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f9f7 	bl	800b1a0 <USBD_CtlError>
        err++;
 800adb2:	7afb      	ldrb	r3, [r7, #11]
 800adb4:	3301      	adds	r3, #1
 800adb6:	72fb      	strb	r3, [r7, #11]
      break;
 800adb8:	e007      	b.n	800adca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f9ef 	bl	800b1a0 <USBD_CtlError>
      err++;
 800adc2:	7afb      	ldrb	r3, [r7, #11]
 800adc4:	3301      	adds	r3, #1
 800adc6:	72fb      	strb	r3, [r7, #11]
      break;
 800adc8:	bf00      	nop
  }

  if (err != 0U)
 800adca:	7afb      	ldrb	r3, [r7, #11]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d11e      	bne.n	800ae0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	88db      	ldrh	r3, [r3, #6]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d016      	beq.n	800ae06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800add8:	893b      	ldrh	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00e      	beq.n	800adfc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	88da      	ldrh	r2, [r3, #6]
 800ade2:	893b      	ldrh	r3, [r7, #8]
 800ade4:	4293      	cmp	r3, r2
 800ade6:	bf28      	it	cs
 800ade8:	4613      	movcs	r3, r2
 800adea:	b29b      	uxth	r3, r3
 800adec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adee:	893b      	ldrh	r3, [r7, #8]
 800adf0:	461a      	mov	r2, r3
 800adf2:	68f9      	ldr	r1, [r7, #12]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fa44 	bl	800b282 <USBD_CtlSendData>
 800adfa:	e009      	b.n	800ae10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f9ce 	bl	800b1a0 <USBD_CtlError>
 800ae04:	e004      	b.n	800ae10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa78 	bl	800b2fc <USBD_CtlSendStatus>
 800ae0c:	e000      	b.n	800ae10 <USBD_GetDescriptor+0x2cc>
    return;
 800ae0e:	bf00      	nop
  }
}
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop

0800ae18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	889b      	ldrh	r3, [r3, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d131      	bne.n	800ae8e <USBD_SetAddress+0x76>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	88db      	ldrh	r3, [r3, #6]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d12d      	bne.n	800ae8e <USBD_SetAddress+0x76>
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	885b      	ldrh	r3, [r3, #2]
 800ae36:	2b7f      	cmp	r3, #127	; 0x7f
 800ae38:	d829      	bhi.n	800ae8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	885b      	ldrh	r3, [r3, #2]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	d104      	bne.n	800ae5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f9a3 	bl	800b1a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5a:	e01d      	b.n	800ae98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	7bfa      	ldrb	r2, [r7, #15]
 800ae60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f003 fc81 	bl	800e770 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa44 	bl	800b2fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae82:	e009      	b.n	800ae98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae8c:	e004      	b.n	800ae98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f985 	bl	800b1a0 <USBD_CtlError>
  }
}
 800ae96:	bf00      	nop
 800ae98:	bf00      	nop
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	885b      	ldrh	r3, [r3, #2]
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	4b4c      	ldr	r3, [pc, #304]	; (800afe8 <USBD_SetConfig+0x148>)
 800aeb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aeb8:	4b4b      	ldr	r3, [pc, #300]	; (800afe8 <USBD_SetConfig+0x148>)
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d905      	bls.n	800aecc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f96c 	bl	800b1a0 <USBD_CtlError>
    return USBD_FAIL;
 800aec8:	2303      	movs	r3, #3
 800aeca:	e088      	b.n	800afde <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d002      	beq.n	800aede <USBD_SetConfig+0x3e>
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	d025      	beq.n	800af28 <USBD_SetConfig+0x88>
 800aedc:	e071      	b.n	800afc2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aede:	4b42      	ldr	r3, [pc, #264]	; (800afe8 <USBD_SetConfig+0x148>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d01c      	beq.n	800af20 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800aee6:	4b40      	ldr	r3, [pc, #256]	; (800afe8 <USBD_SetConfig+0x148>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	461a      	mov	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aef0:	4b3d      	ldr	r3, [pc, #244]	; (800afe8 <USBD_SetConfig+0x148>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff f949 	bl	800a18e <USBD_SetClassConfig>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d004      	beq.n	800af10 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f949 	bl	800b1a0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af0e:	e065      	b.n	800afdc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f9f3 	bl	800b2fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2203      	movs	r2, #3
 800af1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af1e:	e05d      	b.n	800afdc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f9eb 	bl	800b2fc <USBD_CtlSendStatus>
      break;
 800af26:	e059      	b.n	800afdc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af28:	4b2f      	ldr	r3, [pc, #188]	; (800afe8 <USBD_SetConfig+0x148>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d112      	bne.n	800af56 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2202      	movs	r2, #2
 800af34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800af38:	4b2b      	ldr	r3, [pc, #172]	; (800afe8 <USBD_SetConfig+0x148>)
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	461a      	mov	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af42:	4b29      	ldr	r3, [pc, #164]	; (800afe8 <USBD_SetConfig+0x148>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff f93c 	bl	800a1c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f9d4 	bl	800b2fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af54:	e042      	b.n	800afdc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800af56:	4b24      	ldr	r3, [pc, #144]	; (800afe8 <USBD_SetConfig+0x148>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	461a      	mov	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	d02a      	beq.n	800afba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff f92a 	bl	800a1c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af72:	4b1d      	ldr	r3, [pc, #116]	; (800afe8 <USBD_SetConfig+0x148>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af7c:	4b1a      	ldr	r3, [pc, #104]	; (800afe8 <USBD_SetConfig+0x148>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff f903 	bl	800a18e <USBD_SetClassConfig>
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00f      	beq.n	800afb2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f903 	bl	800b1a0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	4619      	mov	r1, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff f90f 	bl	800a1c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2202      	movs	r2, #2
 800afac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afb0:	e014      	b.n	800afdc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f9a2 	bl	800b2fc <USBD_CtlSendStatus>
      break;
 800afb8:	e010      	b.n	800afdc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f99e 	bl	800b2fc <USBD_CtlSendStatus>
      break;
 800afc0:	e00c      	b.n	800afdc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f8eb 	bl	800b1a0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afca:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <USBD_SetConfig+0x148>)
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff f8f8 	bl	800a1c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800afd6:	2303      	movs	r3, #3
 800afd8:	73fb      	strb	r3, [r7, #15]
      break;
 800afda:	bf00      	nop
  }

  return ret;
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20000764 	.word	0x20000764

0800afec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	88db      	ldrh	r3, [r3, #6]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d004      	beq.n	800b008 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f8cd 	bl	800b1a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b006:	e023      	b.n	800b050 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b02      	cmp	r3, #2
 800b012:	dc02      	bgt.n	800b01a <USBD_GetConfig+0x2e>
 800b014:	2b00      	cmp	r3, #0
 800b016:	dc03      	bgt.n	800b020 <USBD_GetConfig+0x34>
 800b018:	e015      	b.n	800b046 <USBD_GetConfig+0x5a>
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d00b      	beq.n	800b036 <USBD_GetConfig+0x4a>
 800b01e:	e012      	b.n	800b046 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	3308      	adds	r3, #8
 800b02a:	2201      	movs	r2, #1
 800b02c:	4619      	mov	r1, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f927 	bl	800b282 <USBD_CtlSendData>
        break;
 800b034:	e00c      	b.n	800b050 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	3304      	adds	r3, #4
 800b03a:	2201      	movs	r2, #1
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f91f 	bl	800b282 <USBD_CtlSendData>
        break;
 800b044:	e004      	b.n	800b050 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 f8a9 	bl	800b1a0 <USBD_CtlError>
        break;
 800b04e:	bf00      	nop
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	3b01      	subs	r3, #1
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d81e      	bhi.n	800b0ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	88db      	ldrh	r3, [r3, #6]
 800b074:	2b02      	cmp	r3, #2
 800b076:	d004      	beq.n	800b082 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f890 	bl	800b1a0 <USBD_CtlError>
        break;
 800b080:	e01a      	b.n	800b0b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2201      	movs	r2, #1
 800b086:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d005      	beq.n	800b09e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	f043 0202 	orr.w	r2, r3, #2
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	330c      	adds	r3, #12
 800b0a2:	2202      	movs	r2, #2
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f8eb 	bl	800b282 <USBD_CtlSendData>
      break;
 800b0ac:	e004      	b.n	800b0b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 f875 	bl	800b1a0 <USBD_CtlError>
      break;
 800b0b6:	bf00      	nop
  }
}
 800b0b8:	bf00      	nop
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	885b      	ldrh	r3, [r3, #2]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d106      	bne.n	800b0e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f90e 	bl	800b2fc <USBD_CtlSendStatus>
  }
}
 800b0e0:	bf00      	nop
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d80b      	bhi.n	800b118 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	885b      	ldrh	r3, [r3, #2]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d10c      	bne.n	800b122 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f8f3 	bl	800b2fc <USBD_CtlSendStatus>
      }
      break;
 800b116:	e004      	b.n	800b122 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f840 	bl	800b1a0 <USBD_CtlError>
      break;
 800b120:	e000      	b.n	800b124 <USBD_ClrFeature+0x3c>
      break;
 800b122:	bf00      	nop
  }
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	781a      	ldrb	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	781a      	ldrb	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	3301      	adds	r3, #1
 800b154:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f7ff fabc 	bl	800a6d4 <SWAPBYTE>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3301      	adds	r3, #1
 800b168:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3301      	adds	r3, #1
 800b16e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f7ff faaf 	bl	800a6d4 <SWAPBYTE>
 800b176:	4603      	mov	r3, r0
 800b178:	461a      	mov	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3301      	adds	r3, #1
 800b182:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	3301      	adds	r3, #1
 800b188:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f7ff faa2 	bl	800a6d4 <SWAPBYTE>
 800b190:	4603      	mov	r3, r0
 800b192:	461a      	mov	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	80da      	strh	r2, [r3, #6]
}
 800b198:	bf00      	nop
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1aa:	2180      	movs	r1, #128	; 0x80
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f003 fa75 	bl	800e69c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f003 fa71 	bl	800e69c <USBD_LL_StallEP>
}
 800b1ba:	bf00      	nop
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b086      	sub	sp, #24
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	60f8      	str	r0, [r7, #12]
 800b1ca:	60b9      	str	r1, [r7, #8]
 800b1cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d036      	beq.n	800b246 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b1dc:	6938      	ldr	r0, [r7, #16]
 800b1de:	f000 f836 	bl	800b24e <USBD_GetLen>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	005b      	lsls	r3, r3, #1
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	7812      	ldrb	r2, [r2, #0]
 800b1fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
 800b1fe:	3301      	adds	r3, #1
 800b200:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	4413      	add	r3, r2
 800b208:	2203      	movs	r2, #3
 800b20a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	3301      	adds	r3, #1
 800b210:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b212:	e013      	b.n	800b23c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	4413      	add	r3, r2
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	7812      	ldrb	r2, [r2, #0]
 800b21e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	3301      	adds	r3, #1
 800b224:	613b      	str	r3, [r7, #16]
    idx++;
 800b226:	7dfb      	ldrb	r3, [r7, #23]
 800b228:	3301      	adds	r3, #1
 800b22a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	4413      	add	r3, r2
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
    idx++;
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	3301      	adds	r3, #1
 800b23a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1e7      	bne.n	800b214 <USBD_GetString+0x52>
 800b244:	e000      	b.n	800b248 <USBD_GetString+0x86>
    return;
 800b246:	bf00      	nop
  }
}
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b24e:	b480      	push	{r7}
 800b250:	b085      	sub	sp, #20
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b25e:	e005      	b.n	800b26c <USBD_GetLen+0x1e>
  {
    len++;
 800b260:	7bfb      	ldrb	r3, [r7, #15]
 800b262:	3301      	adds	r3, #1
 800b264:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	3301      	adds	r3, #1
 800b26a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1f5      	bne.n	800b260 <USBD_GetLen+0x12>
  }

  return len;
 800b274:	7bfb      	ldrb	r3, [r7, #15]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2202      	movs	r2, #2
 800b292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f003 fa80 	bl	800e7ae <USBD_LL_Transmit>

  return USBD_OK;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f003 fa6f 	bl	800e7ae <USBD_LL_Transmit>

  return USBD_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	60f8      	str	r0, [r7, #12]
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f003 fa7f 	bl	800e7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2204      	movs	r2, #4
 800b308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b30c:	2300      	movs	r3, #0
 800b30e:	2200      	movs	r2, #0
 800b310:	2100      	movs	r1, #0
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f003 fa4b 	bl	800e7ae <USBD_LL_Transmit>

  return USBD_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2205      	movs	r2, #5
 800b32e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b332:	2300      	movs	r3, #0
 800b334:	2200      	movs	r2, #0
 800b336:	2100      	movs	r1, #0
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f003 fa59 	bl	800e7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b352:	79fb      	ldrb	r3, [r7, #7]
 800b354:	4a08      	ldr	r2, [pc, #32]	; (800b378 <disk_status+0x30>)
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	79fa      	ldrb	r2, [r7, #7]
 800b360:	4905      	ldr	r1, [pc, #20]	; (800b378 <disk_status+0x30>)
 800b362:	440a      	add	r2, r1
 800b364:	7a12      	ldrb	r2, [r2, #8]
 800b366:	4610      	mov	r0, r2
 800b368:	4798      	blx	r3
 800b36a:	4603      	mov	r3, r0
 800b36c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20000990 	.word	0x20000990

0800b37c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	4a0d      	ldr	r2, [pc, #52]	; (800b3c4 <disk_initialize+0x48>)
 800b38e:	5cd3      	ldrb	r3, [r2, r3]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d111      	bne.n	800b3b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	4a0b      	ldr	r2, [pc, #44]	; (800b3c4 <disk_initialize+0x48>)
 800b398:	2101      	movs	r1, #1
 800b39a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b39c:	79fb      	ldrb	r3, [r7, #7]
 800b39e:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <disk_initialize+0x48>)
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	79fa      	ldrb	r2, [r7, #7]
 800b3aa:	4906      	ldr	r1, [pc, #24]	; (800b3c4 <disk_initialize+0x48>)
 800b3ac:	440a      	add	r2, r1
 800b3ae:	7a12      	ldrb	r2, [r2, #8]
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20000990 	.word	0x20000990

0800b3c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	607a      	str	r2, [r7, #4]
 800b3d2:	603b      	str	r3, [r7, #0]
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	4a0a      	ldr	r2, [pc, #40]	; (800b404 <disk_read+0x3c>)
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	4413      	add	r3, r2
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	689c      	ldr	r4, [r3, #8]
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
 800b3e6:	4a07      	ldr	r2, [pc, #28]	; (800b404 <disk_read+0x3c>)
 800b3e8:	4413      	add	r3, r2
 800b3ea:	7a18      	ldrb	r0, [r3, #8]
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	68b9      	ldr	r1, [r7, #8]
 800b3f2:	47a0      	blx	r4
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd90      	pop	{r4, r7, pc}
 800b402:	bf00      	nop
 800b404:	20000990 	.word	0x20000990

0800b408 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b408:	b590      	push	{r4, r7, lr}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60b9      	str	r1, [r7, #8]
 800b410:	607a      	str	r2, [r7, #4]
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	4603      	mov	r3, r0
 800b416:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	4a0a      	ldr	r2, [pc, #40]	; (800b444 <disk_write+0x3c>)
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	68dc      	ldr	r4, [r3, #12]
 800b424:	7bfb      	ldrb	r3, [r7, #15]
 800b426:	4a07      	ldr	r2, [pc, #28]	; (800b444 <disk_write+0x3c>)
 800b428:	4413      	add	r3, r2
 800b42a:	7a18      	ldrb	r0, [r3, #8]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	68b9      	ldr	r1, [r7, #8]
 800b432:	47a0      	blx	r4
 800b434:	4603      	mov	r3, r0
 800b436:	75fb      	strb	r3, [r7, #23]
  return res;
 800b438:	7dfb      	ldrb	r3, [r7, #23]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	371c      	adds	r7, #28
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd90      	pop	{r4, r7, pc}
 800b442:	bf00      	nop
 800b444:	20000990 	.word	0x20000990

0800b448 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	603a      	str	r2, [r7, #0]
 800b452:	71fb      	strb	r3, [r7, #7]
 800b454:	460b      	mov	r3, r1
 800b456:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	4a09      	ldr	r2, [pc, #36]	; (800b480 <disk_ioctl+0x38>)
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	79fa      	ldrb	r2, [r7, #7]
 800b466:	4906      	ldr	r1, [pc, #24]	; (800b480 <disk_ioctl+0x38>)
 800b468:	440a      	add	r2, r1
 800b46a:	7a10      	ldrb	r0, [r2, #8]
 800b46c:	79b9      	ldrb	r1, [r7, #6]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	4798      	blx	r3
 800b472:	4603      	mov	r3, r0
 800b474:	73fb      	strb	r3, [r7, #15]
  return res;
 800b476:	7bfb      	ldrb	r3, [r7, #15]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3710      	adds	r7, #16
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	20000990 	.word	0x20000990

0800b484 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	3301      	adds	r3, #1
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b494:	89fb      	ldrh	r3, [r7, #14]
 800b496:	021b      	lsls	r3, r3, #8
 800b498:	b21a      	sxth	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	b21b      	sxth	r3, r3
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	b21b      	sxth	r3, r3
 800b4a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b4a6:	89fb      	ldrh	r3, [r7, #14]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3303      	adds	r3, #3
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	021b      	lsls	r3, r3, #8
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	3202      	adds	r2, #2
 800b4cc:	7812      	ldrb	r2, [r2, #0]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	021b      	lsls	r3, r3, #8
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	3201      	adds	r2, #1
 800b4da:	7812      	ldrb	r2, [r2, #0]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	021b      	lsls	r3, r3, #8
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	7812      	ldrb	r2, [r2, #0]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	60fb      	str	r3, [r7, #12]
	return rv;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	460b      	mov	r3, r1
 800b504:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	1c5a      	adds	r2, r3, #1
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	887a      	ldrh	r2, [r7, #2]
 800b50e:	b2d2      	uxtb	r2, r2
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	887b      	ldrh	r3, [r7, #2]
 800b514:	0a1b      	lsrs	r3, r3, #8
 800b516:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	607a      	str	r2, [r7, #4]
 800b51e:	887a      	ldrh	r2, [r7, #2]
 800b520:	b2d2      	uxtb	r2, r2
 800b522:	701a      	strb	r2, [r3, #0]
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	1c5a      	adds	r2, r3, #1
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	b2d2      	uxtb	r2, r2
 800b544:	701a      	strb	r2, [r3, #0]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	0a1b      	lsrs	r3, r3, #8
 800b54a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	607a      	str	r2, [r7, #4]
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	b2d2      	uxtb	r2, r2
 800b556:	701a      	strb	r2, [r3, #0]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	0a1b      	lsrs	r3, r3, #8
 800b55c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	607a      	str	r2, [r7, #4]
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	b2d2      	uxtb	r2, r2
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	0a1b      	lsrs	r3, r3, #8
 800b56e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	607a      	str	r2, [r7, #4]
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	b2d2      	uxtb	r2, r2
 800b57a:	701a      	strb	r2, [r3, #0]
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00d      	beq.n	800b5be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	1c53      	adds	r3, r2, #1
 800b5a6:	613b      	str	r3, [r7, #16]
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	1c59      	adds	r1, r3, #1
 800b5ac:	6179      	str	r1, [r7, #20]
 800b5ae:	7812      	ldrb	r2, [r2, #0]
 800b5b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	607b      	str	r3, [r7, #4]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1f1      	bne.n	800b5a2 <mem_cpy+0x1a>
	}
}
 800b5be:	bf00      	nop
 800b5c0:	371c      	adds	r7, #28
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b5ca:	b480      	push	{r7}
 800b5cc:	b087      	sub	sp, #28
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	60b9      	str	r1, [r7, #8]
 800b5d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	617a      	str	r2, [r7, #20]
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	b2d2      	uxtb	r2, r2
 800b5e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	607b      	str	r3, [r7, #4]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1f3      	bne.n	800b5da <mem_set+0x10>
}
 800b5f2:	bf00      	nop
 800b5f4:	bf00      	nop
 800b5f6:	371c      	adds	r7, #28
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b600:	b480      	push	{r7}
 800b602:	b089      	sub	sp, #36	; 0x24
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	61fb      	str	r3, [r7, #28]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b614:	2300      	movs	r3, #0
 800b616:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	61fa      	str	r2, [r7, #28]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	4619      	mov	r1, r3
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	1c5a      	adds	r2, r3, #1
 800b626:	61ba      	str	r2, [r7, #24]
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	1acb      	subs	r3, r1, r3
 800b62c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3b01      	subs	r3, #1
 800b632:	607b      	str	r3, [r7, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d002      	beq.n	800b640 <mem_cmp+0x40>
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0eb      	beq.n	800b618 <mem_cmp+0x18>

	return r;
 800b640:	697b      	ldr	r3, [r7, #20]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3724      	adds	r7, #36	; 0x24
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b658:	e002      	b.n	800b660 <chk_chr+0x12>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	3301      	adds	r3, #1
 800b65e:	607b      	str	r3, [r7, #4]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d005      	beq.n	800b674 <chk_chr+0x26>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	461a      	mov	r2, r3
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	4293      	cmp	r3, r2
 800b672:	d1f2      	bne.n	800b65a <chk_chr+0xc>
	return *str;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	781b      	ldrb	r3, [r3, #0]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b68e:	2300      	movs	r3, #0
 800b690:	60bb      	str	r3, [r7, #8]
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	e029      	b.n	800b6ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b698:	4a27      	ldr	r2, [pc, #156]	; (800b738 <chk_lock+0xb4>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	011b      	lsls	r3, r3, #4
 800b69e:	4413      	add	r3, r2
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d01d      	beq.n	800b6e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6a6:	4a24      	ldr	r2, [pc, #144]	; (800b738 <chk_lock+0xb4>)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	011b      	lsls	r3, r3, #4
 800b6ac:	4413      	add	r3, r2
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d116      	bne.n	800b6e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b6b8:	4a1f      	ldr	r2, [pc, #124]	; (800b738 <chk_lock+0xb4>)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	011b      	lsls	r3, r3, #4
 800b6be:	4413      	add	r3, r2
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d10c      	bne.n	800b6e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b6cc:	4a1a      	ldr	r2, [pc, #104]	; (800b738 <chk_lock+0xb4>)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	011b      	lsls	r3, r3, #4
 800b6d2:	4413      	add	r3, r2
 800b6d4:	3308      	adds	r3, #8
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d102      	bne.n	800b6e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b6e0:	e007      	b.n	800b6f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d9d2      	bls.n	800b698 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d109      	bne.n	800b70c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d102      	bne.n	800b704 <chk_lock+0x80>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b02      	cmp	r3, #2
 800b702:	d101      	bne.n	800b708 <chk_lock+0x84>
 800b704:	2300      	movs	r3, #0
 800b706:	e010      	b.n	800b72a <chk_lock+0xa6>
 800b708:	2312      	movs	r3, #18
 800b70a:	e00e      	b.n	800b72a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d108      	bne.n	800b724 <chk_lock+0xa0>
 800b712:	4a09      	ldr	r2, [pc, #36]	; (800b738 <chk_lock+0xb4>)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	011b      	lsls	r3, r3, #4
 800b718:	4413      	add	r3, r2
 800b71a:	330c      	adds	r3, #12
 800b71c:	881b      	ldrh	r3, [r3, #0]
 800b71e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b722:	d101      	bne.n	800b728 <chk_lock+0xa4>
 800b724:	2310      	movs	r3, #16
 800b726:	e000      	b.n	800b72a <chk_lock+0xa6>
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	20000770 	.word	0x20000770

0800b73c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b742:	2300      	movs	r3, #0
 800b744:	607b      	str	r3, [r7, #4]
 800b746:	e002      	b.n	800b74e <enq_lock+0x12>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3301      	adds	r3, #1
 800b74c:	607b      	str	r3, [r7, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d806      	bhi.n	800b762 <enq_lock+0x26>
 800b754:	4a09      	ldr	r2, [pc, #36]	; (800b77c <enq_lock+0x40>)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	4413      	add	r3, r2
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1f2      	bne.n	800b748 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b02      	cmp	r3, #2
 800b766:	bf14      	ite	ne
 800b768:	2301      	movne	r3, #1
 800b76a:	2300      	moveq	r3, #0
 800b76c:	b2db      	uxtb	r3, r3
}
 800b76e:	4618      	mov	r0, r3
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	20000770 	.word	0x20000770

0800b780 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b78a:	2300      	movs	r3, #0
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	e01f      	b.n	800b7d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b790:	4a41      	ldr	r2, [pc, #260]	; (800b898 <inc_lock+0x118>)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	011b      	lsls	r3, r3, #4
 800b796:	4413      	add	r3, r2
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d113      	bne.n	800b7ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b7a2:	4a3d      	ldr	r2, [pc, #244]	; (800b898 <inc_lock+0x118>)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	011b      	lsls	r3, r3, #4
 800b7a8:	4413      	add	r3, r2
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d109      	bne.n	800b7ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b7b6:	4a38      	ldr	r2, [pc, #224]	; (800b898 <inc_lock+0x118>)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	011b      	lsls	r3, r3, #4
 800b7bc:	4413      	add	r3, r2
 800b7be:	3308      	adds	r3, #8
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d006      	beq.n	800b7d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d9dc      	bls.n	800b790 <inc_lock+0x10>
 800b7d6:	e000      	b.n	800b7da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b7d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d132      	bne.n	800b846 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	e002      	b.n	800b7ec <inc_lock+0x6c>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d806      	bhi.n	800b800 <inc_lock+0x80>
 800b7f2:	4a29      	ldr	r2, [pc, #164]	; (800b898 <inc_lock+0x118>)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	011b      	lsls	r3, r3, #4
 800b7f8:	4413      	add	r3, r2
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1f2      	bne.n	800b7e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b02      	cmp	r3, #2
 800b804:	d101      	bne.n	800b80a <inc_lock+0x8a>
 800b806:	2300      	movs	r3, #0
 800b808:	e040      	b.n	800b88c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	4922      	ldr	r1, [pc, #136]	; (800b898 <inc_lock+0x118>)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	011b      	lsls	r3, r3, #4
 800b814:	440b      	add	r3, r1
 800b816:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689a      	ldr	r2, [r3, #8]
 800b81c:	491e      	ldr	r1, [pc, #120]	; (800b898 <inc_lock+0x118>)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	011b      	lsls	r3, r3, #4
 800b822:	440b      	add	r3, r1
 800b824:	3304      	adds	r3, #4
 800b826:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	695a      	ldr	r2, [r3, #20]
 800b82c:	491a      	ldr	r1, [pc, #104]	; (800b898 <inc_lock+0x118>)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	011b      	lsls	r3, r3, #4
 800b832:	440b      	add	r3, r1
 800b834:	3308      	adds	r3, #8
 800b836:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b838:	4a17      	ldr	r2, [pc, #92]	; (800b898 <inc_lock+0x118>)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	011b      	lsls	r3, r3, #4
 800b83e:	4413      	add	r3, r2
 800b840:	330c      	adds	r3, #12
 800b842:	2200      	movs	r2, #0
 800b844:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d009      	beq.n	800b860 <inc_lock+0xe0>
 800b84c:	4a12      	ldr	r2, [pc, #72]	; (800b898 <inc_lock+0x118>)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	011b      	lsls	r3, r3, #4
 800b852:	4413      	add	r3, r2
 800b854:	330c      	adds	r3, #12
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <inc_lock+0xe0>
 800b85c:	2300      	movs	r3, #0
 800b85e:	e015      	b.n	800b88c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d108      	bne.n	800b878 <inc_lock+0xf8>
 800b866:	4a0c      	ldr	r2, [pc, #48]	; (800b898 <inc_lock+0x118>)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	011b      	lsls	r3, r3, #4
 800b86c:	4413      	add	r3, r2
 800b86e:	330c      	adds	r3, #12
 800b870:	881b      	ldrh	r3, [r3, #0]
 800b872:	3301      	adds	r3, #1
 800b874:	b29a      	uxth	r2, r3
 800b876:	e001      	b.n	800b87c <inc_lock+0xfc>
 800b878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b87c:	4906      	ldr	r1, [pc, #24]	; (800b898 <inc_lock+0x118>)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	011b      	lsls	r3, r3, #4
 800b882:	440b      	add	r3, r1
 800b884:	330c      	adds	r3, #12
 800b886:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3301      	adds	r3, #1
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	20000770 	.word	0x20000770

0800b89c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	607b      	str	r3, [r7, #4]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d825      	bhi.n	800b8fc <dec_lock+0x60>
		n = Files[i].ctr;
 800b8b0:	4a17      	ldr	r2, [pc, #92]	; (800b910 <dec_lock+0x74>)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	011b      	lsls	r3, r3, #4
 800b8b6:	4413      	add	r3, r2
 800b8b8:	330c      	adds	r3, #12
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b8be:	89fb      	ldrh	r3, [r7, #14]
 800b8c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8c4:	d101      	bne.n	800b8ca <dec_lock+0x2e>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b8ca:	89fb      	ldrh	r3, [r7, #14]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <dec_lock+0x3a>
 800b8d0:	89fb      	ldrh	r3, [r7, #14]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b8d6:	4a0e      	ldr	r2, [pc, #56]	; (800b910 <dec_lock+0x74>)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	011b      	lsls	r3, r3, #4
 800b8dc:	4413      	add	r3, r2
 800b8de:	330c      	adds	r3, #12
 800b8e0:	89fa      	ldrh	r2, [r7, #14]
 800b8e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b8e4:	89fb      	ldrh	r3, [r7, #14]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d105      	bne.n	800b8f6 <dec_lock+0x5a>
 800b8ea:	4a09      	ldr	r2, [pc, #36]	; (800b910 <dec_lock+0x74>)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	4413      	add	r3, r2
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	737b      	strb	r3, [r7, #13]
 800b8fa:	e001      	b.n	800b900 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b900:	7b7b      	ldrb	r3, [r7, #13]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	20000770 	.word	0x20000770

0800b914 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b91c:	2300      	movs	r3, #0
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	e010      	b.n	800b944 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b922:	4a0d      	ldr	r2, [pc, #52]	; (800b958 <clear_lock+0x44>)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	011b      	lsls	r3, r3, #4
 800b928:	4413      	add	r3, r2
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d105      	bne.n	800b93e <clear_lock+0x2a>
 800b932:	4a09      	ldr	r2, [pc, #36]	; (800b958 <clear_lock+0x44>)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	011b      	lsls	r3, r3, #4
 800b938:	4413      	add	r3, r2
 800b93a:	2200      	movs	r2, #0
 800b93c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3301      	adds	r3, #1
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d9eb      	bls.n	800b922 <clear_lock+0xe>
	}
}
 800b94a:	bf00      	nop
 800b94c:	bf00      	nop
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	20000770 	.word	0x20000770

0800b95c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b086      	sub	sp, #24
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	78db      	ldrb	r3, [r3, #3]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d034      	beq.n	800b9da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b974:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	7858      	ldrb	r0, [r3, #1]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b980:	2301      	movs	r3, #1
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	f7ff fd40 	bl	800b408 <disk_write>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b98e:	2301      	movs	r3, #1
 800b990:	73fb      	strb	r3, [r7, #15]
 800b992:	e022      	b.n	800b9da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	1ad2      	subs	r2, r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d217      	bcs.n	800b9da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	789b      	ldrb	r3, [r3, #2]
 800b9ae:	613b      	str	r3, [r7, #16]
 800b9b0:	e010      	b.n	800b9d4 <sync_window+0x78>
					wsect += fs->fsize;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	69db      	ldr	r3, [r3, #28]
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	7858      	ldrb	r0, [r3, #1]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	f7ff fd1d 	bl	800b408 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	613b      	str	r3, [r7, #16]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d8eb      	bhi.n	800b9b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d01b      	beq.n	800ba34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7ff ffad 	bl	800b95c <sync_window>
 800ba02:	4603      	mov	r3, r0
 800ba04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba06:	7bfb      	ldrb	r3, [r7, #15]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d113      	bne.n	800ba34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	7858      	ldrb	r0, [r3, #1]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ba16:	2301      	movs	r3, #1
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	f7ff fcd5 	bl	800b3c8 <disk_read>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d004      	beq.n	800ba2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ba24:	f04f 33ff 	mov.w	r3, #4294967295
 800ba28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
	...

0800ba40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff ff87 	bl	800b95c <sync_window>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d158      	bne.n	800bb0a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	2b03      	cmp	r3, #3
 800ba5e:	d148      	bne.n	800baf2 <sync_fs+0xb2>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	791b      	ldrb	r3, [r3, #4]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d144      	bne.n	800baf2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	3334      	adds	r3, #52	; 0x34
 800ba6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff fda9 	bl	800b5ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3334      	adds	r3, #52	; 0x34
 800ba7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba80:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7ff fd38 	bl	800b4fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	3334      	adds	r3, #52	; 0x34
 800ba8e:	4921      	ldr	r1, [pc, #132]	; (800bb14 <sync_fs+0xd4>)
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7ff fd4d 	bl	800b530 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	3334      	adds	r3, #52	; 0x34
 800ba9a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba9e:	491e      	ldr	r1, [pc, #120]	; (800bb18 <sync_fs+0xd8>)
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7ff fd45 	bl	800b530 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3334      	adds	r3, #52	; 0x34
 800baaa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	4619      	mov	r1, r3
 800bab4:	4610      	mov	r0, r2
 800bab6:	f7ff fd3b 	bl	800b530 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	3334      	adds	r3, #52	; 0x34
 800babe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	4619      	mov	r1, r3
 800bac8:	4610      	mov	r0, r2
 800baca:	f7ff fd31 	bl	800b530 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	1c5a      	adds	r2, r3, #1
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	7858      	ldrb	r0, [r3, #1]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bae6:	2301      	movs	r3, #1
 800bae8:	f7ff fc8e 	bl	800b408 <disk_write>
			fs->fsi_flag = 0;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	785b      	ldrb	r3, [r3, #1]
 800baf6:	2200      	movs	r2, #0
 800baf8:	2100      	movs	r1, #0
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff fca4 	bl	800b448 <disk_ioctl>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <sync_fs+0xca>
 800bb06:	2301      	movs	r3, #1
 800bb08:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	41615252 	.word	0x41615252
 800bb18:	61417272 	.word	0x61417272

0800bb1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	3b02      	subs	r3, #2
 800bb2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	3b02      	subs	r3, #2
 800bb32:	683a      	ldr	r2, [r7, #0]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d301      	bcc.n	800bb3c <clust2sect+0x20>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	e008      	b.n	800bb4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	895b      	ldrh	r3, [r3, #10]
 800bb40:	461a      	mov	r2, r3
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	fb03 f202 	mul.w	r2, r3, r2
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4c:	4413      	add	r3, r2
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b086      	sub	sp, #24
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d904      	bls.n	800bb7a <get_fat+0x20>
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d302      	bcc.n	800bb80 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	617b      	str	r3, [r7, #20]
 800bb7e:	e08f      	b.n	800bca0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295
 800bb84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d062      	beq.n	800bc54 <get_fat+0xfa>
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	dc7c      	bgt.n	800bc8c <get_fat+0x132>
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d002      	beq.n	800bb9c <get_fat+0x42>
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d042      	beq.n	800bc20 <get_fat+0xc6>
 800bb9a:	e077      	b.n	800bc8c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	60fb      	str	r3, [r7, #12]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	085b      	lsrs	r3, r3, #1
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	4413      	add	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	0a5b      	lsrs	r3, r3, #9
 800bbb2:	4413      	add	r3, r2
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	6938      	ldr	r0, [r7, #16]
 800bbb8:	f7ff ff14 	bl	800b9e4 <move_window>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d167      	bne.n	800bc92 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	60fa      	str	r2, [r7, #12]
 800bbc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	4413      	add	r3, r2
 800bbd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	0a5b      	lsrs	r3, r3, #9
 800bbde:	4413      	add	r3, r2
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6938      	ldr	r0, [r7, #16]
 800bbe4:	f7ff fefe 	bl	800b9e4 <move_window>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d153      	bne.n	800bc96 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	461a      	mov	r2, r3
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <get_fat+0xbc>
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	091b      	lsrs	r3, r3, #4
 800bc14:	e002      	b.n	800bc1c <get_fat+0xc2>
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc1c:	617b      	str	r3, [r7, #20]
			break;
 800bc1e:	e03f      	b.n	800bca0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	0a1b      	lsrs	r3, r3, #8
 800bc28:	4413      	add	r3, r2
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6938      	ldr	r0, [r7, #16]
 800bc2e:	f7ff fed9 	bl	800b9e4 <move_window>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d130      	bne.n	800bc9a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bc46:	4413      	add	r3, r2
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7ff fc1b 	bl	800b484 <ld_word>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	617b      	str	r3, [r7, #20]
			break;
 800bc52:	e025      	b.n	800bca0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	09db      	lsrs	r3, r3, #7
 800bc5c:	4413      	add	r3, r2
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6938      	ldr	r0, [r7, #16]
 800bc62:	f7ff febf 	bl	800b9e4 <move_window>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d118      	bne.n	800bc9e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bc7a:	4413      	add	r3, r2
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff fc19 	bl	800b4b4 <ld_dword>
 800bc82:	4603      	mov	r3, r0
 800bc84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc88:	617b      	str	r3, [r7, #20]
			break;
 800bc8a:	e009      	b.n	800bca0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	e006      	b.n	800bca0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc92:	bf00      	nop
 800bc94:	e004      	b.n	800bca0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc96:	bf00      	nop
 800bc98:	e002      	b.n	800bca0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc9a:	bf00      	nop
 800bc9c:	e000      	b.n	800bca0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc9e:	bf00      	nop
		}
	}

	return val;
 800bca0:	697b      	ldr	r3, [r7, #20]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bcaa:	b590      	push	{r4, r7, lr}
 800bcac:	b089      	sub	sp, #36	; 0x24
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	60f8      	str	r0, [r7, #12]
 800bcb2:	60b9      	str	r1, [r7, #8]
 800bcb4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	f240 80d2 	bls.w	800be66 <put_fat+0x1bc>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	f080 80cc 	bcs.w	800be66 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	f000 8096 	beq.w	800be04 <put_fat+0x15a>
 800bcd8:	2b03      	cmp	r3, #3
 800bcda:	f300 80cd 	bgt.w	800be78 <put_fat+0x1ce>
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d002      	beq.n	800bce8 <put_fat+0x3e>
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d06e      	beq.n	800bdc4 <put_fat+0x11a>
 800bce6:	e0c7      	b.n	800be78 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	61bb      	str	r3, [r7, #24]
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	085b      	lsrs	r3, r3, #1
 800bcf0:	69ba      	ldr	r2, [r7, #24]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	0a5b      	lsrs	r3, r3, #9
 800bcfe:	4413      	add	r3, r2
 800bd00:	4619      	mov	r1, r3
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7ff fe6e 	bl	800b9e4 <move_window>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd0c:	7ffb      	ldrb	r3, [r7, #31]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f040 80ab 	bne.w	800be6a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	1c59      	adds	r1, r3, #1
 800bd1e:	61b9      	str	r1, [r7, #24]
 800bd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd24:	4413      	add	r3, r2
 800bd26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00d      	beq.n	800bd4e <put_fat+0xa4>
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	b25b      	sxtb	r3, r3
 800bd38:	f003 030f 	and.w	r3, r3, #15
 800bd3c:	b25a      	sxtb	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	011b      	lsls	r3, r3, #4
 800bd44:	b25b      	sxtb	r3, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	b25b      	sxtb	r3, r3
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	e001      	b.n	800bd52 <put_fat+0xa8>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	697a      	ldr	r2, [r7, #20]
 800bd54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	0a5b      	lsrs	r3, r3, #9
 800bd64:	4413      	add	r3, r2
 800bd66:	4619      	mov	r1, r3
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f7ff fe3b 	bl	800b9e4 <move_window>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd72:	7ffb      	ldrb	r3, [r7, #31]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d17a      	bne.n	800be6e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd84:	4413      	add	r3, r2
 800bd86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <put_fat+0xf0>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	091b      	lsrs	r3, r3, #4
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	e00e      	b.n	800bdb8 <put_fat+0x10e>
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	b25b      	sxtb	r3, r3
 800bda0:	f023 030f 	bic.w	r3, r3, #15
 800bda4:	b25a      	sxtb	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	0a1b      	lsrs	r3, r3, #8
 800bdaa:	b25b      	sxtb	r3, r3
 800bdac:	f003 030f 	and.w	r3, r3, #15
 800bdb0:	b25b      	sxtb	r3, r3
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	b25b      	sxtb	r3, r3
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	70da      	strb	r2, [r3, #3]
			break;
 800bdc2:	e059      	b.n	800be78 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	0a1b      	lsrs	r3, r3, #8
 800bdcc:	4413      	add	r3, r2
 800bdce:	4619      	mov	r1, r3
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f7ff fe07 	bl	800b9e4 <move_window>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdda:	7ffb      	ldrb	r3, [r7, #31]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d148      	bne.n	800be72 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bdee:	4413      	add	r3, r2
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	b292      	uxth	r2, r2
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff fb7f 	bl	800b4fa <st_word>
			fs->wflag = 1;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2201      	movs	r2, #1
 800be00:	70da      	strb	r2, [r3, #3]
			break;
 800be02:	e039      	b.n	800be78 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	09db      	lsrs	r3, r3, #7
 800be0c:	4413      	add	r3, r2
 800be0e:	4619      	mov	r1, r3
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7ff fde7 	bl	800b9e4 <move_window>
 800be16:	4603      	mov	r3, r0
 800be18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be1a:	7ffb      	ldrb	r3, [r7, #31]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d12a      	bne.n	800be76 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800be34:	4413      	add	r3, r2
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff fb3c 	bl	800b4b4 <ld_dword>
 800be3c:	4603      	mov	r3, r0
 800be3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800be42:	4323      	orrs	r3, r4
 800be44:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800be54:	4413      	add	r3, r2
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff fb69 	bl	800b530 <st_dword>
			fs->wflag = 1;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2201      	movs	r2, #1
 800be62:	70da      	strb	r2, [r3, #3]
			break;
 800be64:	e008      	b.n	800be78 <put_fat+0x1ce>
		}
	}
 800be66:	bf00      	nop
 800be68:	e006      	b.n	800be78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be6a:	bf00      	nop
 800be6c:	e004      	b.n	800be78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be6e:	bf00      	nop
 800be70:	e002      	b.n	800be78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be72:	bf00      	nop
 800be74:	e000      	b.n	800be78 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800be76:	bf00      	nop
	return res;
 800be78:	7ffb      	ldrb	r3, [r7, #31]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3724      	adds	r7, #36	; 0x24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd90      	pop	{r4, r7, pc}

0800be82 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b088      	sub	sp, #32
 800be86:	af00      	add	r7, sp, #0
 800be88:	60f8      	str	r0, [r7, #12]
 800be8a:	60b9      	str	r1, [r7, #8]
 800be8c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d904      	bls.n	800bea8 <remove_chain+0x26>
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	699b      	ldr	r3, [r3, #24]
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d301      	bcc.n	800beac <remove_chain+0x2a>
 800bea8:	2302      	movs	r3, #2
 800beaa:	e04b      	b.n	800bf44 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00c      	beq.n	800becc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800beb2:	f04f 32ff 	mov.w	r2, #4294967295
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	69b8      	ldr	r0, [r7, #24]
 800beba:	f7ff fef6 	bl	800bcaa <put_fat>
 800bebe:	4603      	mov	r3, r0
 800bec0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bec2:	7ffb      	ldrb	r3, [r7, #31]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <remove_chain+0x4a>
 800bec8:	7ffb      	ldrb	r3, [r7, #31]
 800beca:	e03b      	b.n	800bf44 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800becc:	68b9      	ldr	r1, [r7, #8]
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f7ff fe43 	bl	800bb5a <get_fat>
 800bed4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d031      	beq.n	800bf40 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d101      	bne.n	800bee6 <remove_chain+0x64>
 800bee2:	2302      	movs	r3, #2
 800bee4:	e02e      	b.n	800bf44 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beec:	d101      	bne.n	800bef2 <remove_chain+0x70>
 800beee:	2301      	movs	r3, #1
 800bef0:	e028      	b.n	800bf44 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bef2:	2200      	movs	r2, #0
 800bef4:	68b9      	ldr	r1, [r7, #8]
 800bef6:	69b8      	ldr	r0, [r7, #24]
 800bef8:	f7ff fed7 	bl	800bcaa <put_fat>
 800befc:	4603      	mov	r3, r0
 800befe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf00:	7ffb      	ldrb	r3, [r7, #31]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d001      	beq.n	800bf0a <remove_chain+0x88>
 800bf06:	7ffb      	ldrb	r3, [r7, #31]
 800bf08:	e01c      	b.n	800bf44 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	695a      	ldr	r2, [r3, #20]
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	3b02      	subs	r3, #2
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d20b      	bcs.n	800bf30 <remove_chain+0xae>
			fs->free_clst++;
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	695b      	ldr	r3, [r3, #20]
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	791b      	ldrb	r3, [r3, #4]
 800bf26:	f043 0301 	orr.w	r3, r3, #1
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d3c6      	bcc.n	800becc <remove_chain+0x4a>
 800bf3e:	e000      	b.n	800bf42 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bf40:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3720      	adds	r7, #32
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b088      	sub	sp, #32
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10d      	bne.n	800bf7e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d004      	beq.n	800bf78 <create_chain+0x2c>
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d31b      	bcc.n	800bfb0 <create_chain+0x64>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	61bb      	str	r3, [r7, #24]
 800bf7c:	e018      	b.n	800bfb0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7ff fdea 	bl	800bb5a <get_fat>
 800bf86:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d801      	bhi.n	800bf92 <create_chain+0x46>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e070      	b.n	800c074 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf98:	d101      	bne.n	800bf9e <create_chain+0x52>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	e06a      	b.n	800c074 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d201      	bcs.n	800bfac <create_chain+0x60>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	e063      	b.n	800c074 <create_chain+0x128>
		scl = clst;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	69fa      	ldr	r2, [r7, #28]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d307      	bcc.n	800bfd4 <create_chain+0x88>
				ncl = 2;
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bfc8:	69fa      	ldr	r2, [r7, #28]
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d901      	bls.n	800bfd4 <create_chain+0x88>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e04f      	b.n	800c074 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bfd4:	69f9      	ldr	r1, [r7, #28]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff fdbf 	bl	800bb5a <get_fat>
 800bfdc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00e      	beq.n	800c002 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d003      	beq.n	800bff2 <create_chain+0xa6>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff0:	d101      	bne.n	800bff6 <create_chain+0xaa>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	e03e      	b.n	800c074 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bff6:	69fa      	ldr	r2, [r7, #28]
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d1da      	bne.n	800bfb4 <create_chain+0x68>
 800bffe:	2300      	movs	r3, #0
 800c000:	e038      	b.n	800c074 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c002:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c004:	f04f 32ff 	mov.w	r2, #4294967295
 800c008:	69f9      	ldr	r1, [r7, #28]
 800c00a:	6938      	ldr	r0, [r7, #16]
 800c00c:	f7ff fe4d 	bl	800bcaa <put_fat>
 800c010:	4603      	mov	r3, r0
 800c012:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c014:	7dfb      	ldrb	r3, [r7, #23]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d109      	bne.n	800c02e <create_chain+0xe2>
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d006      	beq.n	800c02e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c020:	69fa      	ldr	r2, [r7, #28]
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6938      	ldr	r0, [r7, #16]
 800c026:	f7ff fe40 	bl	800bcaa <put_fat>
 800c02a:	4603      	mov	r3, r0
 800c02c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d116      	bne.n	800c062 <create_chain+0x116>
		fs->last_clst = ncl;
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	69fa      	ldr	r2, [r7, #28]
 800c038:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	695a      	ldr	r2, [r3, #20]
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	699b      	ldr	r3, [r3, #24]
 800c042:	3b02      	subs	r3, #2
 800c044:	429a      	cmp	r2, r3
 800c046:	d804      	bhi.n	800c052 <create_chain+0x106>
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	1e5a      	subs	r2, r3, #1
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	791b      	ldrb	r3, [r3, #4]
 800c056:	f043 0301 	orr.w	r3, r3, #1
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	711a      	strb	r2, [r3, #4]
 800c060:	e007      	b.n	800c072 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c062:	7dfb      	ldrb	r3, [r7, #23]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d102      	bne.n	800c06e <create_chain+0x122>
 800c068:	f04f 33ff 	mov.w	r3, #4294967295
 800c06c:	e000      	b.n	800c070 <create_chain+0x124>
 800c06e:	2301      	movs	r3, #1
 800c070:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c072:	69fb      	ldr	r3, [r7, #28]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3720      	adds	r7, #32
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b087      	sub	sp, #28
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c090:	3304      	adds	r3, #4
 800c092:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	0a5b      	lsrs	r3, r3, #9
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	8952      	ldrh	r2, [r2, #10]
 800c09c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	1d1a      	adds	r2, r3, #4
 800c0a6:	613a      	str	r2, [r7, #16]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <clmt_clust+0x3a>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e010      	b.n	800c0d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d307      	bcc.n	800c0ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	617b      	str	r3, [r7, #20]
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0cc:	e7e9      	b.n	800c0a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c0ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	4413      	add	r3, r2
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	371c      	adds	r7, #28
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0fa:	d204      	bcs.n	800c106 <dir_sdi+0x22>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	f003 031f 	and.w	r3, r3, #31
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c106:	2302      	movs	r3, #2
 800c108:	e063      	b.n	800c1d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d106      	bne.n	800c12a <dir_sdi+0x46>
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b02      	cmp	r3, #2
 800c122:	d902      	bls.n	800c12a <dir_sdi+0x46>
		clst = fs->dirbase;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c128:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10c      	bne.n	800c14a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	095b      	lsrs	r3, r3, #5
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	8912      	ldrh	r2, [r2, #8]
 800c138:	4293      	cmp	r3, r2
 800c13a:	d301      	bcc.n	800c140 <dir_sdi+0x5c>
 800c13c:	2302      	movs	r3, #2
 800c13e:	e048      	b.n	800c1d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	61da      	str	r2, [r3, #28]
 800c148:	e029      	b.n	800c19e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	895b      	ldrh	r3, [r3, #10]
 800c14e:	025b      	lsls	r3, r3, #9
 800c150:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c152:	e019      	b.n	800c188 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6979      	ldr	r1, [r7, #20]
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff fcfe 	bl	800bb5a <get_fat>
 800c15e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c166:	d101      	bne.n	800c16c <dir_sdi+0x88>
 800c168:	2301      	movs	r3, #1
 800c16a:	e032      	b.n	800c1d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d904      	bls.n	800c17c <dir_sdi+0x98>
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d301      	bcc.n	800c180 <dir_sdi+0x9c>
 800c17c:	2302      	movs	r3, #2
 800c17e:	e028      	b.n	800c1d2 <dir_sdi+0xee>
			ofs -= csz;
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c188:	683a      	ldr	r2, [r7, #0]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d2e1      	bcs.n	800c154 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c190:	6979      	ldr	r1, [r7, #20]
 800c192:	6938      	ldr	r0, [r7, #16]
 800c194:	f7ff fcc2 	bl	800bb1c <clust2sect>
 800c198:	4602      	mov	r2, r0
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	69db      	ldr	r3, [r3, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <dir_sdi+0xcc>
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	e010      	b.n	800c1d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	69da      	ldr	r2, [r3, #28]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	0a5b      	lsrs	r3, r3, #9
 800c1b8:	441a      	add	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ca:	441a      	add	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3718      	adds	r7, #24
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b086      	sub	sp, #24
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	3320      	adds	r3, #32
 800c1f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	69db      	ldr	r3, [r3, #28]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <dir_next+0x28>
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c200:	d301      	bcc.n	800c206 <dir_next+0x2c>
 800c202:	2304      	movs	r3, #4
 800c204:	e0aa      	b.n	800c35c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f040 8098 	bne.w	800c342 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	69db      	ldr	r3, [r3, #28]
 800c216:	1c5a      	adds	r2, r3, #1
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10b      	bne.n	800c23c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	095b      	lsrs	r3, r3, #5
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	8912      	ldrh	r2, [r2, #8]
 800c22c:	4293      	cmp	r3, r2
 800c22e:	f0c0 8088 	bcc.w	800c342 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	61da      	str	r2, [r3, #28]
 800c238:	2304      	movs	r3, #4
 800c23a:	e08f      	b.n	800c35c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	0a5b      	lsrs	r3, r3, #9
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	8952      	ldrh	r2, [r2, #10]
 800c244:	3a01      	subs	r2, #1
 800c246:	4013      	ands	r3, r2
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d17a      	bne.n	800c342 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	4619      	mov	r1, r3
 800c254:	4610      	mov	r0, r2
 800c256:	f7ff fc80 	bl	800bb5a <get_fat>
 800c25a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d801      	bhi.n	800c266 <dir_next+0x8c>
 800c262:	2302      	movs	r3, #2
 800c264:	e07a      	b.n	800c35c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26c:	d101      	bne.n	800c272 <dir_next+0x98>
 800c26e:	2301      	movs	r3, #1
 800c270:	e074      	b.n	800c35c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d358      	bcc.n	800c32e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d104      	bne.n	800c28c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	61da      	str	r2, [r3, #28]
 800c288:	2304      	movs	r3, #4
 800c28a:	e067      	b.n	800c35c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7ff fe59 	bl	800bf4c <create_chain>
 800c29a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <dir_next+0xcc>
 800c2a2:	2307      	movs	r3, #7
 800c2a4:	e05a      	b.n	800c35c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d101      	bne.n	800c2b0 <dir_next+0xd6>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	e055      	b.n	800c35c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b6:	d101      	bne.n	800c2bc <dir_next+0xe2>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e04f      	b.n	800c35c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f7ff fb4d 	bl	800b95c <sync_window>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <dir_next+0xf2>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e047      	b.n	800c35c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	3334      	adds	r3, #52	; 0x34
 800c2d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7ff f977 	bl	800b5ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c2dc:	2300      	movs	r3, #0
 800c2de:	613b      	str	r3, [r7, #16]
 800c2e0:	6979      	ldr	r1, [r7, #20]
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f7ff fc1a 	bl	800bb1c <clust2sect>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	631a      	str	r2, [r3, #48]	; 0x30
 800c2ee:	e012      	b.n	800c316 <dir_next+0x13c>
						fs->wflag = 1;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	f7ff fb30 	bl	800b95c <sync_window>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d001      	beq.n	800c306 <dir_next+0x12c>
 800c302:	2301      	movs	r3, #1
 800c304:	e02a      	b.n	800c35c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	3301      	adds	r3, #1
 800c30a:	613b      	str	r3, [r7, #16]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c310:	1c5a      	adds	r2, r3, #1
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	631a      	str	r2, [r3, #48]	; 0x30
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	895b      	ldrh	r3, [r3, #10]
 800c31a:	461a      	mov	r2, r3
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	4293      	cmp	r3, r2
 800c320:	d3e6      	bcc.n	800c2f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	1ad2      	subs	r2, r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c334:	6979      	ldr	r1, [r7, #20]
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7ff fbf0 	bl	800bb1c <clust2sect>
 800c33c:	4602      	mov	r2, r0
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c354:	441a      	add	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3718      	adds	r7, #24
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c374:	2100      	movs	r1, #0
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff feb4 	bl	800c0e4 <dir_sdi>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c380:	7dfb      	ldrb	r3, [r7, #23]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d12b      	bne.n	800c3de <dir_alloc+0x7a>
		n = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	69db      	ldr	r3, [r3, #28]
 800c38e:	4619      	mov	r1, r3
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7ff fb27 	bl	800b9e4 <move_window>
 800c396:	4603      	mov	r3, r0
 800c398:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d11d      	bne.n	800c3dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a1b      	ldr	r3, [r3, #32]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	2be5      	cmp	r3, #229	; 0xe5
 800c3a8:	d004      	beq.n	800c3b4 <dir_alloc+0x50>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d107      	bne.n	800c3c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	613b      	str	r3, [r7, #16]
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d102      	bne.n	800c3c8 <dir_alloc+0x64>
 800c3c2:	e00c      	b.n	800c3de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff ff05 	bl	800c1da <dir_next>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0d7      	beq.n	800c38a <dir_alloc+0x26>
 800c3da:	e000      	b.n	800c3de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c3dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c3de:	7dfb      	ldrb	r3, [r7, #23]
 800c3e0:	2b04      	cmp	r3, #4
 800c3e2:	d101      	bne.n	800c3e8 <dir_alloc+0x84>
 800c3e4:	2307      	movs	r3, #7
 800c3e6:	75fb      	strb	r3, [r7, #23]
	return res;
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	331a      	adds	r3, #26
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff f83f 	bl	800b484 <ld_word>
 800c406:	4603      	mov	r3, r0
 800c408:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d109      	bne.n	800c426 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	3314      	adds	r3, #20
 800c416:	4618      	mov	r0, r3
 800c418:	f7ff f834 	bl	800b484 <ld_word>
 800c41c:	4603      	mov	r3, r0
 800c41e:	041b      	lsls	r3, r3, #16
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	4313      	orrs	r3, r2
 800c424:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c426:	68fb      	ldr	r3, [r7, #12]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	331a      	adds	r3, #26
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	b292      	uxth	r2, r2
 800c444:	4611      	mov	r1, r2
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff f857 	bl	800b4fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b03      	cmp	r3, #3
 800c452:	d109      	bne.n	800c468 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	f103 0214 	add.w	r2, r3, #20
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	0c1b      	lsrs	r3, r3, #16
 800c45e:	b29b      	uxth	r3, r3
 800c460:	4619      	mov	r1, r3
 800c462:	4610      	mov	r0, r2
 800c464:	f7ff f849 	bl	800b4fa <st_word>
	}
}
 800c468:	bf00      	nop
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c470:	b590      	push	{r4, r7, lr}
 800c472:	b087      	sub	sp, #28
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	331a      	adds	r3, #26
 800c47e:	4618      	mov	r0, r3
 800c480:	f7ff f800 	bl	800b484 <ld_word>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <cmp_lfn+0x1e>
 800c48a:	2300      	movs	r3, #0
 800c48c:	e059      	b.n	800c542 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c496:	1e5a      	subs	r2, r3, #1
 800c498:	4613      	mov	r3, r2
 800c49a:	005b      	lsls	r3, r3, #1
 800c49c:	4413      	add	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	81fb      	strh	r3, [r7, #14]
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	613b      	str	r3, [r7, #16]
 800c4ac:	e033      	b.n	800c516 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c4ae:	4a27      	ldr	r2, [pc, #156]	; (800c54c <cmp_lfn+0xdc>)
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fe ffe1 	bl	800b484 <ld_word>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c4c6:	89fb      	ldrh	r3, [r7, #14]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01a      	beq.n	800c502 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2bfe      	cmp	r3, #254	; 0xfe
 800c4d0:	d812      	bhi.n	800c4f8 <cmp_lfn+0x88>
 800c4d2:	89bb      	ldrh	r3, [r7, #12]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f001 fcdd 	bl	800de94 <ff_wtoupper>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	461c      	mov	r4, r3
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	617a      	str	r2, [r7, #20]
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	881b      	ldrh	r3, [r3, #0]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f001 fcd1 	bl	800de94 <ff_wtoupper>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	d001      	beq.n	800c4fc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	e022      	b.n	800c542 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c4fc:	89bb      	ldrh	r3, [r7, #12]
 800c4fe:	81fb      	strh	r3, [r7, #14]
 800c500:	e006      	b.n	800c510 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c502:	89bb      	ldrh	r3, [r7, #12]
 800c504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c508:	4293      	cmp	r3, r2
 800c50a:	d001      	beq.n	800c510 <cmp_lfn+0xa0>
 800c50c:	2300      	movs	r3, #0
 800c50e:	e018      	b.n	800c542 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	3301      	adds	r3, #1
 800c514:	613b      	str	r3, [r7, #16]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	2b0c      	cmp	r3, #12
 800c51a:	d9c8      	bls.n	800c4ae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00b      	beq.n	800c540 <cmp_lfn+0xd0>
 800c528:	89fb      	ldrh	r3, [r7, #14]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d008      	beq.n	800c540 <cmp_lfn+0xd0>
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	005b      	lsls	r3, r3, #1
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	4413      	add	r3, r2
 800c536:	881b      	ldrh	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <cmp_lfn+0xd0>
 800c53c:	2300      	movs	r3, #0
 800c53e:	e000      	b.n	800c542 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c540:	2301      	movs	r3, #1
}
 800c542:	4618      	mov	r0, r3
 800c544:	371c      	adds	r7, #28
 800c546:	46bd      	mov	sp, r7
 800c548:	bd90      	pop	{r4, r7, pc}
 800c54a:	bf00      	nop
 800c54c:	08014210 	.word	0x08014210

0800c550 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	4611      	mov	r1, r2
 800c55c:	461a      	mov	r2, r3
 800c55e:	460b      	mov	r3, r1
 800c560:	71fb      	strb	r3, [r7, #7]
 800c562:	4613      	mov	r3, r2
 800c564:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	330d      	adds	r3, #13
 800c56a:	79ba      	ldrb	r2, [r7, #6]
 800c56c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	330b      	adds	r3, #11
 800c572:	220f      	movs	r2, #15
 800c574:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	330c      	adds	r3, #12
 800c57a:	2200      	movs	r2, #0
 800c57c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	331a      	adds	r3, #26
 800c582:	2100      	movs	r1, #0
 800c584:	4618      	mov	r0, r3
 800c586:	f7fe ffb8 	bl	800b4fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	1e5a      	subs	r2, r3, #1
 800c58e:	4613      	mov	r3, r2
 800c590:	005b      	lsls	r3, r3, #1
 800c592:	4413      	add	r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4413      	add	r3, r2
 800c598:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	82fb      	strh	r3, [r7, #22]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c5a2:	8afb      	ldrh	r3, [r7, #22]
 800c5a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d007      	beq.n	800c5bc <put_lfn+0x6c>
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	61fa      	str	r2, [r7, #28]
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c5bc:	4a17      	ldr	r2, [pc, #92]	; (800c61c <put_lfn+0xcc>)
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	8afa      	ldrh	r2, [r7, #22]
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fe ff93 	bl	800b4fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c5d4:	8afb      	ldrh	r3, [r7, #22]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d102      	bne.n	800c5e0 <put_lfn+0x90>
 800c5da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c5de:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	2b0c      	cmp	r3, #12
 800c5ea:	d9da      	bls.n	800c5a2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c5ec:	8afb      	ldrh	r3, [r7, #22]
 800c5ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d006      	beq.n	800c604 <put_lfn+0xb4>
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <put_lfn+0xbc>
 800c604:	79fb      	ldrb	r3, [r7, #7]
 800c606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c60a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	79fa      	ldrb	r2, [r7, #7]
 800c610:	701a      	strb	r2, [r3, #0]
}
 800c612:	bf00      	nop
 800c614:	3720      	adds	r7, #32
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	08014210 	.word	0x08014210

0800c620 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b08c      	sub	sp, #48	; 0x30
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c62e:	220b      	movs	r2, #11
 800c630:	68b9      	ldr	r1, [r7, #8]
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7fe ffa8 	bl	800b588 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2b05      	cmp	r3, #5
 800c63c:	d92b      	bls.n	800c696 <gen_numname+0x76>
		sr = seq;
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c642:	e022      	b.n	800c68a <gen_numname+0x6a>
			wc = *lfn++;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	1c9a      	adds	r2, r3, #2
 800c648:	607a      	str	r2, [r7, #4]
 800c64a:	881b      	ldrh	r3, [r3, #0]
 800c64c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c64e:	2300      	movs	r3, #0
 800c650:	62bb      	str	r3, [r7, #40]	; 0x28
 800c652:	e017      	b.n	800c684 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	005a      	lsls	r2, r3, #1
 800c658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	4413      	add	r3, r2
 800c660:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c662:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c664:	085b      	lsrs	r3, r3, #1
 800c666:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d005      	beq.n	800c67e <gen_numname+0x5e>
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c678:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c67c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	3301      	adds	r3, #1
 800c682:	62bb      	str	r3, [r7, #40]	; 0x28
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	2b0f      	cmp	r3, #15
 800c688:	d9e4      	bls.n	800c654 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	881b      	ldrh	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1d8      	bne.n	800c644 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c696:	2307      	movs	r3, #7
 800c698:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	f003 030f 	and.w	r3, r3, #15
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	3330      	adds	r3, #48	; 0x30
 800c6a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c6aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6ae:	2b39      	cmp	r3, #57	; 0x39
 800c6b0:	d904      	bls.n	800c6bc <gen_numname+0x9c>
 800c6b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6b6:	3307      	adds	r3, #7
 800c6b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6be:	1e5a      	subs	r2, r3, #1
 800c6c0:	62ba      	str	r2, [r7, #40]	; 0x28
 800c6c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c6c6:	4413      	add	r3, r2
 800c6c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c6cc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	091b      	lsrs	r3, r3, #4
 800c6d4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1de      	bne.n	800c69a <gen_numname+0x7a>
	ns[i] = '~';
 800c6dc:	f107 0214 	add.w	r2, r7, #20
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	4413      	add	r3, r2
 800c6e4:	227e      	movs	r2, #126	; 0x7e
 800c6e6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ec:	e002      	b.n	800c6f4 <gen_numname+0xd4>
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d205      	bcs.n	800c708 <gen_numname+0xe8>
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	4413      	add	r3, r2
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	2b20      	cmp	r3, #32
 800c706:	d1f2      	bne.n	800c6ee <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	2b07      	cmp	r3, #7
 800c70c:	d808      	bhi.n	800c720 <gen_numname+0x100>
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	1c5a      	adds	r2, r3, #1
 800c712:	62ba      	str	r2, [r7, #40]	; 0x28
 800c714:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c718:	4413      	add	r3, r2
 800c71a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c71e:	e000      	b.n	800c722 <gen_numname+0x102>
 800c720:	2120      	movs	r1, #32
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	1c5a      	adds	r2, r3, #1
 800c726:	627a      	str	r2, [r7, #36]	; 0x24
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	4413      	add	r3, r2
 800c72c:	460a      	mov	r2, r1
 800c72e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	2b07      	cmp	r3, #7
 800c734:	d9e8      	bls.n	800c708 <gen_numname+0xe8>
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	3730      	adds	r7, #48	; 0x30
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c74c:	230b      	movs	r3, #11
 800c74e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c750:	7bfb      	ldrb	r3, [r7, #15]
 800c752:	b2da      	uxtb	r2, r3
 800c754:	0852      	lsrs	r2, r2, #1
 800c756:	01db      	lsls	r3, r3, #7
 800c758:	4313      	orrs	r3, r2
 800c75a:	b2da      	uxtb	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1c59      	adds	r1, r3, #1
 800c760:	6079      	str	r1, [r7, #4]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	4413      	add	r3, r2
 800c766:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	60bb      	str	r3, [r7, #8]
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1ed      	bne.n	800c750 <sum_sfn+0x10>
	return sum;
 800c774:	7bfb      	ldrb	r3, [r7, #15]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b086      	sub	sp, #24
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c790:	2100      	movs	r1, #0
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff fca6 	bl	800c0e4 <dir_sdi>
 800c798:	4603      	mov	r3, r0
 800c79a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c79c:	7dfb      	ldrb	r3, [r7, #23]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <dir_find+0x24>
 800c7a2:	7dfb      	ldrb	r3, [r7, #23]
 800c7a4:	e0a9      	b.n	800c8fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c7a6:	23ff      	movs	r3, #255	; 0xff
 800c7a8:	753b      	strb	r3, [r7, #20]
 800c7aa:	7d3b      	ldrb	r3, [r7, #20]
 800c7ac:	757b      	strb	r3, [r7, #21]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6938      	ldr	r0, [r7, #16]
 800c7be:	f7ff f911 	bl	800b9e4 <move_window>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f040 8090 	bne.w	800c8ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c7d6:	7dbb      	ldrb	r3, [r7, #22]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d102      	bne.n	800c7e2 <dir_find+0x60>
 800c7dc:	2304      	movs	r3, #4
 800c7de:	75fb      	strb	r3, [r7, #23]
 800c7e0:	e08a      	b.n	800c8f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	330b      	adds	r3, #11
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7ee:	73fb      	strb	r3, [r7, #15]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	7bfa      	ldrb	r2, [r7, #15]
 800c7f4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c7f6:	7dbb      	ldrb	r3, [r7, #22]
 800c7f8:	2be5      	cmp	r3, #229	; 0xe5
 800c7fa:	d007      	beq.n	800c80c <dir_find+0x8a>
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
 800c7fe:	f003 0308 	and.w	r3, r3, #8
 800c802:	2b00      	cmp	r3, #0
 800c804:	d009      	beq.n	800c81a <dir_find+0x98>
 800c806:	7bfb      	ldrb	r3, [r7, #15]
 800c808:	2b0f      	cmp	r3, #15
 800c80a:	d006      	beq.n	800c81a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c80c:	23ff      	movs	r3, #255	; 0xff
 800c80e:	757b      	strb	r3, [r7, #21]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f04f 32ff 	mov.w	r2, #4294967295
 800c816:	631a      	str	r2, [r3, #48]	; 0x30
 800c818:	e05e      	b.n	800c8d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	2b0f      	cmp	r3, #15
 800c81e:	d136      	bne.n	800c88e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d154      	bne.n	800c8d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c82e:	7dbb      	ldrb	r3, [r7, #22]
 800c830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00d      	beq.n	800c854 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	7b5b      	ldrb	r3, [r3, #13]
 800c83e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c840:	7dbb      	ldrb	r3, [r7, #22]
 800c842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c846:	75bb      	strb	r3, [r7, #22]
 800c848:	7dbb      	ldrb	r3, [r7, #22]
 800c84a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	695a      	ldr	r2, [r3, #20]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c854:	7dba      	ldrb	r2, [r7, #22]
 800c856:	7d7b      	ldrb	r3, [r7, #21]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d115      	bne.n	800c888 <dir_find+0x106>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a1b      	ldr	r3, [r3, #32]
 800c860:	330d      	adds	r3, #13
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	7d3a      	ldrb	r2, [r7, #20]
 800c866:	429a      	cmp	r2, r3
 800c868:	d10e      	bne.n	800c888 <dir_find+0x106>
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	68da      	ldr	r2, [r3, #12]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	4619      	mov	r1, r3
 800c874:	4610      	mov	r0, r2
 800c876:	f7ff fdfb 	bl	800c470 <cmp_lfn>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <dir_find+0x106>
 800c880:	7d7b      	ldrb	r3, [r7, #21]
 800c882:	3b01      	subs	r3, #1
 800c884:	b2db      	uxtb	r3, r3
 800c886:	e000      	b.n	800c88a <dir_find+0x108>
 800c888:	23ff      	movs	r3, #255	; 0xff
 800c88a:	757b      	strb	r3, [r7, #21]
 800c88c:	e024      	b.n	800c8d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c88e:	7d7b      	ldrb	r3, [r7, #21]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d109      	bne.n	800c8a8 <dir_find+0x126>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a1b      	ldr	r3, [r3, #32]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff ff51 	bl	800c740 <sum_sfn>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	7d3b      	ldrb	r3, [r7, #20]
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d024      	beq.n	800c8f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c8ae:	f003 0301 	and.w	r3, r3, #1
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10a      	bne.n	800c8cc <dir_find+0x14a>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a18      	ldr	r0, [r3, #32]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3324      	adds	r3, #36	; 0x24
 800c8be:	220b      	movs	r2, #11
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	f7fe fe9d 	bl	800b600 <mem_cmp>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d014      	beq.n	800c8f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c8cc:	23ff      	movs	r3, #255	; 0xff
 800c8ce:	757b      	strb	r3, [r7, #21]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c8d8:	2100      	movs	r1, #0
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7ff fc7d 	bl	800c1da <dir_next>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c8e4:	7dfb      	ldrb	r3, [r7, #23]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f43f af65 	beq.w	800c7b6 <dir_find+0x34>
 800c8ec:	e004      	b.n	800c8f8 <dir_find+0x176>
		if (res != FR_OK) break;
 800c8ee:	bf00      	nop
 800c8f0:	e002      	b.n	800c8f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c8f2:	bf00      	nop
 800c8f4:	e000      	b.n	800c8f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c8f6:	bf00      	nop

	return res;
 800c8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b08c      	sub	sp, #48	; 0x30
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c918:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d001      	beq.n	800c924 <dir_register+0x20>
 800c920:	2306      	movs	r3, #6
 800c922:	e0e0      	b.n	800cae6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c924:	2300      	movs	r3, #0
 800c926:	627b      	str	r3, [r7, #36]	; 0x24
 800c928:	e002      	b.n	800c930 <dir_register+0x2c>
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	3301      	adds	r3, #1
 800c92e:	627b      	str	r3, [r7, #36]	; 0x24
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	68da      	ldr	r2, [r3, #12]
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	005b      	lsls	r3, r3, #1
 800c938:	4413      	add	r3, r2
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1f4      	bne.n	800c92a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c946:	f107 030c 	add.w	r3, r7, #12
 800c94a:	220c      	movs	r2, #12
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fe fe1b 	bl	800b588 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c952:	7dfb      	ldrb	r3, [r7, #23]
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d032      	beq.n	800c9c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2240      	movs	r2, #64	; 0x40
 800c960:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c964:	2301      	movs	r3, #1
 800c966:	62bb      	str	r3, [r7, #40]	; 0x28
 800c968:	e016      	b.n	800c998 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	f107 010c 	add.w	r1, r7, #12
 800c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97a:	f7ff fe51 	bl	800c620 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff feff 	bl	800c782 <dir_find>
 800c984:	4603      	mov	r3, r0
 800c986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c98a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d106      	bne.n	800c9a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c994:	3301      	adds	r3, #1
 800c996:	62bb      	str	r3, [r7, #40]	; 0x28
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	2b63      	cmp	r3, #99	; 0x63
 800c99c:	d9e5      	bls.n	800c96a <dir_register+0x66>
 800c99e:	e000      	b.n	800c9a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c9a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	2b64      	cmp	r3, #100	; 0x64
 800c9a6:	d101      	bne.n	800c9ac <dir_register+0xa8>
 800c9a8:	2307      	movs	r3, #7
 800c9aa:	e09c      	b.n	800cae6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9b0:	2b04      	cmp	r3, #4
 800c9b2:	d002      	beq.n	800c9ba <dir_register+0xb6>
 800c9b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9b8:	e095      	b.n	800cae6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c9ba:	7dfa      	ldrb	r2, [r7, #23]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c9c2:	7dfb      	ldrb	r3, [r7, #23]
 800c9c4:	f003 0302 	and.w	r3, r3, #2
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d007      	beq.n	800c9dc <dir_register+0xd8>
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	330c      	adds	r3, #12
 800c9d0:	4a47      	ldr	r2, [pc, #284]	; (800caf0 <dir_register+0x1ec>)
 800c9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9d6:	089b      	lsrs	r3, r3, #2
 800c9d8:	3301      	adds	r3, #1
 800c9da:	e000      	b.n	800c9de <dir_register+0xda>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c9e0:	6a39      	ldr	r1, [r7, #32]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff fcbe 	bl	800c364 <dir_alloc>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c9ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d148      	bne.n	800ca88 <dir_register+0x184>
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	623b      	str	r3, [r7, #32]
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d042      	beq.n	800ca88 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	695a      	ldr	r2, [r3, #20]
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	015b      	lsls	r3, r3, #5
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff fb68 	bl	800c0e4 <dir_sdi>
 800ca14:	4603      	mov	r3, r0
 800ca16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ca1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d132      	bne.n	800ca88 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3324      	adds	r3, #36	; 0x24
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff fe8a 	bl	800c740 <sum_sfn>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	69db      	ldr	r3, [r3, #28]
 800ca34:	4619      	mov	r1, r3
 800ca36:	69f8      	ldr	r0, [r7, #28]
 800ca38:	f7fe ffd4 	bl	800b9e4 <move_window>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ca42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d11d      	bne.n	800ca86 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	68d8      	ldr	r0, [r3, #12]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6a19      	ldr	r1, [r3, #32]
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	7efb      	ldrb	r3, [r7, #27]
 800ca58:	f7ff fd7a 	bl	800c550 <put_lfn>
				fs->wflag = 1;
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ca62:	2100      	movs	r1, #0
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff fbb8 	bl	800c1da <dir_next>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ca70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d107      	bne.n	800ca88 <dir_register+0x184>
 800ca78:	6a3b      	ldr	r3, [r7, #32]
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	623b      	str	r3, [r7, #32]
 800ca7e:	6a3b      	ldr	r3, [r7, #32]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1d5      	bne.n	800ca30 <dir_register+0x12c>
 800ca84:	e000      	b.n	800ca88 <dir_register+0x184>
				if (res != FR_OK) break;
 800ca86:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ca88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d128      	bne.n	800cae2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	69db      	ldr	r3, [r3, #28]
 800ca94:	4619      	mov	r1, r3
 800ca96:	69f8      	ldr	r0, [r7, #28]
 800ca98:	f7fe ffa4 	bl	800b9e4 <move_window>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800caa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d11b      	bne.n	800cae2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	2220      	movs	r2, #32
 800cab0:	2100      	movs	r1, #0
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fe fd89 	bl	800b5ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a18      	ldr	r0, [r3, #32]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3324      	adds	r3, #36	; 0x24
 800cac0:	220b      	movs	r2, #11
 800cac2:	4619      	mov	r1, r3
 800cac4:	f7fe fd60 	bl	800b588 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a1b      	ldr	r3, [r3, #32]
 800cad2:	330c      	adds	r3, #12
 800cad4:	f002 0218 	and.w	r2, r2, #24
 800cad8:	b2d2      	uxtb	r2, r2
 800cada:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	2201      	movs	r2, #1
 800cae0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3730      	adds	r7, #48	; 0x30
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	4ec4ec4f 	.word	0x4ec4ec4f

0800caf4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b08a      	sub	sp, #40	; 0x28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	613b      	str	r3, [r7, #16]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	60fb      	str	r3, [r7, #12]
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	617b      	str	r3, [r7, #20]
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	1c5a      	adds	r2, r3, #1
 800cb18:	61ba      	str	r2, [r7, #24]
 800cb1a:	693a      	ldr	r2, [r7, #16]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cb22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb24:	2b1f      	cmp	r3, #31
 800cb26:	d940      	bls.n	800cbaa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cb28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb2a:	2b2f      	cmp	r3, #47	; 0x2f
 800cb2c:	d006      	beq.n	800cb3c <create_name+0x48>
 800cb2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb30:	2b5c      	cmp	r3, #92	; 0x5c
 800cb32:	d110      	bne.n	800cb56 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cb34:	e002      	b.n	800cb3c <create_name+0x48>
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	61bb      	str	r3, [r7, #24]
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	4413      	add	r3, r2
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2b2f      	cmp	r3, #47	; 0x2f
 800cb46:	d0f6      	beq.n	800cb36 <create_name+0x42>
 800cb48:	693a      	ldr	r2, [r7, #16]
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b5c      	cmp	r3, #92	; 0x5c
 800cb52:	d0f0      	beq.n	800cb36 <create_name+0x42>
			break;
 800cb54:	e02a      	b.n	800cbac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	2bfe      	cmp	r3, #254	; 0xfe
 800cb5a:	d901      	bls.n	800cb60 <create_name+0x6c>
 800cb5c:	2306      	movs	r3, #6
 800cb5e:	e177      	b.n	800ce50 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cb60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cb66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb68:	2101      	movs	r1, #1
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f001 f956 	bl	800de1c <ff_convert>
 800cb70:	4603      	mov	r3, r0
 800cb72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cb74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <create_name+0x8a>
 800cb7a:	2306      	movs	r3, #6
 800cb7c:	e168      	b.n	800ce50 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cb7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb80:	2b7f      	cmp	r3, #127	; 0x7f
 800cb82:	d809      	bhi.n	800cb98 <create_name+0xa4>
 800cb84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb86:	4619      	mov	r1, r3
 800cb88:	48b3      	ldr	r0, [pc, #716]	; (800ce58 <create_name+0x364>)
 800cb8a:	f7fe fd60 	bl	800b64e <chk_chr>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <create_name+0xa4>
 800cb94:	2306      	movs	r3, #6
 800cb96:	e15b      	b.n	800ce50 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	1c5a      	adds	r2, r3, #1
 800cb9c:	617a      	str	r2, [r7, #20]
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	4413      	add	r3, r2
 800cba4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cba6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cba8:	e7b4      	b.n	800cb14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cbaa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cbb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbb8:	2b1f      	cmp	r3, #31
 800cbba:	d801      	bhi.n	800cbc0 <create_name+0xcc>
 800cbbc:	2304      	movs	r3, #4
 800cbbe:	e000      	b.n	800cbc2 <create_name+0xce>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cbc6:	e011      	b.n	800cbec <create_name+0xf8>
		w = lfn[di - 1];
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	005b      	lsls	r3, r3, #1
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	881b      	ldrh	r3, [r3, #0]
 800cbd8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cbda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbdc:	2b20      	cmp	r3, #32
 800cbde:	d002      	beq.n	800cbe6 <create_name+0xf2>
 800cbe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbe2:	2b2e      	cmp	r3, #46	; 0x2e
 800cbe4:	d106      	bne.n	800cbf4 <create_name+0x100>
		di--;
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1ea      	bne.n	800cbc8 <create_name+0xd4>
 800cbf2:	e000      	b.n	800cbf6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cbf4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	005b      	lsls	r3, r3, #1
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	2200      	movs	r2, #0
 800cc00:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d101      	bne.n	800cc0c <create_name+0x118>
 800cc08:	2306      	movs	r3, #6
 800cc0a:	e121      	b.n	800ce50 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3324      	adds	r3, #36	; 0x24
 800cc10:	220b      	movs	r2, #11
 800cc12:	2120      	movs	r1, #32
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fe fcd8 	bl	800b5ca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	61bb      	str	r3, [r7, #24]
 800cc1e:	e002      	b.n	800cc26 <create_name+0x132>
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	3301      	adds	r3, #1
 800cc24:	61bb      	str	r3, [r7, #24]
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	881b      	ldrh	r3, [r3, #0]
 800cc30:	2b20      	cmp	r3, #32
 800cc32:	d0f5      	beq.n	800cc20 <create_name+0x12c>
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	005b      	lsls	r3, r3, #1
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc40:	d0ee      	beq.n	800cc20 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d009      	beq.n	800cc5c <create_name+0x168>
 800cc48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc4c:	f043 0303 	orr.w	r3, r3, #3
 800cc50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cc54:	e002      	b.n	800cc5c <create_name+0x168>
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	617b      	str	r3, [r7, #20]
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d009      	beq.n	800cc76 <create_name+0x182>
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	4413      	add	r3, r2
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	2b2e      	cmp	r3, #46	; 0x2e
 800cc74:	d1ef      	bne.n	800cc56 <create_name+0x162>

	i = b = 0; ni = 8;
 800cc76:	2300      	movs	r3, #0
 800cc78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	623b      	str	r3, [r7, #32]
 800cc80:	2308      	movs	r3, #8
 800cc82:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	61ba      	str	r2, [r7, #24]
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	4413      	add	r3, r2
 800cc90:	881b      	ldrh	r3, [r3, #0]
 800cc92:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f000 8090 	beq.w	800cdbc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc9e:	2b20      	cmp	r3, #32
 800cca0:	d006      	beq.n	800ccb0 <create_name+0x1bc>
 800cca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cca4:	2b2e      	cmp	r3, #46	; 0x2e
 800cca6:	d10a      	bne.n	800ccbe <create_name+0x1ca>
 800cca8:	69ba      	ldr	r2, [r7, #24]
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d006      	beq.n	800ccbe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ccb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb4:	f043 0303 	orr.w	r3, r3, #3
 800ccb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ccbc:	e07d      	b.n	800cdba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ccbe:	6a3a      	ldr	r2, [r7, #32]
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d203      	bcs.n	800ccce <create_name+0x1da>
 800ccc6:	69ba      	ldr	r2, [r7, #24]
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d123      	bne.n	800cd16 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	2b0b      	cmp	r3, #11
 800ccd2:	d106      	bne.n	800cce2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ccd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccd8:	f043 0303 	orr.w	r3, r3, #3
 800ccdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cce0:	e06f      	b.n	800cdc2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cce2:	69ba      	ldr	r2, [r7, #24]
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d005      	beq.n	800ccf6 <create_name+0x202>
 800ccea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccee:	f043 0303 	orr.w	r3, r3, #3
 800ccf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ccf6:	69ba      	ldr	r2, [r7, #24]
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d860      	bhi.n	800cdc0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	61bb      	str	r3, [r7, #24]
 800cd02:	2308      	movs	r3, #8
 800cd04:	623b      	str	r3, [r7, #32]
 800cd06:	230b      	movs	r3, #11
 800cd08:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cd0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd14:	e051      	b.n	800cdba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cd16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd18:	2b7f      	cmp	r3, #127	; 0x7f
 800cd1a:	d914      	bls.n	800cd46 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cd1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd1e:	2100      	movs	r1, #0
 800cd20:	4618      	mov	r0, r3
 800cd22:	f001 f87b 	bl	800de1c <ff_convert>
 800cd26:	4603      	mov	r3, r0
 800cd28:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cd2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d004      	beq.n	800cd3a <create_name+0x246>
 800cd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd32:	3b80      	subs	r3, #128	; 0x80
 800cd34:	4a49      	ldr	r2, [pc, #292]	; (800ce5c <create_name+0x368>)
 800cd36:	5cd3      	ldrb	r3, [r2, r3]
 800cd38:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cd3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd3e:	f043 0302 	orr.w	r3, r3, #2
 800cd42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cd46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d007      	beq.n	800cd5c <create_name+0x268>
 800cd4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4843      	ldr	r0, [pc, #268]	; (800ce60 <create_name+0x36c>)
 800cd52:	f7fe fc7c 	bl	800b64e <chk_chr>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d008      	beq.n	800cd6e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cd5c:	235f      	movs	r3, #95	; 0x5f
 800cd5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd64:	f043 0303 	orr.w	r3, r3, #3
 800cd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd6c:	e01b      	b.n	800cda6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cd6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd70:	2b40      	cmp	r3, #64	; 0x40
 800cd72:	d909      	bls.n	800cd88 <create_name+0x294>
 800cd74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd76:	2b5a      	cmp	r3, #90	; 0x5a
 800cd78:	d806      	bhi.n	800cd88 <create_name+0x294>
					b |= 2;
 800cd7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd7e:	f043 0302 	orr.w	r3, r3, #2
 800cd82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd86:	e00e      	b.n	800cda6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cd88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd8a:	2b60      	cmp	r3, #96	; 0x60
 800cd8c:	d90b      	bls.n	800cda6 <create_name+0x2b2>
 800cd8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd90:	2b7a      	cmp	r3, #122	; 0x7a
 800cd92:	d808      	bhi.n	800cda6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cd94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd98:	f043 0301 	orr.w	r3, r3, #1
 800cd9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cda2:	3b20      	subs	r3, #32
 800cda4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cda6:	6a3b      	ldr	r3, [r7, #32]
 800cda8:	1c5a      	adds	r2, r3, #1
 800cdaa:	623a      	str	r2, [r7, #32]
 800cdac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cdae:	b2d1      	uxtb	r1, r2
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	460a      	mov	r2, r1
 800cdb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cdba:	e763      	b.n	800cc84 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cdbc:	bf00      	nop
 800cdbe:	e000      	b.n	800cdc2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800cdc0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cdc8:	2be5      	cmp	r3, #229	; 0xe5
 800cdca:	d103      	bne.n	800cdd4 <create_name+0x2e0>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2205      	movs	r2, #5
 800cdd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	2b08      	cmp	r3, #8
 800cdd8:	d104      	bne.n	800cde4 <create_name+0x2f0>
 800cdda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cde4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cde8:	f003 030c 	and.w	r3, r3, #12
 800cdec:	2b0c      	cmp	r3, #12
 800cdee:	d005      	beq.n	800cdfc <create_name+0x308>
 800cdf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdf4:	f003 0303 	and.w	r3, r3, #3
 800cdf8:	2b03      	cmp	r3, #3
 800cdfa:	d105      	bne.n	800ce08 <create_name+0x314>
 800cdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce00:	f043 0302 	orr.w	r3, r3, #2
 800ce04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ce08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce0c:	f003 0302 	and.w	r3, r3, #2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d117      	bne.n	800ce44 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ce14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce18:	f003 0303 	and.w	r3, r3, #3
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d105      	bne.n	800ce2c <create_name+0x338>
 800ce20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce24:	f043 0310 	orr.w	r3, r3, #16
 800ce28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ce2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce30:	f003 030c 	and.w	r3, r3, #12
 800ce34:	2b04      	cmp	r3, #4
 800ce36:	d105      	bne.n	800ce44 <create_name+0x350>
 800ce38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce3c:	f043 0308 	orr.w	r3, r3, #8
 800ce40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ce4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ce4e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3728      	adds	r7, #40	; 0x28
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	08012db4 	.word	0x08012db4
 800ce5c:	08014190 	.word	0x08014190
 800ce60:	08012dc0 	.word	0x08012dc0

0800ce64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ce78:	e002      	b.n	800ce80 <follow_path+0x1c>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	603b      	str	r3, [r7, #0]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	2b2f      	cmp	r3, #47	; 0x2f
 800ce86:	d0f8      	beq.n	800ce7a <follow_path+0x16>
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b5c      	cmp	r3, #92	; 0x5c
 800ce8e:	d0f4      	beq.n	800ce7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	2200      	movs	r2, #0
 800ce94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	2b1f      	cmp	r3, #31
 800ce9c:	d80a      	bhi.n	800ceb4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2280      	movs	r2, #128	; 0x80
 800cea2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cea6:	2100      	movs	r1, #0
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7ff f91b 	bl	800c0e4 <dir_sdi>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	75fb      	strb	r3, [r7, #23]
 800ceb2:	e043      	b.n	800cf3c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ceb4:	463b      	mov	r3, r7
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f7ff fe1b 	bl	800caf4 <create_name>
 800cebe:	4603      	mov	r3, r0
 800cec0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d134      	bne.n	800cf32 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7ff fc5a 	bl	800c782 <dir_find>
 800cece:	4603      	mov	r3, r0
 800ced0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ced8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00a      	beq.n	800cef6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	d127      	bne.n	800cf36 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cee6:	7afb      	ldrb	r3, [r7, #11]
 800cee8:	f003 0304 	and.w	r3, r3, #4
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d122      	bne.n	800cf36 <follow_path+0xd2>
 800cef0:	2305      	movs	r3, #5
 800cef2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cef4:	e01f      	b.n	800cf36 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cef6:	7afb      	ldrb	r3, [r7, #11]
 800cef8:	f003 0304 	and.w	r3, r3, #4
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d11c      	bne.n	800cf3a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	799b      	ldrb	r3, [r3, #6]
 800cf04:	f003 0310 	and.w	r3, r3, #16
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d102      	bne.n	800cf12 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cf0c:	2305      	movs	r3, #5
 800cf0e:	75fb      	strb	r3, [r7, #23]
 800cf10:	e014      	b.n	800cf3c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	695b      	ldr	r3, [r3, #20]
 800cf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf20:	4413      	add	r3, r2
 800cf22:	4619      	mov	r1, r3
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f7ff fa64 	bl	800c3f2 <ld_clust>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cf30:	e7c0      	b.n	800ceb4 <follow_path+0x50>
			if (res != FR_OK) break;
 800cf32:	bf00      	nop
 800cf34:	e002      	b.n	800cf3c <follow_path+0xd8>
				break;
 800cf36:	bf00      	nop
 800cf38:	e000      	b.n	800cf3c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cf3a:	bf00      	nop
			}
		}
	}

	return res;
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3718      	adds	r7, #24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cf46:	b480      	push	{r7}
 800cf48:	b087      	sub	sp, #28
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cf4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf52:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d031      	beq.n	800cfc0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	617b      	str	r3, [r7, #20]
 800cf62:	e002      	b.n	800cf6a <get_ldnumber+0x24>
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	3301      	adds	r3, #1
 800cf68:	617b      	str	r3, [r7, #20]
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	2b1f      	cmp	r3, #31
 800cf70:	d903      	bls.n	800cf7a <get_ldnumber+0x34>
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b3a      	cmp	r3, #58	; 0x3a
 800cf78:	d1f4      	bne.n	800cf64 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	2b3a      	cmp	r3, #58	; 0x3a
 800cf80:	d11c      	bne.n	800cfbc <get_ldnumber+0x76>
			tp = *path;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	60fa      	str	r2, [r7, #12]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	3b30      	subs	r3, #48	; 0x30
 800cf92:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	2b09      	cmp	r3, #9
 800cf98:	d80e      	bhi.n	800cfb8 <get_ldnumber+0x72>
 800cf9a:	68fa      	ldr	r2, [r7, #12]
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d10a      	bne.n	800cfb8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d107      	bne.n	800cfb8 <get_ldnumber+0x72>
					vol = (int)i;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	617b      	str	r3, [r7, #20]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	e002      	b.n	800cfc2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cfc0:	693b      	ldr	r3, [r7, #16]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	371c      	adds	r7, #28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
	...

0800cfd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	70da      	strb	r2, [r3, #3]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7fe fcfa 	bl	800b9e4 <move_window>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d001      	beq.n	800cffa <check_fs+0x2a>
 800cff6:	2304      	movs	r3, #4
 800cff8:	e038      	b.n	800d06c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	3334      	adds	r3, #52	; 0x34
 800cffe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d002:	4618      	mov	r0, r3
 800d004:	f7fe fa3e 	bl	800b484 <ld_word>
 800d008:	4603      	mov	r3, r0
 800d00a:	461a      	mov	r2, r3
 800d00c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d010:	429a      	cmp	r2, r3
 800d012:	d001      	beq.n	800d018 <check_fs+0x48>
 800d014:	2303      	movs	r3, #3
 800d016:	e029      	b.n	800d06c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d01e:	2be9      	cmp	r3, #233	; 0xe9
 800d020:	d009      	beq.n	800d036 <check_fs+0x66>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d028:	2beb      	cmp	r3, #235	; 0xeb
 800d02a:	d11e      	bne.n	800d06a <check_fs+0x9a>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d032:	2b90      	cmp	r3, #144	; 0x90
 800d034:	d119      	bne.n	800d06a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	3334      	adds	r3, #52	; 0x34
 800d03a:	3336      	adds	r3, #54	; 0x36
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fe fa39 	bl	800b4b4 <ld_dword>
 800d042:	4603      	mov	r3, r0
 800d044:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d048:	4a0a      	ldr	r2, [pc, #40]	; (800d074 <check_fs+0xa4>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d101      	bne.n	800d052 <check_fs+0x82>
 800d04e:	2300      	movs	r3, #0
 800d050:	e00c      	b.n	800d06c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	3334      	adds	r3, #52	; 0x34
 800d056:	3352      	adds	r3, #82	; 0x52
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe fa2b 	bl	800b4b4 <ld_dword>
 800d05e:	4603      	mov	r3, r0
 800d060:	4a05      	ldr	r2, [pc, #20]	; (800d078 <check_fs+0xa8>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d101      	bne.n	800d06a <check_fs+0x9a>
 800d066:	2300      	movs	r3, #0
 800d068:	e000      	b.n	800d06c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d06a:	2302      	movs	r3, #2
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	00544146 	.word	0x00544146
 800d078:	33544146 	.word	0x33544146

0800d07c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b096      	sub	sp, #88	; 0x58
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	4613      	mov	r3, r2
 800d088:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	2200      	movs	r2, #0
 800d08e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f7ff ff58 	bl	800cf46 <get_ldnumber>
 800d096:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	da01      	bge.n	800d0a2 <find_volume+0x26>
 800d09e:	230b      	movs	r3, #11
 800d0a0:	e231      	b.n	800d506 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d0a2:	4aa8      	ldr	r2, [pc, #672]	; (800d344 <find_volume+0x2c8>)
 800d0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <find_volume+0x3a>
 800d0b2:	230c      	movs	r3, #12
 800d0b4:	e227      	b.n	800d506 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
 800d0be:	f023 0301 	bic.w	r3, r3, #1
 800d0c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d01a      	beq.n	800d102 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ce:	785b      	ldrb	r3, [r3, #1]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fe f939 	bl	800b348 <disk_status>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d0dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0e0:	f003 0301 	and.w	r3, r3, #1
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10c      	bne.n	800d102 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d007      	beq.n	800d0fe <find_volume+0x82>
 800d0ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d0f2:	f003 0304 	and.w	r3, r3, #4
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d001      	beq.n	800d0fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d0fa:	230a      	movs	r3, #10
 800d0fc:	e203      	b.n	800d506 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800d0fe:	2300      	movs	r3, #0
 800d100:	e201      	b.n	800d506 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d104:	2200      	movs	r2, #0
 800d106:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d112:	785b      	ldrb	r3, [r3, #1]
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe f931 	bl	800b37c <disk_initialize>
 800d11a:	4603      	mov	r3, r0
 800d11c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d124:	f003 0301 	and.w	r3, r3, #1
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d001      	beq.n	800d130 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d12c:	2303      	movs	r3, #3
 800d12e:	e1ea      	b.n	800d506 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d007      	beq.n	800d146 <find_volume+0xca>
 800d136:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d13a:	f003 0304 	and.w	r3, r3, #4
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d001      	beq.n	800d146 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d142:	230a      	movs	r3, #10
 800d144:	e1df      	b.n	800d506 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d14a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d14c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d14e:	f7ff ff3f 	bl	800cfd0 <check_fs>
 800d152:	4603      	mov	r3, r0
 800d154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d14b      	bne.n	800d1f8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d160:	2300      	movs	r3, #0
 800d162:	643b      	str	r3, [r7, #64]	; 0x40
 800d164:	e01f      	b.n	800d1a6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d168:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d16e:	011b      	lsls	r3, r3, #4
 800d170:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d174:	4413      	add	r3, r2
 800d176:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17a:	3304      	adds	r3, #4
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d006      	beq.n	800d190 <find_volume+0x114>
 800d182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d184:	3308      	adds	r3, #8
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe f994 	bl	800b4b4 <ld_dword>
 800d18c:	4602      	mov	r2, r0
 800d18e:	e000      	b.n	800d192 <find_volume+0x116>
 800d190:	2200      	movs	r2, #0
 800d192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d19a:	440b      	add	r3, r1
 800d19c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	643b      	str	r3, [r7, #64]	; 0x40
 800d1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a8:	2b03      	cmp	r3, #3
 800d1aa:	d9dc      	bls.n	800d166 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d002      	beq.n	800d1bc <find_volume+0x140>
 800d1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d1ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d005      	beq.n	800d1de <find_volume+0x162>
 800d1d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1d6:	f7ff fefb 	bl	800cfd0 <check_fs>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	e000      	b.n	800d1e0 <find_volume+0x164>
 800d1de:	2303      	movs	r3, #3
 800d1e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d1e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d905      	bls.n	800d1f8 <find_volume+0x17c>
 800d1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	643b      	str	r3, [r7, #64]	; 0x40
 800d1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1f4:	2b03      	cmp	r3, #3
 800d1f6:	d9e1      	bls.n	800d1bc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d1f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1fc:	2b04      	cmp	r3, #4
 800d1fe:	d101      	bne.n	800d204 <find_volume+0x188>
 800d200:	2301      	movs	r3, #1
 800d202:	e180      	b.n	800d506 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d901      	bls.n	800d210 <find_volume+0x194>
 800d20c:	230d      	movs	r3, #13
 800d20e:	e17a      	b.n	800d506 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d212:	3334      	adds	r3, #52	; 0x34
 800d214:	330b      	adds	r3, #11
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe f934 	bl	800b484 <ld_word>
 800d21c:	4603      	mov	r3, r0
 800d21e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d222:	d001      	beq.n	800d228 <find_volume+0x1ac>
 800d224:	230d      	movs	r3, #13
 800d226:	e16e      	b.n	800d506 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22a:	3334      	adds	r3, #52	; 0x34
 800d22c:	3316      	adds	r3, #22
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fe f928 	bl	800b484 <ld_word>
 800d234:	4603      	mov	r3, r0
 800d236:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d106      	bne.n	800d24c <find_volume+0x1d0>
 800d23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d240:	3334      	adds	r3, #52	; 0x34
 800d242:	3324      	adds	r3, #36	; 0x24
 800d244:	4618      	mov	r0, r3
 800d246:	f7fe f935 	bl	800b4b4 <ld_dword>
 800d24a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d250:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d254:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25e:	789b      	ldrb	r3, [r3, #2]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d005      	beq.n	800d270 <find_volume+0x1f4>
 800d264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d266:	789b      	ldrb	r3, [r3, #2]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d001      	beq.n	800d270 <find_volume+0x1f4>
 800d26c:	230d      	movs	r3, #13
 800d26e:	e14a      	b.n	800d506 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d272:	789b      	ldrb	r3, [r3, #2]
 800d274:	461a      	mov	r2, r3
 800d276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d278:	fb02 f303 	mul.w	r3, r2, r3
 800d27c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d284:	b29a      	uxth	r2, r3
 800d286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d288:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28c:	895b      	ldrh	r3, [r3, #10]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d008      	beq.n	800d2a4 <find_volume+0x228>
 800d292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d294:	895b      	ldrh	r3, [r3, #10]
 800d296:	461a      	mov	r2, r3
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	895b      	ldrh	r3, [r3, #10]
 800d29c:	3b01      	subs	r3, #1
 800d29e:	4013      	ands	r3, r2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <find_volume+0x22c>
 800d2a4:	230d      	movs	r3, #13
 800d2a6:	e12e      	b.n	800d506 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2aa:	3334      	adds	r3, #52	; 0x34
 800d2ac:	3311      	adds	r3, #17
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fe f8e8 	bl	800b484 <ld_word>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2be:	891b      	ldrh	r3, [r3, #8]
 800d2c0:	f003 030f 	and.w	r3, r3, #15
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <find_volume+0x252>
 800d2ca:	230d      	movs	r3, #13
 800d2cc:	e11b      	b.n	800d506 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d0:	3334      	adds	r3, #52	; 0x34
 800d2d2:	3313      	adds	r3, #19
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fe f8d5 	bl	800b484 <ld_word>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d2de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d106      	bne.n	800d2f2 <find_volume+0x276>
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	3334      	adds	r3, #52	; 0x34
 800d2e8:	3320      	adds	r3, #32
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe f8e2 	bl	800b4b4 <ld_dword>
 800d2f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f4:	3334      	adds	r3, #52	; 0x34
 800d2f6:	330e      	adds	r3, #14
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7fe f8c3 	bl	800b484 <ld_word>
 800d2fe:	4603      	mov	r3, r0
 800d300:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d304:	2b00      	cmp	r3, #0
 800d306:	d101      	bne.n	800d30c <find_volume+0x290>
 800d308:	230d      	movs	r3, #13
 800d30a:	e0fc      	b.n	800d506 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d30c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d310:	4413      	add	r3, r2
 800d312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d314:	8912      	ldrh	r2, [r2, #8]
 800d316:	0912      	lsrs	r2, r2, #4
 800d318:	b292      	uxth	r2, r2
 800d31a:	4413      	add	r3, r2
 800d31c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d31e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	429a      	cmp	r2, r3
 800d324:	d201      	bcs.n	800d32a <find_volume+0x2ae>
 800d326:	230d      	movs	r3, #13
 800d328:	e0ed      	b.n	800d506 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d32a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d332:	8952      	ldrh	r2, [r2, #10]
 800d334:	fbb3 f3f2 	udiv	r3, r3, r2
 800d338:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d103      	bne.n	800d348 <find_volume+0x2cc>
 800d340:	230d      	movs	r3, #13
 800d342:	e0e0      	b.n	800d506 <find_volume+0x48a>
 800d344:	20000768 	.word	0x20000768
		fmt = FS_FAT32;
 800d348:	2303      	movs	r3, #3
 800d34a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d350:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d354:	4293      	cmp	r3, r2
 800d356:	d802      	bhi.n	800d35e <find_volume+0x2e2>
 800d358:	2302      	movs	r3, #2
 800d35a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d364:	4293      	cmp	r3, r2
 800d366:	d802      	bhi.n	800d36e <find_volume+0x2f2>
 800d368:	2301      	movs	r3, #1
 800d36a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	1c9a      	adds	r2, r3, #2
 800d372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d374:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d37a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d37c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d380:	441a      	add	r2, r3
 800d382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d384:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d386:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	441a      	add	r2, r3
 800d38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d394:	2b03      	cmp	r3, #3
 800d396:	d11e      	bne.n	800d3d6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	3334      	adds	r3, #52	; 0x34
 800d39c:	332a      	adds	r3, #42	; 0x2a
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fe f870 	bl	800b484 <ld_word>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d001      	beq.n	800d3ae <find_volume+0x332>
 800d3aa:	230d      	movs	r3, #13
 800d3ac:	e0ab      	b.n	800d506 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b0:	891b      	ldrh	r3, [r3, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <find_volume+0x33e>
 800d3b6:	230d      	movs	r3, #13
 800d3b8:	e0a5      	b.n	800d506 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3bc:	3334      	adds	r3, #52	; 0x34
 800d3be:	332c      	adds	r3, #44	; 0x2c
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fe f877 	bl	800b4b4 <ld_dword>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ca:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	699b      	ldr	r3, [r3, #24]
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	647b      	str	r3, [r7, #68]	; 0x44
 800d3d4:	e01f      	b.n	800d416 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	891b      	ldrh	r3, [r3, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d101      	bne.n	800d3e2 <find_volume+0x366>
 800d3de:	230d      	movs	r3, #13
 800d3e0:	e091      	b.n	800d506 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3e8:	441a      	add	r2, r3
 800d3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ec:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d3ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d103      	bne.n	800d3fe <find_volume+0x382>
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f8:	699b      	ldr	r3, [r3, #24]
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	e00a      	b.n	800d414 <find_volume+0x398>
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d400:	699a      	ldr	r2, [r3, #24]
 800d402:	4613      	mov	r3, r2
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	4413      	add	r3, r2
 800d408:	085a      	lsrs	r2, r3, #1
 800d40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40c:	699b      	ldr	r3, [r3, #24]
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d414:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d418:	69da      	ldr	r2, [r3, #28]
 800d41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d41c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d420:	0a5b      	lsrs	r3, r3, #9
 800d422:	429a      	cmp	r2, r3
 800d424:	d201      	bcs.n	800d42a <find_volume+0x3ae>
 800d426:	230d      	movs	r3, #13
 800d428:	e06d      	b.n	800d506 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42c:	f04f 32ff 	mov.w	r2, #4294967295
 800d430:	615a      	str	r2, [r3, #20]
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	695a      	ldr	r2, [r3, #20]
 800d436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d438:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43c:	2280      	movs	r2, #128	; 0x80
 800d43e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d444:	2b03      	cmp	r3, #3
 800d446:	d149      	bne.n	800d4dc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44a:	3334      	adds	r3, #52	; 0x34
 800d44c:	3330      	adds	r3, #48	; 0x30
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fe f818 	bl	800b484 <ld_word>
 800d454:	4603      	mov	r3, r0
 800d456:	2b01      	cmp	r3, #1
 800d458:	d140      	bne.n	800d4dc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d45a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d45c:	3301      	adds	r3, #1
 800d45e:	4619      	mov	r1, r3
 800d460:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d462:	f7fe fabf 	bl	800b9e4 <move_window>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d137      	bne.n	800d4dc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46e:	2200      	movs	r2, #0
 800d470:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d474:	3334      	adds	r3, #52	; 0x34
 800d476:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fe f802 	bl	800b484 <ld_word>
 800d480:	4603      	mov	r3, r0
 800d482:	461a      	mov	r2, r3
 800d484:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d488:	429a      	cmp	r2, r3
 800d48a:	d127      	bne.n	800d4dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48e:	3334      	adds	r3, #52	; 0x34
 800d490:	4618      	mov	r0, r3
 800d492:	f7fe f80f 	bl	800b4b4 <ld_dword>
 800d496:	4603      	mov	r3, r0
 800d498:	4a1d      	ldr	r2, [pc, #116]	; (800d510 <find_volume+0x494>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d11e      	bne.n	800d4dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a0:	3334      	adds	r3, #52	; 0x34
 800d4a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe f804 	bl	800b4b4 <ld_dword>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	4a19      	ldr	r2, [pc, #100]	; (800d514 <find_volume+0x498>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d113      	bne.n	800d4dc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b6:	3334      	adds	r3, #52	; 0x34
 800d4b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fd fff9 	bl	800b4b4 <ld_dword>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ca:	3334      	adds	r3, #52	; 0x34
 800d4cc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fd ffef 	bl	800b4b4 <ld_dword>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4da:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d4e2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d4e4:	4b0c      	ldr	r3, [pc, #48]	; (800d518 <find_volume+0x49c>)
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <find_volume+0x49c>)
 800d4ee:	801a      	strh	r2, [r3, #0]
 800d4f0:	4b09      	ldr	r3, [pc, #36]	; (800d518 <find_volume+0x49c>)
 800d4f2:	881a      	ldrh	r2, [r3, #0]
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	4a08      	ldr	r2, [pc, #32]	; (800d51c <find_volume+0x4a0>)
 800d4fc:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d4fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d500:	f7fe fa08 	bl	800b914 <clear_lock>
#endif
	return FR_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3758      	adds	r7, #88	; 0x58
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	41615252 	.word	0x41615252
 800d514:	61417272 	.word	0x61417272
 800d518:	2000076c 	.word	0x2000076c
 800d51c:	20000790 	.word	0x20000790

0800d520 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d52a:	2309      	movs	r3, #9
 800d52c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d01c      	beq.n	800d56e <validate+0x4e>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d018      	beq.n	800d56e <validate+0x4e>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d013      	beq.n	800d56e <validate+0x4e>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	889a      	ldrh	r2, [r3, #4]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	88db      	ldrh	r3, [r3, #6]
 800d550:	429a      	cmp	r2, r3
 800d552:	d10c      	bne.n	800d56e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	785b      	ldrb	r3, [r3, #1]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fd fef4 	bl	800b348 <disk_status>
 800d560:	4603      	mov	r3, r0
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <validate+0x4e>
			res = FR_OK;
 800d56a:	2300      	movs	r3, #0
 800d56c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <validate+0x5a>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	e000      	b.n	800d57c <validate+0x5c>
 800d57a:	2300      	movs	r3, #0
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	6013      	str	r3, [r2, #0]
	return res;
 800d580:	7bfb      	ldrb	r3, [r7, #15]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
	...

0800d58c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b088      	sub	sp, #32
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	4613      	mov	r3, r2
 800d598:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d59e:	f107 0310 	add.w	r3, r7, #16
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff fccf 	bl	800cf46 <get_ldnumber>
 800d5a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	da01      	bge.n	800d5b4 <f_mount+0x28>
 800d5b0:	230b      	movs	r3, #11
 800d5b2:	e02b      	b.n	800d60c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d5b4:	4a17      	ldr	r2, [pc, #92]	; (800d614 <f_mount+0x88>)
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d005      	beq.n	800d5d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d5c4:	69b8      	ldr	r0, [r7, #24]
 800d5c6:	f7fe f9a5 	bl	800b914 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d002      	beq.n	800d5dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	490d      	ldr	r1, [pc, #52]	; (800d614 <f_mount+0x88>)
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <f_mount+0x66>
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d001      	beq.n	800d5f6 <f_mount+0x6a>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e00a      	b.n	800d60c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d5f6:	f107 010c 	add.w	r1, r7, #12
 800d5fa:	f107 0308 	add.w	r3, r7, #8
 800d5fe:	2200      	movs	r2, #0
 800d600:	4618      	mov	r0, r3
 800d602:	f7ff fd3b 	bl	800d07c <find_volume>
 800d606:	4603      	mov	r3, r0
 800d608:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3720      	adds	r7, #32
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20000768 	.word	0x20000768

0800d618 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b09a      	sub	sp, #104	; 0x68
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	4613      	mov	r3, r2
 800d624:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d101      	bne.n	800d630 <f_open+0x18>
 800d62c:	2309      	movs	r3, #9
 800d62e:	e1ad      	b.n	800d98c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d630:	79fb      	ldrb	r3, [r7, #7]
 800d632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d636:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d638:	79fa      	ldrb	r2, [r7, #7]
 800d63a:	f107 0114 	add.w	r1, r7, #20
 800d63e:	f107 0308 	add.w	r3, r7, #8
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff fd1a 	bl	800d07c <find_volume>
 800d648:	4603      	mov	r3, r0
 800d64a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d64e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d652:	2b00      	cmp	r3, #0
 800d654:	f040 8191 	bne.w	800d97a <f_open+0x362>
		dj.obj.fs = fs;
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	f107 0318 	add.w	r3, r7, #24
 800d662:	4611      	mov	r1, r2
 800d664:	4618      	mov	r0, r3
 800d666:	f7ff fbfd 	bl	800ce64 <follow_path>
 800d66a:	4603      	mov	r3, r0
 800d66c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d670:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d674:	2b00      	cmp	r3, #0
 800d676:	d11a      	bne.n	800d6ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d678:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d67c:	b25b      	sxtb	r3, r3
 800d67e:	2b00      	cmp	r3, #0
 800d680:	da03      	bge.n	800d68a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d682:	2306      	movs	r3, #6
 800d684:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d688:	e011      	b.n	800d6ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d68a:	79fb      	ldrb	r3, [r7, #7]
 800d68c:	f023 0301 	bic.w	r3, r3, #1
 800d690:	2b00      	cmp	r3, #0
 800d692:	bf14      	ite	ne
 800d694:	2301      	movne	r3, #1
 800d696:	2300      	moveq	r3, #0
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	461a      	mov	r2, r3
 800d69c:	f107 0318 	add.w	r3, r7, #24
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fd ffee 	bl	800b684 <chk_lock>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d6ae:	79fb      	ldrb	r3, [r7, #7]
 800d6b0:	f003 031c 	and.w	r3, r3, #28
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d07f      	beq.n	800d7b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d6b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d017      	beq.n	800d6f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d6c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	d10e      	bne.n	800d6e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d6c8:	f7fe f838 	bl	800b73c <enq_lock>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d006      	beq.n	800d6e0 <f_open+0xc8>
 800d6d2:	f107 0318 	add.w	r3, r7, #24
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff f914 	bl	800c904 <dir_register>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	e000      	b.n	800d6e2 <f_open+0xca>
 800d6e0:	2312      	movs	r3, #18
 800d6e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d6e6:	79fb      	ldrb	r3, [r7, #7]
 800d6e8:	f043 0308 	orr.w	r3, r3, #8
 800d6ec:	71fb      	strb	r3, [r7, #7]
 800d6ee:	e010      	b.n	800d712 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d6f0:	7fbb      	ldrb	r3, [r7, #30]
 800d6f2:	f003 0311 	and.w	r3, r3, #17
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d003      	beq.n	800d702 <f_open+0xea>
					res = FR_DENIED;
 800d6fa:	2307      	movs	r3, #7
 800d6fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d700:	e007      	b.n	800d712 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d702:	79fb      	ldrb	r3, [r7, #7]
 800d704:	f003 0304 	and.w	r3, r3, #4
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d002      	beq.n	800d712 <f_open+0xfa>
 800d70c:	2308      	movs	r3, #8
 800d70e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d712:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d716:	2b00      	cmp	r3, #0
 800d718:	d168      	bne.n	800d7ec <f_open+0x1d4>
 800d71a:	79fb      	ldrb	r3, [r7, #7]
 800d71c:	f003 0308 	and.w	r3, r3, #8
 800d720:	2b00      	cmp	r3, #0
 800d722:	d063      	beq.n	800d7ec <f_open+0x1d4>
				dw = GET_FATTIME();
 800d724:	f7fc fa1c 	bl	8009b60 <get_fattime>
 800d728:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72c:	330e      	adds	r3, #14
 800d72e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d730:	4618      	mov	r0, r3
 800d732:	f7fd fefd 	bl	800b530 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d738:	3316      	adds	r3, #22
 800d73a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fd fef7 	bl	800b530 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d744:	330b      	adds	r3, #11
 800d746:	2220      	movs	r2, #32
 800d748:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d74e:	4611      	mov	r1, r2
 800d750:	4618      	mov	r0, r3
 800d752:	f7fe fe4e 	bl	800c3f2 <ld_clust>
 800d756:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d75c:	2200      	movs	r2, #0
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fe fe66 	bl	800c430 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d766:	331c      	adds	r3, #28
 800d768:	2100      	movs	r1, #0
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fd fee0 	bl	800b530 <st_dword>
					fs->wflag = 1;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	2201      	movs	r2, #1
 800d774:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d037      	beq.n	800d7ec <f_open+0x1d4>
						dw = fs->winsect;
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d780:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d782:	f107 0318 	add.w	r3, r7, #24
 800d786:	2200      	movs	r2, #0
 800d788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe fb79 	bl	800be82 <remove_chain>
 800d790:	4603      	mov	r3, r0
 800d792:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d126      	bne.n	800d7ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fe f91e 	bl	800b9e4 <move_window>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7b2:	3a01      	subs	r2, #1
 800d7b4:	611a      	str	r2, [r3, #16]
 800d7b6:	e019      	b.n	800d7ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d7b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d115      	bne.n	800d7ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d7c0:	7fbb      	ldrb	r3, [r7, #30]
 800d7c2:	f003 0310 	and.w	r3, r3, #16
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d003      	beq.n	800d7d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d7ca:	2304      	movs	r3, #4
 800d7cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d7d0:	e00c      	b.n	800d7ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	f003 0302 	and.w	r3, r3, #2
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d007      	beq.n	800d7ec <f_open+0x1d4>
 800d7dc:	7fbb      	ldrb	r3, [r7, #30]
 800d7de:	f003 0301 	and.w	r3, r3, #1
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d002      	beq.n	800d7ec <f_open+0x1d4>
						res = FR_DENIED;
 800d7e6:	2307      	movs	r3, #7
 800d7e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d7ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d128      	bne.n	800d846 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d7f4:	79fb      	ldrb	r3, [r7, #7]
 800d7f6:	f003 0308 	and.w	r3, r3, #8
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d003      	beq.n	800d806 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d804:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d814:	79fb      	ldrb	r3, [r7, #7]
 800d816:	f023 0301 	bic.w	r3, r3, #1
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	bf14      	ite	ne
 800d81e:	2301      	movne	r3, #1
 800d820:	2300      	moveq	r3, #0
 800d822:	b2db      	uxtb	r3, r3
 800d824:	461a      	mov	r2, r3
 800d826:	f107 0318 	add.w	r3, r7, #24
 800d82a:	4611      	mov	r1, r2
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7fd ffa7 	bl	800b780 <inc_lock>
 800d832:	4602      	mov	r2, r0
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	691b      	ldr	r3, [r3, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d102      	bne.n	800d846 <f_open+0x22e>
 800d840:	2302      	movs	r3, #2
 800d842:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d846:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f040 8095 	bne.w	800d97a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d854:	4611      	mov	r1, r2
 800d856:	4618      	mov	r0, r3
 800d858:	f7fe fdcb 	bl	800c3f2 <ld_clust>
 800d85c:	4602      	mov	r2, r0
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	331c      	adds	r3, #28
 800d866:	4618      	mov	r0, r3
 800d868:	f7fd fe24 	bl	800b4b4 <ld_dword>
 800d86c:	4602      	mov	r2, r0
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d878:	697a      	ldr	r2, [r7, #20]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	88da      	ldrh	r2, [r3, #6]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	79fa      	ldrb	r2, [r7, #7]
 800d88a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2200      	movs	r2, #0
 800d89c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	3330      	adds	r3, #48	; 0x30
 800d8a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fd fe8e 	bl	800b5ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d8ae:	79fb      	ldrb	r3, [r7, #7]
 800d8b0:	f003 0320 	and.w	r3, r3, #32
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d060      	beq.n	800d97a <f_open+0x362>
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d05c      	beq.n	800d97a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	68da      	ldr	r2, [r3, #12]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	895b      	ldrh	r3, [r3, #10]
 800d8cc:	025b      	lsls	r3, r3, #9
 800d8ce:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8dc:	e016      	b.n	800d90c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe f939 	bl	800bb5a <get_fat>
 800d8e8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d8ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d802      	bhi.n	800d8f6 <f_open+0x2de>
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d8f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fc:	d102      	bne.n	800d904 <f_open+0x2ec>
 800d8fe:	2301      	movs	r3, #1
 800d900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d904:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d908:	1ad3      	subs	r3, r2, r3
 800d90a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d90c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d910:	2b00      	cmp	r3, #0
 800d912:	d103      	bne.n	800d91c <f_open+0x304>
 800d914:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d918:	429a      	cmp	r2, r3
 800d91a:	d8e0      	bhi.n	800d8de <f_open+0x2c6>
				}
				fp->clust = clst;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d920:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d922:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d926:	2b00      	cmp	r3, #0
 800d928:	d127      	bne.n	800d97a <f_open+0x362>
 800d92a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d930:	2b00      	cmp	r3, #0
 800d932:	d022      	beq.n	800d97a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fe f8ef 	bl	800bb1c <clust2sect>
 800d93e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d942:	2b00      	cmp	r3, #0
 800d944:	d103      	bne.n	800d94e <f_open+0x336>
						res = FR_INT_ERR;
 800d946:	2302      	movs	r3, #2
 800d948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d94c:	e015      	b.n	800d97a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d94e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d950:	0a5a      	lsrs	r2, r3, #9
 800d952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d954:	441a      	add	r2, r3
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	7858      	ldrb	r0, [r3, #1]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6a1a      	ldr	r2, [r3, #32]
 800d968:	2301      	movs	r3, #1
 800d96a:	f7fd fd2d 	bl	800b3c8 <disk_read>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <f_open+0x362>
 800d974:	2301      	movs	r3, #1
 800d976:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d97a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d002      	beq.n	800d988 <f_open+0x370>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2200      	movs	r2, #0
 800d986:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d988:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3768      	adds	r7, #104	; 0x68
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b08e      	sub	sp, #56	; 0x38
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
 800d9a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f107 0214 	add.w	r2, r7, #20
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7ff fdb3 	bl	800d520 <validate>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d9c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d107      	bne.n	800d9d8 <f_read+0x44>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	7d5b      	ldrb	r3, [r3, #21]
 800d9cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d9d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <f_read+0x4a>
 800d9d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9dc:	e115      	b.n	800dc0a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	7d1b      	ldrb	r3, [r3, #20]
 800d9e2:	f003 0301 	and.w	r3, r3, #1
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d101      	bne.n	800d9ee <f_read+0x5a>
 800d9ea:	2307      	movs	r3, #7
 800d9ec:	e10d      	b.n	800dc0a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	68da      	ldr	r2, [r3, #12]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	6a3b      	ldr	r3, [r7, #32]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	f240 80fe 	bls.w	800dc00 <f_read+0x26c>
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800da08:	e0fa      	b.n	800dc00 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	699b      	ldr	r3, [r3, #24]
 800da0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da12:	2b00      	cmp	r3, #0
 800da14:	f040 80c6 	bne.w	800dba4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	0a5b      	lsrs	r3, r3, #9
 800da1e:	697a      	ldr	r2, [r7, #20]
 800da20:	8952      	ldrh	r2, [r2, #10]
 800da22:	3a01      	subs	r2, #1
 800da24:	4013      	ands	r3, r2
 800da26:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d12f      	bne.n	800da8e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	699b      	ldr	r3, [r3, #24]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d103      	bne.n	800da3e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	633b      	str	r3, [r7, #48]	; 0x30
 800da3c:	e013      	b.n	800da66 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da42:	2b00      	cmp	r3, #0
 800da44:	d007      	beq.n	800da56 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	4619      	mov	r1, r3
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f7fe fb15 	bl	800c07c <clmt_clust>
 800da52:	6338      	str	r0, [r7, #48]	; 0x30
 800da54:	e007      	b.n	800da66 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	69db      	ldr	r3, [r3, #28]
 800da5c:	4619      	mov	r1, r3
 800da5e:	4610      	mov	r0, r2
 800da60:	f7fe f87b 	bl	800bb5a <get_fat>
 800da64:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800da66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d804      	bhi.n	800da76 <f_read+0xe2>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2202      	movs	r2, #2
 800da70:	755a      	strb	r2, [r3, #21]
 800da72:	2302      	movs	r3, #2
 800da74:	e0c9      	b.n	800dc0a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da7c:	d104      	bne.n	800da88 <f_read+0xf4>
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2201      	movs	r2, #1
 800da82:	755a      	strb	r2, [r3, #21]
 800da84:	2301      	movs	r3, #1
 800da86:	e0c0      	b.n	800dc0a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da8c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da8e:	697a      	ldr	r2, [r7, #20]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	69db      	ldr	r3, [r3, #28]
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	f7fe f840 	bl	800bb1c <clust2sect>
 800da9c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d104      	bne.n	800daae <f_read+0x11a>
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2202      	movs	r2, #2
 800daa8:	755a      	strb	r2, [r3, #21]
 800daaa:	2302      	movs	r3, #2
 800daac:	e0ad      	b.n	800dc0a <f_read+0x276>
			sect += csect;
 800daae:	69ba      	ldr	r2, [r7, #24]
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	4413      	add	r3, r2
 800dab4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	0a5b      	lsrs	r3, r3, #9
 800daba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d039      	beq.n	800db36 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dac2:	69fa      	ldr	r2, [r7, #28]
 800dac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac6:	4413      	add	r3, r2
 800dac8:	697a      	ldr	r2, [r7, #20]
 800daca:	8952      	ldrh	r2, [r2, #10]
 800dacc:	4293      	cmp	r3, r2
 800dace:	d905      	bls.n	800dadc <f_read+0x148>
					cc = fs->csize - csect;
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	895b      	ldrh	r3, [r3, #10]
 800dad4:	461a      	mov	r2, r3
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	7858      	ldrb	r0, [r3, #1]
 800dae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae2:	69ba      	ldr	r2, [r7, #24]
 800dae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dae6:	f7fd fc6f 	bl	800b3c8 <disk_read>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d004      	beq.n	800dafa <f_read+0x166>
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2201      	movs	r2, #1
 800daf4:	755a      	strb	r2, [r3, #21]
 800daf6:	2301      	movs	r3, #1
 800daf8:	e087      	b.n	800dc0a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	7d1b      	ldrb	r3, [r3, #20]
 800dafe:	b25b      	sxtb	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	da14      	bge.n	800db2e <f_read+0x19a>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6a1a      	ldr	r2, [r3, #32]
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	1ad3      	subs	r3, r2, r3
 800db0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db0e:	429a      	cmp	r2, r3
 800db10:	d90d      	bls.n	800db2e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	6a1a      	ldr	r2, [r3, #32]
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	025b      	lsls	r3, r3, #9
 800db1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db1e:	18d0      	adds	r0, r2, r3
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	3330      	adds	r3, #48	; 0x30
 800db24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db28:	4619      	mov	r1, r3
 800db2a:	f7fd fd2d 	bl	800b588 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	025b      	lsls	r3, r3, #9
 800db32:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800db34:	e050      	b.n	800dbd8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6a1b      	ldr	r3, [r3, #32]
 800db3a:	69ba      	ldr	r2, [r7, #24]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d02e      	beq.n	800db9e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	7d1b      	ldrb	r3, [r3, #20]
 800db44:	b25b      	sxtb	r3, r3
 800db46:	2b00      	cmp	r3, #0
 800db48:	da18      	bge.n	800db7c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	7858      	ldrb	r0, [r3, #1]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6a1a      	ldr	r2, [r3, #32]
 800db58:	2301      	movs	r3, #1
 800db5a:	f7fd fc55 	bl	800b408 <disk_write>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d004      	beq.n	800db6e <f_read+0x1da>
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2201      	movs	r2, #1
 800db68:	755a      	strb	r2, [r3, #21]
 800db6a:	2301      	movs	r3, #1
 800db6c:	e04d      	b.n	800dc0a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	7d1b      	ldrb	r3, [r3, #20]
 800db72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db76:	b2da      	uxtb	r2, r3
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	7858      	ldrb	r0, [r3, #1]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db86:	2301      	movs	r3, #1
 800db88:	69ba      	ldr	r2, [r7, #24]
 800db8a:	f7fd fc1d 	bl	800b3c8 <disk_read>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d004      	beq.n	800db9e <f_read+0x20a>
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2201      	movs	r2, #1
 800db98:	755a      	strb	r2, [r3, #21]
 800db9a:	2301      	movs	r3, #1
 800db9c:	e035      	b.n	800dc0a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	69ba      	ldr	r2, [r7, #24]
 800dba2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800dbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dbb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d901      	bls.n	800dbbe <f_read+0x22a>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbcc:	4413      	add	r3, r2
 800dbce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbd4:	f7fd fcd8 	bl	800b588 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dbd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbdc:	4413      	add	r3, r2
 800dbde:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	699a      	ldr	r2, [r3, #24]
 800dbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe6:	441a      	add	r2, r3
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	619a      	str	r2, [r3, #24]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf2:	441a      	add	r2, r3
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	601a      	str	r2, [r3, #0]
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f47f af01 	bne.w	800da0a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3738      	adds	r7, #56	; 0x38
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b086      	sub	sp, #24
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f107 0208 	add.w	r2, r7, #8
 800dc20:	4611      	mov	r1, r2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7ff fc7c 	bl	800d520 <validate>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc2c:	7dfb      	ldrb	r3, [r7, #23]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d168      	bne.n	800dd04 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	7d1b      	ldrb	r3, [r3, #20]
 800dc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d062      	beq.n	800dd04 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	7d1b      	ldrb	r3, [r3, #20]
 800dc42:	b25b      	sxtb	r3, r3
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	da15      	bge.n	800dc74 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	7858      	ldrb	r0, [r3, #1]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a1a      	ldr	r2, [r3, #32]
 800dc56:	2301      	movs	r3, #1
 800dc58:	f7fd fbd6 	bl	800b408 <disk_write>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <f_sync+0x54>
 800dc62:	2301      	movs	r3, #1
 800dc64:	e04f      	b.n	800dd06 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	7d1b      	ldrb	r3, [r3, #20]
 800dc6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dc74:	f7fb ff74 	bl	8009b60 <get_fattime>
 800dc78:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dc7a:	68ba      	ldr	r2, [r7, #8]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc80:	4619      	mov	r1, r3
 800dc82:	4610      	mov	r0, r2
 800dc84:	f7fd feae 	bl	800b9e4 <move_window>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dc8c:	7dfb      	ldrb	r3, [r7, #23]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d138      	bne.n	800dd04 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc96:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	330b      	adds	r3, #11
 800dc9c:	781a      	ldrb	r2, [r3, #0]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	330b      	adds	r3, #11
 800dca2:	f042 0220 	orr.w	r2, r2, #32
 800dca6:	b2d2      	uxtb	r2, r2
 800dca8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6818      	ldr	r0, [r3, #0]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	68f9      	ldr	r1, [r7, #12]
 800dcb6:	f7fe fbbb 	bl	800c430 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f103 021c 	add.w	r2, r3, #28
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	f7fd fc32 	bl	800b530 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3316      	adds	r3, #22
 800dcd0:	6939      	ldr	r1, [r7, #16]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7fd fc2c 	bl	800b530 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	3312      	adds	r3, #18
 800dcdc:	2100      	movs	r1, #0
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fd fc0b 	bl	800b4fa <st_word>
					fs->wflag = 1;
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	2201      	movs	r2, #1
 800dce8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fd fea7 	bl	800ba40 <sync_fs>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	7d1b      	ldrb	r3, [r3, #20]
 800dcfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcfe:	b2da      	uxtb	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dd04:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b084      	sub	sp, #16
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7ff ff7b 	bl	800dc12 <f_sync>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dd20:	7bfb      	ldrb	r3, [r7, #15]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d118      	bne.n	800dd58 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f107 0208 	add.w	r2, r7, #8
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7ff fbf6 	bl	800d520 <validate>
 800dd34:	4603      	mov	r3, r0
 800dd36:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dd38:	7bfb      	ldrb	r3, [r7, #15]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10c      	bne.n	800dd58 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fd fdaa 	bl	800b89c <dec_lock>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dd4c:	7bfb      	ldrb	r3, [r7, #15]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d102      	bne.n	800dd58 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2200      	movs	r2, #0
 800dd56:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
	...

0800dd64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b087      	sub	sp, #28
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	4613      	mov	r3, r2
 800dd70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd72:	2301      	movs	r3, #1
 800dd74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dd7a:	4b1f      	ldr	r3, [pc, #124]	; (800ddf8 <FATFS_LinkDriverEx+0x94>)
 800dd7c:	7a5b      	ldrb	r3, [r3, #9]
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d131      	bne.n	800dde8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd84:	4b1c      	ldr	r3, [pc, #112]	; (800ddf8 <FATFS_LinkDriverEx+0x94>)
 800dd86:	7a5b      	ldrb	r3, [r3, #9]
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	4b1a      	ldr	r3, [pc, #104]	; (800ddf8 <FATFS_LinkDriverEx+0x94>)
 800dd8e:	2100      	movs	r1, #0
 800dd90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dd92:	4b19      	ldr	r3, [pc, #100]	; (800ddf8 <FATFS_LinkDriverEx+0x94>)
 800dd94:	7a5b      	ldrb	r3, [r3, #9]
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	4a17      	ldr	r2, [pc, #92]	; (800ddf8 <FATFS_LinkDriverEx+0x94>)
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	4413      	add	r3, r2
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dda2:	4b15      	ldr	r3, [pc, #84]	; (800ddf8 <FATFS_LinkDriverEx+0x94>)
 800dda4:	7a5b      	ldrb	r3, [r3, #9]
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	461a      	mov	r2, r3
 800ddaa:	4b13      	ldr	r3, [pc, #76]	; (800ddf8 <FATFS_LinkDriverEx+0x94>)
 800ddac:	4413      	add	r3, r2
 800ddae:	79fa      	ldrb	r2, [r7, #7]
 800ddb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ddb2:	4b11      	ldr	r3, [pc, #68]	; (800ddf8 <FATFS_LinkDriverEx+0x94>)
 800ddb4:	7a5b      	ldrb	r3, [r3, #9]
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	1c5a      	adds	r2, r3, #1
 800ddba:	b2d1      	uxtb	r1, r2
 800ddbc:	4a0e      	ldr	r2, [pc, #56]	; (800ddf8 <FATFS_LinkDriverEx+0x94>)
 800ddbe:	7251      	strb	r1, [r2, #9]
 800ddc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ddc2:	7dbb      	ldrb	r3, [r7, #22]
 800ddc4:	3330      	adds	r3, #48	; 0x30
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	223a      	movs	r2, #58	; 0x3a
 800ddd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	3302      	adds	r3, #2
 800ddd8:	222f      	movs	r2, #47	; 0x2f
 800ddda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	3303      	adds	r3, #3
 800dde0:	2200      	movs	r2, #0
 800dde2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dde4:	2300      	movs	r3, #0
 800dde6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	371c      	adds	r7, #28
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	20000990 	.word	0x20000990

0800ddfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800de06:	2200      	movs	r2, #0
 800de08:	6839      	ldr	r1, [r7, #0]
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7ff ffaa 	bl	800dd64 <FATFS_LinkDriverEx>
 800de10:	4603      	mov	r3, r0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
	...

0800de1c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	6039      	str	r1, [r7, #0]
 800de26:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800de28:	88fb      	ldrh	r3, [r7, #6]
 800de2a:	2b7f      	cmp	r3, #127	; 0x7f
 800de2c:	d802      	bhi.n	800de34 <ff_convert+0x18>
		c = chr;
 800de2e:	88fb      	ldrh	r3, [r7, #6]
 800de30:	81fb      	strh	r3, [r7, #14]
 800de32:	e025      	b.n	800de80 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00b      	beq.n	800de52 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800de3a:	88fb      	ldrh	r3, [r7, #6]
 800de3c:	2bff      	cmp	r3, #255	; 0xff
 800de3e:	d805      	bhi.n	800de4c <ff_convert+0x30>
 800de40:	88fb      	ldrh	r3, [r7, #6]
 800de42:	3b80      	subs	r3, #128	; 0x80
 800de44:	4a12      	ldr	r2, [pc, #72]	; (800de90 <ff_convert+0x74>)
 800de46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de4a:	e000      	b.n	800de4e <ff_convert+0x32>
 800de4c:	2300      	movs	r3, #0
 800de4e:	81fb      	strh	r3, [r7, #14]
 800de50:	e016      	b.n	800de80 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800de52:	2300      	movs	r3, #0
 800de54:	81fb      	strh	r3, [r7, #14]
 800de56:	e009      	b.n	800de6c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800de58:	89fb      	ldrh	r3, [r7, #14]
 800de5a:	4a0d      	ldr	r2, [pc, #52]	; (800de90 <ff_convert+0x74>)
 800de5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de60:	88fa      	ldrh	r2, [r7, #6]
 800de62:	429a      	cmp	r2, r3
 800de64:	d006      	beq.n	800de74 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800de66:	89fb      	ldrh	r3, [r7, #14]
 800de68:	3301      	adds	r3, #1
 800de6a:	81fb      	strh	r3, [r7, #14]
 800de6c:	89fb      	ldrh	r3, [r7, #14]
 800de6e:	2b7f      	cmp	r3, #127	; 0x7f
 800de70:	d9f2      	bls.n	800de58 <ff_convert+0x3c>
 800de72:	e000      	b.n	800de76 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800de74:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800de76:	89fb      	ldrh	r3, [r7, #14]
 800de78:	3380      	adds	r3, #128	; 0x80
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800de80:	89fb      	ldrh	r3, [r7, #14]
}
 800de82:	4618      	mov	r0, r3
 800de84:	3714      	adds	r7, #20
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	08014220 	.word	0x08014220

0800de94 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800de94:	b480      	push	{r7}
 800de96:	b087      	sub	sp, #28
 800de98:	af00      	add	r7, sp, #0
 800de9a:	4603      	mov	r3, r0
 800de9c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800de9e:	88fb      	ldrh	r3, [r7, #6]
 800dea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dea4:	d201      	bcs.n	800deaa <ff_wtoupper+0x16>
 800dea6:	4b3e      	ldr	r3, [pc, #248]	; (800dfa0 <ff_wtoupper+0x10c>)
 800dea8:	e000      	b.n	800deac <ff_wtoupper+0x18>
 800deaa:	4b3e      	ldr	r3, [pc, #248]	; (800dfa4 <ff_wtoupper+0x110>)
 800deac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	1c9a      	adds	r2, r3, #2
 800deb2:	617a      	str	r2, [r7, #20]
 800deb4:	881b      	ldrh	r3, [r3, #0]
 800deb6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800deb8:	8a7b      	ldrh	r3, [r7, #18]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d068      	beq.n	800df90 <ff_wtoupper+0xfc>
 800debe:	88fa      	ldrh	r2, [r7, #6]
 800dec0:	8a7b      	ldrh	r3, [r7, #18]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d364      	bcc.n	800df90 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	1c9a      	adds	r2, r3, #2
 800deca:	617a      	str	r2, [r7, #20]
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	823b      	strh	r3, [r7, #16]
 800ded0:	8a3b      	ldrh	r3, [r7, #16]
 800ded2:	0a1b      	lsrs	r3, r3, #8
 800ded4:	81fb      	strh	r3, [r7, #14]
 800ded6:	8a3b      	ldrh	r3, [r7, #16]
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dedc:	88fa      	ldrh	r2, [r7, #6]
 800dede:	8a79      	ldrh	r1, [r7, #18]
 800dee0:	8a3b      	ldrh	r3, [r7, #16]
 800dee2:	440b      	add	r3, r1
 800dee4:	429a      	cmp	r2, r3
 800dee6:	da49      	bge.n	800df7c <ff_wtoupper+0xe8>
			switch (cmd) {
 800dee8:	89fb      	ldrh	r3, [r7, #14]
 800deea:	2b08      	cmp	r3, #8
 800deec:	d84f      	bhi.n	800df8e <ff_wtoupper+0xfa>
 800deee:	a201      	add	r2, pc, #4	; (adr r2, 800def4 <ff_wtoupper+0x60>)
 800def0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def4:	0800df19 	.word	0x0800df19
 800def8:	0800df2b 	.word	0x0800df2b
 800defc:	0800df41 	.word	0x0800df41
 800df00:	0800df49 	.word	0x0800df49
 800df04:	0800df51 	.word	0x0800df51
 800df08:	0800df59 	.word	0x0800df59
 800df0c:	0800df61 	.word	0x0800df61
 800df10:	0800df69 	.word	0x0800df69
 800df14:	0800df71 	.word	0x0800df71
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800df18:	88fa      	ldrh	r2, [r7, #6]
 800df1a:	8a7b      	ldrh	r3, [r7, #18]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	005b      	lsls	r3, r3, #1
 800df20:	697a      	ldr	r2, [r7, #20]
 800df22:	4413      	add	r3, r2
 800df24:	881b      	ldrh	r3, [r3, #0]
 800df26:	80fb      	strh	r3, [r7, #6]
 800df28:	e027      	b.n	800df7a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800df2a:	88fa      	ldrh	r2, [r7, #6]
 800df2c:	8a7b      	ldrh	r3, [r7, #18]
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	b29b      	uxth	r3, r3
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	b29b      	uxth	r3, r3
 800df38:	88fa      	ldrh	r2, [r7, #6]
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	80fb      	strh	r3, [r7, #6]
 800df3e:	e01c      	b.n	800df7a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800df40:	88fb      	ldrh	r3, [r7, #6]
 800df42:	3b10      	subs	r3, #16
 800df44:	80fb      	strh	r3, [r7, #6]
 800df46:	e018      	b.n	800df7a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800df48:	88fb      	ldrh	r3, [r7, #6]
 800df4a:	3b20      	subs	r3, #32
 800df4c:	80fb      	strh	r3, [r7, #6]
 800df4e:	e014      	b.n	800df7a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800df50:	88fb      	ldrh	r3, [r7, #6]
 800df52:	3b30      	subs	r3, #48	; 0x30
 800df54:	80fb      	strh	r3, [r7, #6]
 800df56:	e010      	b.n	800df7a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800df58:	88fb      	ldrh	r3, [r7, #6]
 800df5a:	3b1a      	subs	r3, #26
 800df5c:	80fb      	strh	r3, [r7, #6]
 800df5e:	e00c      	b.n	800df7a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800df60:	88fb      	ldrh	r3, [r7, #6]
 800df62:	3308      	adds	r3, #8
 800df64:	80fb      	strh	r3, [r7, #6]
 800df66:	e008      	b.n	800df7a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800df68:	88fb      	ldrh	r3, [r7, #6]
 800df6a:	3b50      	subs	r3, #80	; 0x50
 800df6c:	80fb      	strh	r3, [r7, #6]
 800df6e:	e004      	b.n	800df7a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800df70:	88fb      	ldrh	r3, [r7, #6]
 800df72:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800df76:	80fb      	strh	r3, [r7, #6]
 800df78:	bf00      	nop
			}
			break;
 800df7a:	e008      	b.n	800df8e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800df7c:	89fb      	ldrh	r3, [r7, #14]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d195      	bne.n	800deae <ff_wtoupper+0x1a>
 800df82:	8a3b      	ldrh	r3, [r7, #16]
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	697a      	ldr	r2, [r7, #20]
 800df88:	4413      	add	r3, r2
 800df8a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800df8c:	e78f      	b.n	800deae <ff_wtoupper+0x1a>
			break;
 800df8e:	bf00      	nop
	}

	return chr;
 800df90:	88fb      	ldrh	r3, [r7, #6]
}
 800df92:	4618      	mov	r0, r3
 800df94:	371c      	adds	r7, #28
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	08014320 	.word	0x08014320
 800dfa4:	08014514 	.word	0x08014514

0800dfa8 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800dfac:	2200      	movs	r2, #0
 800dfae:	4912      	ldr	r1, [pc, #72]	; (800dff8 <MX_USB_DEVICE_Init+0x50>)
 800dfb0:	4812      	ldr	r0, [pc, #72]	; (800dffc <MX_USB_DEVICE_Init+0x54>)
 800dfb2:	f7fc f87e 	bl	800a0b2 <USBD_Init>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800dfbc:	f7f3 fc14 	bl	80017e8 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 800dfc0:	490f      	ldr	r1, [pc, #60]	; (800e000 <MX_USB_DEVICE_Init+0x58>)
 800dfc2:	480e      	ldr	r0, [pc, #56]	; (800dffc <MX_USB_DEVICE_Init+0x54>)
 800dfc4:	f7fc f8a5 	bl	800a112 <USBD_RegisterClass>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800dfce:	f7f3 fc0b 	bl	80017e8 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 800dfd2:	490c      	ldr	r1, [pc, #48]	; (800e004 <MX_USB_DEVICE_Init+0x5c>)
 800dfd4:	4809      	ldr	r0, [pc, #36]	; (800dffc <MX_USB_DEVICE_Init+0x54>)
 800dfd6:	f7fc f855 	bl	800a084 <USBD_Midi_RegisterInterface>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d001      	beq.n	800dfe4 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800dfe0:	f7f3 fc02 	bl	80017e8 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dfe4:	4805      	ldr	r0, [pc, #20]	; (800dffc <MX_USB_DEVICE_Init+0x54>)
 800dfe6:	f7fc f8bb 	bl	800a160 <USBD_Start>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d001      	beq.n	800dff4 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800dff0:	f7f3 fbfa 	bl	80017e8 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dff4:	bf00      	nop
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	20000100 	.word	0x20000100
 800dffc:	20002bb4 	.word	0x20002bb4
 800e000:	20000054 	.word	0x20000054
 800e004:	20000150 	.word	0x20000150

0800e008 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	4603      	mov	r3, r0
 800e010:	71fb      	strb	r3, [r7, #7]
 800e012:	460b      	mov	r3, r1
 800e014:	71bb      	strb	r3, [r7, #6]
 800e016:	4613      	mov	r3, r2
 800e018:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 800e01a:	230b      	movs	r3, #11
 800e01c:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 800e01e:	79fb      	ldrb	r3, [r7, #7]
 800e020:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800e024:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 800e026:	7bfb      	ldrb	r3, [r7, #15]
 800e028:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800e02a:	7bbb      	ldrb	r3, [r7, #14]
 800e02c:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800e02e:	79bb      	ldrb	r3, [r7, #6]
 800e030:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 800e032:	797b      	ldrb	r3, [r7, #5]
 800e034:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 800e036:	f107 0208 	add.w	r2, r7, #8
 800e03a:	2304      	movs	r3, #4
 800e03c:	2181      	movs	r1, #129	; 0x81
 800e03e:	4810      	ldr	r0, [pc, #64]	; (800e080 <MX_USB_Send_Midi+0x78>)
 800e040:	f000 fbb5 	bl	800e7ae <USBD_LL_Transmit>
 800e044:	4603      	mov	r3, r0
 800e046:	2b03      	cmp	r3, #3
 800e048:	d00a      	beq.n	800e060 <MX_USB_Send_Midi+0x58>
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	dc10      	bgt.n	800e070 <MX_USB_Send_Midi+0x68>
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d002      	beq.n	800e058 <MX_USB_Send_Midi+0x50>
 800e052:	2b01      	cmp	r3, #1
 800e054:	d008      	beq.n	800e068 <MX_USB_Send_Midi+0x60>
 800e056:	e00b      	b.n	800e070 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 800e058:	480a      	ldr	r0, [pc, #40]	; (800e084 <MX_USB_Send_Midi+0x7c>)
 800e05a:	f001 fe31 	bl	800fcc0 <puts>
        break;
 800e05e:	e00b      	b.n	800e078 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 800e060:	4809      	ldr	r0, [pc, #36]	; (800e088 <MX_USB_Send_Midi+0x80>)
 800e062:	f001 fe2d 	bl	800fcc0 <puts>
        break;
 800e066:	e007      	b.n	800e078 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 800e068:	4808      	ldr	r0, [pc, #32]	; (800e08c <MX_USB_Send_Midi+0x84>)
 800e06a:	f001 fe29 	bl	800fcc0 <puts>
        break;
 800e06e:	e003      	b.n	800e078 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 800e070:	4807      	ldr	r0, [pc, #28]	; (800e090 <MX_USB_Send_Midi+0x88>)
 800e072:	f001 fe25 	bl	800fcc0 <puts>
    }
}
 800e076:	bf00      	nop
 800e078:	bf00      	nop
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	20002bb4 	.word	0x20002bb4
 800e084:	08012dfc 	.word	0x08012dfc
 800e088:	08012e00 	.word	0x08012e00
 800e08c:	08012e10 	.word	0x08012e10
 800e090:	08012e20 	.word	0x08012e20

0800e094 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	4603      	mov	r3, r0
 800e09c:	6039      	str	r1, [r7, #0]
 800e09e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	2212      	movs	r2, #18
 800e0a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e0a6:	4b03      	ldr	r3, [pc, #12]	; (800e0b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	2000011c 	.word	0x2000011c

0800e0b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	4603      	mov	r3, r0
 800e0c0:	6039      	str	r1, [r7, #0]
 800e0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	2204      	movs	r2, #4
 800e0c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e0ca:	4b03      	ldr	r3, [pc, #12]	; (800e0d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr
 800e0d8:	20000130 	.word	0x20000130

0800e0dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	6039      	str	r1, [r7, #0]
 800e0e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e0e8:	79fb      	ldrb	r3, [r7, #7]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d105      	bne.n	800e0fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e0ee:	683a      	ldr	r2, [r7, #0]
 800e0f0:	4907      	ldr	r1, [pc, #28]	; (800e110 <USBD_FS_ProductStrDescriptor+0x34>)
 800e0f2:	4808      	ldr	r0, [pc, #32]	; (800e114 <USBD_FS_ProductStrDescriptor+0x38>)
 800e0f4:	f7fd f865 	bl	800b1c2 <USBD_GetString>
 800e0f8:	e004      	b.n	800e104 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	4904      	ldr	r1, [pc, #16]	; (800e110 <USBD_FS_ProductStrDescriptor+0x34>)
 800e0fe:	4805      	ldr	r0, [pc, #20]	; (800e114 <USBD_FS_ProductStrDescriptor+0x38>)
 800e100:	f7fd f85f 	bl	800b1c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e104:	4b02      	ldr	r3, [pc, #8]	; (800e110 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e106:	4618      	mov	r0, r3
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	20002e84 	.word	0x20002e84
 800e114:	08012e3c 	.word	0x08012e3c

0800e118 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	4603      	mov	r3, r0
 800e120:	6039      	str	r1, [r7, #0]
 800e122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e124:	683a      	ldr	r2, [r7, #0]
 800e126:	4904      	ldr	r1, [pc, #16]	; (800e138 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e128:	4804      	ldr	r0, [pc, #16]	; (800e13c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e12a:	f7fd f84a 	bl	800b1c2 <USBD_GetString>
  return USBD_StrDesc;
 800e12e:	4b02      	ldr	r3, [pc, #8]	; (800e138 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e130:	4618      	mov	r0, r3
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	20002e84 	.word	0x20002e84
 800e13c:	08012e50 	.word	0x08012e50

0800e140 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	4603      	mov	r3, r0
 800e148:	6039      	str	r1, [r7, #0]
 800e14a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	221a      	movs	r2, #26
 800e150:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e152:	f000 f843 	bl	800e1dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e156:	4b02      	ldr	r3, [pc, #8]	; (800e160 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	20000134 	.word	0x20000134

0800e164 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	4603      	mov	r3, r0
 800e16c:	6039      	str	r1, [r7, #0]
 800e16e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e170:	79fb      	ldrb	r3, [r7, #7]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d105      	bne.n	800e182 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e176:	683a      	ldr	r2, [r7, #0]
 800e178:	4907      	ldr	r1, [pc, #28]	; (800e198 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e17a:	4808      	ldr	r0, [pc, #32]	; (800e19c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e17c:	f7fd f821 	bl	800b1c2 <USBD_GetString>
 800e180:	e004      	b.n	800e18c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	4904      	ldr	r1, [pc, #16]	; (800e198 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e186:	4805      	ldr	r0, [pc, #20]	; (800e19c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e188:	f7fd f81b 	bl	800b1c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e18c:	4b02      	ldr	r3, [pc, #8]	; (800e198 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	20002e84 	.word	0x20002e84
 800e19c:	08012e64 	.word	0x08012e64

0800e1a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	6039      	str	r1, [r7, #0]
 800e1aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1ac:	79fb      	ldrb	r3, [r7, #7]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d105      	bne.n	800e1be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1b2:	683a      	ldr	r2, [r7, #0]
 800e1b4:	4907      	ldr	r1, [pc, #28]	; (800e1d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1b6:	4808      	ldr	r0, [pc, #32]	; (800e1d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1b8:	f7fd f803 	bl	800b1c2 <USBD_GetString>
 800e1bc:	e004      	b.n	800e1c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	4904      	ldr	r1, [pc, #16]	; (800e1d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1c2:	4805      	ldr	r0, [pc, #20]	; (800e1d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e1c4:	f7fc fffd 	bl	800b1c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1c8:	4b02      	ldr	r3, [pc, #8]	; (800e1d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3708      	adds	r7, #8
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	20002e84 	.word	0x20002e84
 800e1d8:	08012e74 	.word	0x08012e74

0800e1dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e1e2:	4b0f      	ldr	r3, [pc, #60]	; (800e220 <Get_SerialNum+0x44>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e1e8:	4b0e      	ldr	r3, [pc, #56]	; (800e224 <Get_SerialNum+0x48>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e1ee:	4b0e      	ldr	r3, [pc, #56]	; (800e228 <Get_SerialNum+0x4c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d009      	beq.n	800e216 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e202:	2208      	movs	r2, #8
 800e204:	4909      	ldr	r1, [pc, #36]	; (800e22c <Get_SerialNum+0x50>)
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f000 f814 	bl	800e234 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e20c:	2204      	movs	r2, #4
 800e20e:	4908      	ldr	r1, [pc, #32]	; (800e230 <Get_SerialNum+0x54>)
 800e210:	68b8      	ldr	r0, [r7, #8]
 800e212:	f000 f80f 	bl	800e234 <IntToUnicode>
  }
}
 800e216:	bf00      	nop
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	1fff7a10 	.word	0x1fff7a10
 800e224:	1fff7a14 	.word	0x1fff7a14
 800e228:	1fff7a18 	.word	0x1fff7a18
 800e22c:	20000136 	.word	0x20000136
 800e230:	20000146 	.word	0x20000146

0800e234 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e234:	b480      	push	{r7}
 800e236:	b087      	sub	sp, #28
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	4613      	mov	r3, r2
 800e240:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e242:	2300      	movs	r3, #0
 800e244:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e246:	2300      	movs	r3, #0
 800e248:	75fb      	strb	r3, [r7, #23]
 800e24a:	e027      	b.n	800e29c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	0f1b      	lsrs	r3, r3, #28
 800e250:	2b09      	cmp	r3, #9
 800e252:	d80b      	bhi.n	800e26c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	0f1b      	lsrs	r3, r3, #28
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	7dfb      	ldrb	r3, [r7, #23]
 800e25c:	005b      	lsls	r3, r3, #1
 800e25e:	4619      	mov	r1, r3
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	440b      	add	r3, r1
 800e264:	3230      	adds	r2, #48	; 0x30
 800e266:	b2d2      	uxtb	r2, r2
 800e268:	701a      	strb	r2, [r3, #0]
 800e26a:	e00a      	b.n	800e282 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	0f1b      	lsrs	r3, r3, #28
 800e270:	b2da      	uxtb	r2, r3
 800e272:	7dfb      	ldrb	r3, [r7, #23]
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	4619      	mov	r1, r3
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	440b      	add	r3, r1
 800e27c:	3237      	adds	r2, #55	; 0x37
 800e27e:	b2d2      	uxtb	r2, r2
 800e280:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	011b      	lsls	r3, r3, #4
 800e286:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e288:	7dfb      	ldrb	r3, [r7, #23]
 800e28a:	005b      	lsls	r3, r3, #1
 800e28c:	3301      	adds	r3, #1
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	4413      	add	r3, r2
 800e292:	2200      	movs	r2, #0
 800e294:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e296:	7dfb      	ldrb	r3, [r7, #23]
 800e298:	3301      	adds	r3, #1
 800e29a:	75fb      	strb	r3, [r7, #23]
 800e29c:	7dfa      	ldrb	r2, [r7, #23]
 800e29e:	79fb      	ldrb	r3, [r7, #7]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d3d3      	bcc.n	800e24c <IntToUnicode+0x18>
  }
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	371c      	adds	r7, #28
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr

0800e2b2 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800e2b2:	b480      	push	{r7}
 800e2b4:	b083      	sub	sp, #12
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800e2bc:	2300      	movs	r3, #0
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	370c      	adds	r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr
	...

0800e2cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b08a      	sub	sp, #40	; 0x28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2d4:	f107 0314 	add.w	r3, r7, #20
 800e2d8:	2200      	movs	r2, #0
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	605a      	str	r2, [r3, #4]
 800e2de:	609a      	str	r2, [r3, #8]
 800e2e0:	60da      	str	r2, [r3, #12]
 800e2e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e2ec:	d13a      	bne.n	800e364 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	613b      	str	r3, [r7, #16]
 800e2f2:	4b1e      	ldr	r3, [pc, #120]	; (800e36c <HAL_PCD_MspInit+0xa0>)
 800e2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2f6:	4a1d      	ldr	r2, [pc, #116]	; (800e36c <HAL_PCD_MspInit+0xa0>)
 800e2f8:	f043 0301 	orr.w	r3, r3, #1
 800e2fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e2fe:	4b1b      	ldr	r3, [pc, #108]	; (800e36c <HAL_PCD_MspInit+0xa0>)
 800e300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e302:	f003 0301 	and.w	r3, r3, #1
 800e306:	613b      	str	r3, [r7, #16]
 800e308:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800e30a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e30e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e310:	2302      	movs	r3, #2
 800e312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e314:	2300      	movs	r3, #0
 800e316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e318:	2300      	movs	r3, #0
 800e31a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e31c:	230a      	movs	r3, #10
 800e31e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e320:	f107 0314 	add.w	r3, r7, #20
 800e324:	4619      	mov	r1, r3
 800e326:	4812      	ldr	r0, [pc, #72]	; (800e370 <HAL_PCD_MspInit+0xa4>)
 800e328:	f7f5 faae 	bl	8003888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e32c:	4b0f      	ldr	r3, [pc, #60]	; (800e36c <HAL_PCD_MspInit+0xa0>)
 800e32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e330:	4a0e      	ldr	r2, [pc, #56]	; (800e36c <HAL_PCD_MspInit+0xa0>)
 800e332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e336:	6353      	str	r3, [r2, #52]	; 0x34
 800e338:	2300      	movs	r3, #0
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	4b0b      	ldr	r3, [pc, #44]	; (800e36c <HAL_PCD_MspInit+0xa0>)
 800e33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e340:	4a0a      	ldr	r2, [pc, #40]	; (800e36c <HAL_PCD_MspInit+0xa0>)
 800e342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e346:	6453      	str	r3, [r2, #68]	; 0x44
 800e348:	4b08      	ldr	r3, [pc, #32]	; (800e36c <HAL_PCD_MspInit+0xa0>)
 800e34a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e34c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e350:	60fb      	str	r3, [r7, #12]
 800e352:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e354:	2200      	movs	r2, #0
 800e356:	2100      	movs	r1, #0
 800e358:	2043      	movs	r0, #67	; 0x43
 800e35a:	f7f5 fa5e 	bl	800381a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e35e:	2043      	movs	r0, #67	; 0x43
 800e360:	f7f5 fa77 	bl	8003852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e364:	bf00      	nop
 800e366:	3728      	adds	r7, #40	; 0x28
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	40023800 	.word	0x40023800
 800e370:	40020000 	.word	0x40020000

0800e374 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e388:	4619      	mov	r1, r3
 800e38a:	4610      	mov	r0, r2
 800e38c:	f7fb ff33 	bl	800a1f6 <USBD_LL_SetupStage>
}
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e3aa:	78fa      	ldrb	r2, [r7, #3]
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	00db      	lsls	r3, r3, #3
 800e3b2:	1a9b      	subs	r3, r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	440b      	add	r3, r1
 800e3b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	78fb      	ldrb	r3, [r7, #3]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	f7fb ff6d 	bl	800a2a0 <USBD_LL_DataOutStage>
}
 800e3c6:	bf00      	nop
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b082      	sub	sp, #8
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e3e0:	78fa      	ldrb	r2, [r7, #3]
 800e3e2:	6879      	ldr	r1, [r7, #4]
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	00db      	lsls	r3, r3, #3
 800e3e8:	1a9b      	subs	r3, r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	440b      	add	r3, r1
 800e3ee:	3348      	adds	r3, #72	; 0x48
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	78fb      	ldrb	r3, [r7, #3]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	f7fb ffb6 	bl	800a366 <USBD_LL_DataInStage>
}
 800e3fa:	bf00      	nop
 800e3fc:	3708      	adds	r7, #8
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e402:	b580      	push	{r7, lr}
 800e404:	b082      	sub	sp, #8
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e410:	4618      	mov	r0, r3
 800e412:	f7fc f8ca 	bl	800a5aa <USBD_LL_SOF>
}
 800e416:	bf00      	nop
 800e418:	3708      	adds	r7, #8
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b084      	sub	sp, #16
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e426:	2301      	movs	r3, #1
 800e428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d001      	beq.n	800e436 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e432:	f7f3 f9d9 	bl	80017e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e43c:	7bfa      	ldrb	r2, [r7, #15]
 800e43e:	4611      	mov	r1, r2
 800e440:	4618      	mov	r0, r3
 800e442:	f7fc f874 	bl	800a52e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fc f820 	bl	800a492 <USBD_LL_Reset>
}
 800e452:	bf00      	nop
 800e454:	3710      	adds	r7, #16
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
	...

0800e45c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fc f86f 	bl	800a54e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	6812      	ldr	r2, [r2, #0]
 800e47e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e482:	f043 0301 	orr.w	r3, r3, #1
 800e486:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6a1b      	ldr	r3, [r3, #32]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d005      	beq.n	800e49c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e490:	4b04      	ldr	r3, [pc, #16]	; (800e4a4 <HAL_PCD_SuspendCallback+0x48>)
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	4a03      	ldr	r2, [pc, #12]	; (800e4a4 <HAL_PCD_SuspendCallback+0x48>)
 800e496:	f043 0306 	orr.w	r3, r3, #6
 800e49a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e49c:	bf00      	nop
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	e000ed00 	.word	0xe000ed00

0800e4a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fc f85f 	bl	800a57a <USBD_LL_Resume>
}
 800e4bc:	bf00      	nop
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4d6:	78fa      	ldrb	r2, [r7, #3]
 800e4d8:	4611      	mov	r1, r2
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fc f8ad 	bl	800a63a <USBD_LL_IsoOUTIncomplete>
}
 800e4e0:	bf00      	nop
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4fa:	78fa      	ldrb	r2, [r7, #3]
 800e4fc:	4611      	mov	r1, r2
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fc f875 	bl	800a5ee <USBD_LL_IsoINIncomplete>
}
 800e504:	bf00      	nop
 800e506:	3708      	adds	r7, #8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fc f8b3 	bl	800a686 <USBD_LL_DevConnected>
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e536:	4618      	mov	r0, r3
 800e538:	f7fc f8b0 	bl	800a69c <USBD_LL_DevDisconnected>
}
 800e53c:	bf00      	nop
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d13c      	bne.n	800e5ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e554:	4a20      	ldr	r2, [pc, #128]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	4a1e      	ldr	r2, [pc, #120]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e560:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e564:	4b1c      	ldr	r3, [pc, #112]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e566:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e56a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e56c:	4b1a      	ldr	r3, [pc, #104]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e56e:	2204      	movs	r2, #4
 800e570:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e572:	4b19      	ldr	r3, [pc, #100]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e574:	2202      	movs	r2, #2
 800e576:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e578:	4b17      	ldr	r3, [pc, #92]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e57e:	4b16      	ldr	r3, [pc, #88]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e580:	2202      	movs	r2, #2
 800e582:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e584:	4b14      	ldr	r3, [pc, #80]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e586:	2200      	movs	r2, #0
 800e588:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e58a:	4b13      	ldr	r3, [pc, #76]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e590:	4b11      	ldr	r3, [pc, #68]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e592:	2200      	movs	r2, #0
 800e594:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e596:	4b10      	ldr	r3, [pc, #64]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e598:	2200      	movs	r2, #0
 800e59a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e59c:	4b0e      	ldr	r3, [pc, #56]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e59e:	2200      	movs	r2, #0
 800e5a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e5a2:	480d      	ldr	r0, [pc, #52]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e5a4:	f7f6 f91b 	bl	80047de <HAL_PCD_Init>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d001      	beq.n	800e5b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e5ae:	f7f3 f91b 	bl	80017e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e5b2:	2180      	movs	r1, #128	; 0x80
 800e5b4:	4808      	ldr	r0, [pc, #32]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e5b6:	f7f7 fa78 	bl	8005aaa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e5ba:	2240      	movs	r2, #64	; 0x40
 800e5bc:	2100      	movs	r1, #0
 800e5be:	4806      	ldr	r0, [pc, #24]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e5c0:	f7f7 fa2c 	bl	8005a1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e5c4:	2280      	movs	r2, #128	; 0x80
 800e5c6:	2101      	movs	r1, #1
 800e5c8:	4803      	ldr	r0, [pc, #12]	; (800e5d8 <USBD_LL_Init+0x94>)
 800e5ca:	f7f7 fa27 	bl	8005a1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e5ce:	2300      	movs	r3, #0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	20003084 	.word	0x20003084

0800e5dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7f6 fa10 	bl	8004a18 <HAL_PCD_Start>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5fc:	7bfb      	ldrb	r3, [r7, #15]
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 f938 	bl	800e874 <USBD_Get_USB_Status>
 800e604:	4603      	mov	r3, r0
 800e606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e608:	7bbb      	ldrb	r3, [r7, #14]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b084      	sub	sp, #16
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
 800e61a:	4608      	mov	r0, r1
 800e61c:	4611      	mov	r1, r2
 800e61e:	461a      	mov	r2, r3
 800e620:	4603      	mov	r3, r0
 800e622:	70fb      	strb	r3, [r7, #3]
 800e624:	460b      	mov	r3, r1
 800e626:	70bb      	strb	r3, [r7, #2]
 800e628:	4613      	mov	r3, r2
 800e62a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e62c:	2300      	movs	r3, #0
 800e62e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e630:	2300      	movs	r3, #0
 800e632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e63a:	78bb      	ldrb	r3, [r7, #2]
 800e63c:	883a      	ldrh	r2, [r7, #0]
 800e63e:	78f9      	ldrb	r1, [r7, #3]
 800e640:	f7f6 fdf4 	bl	800522c <HAL_PCD_EP_Open>
 800e644:	4603      	mov	r3, r0
 800e646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e648:	7bfb      	ldrb	r3, [r7, #15]
 800e64a:	4618      	mov	r0, r3
 800e64c:	f000 f912 	bl	800e874 <USBD_Get_USB_Status>
 800e650:	4603      	mov	r3, r0
 800e652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e654:	7bbb      	ldrb	r3, [r7, #14]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b084      	sub	sp, #16
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
 800e666:	460b      	mov	r3, r1
 800e668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e66a:	2300      	movs	r3, #0
 800e66c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e66e:	2300      	movs	r3, #0
 800e670:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e678:	78fa      	ldrb	r2, [r7, #3]
 800e67a:	4611      	mov	r1, r2
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7f6 fe3d 	bl	80052fc <HAL_PCD_EP_Close>
 800e682:	4603      	mov	r3, r0
 800e684:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e686:	7bfb      	ldrb	r3, [r7, #15]
 800e688:	4618      	mov	r0, r3
 800e68a:	f000 f8f3 	bl	800e874 <USBD_Get_USB_Status>
 800e68e:	4603      	mov	r3, r0
 800e690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e692:	7bbb      	ldrb	r3, [r7, #14]
}
 800e694:	4618      	mov	r0, r3
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6b6:	78fa      	ldrb	r2, [r7, #3]
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7f6 ff15 	bl	80054ea <HAL_PCD_EP_SetStall>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6c4:	7bfb      	ldrb	r3, [r7, #15]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 f8d4 	bl	800e874 <USBD_Get_USB_Status>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b084      	sub	sp, #16
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6f4:	78fa      	ldrb	r2, [r7, #3]
 800e6f6:	4611      	mov	r1, r2
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7f6 ff5a 	bl	80055b2 <HAL_PCD_EP_ClrStall>
 800e6fe:	4603      	mov	r3, r0
 800e700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e702:	7bfb      	ldrb	r3, [r7, #15]
 800e704:	4618      	mov	r0, r3
 800e706:	f000 f8b5 	bl	800e874 <USBD_Get_USB_Status>
 800e70a:	4603      	mov	r3, r0
 800e70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	460b      	mov	r3, r1
 800e722:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e72a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e72c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e730:	2b00      	cmp	r3, #0
 800e732:	da0b      	bge.n	800e74c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e734:	78fb      	ldrb	r3, [r7, #3]
 800e736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e73a:	68f9      	ldr	r1, [r7, #12]
 800e73c:	4613      	mov	r3, r2
 800e73e:	00db      	lsls	r3, r3, #3
 800e740:	1a9b      	subs	r3, r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	440b      	add	r3, r1
 800e746:	333e      	adds	r3, #62	; 0x3e
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	e00b      	b.n	800e764 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e74c:	78fb      	ldrb	r3, [r7, #3]
 800e74e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e752:	68f9      	ldr	r1, [r7, #12]
 800e754:	4613      	mov	r3, r2
 800e756:	00db      	lsls	r3, r3, #3
 800e758:	1a9b      	subs	r3, r3, r2
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	440b      	add	r3, r1
 800e75e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e762:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e764:	4618      	mov	r0, r3
 800e766:	3714      	adds	r7, #20
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	460b      	mov	r3, r1
 800e77a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e77c:	2300      	movs	r3, #0
 800e77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e780:	2300      	movs	r3, #0
 800e782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e78a:	78fa      	ldrb	r2, [r7, #3]
 800e78c:	4611      	mov	r1, r2
 800e78e:	4618      	mov	r0, r3
 800e790:	f7f6 fd27 	bl	80051e2 <HAL_PCD_SetAddress>
 800e794:	4603      	mov	r3, r0
 800e796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e798:	7bfb      	ldrb	r3, [r7, #15]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f000 f86a 	bl	800e874 <USBD_Get_USB_Status>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b086      	sub	sp, #24
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	60f8      	str	r0, [r7, #12]
 800e7b6:	607a      	str	r2, [r7, #4]
 800e7b8:	603b      	str	r3, [r7, #0]
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e7cc:	7af9      	ldrb	r1, [r7, #11]
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	f7f6 fe40 	bl	8005456 <HAL_PCD_EP_Transmit>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7da:	7dfb      	ldrb	r3, [r7, #23]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 f849 	bl	800e874 <USBD_Get_USB_Status>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e7e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3718      	adds	r7, #24
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	607a      	str	r2, [r7, #4]
 800e7fa:	603b      	str	r3, [r7, #0]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e800:	2300      	movs	r3, #0
 800e802:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e804:	2300      	movs	r3, #0
 800e806:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e80e:	7af9      	ldrb	r1, [r7, #11]
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	f7f6 fdbc 	bl	8005390 <HAL_PCD_EP_Receive>
 800e818:	4603      	mov	r3, r0
 800e81a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e81c:	7dfb      	ldrb	r3, [r7, #23]
 800e81e:	4618      	mov	r0, r3
 800e820:	f000 f828 	bl	800e874 <USBD_Get_USB_Status>
 800e824:	4603      	mov	r3, r0
 800e826:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e828:	7dbb      	ldrb	r3, [r7, #22]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3718      	adds	r7, #24
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b082      	sub	sp, #8
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
 800e83a:	460b      	mov	r3, r1
 800e83c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e844:	78fa      	ldrb	r2, [r7, #3]
 800e846:	4611      	mov	r1, r2
 800e848:	4618      	mov	r0, r3
 800e84a:	f7f6 fdec 	bl	8005426 <HAL_PCD_EP_GetRxCount>
 800e84e:	4603      	mov	r3, r0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e860:	4b03      	ldr	r3, [pc, #12]	; (800e870 <USBD_static_malloc+0x18>)
}
 800e862:	4618      	mov	r0, r3
 800e864:	370c      	adds	r7, #12
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	2000099c 	.word	0x2000099c

0800e874 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	4603      	mov	r3, r0
 800e87c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e87e:	2300      	movs	r3, #0
 800e880:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	2b03      	cmp	r3, #3
 800e886:	d817      	bhi.n	800e8b8 <USBD_Get_USB_Status+0x44>
 800e888:	a201      	add	r2, pc, #4	; (adr r2, 800e890 <USBD_Get_USB_Status+0x1c>)
 800e88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e88e:	bf00      	nop
 800e890:	0800e8a1 	.word	0x0800e8a1
 800e894:	0800e8a7 	.word	0x0800e8a7
 800e898:	0800e8ad 	.word	0x0800e8ad
 800e89c:	0800e8b3 	.word	0x0800e8b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e8a4:	e00b      	b.n	800e8be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	73fb      	strb	r3, [r7, #15]
    break;
 800e8aa:	e008      	b.n	800e8be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e8b0:	e005      	b.n	800e8be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8b2:	2303      	movs	r3, #3
 800e8b4:	73fb      	strb	r3, [r7, #15]
    break;
 800e8b6:	e002      	b.n	800e8be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e8b8:	2303      	movs	r3, #3
 800e8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e8bc:	bf00      	nop
  }
  return usb_status;
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3714      	adds	r7, #20
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b085      	sub	sp, #20
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d002      	beq.n	800e8e2 <case_insensitive_strcmp+0x16>
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d101      	bne.n	800e8e6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e056      	b.n	800e994 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d10d      	bne.n	800e90a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	e050      	b.n	800e994 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d101      	bne.n	800e8fe <case_insensitive_strcmp+0x32>
        {
            return 0;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	e04a      	b.n	800e994 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	3301      	adds	r3, #1
 800e902:	607b      	str	r3, [r7, #4]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	3301      	adds	r3, #1
 800e908:	603b      	str	r3, [r7, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	73fb      	strb	r3, [r7, #15]
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	3301      	adds	r3, #1
 800e914:	4a22      	ldr	r2, [pc, #136]	; (800e9a0 <case_insensitive_strcmp+0xd4>)
 800e916:	4413      	add	r3, r2
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	f003 0303 	and.w	r3, r3, #3
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d103      	bne.n	800e92a <case_insensitive_strcmp+0x5e>
 800e922:	7bfb      	ldrb	r3, [r7, #15]
 800e924:	f103 0220 	add.w	r2, r3, #32
 800e928:	e000      	b.n	800e92c <case_insensitive_strcmp+0x60>
 800e92a:	7bfa      	ldrb	r2, [r7, #15]
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	73bb      	strb	r3, [r7, #14]
 800e932:	7bbb      	ldrb	r3, [r7, #14]
 800e934:	3301      	adds	r3, #1
 800e936:	491a      	ldr	r1, [pc, #104]	; (800e9a0 <case_insensitive_strcmp+0xd4>)
 800e938:	440b      	add	r3, r1
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	f003 0303 	and.w	r3, r3, #3
 800e940:	2b01      	cmp	r3, #1
 800e942:	d102      	bne.n	800e94a <case_insensitive_strcmp+0x7e>
 800e944:	7bbb      	ldrb	r3, [r7, #14]
 800e946:	3320      	adds	r3, #32
 800e948:	e000      	b.n	800e94c <case_insensitive_strcmp+0x80>
 800e94a:	7bbb      	ldrb	r3, [r7, #14]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d0d0      	beq.n	800e8f2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	737b      	strb	r3, [r7, #13]
 800e956:	7b7b      	ldrb	r3, [r7, #13]
 800e958:	3301      	adds	r3, #1
 800e95a:	4a11      	ldr	r2, [pc, #68]	; (800e9a0 <case_insensitive_strcmp+0xd4>)
 800e95c:	4413      	add	r3, r2
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	f003 0303 	and.w	r3, r3, #3
 800e964:	2b01      	cmp	r3, #1
 800e966:	d103      	bne.n	800e970 <case_insensitive_strcmp+0xa4>
 800e968:	7b7b      	ldrb	r3, [r7, #13]
 800e96a:	f103 0220 	add.w	r2, r3, #32
 800e96e:	e000      	b.n	800e972 <case_insensitive_strcmp+0xa6>
 800e970:	7b7a      	ldrb	r2, [r7, #13]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	733b      	strb	r3, [r7, #12]
 800e978:	7b3b      	ldrb	r3, [r7, #12]
 800e97a:	3301      	adds	r3, #1
 800e97c:	4908      	ldr	r1, [pc, #32]	; (800e9a0 <case_insensitive_strcmp+0xd4>)
 800e97e:	440b      	add	r3, r1
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	f003 0303 	and.w	r3, r3, #3
 800e986:	2b01      	cmp	r3, #1
 800e988:	d102      	bne.n	800e990 <case_insensitive_strcmp+0xc4>
 800e98a:	7b3b      	ldrb	r3, [r7, #12]
 800e98c:	3320      	adds	r3, #32
 800e98e:	e000      	b.n	800e992 <case_insensitive_strcmp+0xc6>
 800e990:	7b3b      	ldrb	r3, [r7, #12]
 800e992:	1ad3      	subs	r3, r2, r3
}
 800e994:	4618      	mov	r0, r3
 800e996:	3714      	adds	r7, #20
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr
 800e9a0:	080145d0 	.word	0x080145d0

0800e9a4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2028      	movs	r0, #40	; 0x28
 800e9b2:	4798      	blx	r3
 800e9b4:	60f8      	str	r0, [r7, #12]
    if (node)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d004      	beq.n	800e9c6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800e9bc:	2228      	movs	r2, #40	; 0x28
 800e9be:	2100      	movs	r1, #0
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f001 f85d 	bl	800fa80 <memset>
    }

    return node;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b084      	sub	sp, #16
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800e9dc:	e037      	b.n	800ea4e <cJSON_Delete+0x7e>
    {
        next = item->next;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d108      	bne.n	800ea02 <cJSON_Delete+0x32>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d004      	beq.n	800ea02 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7ff ffe7 	bl	800e9d0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d109      	bne.n	800ea22 <cJSON_Delete+0x52>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	691b      	ldr	r3, [r3, #16]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d005      	beq.n	800ea22 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800ea16:	4b12      	ldr	r3, [pc, #72]	; (800ea60 <cJSON_Delete+0x90>)
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	6912      	ldr	r2, [r2, #16]
 800ea1e:	4610      	mov	r0, r2
 800ea20:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d109      	bne.n	800ea42 <cJSON_Delete+0x72>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a1b      	ldr	r3, [r3, #32]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d005      	beq.n	800ea42 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800ea36:	4b0a      	ldr	r3, [pc, #40]	; (800ea60 <cJSON_Delete+0x90>)
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	6a12      	ldr	r2, [r2, #32]
 800ea3e:	4610      	mov	r0, r2
 800ea40:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800ea42:	4b07      	ldr	r3, [pc, #28]	; (800ea60 <cJSON_Delete+0x90>)
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	4798      	blx	r3
        item = next;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d1c4      	bne.n	800e9de <cJSON_Delete+0xe>
    }
}
 800ea54:	bf00      	nop
 800ea56:	bf00      	nop
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20000154 	.word	0x20000154

0800ea64 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800ea64:	b480      	push	{r7}
 800ea66:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800ea68:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr
 800ea74:	0000      	movs	r0, r0
	...

0800ea78 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b098      	sub	sp, #96	; 0x60
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
    double number = 0;
 800ea82:	f04f 0200 	mov.w	r2, #0
 800ea86:	f04f 0300 	mov.w	r3, #0
 800ea8a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800ea92:	f7ff ffe7 	bl	800ea64 <get_decimal_point>
 800ea96:	4603      	mov	r3, r0
 800ea98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d003      	beq.n	800eaae <parse_number+0x36>
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <parse_number+0x3a>
    {
        return false;
 800eaae:	2300      	movs	r3, #0
 800eab0:	e0c6      	b.n	800ec40 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800eab2:	2300      	movs	r3, #0
 800eab4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eab6:	e063      	b.n	800eb80 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	6899      	ldr	r1, [r3, #8]
 800eac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eac2:	440b      	add	r3, r1
 800eac4:	4413      	add	r3, r2
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	2b45      	cmp	r3, #69	; 0x45
 800eaca:	dc3d      	bgt.n	800eb48 <parse_number+0xd0>
 800eacc:	2b2b      	cmp	r3, #43	; 0x2b
 800eace:	db66      	blt.n	800eb9e <parse_number+0x126>
 800ead0:	3b2b      	subs	r3, #43	; 0x2b
 800ead2:	2b1a      	cmp	r3, #26
 800ead4:	d863      	bhi.n	800eb9e <parse_number+0x126>
 800ead6:	a201      	add	r2, pc, #4	; (adr r2, 800eadc <parse_number+0x64>)
 800ead8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eadc:	0800eb4d 	.word	0x0800eb4d
 800eae0:	0800eb9f 	.word	0x0800eb9f
 800eae4:	0800eb4d 	.word	0x0800eb4d
 800eae8:	0800eb6b 	.word	0x0800eb6b
 800eaec:	0800eb9f 	.word	0x0800eb9f
 800eaf0:	0800eb4d 	.word	0x0800eb4d
 800eaf4:	0800eb4d 	.word	0x0800eb4d
 800eaf8:	0800eb4d 	.word	0x0800eb4d
 800eafc:	0800eb4d 	.word	0x0800eb4d
 800eb00:	0800eb4d 	.word	0x0800eb4d
 800eb04:	0800eb4d 	.word	0x0800eb4d
 800eb08:	0800eb4d 	.word	0x0800eb4d
 800eb0c:	0800eb4d 	.word	0x0800eb4d
 800eb10:	0800eb4d 	.word	0x0800eb4d
 800eb14:	0800eb4d 	.word	0x0800eb4d
 800eb18:	0800eb9f 	.word	0x0800eb9f
 800eb1c:	0800eb9f 	.word	0x0800eb9f
 800eb20:	0800eb9f 	.word	0x0800eb9f
 800eb24:	0800eb9f 	.word	0x0800eb9f
 800eb28:	0800eb9f 	.word	0x0800eb9f
 800eb2c:	0800eb9f 	.word	0x0800eb9f
 800eb30:	0800eb9f 	.word	0x0800eb9f
 800eb34:	0800eb9f 	.word	0x0800eb9f
 800eb38:	0800eb9f 	.word	0x0800eb9f
 800eb3c:	0800eb9f 	.word	0x0800eb9f
 800eb40:	0800eb9f 	.word	0x0800eb9f
 800eb44:	0800eb4d 	.word	0x0800eb4d
 800eb48:	2b65      	cmp	r3, #101	; 0x65
 800eb4a:	d128      	bne.n	800eb9e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	6899      	ldr	r1, [r3, #8]
 800eb54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb56:	440b      	add	r3, r1
 800eb58:	4413      	add	r3, r2
 800eb5a:	7819      	ldrb	r1, [r3, #0]
 800eb5c:	f107 0208 	add.w	r2, r7, #8
 800eb60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb62:	4413      	add	r3, r2
 800eb64:	460a      	mov	r2, r1
 800eb66:	701a      	strb	r2, [r3, #0]
                break;
 800eb68:	e007      	b.n	800eb7a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800eb6a:	f107 0208 	add.w	r2, r7, #8
 800eb6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb70:	4413      	add	r3, r2
 800eb72:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800eb76:	701a      	strb	r2, [r3, #0]
                break;
 800eb78:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800eb7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb82:	2b3e      	cmp	r3, #62	; 0x3e
 800eb84:	d80d      	bhi.n	800eba2 <parse_number+0x12a>
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d00a      	beq.n	800eba2 <parse_number+0x12a>
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	689a      	ldr	r2, [r3, #8]
 800eb90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb92:	441a      	add	r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d38d      	bcc.n	800eab8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800eb9c:	e001      	b.n	800eba2 <parse_number+0x12a>
                goto loop_end;
 800eb9e:	bf00      	nop
 800eba0:	e000      	b.n	800eba4 <parse_number+0x12c>
loop_end:
 800eba2:	bf00      	nop
    number_c_string[i] = '\0';
 800eba4:	f107 0208 	add.w	r2, r7, #8
 800eba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebaa:	4413      	add	r3, r2
 800ebac:	2200      	movs	r2, #0
 800ebae:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800ebb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ebb4:	f107 0308 	add.w	r3, r7, #8
 800ebb8:	4611      	mov	r1, r2
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f001 ff52 	bl	8010a64 <strtod>
 800ebc0:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800ebc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebc6:	f107 0308 	add.w	r3, r7, #8
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d101      	bne.n	800ebd2 <parse_number+0x15a>
    {
        return false; /* parse_error */
 800ebce:	2300      	movs	r3, #0
 800ebd0:	e036      	b.n	800ec40 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800ebd2:	6879      	ldr	r1, [r7, #4]
 800ebd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ebd8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800ebdc:	a31b      	add	r3, pc, #108	; (adr r3, 800ec4c <parse_number+0x1d4>)
 800ebde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ebe6:	f7f1 ffa5 	bl	8000b34 <__aeabi_dcmpge>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d004      	beq.n	800ebfa <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ebf6:	615a      	str	r2, [r3, #20]
 800ebf8:	e015      	b.n	800ec26 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800ebfa:	f04f 0200 	mov.w	r2, #0
 800ebfe:	4b12      	ldr	r3, [pc, #72]	; (800ec48 <parse_number+0x1d0>)
 800ec00:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ec04:	f7f1 ff8c 	bl	8000b20 <__aeabi_dcmple>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d004      	beq.n	800ec18 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ec14:	615a      	str	r2, [r3, #20]
 800ec16:	e006      	b.n	800ec26 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 800ec18:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ec1c:	f7f1 ff9e 	bl	8000b5c <__aeabi_d2iz>
 800ec20:	4602      	mov	r2, r0
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2208      	movs	r2, #8
 800ec2a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec32:	f107 0208 	add.w	r2, r7, #8
 800ec36:	1a8a      	subs	r2, r1, r2
 800ec38:	441a      	add	r2, r3
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	609a      	str	r2, [r3, #8]
    return true;
 800ec3e:	2301      	movs	r3, #1
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3760      	adds	r7, #96	; 0x60
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	c1e00000 	.word	0xc1e00000
 800ec4c:	ffc00000 	.word	0xffc00000
 800ec50:	41dfffff 	.word	0x41dfffff

0800ec54 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b085      	sub	sp, #20
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800ec60:	2300      	movs	r3, #0
 800ec62:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800ec64:	2300      	movs	r3, #0
 800ec66:	60bb      	str	r3, [r7, #8]
 800ec68:	e04c      	b.n	800ed04 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	4413      	add	r3, r2
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	2b2f      	cmp	r3, #47	; 0x2f
 800ec74:	d90f      	bls.n	800ec96 <parse_hex4+0x42>
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	2b39      	cmp	r3, #57	; 0x39
 800ec80:	d809      	bhi.n	800ec96 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	4413      	add	r3, r2
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	4413      	add	r3, r2
 800ec90:	3b30      	subs	r3, #48	; 0x30
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	e02d      	b.n	800ecf2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	2b40      	cmp	r3, #64	; 0x40
 800eca0:	d90f      	bls.n	800ecc2 <parse_hex4+0x6e>
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	4413      	add	r3, r2
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	2b46      	cmp	r3, #70	; 0x46
 800ecac:	d809      	bhi.n	800ecc2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	4413      	add	r3, r2
 800ecbc:	3b37      	subs	r3, #55	; 0x37
 800ecbe:	60fb      	str	r3, [r7, #12]
 800ecc0:	e017      	b.n	800ecf2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	2b60      	cmp	r3, #96	; 0x60
 800eccc:	d90f      	bls.n	800ecee <parse_hex4+0x9a>
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	2b66      	cmp	r3, #102	; 0x66
 800ecd8:	d809      	bhi.n	800ecee <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	4413      	add	r3, r2
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	461a      	mov	r2, r3
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	4413      	add	r3, r2
 800ece8:	3b57      	subs	r3, #87	; 0x57
 800ecea:	60fb      	str	r3, [r7, #12]
 800ecec:	e001      	b.n	800ecf2 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	e00c      	b.n	800ed0c <parse_hex4+0xb8>
        }

        if (i < 3)
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d802      	bhi.n	800ecfe <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	011b      	lsls	r3, r3, #4
 800ecfc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	3301      	adds	r3, #1
 800ed02:	60bb      	str	r3, [r7, #8]
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d9af      	bls.n	800ec6a <parse_hex4+0x16>
        }
    }

    return h;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3714      	adds	r7, #20
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b08a      	sub	sp, #40	; 0x28
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800ed24:	2300      	movs	r3, #0
 800ed26:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800ed30:	2300      	movs	r3, #0
 800ed32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	69bb      	ldr	r3, [r7, #24]
 800ed4c:	1ad3      	subs	r3, r2, r3
 800ed4e:	2b05      	cmp	r3, #5
 800ed50:	f340 80b7 	ble.w	800eec2 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	3302      	adds	r3, #2
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7ff ff7b 	bl	800ec54 <parse_hex4>
 800ed5e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800ed66:	d304      	bcc.n	800ed72 <utf16_literal_to_utf8+0x5a>
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800ed6e:	f0c0 80aa 	bcc.w	800eec6 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800ed78:	d337      	bcc.n	800edea <utf16_literal_to_utf8+0xd2>
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800ed80:	d233      	bcs.n	800edea <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	3306      	adds	r3, #6
 800ed86:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800ed8c:	230c      	movs	r3, #12
 800ed8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800ed92:	68ba      	ldr	r2, [r7, #8]
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	1ad3      	subs	r3, r2, r3
 800ed98:	2b05      	cmp	r3, #5
 800ed9a:	f340 8096 	ble.w	800eeca <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	2b5c      	cmp	r3, #92	; 0x5c
 800eda4:	f040 8093 	bne.w	800eece <utf16_literal_to_utf8+0x1b6>
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	3301      	adds	r3, #1
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	2b75      	cmp	r3, #117	; 0x75
 800edb0:	f040 808d 	bne.w	800eece <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	3302      	adds	r3, #2
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff ff4b 	bl	800ec54 <parse_hex4>
 800edbe:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800edc6:	f0c0 8084 	bcc.w	800eed2 <utf16_literal_to_utf8+0x1ba>
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800edd0:	d27f      	bcs.n	800eed2 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	029a      	lsls	r2, r3, #10
 800edd6:	4b43      	ldr	r3, [pc, #268]	; (800eee4 <utf16_literal_to_utf8+0x1cc>)
 800edd8:	4013      	ands	r3, r2
 800edda:	693a      	ldr	r2, [r7, #16]
 800eddc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ede0:	4313      	orrs	r3, r2
 800ede2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ede6:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800ede8:	e004      	b.n	800edf4 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800edea:	2306      	movs	r3, #6
 800edec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	2b7f      	cmp	r3, #127	; 0x7f
 800edf8:	d803      	bhi.n	800ee02 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800edfa:	2301      	movs	r3, #1
 800edfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ee00:	e01f      	b.n	800ee42 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800ee02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee08:	d206      	bcs.n	800ee18 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800ee10:	23c0      	movs	r3, #192	; 0xc0
 800ee12:	f887 3020 	strb.w	r3, [r7, #32]
 800ee16:	e014      	b.n	800ee42 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800ee18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee1e:	d206      	bcs.n	800ee2e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800ee20:	2303      	movs	r3, #3
 800ee22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800ee26:	23e0      	movs	r3, #224	; 0xe0
 800ee28:	f887 3020 	strb.w	r3, [r7, #32]
 800ee2c:	e009      	b.n	800ee42 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee30:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800ee34:	d24f      	bcs.n	800eed6 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800ee36:	2304      	movs	r3, #4
 800ee38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800ee3c:	23f0      	movs	r3, #240	; 0xf0
 800ee3e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800ee42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee46:	3b01      	subs	r3, #1
 800ee48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ee4c:	e015      	b.n	800ee7a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee56:	b2da      	uxtb	r2, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6819      	ldr	r1, [r3, #0]
 800ee5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee60:	440b      	add	r3, r1
 800ee62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee66:	b2d2      	uxtb	r2, r2
 800ee68:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800ee6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6c:	099b      	lsrs	r3, r3, #6
 800ee6e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800ee70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee74:	3b01      	subs	r3, #1
 800ee76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ee7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d1e5      	bne.n	800ee4e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800ee82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d909      	bls.n	800ee9e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8c:	b2d9      	uxtb	r1, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ee96:	430a      	orrs	r2, r1
 800ee98:	b2d2      	uxtb	r2, r2
 800ee9a:	701a      	strb	r2, [r3, #0]
 800ee9c:	e007      	b.n	800eeae <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800eeaa:	b2d2      	uxtb	r2, r2
 800eeac:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eeb6:	441a      	add	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800eebc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800eec0:	e00b      	b.n	800eeda <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800eec2:	bf00      	nop
 800eec4:	e008      	b.n	800eed8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800eec6:	bf00      	nop
 800eec8:	e006      	b.n	800eed8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800eeca:	bf00      	nop
 800eecc:	e004      	b.n	800eed8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800eece:	bf00      	nop
 800eed0:	e002      	b.n	800eed8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800eed2:	bf00      	nop
 800eed4:	e000      	b.n	800eed8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800eed6:	bf00      	nop

fail:
    return 0;
 800eed8:	2300      	movs	r3, #0
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3728      	adds	r7, #40	; 0x28
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	000ffc00 	.word	0x000ffc00

0800eee8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b08a      	sub	sp, #40	; 0x28
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	689b      	ldr	r3, [r3, #8]
 800eefa:	3301      	adds	r3, #1
 800eefc:	4413      	add	r3, r2
 800eefe:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	4413      	add	r3, r2
 800ef0c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800ef12:	2300      	movs	r3, #0
 800ef14:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	4413      	add	r3, r2
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	2b22      	cmp	r3, #34	; 0x22
 800ef24:	f040 8102 	bne.w	800f12c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800ef30:	e017      	b.n	800ef62 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800ef32:	6a3b      	ldr	r3, [r7, #32]
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	2b5c      	cmp	r3, #92	; 0x5c
 800ef38:	d110      	bne.n	800ef5c <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800ef3a:	6a3b      	ldr	r3, [r7, #32]
 800ef3c:	1c5a      	adds	r2, r3, #1
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	1ad3      	subs	r3, r2, r3
 800ef44:	461a      	mov	r2, r3
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	f080 80f0 	bcs.w	800f130 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	3301      	adds	r3, #1
 800ef54:	61bb      	str	r3, [r7, #24]
                input_end++;
 800ef56:	6a3b      	ldr	r3, [r7, #32]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800ef5c:	6a3b      	ldr	r3, [r7, #32]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	6a3a      	ldr	r2, [r7, #32]
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d203      	bcs.n	800ef7c <parse_string+0x94>
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	2b22      	cmp	r3, #34	; 0x22
 800ef7a:	d1da      	bne.n	800ef32 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6a3a      	ldr	r2, [r7, #32]
 800ef82:	1ad3      	subs	r3, r2, r3
 800ef84:	461a      	mov	r2, r3
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	f080 80d2 	bcs.w	800f134 <parse_string+0x24c>
 800ef90:	6a3b      	ldr	r3, [r7, #32]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	2b22      	cmp	r3, #34	; 0x22
 800ef96:	f040 80cd 	bne.w	800f134 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	689b      	ldr	r3, [r3, #8]
 800efa2:	4413      	add	r3, r2
 800efa4:	6a3a      	ldr	r2, [r7, #32]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	461a      	mov	r2, r3
 800efaa:	69bb      	ldr	r3, [r7, #24]
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	693a      	ldr	r2, [r7, #16]
 800efb6:	3201      	adds	r2, #1
 800efb8:	4610      	mov	r0, r2
 800efba:	4798      	blx	r3
 800efbc:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f000 80b9 	beq.w	800f138 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800efca:	e093      	b.n	800f0f4 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b5c      	cmp	r3, #92	; 0x5c
 800efd2:	d008      	beq.n	800efe6 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800efd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efd6:	1c53      	adds	r3, r2, #1
 800efd8:	627b      	str	r3, [r7, #36]	; 0x24
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	1c59      	adds	r1, r3, #1
 800efde:	60f9      	str	r1, [r7, #12]
 800efe0:	7812      	ldrb	r2, [r2, #0]
 800efe2:	701a      	strb	r2, [r3, #0]
 800efe4:	e086      	b.n	800f0f4 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800efe6:	2302      	movs	r3, #2
 800efe8:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800efea:	6a3a      	ldr	r2, [r7, #32]
 800efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f340 80a3 	ble.w	800f13c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff8:	3301      	adds	r3, #1
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	2b75      	cmp	r3, #117	; 0x75
 800effe:	f300 809f 	bgt.w	800f140 <parse_string+0x258>
 800f002:	2b5c      	cmp	r3, #92	; 0x5c
 800f004:	da04      	bge.n	800f010 <parse_string+0x128>
 800f006:	2b22      	cmp	r3, #34	; 0x22
 800f008:	d05c      	beq.n	800f0c4 <parse_string+0x1dc>
 800f00a:	2b2f      	cmp	r3, #47	; 0x2f
 800f00c:	d05a      	beq.n	800f0c4 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800f00e:	e097      	b.n	800f140 <parse_string+0x258>
 800f010:	3b5c      	subs	r3, #92	; 0x5c
 800f012:	2b19      	cmp	r3, #25
 800f014:	f200 8094 	bhi.w	800f140 <parse_string+0x258>
 800f018:	a201      	add	r2, pc, #4	; (adr r2, 800f020 <parse_string+0x138>)
 800f01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01e:	bf00      	nop
 800f020:	0800f0c5 	.word	0x0800f0c5
 800f024:	0800f141 	.word	0x0800f141
 800f028:	0800f141 	.word	0x0800f141
 800f02c:	0800f141 	.word	0x0800f141
 800f030:	0800f141 	.word	0x0800f141
 800f034:	0800f141 	.word	0x0800f141
 800f038:	0800f089 	.word	0x0800f089
 800f03c:	0800f141 	.word	0x0800f141
 800f040:	0800f141 	.word	0x0800f141
 800f044:	0800f141 	.word	0x0800f141
 800f048:	0800f095 	.word	0x0800f095
 800f04c:	0800f141 	.word	0x0800f141
 800f050:	0800f141 	.word	0x0800f141
 800f054:	0800f141 	.word	0x0800f141
 800f058:	0800f141 	.word	0x0800f141
 800f05c:	0800f141 	.word	0x0800f141
 800f060:	0800f141 	.word	0x0800f141
 800f064:	0800f141 	.word	0x0800f141
 800f068:	0800f0a1 	.word	0x0800f0a1
 800f06c:	0800f141 	.word	0x0800f141
 800f070:	0800f141 	.word	0x0800f141
 800f074:	0800f141 	.word	0x0800f141
 800f078:	0800f0ad 	.word	0x0800f0ad
 800f07c:	0800f141 	.word	0x0800f141
 800f080:	0800f0b9 	.word	0x0800f0b9
 800f084:	0800f0d3 	.word	0x0800f0d3
                    *output_pointer++ = '\b';
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	60fa      	str	r2, [r7, #12]
 800f08e:	2208      	movs	r2, #8
 800f090:	701a      	strb	r2, [r3, #0]
                    break;
 800f092:	e02b      	b.n	800f0ec <parse_string+0x204>
                    *output_pointer++ = '\f';
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	1c5a      	adds	r2, r3, #1
 800f098:	60fa      	str	r2, [r7, #12]
 800f09a:	220c      	movs	r2, #12
 800f09c:	701a      	strb	r2, [r3, #0]
                    break;
 800f09e:	e025      	b.n	800f0ec <parse_string+0x204>
                    *output_pointer++ = '\n';
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	1c5a      	adds	r2, r3, #1
 800f0a4:	60fa      	str	r2, [r7, #12]
 800f0a6:	220a      	movs	r2, #10
 800f0a8:	701a      	strb	r2, [r3, #0]
                    break;
 800f0aa:	e01f      	b.n	800f0ec <parse_string+0x204>
                    *output_pointer++ = '\r';
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	60fa      	str	r2, [r7, #12]
 800f0b2:	220d      	movs	r2, #13
 800f0b4:	701a      	strb	r2, [r3, #0]
                    break;
 800f0b6:	e019      	b.n	800f0ec <parse_string+0x204>
                    *output_pointer++ = '\t';
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	1c5a      	adds	r2, r3, #1
 800f0bc:	60fa      	str	r2, [r7, #12]
 800f0be:	2209      	movs	r2, #9
 800f0c0:	701a      	strb	r2, [r3, #0]
                    break;
 800f0c2:	e013      	b.n	800f0ec <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	60fa      	str	r2, [r7, #12]
 800f0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0cc:	7852      	ldrb	r2, [r2, #1]
 800f0ce:	701a      	strb	r2, [r3, #0]
                    break;
 800f0d0:	e00c      	b.n	800f0ec <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800f0d2:	f107 030c 	add.w	r3, r7, #12
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	6a39      	ldr	r1, [r7, #32]
 800f0da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0dc:	f7ff fe1c 	bl	800ed18 <utf16_literal_to_utf8>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800f0e4:	7dfb      	ldrb	r3, [r7, #23]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d02c      	beq.n	800f144 <parse_string+0x25c>
                    break;
 800f0ea:	bf00      	nop
            }
            input_pointer += sequence_length;
 800f0ec:	7dfb      	ldrb	r3, [r7, #23]
 800f0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0f0:	4413      	add	r3, r2
 800f0f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800f0f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	f4ff af67 	bcc.w	800efcc <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2200      	movs	r2, #0
 800f102:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2210      	movs	r2, #16
 800f108:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	69fa      	ldr	r2, [r7, #28]
 800f10e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	6a3a      	ldr	r2, [r7, #32]
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	461a      	mov	r2, r3
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	1c5a      	adds	r2, r3, #1
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	609a      	str	r2, [r3, #8]

    return true;
 800f128:	2301      	movs	r3, #1
 800f12a:	e01e      	b.n	800f16a <parse_string+0x282>
        goto fail;
 800f12c:	bf00      	nop
 800f12e:	e00a      	b.n	800f146 <parse_string+0x25e>
                    goto fail;
 800f130:	bf00      	nop
 800f132:	e008      	b.n	800f146 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800f134:	bf00      	nop
 800f136:	e006      	b.n	800f146 <parse_string+0x25e>
            goto fail; /* allocation failure */
 800f138:	bf00      	nop
 800f13a:	e004      	b.n	800f146 <parse_string+0x25e>
                goto fail;
 800f13c:	bf00      	nop
 800f13e:	e002      	b.n	800f146 <parse_string+0x25e>
                    goto fail;
 800f140:	bf00      	nop
 800f142:	e000      	b.n	800f146 <parse_string+0x25e>
                        goto fail;
 800f144:	bf00      	nop

fail:
    if (output != NULL)
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d003      	beq.n	800f154 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	695b      	ldr	r3, [r3, #20]
 800f150:	69f8      	ldr	r0, [r7, #28]
 800f152:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800f154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f156:	2b00      	cmp	r3, #0
 800f158:	d006      	beq.n	800f168 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	461a      	mov	r2, r3
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	609a      	str	r2, [r3, #8]
    }

    return false;
 800f168:	2300      	movs	r3, #0
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3728      	adds	r7, #40	; 0x28
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop

0800f174 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d003      	beq.n	800f18a <buffer_skip_whitespace+0x16>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d101      	bne.n	800f18e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800f18a:	2300      	movs	r3, #0
 800f18c:	e02c      	b.n	800f1e8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d005      	beq.n	800f1a0 <buffer_skip_whitespace+0x2c>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	689a      	ldr	r2, [r3, #8]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d306      	bcc.n	800f1ae <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	e021      	b.n	800f1e8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	1c5a      	adds	r2, r3, #1
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00d      	beq.n	800f1d0 <buffer_skip_whitespace+0x5c>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	689a      	ldr	r2, [r3, #8]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d207      	bcs.n	800f1d0 <buffer_skip_whitespace+0x5c>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	2b20      	cmp	r3, #32
 800f1ce:	d9e9      	bls.n	800f1a4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	689a      	ldr	r2, [r3, #8]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d104      	bne.n	800f1e6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	689b      	ldr	r3, [r3, #8]
 800f1e0:	1e5a      	subs	r2, r3, #1
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800f1e6:	687b      	ldr	r3, [r7, #4]
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	370c      	adds	r7, #12
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d007      	beq.n	800f212 <skip_utf8_bom+0x1e>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d003      	beq.n	800f212 <skip_utf8_bom+0x1e>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d001      	beq.n	800f216 <skip_utf8_bom+0x22>
    {
        return NULL;
 800f212:	2300      	movs	r3, #0
 800f214:	e01c      	b.n	800f250 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d018      	beq.n	800f24e <skip_utf8_bom+0x5a>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	1d1a      	adds	r2, r3, #4
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	429a      	cmp	r2, r3
 800f228:	d211      	bcs.n	800f24e <skip_utf8_bom+0x5a>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	689b      	ldr	r3, [r3, #8]
 800f232:	4413      	add	r3, r2
 800f234:	2203      	movs	r2, #3
 800f236:	4908      	ldr	r1, [pc, #32]	; (800f258 <skip_utf8_bom+0x64>)
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 fdd8 	bl	800fdee <strncmp>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d104      	bne.n	800f24e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	689b      	ldr	r3, [r3, #8]
 800f248:	1cda      	adds	r2, r3, #3
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800f24e:	687b      	ldr	r3, [r7, #4]
}
 800f250:	4618      	mov	r0, r3
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	08012eb8 	.word	0x08012eb8

0800f25c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b086      	sub	sp, #24
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d101      	bne.n	800f272 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800f26e:	2300      	movs	r3, #0
 800f270:	e00c      	b.n	800f28c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	f7f0 ffbe 	bl	80001f4 <strlen>
 800f278:	4603      	mov	r3, r0
 800f27a:	3301      	adds	r3, #1
 800f27c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	68ba      	ldr	r2, [r7, #8]
 800f282:	6979      	ldr	r1, [r7, #20]
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f000 f805 	bl	800f294 <cJSON_ParseWithLengthOpts>
 800f28a:	4603      	mov	r3, r0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b08e      	sub	sp, #56	; 0x38
 800f298:	af00      	add	r7, sp, #0
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]
 800f2a0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800f2a2:	f107 0318 	add.w	r3, r7, #24
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	601a      	str	r2, [r3, #0]
 800f2aa:	605a      	str	r2, [r3, #4]
 800f2ac:	609a      	str	r2, [r3, #8]
 800f2ae:	60da      	str	r2, [r3, #12]
 800f2b0:	611a      	str	r2, [r3, #16]
 800f2b2:	615a      	str	r2, [r3, #20]
 800f2b4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800f2ba:	4b41      	ldr	r3, [pc, #260]	; (800f3c0 <cJSON_ParseWithLengthOpts+0x12c>)
 800f2bc:	2200      	movs	r2, #0
 800f2be:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800f2c0:	4b3f      	ldr	r3, [pc, #252]	; (800f3c0 <cJSON_ParseWithLengthOpts+0x12c>)
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d042      	beq.n	800f352 <cJSON_ParseWithLengthOpts+0xbe>
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d03f      	beq.n	800f352 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800f2de:	4a39      	ldr	r2, [pc, #228]	; (800f3c4 <cJSON_ParseWithLengthOpts+0x130>)
 800f2e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800f2e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800f2ea:	4836      	ldr	r0, [pc, #216]	; (800f3c4 <cJSON_ParseWithLengthOpts+0x130>)
 800f2ec:	f7ff fb5a 	bl	800e9a4 <cJSON_New_Item>
 800f2f0:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800f2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d02e      	beq.n	800f356 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800f2f8:	f107 0318 	add.w	r3, r7, #24
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7ff ff79 	bl	800f1f4 <skip_utf8_bom>
 800f302:	4603      	mov	r3, r0
 800f304:	4618      	mov	r0, r3
 800f306:	f7ff ff35 	bl	800f174 <buffer_skip_whitespace>
 800f30a:	4603      	mov	r3, r0
 800f30c:	4619      	mov	r1, r3
 800f30e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f310:	f000 f868 	bl	800f3e4 <parse_value>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d01f      	beq.n	800f35a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d00e      	beq.n	800f33e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800f320:	f107 0318 	add.w	r3, r7, #24
 800f324:	4618      	mov	r0, r3
 800f326:	f7ff ff25 	bl	800f174 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800f32a:	6a3a      	ldr	r2, [r7, #32]
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d215      	bcs.n	800f35e <cJSON_ParseWithLengthOpts+0xca>
 800f332:	69ba      	ldr	r2, [r7, #24]
 800f334:	6a3b      	ldr	r3, [r7, #32]
 800f336:	4413      	add	r3, r2
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d10f      	bne.n	800f35e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d004      	beq.n	800f34e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800f344:	69ba      	ldr	r2, [r7, #24]
 800f346:	6a3b      	ldr	r3, [r7, #32]
 800f348:	441a      	add	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800f34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f350:	e031      	b.n	800f3b6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800f352:	bf00      	nop
 800f354:	e004      	b.n	800f360 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800f356:	bf00      	nop
 800f358:	e002      	b.n	800f360 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800f35a:	bf00      	nop
 800f35c:	e000      	b.n	800f360 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800f35e:	bf00      	nop

fail:
    if (item != NULL)
 800f360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f362:	2b00      	cmp	r3, #0
 800f364:	d002      	beq.n	800f36c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800f366:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f368:	f7ff fb32 	bl	800e9d0 <cJSON_Delete>
    }

    if (value != NULL)
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d020      	beq.n	800f3b4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800f376:	2300      	movs	r3, #0
 800f378:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800f37a:	6a3a      	ldr	r2, [r7, #32]
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d202      	bcs.n	800f388 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	617b      	str	r3, [r7, #20]
 800f386:	e005      	b.n	800f394 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d002      	beq.n	800f394 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	3b01      	subs	r3, #1
 800f392:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d004      	beq.n	800f3a4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800f39a:	693a      	ldr	r2, [r7, #16]
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	441a      	add	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800f3a4:	4b06      	ldr	r3, [pc, #24]	; (800f3c0 <cJSON_ParseWithLengthOpts+0x12c>)
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	f107 0310 	add.w	r3, r7, #16
 800f3ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f3b0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800f3b4:	2300      	movs	r3, #0
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3738      	adds	r7, #56	; 0x38
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	20002570 	.word	0x20002570
 800f3c4:	20000154 	.word	0x20000154

0800f3c8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	2100      	movs	r1, #0
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7ff ff41 	bl	800f25c <cJSON_ParseWithOpts>
 800f3da:	4603      	mov	r3, r0
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3708      	adds	r7, #8
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d003      	beq.n	800f3fc <parse_value+0x18>
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d101      	bne.n	800f400 <parse_value+0x1c>
    {
        return false; /* no input */
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	e0d2      	b.n	800f5a6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d01d      	beq.n	800f442 <parse_value+0x5e>
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	689b      	ldr	r3, [r3, #8]
 800f40a:	1d1a      	adds	r2, r3, #4
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	429a      	cmp	r2, r3
 800f412:	d816      	bhi.n	800f442 <parse_value+0x5e>
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	4413      	add	r3, r2
 800f41e:	2204      	movs	r2, #4
 800f420:	4963      	ldr	r1, [pc, #396]	; (800f5b0 <parse_value+0x1cc>)
 800f422:	4618      	mov	r0, r3
 800f424:	f000 fce3 	bl	800fdee <strncmp>
 800f428:	4603      	mov	r3, r0
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d109      	bne.n	800f442 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2204      	movs	r2, #4
 800f432:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	1d1a      	adds	r2, r3, #4
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	609a      	str	r2, [r3, #8]
        return true;
 800f43e:	2301      	movs	r3, #1
 800f440:	e0b1      	b.n	800f5a6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d01d      	beq.n	800f484 <parse_value+0xa0>
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	1d5a      	adds	r2, r3, #5
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	429a      	cmp	r2, r3
 800f454:	d816      	bhi.n	800f484 <parse_value+0xa0>
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	4413      	add	r3, r2
 800f460:	2205      	movs	r2, #5
 800f462:	4954      	ldr	r1, [pc, #336]	; (800f5b4 <parse_value+0x1d0>)
 800f464:	4618      	mov	r0, r3
 800f466:	f000 fcc2 	bl	800fdee <strncmp>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d109      	bne.n	800f484 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2201      	movs	r2, #1
 800f474:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	1d5a      	adds	r2, r3, #5
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	609a      	str	r2, [r3, #8]
        return true;
 800f480:	2301      	movs	r3, #1
 800f482:	e090      	b.n	800f5a6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d020      	beq.n	800f4cc <parse_value+0xe8>
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	689b      	ldr	r3, [r3, #8]
 800f48e:	1d1a      	adds	r2, r3, #4
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	429a      	cmp	r2, r3
 800f496:	d819      	bhi.n	800f4cc <parse_value+0xe8>
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	689b      	ldr	r3, [r3, #8]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	2204      	movs	r2, #4
 800f4a4:	4944      	ldr	r1, [pc, #272]	; (800f5b8 <parse_value+0x1d4>)
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f000 fca1 	bl	800fdee <strncmp>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d10c      	bne.n	800f4cc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2202      	movs	r2, #2
 800f4b6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	1d1a      	adds	r2, r3, #4
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	609a      	str	r2, [r3, #8]
        return true;
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	e06c      	b.n	800f5a6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d013      	beq.n	800f4fa <parse_value+0x116>
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	689a      	ldr	r2, [r3, #8]
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d20d      	bcs.n	800f4fa <parse_value+0x116>
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	4413      	add	r3, r2
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b22      	cmp	r3, #34	; 0x22
 800f4ec:	d105      	bne.n	800f4fa <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800f4ee:	6839      	ldr	r1, [r7, #0]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f7ff fcf9 	bl	800eee8 <parse_string>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	e055      	b.n	800f5a6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d023      	beq.n	800f548 <parse_value+0x164>
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	689a      	ldr	r2, [r3, #8]
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d21d      	bcs.n	800f548 <parse_value+0x164>
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	4413      	add	r3, r2
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	2b2d      	cmp	r3, #45	; 0x2d
 800f51a:	d00f      	beq.n	800f53c <parse_value+0x158>
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	4413      	add	r3, r2
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b2f      	cmp	r3, #47	; 0x2f
 800f52a:	d90d      	bls.n	800f548 <parse_value+0x164>
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	4413      	add	r3, r2
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	2b39      	cmp	r3, #57	; 0x39
 800f53a:	d805      	bhi.n	800f548 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f7ff fa9a 	bl	800ea78 <parse_number>
 800f544:	4603      	mov	r3, r0
 800f546:	e02e      	b.n	800f5a6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d013      	beq.n	800f576 <parse_value+0x192>
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	689a      	ldr	r2, [r3, #8]
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	429a      	cmp	r2, r3
 800f558:	d20d      	bcs.n	800f576 <parse_value+0x192>
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	689b      	ldr	r3, [r3, #8]
 800f562:	4413      	add	r3, r2
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	2b5b      	cmp	r3, #91	; 0x5b
 800f568:	d105      	bne.n	800f576 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 f825 	bl	800f5bc <parse_array>
 800f572:	4603      	mov	r3, r0
 800f574:	e017      	b.n	800f5a6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d013      	beq.n	800f5a4 <parse_value+0x1c0>
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	689a      	ldr	r2, [r3, #8]
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	429a      	cmp	r2, r3
 800f586:	d20d      	bcs.n	800f5a4 <parse_value+0x1c0>
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	4413      	add	r3, r2
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	2b7b      	cmp	r3, #123	; 0x7b
 800f596:	d105      	bne.n	800f5a4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800f598:	6839      	ldr	r1, [r7, #0]
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 f8d2 	bl	800f744 <parse_object>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	e000      	b.n	800f5a6 <parse_value+0x1c2>
    }

    return false;
 800f5a4:	2300      	movs	r3, #0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3708      	adds	r7, #8
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	08012e90 	.word	0x08012e90
 800f5b4:	08012ebc 	.word	0x08012ebc
 800f5b8:	08012ec4 	.word	0x08012ec4

0800f5bc <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b086      	sub	sp, #24
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f5d6:	d301      	bcc.n	800f5dc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800f5d8:	2300      	movs	r3, #0
 800f5da:	e0af      	b.n	800f73c <parse_array+0x180>
    }
    input_buffer->depth++;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	689b      	ldr	r3, [r3, #8]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	2b5b      	cmp	r3, #91	; 0x5b
 800f5f4:	f040 8094 	bne.w	800f720 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	1c5a      	adds	r2, r3, #1
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f602:	6838      	ldr	r0, [r7, #0]
 800f604:	f7ff fdb6 	bl	800f174 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00d      	beq.n	800f62a <parse_array+0x6e>
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	689a      	ldr	r2, [r3, #8]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	429a      	cmp	r2, r3
 800f618:	d207      	bcs.n	800f62a <parse_array+0x6e>
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	4413      	add	r3, r2
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	2b5d      	cmp	r3, #93	; 0x5d
 800f628:	d061      	beq.n	800f6ee <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d005      	beq.n	800f63c <parse_array+0x80>
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	689a      	ldr	r2, [r3, #8]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d305      	bcc.n	800f648 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	689b      	ldr	r3, [r3, #8]
 800f640:	1e5a      	subs	r2, r3, #1
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	609a      	str	r2, [r3, #8]
        goto fail;
 800f646:	e072      	b.n	800f72e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	689b      	ldr	r3, [r3, #8]
 800f64c:	1e5a      	subs	r2, r3, #1
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	3310      	adds	r3, #16
 800f656:	4618      	mov	r0, r3
 800f658:	f7ff f9a4 	bl	800e9a4 <cJSON_New_Item>
 800f65c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d05f      	beq.n	800f724 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d104      	bne.n	800f674 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	617b      	str	r3, [r7, #20]
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	613b      	str	r3, [r7, #16]
 800f672:	e007      	b.n	800f684 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	693a      	ldr	r2, [r7, #16]
 800f67e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	1c5a      	adds	r2, r3, #1
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f68e:	6838      	ldr	r0, [r7, #0]
 800f690:	f7ff fd70 	bl	800f174 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6938      	ldr	r0, [r7, #16]
 800f698:	f7ff fea4 	bl	800f3e4 <parse_value>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d042      	beq.n	800f728 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f6a2:	6838      	ldr	r0, [r7, #0]
 800f6a4:	f7ff fd66 	bl	800f174 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00d      	beq.n	800f6ca <parse_array+0x10e>
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	689a      	ldr	r2, [r3, #8]
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d207      	bcs.n	800f6ca <parse_array+0x10e>
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	2b2c      	cmp	r3, #44	; 0x2c
 800f6c8:	d0c3      	beq.n	800f652 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d02d      	beq.n	800f72c <parse_array+0x170>
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	689a      	ldr	r2, [r3, #8]
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d227      	bcs.n	800f72c <parse_array+0x170>
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	2b5d      	cmp	r3, #93	; 0x5d
 800f6ea:	d11f      	bne.n	800f72c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800f6ec:	e000      	b.n	800f6f0 <parse_array+0x134>
        goto success;
 800f6ee:	bf00      	nop
    input_buffer->depth--;
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	1e5a      	subs	r2, r3, #1
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d002      	beq.n	800f706 <parse_array+0x14a>
        head->prev = current_item;
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	693a      	ldr	r2, [r7, #16]
 800f704:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2220      	movs	r2, #32
 800f70a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	697a      	ldr	r2, [r7, #20]
 800f710:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	1c5a      	adds	r2, r3, #1
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	609a      	str	r2, [r3, #8]

    return true;
 800f71c:	2301      	movs	r3, #1
 800f71e:	e00d      	b.n	800f73c <parse_array+0x180>
        goto fail;
 800f720:	bf00      	nop
 800f722:	e004      	b.n	800f72e <parse_array+0x172>
            goto fail; /* allocation failure */
 800f724:	bf00      	nop
 800f726:	e002      	b.n	800f72e <parse_array+0x172>
            goto fail; /* failed to parse value */
 800f728:	bf00      	nop
 800f72a:	e000      	b.n	800f72e <parse_array+0x172>
        goto fail; /* expected end of array */
 800f72c:	bf00      	nop

fail:
    if (head != NULL)
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d002      	beq.n	800f73a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800f734:	6978      	ldr	r0, [r7, #20]
 800f736:	f7ff f94b 	bl	800e9d0 <cJSON_Delete>
    }

    return false;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3718      	adds	r7, #24
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800f74e:	2300      	movs	r3, #0
 800f750:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f75e:	d301      	bcc.n	800f764 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800f760:	2300      	movs	r3, #0
 800f762:	e0ea      	b.n	800f93a <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	1c5a      	adds	r2, r3, #1
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	f000 80d0 	beq.w	800f916 <parse_object+0x1d2>
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	689a      	ldr	r2, [r3, #8]
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	429a      	cmp	r2, r3
 800f780:	f080 80c9 	bcs.w	800f916 <parse_object+0x1d2>
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	4413      	add	r3, r2
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	2b7b      	cmp	r3, #123	; 0x7b
 800f792:	f040 80c0 	bne.w	800f916 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	1c5a      	adds	r2, r3, #1
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f7a0:	6838      	ldr	r0, [r7, #0]
 800f7a2:	f7ff fce7 	bl	800f174 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00e      	beq.n	800f7ca <parse_object+0x86>
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	689a      	ldr	r2, [r3, #8]
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d208      	bcs.n	800f7ca <parse_object+0x86>
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	2b7d      	cmp	r3, #125	; 0x7d
 800f7c6:	f000 808d 	beq.w	800f8e4 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d005      	beq.n	800f7dc <parse_object+0x98>
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	689a      	ldr	r2, [r3, #8]
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d305      	bcc.n	800f7e8 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	1e5a      	subs	r2, r3, #1
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	609a      	str	r2, [r3, #8]
        goto fail;
 800f7e6:	e0a1      	b.n	800f92c <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	1e5a      	subs	r2, r3, #1
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	3310      	adds	r3, #16
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7ff f8d4 	bl	800e9a4 <cJSON_New_Item>
 800f7fc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2b00      	cmp	r3, #0
 800f802:	f000 808a 	beq.w	800f91a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d104      	bne.n	800f816 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	617b      	str	r3, [r7, #20]
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	613b      	str	r3, [r7, #16]
 800f814:	e007      	b.n	800f826 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	693a      	ldr	r2, [r7, #16]
 800f820:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	1c5a      	adds	r2, r3, #1
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f830:	6838      	ldr	r0, [r7, #0]
 800f832:	f7ff fc9f 	bl	800f174 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800f836:	6839      	ldr	r1, [r7, #0]
 800f838:	6938      	ldr	r0, [r7, #16]
 800f83a:	f7ff fb55 	bl	800eee8 <parse_string>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d06c      	beq.n	800f91e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800f844:	6838      	ldr	r0, [r7, #0]
 800f846:	f7ff fc95 	bl	800f174 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	691a      	ldr	r2, [r3, #16]
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	2200      	movs	r2, #0
 800f856:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d061      	beq.n	800f922 <parse_object+0x1de>
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	689a      	ldr	r2, [r3, #8]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	429a      	cmp	r2, r3
 800f868:	d25b      	bcs.n	800f922 <parse_object+0x1de>
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	689b      	ldr	r3, [r3, #8]
 800f872:	4413      	add	r3, r2
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	2b3a      	cmp	r3, #58	; 0x3a
 800f878:	d153      	bne.n	800f922 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	1c5a      	adds	r2, r3, #1
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f884:	6838      	ldr	r0, [r7, #0]
 800f886:	f7ff fc75 	bl	800f174 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f88a:	6839      	ldr	r1, [r7, #0]
 800f88c:	6938      	ldr	r0, [r7, #16]
 800f88e:	f7ff fda9 	bl	800f3e4 <parse_value>
 800f892:	4603      	mov	r3, r0
 800f894:	2b00      	cmp	r3, #0
 800f896:	d046      	beq.n	800f926 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f898:	6838      	ldr	r0, [r7, #0]
 800f89a:	f7ff fc6b 	bl	800f174 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d00d      	beq.n	800f8c0 <parse_object+0x17c>
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	689a      	ldr	r2, [r3, #8]
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d207      	bcs.n	800f8c0 <parse_object+0x17c>
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	2b2c      	cmp	r3, #44	; 0x2c
 800f8be:	d098      	beq.n	800f7f2 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d031      	beq.n	800f92a <parse_object+0x1e6>
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	689a      	ldr	r2, [r3, #8]
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d22b      	bcs.n	800f92a <parse_object+0x1e6>
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	689b      	ldr	r3, [r3, #8]
 800f8da:	4413      	add	r3, r2
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	2b7d      	cmp	r3, #125	; 0x7d
 800f8e0:	d123      	bne.n	800f92a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800f8e2:	e000      	b.n	800f8e6 <parse_object+0x1a2>
        goto success; /* empty object */
 800f8e4:	bf00      	nop
    input_buffer->depth--;
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	1e5a      	subs	r2, r3, #1
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <parse_object+0x1b8>
        head->prev = current_item;
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	693a      	ldr	r2, [r7, #16]
 800f8fa:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2240      	movs	r2, #64	; 0x40
 800f900:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	697a      	ldr	r2, [r7, #20]
 800f906:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	1c5a      	adds	r2, r3, #1
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	609a      	str	r2, [r3, #8]
    return true;
 800f912:	2301      	movs	r3, #1
 800f914:	e011      	b.n	800f93a <parse_object+0x1f6>
        goto fail; /* not an object */
 800f916:	bf00      	nop
 800f918:	e008      	b.n	800f92c <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800f91a:	bf00      	nop
 800f91c:	e006      	b.n	800f92c <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800f91e:	bf00      	nop
 800f920:	e004      	b.n	800f92c <parse_object+0x1e8>
            goto fail; /* invalid object */
 800f922:	bf00      	nop
 800f924:	e002      	b.n	800f92c <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800f926:	bf00      	nop
 800f928:	e000      	b.n	800f92c <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800f92a:	bf00      	nop

fail:
    if (head != NULL)
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d002      	beq.n	800f938 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800f932:	6978      	ldr	r0, [r7, #20]
 800f934:	f7ff f84c 	bl	800e9d0 <cJSON_Delete>
    }

    return false;
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3718      	adds	r7, #24
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b086      	sub	sp, #24
 800f946:	af00      	add	r7, sp, #0
 800f948:	60f8      	str	r0, [r7, #12]
 800f94a:	60b9      	str	r1, [r7, #8]
 800f94c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800f94e:	2300      	movs	r3, #0
 800f950:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d002      	beq.n	800f95e <get_object_item+0x1c>
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d101      	bne.n	800f962 <get_object_item+0x20>
    {
        return NULL;
 800f95e:	2300      	movs	r3, #0
 800f960:	e033      	b.n	800f9ca <get_object_item+0x88>
    }

    current_element = object->child;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d017      	beq.n	800f99e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800f96e:	e002      	b.n	800f976 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d01c      	beq.n	800f9b6 <get_object_item+0x74>
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	6a1b      	ldr	r3, [r3, #32]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d018      	beq.n	800f9b6 <get_object_item+0x74>
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	6a1b      	ldr	r3, [r3, #32]
 800f988:	4619      	mov	r1, r3
 800f98a:	68b8      	ldr	r0, [r7, #8]
 800f98c:	f7f0 fc28 	bl	80001e0 <strcmp>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d1ec      	bne.n	800f970 <get_object_item+0x2e>
 800f996:	e00e      	b.n	800f9b6 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d008      	beq.n	800f9b6 <get_object_item+0x74>
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	6a1b      	ldr	r3, [r3, #32]
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	68b8      	ldr	r0, [r7, #8]
 800f9ac:	f7fe ff8e 	bl	800e8cc <case_insensitive_strcmp>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d1f0      	bne.n	800f998 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d003      	beq.n	800f9c4 <get_object_item+0x82>
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	6a1b      	ldr	r3, [r3, #32]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d101      	bne.n	800f9c8 <get_object_item+0x86>
        return NULL;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	e000      	b.n	800f9ca <get_object_item+0x88>
    }

    return current_element;
 800f9c8:	697b      	ldr	r3, [r7, #20]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3718      	adds	r7, #24
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b082      	sub	sp, #8
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 800f9dc:	2201      	movs	r2, #1
 800f9de:	6839      	ldr	r1, [r7, #0]
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7ff ffae 	bl	800f942 <get_object_item>
 800f9e6:	4603      	mov	r3, r0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <__errno>:
 800f9f0:	4b01      	ldr	r3, [pc, #4]	; (800f9f8 <__errno+0x8>)
 800f9f2:	6818      	ldr	r0, [r3, #0]
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	20000160 	.word	0x20000160

0800f9fc <__libc_init_array>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	4d0d      	ldr	r5, [pc, #52]	; (800fa34 <__libc_init_array+0x38>)
 800fa00:	4c0d      	ldr	r4, [pc, #52]	; (800fa38 <__libc_init_array+0x3c>)
 800fa02:	1b64      	subs	r4, r4, r5
 800fa04:	10a4      	asrs	r4, r4, #2
 800fa06:	2600      	movs	r6, #0
 800fa08:	42a6      	cmp	r6, r4
 800fa0a:	d109      	bne.n	800fa20 <__libc_init_array+0x24>
 800fa0c:	4d0b      	ldr	r5, [pc, #44]	; (800fa3c <__libc_init_array+0x40>)
 800fa0e:	4c0c      	ldr	r4, [pc, #48]	; (800fa40 <__libc_init_array+0x44>)
 800fa10:	f003 f8f8 	bl	8012c04 <_init>
 800fa14:	1b64      	subs	r4, r4, r5
 800fa16:	10a4      	asrs	r4, r4, #2
 800fa18:	2600      	movs	r6, #0
 800fa1a:	42a6      	cmp	r6, r4
 800fa1c:	d105      	bne.n	800fa2a <__libc_init_array+0x2e>
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}
 800fa20:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa24:	4798      	blx	r3
 800fa26:	3601      	adds	r6, #1
 800fa28:	e7ee      	b.n	800fa08 <__libc_init_array+0xc>
 800fa2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa2e:	4798      	blx	r3
 800fa30:	3601      	adds	r6, #1
 800fa32:	e7f2      	b.n	800fa1a <__libc_init_array+0x1e>
 800fa34:	08014a14 	.word	0x08014a14
 800fa38:	08014a14 	.word	0x08014a14
 800fa3c:	08014a14 	.word	0x08014a14
 800fa40:	08014a18 	.word	0x08014a18

0800fa44 <malloc>:
 800fa44:	4b02      	ldr	r3, [pc, #8]	; (800fa50 <malloc+0xc>)
 800fa46:	4601      	mov	r1, r0
 800fa48:	6818      	ldr	r0, [r3, #0]
 800fa4a:	f000 b871 	b.w	800fb30 <_malloc_r>
 800fa4e:	bf00      	nop
 800fa50:	20000160 	.word	0x20000160

0800fa54 <free>:
 800fa54:	4b02      	ldr	r3, [pc, #8]	; (800fa60 <free+0xc>)
 800fa56:	4601      	mov	r1, r0
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	f000 b819 	b.w	800fa90 <_free_r>
 800fa5e:	bf00      	nop
 800fa60:	20000160 	.word	0x20000160

0800fa64 <memcpy>:
 800fa64:	440a      	add	r2, r1
 800fa66:	4291      	cmp	r1, r2
 800fa68:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa6c:	d100      	bne.n	800fa70 <memcpy+0xc>
 800fa6e:	4770      	bx	lr
 800fa70:	b510      	push	{r4, lr}
 800fa72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa7a:	4291      	cmp	r1, r2
 800fa7c:	d1f9      	bne.n	800fa72 <memcpy+0xe>
 800fa7e:	bd10      	pop	{r4, pc}

0800fa80 <memset>:
 800fa80:	4402      	add	r2, r0
 800fa82:	4603      	mov	r3, r0
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d100      	bne.n	800fa8a <memset+0xa>
 800fa88:	4770      	bx	lr
 800fa8a:	f803 1b01 	strb.w	r1, [r3], #1
 800fa8e:	e7f9      	b.n	800fa84 <memset+0x4>

0800fa90 <_free_r>:
 800fa90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa92:	2900      	cmp	r1, #0
 800fa94:	d048      	beq.n	800fb28 <_free_r+0x98>
 800fa96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa9a:	9001      	str	r0, [sp, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f1a1 0404 	sub.w	r4, r1, #4
 800faa2:	bfb8      	it	lt
 800faa4:	18e4      	addlt	r4, r4, r3
 800faa6:	f001 fe7d 	bl	80117a4 <__malloc_lock>
 800faaa:	4a20      	ldr	r2, [pc, #128]	; (800fb2c <_free_r+0x9c>)
 800faac:	9801      	ldr	r0, [sp, #4]
 800faae:	6813      	ldr	r3, [r2, #0]
 800fab0:	4615      	mov	r5, r2
 800fab2:	b933      	cbnz	r3, 800fac2 <_free_r+0x32>
 800fab4:	6063      	str	r3, [r4, #4]
 800fab6:	6014      	str	r4, [r2, #0]
 800fab8:	b003      	add	sp, #12
 800faba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fabe:	f001 be77 	b.w	80117b0 <__malloc_unlock>
 800fac2:	42a3      	cmp	r3, r4
 800fac4:	d90b      	bls.n	800fade <_free_r+0x4e>
 800fac6:	6821      	ldr	r1, [r4, #0]
 800fac8:	1862      	adds	r2, r4, r1
 800faca:	4293      	cmp	r3, r2
 800facc:	bf04      	itt	eq
 800face:	681a      	ldreq	r2, [r3, #0]
 800fad0:	685b      	ldreq	r3, [r3, #4]
 800fad2:	6063      	str	r3, [r4, #4]
 800fad4:	bf04      	itt	eq
 800fad6:	1852      	addeq	r2, r2, r1
 800fad8:	6022      	streq	r2, [r4, #0]
 800fada:	602c      	str	r4, [r5, #0]
 800fadc:	e7ec      	b.n	800fab8 <_free_r+0x28>
 800fade:	461a      	mov	r2, r3
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	b10b      	cbz	r3, 800fae8 <_free_r+0x58>
 800fae4:	42a3      	cmp	r3, r4
 800fae6:	d9fa      	bls.n	800fade <_free_r+0x4e>
 800fae8:	6811      	ldr	r1, [r2, #0]
 800faea:	1855      	adds	r5, r2, r1
 800faec:	42a5      	cmp	r5, r4
 800faee:	d10b      	bne.n	800fb08 <_free_r+0x78>
 800faf0:	6824      	ldr	r4, [r4, #0]
 800faf2:	4421      	add	r1, r4
 800faf4:	1854      	adds	r4, r2, r1
 800faf6:	42a3      	cmp	r3, r4
 800faf8:	6011      	str	r1, [r2, #0]
 800fafa:	d1dd      	bne.n	800fab8 <_free_r+0x28>
 800fafc:	681c      	ldr	r4, [r3, #0]
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	6053      	str	r3, [r2, #4]
 800fb02:	4421      	add	r1, r4
 800fb04:	6011      	str	r1, [r2, #0]
 800fb06:	e7d7      	b.n	800fab8 <_free_r+0x28>
 800fb08:	d902      	bls.n	800fb10 <_free_r+0x80>
 800fb0a:	230c      	movs	r3, #12
 800fb0c:	6003      	str	r3, [r0, #0]
 800fb0e:	e7d3      	b.n	800fab8 <_free_r+0x28>
 800fb10:	6825      	ldr	r5, [r4, #0]
 800fb12:	1961      	adds	r1, r4, r5
 800fb14:	428b      	cmp	r3, r1
 800fb16:	bf04      	itt	eq
 800fb18:	6819      	ldreq	r1, [r3, #0]
 800fb1a:	685b      	ldreq	r3, [r3, #4]
 800fb1c:	6063      	str	r3, [r4, #4]
 800fb1e:	bf04      	itt	eq
 800fb20:	1949      	addeq	r1, r1, r5
 800fb22:	6021      	streq	r1, [r4, #0]
 800fb24:	6054      	str	r4, [r2, #4]
 800fb26:	e7c7      	b.n	800fab8 <_free_r+0x28>
 800fb28:	b003      	add	sp, #12
 800fb2a:	bd30      	pop	{r4, r5, pc}
 800fb2c:	20002578 	.word	0x20002578

0800fb30 <_malloc_r>:
 800fb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb32:	1ccd      	adds	r5, r1, #3
 800fb34:	f025 0503 	bic.w	r5, r5, #3
 800fb38:	3508      	adds	r5, #8
 800fb3a:	2d0c      	cmp	r5, #12
 800fb3c:	bf38      	it	cc
 800fb3e:	250c      	movcc	r5, #12
 800fb40:	2d00      	cmp	r5, #0
 800fb42:	4606      	mov	r6, r0
 800fb44:	db01      	blt.n	800fb4a <_malloc_r+0x1a>
 800fb46:	42a9      	cmp	r1, r5
 800fb48:	d903      	bls.n	800fb52 <_malloc_r+0x22>
 800fb4a:	230c      	movs	r3, #12
 800fb4c:	6033      	str	r3, [r6, #0]
 800fb4e:	2000      	movs	r0, #0
 800fb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb52:	f001 fe27 	bl	80117a4 <__malloc_lock>
 800fb56:	4921      	ldr	r1, [pc, #132]	; (800fbdc <_malloc_r+0xac>)
 800fb58:	680a      	ldr	r2, [r1, #0]
 800fb5a:	4614      	mov	r4, r2
 800fb5c:	b99c      	cbnz	r4, 800fb86 <_malloc_r+0x56>
 800fb5e:	4f20      	ldr	r7, [pc, #128]	; (800fbe0 <_malloc_r+0xb0>)
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	b923      	cbnz	r3, 800fb6e <_malloc_r+0x3e>
 800fb64:	4621      	mov	r1, r4
 800fb66:	4630      	mov	r0, r6
 800fb68:	f000 f8ba 	bl	800fce0 <_sbrk_r>
 800fb6c:	6038      	str	r0, [r7, #0]
 800fb6e:	4629      	mov	r1, r5
 800fb70:	4630      	mov	r0, r6
 800fb72:	f000 f8b5 	bl	800fce0 <_sbrk_r>
 800fb76:	1c43      	adds	r3, r0, #1
 800fb78:	d123      	bne.n	800fbc2 <_malloc_r+0x92>
 800fb7a:	230c      	movs	r3, #12
 800fb7c:	6033      	str	r3, [r6, #0]
 800fb7e:	4630      	mov	r0, r6
 800fb80:	f001 fe16 	bl	80117b0 <__malloc_unlock>
 800fb84:	e7e3      	b.n	800fb4e <_malloc_r+0x1e>
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	1b5b      	subs	r3, r3, r5
 800fb8a:	d417      	bmi.n	800fbbc <_malloc_r+0x8c>
 800fb8c:	2b0b      	cmp	r3, #11
 800fb8e:	d903      	bls.n	800fb98 <_malloc_r+0x68>
 800fb90:	6023      	str	r3, [r4, #0]
 800fb92:	441c      	add	r4, r3
 800fb94:	6025      	str	r5, [r4, #0]
 800fb96:	e004      	b.n	800fba2 <_malloc_r+0x72>
 800fb98:	6863      	ldr	r3, [r4, #4]
 800fb9a:	42a2      	cmp	r2, r4
 800fb9c:	bf0c      	ite	eq
 800fb9e:	600b      	streq	r3, [r1, #0]
 800fba0:	6053      	strne	r3, [r2, #4]
 800fba2:	4630      	mov	r0, r6
 800fba4:	f001 fe04 	bl	80117b0 <__malloc_unlock>
 800fba8:	f104 000b 	add.w	r0, r4, #11
 800fbac:	1d23      	adds	r3, r4, #4
 800fbae:	f020 0007 	bic.w	r0, r0, #7
 800fbb2:	1ac2      	subs	r2, r0, r3
 800fbb4:	d0cc      	beq.n	800fb50 <_malloc_r+0x20>
 800fbb6:	1a1b      	subs	r3, r3, r0
 800fbb8:	50a3      	str	r3, [r4, r2]
 800fbba:	e7c9      	b.n	800fb50 <_malloc_r+0x20>
 800fbbc:	4622      	mov	r2, r4
 800fbbe:	6864      	ldr	r4, [r4, #4]
 800fbc0:	e7cc      	b.n	800fb5c <_malloc_r+0x2c>
 800fbc2:	1cc4      	adds	r4, r0, #3
 800fbc4:	f024 0403 	bic.w	r4, r4, #3
 800fbc8:	42a0      	cmp	r0, r4
 800fbca:	d0e3      	beq.n	800fb94 <_malloc_r+0x64>
 800fbcc:	1a21      	subs	r1, r4, r0
 800fbce:	4630      	mov	r0, r6
 800fbd0:	f000 f886 	bl	800fce0 <_sbrk_r>
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	d1dd      	bne.n	800fb94 <_malloc_r+0x64>
 800fbd8:	e7cf      	b.n	800fb7a <_malloc_r+0x4a>
 800fbda:	bf00      	nop
 800fbdc:	20002578 	.word	0x20002578
 800fbe0:	2000257c 	.word	0x2000257c

0800fbe4 <_puts_r>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	460e      	mov	r6, r1
 800fbe8:	4605      	mov	r5, r0
 800fbea:	b118      	cbz	r0, 800fbf4 <_puts_r+0x10>
 800fbec:	6983      	ldr	r3, [r0, #24]
 800fbee:	b90b      	cbnz	r3, 800fbf4 <_puts_r+0x10>
 800fbf0:	f001 f940 	bl	8010e74 <__sinit>
 800fbf4:	69ab      	ldr	r3, [r5, #24]
 800fbf6:	68ac      	ldr	r4, [r5, #8]
 800fbf8:	b913      	cbnz	r3, 800fc00 <_puts_r+0x1c>
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f001 f93a 	bl	8010e74 <__sinit>
 800fc00:	4b2c      	ldr	r3, [pc, #176]	; (800fcb4 <_puts_r+0xd0>)
 800fc02:	429c      	cmp	r4, r3
 800fc04:	d120      	bne.n	800fc48 <_puts_r+0x64>
 800fc06:	686c      	ldr	r4, [r5, #4]
 800fc08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc0a:	07db      	lsls	r3, r3, #31
 800fc0c:	d405      	bmi.n	800fc1a <_puts_r+0x36>
 800fc0e:	89a3      	ldrh	r3, [r4, #12]
 800fc10:	0598      	lsls	r0, r3, #22
 800fc12:	d402      	bmi.n	800fc1a <_puts_r+0x36>
 800fc14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc16:	f001 fd3a 	bl	801168e <__retarget_lock_acquire_recursive>
 800fc1a:	89a3      	ldrh	r3, [r4, #12]
 800fc1c:	0719      	lsls	r1, r3, #28
 800fc1e:	d51d      	bpl.n	800fc5c <_puts_r+0x78>
 800fc20:	6923      	ldr	r3, [r4, #16]
 800fc22:	b1db      	cbz	r3, 800fc5c <_puts_r+0x78>
 800fc24:	3e01      	subs	r6, #1
 800fc26:	68a3      	ldr	r3, [r4, #8]
 800fc28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fc2c:	3b01      	subs	r3, #1
 800fc2e:	60a3      	str	r3, [r4, #8]
 800fc30:	bb39      	cbnz	r1, 800fc82 <_puts_r+0x9e>
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	da38      	bge.n	800fca8 <_puts_r+0xc4>
 800fc36:	4622      	mov	r2, r4
 800fc38:	210a      	movs	r1, #10
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	f000 ff1e 	bl	8010a7c <__swbuf_r>
 800fc40:	3001      	adds	r0, #1
 800fc42:	d011      	beq.n	800fc68 <_puts_r+0x84>
 800fc44:	250a      	movs	r5, #10
 800fc46:	e011      	b.n	800fc6c <_puts_r+0x88>
 800fc48:	4b1b      	ldr	r3, [pc, #108]	; (800fcb8 <_puts_r+0xd4>)
 800fc4a:	429c      	cmp	r4, r3
 800fc4c:	d101      	bne.n	800fc52 <_puts_r+0x6e>
 800fc4e:	68ac      	ldr	r4, [r5, #8]
 800fc50:	e7da      	b.n	800fc08 <_puts_r+0x24>
 800fc52:	4b1a      	ldr	r3, [pc, #104]	; (800fcbc <_puts_r+0xd8>)
 800fc54:	429c      	cmp	r4, r3
 800fc56:	bf08      	it	eq
 800fc58:	68ec      	ldreq	r4, [r5, #12]
 800fc5a:	e7d5      	b.n	800fc08 <_puts_r+0x24>
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	4628      	mov	r0, r5
 800fc60:	f000 ff70 	bl	8010b44 <__swsetup_r>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	d0dd      	beq.n	800fc24 <_puts_r+0x40>
 800fc68:	f04f 35ff 	mov.w	r5, #4294967295
 800fc6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc6e:	07da      	lsls	r2, r3, #31
 800fc70:	d405      	bmi.n	800fc7e <_puts_r+0x9a>
 800fc72:	89a3      	ldrh	r3, [r4, #12]
 800fc74:	059b      	lsls	r3, r3, #22
 800fc76:	d402      	bmi.n	800fc7e <_puts_r+0x9a>
 800fc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc7a:	f001 fd09 	bl	8011690 <__retarget_lock_release_recursive>
 800fc7e:	4628      	mov	r0, r5
 800fc80:	bd70      	pop	{r4, r5, r6, pc}
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	da04      	bge.n	800fc90 <_puts_r+0xac>
 800fc86:	69a2      	ldr	r2, [r4, #24]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	dc06      	bgt.n	800fc9a <_puts_r+0xb6>
 800fc8c:	290a      	cmp	r1, #10
 800fc8e:	d004      	beq.n	800fc9a <_puts_r+0xb6>
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	6022      	str	r2, [r4, #0]
 800fc96:	7019      	strb	r1, [r3, #0]
 800fc98:	e7c5      	b.n	800fc26 <_puts_r+0x42>
 800fc9a:	4622      	mov	r2, r4
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	f000 feed 	bl	8010a7c <__swbuf_r>
 800fca2:	3001      	adds	r0, #1
 800fca4:	d1bf      	bne.n	800fc26 <_puts_r+0x42>
 800fca6:	e7df      	b.n	800fc68 <_puts_r+0x84>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	250a      	movs	r5, #10
 800fcac:	1c5a      	adds	r2, r3, #1
 800fcae:	6022      	str	r2, [r4, #0]
 800fcb0:	701d      	strb	r5, [r3, #0]
 800fcb2:	e7db      	b.n	800fc6c <_puts_r+0x88>
 800fcb4:	08014758 	.word	0x08014758
 800fcb8:	08014778 	.word	0x08014778
 800fcbc:	08014738 	.word	0x08014738

0800fcc0 <puts>:
 800fcc0:	4b02      	ldr	r3, [pc, #8]	; (800fccc <puts+0xc>)
 800fcc2:	4601      	mov	r1, r0
 800fcc4:	6818      	ldr	r0, [r3, #0]
 800fcc6:	f7ff bf8d 	b.w	800fbe4 <_puts_r>
 800fcca:	bf00      	nop
 800fccc:	20000160 	.word	0x20000160

0800fcd0 <realloc>:
 800fcd0:	4b02      	ldr	r3, [pc, #8]	; (800fcdc <realloc+0xc>)
 800fcd2:	460a      	mov	r2, r1
 800fcd4:	4601      	mov	r1, r0
 800fcd6:	6818      	ldr	r0, [r3, #0]
 800fcd8:	f002 ba3a 	b.w	8012150 <_realloc_r>
 800fcdc:	20000160 	.word	0x20000160

0800fce0 <_sbrk_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d06      	ldr	r5, [pc, #24]	; (800fcfc <_sbrk_r+0x1c>)
 800fce4:	2300      	movs	r3, #0
 800fce6:	4604      	mov	r4, r0
 800fce8:	4608      	mov	r0, r1
 800fcea:	602b      	str	r3, [r5, #0]
 800fcec:	f7f2 ff40 	bl	8002b70 <_sbrk>
 800fcf0:	1c43      	adds	r3, r0, #1
 800fcf2:	d102      	bne.n	800fcfa <_sbrk_r+0x1a>
 800fcf4:	682b      	ldr	r3, [r5, #0]
 800fcf6:	b103      	cbz	r3, 800fcfa <_sbrk_r+0x1a>
 800fcf8:	6023      	str	r3, [r4, #0]
 800fcfa:	bd38      	pop	{r3, r4, r5, pc}
 800fcfc:	20003498 	.word	0x20003498

0800fd00 <sniprintf>:
 800fd00:	b40c      	push	{r2, r3}
 800fd02:	b530      	push	{r4, r5, lr}
 800fd04:	4b17      	ldr	r3, [pc, #92]	; (800fd64 <sniprintf+0x64>)
 800fd06:	1e0c      	subs	r4, r1, #0
 800fd08:	681d      	ldr	r5, [r3, #0]
 800fd0a:	b09d      	sub	sp, #116	; 0x74
 800fd0c:	da08      	bge.n	800fd20 <sniprintf+0x20>
 800fd0e:	238b      	movs	r3, #139	; 0x8b
 800fd10:	602b      	str	r3, [r5, #0]
 800fd12:	f04f 30ff 	mov.w	r0, #4294967295
 800fd16:	b01d      	add	sp, #116	; 0x74
 800fd18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd1c:	b002      	add	sp, #8
 800fd1e:	4770      	bx	lr
 800fd20:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fd24:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd28:	bf14      	ite	ne
 800fd2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd2e:	4623      	moveq	r3, r4
 800fd30:	9304      	str	r3, [sp, #16]
 800fd32:	9307      	str	r3, [sp, #28]
 800fd34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd38:	9002      	str	r0, [sp, #8]
 800fd3a:	9006      	str	r0, [sp, #24]
 800fd3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fd42:	ab21      	add	r3, sp, #132	; 0x84
 800fd44:	a902      	add	r1, sp, #8
 800fd46:	4628      	mov	r0, r5
 800fd48:	9301      	str	r3, [sp, #4]
 800fd4a:	f002 fa83 	bl	8012254 <_svfiprintf_r>
 800fd4e:	1c43      	adds	r3, r0, #1
 800fd50:	bfbc      	itt	lt
 800fd52:	238b      	movlt	r3, #139	; 0x8b
 800fd54:	602b      	strlt	r3, [r5, #0]
 800fd56:	2c00      	cmp	r4, #0
 800fd58:	d0dd      	beq.n	800fd16 <sniprintf+0x16>
 800fd5a:	9b02      	ldr	r3, [sp, #8]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	701a      	strb	r2, [r3, #0]
 800fd60:	e7d9      	b.n	800fd16 <sniprintf+0x16>
 800fd62:	bf00      	nop
 800fd64:	20000160 	.word	0x20000160

0800fd68 <__sread>:
 800fd68:	b510      	push	{r4, lr}
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd70:	f002 fe5e 	bl	8012a30 <_read_r>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	bfab      	itete	ge
 800fd78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd7a:	89a3      	ldrhlt	r3, [r4, #12]
 800fd7c:	181b      	addge	r3, r3, r0
 800fd7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd82:	bfac      	ite	ge
 800fd84:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd86:	81a3      	strhlt	r3, [r4, #12]
 800fd88:	bd10      	pop	{r4, pc}

0800fd8a <__swrite>:
 800fd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8e:	461f      	mov	r7, r3
 800fd90:	898b      	ldrh	r3, [r1, #12]
 800fd92:	05db      	lsls	r3, r3, #23
 800fd94:	4605      	mov	r5, r0
 800fd96:	460c      	mov	r4, r1
 800fd98:	4616      	mov	r6, r2
 800fd9a:	d505      	bpl.n	800fda8 <__swrite+0x1e>
 800fd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fda0:	2302      	movs	r3, #2
 800fda2:	2200      	movs	r2, #0
 800fda4:	f001 fc76 	bl	8011694 <_lseek_r>
 800fda8:	89a3      	ldrh	r3, [r4, #12]
 800fdaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fdb2:	81a3      	strh	r3, [r4, #12]
 800fdb4:	4632      	mov	r2, r6
 800fdb6:	463b      	mov	r3, r7
 800fdb8:	4628      	mov	r0, r5
 800fdba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdbe:	f000 beaf 	b.w	8010b20 <_write_r>

0800fdc2 <__sseek>:
 800fdc2:	b510      	push	{r4, lr}
 800fdc4:	460c      	mov	r4, r1
 800fdc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdca:	f001 fc63 	bl	8011694 <_lseek_r>
 800fdce:	1c43      	adds	r3, r0, #1
 800fdd0:	89a3      	ldrh	r3, [r4, #12]
 800fdd2:	bf15      	itete	ne
 800fdd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fdd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fdda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fdde:	81a3      	strheq	r3, [r4, #12]
 800fde0:	bf18      	it	ne
 800fde2:	81a3      	strhne	r3, [r4, #12]
 800fde4:	bd10      	pop	{r4, pc}

0800fde6 <__sclose>:
 800fde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdea:	f000 bf19 	b.w	8010c20 <_close_r>

0800fdee <strncmp>:
 800fdee:	b510      	push	{r4, lr}
 800fdf0:	b16a      	cbz	r2, 800fe0e <strncmp+0x20>
 800fdf2:	3901      	subs	r1, #1
 800fdf4:	1884      	adds	r4, r0, r2
 800fdf6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fdfa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d103      	bne.n	800fe0a <strncmp+0x1c>
 800fe02:	42a0      	cmp	r0, r4
 800fe04:	d001      	beq.n	800fe0a <strncmp+0x1c>
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d1f5      	bne.n	800fdf6 <strncmp+0x8>
 800fe0a:	1a98      	subs	r0, r3, r2
 800fe0c:	bd10      	pop	{r4, pc}
 800fe0e:	4610      	mov	r0, r2
 800fe10:	e7fc      	b.n	800fe0c <strncmp+0x1e>

0800fe12 <sulp>:
 800fe12:	b570      	push	{r4, r5, r6, lr}
 800fe14:	4604      	mov	r4, r0
 800fe16:	460d      	mov	r5, r1
 800fe18:	ec45 4b10 	vmov	d0, r4, r5
 800fe1c:	4616      	mov	r6, r2
 800fe1e:	f002 f839 	bl	8011e94 <__ulp>
 800fe22:	ec51 0b10 	vmov	r0, r1, d0
 800fe26:	b17e      	cbz	r6, 800fe48 <sulp+0x36>
 800fe28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fe2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	dd09      	ble.n	800fe48 <sulp+0x36>
 800fe34:	051b      	lsls	r3, r3, #20
 800fe36:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fe3a:	2400      	movs	r4, #0
 800fe3c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fe40:	4622      	mov	r2, r4
 800fe42:	462b      	mov	r3, r5
 800fe44:	f7f0 fbf0 	bl	8000628 <__aeabi_dmul>
 800fe48:	bd70      	pop	{r4, r5, r6, pc}
 800fe4a:	0000      	movs	r0, r0
 800fe4c:	0000      	movs	r0, r0
	...

0800fe50 <_strtod_l>:
 800fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe54:	b0a3      	sub	sp, #140	; 0x8c
 800fe56:	461f      	mov	r7, r3
 800fe58:	2300      	movs	r3, #0
 800fe5a:	931e      	str	r3, [sp, #120]	; 0x78
 800fe5c:	4ba4      	ldr	r3, [pc, #656]	; (80100f0 <_strtod_l+0x2a0>)
 800fe5e:	9219      	str	r2, [sp, #100]	; 0x64
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	9307      	str	r3, [sp, #28]
 800fe64:	4604      	mov	r4, r0
 800fe66:	4618      	mov	r0, r3
 800fe68:	4688      	mov	r8, r1
 800fe6a:	f7f0 f9c3 	bl	80001f4 <strlen>
 800fe6e:	f04f 0a00 	mov.w	sl, #0
 800fe72:	4605      	mov	r5, r0
 800fe74:	f04f 0b00 	mov.w	fp, #0
 800fe78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fe7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fe7e:	781a      	ldrb	r2, [r3, #0]
 800fe80:	2a2b      	cmp	r2, #43	; 0x2b
 800fe82:	d04c      	beq.n	800ff1e <_strtod_l+0xce>
 800fe84:	d839      	bhi.n	800fefa <_strtod_l+0xaa>
 800fe86:	2a0d      	cmp	r2, #13
 800fe88:	d832      	bhi.n	800fef0 <_strtod_l+0xa0>
 800fe8a:	2a08      	cmp	r2, #8
 800fe8c:	d832      	bhi.n	800fef4 <_strtod_l+0xa4>
 800fe8e:	2a00      	cmp	r2, #0
 800fe90:	d03c      	beq.n	800ff0c <_strtod_l+0xbc>
 800fe92:	2300      	movs	r3, #0
 800fe94:	930e      	str	r3, [sp, #56]	; 0x38
 800fe96:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fe98:	7833      	ldrb	r3, [r6, #0]
 800fe9a:	2b30      	cmp	r3, #48	; 0x30
 800fe9c:	f040 80b4 	bne.w	8010008 <_strtod_l+0x1b8>
 800fea0:	7873      	ldrb	r3, [r6, #1]
 800fea2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fea6:	2b58      	cmp	r3, #88	; 0x58
 800fea8:	d16c      	bne.n	800ff84 <_strtod_l+0x134>
 800feaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800feac:	9301      	str	r3, [sp, #4]
 800feae:	ab1e      	add	r3, sp, #120	; 0x78
 800feb0:	9702      	str	r7, [sp, #8]
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	4a8f      	ldr	r2, [pc, #572]	; (80100f4 <_strtod_l+0x2a4>)
 800feb6:	ab1f      	add	r3, sp, #124	; 0x7c
 800feb8:	a91d      	add	r1, sp, #116	; 0x74
 800feba:	4620      	mov	r0, r4
 800febc:	f001 f8de 	bl	801107c <__gethex>
 800fec0:	f010 0707 	ands.w	r7, r0, #7
 800fec4:	4605      	mov	r5, r0
 800fec6:	d005      	beq.n	800fed4 <_strtod_l+0x84>
 800fec8:	2f06      	cmp	r7, #6
 800feca:	d12a      	bne.n	800ff22 <_strtod_l+0xd2>
 800fecc:	3601      	adds	r6, #1
 800fece:	2300      	movs	r3, #0
 800fed0:	961d      	str	r6, [sp, #116]	; 0x74
 800fed2:	930e      	str	r3, [sp, #56]	; 0x38
 800fed4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f040 8596 	bne.w	8010a08 <_strtod_l+0xbb8>
 800fedc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fede:	b1db      	cbz	r3, 800ff18 <_strtod_l+0xc8>
 800fee0:	4652      	mov	r2, sl
 800fee2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fee6:	ec43 2b10 	vmov	d0, r2, r3
 800feea:	b023      	add	sp, #140	; 0x8c
 800feec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef0:	2a20      	cmp	r2, #32
 800fef2:	d1ce      	bne.n	800fe92 <_strtod_l+0x42>
 800fef4:	3301      	adds	r3, #1
 800fef6:	931d      	str	r3, [sp, #116]	; 0x74
 800fef8:	e7c0      	b.n	800fe7c <_strtod_l+0x2c>
 800fefa:	2a2d      	cmp	r2, #45	; 0x2d
 800fefc:	d1c9      	bne.n	800fe92 <_strtod_l+0x42>
 800fefe:	2201      	movs	r2, #1
 800ff00:	920e      	str	r2, [sp, #56]	; 0x38
 800ff02:	1c5a      	adds	r2, r3, #1
 800ff04:	921d      	str	r2, [sp, #116]	; 0x74
 800ff06:	785b      	ldrb	r3, [r3, #1]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d1c4      	bne.n	800fe96 <_strtod_l+0x46>
 800ff0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff0e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f040 8576 	bne.w	8010a04 <_strtod_l+0xbb4>
 800ff18:	4652      	mov	r2, sl
 800ff1a:	465b      	mov	r3, fp
 800ff1c:	e7e3      	b.n	800fee6 <_strtod_l+0x96>
 800ff1e:	2200      	movs	r2, #0
 800ff20:	e7ee      	b.n	800ff00 <_strtod_l+0xb0>
 800ff22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ff24:	b13a      	cbz	r2, 800ff36 <_strtod_l+0xe6>
 800ff26:	2135      	movs	r1, #53	; 0x35
 800ff28:	a820      	add	r0, sp, #128	; 0x80
 800ff2a:	f002 f8be 	bl	80120aa <__copybits>
 800ff2e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ff30:	4620      	mov	r0, r4
 800ff32:	f001 fc83 	bl	801183c <_Bfree>
 800ff36:	3f01      	subs	r7, #1
 800ff38:	2f05      	cmp	r7, #5
 800ff3a:	d807      	bhi.n	800ff4c <_strtod_l+0xfc>
 800ff3c:	e8df f007 	tbb	[pc, r7]
 800ff40:	1d180b0e 	.word	0x1d180b0e
 800ff44:	030e      	.short	0x030e
 800ff46:	f04f 0b00 	mov.w	fp, #0
 800ff4a:	46da      	mov	sl, fp
 800ff4c:	0728      	lsls	r0, r5, #28
 800ff4e:	d5c1      	bpl.n	800fed4 <_strtod_l+0x84>
 800ff50:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ff54:	e7be      	b.n	800fed4 <_strtod_l+0x84>
 800ff56:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800ff5a:	e7f7      	b.n	800ff4c <_strtod_l+0xfc>
 800ff5c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ff60:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ff62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ff66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ff6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ff6e:	e7ed      	b.n	800ff4c <_strtod_l+0xfc>
 800ff70:	f8df b184 	ldr.w	fp, [pc, #388]	; 80100f8 <_strtod_l+0x2a8>
 800ff74:	f04f 0a00 	mov.w	sl, #0
 800ff78:	e7e8      	b.n	800ff4c <_strtod_l+0xfc>
 800ff7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ff7e:	f04f 3aff 	mov.w	sl, #4294967295
 800ff82:	e7e3      	b.n	800ff4c <_strtod_l+0xfc>
 800ff84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ff86:	1c5a      	adds	r2, r3, #1
 800ff88:	921d      	str	r2, [sp, #116]	; 0x74
 800ff8a:	785b      	ldrb	r3, [r3, #1]
 800ff8c:	2b30      	cmp	r3, #48	; 0x30
 800ff8e:	d0f9      	beq.n	800ff84 <_strtod_l+0x134>
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d09f      	beq.n	800fed4 <_strtod_l+0x84>
 800ff94:	2301      	movs	r3, #1
 800ff96:	f04f 0900 	mov.w	r9, #0
 800ff9a:	9304      	str	r3, [sp, #16]
 800ff9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ff9e:	930a      	str	r3, [sp, #40]	; 0x28
 800ffa0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ffa4:	464f      	mov	r7, r9
 800ffa6:	220a      	movs	r2, #10
 800ffa8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ffaa:	7806      	ldrb	r6, [r0, #0]
 800ffac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ffb0:	b2d9      	uxtb	r1, r3
 800ffb2:	2909      	cmp	r1, #9
 800ffb4:	d92a      	bls.n	801000c <_strtod_l+0x1bc>
 800ffb6:	9907      	ldr	r1, [sp, #28]
 800ffb8:	462a      	mov	r2, r5
 800ffba:	f7ff ff18 	bl	800fdee <strncmp>
 800ffbe:	b398      	cbz	r0, 8010028 <_strtod_l+0x1d8>
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	4633      	mov	r3, r6
 800ffc4:	463d      	mov	r5, r7
 800ffc6:	9007      	str	r0, [sp, #28]
 800ffc8:	4602      	mov	r2, r0
 800ffca:	2b65      	cmp	r3, #101	; 0x65
 800ffcc:	d001      	beq.n	800ffd2 <_strtod_l+0x182>
 800ffce:	2b45      	cmp	r3, #69	; 0x45
 800ffd0:	d118      	bne.n	8010004 <_strtod_l+0x1b4>
 800ffd2:	b91d      	cbnz	r5, 800ffdc <_strtod_l+0x18c>
 800ffd4:	9b04      	ldr	r3, [sp, #16]
 800ffd6:	4303      	orrs	r3, r0
 800ffd8:	d098      	beq.n	800ff0c <_strtod_l+0xbc>
 800ffda:	2500      	movs	r5, #0
 800ffdc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ffe0:	f108 0301 	add.w	r3, r8, #1
 800ffe4:	931d      	str	r3, [sp, #116]	; 0x74
 800ffe6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ffea:	2b2b      	cmp	r3, #43	; 0x2b
 800ffec:	d075      	beq.n	80100da <_strtod_l+0x28a>
 800ffee:	2b2d      	cmp	r3, #45	; 0x2d
 800fff0:	d07b      	beq.n	80100ea <_strtod_l+0x29a>
 800fff2:	f04f 0c00 	mov.w	ip, #0
 800fff6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fffa:	2909      	cmp	r1, #9
 800fffc:	f240 8082 	bls.w	8010104 <_strtod_l+0x2b4>
 8010000:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010004:	2600      	movs	r6, #0
 8010006:	e09d      	b.n	8010144 <_strtod_l+0x2f4>
 8010008:	2300      	movs	r3, #0
 801000a:	e7c4      	b.n	800ff96 <_strtod_l+0x146>
 801000c:	2f08      	cmp	r7, #8
 801000e:	bfd8      	it	le
 8010010:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010012:	f100 0001 	add.w	r0, r0, #1
 8010016:	bfda      	itte	le
 8010018:	fb02 3301 	mlale	r3, r2, r1, r3
 801001c:	9309      	strle	r3, [sp, #36]	; 0x24
 801001e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010022:	3701      	adds	r7, #1
 8010024:	901d      	str	r0, [sp, #116]	; 0x74
 8010026:	e7bf      	b.n	800ffa8 <_strtod_l+0x158>
 8010028:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801002a:	195a      	adds	r2, r3, r5
 801002c:	921d      	str	r2, [sp, #116]	; 0x74
 801002e:	5d5b      	ldrb	r3, [r3, r5]
 8010030:	2f00      	cmp	r7, #0
 8010032:	d037      	beq.n	80100a4 <_strtod_l+0x254>
 8010034:	9007      	str	r0, [sp, #28]
 8010036:	463d      	mov	r5, r7
 8010038:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801003c:	2a09      	cmp	r2, #9
 801003e:	d912      	bls.n	8010066 <_strtod_l+0x216>
 8010040:	2201      	movs	r2, #1
 8010042:	e7c2      	b.n	800ffca <_strtod_l+0x17a>
 8010044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010046:	1c5a      	adds	r2, r3, #1
 8010048:	921d      	str	r2, [sp, #116]	; 0x74
 801004a:	785b      	ldrb	r3, [r3, #1]
 801004c:	3001      	adds	r0, #1
 801004e:	2b30      	cmp	r3, #48	; 0x30
 8010050:	d0f8      	beq.n	8010044 <_strtod_l+0x1f4>
 8010052:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010056:	2a08      	cmp	r2, #8
 8010058:	f200 84db 	bhi.w	8010a12 <_strtod_l+0xbc2>
 801005c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801005e:	9007      	str	r0, [sp, #28]
 8010060:	2000      	movs	r0, #0
 8010062:	920a      	str	r2, [sp, #40]	; 0x28
 8010064:	4605      	mov	r5, r0
 8010066:	3b30      	subs	r3, #48	; 0x30
 8010068:	f100 0201 	add.w	r2, r0, #1
 801006c:	d014      	beq.n	8010098 <_strtod_l+0x248>
 801006e:	9907      	ldr	r1, [sp, #28]
 8010070:	4411      	add	r1, r2
 8010072:	9107      	str	r1, [sp, #28]
 8010074:	462a      	mov	r2, r5
 8010076:	eb00 0e05 	add.w	lr, r0, r5
 801007a:	210a      	movs	r1, #10
 801007c:	4572      	cmp	r2, lr
 801007e:	d113      	bne.n	80100a8 <_strtod_l+0x258>
 8010080:	182a      	adds	r2, r5, r0
 8010082:	2a08      	cmp	r2, #8
 8010084:	f105 0501 	add.w	r5, r5, #1
 8010088:	4405      	add	r5, r0
 801008a:	dc1c      	bgt.n	80100c6 <_strtod_l+0x276>
 801008c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801008e:	220a      	movs	r2, #10
 8010090:	fb02 3301 	mla	r3, r2, r1, r3
 8010094:	9309      	str	r3, [sp, #36]	; 0x24
 8010096:	2200      	movs	r2, #0
 8010098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801009a:	1c59      	adds	r1, r3, #1
 801009c:	911d      	str	r1, [sp, #116]	; 0x74
 801009e:	785b      	ldrb	r3, [r3, #1]
 80100a0:	4610      	mov	r0, r2
 80100a2:	e7c9      	b.n	8010038 <_strtod_l+0x1e8>
 80100a4:	4638      	mov	r0, r7
 80100a6:	e7d2      	b.n	801004e <_strtod_l+0x1fe>
 80100a8:	2a08      	cmp	r2, #8
 80100aa:	dc04      	bgt.n	80100b6 <_strtod_l+0x266>
 80100ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80100ae:	434e      	muls	r6, r1
 80100b0:	9609      	str	r6, [sp, #36]	; 0x24
 80100b2:	3201      	adds	r2, #1
 80100b4:	e7e2      	b.n	801007c <_strtod_l+0x22c>
 80100b6:	f102 0c01 	add.w	ip, r2, #1
 80100ba:	f1bc 0f10 	cmp.w	ip, #16
 80100be:	bfd8      	it	le
 80100c0:	fb01 f909 	mulle.w	r9, r1, r9
 80100c4:	e7f5      	b.n	80100b2 <_strtod_l+0x262>
 80100c6:	2d10      	cmp	r5, #16
 80100c8:	bfdc      	itt	le
 80100ca:	220a      	movle	r2, #10
 80100cc:	fb02 3909 	mlale	r9, r2, r9, r3
 80100d0:	e7e1      	b.n	8010096 <_strtod_l+0x246>
 80100d2:	2300      	movs	r3, #0
 80100d4:	9307      	str	r3, [sp, #28]
 80100d6:	2201      	movs	r2, #1
 80100d8:	e77c      	b.n	800ffd4 <_strtod_l+0x184>
 80100da:	f04f 0c00 	mov.w	ip, #0
 80100de:	f108 0302 	add.w	r3, r8, #2
 80100e2:	931d      	str	r3, [sp, #116]	; 0x74
 80100e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80100e8:	e785      	b.n	800fff6 <_strtod_l+0x1a6>
 80100ea:	f04f 0c01 	mov.w	ip, #1
 80100ee:	e7f6      	b.n	80100de <_strtod_l+0x28e>
 80100f0:	08014814 	.word	0x08014814
 80100f4:	080146e4 	.word	0x080146e4
 80100f8:	7ff00000 	.word	0x7ff00000
 80100fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80100fe:	1c59      	adds	r1, r3, #1
 8010100:	911d      	str	r1, [sp, #116]	; 0x74
 8010102:	785b      	ldrb	r3, [r3, #1]
 8010104:	2b30      	cmp	r3, #48	; 0x30
 8010106:	d0f9      	beq.n	80100fc <_strtod_l+0x2ac>
 8010108:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801010c:	2908      	cmp	r1, #8
 801010e:	f63f af79 	bhi.w	8010004 <_strtod_l+0x1b4>
 8010112:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010116:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010118:	9308      	str	r3, [sp, #32]
 801011a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801011c:	1c59      	adds	r1, r3, #1
 801011e:	911d      	str	r1, [sp, #116]	; 0x74
 8010120:	785b      	ldrb	r3, [r3, #1]
 8010122:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010126:	2e09      	cmp	r6, #9
 8010128:	d937      	bls.n	801019a <_strtod_l+0x34a>
 801012a:	9e08      	ldr	r6, [sp, #32]
 801012c:	1b89      	subs	r1, r1, r6
 801012e:	2908      	cmp	r1, #8
 8010130:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010134:	dc02      	bgt.n	801013c <_strtod_l+0x2ec>
 8010136:	4576      	cmp	r6, lr
 8010138:	bfa8      	it	ge
 801013a:	4676      	movge	r6, lr
 801013c:	f1bc 0f00 	cmp.w	ip, #0
 8010140:	d000      	beq.n	8010144 <_strtod_l+0x2f4>
 8010142:	4276      	negs	r6, r6
 8010144:	2d00      	cmp	r5, #0
 8010146:	d14f      	bne.n	80101e8 <_strtod_l+0x398>
 8010148:	9904      	ldr	r1, [sp, #16]
 801014a:	4301      	orrs	r1, r0
 801014c:	f47f aec2 	bne.w	800fed4 <_strtod_l+0x84>
 8010150:	2a00      	cmp	r2, #0
 8010152:	f47f aedb 	bne.w	800ff0c <_strtod_l+0xbc>
 8010156:	2b69      	cmp	r3, #105	; 0x69
 8010158:	d027      	beq.n	80101aa <_strtod_l+0x35a>
 801015a:	dc24      	bgt.n	80101a6 <_strtod_l+0x356>
 801015c:	2b49      	cmp	r3, #73	; 0x49
 801015e:	d024      	beq.n	80101aa <_strtod_l+0x35a>
 8010160:	2b4e      	cmp	r3, #78	; 0x4e
 8010162:	f47f aed3 	bne.w	800ff0c <_strtod_l+0xbc>
 8010166:	499e      	ldr	r1, [pc, #632]	; (80103e0 <_strtod_l+0x590>)
 8010168:	a81d      	add	r0, sp, #116	; 0x74
 801016a:	f001 f9df 	bl	801152c <__match>
 801016e:	2800      	cmp	r0, #0
 8010170:	f43f aecc 	beq.w	800ff0c <_strtod_l+0xbc>
 8010174:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	2b28      	cmp	r3, #40	; 0x28
 801017a:	d12d      	bne.n	80101d8 <_strtod_l+0x388>
 801017c:	4999      	ldr	r1, [pc, #612]	; (80103e4 <_strtod_l+0x594>)
 801017e:	aa20      	add	r2, sp, #128	; 0x80
 8010180:	a81d      	add	r0, sp, #116	; 0x74
 8010182:	f001 f9e7 	bl	8011554 <__hexnan>
 8010186:	2805      	cmp	r0, #5
 8010188:	d126      	bne.n	80101d8 <_strtod_l+0x388>
 801018a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801018c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010190:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010194:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010198:	e69c      	b.n	800fed4 <_strtod_l+0x84>
 801019a:	210a      	movs	r1, #10
 801019c:	fb01 3e0e 	mla	lr, r1, lr, r3
 80101a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80101a4:	e7b9      	b.n	801011a <_strtod_l+0x2ca>
 80101a6:	2b6e      	cmp	r3, #110	; 0x6e
 80101a8:	e7db      	b.n	8010162 <_strtod_l+0x312>
 80101aa:	498f      	ldr	r1, [pc, #572]	; (80103e8 <_strtod_l+0x598>)
 80101ac:	a81d      	add	r0, sp, #116	; 0x74
 80101ae:	f001 f9bd 	bl	801152c <__match>
 80101b2:	2800      	cmp	r0, #0
 80101b4:	f43f aeaa 	beq.w	800ff0c <_strtod_l+0xbc>
 80101b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80101ba:	498c      	ldr	r1, [pc, #560]	; (80103ec <_strtod_l+0x59c>)
 80101bc:	3b01      	subs	r3, #1
 80101be:	a81d      	add	r0, sp, #116	; 0x74
 80101c0:	931d      	str	r3, [sp, #116]	; 0x74
 80101c2:	f001 f9b3 	bl	801152c <__match>
 80101c6:	b910      	cbnz	r0, 80101ce <_strtod_l+0x37e>
 80101c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80101ca:	3301      	adds	r3, #1
 80101cc:	931d      	str	r3, [sp, #116]	; 0x74
 80101ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80103fc <_strtod_l+0x5ac>
 80101d2:	f04f 0a00 	mov.w	sl, #0
 80101d6:	e67d      	b.n	800fed4 <_strtod_l+0x84>
 80101d8:	4885      	ldr	r0, [pc, #532]	; (80103f0 <_strtod_l+0x5a0>)
 80101da:	f002 fc3d 	bl	8012a58 <nan>
 80101de:	ed8d 0b04 	vstr	d0, [sp, #16]
 80101e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80101e6:	e675      	b.n	800fed4 <_strtod_l+0x84>
 80101e8:	9b07      	ldr	r3, [sp, #28]
 80101ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101ec:	1af3      	subs	r3, r6, r3
 80101ee:	2f00      	cmp	r7, #0
 80101f0:	bf08      	it	eq
 80101f2:	462f      	moveq	r7, r5
 80101f4:	2d10      	cmp	r5, #16
 80101f6:	9308      	str	r3, [sp, #32]
 80101f8:	46a8      	mov	r8, r5
 80101fa:	bfa8      	it	ge
 80101fc:	f04f 0810 	movge.w	r8, #16
 8010200:	f7f0 f998 	bl	8000534 <__aeabi_ui2d>
 8010204:	2d09      	cmp	r5, #9
 8010206:	4682      	mov	sl, r0
 8010208:	468b      	mov	fp, r1
 801020a:	dd13      	ble.n	8010234 <_strtod_l+0x3e4>
 801020c:	4b79      	ldr	r3, [pc, #484]	; (80103f4 <_strtod_l+0x5a4>)
 801020e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010212:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010216:	f7f0 fa07 	bl	8000628 <__aeabi_dmul>
 801021a:	4682      	mov	sl, r0
 801021c:	4648      	mov	r0, r9
 801021e:	468b      	mov	fp, r1
 8010220:	f7f0 f988 	bl	8000534 <__aeabi_ui2d>
 8010224:	4602      	mov	r2, r0
 8010226:	460b      	mov	r3, r1
 8010228:	4650      	mov	r0, sl
 801022a:	4659      	mov	r1, fp
 801022c:	f7f0 f846 	bl	80002bc <__adddf3>
 8010230:	4682      	mov	sl, r0
 8010232:	468b      	mov	fp, r1
 8010234:	2d0f      	cmp	r5, #15
 8010236:	dc38      	bgt.n	80102aa <_strtod_l+0x45a>
 8010238:	9b08      	ldr	r3, [sp, #32]
 801023a:	2b00      	cmp	r3, #0
 801023c:	f43f ae4a 	beq.w	800fed4 <_strtod_l+0x84>
 8010240:	dd24      	ble.n	801028c <_strtod_l+0x43c>
 8010242:	2b16      	cmp	r3, #22
 8010244:	dc0b      	bgt.n	801025e <_strtod_l+0x40e>
 8010246:	4d6b      	ldr	r5, [pc, #428]	; (80103f4 <_strtod_l+0x5a4>)
 8010248:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801024c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010250:	4652      	mov	r2, sl
 8010252:	465b      	mov	r3, fp
 8010254:	f7f0 f9e8 	bl	8000628 <__aeabi_dmul>
 8010258:	4682      	mov	sl, r0
 801025a:	468b      	mov	fp, r1
 801025c:	e63a      	b.n	800fed4 <_strtod_l+0x84>
 801025e:	9a08      	ldr	r2, [sp, #32]
 8010260:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010264:	4293      	cmp	r3, r2
 8010266:	db20      	blt.n	80102aa <_strtod_l+0x45a>
 8010268:	4c62      	ldr	r4, [pc, #392]	; (80103f4 <_strtod_l+0x5a4>)
 801026a:	f1c5 050f 	rsb	r5, r5, #15
 801026e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010272:	4652      	mov	r2, sl
 8010274:	465b      	mov	r3, fp
 8010276:	e9d1 0100 	ldrd	r0, r1, [r1]
 801027a:	f7f0 f9d5 	bl	8000628 <__aeabi_dmul>
 801027e:	9b08      	ldr	r3, [sp, #32]
 8010280:	1b5d      	subs	r5, r3, r5
 8010282:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010286:	e9d4 2300 	ldrd	r2, r3, [r4]
 801028a:	e7e3      	b.n	8010254 <_strtod_l+0x404>
 801028c:	9b08      	ldr	r3, [sp, #32]
 801028e:	3316      	adds	r3, #22
 8010290:	db0b      	blt.n	80102aa <_strtod_l+0x45a>
 8010292:	9b07      	ldr	r3, [sp, #28]
 8010294:	4a57      	ldr	r2, [pc, #348]	; (80103f4 <_strtod_l+0x5a4>)
 8010296:	1b9e      	subs	r6, r3, r6
 8010298:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801029c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80102a0:	4650      	mov	r0, sl
 80102a2:	4659      	mov	r1, fp
 80102a4:	f7f0 faea 	bl	800087c <__aeabi_ddiv>
 80102a8:	e7d6      	b.n	8010258 <_strtod_l+0x408>
 80102aa:	9b08      	ldr	r3, [sp, #32]
 80102ac:	eba5 0808 	sub.w	r8, r5, r8
 80102b0:	4498      	add	r8, r3
 80102b2:	f1b8 0f00 	cmp.w	r8, #0
 80102b6:	dd71      	ble.n	801039c <_strtod_l+0x54c>
 80102b8:	f018 030f 	ands.w	r3, r8, #15
 80102bc:	d00a      	beq.n	80102d4 <_strtod_l+0x484>
 80102be:	494d      	ldr	r1, [pc, #308]	; (80103f4 <_strtod_l+0x5a4>)
 80102c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80102c4:	4652      	mov	r2, sl
 80102c6:	465b      	mov	r3, fp
 80102c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102cc:	f7f0 f9ac 	bl	8000628 <__aeabi_dmul>
 80102d0:	4682      	mov	sl, r0
 80102d2:	468b      	mov	fp, r1
 80102d4:	f038 080f 	bics.w	r8, r8, #15
 80102d8:	d04d      	beq.n	8010376 <_strtod_l+0x526>
 80102da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80102de:	dd22      	ble.n	8010326 <_strtod_l+0x4d6>
 80102e0:	2500      	movs	r5, #0
 80102e2:	462e      	mov	r6, r5
 80102e4:	9509      	str	r5, [sp, #36]	; 0x24
 80102e6:	9507      	str	r5, [sp, #28]
 80102e8:	2322      	movs	r3, #34	; 0x22
 80102ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 80103fc <_strtod_l+0x5ac>
 80102ee:	6023      	str	r3, [r4, #0]
 80102f0:	f04f 0a00 	mov.w	sl, #0
 80102f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	f43f adec 	beq.w	800fed4 <_strtod_l+0x84>
 80102fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80102fe:	4620      	mov	r0, r4
 8010300:	f001 fa9c 	bl	801183c <_Bfree>
 8010304:	9907      	ldr	r1, [sp, #28]
 8010306:	4620      	mov	r0, r4
 8010308:	f001 fa98 	bl	801183c <_Bfree>
 801030c:	4631      	mov	r1, r6
 801030e:	4620      	mov	r0, r4
 8010310:	f001 fa94 	bl	801183c <_Bfree>
 8010314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010316:	4620      	mov	r0, r4
 8010318:	f001 fa90 	bl	801183c <_Bfree>
 801031c:	4629      	mov	r1, r5
 801031e:	4620      	mov	r0, r4
 8010320:	f001 fa8c 	bl	801183c <_Bfree>
 8010324:	e5d6      	b.n	800fed4 <_strtod_l+0x84>
 8010326:	2300      	movs	r3, #0
 8010328:	ea4f 1828 	mov.w	r8, r8, asr #4
 801032c:	4650      	mov	r0, sl
 801032e:	4659      	mov	r1, fp
 8010330:	4699      	mov	r9, r3
 8010332:	f1b8 0f01 	cmp.w	r8, #1
 8010336:	dc21      	bgt.n	801037c <_strtod_l+0x52c>
 8010338:	b10b      	cbz	r3, 801033e <_strtod_l+0x4ee>
 801033a:	4682      	mov	sl, r0
 801033c:	468b      	mov	fp, r1
 801033e:	4b2e      	ldr	r3, [pc, #184]	; (80103f8 <_strtod_l+0x5a8>)
 8010340:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010344:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010348:	4652      	mov	r2, sl
 801034a:	465b      	mov	r3, fp
 801034c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010350:	f7f0 f96a 	bl	8000628 <__aeabi_dmul>
 8010354:	4b29      	ldr	r3, [pc, #164]	; (80103fc <_strtod_l+0x5ac>)
 8010356:	460a      	mov	r2, r1
 8010358:	400b      	ands	r3, r1
 801035a:	4929      	ldr	r1, [pc, #164]	; (8010400 <_strtod_l+0x5b0>)
 801035c:	428b      	cmp	r3, r1
 801035e:	4682      	mov	sl, r0
 8010360:	d8be      	bhi.n	80102e0 <_strtod_l+0x490>
 8010362:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010366:	428b      	cmp	r3, r1
 8010368:	bf86      	itte	hi
 801036a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010404 <_strtod_l+0x5b4>
 801036e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010372:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010376:	2300      	movs	r3, #0
 8010378:	9304      	str	r3, [sp, #16]
 801037a:	e081      	b.n	8010480 <_strtod_l+0x630>
 801037c:	f018 0f01 	tst.w	r8, #1
 8010380:	d007      	beq.n	8010392 <_strtod_l+0x542>
 8010382:	4b1d      	ldr	r3, [pc, #116]	; (80103f8 <_strtod_l+0x5a8>)
 8010384:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038c:	f7f0 f94c 	bl	8000628 <__aeabi_dmul>
 8010390:	2301      	movs	r3, #1
 8010392:	f109 0901 	add.w	r9, r9, #1
 8010396:	ea4f 0868 	mov.w	r8, r8, asr #1
 801039a:	e7ca      	b.n	8010332 <_strtod_l+0x4e2>
 801039c:	d0eb      	beq.n	8010376 <_strtod_l+0x526>
 801039e:	f1c8 0800 	rsb	r8, r8, #0
 80103a2:	f018 020f 	ands.w	r2, r8, #15
 80103a6:	d00a      	beq.n	80103be <_strtod_l+0x56e>
 80103a8:	4b12      	ldr	r3, [pc, #72]	; (80103f4 <_strtod_l+0x5a4>)
 80103aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103ae:	4650      	mov	r0, sl
 80103b0:	4659      	mov	r1, fp
 80103b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b6:	f7f0 fa61 	bl	800087c <__aeabi_ddiv>
 80103ba:	4682      	mov	sl, r0
 80103bc:	468b      	mov	fp, r1
 80103be:	ea5f 1828 	movs.w	r8, r8, asr #4
 80103c2:	d0d8      	beq.n	8010376 <_strtod_l+0x526>
 80103c4:	f1b8 0f1f 	cmp.w	r8, #31
 80103c8:	dd1e      	ble.n	8010408 <_strtod_l+0x5b8>
 80103ca:	2500      	movs	r5, #0
 80103cc:	462e      	mov	r6, r5
 80103ce:	9509      	str	r5, [sp, #36]	; 0x24
 80103d0:	9507      	str	r5, [sp, #28]
 80103d2:	2322      	movs	r3, #34	; 0x22
 80103d4:	f04f 0a00 	mov.w	sl, #0
 80103d8:	f04f 0b00 	mov.w	fp, #0
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	e789      	b.n	80102f4 <_strtod_l+0x4a4>
 80103e0:	080146e1 	.word	0x080146e1
 80103e4:	080146f8 	.word	0x080146f8
 80103e8:	080146d8 	.word	0x080146d8
 80103ec:	080146db 	.word	0x080146db
 80103f0:	08014a0a 	.word	0x08014a0a
 80103f4:	080148c8 	.word	0x080148c8
 80103f8:	080148a0 	.word	0x080148a0
 80103fc:	7ff00000 	.word	0x7ff00000
 8010400:	7ca00000 	.word	0x7ca00000
 8010404:	7fefffff 	.word	0x7fefffff
 8010408:	f018 0310 	ands.w	r3, r8, #16
 801040c:	bf18      	it	ne
 801040e:	236a      	movne	r3, #106	; 0x6a
 8010410:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80107c8 <_strtod_l+0x978>
 8010414:	9304      	str	r3, [sp, #16]
 8010416:	4650      	mov	r0, sl
 8010418:	4659      	mov	r1, fp
 801041a:	2300      	movs	r3, #0
 801041c:	f018 0f01 	tst.w	r8, #1
 8010420:	d004      	beq.n	801042c <_strtod_l+0x5dc>
 8010422:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010426:	f7f0 f8ff 	bl	8000628 <__aeabi_dmul>
 801042a:	2301      	movs	r3, #1
 801042c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010430:	f109 0908 	add.w	r9, r9, #8
 8010434:	d1f2      	bne.n	801041c <_strtod_l+0x5cc>
 8010436:	b10b      	cbz	r3, 801043c <_strtod_l+0x5ec>
 8010438:	4682      	mov	sl, r0
 801043a:	468b      	mov	fp, r1
 801043c:	9b04      	ldr	r3, [sp, #16]
 801043e:	b1bb      	cbz	r3, 8010470 <_strtod_l+0x620>
 8010440:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010444:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010448:	2b00      	cmp	r3, #0
 801044a:	4659      	mov	r1, fp
 801044c:	dd10      	ble.n	8010470 <_strtod_l+0x620>
 801044e:	2b1f      	cmp	r3, #31
 8010450:	f340 8128 	ble.w	80106a4 <_strtod_l+0x854>
 8010454:	2b34      	cmp	r3, #52	; 0x34
 8010456:	bfde      	ittt	le
 8010458:	3b20      	suble	r3, #32
 801045a:	f04f 32ff 	movle.w	r2, #4294967295
 801045e:	fa02 f303 	lslle.w	r3, r2, r3
 8010462:	f04f 0a00 	mov.w	sl, #0
 8010466:	bfcc      	ite	gt
 8010468:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801046c:	ea03 0b01 	andle.w	fp, r3, r1
 8010470:	2200      	movs	r2, #0
 8010472:	2300      	movs	r3, #0
 8010474:	4650      	mov	r0, sl
 8010476:	4659      	mov	r1, fp
 8010478:	f7f0 fb3e 	bl	8000af8 <__aeabi_dcmpeq>
 801047c:	2800      	cmp	r0, #0
 801047e:	d1a4      	bne.n	80103ca <_strtod_l+0x57a>
 8010480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010482:	9300      	str	r3, [sp, #0]
 8010484:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010486:	462b      	mov	r3, r5
 8010488:	463a      	mov	r2, r7
 801048a:	4620      	mov	r0, r4
 801048c:	f001 fa42 	bl	8011914 <__s2b>
 8010490:	9009      	str	r0, [sp, #36]	; 0x24
 8010492:	2800      	cmp	r0, #0
 8010494:	f43f af24 	beq.w	80102e0 <_strtod_l+0x490>
 8010498:	9b07      	ldr	r3, [sp, #28]
 801049a:	1b9e      	subs	r6, r3, r6
 801049c:	9b08      	ldr	r3, [sp, #32]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	bfb4      	ite	lt
 80104a2:	4633      	movlt	r3, r6
 80104a4:	2300      	movge	r3, #0
 80104a6:	9310      	str	r3, [sp, #64]	; 0x40
 80104a8:	9b08      	ldr	r3, [sp, #32]
 80104aa:	2500      	movs	r5, #0
 80104ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80104b0:	9318      	str	r3, [sp, #96]	; 0x60
 80104b2:	462e      	mov	r6, r5
 80104b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104b6:	4620      	mov	r0, r4
 80104b8:	6859      	ldr	r1, [r3, #4]
 80104ba:	f001 f97f 	bl	80117bc <_Balloc>
 80104be:	9007      	str	r0, [sp, #28]
 80104c0:	2800      	cmp	r0, #0
 80104c2:	f43f af11 	beq.w	80102e8 <_strtod_l+0x498>
 80104c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104c8:	691a      	ldr	r2, [r3, #16]
 80104ca:	3202      	adds	r2, #2
 80104cc:	f103 010c 	add.w	r1, r3, #12
 80104d0:	0092      	lsls	r2, r2, #2
 80104d2:	300c      	adds	r0, #12
 80104d4:	f7ff fac6 	bl	800fa64 <memcpy>
 80104d8:	ec4b ab10 	vmov	d0, sl, fp
 80104dc:	aa20      	add	r2, sp, #128	; 0x80
 80104de:	a91f      	add	r1, sp, #124	; 0x7c
 80104e0:	4620      	mov	r0, r4
 80104e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80104e6:	f001 fd51 	bl	8011f8c <__d2b>
 80104ea:	901e      	str	r0, [sp, #120]	; 0x78
 80104ec:	2800      	cmp	r0, #0
 80104ee:	f43f aefb 	beq.w	80102e8 <_strtod_l+0x498>
 80104f2:	2101      	movs	r1, #1
 80104f4:	4620      	mov	r0, r4
 80104f6:	f001 faa7 	bl	8011a48 <__i2b>
 80104fa:	4606      	mov	r6, r0
 80104fc:	2800      	cmp	r0, #0
 80104fe:	f43f aef3 	beq.w	80102e8 <_strtod_l+0x498>
 8010502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010504:	9904      	ldr	r1, [sp, #16]
 8010506:	2b00      	cmp	r3, #0
 8010508:	bfab      	itete	ge
 801050a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801050c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801050e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010510:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010514:	bfac      	ite	ge
 8010516:	eb03 0902 	addge.w	r9, r3, r2
 801051a:	1ad7      	sublt	r7, r2, r3
 801051c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801051e:	eba3 0801 	sub.w	r8, r3, r1
 8010522:	4490      	add	r8, r2
 8010524:	4ba3      	ldr	r3, [pc, #652]	; (80107b4 <_strtod_l+0x964>)
 8010526:	f108 38ff 	add.w	r8, r8, #4294967295
 801052a:	4598      	cmp	r8, r3
 801052c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010530:	f280 80cc 	bge.w	80106cc <_strtod_l+0x87c>
 8010534:	eba3 0308 	sub.w	r3, r3, r8
 8010538:	2b1f      	cmp	r3, #31
 801053a:	eba2 0203 	sub.w	r2, r2, r3
 801053e:	f04f 0101 	mov.w	r1, #1
 8010542:	f300 80b6 	bgt.w	80106b2 <_strtod_l+0x862>
 8010546:	fa01 f303 	lsl.w	r3, r1, r3
 801054a:	9311      	str	r3, [sp, #68]	; 0x44
 801054c:	2300      	movs	r3, #0
 801054e:	930c      	str	r3, [sp, #48]	; 0x30
 8010550:	eb09 0802 	add.w	r8, r9, r2
 8010554:	9b04      	ldr	r3, [sp, #16]
 8010556:	45c1      	cmp	r9, r8
 8010558:	4417      	add	r7, r2
 801055a:	441f      	add	r7, r3
 801055c:	464b      	mov	r3, r9
 801055e:	bfa8      	it	ge
 8010560:	4643      	movge	r3, r8
 8010562:	42bb      	cmp	r3, r7
 8010564:	bfa8      	it	ge
 8010566:	463b      	movge	r3, r7
 8010568:	2b00      	cmp	r3, #0
 801056a:	bfc2      	ittt	gt
 801056c:	eba8 0803 	subgt.w	r8, r8, r3
 8010570:	1aff      	subgt	r7, r7, r3
 8010572:	eba9 0903 	subgt.w	r9, r9, r3
 8010576:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010578:	2b00      	cmp	r3, #0
 801057a:	dd17      	ble.n	80105ac <_strtod_l+0x75c>
 801057c:	4631      	mov	r1, r6
 801057e:	461a      	mov	r2, r3
 8010580:	4620      	mov	r0, r4
 8010582:	f001 fb1d 	bl	8011bc0 <__pow5mult>
 8010586:	4606      	mov	r6, r0
 8010588:	2800      	cmp	r0, #0
 801058a:	f43f aead 	beq.w	80102e8 <_strtod_l+0x498>
 801058e:	4601      	mov	r1, r0
 8010590:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010592:	4620      	mov	r0, r4
 8010594:	f001 fa6e 	bl	8011a74 <__multiply>
 8010598:	900f      	str	r0, [sp, #60]	; 0x3c
 801059a:	2800      	cmp	r0, #0
 801059c:	f43f aea4 	beq.w	80102e8 <_strtod_l+0x498>
 80105a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80105a2:	4620      	mov	r0, r4
 80105a4:	f001 f94a 	bl	801183c <_Bfree>
 80105a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80105aa:	931e      	str	r3, [sp, #120]	; 0x78
 80105ac:	f1b8 0f00 	cmp.w	r8, #0
 80105b0:	f300 8091 	bgt.w	80106d6 <_strtod_l+0x886>
 80105b4:	9b08      	ldr	r3, [sp, #32]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	dd08      	ble.n	80105cc <_strtod_l+0x77c>
 80105ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80105bc:	9907      	ldr	r1, [sp, #28]
 80105be:	4620      	mov	r0, r4
 80105c0:	f001 fafe 	bl	8011bc0 <__pow5mult>
 80105c4:	9007      	str	r0, [sp, #28]
 80105c6:	2800      	cmp	r0, #0
 80105c8:	f43f ae8e 	beq.w	80102e8 <_strtod_l+0x498>
 80105cc:	2f00      	cmp	r7, #0
 80105ce:	dd08      	ble.n	80105e2 <_strtod_l+0x792>
 80105d0:	9907      	ldr	r1, [sp, #28]
 80105d2:	463a      	mov	r2, r7
 80105d4:	4620      	mov	r0, r4
 80105d6:	f001 fb4d 	bl	8011c74 <__lshift>
 80105da:	9007      	str	r0, [sp, #28]
 80105dc:	2800      	cmp	r0, #0
 80105de:	f43f ae83 	beq.w	80102e8 <_strtod_l+0x498>
 80105e2:	f1b9 0f00 	cmp.w	r9, #0
 80105e6:	dd08      	ble.n	80105fa <_strtod_l+0x7aa>
 80105e8:	4631      	mov	r1, r6
 80105ea:	464a      	mov	r2, r9
 80105ec:	4620      	mov	r0, r4
 80105ee:	f001 fb41 	bl	8011c74 <__lshift>
 80105f2:	4606      	mov	r6, r0
 80105f4:	2800      	cmp	r0, #0
 80105f6:	f43f ae77 	beq.w	80102e8 <_strtod_l+0x498>
 80105fa:	9a07      	ldr	r2, [sp, #28]
 80105fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80105fe:	4620      	mov	r0, r4
 8010600:	f001 fbc0 	bl	8011d84 <__mdiff>
 8010604:	4605      	mov	r5, r0
 8010606:	2800      	cmp	r0, #0
 8010608:	f43f ae6e 	beq.w	80102e8 <_strtod_l+0x498>
 801060c:	68c3      	ldr	r3, [r0, #12]
 801060e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010610:	2300      	movs	r3, #0
 8010612:	60c3      	str	r3, [r0, #12]
 8010614:	4631      	mov	r1, r6
 8010616:	f001 fb99 	bl	8011d4c <__mcmp>
 801061a:	2800      	cmp	r0, #0
 801061c:	da65      	bge.n	80106ea <_strtod_l+0x89a>
 801061e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010620:	ea53 030a 	orrs.w	r3, r3, sl
 8010624:	f040 8087 	bne.w	8010736 <_strtod_l+0x8e6>
 8010628:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801062c:	2b00      	cmp	r3, #0
 801062e:	f040 8082 	bne.w	8010736 <_strtod_l+0x8e6>
 8010632:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010636:	0d1b      	lsrs	r3, r3, #20
 8010638:	051b      	lsls	r3, r3, #20
 801063a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801063e:	d97a      	bls.n	8010736 <_strtod_l+0x8e6>
 8010640:	696b      	ldr	r3, [r5, #20]
 8010642:	b913      	cbnz	r3, 801064a <_strtod_l+0x7fa>
 8010644:	692b      	ldr	r3, [r5, #16]
 8010646:	2b01      	cmp	r3, #1
 8010648:	dd75      	ble.n	8010736 <_strtod_l+0x8e6>
 801064a:	4629      	mov	r1, r5
 801064c:	2201      	movs	r2, #1
 801064e:	4620      	mov	r0, r4
 8010650:	f001 fb10 	bl	8011c74 <__lshift>
 8010654:	4631      	mov	r1, r6
 8010656:	4605      	mov	r5, r0
 8010658:	f001 fb78 	bl	8011d4c <__mcmp>
 801065c:	2800      	cmp	r0, #0
 801065e:	dd6a      	ble.n	8010736 <_strtod_l+0x8e6>
 8010660:	9904      	ldr	r1, [sp, #16]
 8010662:	4a55      	ldr	r2, [pc, #340]	; (80107b8 <_strtod_l+0x968>)
 8010664:	465b      	mov	r3, fp
 8010666:	2900      	cmp	r1, #0
 8010668:	f000 8085 	beq.w	8010776 <_strtod_l+0x926>
 801066c:	ea02 010b 	and.w	r1, r2, fp
 8010670:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010674:	dc7f      	bgt.n	8010776 <_strtod_l+0x926>
 8010676:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801067a:	f77f aeaa 	ble.w	80103d2 <_strtod_l+0x582>
 801067e:	4a4f      	ldr	r2, [pc, #316]	; (80107bc <_strtod_l+0x96c>)
 8010680:	2300      	movs	r3, #0
 8010682:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010686:	4650      	mov	r0, sl
 8010688:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801068c:	4659      	mov	r1, fp
 801068e:	f7ef ffcb 	bl	8000628 <__aeabi_dmul>
 8010692:	460b      	mov	r3, r1
 8010694:	4303      	orrs	r3, r0
 8010696:	bf08      	it	eq
 8010698:	2322      	moveq	r3, #34	; 0x22
 801069a:	4682      	mov	sl, r0
 801069c:	468b      	mov	fp, r1
 801069e:	bf08      	it	eq
 80106a0:	6023      	streq	r3, [r4, #0]
 80106a2:	e62b      	b.n	80102fc <_strtod_l+0x4ac>
 80106a4:	f04f 32ff 	mov.w	r2, #4294967295
 80106a8:	fa02 f303 	lsl.w	r3, r2, r3
 80106ac:	ea03 0a0a 	and.w	sl, r3, sl
 80106b0:	e6de      	b.n	8010470 <_strtod_l+0x620>
 80106b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80106b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80106ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80106be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80106c2:	fa01 f308 	lsl.w	r3, r1, r8
 80106c6:	930c      	str	r3, [sp, #48]	; 0x30
 80106c8:	9111      	str	r1, [sp, #68]	; 0x44
 80106ca:	e741      	b.n	8010550 <_strtod_l+0x700>
 80106cc:	2300      	movs	r3, #0
 80106ce:	930c      	str	r3, [sp, #48]	; 0x30
 80106d0:	2301      	movs	r3, #1
 80106d2:	9311      	str	r3, [sp, #68]	; 0x44
 80106d4:	e73c      	b.n	8010550 <_strtod_l+0x700>
 80106d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80106d8:	4642      	mov	r2, r8
 80106da:	4620      	mov	r0, r4
 80106dc:	f001 faca 	bl	8011c74 <__lshift>
 80106e0:	901e      	str	r0, [sp, #120]	; 0x78
 80106e2:	2800      	cmp	r0, #0
 80106e4:	f47f af66 	bne.w	80105b4 <_strtod_l+0x764>
 80106e8:	e5fe      	b.n	80102e8 <_strtod_l+0x498>
 80106ea:	465f      	mov	r7, fp
 80106ec:	d16e      	bne.n	80107cc <_strtod_l+0x97c>
 80106ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80106f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80106f4:	b342      	cbz	r2, 8010748 <_strtod_l+0x8f8>
 80106f6:	4a32      	ldr	r2, [pc, #200]	; (80107c0 <_strtod_l+0x970>)
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d128      	bne.n	801074e <_strtod_l+0x8fe>
 80106fc:	9b04      	ldr	r3, [sp, #16]
 80106fe:	4650      	mov	r0, sl
 8010700:	b1eb      	cbz	r3, 801073e <_strtod_l+0x8ee>
 8010702:	4a2d      	ldr	r2, [pc, #180]	; (80107b8 <_strtod_l+0x968>)
 8010704:	403a      	ands	r2, r7
 8010706:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801070a:	f04f 31ff 	mov.w	r1, #4294967295
 801070e:	d819      	bhi.n	8010744 <_strtod_l+0x8f4>
 8010710:	0d12      	lsrs	r2, r2, #20
 8010712:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010716:	fa01 f303 	lsl.w	r3, r1, r3
 801071a:	4298      	cmp	r0, r3
 801071c:	d117      	bne.n	801074e <_strtod_l+0x8fe>
 801071e:	4b29      	ldr	r3, [pc, #164]	; (80107c4 <_strtod_l+0x974>)
 8010720:	429f      	cmp	r7, r3
 8010722:	d102      	bne.n	801072a <_strtod_l+0x8da>
 8010724:	3001      	adds	r0, #1
 8010726:	f43f addf 	beq.w	80102e8 <_strtod_l+0x498>
 801072a:	4b23      	ldr	r3, [pc, #140]	; (80107b8 <_strtod_l+0x968>)
 801072c:	403b      	ands	r3, r7
 801072e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010732:	f04f 0a00 	mov.w	sl, #0
 8010736:	9b04      	ldr	r3, [sp, #16]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d1a0      	bne.n	801067e <_strtod_l+0x82e>
 801073c:	e5de      	b.n	80102fc <_strtod_l+0x4ac>
 801073e:	f04f 33ff 	mov.w	r3, #4294967295
 8010742:	e7ea      	b.n	801071a <_strtod_l+0x8ca>
 8010744:	460b      	mov	r3, r1
 8010746:	e7e8      	b.n	801071a <_strtod_l+0x8ca>
 8010748:	ea53 030a 	orrs.w	r3, r3, sl
 801074c:	d088      	beq.n	8010660 <_strtod_l+0x810>
 801074e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010750:	b1db      	cbz	r3, 801078a <_strtod_l+0x93a>
 8010752:	423b      	tst	r3, r7
 8010754:	d0ef      	beq.n	8010736 <_strtod_l+0x8e6>
 8010756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010758:	9a04      	ldr	r2, [sp, #16]
 801075a:	4650      	mov	r0, sl
 801075c:	4659      	mov	r1, fp
 801075e:	b1c3      	cbz	r3, 8010792 <_strtod_l+0x942>
 8010760:	f7ff fb57 	bl	800fe12 <sulp>
 8010764:	4602      	mov	r2, r0
 8010766:	460b      	mov	r3, r1
 8010768:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801076c:	f7ef fda6 	bl	80002bc <__adddf3>
 8010770:	4682      	mov	sl, r0
 8010772:	468b      	mov	fp, r1
 8010774:	e7df      	b.n	8010736 <_strtod_l+0x8e6>
 8010776:	4013      	ands	r3, r2
 8010778:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801077c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010780:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010784:	f04f 3aff 	mov.w	sl, #4294967295
 8010788:	e7d5      	b.n	8010736 <_strtod_l+0x8e6>
 801078a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801078c:	ea13 0f0a 	tst.w	r3, sl
 8010790:	e7e0      	b.n	8010754 <_strtod_l+0x904>
 8010792:	f7ff fb3e 	bl	800fe12 <sulp>
 8010796:	4602      	mov	r2, r0
 8010798:	460b      	mov	r3, r1
 801079a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801079e:	f7ef fd8b 	bl	80002b8 <__aeabi_dsub>
 80107a2:	2200      	movs	r2, #0
 80107a4:	2300      	movs	r3, #0
 80107a6:	4682      	mov	sl, r0
 80107a8:	468b      	mov	fp, r1
 80107aa:	f7f0 f9a5 	bl	8000af8 <__aeabi_dcmpeq>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	d0c1      	beq.n	8010736 <_strtod_l+0x8e6>
 80107b2:	e60e      	b.n	80103d2 <_strtod_l+0x582>
 80107b4:	fffffc02 	.word	0xfffffc02
 80107b8:	7ff00000 	.word	0x7ff00000
 80107bc:	39500000 	.word	0x39500000
 80107c0:	000fffff 	.word	0x000fffff
 80107c4:	7fefffff 	.word	0x7fefffff
 80107c8:	08014710 	.word	0x08014710
 80107cc:	4631      	mov	r1, r6
 80107ce:	4628      	mov	r0, r5
 80107d0:	f001 fc38 	bl	8012044 <__ratio>
 80107d4:	ec59 8b10 	vmov	r8, r9, d0
 80107d8:	ee10 0a10 	vmov	r0, s0
 80107dc:	2200      	movs	r2, #0
 80107de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80107e2:	4649      	mov	r1, r9
 80107e4:	f7f0 f99c 	bl	8000b20 <__aeabi_dcmple>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d07c      	beq.n	80108e6 <_strtod_l+0xa96>
 80107ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d04c      	beq.n	801088c <_strtod_l+0xa3c>
 80107f2:	4b95      	ldr	r3, [pc, #596]	; (8010a48 <_strtod_l+0xbf8>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80107fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010a48 <_strtod_l+0xbf8>
 80107fe:	f04f 0800 	mov.w	r8, #0
 8010802:	4b92      	ldr	r3, [pc, #584]	; (8010a4c <_strtod_l+0xbfc>)
 8010804:	403b      	ands	r3, r7
 8010806:	9311      	str	r3, [sp, #68]	; 0x44
 8010808:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801080a:	4b91      	ldr	r3, [pc, #580]	; (8010a50 <_strtod_l+0xc00>)
 801080c:	429a      	cmp	r2, r3
 801080e:	f040 80b2 	bne.w	8010976 <_strtod_l+0xb26>
 8010812:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801081a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801081e:	ec4b ab10 	vmov	d0, sl, fp
 8010822:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010826:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801082a:	f001 fb33 	bl	8011e94 <__ulp>
 801082e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010832:	ec53 2b10 	vmov	r2, r3, d0
 8010836:	f7ef fef7 	bl	8000628 <__aeabi_dmul>
 801083a:	4652      	mov	r2, sl
 801083c:	465b      	mov	r3, fp
 801083e:	f7ef fd3d 	bl	80002bc <__adddf3>
 8010842:	460b      	mov	r3, r1
 8010844:	4981      	ldr	r1, [pc, #516]	; (8010a4c <_strtod_l+0xbfc>)
 8010846:	4a83      	ldr	r2, [pc, #524]	; (8010a54 <_strtod_l+0xc04>)
 8010848:	4019      	ands	r1, r3
 801084a:	4291      	cmp	r1, r2
 801084c:	4682      	mov	sl, r0
 801084e:	d95e      	bls.n	801090e <_strtod_l+0xabe>
 8010850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010852:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010856:	4293      	cmp	r3, r2
 8010858:	d103      	bne.n	8010862 <_strtod_l+0xa12>
 801085a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801085c:	3301      	adds	r3, #1
 801085e:	f43f ad43 	beq.w	80102e8 <_strtod_l+0x498>
 8010862:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010a60 <_strtod_l+0xc10>
 8010866:	f04f 3aff 	mov.w	sl, #4294967295
 801086a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801086c:	4620      	mov	r0, r4
 801086e:	f000 ffe5 	bl	801183c <_Bfree>
 8010872:	9907      	ldr	r1, [sp, #28]
 8010874:	4620      	mov	r0, r4
 8010876:	f000 ffe1 	bl	801183c <_Bfree>
 801087a:	4631      	mov	r1, r6
 801087c:	4620      	mov	r0, r4
 801087e:	f000 ffdd 	bl	801183c <_Bfree>
 8010882:	4629      	mov	r1, r5
 8010884:	4620      	mov	r0, r4
 8010886:	f000 ffd9 	bl	801183c <_Bfree>
 801088a:	e613      	b.n	80104b4 <_strtod_l+0x664>
 801088c:	f1ba 0f00 	cmp.w	sl, #0
 8010890:	d11b      	bne.n	80108ca <_strtod_l+0xa7a>
 8010892:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010896:	b9f3      	cbnz	r3, 80108d6 <_strtod_l+0xa86>
 8010898:	4b6b      	ldr	r3, [pc, #428]	; (8010a48 <_strtod_l+0xbf8>)
 801089a:	2200      	movs	r2, #0
 801089c:	4640      	mov	r0, r8
 801089e:	4649      	mov	r1, r9
 80108a0:	f7f0 f934 	bl	8000b0c <__aeabi_dcmplt>
 80108a4:	b9d0      	cbnz	r0, 80108dc <_strtod_l+0xa8c>
 80108a6:	4640      	mov	r0, r8
 80108a8:	4649      	mov	r1, r9
 80108aa:	4b6b      	ldr	r3, [pc, #428]	; (8010a58 <_strtod_l+0xc08>)
 80108ac:	2200      	movs	r2, #0
 80108ae:	f7ef febb 	bl	8000628 <__aeabi_dmul>
 80108b2:	4680      	mov	r8, r0
 80108b4:	4689      	mov	r9, r1
 80108b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80108ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80108be:	931b      	str	r3, [sp, #108]	; 0x6c
 80108c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80108c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80108c8:	e79b      	b.n	8010802 <_strtod_l+0x9b2>
 80108ca:	f1ba 0f01 	cmp.w	sl, #1
 80108ce:	d102      	bne.n	80108d6 <_strtod_l+0xa86>
 80108d0:	2f00      	cmp	r7, #0
 80108d2:	f43f ad7e 	beq.w	80103d2 <_strtod_l+0x582>
 80108d6:	4b61      	ldr	r3, [pc, #388]	; (8010a5c <_strtod_l+0xc0c>)
 80108d8:	2200      	movs	r2, #0
 80108da:	e78c      	b.n	80107f6 <_strtod_l+0x9a6>
 80108dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010a58 <_strtod_l+0xc08>
 80108e0:	f04f 0800 	mov.w	r8, #0
 80108e4:	e7e7      	b.n	80108b6 <_strtod_l+0xa66>
 80108e6:	4b5c      	ldr	r3, [pc, #368]	; (8010a58 <_strtod_l+0xc08>)
 80108e8:	4640      	mov	r0, r8
 80108ea:	4649      	mov	r1, r9
 80108ec:	2200      	movs	r2, #0
 80108ee:	f7ef fe9b 	bl	8000628 <__aeabi_dmul>
 80108f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80108f4:	4680      	mov	r8, r0
 80108f6:	4689      	mov	r9, r1
 80108f8:	b933      	cbnz	r3, 8010908 <_strtod_l+0xab8>
 80108fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108fe:	9012      	str	r0, [sp, #72]	; 0x48
 8010900:	9313      	str	r3, [sp, #76]	; 0x4c
 8010902:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010906:	e7dd      	b.n	80108c4 <_strtod_l+0xa74>
 8010908:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801090c:	e7f9      	b.n	8010902 <_strtod_l+0xab2>
 801090e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010912:	9b04      	ldr	r3, [sp, #16]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d1a8      	bne.n	801086a <_strtod_l+0xa1a>
 8010918:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801091c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801091e:	0d1b      	lsrs	r3, r3, #20
 8010920:	051b      	lsls	r3, r3, #20
 8010922:	429a      	cmp	r2, r3
 8010924:	d1a1      	bne.n	801086a <_strtod_l+0xa1a>
 8010926:	4640      	mov	r0, r8
 8010928:	4649      	mov	r1, r9
 801092a:	f7f0 f9c7 	bl	8000cbc <__aeabi_d2lz>
 801092e:	f7ef fe4d 	bl	80005cc <__aeabi_l2d>
 8010932:	4602      	mov	r2, r0
 8010934:	460b      	mov	r3, r1
 8010936:	4640      	mov	r0, r8
 8010938:	4649      	mov	r1, r9
 801093a:	f7ef fcbd 	bl	80002b8 <__aeabi_dsub>
 801093e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010940:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010944:	ea43 030a 	orr.w	r3, r3, sl
 8010948:	4313      	orrs	r3, r2
 801094a:	4680      	mov	r8, r0
 801094c:	4689      	mov	r9, r1
 801094e:	d053      	beq.n	80109f8 <_strtod_l+0xba8>
 8010950:	a335      	add	r3, pc, #212	; (adr r3, 8010a28 <_strtod_l+0xbd8>)
 8010952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010956:	f7f0 f8d9 	bl	8000b0c <__aeabi_dcmplt>
 801095a:	2800      	cmp	r0, #0
 801095c:	f47f acce 	bne.w	80102fc <_strtod_l+0x4ac>
 8010960:	a333      	add	r3, pc, #204	; (adr r3, 8010a30 <_strtod_l+0xbe0>)
 8010962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010966:	4640      	mov	r0, r8
 8010968:	4649      	mov	r1, r9
 801096a:	f7f0 f8ed 	bl	8000b48 <__aeabi_dcmpgt>
 801096e:	2800      	cmp	r0, #0
 8010970:	f43f af7b 	beq.w	801086a <_strtod_l+0xa1a>
 8010974:	e4c2      	b.n	80102fc <_strtod_l+0x4ac>
 8010976:	9b04      	ldr	r3, [sp, #16]
 8010978:	b333      	cbz	r3, 80109c8 <_strtod_l+0xb78>
 801097a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801097c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010980:	d822      	bhi.n	80109c8 <_strtod_l+0xb78>
 8010982:	a32d      	add	r3, pc, #180	; (adr r3, 8010a38 <_strtod_l+0xbe8>)
 8010984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010988:	4640      	mov	r0, r8
 801098a:	4649      	mov	r1, r9
 801098c:	f7f0 f8c8 	bl	8000b20 <__aeabi_dcmple>
 8010990:	b1a0      	cbz	r0, 80109bc <_strtod_l+0xb6c>
 8010992:	4649      	mov	r1, r9
 8010994:	4640      	mov	r0, r8
 8010996:	f7f0 f909 	bl	8000bac <__aeabi_d2uiz>
 801099a:	2801      	cmp	r0, #1
 801099c:	bf38      	it	cc
 801099e:	2001      	movcc	r0, #1
 80109a0:	f7ef fdc8 	bl	8000534 <__aeabi_ui2d>
 80109a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109a6:	4680      	mov	r8, r0
 80109a8:	4689      	mov	r9, r1
 80109aa:	bb13      	cbnz	r3, 80109f2 <_strtod_l+0xba2>
 80109ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109b0:	9014      	str	r0, [sp, #80]	; 0x50
 80109b2:	9315      	str	r3, [sp, #84]	; 0x54
 80109b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80109b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80109bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80109c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80109c4:	1a9b      	subs	r3, r3, r2
 80109c6:	930d      	str	r3, [sp, #52]	; 0x34
 80109c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80109cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80109d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80109d4:	f001 fa5e 	bl	8011e94 <__ulp>
 80109d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80109dc:	ec53 2b10 	vmov	r2, r3, d0
 80109e0:	f7ef fe22 	bl	8000628 <__aeabi_dmul>
 80109e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80109e8:	f7ef fc68 	bl	80002bc <__adddf3>
 80109ec:	4682      	mov	sl, r0
 80109ee:	468b      	mov	fp, r1
 80109f0:	e78f      	b.n	8010912 <_strtod_l+0xac2>
 80109f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80109f6:	e7dd      	b.n	80109b4 <_strtod_l+0xb64>
 80109f8:	a311      	add	r3, pc, #68	; (adr r3, 8010a40 <_strtod_l+0xbf0>)
 80109fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109fe:	f7f0 f885 	bl	8000b0c <__aeabi_dcmplt>
 8010a02:	e7b4      	b.n	801096e <_strtod_l+0xb1e>
 8010a04:	2300      	movs	r3, #0
 8010a06:	930e      	str	r3, [sp, #56]	; 0x38
 8010a08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010a0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a0c:	6013      	str	r3, [r2, #0]
 8010a0e:	f7ff ba65 	b.w	800fedc <_strtod_l+0x8c>
 8010a12:	2b65      	cmp	r3, #101	; 0x65
 8010a14:	f43f ab5d 	beq.w	80100d2 <_strtod_l+0x282>
 8010a18:	2b45      	cmp	r3, #69	; 0x45
 8010a1a:	f43f ab5a 	beq.w	80100d2 <_strtod_l+0x282>
 8010a1e:	2201      	movs	r2, #1
 8010a20:	f7ff bb92 	b.w	8010148 <_strtod_l+0x2f8>
 8010a24:	f3af 8000 	nop.w
 8010a28:	94a03595 	.word	0x94a03595
 8010a2c:	3fdfffff 	.word	0x3fdfffff
 8010a30:	35afe535 	.word	0x35afe535
 8010a34:	3fe00000 	.word	0x3fe00000
 8010a38:	ffc00000 	.word	0xffc00000
 8010a3c:	41dfffff 	.word	0x41dfffff
 8010a40:	94a03595 	.word	0x94a03595
 8010a44:	3fcfffff 	.word	0x3fcfffff
 8010a48:	3ff00000 	.word	0x3ff00000
 8010a4c:	7ff00000 	.word	0x7ff00000
 8010a50:	7fe00000 	.word	0x7fe00000
 8010a54:	7c9fffff 	.word	0x7c9fffff
 8010a58:	3fe00000 	.word	0x3fe00000
 8010a5c:	bff00000 	.word	0xbff00000
 8010a60:	7fefffff 	.word	0x7fefffff

08010a64 <strtod>:
 8010a64:	460a      	mov	r2, r1
 8010a66:	4601      	mov	r1, r0
 8010a68:	4802      	ldr	r0, [pc, #8]	; (8010a74 <strtod+0x10>)
 8010a6a:	4b03      	ldr	r3, [pc, #12]	; (8010a78 <strtod+0x14>)
 8010a6c:	6800      	ldr	r0, [r0, #0]
 8010a6e:	f7ff b9ef 	b.w	800fe50 <_strtod_l>
 8010a72:	bf00      	nop
 8010a74:	20000160 	.word	0x20000160
 8010a78:	200001c8 	.word	0x200001c8

08010a7c <__swbuf_r>:
 8010a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a7e:	460e      	mov	r6, r1
 8010a80:	4614      	mov	r4, r2
 8010a82:	4605      	mov	r5, r0
 8010a84:	b118      	cbz	r0, 8010a8e <__swbuf_r+0x12>
 8010a86:	6983      	ldr	r3, [r0, #24]
 8010a88:	b90b      	cbnz	r3, 8010a8e <__swbuf_r+0x12>
 8010a8a:	f000 f9f3 	bl	8010e74 <__sinit>
 8010a8e:	4b21      	ldr	r3, [pc, #132]	; (8010b14 <__swbuf_r+0x98>)
 8010a90:	429c      	cmp	r4, r3
 8010a92:	d12b      	bne.n	8010aec <__swbuf_r+0x70>
 8010a94:	686c      	ldr	r4, [r5, #4]
 8010a96:	69a3      	ldr	r3, [r4, #24]
 8010a98:	60a3      	str	r3, [r4, #8]
 8010a9a:	89a3      	ldrh	r3, [r4, #12]
 8010a9c:	071a      	lsls	r2, r3, #28
 8010a9e:	d52f      	bpl.n	8010b00 <__swbuf_r+0x84>
 8010aa0:	6923      	ldr	r3, [r4, #16]
 8010aa2:	b36b      	cbz	r3, 8010b00 <__swbuf_r+0x84>
 8010aa4:	6923      	ldr	r3, [r4, #16]
 8010aa6:	6820      	ldr	r0, [r4, #0]
 8010aa8:	1ac0      	subs	r0, r0, r3
 8010aaa:	6963      	ldr	r3, [r4, #20]
 8010aac:	b2f6      	uxtb	r6, r6
 8010aae:	4283      	cmp	r3, r0
 8010ab0:	4637      	mov	r7, r6
 8010ab2:	dc04      	bgt.n	8010abe <__swbuf_r+0x42>
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	f000 f948 	bl	8010d4c <_fflush_r>
 8010abc:	bb30      	cbnz	r0, 8010b0c <__swbuf_r+0x90>
 8010abe:	68a3      	ldr	r3, [r4, #8]
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	60a3      	str	r3, [r4, #8]
 8010ac4:	6823      	ldr	r3, [r4, #0]
 8010ac6:	1c5a      	adds	r2, r3, #1
 8010ac8:	6022      	str	r2, [r4, #0]
 8010aca:	701e      	strb	r6, [r3, #0]
 8010acc:	6963      	ldr	r3, [r4, #20]
 8010ace:	3001      	adds	r0, #1
 8010ad0:	4283      	cmp	r3, r0
 8010ad2:	d004      	beq.n	8010ade <__swbuf_r+0x62>
 8010ad4:	89a3      	ldrh	r3, [r4, #12]
 8010ad6:	07db      	lsls	r3, r3, #31
 8010ad8:	d506      	bpl.n	8010ae8 <__swbuf_r+0x6c>
 8010ada:	2e0a      	cmp	r6, #10
 8010adc:	d104      	bne.n	8010ae8 <__swbuf_r+0x6c>
 8010ade:	4621      	mov	r1, r4
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	f000 f933 	bl	8010d4c <_fflush_r>
 8010ae6:	b988      	cbnz	r0, 8010b0c <__swbuf_r+0x90>
 8010ae8:	4638      	mov	r0, r7
 8010aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aec:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <__swbuf_r+0x9c>)
 8010aee:	429c      	cmp	r4, r3
 8010af0:	d101      	bne.n	8010af6 <__swbuf_r+0x7a>
 8010af2:	68ac      	ldr	r4, [r5, #8]
 8010af4:	e7cf      	b.n	8010a96 <__swbuf_r+0x1a>
 8010af6:	4b09      	ldr	r3, [pc, #36]	; (8010b1c <__swbuf_r+0xa0>)
 8010af8:	429c      	cmp	r4, r3
 8010afa:	bf08      	it	eq
 8010afc:	68ec      	ldreq	r4, [r5, #12]
 8010afe:	e7ca      	b.n	8010a96 <__swbuf_r+0x1a>
 8010b00:	4621      	mov	r1, r4
 8010b02:	4628      	mov	r0, r5
 8010b04:	f000 f81e 	bl	8010b44 <__swsetup_r>
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	d0cb      	beq.n	8010aa4 <__swbuf_r+0x28>
 8010b0c:	f04f 37ff 	mov.w	r7, #4294967295
 8010b10:	e7ea      	b.n	8010ae8 <__swbuf_r+0x6c>
 8010b12:	bf00      	nop
 8010b14:	08014758 	.word	0x08014758
 8010b18:	08014778 	.word	0x08014778
 8010b1c:	08014738 	.word	0x08014738

08010b20 <_write_r>:
 8010b20:	b538      	push	{r3, r4, r5, lr}
 8010b22:	4d07      	ldr	r5, [pc, #28]	; (8010b40 <_write_r+0x20>)
 8010b24:	4604      	mov	r4, r0
 8010b26:	4608      	mov	r0, r1
 8010b28:	4611      	mov	r1, r2
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	602a      	str	r2, [r5, #0]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	f7f1 ffcd 	bl	8002ace <_write>
 8010b34:	1c43      	adds	r3, r0, #1
 8010b36:	d102      	bne.n	8010b3e <_write_r+0x1e>
 8010b38:	682b      	ldr	r3, [r5, #0]
 8010b3a:	b103      	cbz	r3, 8010b3e <_write_r+0x1e>
 8010b3c:	6023      	str	r3, [r4, #0]
 8010b3e:	bd38      	pop	{r3, r4, r5, pc}
 8010b40:	20003498 	.word	0x20003498

08010b44 <__swsetup_r>:
 8010b44:	4b32      	ldr	r3, [pc, #200]	; (8010c10 <__swsetup_r+0xcc>)
 8010b46:	b570      	push	{r4, r5, r6, lr}
 8010b48:	681d      	ldr	r5, [r3, #0]
 8010b4a:	4606      	mov	r6, r0
 8010b4c:	460c      	mov	r4, r1
 8010b4e:	b125      	cbz	r5, 8010b5a <__swsetup_r+0x16>
 8010b50:	69ab      	ldr	r3, [r5, #24]
 8010b52:	b913      	cbnz	r3, 8010b5a <__swsetup_r+0x16>
 8010b54:	4628      	mov	r0, r5
 8010b56:	f000 f98d 	bl	8010e74 <__sinit>
 8010b5a:	4b2e      	ldr	r3, [pc, #184]	; (8010c14 <__swsetup_r+0xd0>)
 8010b5c:	429c      	cmp	r4, r3
 8010b5e:	d10f      	bne.n	8010b80 <__swsetup_r+0x3c>
 8010b60:	686c      	ldr	r4, [r5, #4]
 8010b62:	89a3      	ldrh	r3, [r4, #12]
 8010b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b68:	0719      	lsls	r1, r3, #28
 8010b6a:	d42c      	bmi.n	8010bc6 <__swsetup_r+0x82>
 8010b6c:	06dd      	lsls	r5, r3, #27
 8010b6e:	d411      	bmi.n	8010b94 <__swsetup_r+0x50>
 8010b70:	2309      	movs	r3, #9
 8010b72:	6033      	str	r3, [r6, #0]
 8010b74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b78:	81a3      	strh	r3, [r4, #12]
 8010b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b7e:	e03e      	b.n	8010bfe <__swsetup_r+0xba>
 8010b80:	4b25      	ldr	r3, [pc, #148]	; (8010c18 <__swsetup_r+0xd4>)
 8010b82:	429c      	cmp	r4, r3
 8010b84:	d101      	bne.n	8010b8a <__swsetup_r+0x46>
 8010b86:	68ac      	ldr	r4, [r5, #8]
 8010b88:	e7eb      	b.n	8010b62 <__swsetup_r+0x1e>
 8010b8a:	4b24      	ldr	r3, [pc, #144]	; (8010c1c <__swsetup_r+0xd8>)
 8010b8c:	429c      	cmp	r4, r3
 8010b8e:	bf08      	it	eq
 8010b90:	68ec      	ldreq	r4, [r5, #12]
 8010b92:	e7e6      	b.n	8010b62 <__swsetup_r+0x1e>
 8010b94:	0758      	lsls	r0, r3, #29
 8010b96:	d512      	bpl.n	8010bbe <__swsetup_r+0x7a>
 8010b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b9a:	b141      	cbz	r1, 8010bae <__swsetup_r+0x6a>
 8010b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ba0:	4299      	cmp	r1, r3
 8010ba2:	d002      	beq.n	8010baa <__swsetup_r+0x66>
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	f7fe ff73 	bl	800fa90 <_free_r>
 8010baa:	2300      	movs	r3, #0
 8010bac:	6363      	str	r3, [r4, #52]	; 0x34
 8010bae:	89a3      	ldrh	r3, [r4, #12]
 8010bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010bb4:	81a3      	strh	r3, [r4, #12]
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	6063      	str	r3, [r4, #4]
 8010bba:	6923      	ldr	r3, [r4, #16]
 8010bbc:	6023      	str	r3, [r4, #0]
 8010bbe:	89a3      	ldrh	r3, [r4, #12]
 8010bc0:	f043 0308 	orr.w	r3, r3, #8
 8010bc4:	81a3      	strh	r3, [r4, #12]
 8010bc6:	6923      	ldr	r3, [r4, #16]
 8010bc8:	b94b      	cbnz	r3, 8010bde <__swsetup_r+0x9a>
 8010bca:	89a3      	ldrh	r3, [r4, #12]
 8010bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bd4:	d003      	beq.n	8010bde <__swsetup_r+0x9a>
 8010bd6:	4621      	mov	r1, r4
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f000 fd91 	bl	8011700 <__smakebuf_r>
 8010bde:	89a0      	ldrh	r0, [r4, #12]
 8010be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010be4:	f010 0301 	ands.w	r3, r0, #1
 8010be8:	d00a      	beq.n	8010c00 <__swsetup_r+0xbc>
 8010bea:	2300      	movs	r3, #0
 8010bec:	60a3      	str	r3, [r4, #8]
 8010bee:	6963      	ldr	r3, [r4, #20]
 8010bf0:	425b      	negs	r3, r3
 8010bf2:	61a3      	str	r3, [r4, #24]
 8010bf4:	6923      	ldr	r3, [r4, #16]
 8010bf6:	b943      	cbnz	r3, 8010c0a <__swsetup_r+0xc6>
 8010bf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010bfc:	d1ba      	bne.n	8010b74 <__swsetup_r+0x30>
 8010bfe:	bd70      	pop	{r4, r5, r6, pc}
 8010c00:	0781      	lsls	r1, r0, #30
 8010c02:	bf58      	it	pl
 8010c04:	6963      	ldrpl	r3, [r4, #20]
 8010c06:	60a3      	str	r3, [r4, #8]
 8010c08:	e7f4      	b.n	8010bf4 <__swsetup_r+0xb0>
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	e7f7      	b.n	8010bfe <__swsetup_r+0xba>
 8010c0e:	bf00      	nop
 8010c10:	20000160 	.word	0x20000160
 8010c14:	08014758 	.word	0x08014758
 8010c18:	08014778 	.word	0x08014778
 8010c1c:	08014738 	.word	0x08014738

08010c20 <_close_r>:
 8010c20:	b538      	push	{r3, r4, r5, lr}
 8010c22:	4d06      	ldr	r5, [pc, #24]	; (8010c3c <_close_r+0x1c>)
 8010c24:	2300      	movs	r3, #0
 8010c26:	4604      	mov	r4, r0
 8010c28:	4608      	mov	r0, r1
 8010c2a:	602b      	str	r3, [r5, #0]
 8010c2c:	f7f1 ff6b 	bl	8002b06 <_close>
 8010c30:	1c43      	adds	r3, r0, #1
 8010c32:	d102      	bne.n	8010c3a <_close_r+0x1a>
 8010c34:	682b      	ldr	r3, [r5, #0]
 8010c36:	b103      	cbz	r3, 8010c3a <_close_r+0x1a>
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	bd38      	pop	{r3, r4, r5, pc}
 8010c3c:	20003498 	.word	0x20003498

08010c40 <__sflush_r>:
 8010c40:	898a      	ldrh	r2, [r1, #12]
 8010c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c46:	4605      	mov	r5, r0
 8010c48:	0710      	lsls	r0, r2, #28
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	d458      	bmi.n	8010d00 <__sflush_r+0xc0>
 8010c4e:	684b      	ldr	r3, [r1, #4]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	dc05      	bgt.n	8010c60 <__sflush_r+0x20>
 8010c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	dc02      	bgt.n	8010c60 <__sflush_r+0x20>
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c62:	2e00      	cmp	r6, #0
 8010c64:	d0f9      	beq.n	8010c5a <__sflush_r+0x1a>
 8010c66:	2300      	movs	r3, #0
 8010c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c6c:	682f      	ldr	r7, [r5, #0]
 8010c6e:	602b      	str	r3, [r5, #0]
 8010c70:	d032      	beq.n	8010cd8 <__sflush_r+0x98>
 8010c72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c74:	89a3      	ldrh	r3, [r4, #12]
 8010c76:	075a      	lsls	r2, r3, #29
 8010c78:	d505      	bpl.n	8010c86 <__sflush_r+0x46>
 8010c7a:	6863      	ldr	r3, [r4, #4]
 8010c7c:	1ac0      	subs	r0, r0, r3
 8010c7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c80:	b10b      	cbz	r3, 8010c86 <__sflush_r+0x46>
 8010c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c84:	1ac0      	subs	r0, r0, r3
 8010c86:	2300      	movs	r3, #0
 8010c88:	4602      	mov	r2, r0
 8010c8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c8c:	6a21      	ldr	r1, [r4, #32]
 8010c8e:	4628      	mov	r0, r5
 8010c90:	47b0      	blx	r6
 8010c92:	1c43      	adds	r3, r0, #1
 8010c94:	89a3      	ldrh	r3, [r4, #12]
 8010c96:	d106      	bne.n	8010ca6 <__sflush_r+0x66>
 8010c98:	6829      	ldr	r1, [r5, #0]
 8010c9a:	291d      	cmp	r1, #29
 8010c9c:	d82c      	bhi.n	8010cf8 <__sflush_r+0xb8>
 8010c9e:	4a2a      	ldr	r2, [pc, #168]	; (8010d48 <__sflush_r+0x108>)
 8010ca0:	40ca      	lsrs	r2, r1
 8010ca2:	07d6      	lsls	r6, r2, #31
 8010ca4:	d528      	bpl.n	8010cf8 <__sflush_r+0xb8>
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	6062      	str	r2, [r4, #4]
 8010caa:	04d9      	lsls	r1, r3, #19
 8010cac:	6922      	ldr	r2, [r4, #16]
 8010cae:	6022      	str	r2, [r4, #0]
 8010cb0:	d504      	bpl.n	8010cbc <__sflush_r+0x7c>
 8010cb2:	1c42      	adds	r2, r0, #1
 8010cb4:	d101      	bne.n	8010cba <__sflush_r+0x7a>
 8010cb6:	682b      	ldr	r3, [r5, #0]
 8010cb8:	b903      	cbnz	r3, 8010cbc <__sflush_r+0x7c>
 8010cba:	6560      	str	r0, [r4, #84]	; 0x54
 8010cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cbe:	602f      	str	r7, [r5, #0]
 8010cc0:	2900      	cmp	r1, #0
 8010cc2:	d0ca      	beq.n	8010c5a <__sflush_r+0x1a>
 8010cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cc8:	4299      	cmp	r1, r3
 8010cca:	d002      	beq.n	8010cd2 <__sflush_r+0x92>
 8010ccc:	4628      	mov	r0, r5
 8010cce:	f7fe fedf 	bl	800fa90 <_free_r>
 8010cd2:	2000      	movs	r0, #0
 8010cd4:	6360      	str	r0, [r4, #52]	; 0x34
 8010cd6:	e7c1      	b.n	8010c5c <__sflush_r+0x1c>
 8010cd8:	6a21      	ldr	r1, [r4, #32]
 8010cda:	2301      	movs	r3, #1
 8010cdc:	4628      	mov	r0, r5
 8010cde:	47b0      	blx	r6
 8010ce0:	1c41      	adds	r1, r0, #1
 8010ce2:	d1c7      	bne.n	8010c74 <__sflush_r+0x34>
 8010ce4:	682b      	ldr	r3, [r5, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d0c4      	beq.n	8010c74 <__sflush_r+0x34>
 8010cea:	2b1d      	cmp	r3, #29
 8010cec:	d001      	beq.n	8010cf2 <__sflush_r+0xb2>
 8010cee:	2b16      	cmp	r3, #22
 8010cf0:	d101      	bne.n	8010cf6 <__sflush_r+0xb6>
 8010cf2:	602f      	str	r7, [r5, #0]
 8010cf4:	e7b1      	b.n	8010c5a <__sflush_r+0x1a>
 8010cf6:	89a3      	ldrh	r3, [r4, #12]
 8010cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cfc:	81a3      	strh	r3, [r4, #12]
 8010cfe:	e7ad      	b.n	8010c5c <__sflush_r+0x1c>
 8010d00:	690f      	ldr	r7, [r1, #16]
 8010d02:	2f00      	cmp	r7, #0
 8010d04:	d0a9      	beq.n	8010c5a <__sflush_r+0x1a>
 8010d06:	0793      	lsls	r3, r2, #30
 8010d08:	680e      	ldr	r6, [r1, #0]
 8010d0a:	bf08      	it	eq
 8010d0c:	694b      	ldreq	r3, [r1, #20]
 8010d0e:	600f      	str	r7, [r1, #0]
 8010d10:	bf18      	it	ne
 8010d12:	2300      	movne	r3, #0
 8010d14:	eba6 0807 	sub.w	r8, r6, r7
 8010d18:	608b      	str	r3, [r1, #8]
 8010d1a:	f1b8 0f00 	cmp.w	r8, #0
 8010d1e:	dd9c      	ble.n	8010c5a <__sflush_r+0x1a>
 8010d20:	6a21      	ldr	r1, [r4, #32]
 8010d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d24:	4643      	mov	r3, r8
 8010d26:	463a      	mov	r2, r7
 8010d28:	4628      	mov	r0, r5
 8010d2a:	47b0      	blx	r6
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	dc06      	bgt.n	8010d3e <__sflush_r+0xfe>
 8010d30:	89a3      	ldrh	r3, [r4, #12]
 8010d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d36:	81a3      	strh	r3, [r4, #12]
 8010d38:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3c:	e78e      	b.n	8010c5c <__sflush_r+0x1c>
 8010d3e:	4407      	add	r7, r0
 8010d40:	eba8 0800 	sub.w	r8, r8, r0
 8010d44:	e7e9      	b.n	8010d1a <__sflush_r+0xda>
 8010d46:	bf00      	nop
 8010d48:	20400001 	.word	0x20400001

08010d4c <_fflush_r>:
 8010d4c:	b538      	push	{r3, r4, r5, lr}
 8010d4e:	690b      	ldr	r3, [r1, #16]
 8010d50:	4605      	mov	r5, r0
 8010d52:	460c      	mov	r4, r1
 8010d54:	b913      	cbnz	r3, 8010d5c <_fflush_r+0x10>
 8010d56:	2500      	movs	r5, #0
 8010d58:	4628      	mov	r0, r5
 8010d5a:	bd38      	pop	{r3, r4, r5, pc}
 8010d5c:	b118      	cbz	r0, 8010d66 <_fflush_r+0x1a>
 8010d5e:	6983      	ldr	r3, [r0, #24]
 8010d60:	b90b      	cbnz	r3, 8010d66 <_fflush_r+0x1a>
 8010d62:	f000 f887 	bl	8010e74 <__sinit>
 8010d66:	4b14      	ldr	r3, [pc, #80]	; (8010db8 <_fflush_r+0x6c>)
 8010d68:	429c      	cmp	r4, r3
 8010d6a:	d11b      	bne.n	8010da4 <_fflush_r+0x58>
 8010d6c:	686c      	ldr	r4, [r5, #4]
 8010d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d0ef      	beq.n	8010d56 <_fflush_r+0xa>
 8010d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d78:	07d0      	lsls	r0, r2, #31
 8010d7a:	d404      	bmi.n	8010d86 <_fflush_r+0x3a>
 8010d7c:	0599      	lsls	r1, r3, #22
 8010d7e:	d402      	bmi.n	8010d86 <_fflush_r+0x3a>
 8010d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d82:	f000 fc84 	bl	801168e <__retarget_lock_acquire_recursive>
 8010d86:	4628      	mov	r0, r5
 8010d88:	4621      	mov	r1, r4
 8010d8a:	f7ff ff59 	bl	8010c40 <__sflush_r>
 8010d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d90:	07da      	lsls	r2, r3, #31
 8010d92:	4605      	mov	r5, r0
 8010d94:	d4e0      	bmi.n	8010d58 <_fflush_r+0xc>
 8010d96:	89a3      	ldrh	r3, [r4, #12]
 8010d98:	059b      	lsls	r3, r3, #22
 8010d9a:	d4dd      	bmi.n	8010d58 <_fflush_r+0xc>
 8010d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d9e:	f000 fc77 	bl	8011690 <__retarget_lock_release_recursive>
 8010da2:	e7d9      	b.n	8010d58 <_fflush_r+0xc>
 8010da4:	4b05      	ldr	r3, [pc, #20]	; (8010dbc <_fflush_r+0x70>)
 8010da6:	429c      	cmp	r4, r3
 8010da8:	d101      	bne.n	8010dae <_fflush_r+0x62>
 8010daa:	68ac      	ldr	r4, [r5, #8]
 8010dac:	e7df      	b.n	8010d6e <_fflush_r+0x22>
 8010dae:	4b04      	ldr	r3, [pc, #16]	; (8010dc0 <_fflush_r+0x74>)
 8010db0:	429c      	cmp	r4, r3
 8010db2:	bf08      	it	eq
 8010db4:	68ec      	ldreq	r4, [r5, #12]
 8010db6:	e7da      	b.n	8010d6e <_fflush_r+0x22>
 8010db8:	08014758 	.word	0x08014758
 8010dbc:	08014778 	.word	0x08014778
 8010dc0:	08014738 	.word	0x08014738

08010dc4 <std>:
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	b510      	push	{r4, lr}
 8010dc8:	4604      	mov	r4, r0
 8010dca:	e9c0 3300 	strd	r3, r3, [r0]
 8010dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010dd2:	6083      	str	r3, [r0, #8]
 8010dd4:	8181      	strh	r1, [r0, #12]
 8010dd6:	6643      	str	r3, [r0, #100]	; 0x64
 8010dd8:	81c2      	strh	r2, [r0, #14]
 8010dda:	6183      	str	r3, [r0, #24]
 8010ddc:	4619      	mov	r1, r3
 8010dde:	2208      	movs	r2, #8
 8010de0:	305c      	adds	r0, #92	; 0x5c
 8010de2:	f7fe fe4d 	bl	800fa80 <memset>
 8010de6:	4b05      	ldr	r3, [pc, #20]	; (8010dfc <std+0x38>)
 8010de8:	6263      	str	r3, [r4, #36]	; 0x24
 8010dea:	4b05      	ldr	r3, [pc, #20]	; (8010e00 <std+0x3c>)
 8010dec:	62a3      	str	r3, [r4, #40]	; 0x28
 8010dee:	4b05      	ldr	r3, [pc, #20]	; (8010e04 <std+0x40>)
 8010df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010df2:	4b05      	ldr	r3, [pc, #20]	; (8010e08 <std+0x44>)
 8010df4:	6224      	str	r4, [r4, #32]
 8010df6:	6323      	str	r3, [r4, #48]	; 0x30
 8010df8:	bd10      	pop	{r4, pc}
 8010dfa:	bf00      	nop
 8010dfc:	0800fd69 	.word	0x0800fd69
 8010e00:	0800fd8b 	.word	0x0800fd8b
 8010e04:	0800fdc3 	.word	0x0800fdc3
 8010e08:	0800fde7 	.word	0x0800fde7

08010e0c <_cleanup_r>:
 8010e0c:	4901      	ldr	r1, [pc, #4]	; (8010e14 <_cleanup_r+0x8>)
 8010e0e:	f000 b8af 	b.w	8010f70 <_fwalk_reent>
 8010e12:	bf00      	nop
 8010e14:	08010d4d 	.word	0x08010d4d

08010e18 <__sfmoreglue>:
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	1e4a      	subs	r2, r1, #1
 8010e1c:	2568      	movs	r5, #104	; 0x68
 8010e1e:	4355      	muls	r5, r2
 8010e20:	460e      	mov	r6, r1
 8010e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e26:	f7fe fe83 	bl	800fb30 <_malloc_r>
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	b140      	cbz	r0, 8010e40 <__sfmoreglue+0x28>
 8010e2e:	2100      	movs	r1, #0
 8010e30:	e9c0 1600 	strd	r1, r6, [r0]
 8010e34:	300c      	adds	r0, #12
 8010e36:	60a0      	str	r0, [r4, #8]
 8010e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e3c:	f7fe fe20 	bl	800fa80 <memset>
 8010e40:	4620      	mov	r0, r4
 8010e42:	bd70      	pop	{r4, r5, r6, pc}

08010e44 <__sfp_lock_acquire>:
 8010e44:	4801      	ldr	r0, [pc, #4]	; (8010e4c <__sfp_lock_acquire+0x8>)
 8010e46:	f000 bc22 	b.w	801168e <__retarget_lock_acquire_recursive>
 8010e4a:	bf00      	nop
 8010e4c:	20003494 	.word	0x20003494

08010e50 <__sfp_lock_release>:
 8010e50:	4801      	ldr	r0, [pc, #4]	; (8010e58 <__sfp_lock_release+0x8>)
 8010e52:	f000 bc1d 	b.w	8011690 <__retarget_lock_release_recursive>
 8010e56:	bf00      	nop
 8010e58:	20003494 	.word	0x20003494

08010e5c <__sinit_lock_acquire>:
 8010e5c:	4801      	ldr	r0, [pc, #4]	; (8010e64 <__sinit_lock_acquire+0x8>)
 8010e5e:	f000 bc16 	b.w	801168e <__retarget_lock_acquire_recursive>
 8010e62:	bf00      	nop
 8010e64:	2000348f 	.word	0x2000348f

08010e68 <__sinit_lock_release>:
 8010e68:	4801      	ldr	r0, [pc, #4]	; (8010e70 <__sinit_lock_release+0x8>)
 8010e6a:	f000 bc11 	b.w	8011690 <__retarget_lock_release_recursive>
 8010e6e:	bf00      	nop
 8010e70:	2000348f 	.word	0x2000348f

08010e74 <__sinit>:
 8010e74:	b510      	push	{r4, lr}
 8010e76:	4604      	mov	r4, r0
 8010e78:	f7ff fff0 	bl	8010e5c <__sinit_lock_acquire>
 8010e7c:	69a3      	ldr	r3, [r4, #24]
 8010e7e:	b11b      	cbz	r3, 8010e88 <__sinit+0x14>
 8010e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e84:	f7ff bff0 	b.w	8010e68 <__sinit_lock_release>
 8010e88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e8c:	6523      	str	r3, [r4, #80]	; 0x50
 8010e8e:	4b13      	ldr	r3, [pc, #76]	; (8010edc <__sinit+0x68>)
 8010e90:	4a13      	ldr	r2, [pc, #76]	; (8010ee0 <__sinit+0x6c>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e96:	42a3      	cmp	r3, r4
 8010e98:	bf04      	itt	eq
 8010e9a:	2301      	moveq	r3, #1
 8010e9c:	61a3      	streq	r3, [r4, #24]
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f000 f820 	bl	8010ee4 <__sfp>
 8010ea4:	6060      	str	r0, [r4, #4]
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f000 f81c 	bl	8010ee4 <__sfp>
 8010eac:	60a0      	str	r0, [r4, #8]
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f000 f818 	bl	8010ee4 <__sfp>
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	60e0      	str	r0, [r4, #12]
 8010eb8:	2104      	movs	r1, #4
 8010eba:	6860      	ldr	r0, [r4, #4]
 8010ebc:	f7ff ff82 	bl	8010dc4 <std>
 8010ec0:	68a0      	ldr	r0, [r4, #8]
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	2109      	movs	r1, #9
 8010ec6:	f7ff ff7d 	bl	8010dc4 <std>
 8010eca:	68e0      	ldr	r0, [r4, #12]
 8010ecc:	2202      	movs	r2, #2
 8010ece:	2112      	movs	r1, #18
 8010ed0:	f7ff ff78 	bl	8010dc4 <std>
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	61a3      	str	r3, [r4, #24]
 8010ed8:	e7d2      	b.n	8010e80 <__sinit+0xc>
 8010eda:	bf00      	nop
 8010edc:	080146d4 	.word	0x080146d4
 8010ee0:	08010e0d 	.word	0x08010e0d

08010ee4 <__sfp>:
 8010ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee6:	4607      	mov	r7, r0
 8010ee8:	f7ff ffac 	bl	8010e44 <__sfp_lock_acquire>
 8010eec:	4b1e      	ldr	r3, [pc, #120]	; (8010f68 <__sfp+0x84>)
 8010eee:	681e      	ldr	r6, [r3, #0]
 8010ef0:	69b3      	ldr	r3, [r6, #24]
 8010ef2:	b913      	cbnz	r3, 8010efa <__sfp+0x16>
 8010ef4:	4630      	mov	r0, r6
 8010ef6:	f7ff ffbd 	bl	8010e74 <__sinit>
 8010efa:	3648      	adds	r6, #72	; 0x48
 8010efc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f00:	3b01      	subs	r3, #1
 8010f02:	d503      	bpl.n	8010f0c <__sfp+0x28>
 8010f04:	6833      	ldr	r3, [r6, #0]
 8010f06:	b30b      	cbz	r3, 8010f4c <__sfp+0x68>
 8010f08:	6836      	ldr	r6, [r6, #0]
 8010f0a:	e7f7      	b.n	8010efc <__sfp+0x18>
 8010f0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f10:	b9d5      	cbnz	r5, 8010f48 <__sfp+0x64>
 8010f12:	4b16      	ldr	r3, [pc, #88]	; (8010f6c <__sfp+0x88>)
 8010f14:	60e3      	str	r3, [r4, #12]
 8010f16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010f1a:	6665      	str	r5, [r4, #100]	; 0x64
 8010f1c:	f000 fbb6 	bl	801168c <__retarget_lock_init_recursive>
 8010f20:	f7ff ff96 	bl	8010e50 <__sfp_lock_release>
 8010f24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f2c:	6025      	str	r5, [r4, #0]
 8010f2e:	61a5      	str	r5, [r4, #24]
 8010f30:	2208      	movs	r2, #8
 8010f32:	4629      	mov	r1, r5
 8010f34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f38:	f7fe fda2 	bl	800fa80 <memset>
 8010f3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f44:	4620      	mov	r0, r4
 8010f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f48:	3468      	adds	r4, #104	; 0x68
 8010f4a:	e7d9      	b.n	8010f00 <__sfp+0x1c>
 8010f4c:	2104      	movs	r1, #4
 8010f4e:	4638      	mov	r0, r7
 8010f50:	f7ff ff62 	bl	8010e18 <__sfmoreglue>
 8010f54:	4604      	mov	r4, r0
 8010f56:	6030      	str	r0, [r6, #0]
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d1d5      	bne.n	8010f08 <__sfp+0x24>
 8010f5c:	f7ff ff78 	bl	8010e50 <__sfp_lock_release>
 8010f60:	230c      	movs	r3, #12
 8010f62:	603b      	str	r3, [r7, #0]
 8010f64:	e7ee      	b.n	8010f44 <__sfp+0x60>
 8010f66:	bf00      	nop
 8010f68:	080146d4 	.word	0x080146d4
 8010f6c:	ffff0001 	.word	0xffff0001

08010f70 <_fwalk_reent>:
 8010f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f74:	4606      	mov	r6, r0
 8010f76:	4688      	mov	r8, r1
 8010f78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f7c:	2700      	movs	r7, #0
 8010f7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f82:	f1b9 0901 	subs.w	r9, r9, #1
 8010f86:	d505      	bpl.n	8010f94 <_fwalk_reent+0x24>
 8010f88:	6824      	ldr	r4, [r4, #0]
 8010f8a:	2c00      	cmp	r4, #0
 8010f8c:	d1f7      	bne.n	8010f7e <_fwalk_reent+0xe>
 8010f8e:	4638      	mov	r0, r7
 8010f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f94:	89ab      	ldrh	r3, [r5, #12]
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d907      	bls.n	8010faa <_fwalk_reent+0x3a>
 8010f9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	d003      	beq.n	8010faa <_fwalk_reent+0x3a>
 8010fa2:	4629      	mov	r1, r5
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	47c0      	blx	r8
 8010fa8:	4307      	orrs	r7, r0
 8010faa:	3568      	adds	r5, #104	; 0x68
 8010fac:	e7e9      	b.n	8010f82 <_fwalk_reent+0x12>

08010fae <rshift>:
 8010fae:	6903      	ldr	r3, [r0, #16]
 8010fb0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fb8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010fbc:	f100 0414 	add.w	r4, r0, #20
 8010fc0:	dd45      	ble.n	801104e <rshift+0xa0>
 8010fc2:	f011 011f 	ands.w	r1, r1, #31
 8010fc6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010fca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010fce:	d10c      	bne.n	8010fea <rshift+0x3c>
 8010fd0:	f100 0710 	add.w	r7, r0, #16
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	42b1      	cmp	r1, r6
 8010fd8:	d334      	bcc.n	8011044 <rshift+0x96>
 8010fda:	1a9b      	subs	r3, r3, r2
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	1eea      	subs	r2, r5, #3
 8010fe0:	4296      	cmp	r6, r2
 8010fe2:	bf38      	it	cc
 8010fe4:	2300      	movcc	r3, #0
 8010fe6:	4423      	add	r3, r4
 8010fe8:	e015      	b.n	8011016 <rshift+0x68>
 8010fea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010fee:	f1c1 0820 	rsb	r8, r1, #32
 8010ff2:	40cf      	lsrs	r7, r1
 8010ff4:	f105 0e04 	add.w	lr, r5, #4
 8010ff8:	46a1      	mov	r9, r4
 8010ffa:	4576      	cmp	r6, lr
 8010ffc:	46f4      	mov	ip, lr
 8010ffe:	d815      	bhi.n	801102c <rshift+0x7e>
 8011000:	1a9b      	subs	r3, r3, r2
 8011002:	009a      	lsls	r2, r3, #2
 8011004:	3a04      	subs	r2, #4
 8011006:	3501      	adds	r5, #1
 8011008:	42ae      	cmp	r6, r5
 801100a:	bf38      	it	cc
 801100c:	2200      	movcc	r2, #0
 801100e:	18a3      	adds	r3, r4, r2
 8011010:	50a7      	str	r7, [r4, r2]
 8011012:	b107      	cbz	r7, 8011016 <rshift+0x68>
 8011014:	3304      	adds	r3, #4
 8011016:	1b1a      	subs	r2, r3, r4
 8011018:	42a3      	cmp	r3, r4
 801101a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801101e:	bf08      	it	eq
 8011020:	2300      	moveq	r3, #0
 8011022:	6102      	str	r2, [r0, #16]
 8011024:	bf08      	it	eq
 8011026:	6143      	streq	r3, [r0, #20]
 8011028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801102c:	f8dc c000 	ldr.w	ip, [ip]
 8011030:	fa0c fc08 	lsl.w	ip, ip, r8
 8011034:	ea4c 0707 	orr.w	r7, ip, r7
 8011038:	f849 7b04 	str.w	r7, [r9], #4
 801103c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011040:	40cf      	lsrs	r7, r1
 8011042:	e7da      	b.n	8010ffa <rshift+0x4c>
 8011044:	f851 cb04 	ldr.w	ip, [r1], #4
 8011048:	f847 cf04 	str.w	ip, [r7, #4]!
 801104c:	e7c3      	b.n	8010fd6 <rshift+0x28>
 801104e:	4623      	mov	r3, r4
 8011050:	e7e1      	b.n	8011016 <rshift+0x68>

08011052 <__hexdig_fun>:
 8011052:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011056:	2b09      	cmp	r3, #9
 8011058:	d802      	bhi.n	8011060 <__hexdig_fun+0xe>
 801105a:	3820      	subs	r0, #32
 801105c:	b2c0      	uxtb	r0, r0
 801105e:	4770      	bx	lr
 8011060:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011064:	2b05      	cmp	r3, #5
 8011066:	d801      	bhi.n	801106c <__hexdig_fun+0x1a>
 8011068:	3847      	subs	r0, #71	; 0x47
 801106a:	e7f7      	b.n	801105c <__hexdig_fun+0xa>
 801106c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011070:	2b05      	cmp	r3, #5
 8011072:	d801      	bhi.n	8011078 <__hexdig_fun+0x26>
 8011074:	3827      	subs	r0, #39	; 0x27
 8011076:	e7f1      	b.n	801105c <__hexdig_fun+0xa>
 8011078:	2000      	movs	r0, #0
 801107a:	4770      	bx	lr

0801107c <__gethex>:
 801107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011080:	ed2d 8b02 	vpush	{d8}
 8011084:	b089      	sub	sp, #36	; 0x24
 8011086:	ee08 0a10 	vmov	s16, r0
 801108a:	9304      	str	r3, [sp, #16]
 801108c:	4bbc      	ldr	r3, [pc, #752]	; (8011380 <__gethex+0x304>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	4618      	mov	r0, r3
 8011094:	468b      	mov	fp, r1
 8011096:	4690      	mov	r8, r2
 8011098:	f7ef f8ac 	bl	80001f4 <strlen>
 801109c:	9b01      	ldr	r3, [sp, #4]
 801109e:	f8db 2000 	ldr.w	r2, [fp]
 80110a2:	4403      	add	r3, r0
 80110a4:	4682      	mov	sl, r0
 80110a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80110aa:	9305      	str	r3, [sp, #20]
 80110ac:	1c93      	adds	r3, r2, #2
 80110ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80110b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80110b6:	32fe      	adds	r2, #254	; 0xfe
 80110b8:	18d1      	adds	r1, r2, r3
 80110ba:	461f      	mov	r7, r3
 80110bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80110c0:	9100      	str	r1, [sp, #0]
 80110c2:	2830      	cmp	r0, #48	; 0x30
 80110c4:	d0f8      	beq.n	80110b8 <__gethex+0x3c>
 80110c6:	f7ff ffc4 	bl	8011052 <__hexdig_fun>
 80110ca:	4604      	mov	r4, r0
 80110cc:	2800      	cmp	r0, #0
 80110ce:	d13a      	bne.n	8011146 <__gethex+0xca>
 80110d0:	9901      	ldr	r1, [sp, #4]
 80110d2:	4652      	mov	r2, sl
 80110d4:	4638      	mov	r0, r7
 80110d6:	f7fe fe8a 	bl	800fdee <strncmp>
 80110da:	4605      	mov	r5, r0
 80110dc:	2800      	cmp	r0, #0
 80110de:	d168      	bne.n	80111b2 <__gethex+0x136>
 80110e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80110e4:	eb07 060a 	add.w	r6, r7, sl
 80110e8:	f7ff ffb3 	bl	8011052 <__hexdig_fun>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d062      	beq.n	80111b6 <__gethex+0x13a>
 80110f0:	4633      	mov	r3, r6
 80110f2:	7818      	ldrb	r0, [r3, #0]
 80110f4:	2830      	cmp	r0, #48	; 0x30
 80110f6:	461f      	mov	r7, r3
 80110f8:	f103 0301 	add.w	r3, r3, #1
 80110fc:	d0f9      	beq.n	80110f2 <__gethex+0x76>
 80110fe:	f7ff ffa8 	bl	8011052 <__hexdig_fun>
 8011102:	2301      	movs	r3, #1
 8011104:	fab0 f480 	clz	r4, r0
 8011108:	0964      	lsrs	r4, r4, #5
 801110a:	4635      	mov	r5, r6
 801110c:	9300      	str	r3, [sp, #0]
 801110e:	463a      	mov	r2, r7
 8011110:	4616      	mov	r6, r2
 8011112:	3201      	adds	r2, #1
 8011114:	7830      	ldrb	r0, [r6, #0]
 8011116:	f7ff ff9c 	bl	8011052 <__hexdig_fun>
 801111a:	2800      	cmp	r0, #0
 801111c:	d1f8      	bne.n	8011110 <__gethex+0x94>
 801111e:	9901      	ldr	r1, [sp, #4]
 8011120:	4652      	mov	r2, sl
 8011122:	4630      	mov	r0, r6
 8011124:	f7fe fe63 	bl	800fdee <strncmp>
 8011128:	b980      	cbnz	r0, 801114c <__gethex+0xd0>
 801112a:	b94d      	cbnz	r5, 8011140 <__gethex+0xc4>
 801112c:	eb06 050a 	add.w	r5, r6, sl
 8011130:	462a      	mov	r2, r5
 8011132:	4616      	mov	r6, r2
 8011134:	3201      	adds	r2, #1
 8011136:	7830      	ldrb	r0, [r6, #0]
 8011138:	f7ff ff8b 	bl	8011052 <__hexdig_fun>
 801113c:	2800      	cmp	r0, #0
 801113e:	d1f8      	bne.n	8011132 <__gethex+0xb6>
 8011140:	1bad      	subs	r5, r5, r6
 8011142:	00ad      	lsls	r5, r5, #2
 8011144:	e004      	b.n	8011150 <__gethex+0xd4>
 8011146:	2400      	movs	r4, #0
 8011148:	4625      	mov	r5, r4
 801114a:	e7e0      	b.n	801110e <__gethex+0x92>
 801114c:	2d00      	cmp	r5, #0
 801114e:	d1f7      	bne.n	8011140 <__gethex+0xc4>
 8011150:	7833      	ldrb	r3, [r6, #0]
 8011152:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011156:	2b50      	cmp	r3, #80	; 0x50
 8011158:	d13b      	bne.n	80111d2 <__gethex+0x156>
 801115a:	7873      	ldrb	r3, [r6, #1]
 801115c:	2b2b      	cmp	r3, #43	; 0x2b
 801115e:	d02c      	beq.n	80111ba <__gethex+0x13e>
 8011160:	2b2d      	cmp	r3, #45	; 0x2d
 8011162:	d02e      	beq.n	80111c2 <__gethex+0x146>
 8011164:	1c71      	adds	r1, r6, #1
 8011166:	f04f 0900 	mov.w	r9, #0
 801116a:	7808      	ldrb	r0, [r1, #0]
 801116c:	f7ff ff71 	bl	8011052 <__hexdig_fun>
 8011170:	1e43      	subs	r3, r0, #1
 8011172:	b2db      	uxtb	r3, r3
 8011174:	2b18      	cmp	r3, #24
 8011176:	d82c      	bhi.n	80111d2 <__gethex+0x156>
 8011178:	f1a0 0210 	sub.w	r2, r0, #16
 801117c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011180:	f7ff ff67 	bl	8011052 <__hexdig_fun>
 8011184:	1e43      	subs	r3, r0, #1
 8011186:	b2db      	uxtb	r3, r3
 8011188:	2b18      	cmp	r3, #24
 801118a:	d91d      	bls.n	80111c8 <__gethex+0x14c>
 801118c:	f1b9 0f00 	cmp.w	r9, #0
 8011190:	d000      	beq.n	8011194 <__gethex+0x118>
 8011192:	4252      	negs	r2, r2
 8011194:	4415      	add	r5, r2
 8011196:	f8cb 1000 	str.w	r1, [fp]
 801119a:	b1e4      	cbz	r4, 80111d6 <__gethex+0x15a>
 801119c:	9b00      	ldr	r3, [sp, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	bf14      	ite	ne
 80111a2:	2700      	movne	r7, #0
 80111a4:	2706      	moveq	r7, #6
 80111a6:	4638      	mov	r0, r7
 80111a8:	b009      	add	sp, #36	; 0x24
 80111aa:	ecbd 8b02 	vpop	{d8}
 80111ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111b2:	463e      	mov	r6, r7
 80111b4:	4625      	mov	r5, r4
 80111b6:	2401      	movs	r4, #1
 80111b8:	e7ca      	b.n	8011150 <__gethex+0xd4>
 80111ba:	f04f 0900 	mov.w	r9, #0
 80111be:	1cb1      	adds	r1, r6, #2
 80111c0:	e7d3      	b.n	801116a <__gethex+0xee>
 80111c2:	f04f 0901 	mov.w	r9, #1
 80111c6:	e7fa      	b.n	80111be <__gethex+0x142>
 80111c8:	230a      	movs	r3, #10
 80111ca:	fb03 0202 	mla	r2, r3, r2, r0
 80111ce:	3a10      	subs	r2, #16
 80111d0:	e7d4      	b.n	801117c <__gethex+0x100>
 80111d2:	4631      	mov	r1, r6
 80111d4:	e7df      	b.n	8011196 <__gethex+0x11a>
 80111d6:	1bf3      	subs	r3, r6, r7
 80111d8:	3b01      	subs	r3, #1
 80111da:	4621      	mov	r1, r4
 80111dc:	2b07      	cmp	r3, #7
 80111de:	dc0b      	bgt.n	80111f8 <__gethex+0x17c>
 80111e0:	ee18 0a10 	vmov	r0, s16
 80111e4:	f000 faea 	bl	80117bc <_Balloc>
 80111e8:	4604      	mov	r4, r0
 80111ea:	b940      	cbnz	r0, 80111fe <__gethex+0x182>
 80111ec:	4b65      	ldr	r3, [pc, #404]	; (8011384 <__gethex+0x308>)
 80111ee:	4602      	mov	r2, r0
 80111f0:	21de      	movs	r1, #222	; 0xde
 80111f2:	4865      	ldr	r0, [pc, #404]	; (8011388 <__gethex+0x30c>)
 80111f4:	f001 fc46 	bl	8012a84 <__assert_func>
 80111f8:	3101      	adds	r1, #1
 80111fa:	105b      	asrs	r3, r3, #1
 80111fc:	e7ee      	b.n	80111dc <__gethex+0x160>
 80111fe:	f100 0914 	add.w	r9, r0, #20
 8011202:	f04f 0b00 	mov.w	fp, #0
 8011206:	f1ca 0301 	rsb	r3, sl, #1
 801120a:	f8cd 9008 	str.w	r9, [sp, #8]
 801120e:	f8cd b000 	str.w	fp, [sp]
 8011212:	9306      	str	r3, [sp, #24]
 8011214:	42b7      	cmp	r7, r6
 8011216:	d340      	bcc.n	801129a <__gethex+0x21e>
 8011218:	9802      	ldr	r0, [sp, #8]
 801121a:	9b00      	ldr	r3, [sp, #0]
 801121c:	f840 3b04 	str.w	r3, [r0], #4
 8011220:	eba0 0009 	sub.w	r0, r0, r9
 8011224:	1080      	asrs	r0, r0, #2
 8011226:	0146      	lsls	r6, r0, #5
 8011228:	6120      	str	r0, [r4, #16]
 801122a:	4618      	mov	r0, r3
 801122c:	f000 fbbc 	bl	80119a8 <__hi0bits>
 8011230:	1a30      	subs	r0, r6, r0
 8011232:	f8d8 6000 	ldr.w	r6, [r8]
 8011236:	42b0      	cmp	r0, r6
 8011238:	dd63      	ble.n	8011302 <__gethex+0x286>
 801123a:	1b87      	subs	r7, r0, r6
 801123c:	4639      	mov	r1, r7
 801123e:	4620      	mov	r0, r4
 8011240:	f000 ff56 	bl	80120f0 <__any_on>
 8011244:	4682      	mov	sl, r0
 8011246:	b1a8      	cbz	r0, 8011274 <__gethex+0x1f8>
 8011248:	1e7b      	subs	r3, r7, #1
 801124a:	1159      	asrs	r1, r3, #5
 801124c:	f003 021f 	and.w	r2, r3, #31
 8011250:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011254:	f04f 0a01 	mov.w	sl, #1
 8011258:	fa0a f202 	lsl.w	r2, sl, r2
 801125c:	420a      	tst	r2, r1
 801125e:	d009      	beq.n	8011274 <__gethex+0x1f8>
 8011260:	4553      	cmp	r3, sl
 8011262:	dd05      	ble.n	8011270 <__gethex+0x1f4>
 8011264:	1eb9      	subs	r1, r7, #2
 8011266:	4620      	mov	r0, r4
 8011268:	f000 ff42 	bl	80120f0 <__any_on>
 801126c:	2800      	cmp	r0, #0
 801126e:	d145      	bne.n	80112fc <__gethex+0x280>
 8011270:	f04f 0a02 	mov.w	sl, #2
 8011274:	4639      	mov	r1, r7
 8011276:	4620      	mov	r0, r4
 8011278:	f7ff fe99 	bl	8010fae <rshift>
 801127c:	443d      	add	r5, r7
 801127e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011282:	42ab      	cmp	r3, r5
 8011284:	da4c      	bge.n	8011320 <__gethex+0x2a4>
 8011286:	ee18 0a10 	vmov	r0, s16
 801128a:	4621      	mov	r1, r4
 801128c:	f000 fad6 	bl	801183c <_Bfree>
 8011290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011292:	2300      	movs	r3, #0
 8011294:	6013      	str	r3, [r2, #0]
 8011296:	27a3      	movs	r7, #163	; 0xa3
 8011298:	e785      	b.n	80111a6 <__gethex+0x12a>
 801129a:	1e73      	subs	r3, r6, #1
 801129c:	9a05      	ldr	r2, [sp, #20]
 801129e:	9303      	str	r3, [sp, #12]
 80112a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80112a4:	4293      	cmp	r3, r2
 80112a6:	d019      	beq.n	80112dc <__gethex+0x260>
 80112a8:	f1bb 0f20 	cmp.w	fp, #32
 80112ac:	d107      	bne.n	80112be <__gethex+0x242>
 80112ae:	9b02      	ldr	r3, [sp, #8]
 80112b0:	9a00      	ldr	r2, [sp, #0]
 80112b2:	f843 2b04 	str.w	r2, [r3], #4
 80112b6:	9302      	str	r3, [sp, #8]
 80112b8:	2300      	movs	r3, #0
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	469b      	mov	fp, r3
 80112be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80112c2:	f7ff fec6 	bl	8011052 <__hexdig_fun>
 80112c6:	9b00      	ldr	r3, [sp, #0]
 80112c8:	f000 000f 	and.w	r0, r0, #15
 80112cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80112d0:	4303      	orrs	r3, r0
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	f10b 0b04 	add.w	fp, fp, #4
 80112d8:	9b03      	ldr	r3, [sp, #12]
 80112da:	e00d      	b.n	80112f8 <__gethex+0x27c>
 80112dc:	9b03      	ldr	r3, [sp, #12]
 80112de:	9a06      	ldr	r2, [sp, #24]
 80112e0:	4413      	add	r3, r2
 80112e2:	42bb      	cmp	r3, r7
 80112e4:	d3e0      	bcc.n	80112a8 <__gethex+0x22c>
 80112e6:	4618      	mov	r0, r3
 80112e8:	9901      	ldr	r1, [sp, #4]
 80112ea:	9307      	str	r3, [sp, #28]
 80112ec:	4652      	mov	r2, sl
 80112ee:	f7fe fd7e 	bl	800fdee <strncmp>
 80112f2:	9b07      	ldr	r3, [sp, #28]
 80112f4:	2800      	cmp	r0, #0
 80112f6:	d1d7      	bne.n	80112a8 <__gethex+0x22c>
 80112f8:	461e      	mov	r6, r3
 80112fa:	e78b      	b.n	8011214 <__gethex+0x198>
 80112fc:	f04f 0a03 	mov.w	sl, #3
 8011300:	e7b8      	b.n	8011274 <__gethex+0x1f8>
 8011302:	da0a      	bge.n	801131a <__gethex+0x29e>
 8011304:	1a37      	subs	r7, r6, r0
 8011306:	4621      	mov	r1, r4
 8011308:	ee18 0a10 	vmov	r0, s16
 801130c:	463a      	mov	r2, r7
 801130e:	f000 fcb1 	bl	8011c74 <__lshift>
 8011312:	1bed      	subs	r5, r5, r7
 8011314:	4604      	mov	r4, r0
 8011316:	f100 0914 	add.w	r9, r0, #20
 801131a:	f04f 0a00 	mov.w	sl, #0
 801131e:	e7ae      	b.n	801127e <__gethex+0x202>
 8011320:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011324:	42a8      	cmp	r0, r5
 8011326:	dd72      	ble.n	801140e <__gethex+0x392>
 8011328:	1b45      	subs	r5, r0, r5
 801132a:	42ae      	cmp	r6, r5
 801132c:	dc36      	bgt.n	801139c <__gethex+0x320>
 801132e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011332:	2b02      	cmp	r3, #2
 8011334:	d02a      	beq.n	801138c <__gethex+0x310>
 8011336:	2b03      	cmp	r3, #3
 8011338:	d02c      	beq.n	8011394 <__gethex+0x318>
 801133a:	2b01      	cmp	r3, #1
 801133c:	d115      	bne.n	801136a <__gethex+0x2ee>
 801133e:	42ae      	cmp	r6, r5
 8011340:	d113      	bne.n	801136a <__gethex+0x2ee>
 8011342:	2e01      	cmp	r6, #1
 8011344:	d10b      	bne.n	801135e <__gethex+0x2e2>
 8011346:	9a04      	ldr	r2, [sp, #16]
 8011348:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801134c:	6013      	str	r3, [r2, #0]
 801134e:	2301      	movs	r3, #1
 8011350:	6123      	str	r3, [r4, #16]
 8011352:	f8c9 3000 	str.w	r3, [r9]
 8011356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011358:	2762      	movs	r7, #98	; 0x62
 801135a:	601c      	str	r4, [r3, #0]
 801135c:	e723      	b.n	80111a6 <__gethex+0x12a>
 801135e:	1e71      	subs	r1, r6, #1
 8011360:	4620      	mov	r0, r4
 8011362:	f000 fec5 	bl	80120f0 <__any_on>
 8011366:	2800      	cmp	r0, #0
 8011368:	d1ed      	bne.n	8011346 <__gethex+0x2ca>
 801136a:	ee18 0a10 	vmov	r0, s16
 801136e:	4621      	mov	r1, r4
 8011370:	f000 fa64 	bl	801183c <_Bfree>
 8011374:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011376:	2300      	movs	r3, #0
 8011378:	6013      	str	r3, [r2, #0]
 801137a:	2750      	movs	r7, #80	; 0x50
 801137c:	e713      	b.n	80111a6 <__gethex+0x12a>
 801137e:	bf00      	nop
 8011380:	08014814 	.word	0x08014814
 8011384:	08014798 	.word	0x08014798
 8011388:	080147a9 	.word	0x080147a9
 801138c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801138e:	2b00      	cmp	r3, #0
 8011390:	d1eb      	bne.n	801136a <__gethex+0x2ee>
 8011392:	e7d8      	b.n	8011346 <__gethex+0x2ca>
 8011394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011396:	2b00      	cmp	r3, #0
 8011398:	d1d5      	bne.n	8011346 <__gethex+0x2ca>
 801139a:	e7e6      	b.n	801136a <__gethex+0x2ee>
 801139c:	1e6f      	subs	r7, r5, #1
 801139e:	f1ba 0f00 	cmp.w	sl, #0
 80113a2:	d131      	bne.n	8011408 <__gethex+0x38c>
 80113a4:	b127      	cbz	r7, 80113b0 <__gethex+0x334>
 80113a6:	4639      	mov	r1, r7
 80113a8:	4620      	mov	r0, r4
 80113aa:	f000 fea1 	bl	80120f0 <__any_on>
 80113ae:	4682      	mov	sl, r0
 80113b0:	117b      	asrs	r3, r7, #5
 80113b2:	2101      	movs	r1, #1
 80113b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80113b8:	f007 071f 	and.w	r7, r7, #31
 80113bc:	fa01 f707 	lsl.w	r7, r1, r7
 80113c0:	421f      	tst	r7, r3
 80113c2:	4629      	mov	r1, r5
 80113c4:	4620      	mov	r0, r4
 80113c6:	bf18      	it	ne
 80113c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80113cc:	1b76      	subs	r6, r6, r5
 80113ce:	f7ff fdee 	bl	8010fae <rshift>
 80113d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80113d6:	2702      	movs	r7, #2
 80113d8:	f1ba 0f00 	cmp.w	sl, #0
 80113dc:	d048      	beq.n	8011470 <__gethex+0x3f4>
 80113de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	d015      	beq.n	8011412 <__gethex+0x396>
 80113e6:	2b03      	cmp	r3, #3
 80113e8:	d017      	beq.n	801141a <__gethex+0x39e>
 80113ea:	2b01      	cmp	r3, #1
 80113ec:	d109      	bne.n	8011402 <__gethex+0x386>
 80113ee:	f01a 0f02 	tst.w	sl, #2
 80113f2:	d006      	beq.n	8011402 <__gethex+0x386>
 80113f4:	f8d9 0000 	ldr.w	r0, [r9]
 80113f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80113fc:	f01a 0f01 	tst.w	sl, #1
 8011400:	d10e      	bne.n	8011420 <__gethex+0x3a4>
 8011402:	f047 0710 	orr.w	r7, r7, #16
 8011406:	e033      	b.n	8011470 <__gethex+0x3f4>
 8011408:	f04f 0a01 	mov.w	sl, #1
 801140c:	e7d0      	b.n	80113b0 <__gethex+0x334>
 801140e:	2701      	movs	r7, #1
 8011410:	e7e2      	b.n	80113d8 <__gethex+0x35c>
 8011412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011414:	f1c3 0301 	rsb	r3, r3, #1
 8011418:	9315      	str	r3, [sp, #84]	; 0x54
 801141a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801141c:	2b00      	cmp	r3, #0
 801141e:	d0f0      	beq.n	8011402 <__gethex+0x386>
 8011420:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011424:	f104 0314 	add.w	r3, r4, #20
 8011428:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801142c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011430:	f04f 0c00 	mov.w	ip, #0
 8011434:	4618      	mov	r0, r3
 8011436:	f853 2b04 	ldr.w	r2, [r3], #4
 801143a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801143e:	d01c      	beq.n	801147a <__gethex+0x3fe>
 8011440:	3201      	adds	r2, #1
 8011442:	6002      	str	r2, [r0, #0]
 8011444:	2f02      	cmp	r7, #2
 8011446:	f104 0314 	add.w	r3, r4, #20
 801144a:	d13f      	bne.n	80114cc <__gethex+0x450>
 801144c:	f8d8 2000 	ldr.w	r2, [r8]
 8011450:	3a01      	subs	r2, #1
 8011452:	42b2      	cmp	r2, r6
 8011454:	d10a      	bne.n	801146c <__gethex+0x3f0>
 8011456:	1171      	asrs	r1, r6, #5
 8011458:	2201      	movs	r2, #1
 801145a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801145e:	f006 061f 	and.w	r6, r6, #31
 8011462:	fa02 f606 	lsl.w	r6, r2, r6
 8011466:	421e      	tst	r6, r3
 8011468:	bf18      	it	ne
 801146a:	4617      	movne	r7, r2
 801146c:	f047 0720 	orr.w	r7, r7, #32
 8011470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011472:	601c      	str	r4, [r3, #0]
 8011474:	9b04      	ldr	r3, [sp, #16]
 8011476:	601d      	str	r5, [r3, #0]
 8011478:	e695      	b.n	80111a6 <__gethex+0x12a>
 801147a:	4299      	cmp	r1, r3
 801147c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011480:	d8d8      	bhi.n	8011434 <__gethex+0x3b8>
 8011482:	68a3      	ldr	r3, [r4, #8]
 8011484:	459b      	cmp	fp, r3
 8011486:	db19      	blt.n	80114bc <__gethex+0x440>
 8011488:	6861      	ldr	r1, [r4, #4]
 801148a:	ee18 0a10 	vmov	r0, s16
 801148e:	3101      	adds	r1, #1
 8011490:	f000 f994 	bl	80117bc <_Balloc>
 8011494:	4681      	mov	r9, r0
 8011496:	b918      	cbnz	r0, 80114a0 <__gethex+0x424>
 8011498:	4b1a      	ldr	r3, [pc, #104]	; (8011504 <__gethex+0x488>)
 801149a:	4602      	mov	r2, r0
 801149c:	2184      	movs	r1, #132	; 0x84
 801149e:	e6a8      	b.n	80111f2 <__gethex+0x176>
 80114a0:	6922      	ldr	r2, [r4, #16]
 80114a2:	3202      	adds	r2, #2
 80114a4:	f104 010c 	add.w	r1, r4, #12
 80114a8:	0092      	lsls	r2, r2, #2
 80114aa:	300c      	adds	r0, #12
 80114ac:	f7fe fada 	bl	800fa64 <memcpy>
 80114b0:	4621      	mov	r1, r4
 80114b2:	ee18 0a10 	vmov	r0, s16
 80114b6:	f000 f9c1 	bl	801183c <_Bfree>
 80114ba:	464c      	mov	r4, r9
 80114bc:	6923      	ldr	r3, [r4, #16]
 80114be:	1c5a      	adds	r2, r3, #1
 80114c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80114c4:	6122      	str	r2, [r4, #16]
 80114c6:	2201      	movs	r2, #1
 80114c8:	615a      	str	r2, [r3, #20]
 80114ca:	e7bb      	b.n	8011444 <__gethex+0x3c8>
 80114cc:	6922      	ldr	r2, [r4, #16]
 80114ce:	455a      	cmp	r2, fp
 80114d0:	dd0b      	ble.n	80114ea <__gethex+0x46e>
 80114d2:	2101      	movs	r1, #1
 80114d4:	4620      	mov	r0, r4
 80114d6:	f7ff fd6a 	bl	8010fae <rshift>
 80114da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80114de:	3501      	adds	r5, #1
 80114e0:	42ab      	cmp	r3, r5
 80114e2:	f6ff aed0 	blt.w	8011286 <__gethex+0x20a>
 80114e6:	2701      	movs	r7, #1
 80114e8:	e7c0      	b.n	801146c <__gethex+0x3f0>
 80114ea:	f016 061f 	ands.w	r6, r6, #31
 80114ee:	d0fa      	beq.n	80114e6 <__gethex+0x46a>
 80114f0:	449a      	add	sl, r3
 80114f2:	f1c6 0620 	rsb	r6, r6, #32
 80114f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80114fa:	f000 fa55 	bl	80119a8 <__hi0bits>
 80114fe:	42b0      	cmp	r0, r6
 8011500:	dbe7      	blt.n	80114d2 <__gethex+0x456>
 8011502:	e7f0      	b.n	80114e6 <__gethex+0x46a>
 8011504:	08014798 	.word	0x08014798

08011508 <L_shift>:
 8011508:	f1c2 0208 	rsb	r2, r2, #8
 801150c:	0092      	lsls	r2, r2, #2
 801150e:	b570      	push	{r4, r5, r6, lr}
 8011510:	f1c2 0620 	rsb	r6, r2, #32
 8011514:	6843      	ldr	r3, [r0, #4]
 8011516:	6804      	ldr	r4, [r0, #0]
 8011518:	fa03 f506 	lsl.w	r5, r3, r6
 801151c:	432c      	orrs	r4, r5
 801151e:	40d3      	lsrs	r3, r2
 8011520:	6004      	str	r4, [r0, #0]
 8011522:	f840 3f04 	str.w	r3, [r0, #4]!
 8011526:	4288      	cmp	r0, r1
 8011528:	d3f4      	bcc.n	8011514 <L_shift+0xc>
 801152a:	bd70      	pop	{r4, r5, r6, pc}

0801152c <__match>:
 801152c:	b530      	push	{r4, r5, lr}
 801152e:	6803      	ldr	r3, [r0, #0]
 8011530:	3301      	adds	r3, #1
 8011532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011536:	b914      	cbnz	r4, 801153e <__match+0x12>
 8011538:	6003      	str	r3, [r0, #0]
 801153a:	2001      	movs	r0, #1
 801153c:	bd30      	pop	{r4, r5, pc}
 801153e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011542:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011546:	2d19      	cmp	r5, #25
 8011548:	bf98      	it	ls
 801154a:	3220      	addls	r2, #32
 801154c:	42a2      	cmp	r2, r4
 801154e:	d0f0      	beq.n	8011532 <__match+0x6>
 8011550:	2000      	movs	r0, #0
 8011552:	e7f3      	b.n	801153c <__match+0x10>

08011554 <__hexnan>:
 8011554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011558:	680b      	ldr	r3, [r1, #0]
 801155a:	6801      	ldr	r1, [r0, #0]
 801155c:	115e      	asrs	r6, r3, #5
 801155e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011562:	f013 031f 	ands.w	r3, r3, #31
 8011566:	b087      	sub	sp, #28
 8011568:	bf18      	it	ne
 801156a:	3604      	addne	r6, #4
 801156c:	2500      	movs	r5, #0
 801156e:	1f37      	subs	r7, r6, #4
 8011570:	4682      	mov	sl, r0
 8011572:	4690      	mov	r8, r2
 8011574:	9301      	str	r3, [sp, #4]
 8011576:	f846 5c04 	str.w	r5, [r6, #-4]
 801157a:	46b9      	mov	r9, r7
 801157c:	463c      	mov	r4, r7
 801157e:	9502      	str	r5, [sp, #8]
 8011580:	46ab      	mov	fp, r5
 8011582:	784a      	ldrb	r2, [r1, #1]
 8011584:	1c4b      	adds	r3, r1, #1
 8011586:	9303      	str	r3, [sp, #12]
 8011588:	b342      	cbz	r2, 80115dc <__hexnan+0x88>
 801158a:	4610      	mov	r0, r2
 801158c:	9105      	str	r1, [sp, #20]
 801158e:	9204      	str	r2, [sp, #16]
 8011590:	f7ff fd5f 	bl	8011052 <__hexdig_fun>
 8011594:	2800      	cmp	r0, #0
 8011596:	d14f      	bne.n	8011638 <__hexnan+0xe4>
 8011598:	9a04      	ldr	r2, [sp, #16]
 801159a:	9905      	ldr	r1, [sp, #20]
 801159c:	2a20      	cmp	r2, #32
 801159e:	d818      	bhi.n	80115d2 <__hexnan+0x7e>
 80115a0:	9b02      	ldr	r3, [sp, #8]
 80115a2:	459b      	cmp	fp, r3
 80115a4:	dd13      	ble.n	80115ce <__hexnan+0x7a>
 80115a6:	454c      	cmp	r4, r9
 80115a8:	d206      	bcs.n	80115b8 <__hexnan+0x64>
 80115aa:	2d07      	cmp	r5, #7
 80115ac:	dc04      	bgt.n	80115b8 <__hexnan+0x64>
 80115ae:	462a      	mov	r2, r5
 80115b0:	4649      	mov	r1, r9
 80115b2:	4620      	mov	r0, r4
 80115b4:	f7ff ffa8 	bl	8011508 <L_shift>
 80115b8:	4544      	cmp	r4, r8
 80115ba:	d950      	bls.n	801165e <__hexnan+0x10a>
 80115bc:	2300      	movs	r3, #0
 80115be:	f1a4 0904 	sub.w	r9, r4, #4
 80115c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80115c6:	f8cd b008 	str.w	fp, [sp, #8]
 80115ca:	464c      	mov	r4, r9
 80115cc:	461d      	mov	r5, r3
 80115ce:	9903      	ldr	r1, [sp, #12]
 80115d0:	e7d7      	b.n	8011582 <__hexnan+0x2e>
 80115d2:	2a29      	cmp	r2, #41	; 0x29
 80115d4:	d156      	bne.n	8011684 <__hexnan+0x130>
 80115d6:	3102      	adds	r1, #2
 80115d8:	f8ca 1000 	str.w	r1, [sl]
 80115dc:	f1bb 0f00 	cmp.w	fp, #0
 80115e0:	d050      	beq.n	8011684 <__hexnan+0x130>
 80115e2:	454c      	cmp	r4, r9
 80115e4:	d206      	bcs.n	80115f4 <__hexnan+0xa0>
 80115e6:	2d07      	cmp	r5, #7
 80115e8:	dc04      	bgt.n	80115f4 <__hexnan+0xa0>
 80115ea:	462a      	mov	r2, r5
 80115ec:	4649      	mov	r1, r9
 80115ee:	4620      	mov	r0, r4
 80115f0:	f7ff ff8a 	bl	8011508 <L_shift>
 80115f4:	4544      	cmp	r4, r8
 80115f6:	d934      	bls.n	8011662 <__hexnan+0x10e>
 80115f8:	f1a8 0204 	sub.w	r2, r8, #4
 80115fc:	4623      	mov	r3, r4
 80115fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8011602:	f842 1f04 	str.w	r1, [r2, #4]!
 8011606:	429f      	cmp	r7, r3
 8011608:	d2f9      	bcs.n	80115fe <__hexnan+0xaa>
 801160a:	1b3b      	subs	r3, r7, r4
 801160c:	f023 0303 	bic.w	r3, r3, #3
 8011610:	3304      	adds	r3, #4
 8011612:	3401      	adds	r4, #1
 8011614:	3e03      	subs	r6, #3
 8011616:	42b4      	cmp	r4, r6
 8011618:	bf88      	it	hi
 801161a:	2304      	movhi	r3, #4
 801161c:	4443      	add	r3, r8
 801161e:	2200      	movs	r2, #0
 8011620:	f843 2b04 	str.w	r2, [r3], #4
 8011624:	429f      	cmp	r7, r3
 8011626:	d2fb      	bcs.n	8011620 <__hexnan+0xcc>
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	b91b      	cbnz	r3, 8011634 <__hexnan+0xe0>
 801162c:	4547      	cmp	r7, r8
 801162e:	d127      	bne.n	8011680 <__hexnan+0x12c>
 8011630:	2301      	movs	r3, #1
 8011632:	603b      	str	r3, [r7, #0]
 8011634:	2005      	movs	r0, #5
 8011636:	e026      	b.n	8011686 <__hexnan+0x132>
 8011638:	3501      	adds	r5, #1
 801163a:	2d08      	cmp	r5, #8
 801163c:	f10b 0b01 	add.w	fp, fp, #1
 8011640:	dd06      	ble.n	8011650 <__hexnan+0xfc>
 8011642:	4544      	cmp	r4, r8
 8011644:	d9c3      	bls.n	80115ce <__hexnan+0x7a>
 8011646:	2300      	movs	r3, #0
 8011648:	f844 3c04 	str.w	r3, [r4, #-4]
 801164c:	2501      	movs	r5, #1
 801164e:	3c04      	subs	r4, #4
 8011650:	6822      	ldr	r2, [r4, #0]
 8011652:	f000 000f 	and.w	r0, r0, #15
 8011656:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801165a:	6022      	str	r2, [r4, #0]
 801165c:	e7b7      	b.n	80115ce <__hexnan+0x7a>
 801165e:	2508      	movs	r5, #8
 8011660:	e7b5      	b.n	80115ce <__hexnan+0x7a>
 8011662:	9b01      	ldr	r3, [sp, #4]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d0df      	beq.n	8011628 <__hexnan+0xd4>
 8011668:	f04f 32ff 	mov.w	r2, #4294967295
 801166c:	f1c3 0320 	rsb	r3, r3, #32
 8011670:	fa22 f303 	lsr.w	r3, r2, r3
 8011674:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011678:	401a      	ands	r2, r3
 801167a:	f846 2c04 	str.w	r2, [r6, #-4]
 801167e:	e7d3      	b.n	8011628 <__hexnan+0xd4>
 8011680:	3f04      	subs	r7, #4
 8011682:	e7d1      	b.n	8011628 <__hexnan+0xd4>
 8011684:	2004      	movs	r0, #4
 8011686:	b007      	add	sp, #28
 8011688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801168c <__retarget_lock_init_recursive>:
 801168c:	4770      	bx	lr

0801168e <__retarget_lock_acquire_recursive>:
 801168e:	4770      	bx	lr

08011690 <__retarget_lock_release_recursive>:
 8011690:	4770      	bx	lr
	...

08011694 <_lseek_r>:
 8011694:	b538      	push	{r3, r4, r5, lr}
 8011696:	4d07      	ldr	r5, [pc, #28]	; (80116b4 <_lseek_r+0x20>)
 8011698:	4604      	mov	r4, r0
 801169a:	4608      	mov	r0, r1
 801169c:	4611      	mov	r1, r2
 801169e:	2200      	movs	r2, #0
 80116a0:	602a      	str	r2, [r5, #0]
 80116a2:	461a      	mov	r2, r3
 80116a4:	f7f1 fa56 	bl	8002b54 <_lseek>
 80116a8:	1c43      	adds	r3, r0, #1
 80116aa:	d102      	bne.n	80116b2 <_lseek_r+0x1e>
 80116ac:	682b      	ldr	r3, [r5, #0]
 80116ae:	b103      	cbz	r3, 80116b2 <_lseek_r+0x1e>
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	bd38      	pop	{r3, r4, r5, pc}
 80116b4:	20003498 	.word	0x20003498

080116b8 <__swhatbuf_r>:
 80116b8:	b570      	push	{r4, r5, r6, lr}
 80116ba:	460e      	mov	r6, r1
 80116bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116c0:	2900      	cmp	r1, #0
 80116c2:	b096      	sub	sp, #88	; 0x58
 80116c4:	4614      	mov	r4, r2
 80116c6:	461d      	mov	r5, r3
 80116c8:	da07      	bge.n	80116da <__swhatbuf_r+0x22>
 80116ca:	2300      	movs	r3, #0
 80116cc:	602b      	str	r3, [r5, #0]
 80116ce:	89b3      	ldrh	r3, [r6, #12]
 80116d0:	061a      	lsls	r2, r3, #24
 80116d2:	d410      	bmi.n	80116f6 <__swhatbuf_r+0x3e>
 80116d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116d8:	e00e      	b.n	80116f8 <__swhatbuf_r+0x40>
 80116da:	466a      	mov	r2, sp
 80116dc:	f001 fa02 	bl	8012ae4 <_fstat_r>
 80116e0:	2800      	cmp	r0, #0
 80116e2:	dbf2      	blt.n	80116ca <__swhatbuf_r+0x12>
 80116e4:	9a01      	ldr	r2, [sp, #4]
 80116e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80116ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80116ee:	425a      	negs	r2, r3
 80116f0:	415a      	adcs	r2, r3
 80116f2:	602a      	str	r2, [r5, #0]
 80116f4:	e7ee      	b.n	80116d4 <__swhatbuf_r+0x1c>
 80116f6:	2340      	movs	r3, #64	; 0x40
 80116f8:	2000      	movs	r0, #0
 80116fa:	6023      	str	r3, [r4, #0]
 80116fc:	b016      	add	sp, #88	; 0x58
 80116fe:	bd70      	pop	{r4, r5, r6, pc}

08011700 <__smakebuf_r>:
 8011700:	898b      	ldrh	r3, [r1, #12]
 8011702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011704:	079d      	lsls	r5, r3, #30
 8011706:	4606      	mov	r6, r0
 8011708:	460c      	mov	r4, r1
 801170a:	d507      	bpl.n	801171c <__smakebuf_r+0x1c>
 801170c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011710:	6023      	str	r3, [r4, #0]
 8011712:	6123      	str	r3, [r4, #16]
 8011714:	2301      	movs	r3, #1
 8011716:	6163      	str	r3, [r4, #20]
 8011718:	b002      	add	sp, #8
 801171a:	bd70      	pop	{r4, r5, r6, pc}
 801171c:	ab01      	add	r3, sp, #4
 801171e:	466a      	mov	r2, sp
 8011720:	f7ff ffca 	bl	80116b8 <__swhatbuf_r>
 8011724:	9900      	ldr	r1, [sp, #0]
 8011726:	4605      	mov	r5, r0
 8011728:	4630      	mov	r0, r6
 801172a:	f7fe fa01 	bl	800fb30 <_malloc_r>
 801172e:	b948      	cbnz	r0, 8011744 <__smakebuf_r+0x44>
 8011730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011734:	059a      	lsls	r2, r3, #22
 8011736:	d4ef      	bmi.n	8011718 <__smakebuf_r+0x18>
 8011738:	f023 0303 	bic.w	r3, r3, #3
 801173c:	f043 0302 	orr.w	r3, r3, #2
 8011740:	81a3      	strh	r3, [r4, #12]
 8011742:	e7e3      	b.n	801170c <__smakebuf_r+0xc>
 8011744:	4b0d      	ldr	r3, [pc, #52]	; (801177c <__smakebuf_r+0x7c>)
 8011746:	62b3      	str	r3, [r6, #40]	; 0x28
 8011748:	89a3      	ldrh	r3, [r4, #12]
 801174a:	6020      	str	r0, [r4, #0]
 801174c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011750:	81a3      	strh	r3, [r4, #12]
 8011752:	9b00      	ldr	r3, [sp, #0]
 8011754:	6163      	str	r3, [r4, #20]
 8011756:	9b01      	ldr	r3, [sp, #4]
 8011758:	6120      	str	r0, [r4, #16]
 801175a:	b15b      	cbz	r3, 8011774 <__smakebuf_r+0x74>
 801175c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011760:	4630      	mov	r0, r6
 8011762:	f001 f9d1 	bl	8012b08 <_isatty_r>
 8011766:	b128      	cbz	r0, 8011774 <__smakebuf_r+0x74>
 8011768:	89a3      	ldrh	r3, [r4, #12]
 801176a:	f023 0303 	bic.w	r3, r3, #3
 801176e:	f043 0301 	orr.w	r3, r3, #1
 8011772:	81a3      	strh	r3, [r4, #12]
 8011774:	89a0      	ldrh	r0, [r4, #12]
 8011776:	4305      	orrs	r5, r0
 8011778:	81a5      	strh	r5, [r4, #12]
 801177a:	e7cd      	b.n	8011718 <__smakebuf_r+0x18>
 801177c:	08010e0d 	.word	0x08010e0d

08011780 <__ascii_mbtowc>:
 8011780:	b082      	sub	sp, #8
 8011782:	b901      	cbnz	r1, 8011786 <__ascii_mbtowc+0x6>
 8011784:	a901      	add	r1, sp, #4
 8011786:	b142      	cbz	r2, 801179a <__ascii_mbtowc+0x1a>
 8011788:	b14b      	cbz	r3, 801179e <__ascii_mbtowc+0x1e>
 801178a:	7813      	ldrb	r3, [r2, #0]
 801178c:	600b      	str	r3, [r1, #0]
 801178e:	7812      	ldrb	r2, [r2, #0]
 8011790:	1e10      	subs	r0, r2, #0
 8011792:	bf18      	it	ne
 8011794:	2001      	movne	r0, #1
 8011796:	b002      	add	sp, #8
 8011798:	4770      	bx	lr
 801179a:	4610      	mov	r0, r2
 801179c:	e7fb      	b.n	8011796 <__ascii_mbtowc+0x16>
 801179e:	f06f 0001 	mvn.w	r0, #1
 80117a2:	e7f8      	b.n	8011796 <__ascii_mbtowc+0x16>

080117a4 <__malloc_lock>:
 80117a4:	4801      	ldr	r0, [pc, #4]	; (80117ac <__malloc_lock+0x8>)
 80117a6:	f7ff bf72 	b.w	801168e <__retarget_lock_acquire_recursive>
 80117aa:	bf00      	nop
 80117ac:	20003490 	.word	0x20003490

080117b0 <__malloc_unlock>:
 80117b0:	4801      	ldr	r0, [pc, #4]	; (80117b8 <__malloc_unlock+0x8>)
 80117b2:	f7ff bf6d 	b.w	8011690 <__retarget_lock_release_recursive>
 80117b6:	bf00      	nop
 80117b8:	20003490 	.word	0x20003490

080117bc <_Balloc>:
 80117bc:	b570      	push	{r4, r5, r6, lr}
 80117be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80117c0:	4604      	mov	r4, r0
 80117c2:	460d      	mov	r5, r1
 80117c4:	b976      	cbnz	r6, 80117e4 <_Balloc+0x28>
 80117c6:	2010      	movs	r0, #16
 80117c8:	f7fe f93c 	bl	800fa44 <malloc>
 80117cc:	4602      	mov	r2, r0
 80117ce:	6260      	str	r0, [r4, #36]	; 0x24
 80117d0:	b920      	cbnz	r0, 80117dc <_Balloc+0x20>
 80117d2:	4b18      	ldr	r3, [pc, #96]	; (8011834 <_Balloc+0x78>)
 80117d4:	4818      	ldr	r0, [pc, #96]	; (8011838 <_Balloc+0x7c>)
 80117d6:	2166      	movs	r1, #102	; 0x66
 80117d8:	f001 f954 	bl	8012a84 <__assert_func>
 80117dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117e0:	6006      	str	r6, [r0, #0]
 80117e2:	60c6      	str	r6, [r0, #12]
 80117e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80117e6:	68f3      	ldr	r3, [r6, #12]
 80117e8:	b183      	cbz	r3, 801180c <_Balloc+0x50>
 80117ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80117f2:	b9b8      	cbnz	r0, 8011824 <_Balloc+0x68>
 80117f4:	2101      	movs	r1, #1
 80117f6:	fa01 f605 	lsl.w	r6, r1, r5
 80117fa:	1d72      	adds	r2, r6, #5
 80117fc:	0092      	lsls	r2, r2, #2
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 fc97 	bl	8012132 <_calloc_r>
 8011804:	b160      	cbz	r0, 8011820 <_Balloc+0x64>
 8011806:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801180a:	e00e      	b.n	801182a <_Balloc+0x6e>
 801180c:	2221      	movs	r2, #33	; 0x21
 801180e:	2104      	movs	r1, #4
 8011810:	4620      	mov	r0, r4
 8011812:	f000 fc8e 	bl	8012132 <_calloc_r>
 8011816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011818:	60f0      	str	r0, [r6, #12]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d1e4      	bne.n	80117ea <_Balloc+0x2e>
 8011820:	2000      	movs	r0, #0
 8011822:	bd70      	pop	{r4, r5, r6, pc}
 8011824:	6802      	ldr	r2, [r0, #0]
 8011826:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801182a:	2300      	movs	r3, #0
 801182c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011830:	e7f7      	b.n	8011822 <_Balloc+0x66>
 8011832:	bf00      	nop
 8011834:	08014828 	.word	0x08014828
 8011838:	0801483f 	.word	0x0801483f

0801183c <_Bfree>:
 801183c:	b570      	push	{r4, r5, r6, lr}
 801183e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011840:	4605      	mov	r5, r0
 8011842:	460c      	mov	r4, r1
 8011844:	b976      	cbnz	r6, 8011864 <_Bfree+0x28>
 8011846:	2010      	movs	r0, #16
 8011848:	f7fe f8fc 	bl	800fa44 <malloc>
 801184c:	4602      	mov	r2, r0
 801184e:	6268      	str	r0, [r5, #36]	; 0x24
 8011850:	b920      	cbnz	r0, 801185c <_Bfree+0x20>
 8011852:	4b09      	ldr	r3, [pc, #36]	; (8011878 <_Bfree+0x3c>)
 8011854:	4809      	ldr	r0, [pc, #36]	; (801187c <_Bfree+0x40>)
 8011856:	218a      	movs	r1, #138	; 0x8a
 8011858:	f001 f914 	bl	8012a84 <__assert_func>
 801185c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011860:	6006      	str	r6, [r0, #0]
 8011862:	60c6      	str	r6, [r0, #12]
 8011864:	b13c      	cbz	r4, 8011876 <_Bfree+0x3a>
 8011866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011868:	6862      	ldr	r2, [r4, #4]
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011870:	6021      	str	r1, [r4, #0]
 8011872:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011876:	bd70      	pop	{r4, r5, r6, pc}
 8011878:	08014828 	.word	0x08014828
 801187c:	0801483f 	.word	0x0801483f

08011880 <__multadd>:
 8011880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011884:	690e      	ldr	r6, [r1, #16]
 8011886:	4607      	mov	r7, r0
 8011888:	4698      	mov	r8, r3
 801188a:	460c      	mov	r4, r1
 801188c:	f101 0014 	add.w	r0, r1, #20
 8011890:	2300      	movs	r3, #0
 8011892:	6805      	ldr	r5, [r0, #0]
 8011894:	b2a9      	uxth	r1, r5
 8011896:	fb02 8101 	mla	r1, r2, r1, r8
 801189a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801189e:	0c2d      	lsrs	r5, r5, #16
 80118a0:	fb02 c505 	mla	r5, r2, r5, ip
 80118a4:	b289      	uxth	r1, r1
 80118a6:	3301      	adds	r3, #1
 80118a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80118ac:	429e      	cmp	r6, r3
 80118ae:	f840 1b04 	str.w	r1, [r0], #4
 80118b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80118b6:	dcec      	bgt.n	8011892 <__multadd+0x12>
 80118b8:	f1b8 0f00 	cmp.w	r8, #0
 80118bc:	d022      	beq.n	8011904 <__multadd+0x84>
 80118be:	68a3      	ldr	r3, [r4, #8]
 80118c0:	42b3      	cmp	r3, r6
 80118c2:	dc19      	bgt.n	80118f8 <__multadd+0x78>
 80118c4:	6861      	ldr	r1, [r4, #4]
 80118c6:	4638      	mov	r0, r7
 80118c8:	3101      	adds	r1, #1
 80118ca:	f7ff ff77 	bl	80117bc <_Balloc>
 80118ce:	4605      	mov	r5, r0
 80118d0:	b928      	cbnz	r0, 80118de <__multadd+0x5e>
 80118d2:	4602      	mov	r2, r0
 80118d4:	4b0d      	ldr	r3, [pc, #52]	; (801190c <__multadd+0x8c>)
 80118d6:	480e      	ldr	r0, [pc, #56]	; (8011910 <__multadd+0x90>)
 80118d8:	21b5      	movs	r1, #181	; 0xb5
 80118da:	f001 f8d3 	bl	8012a84 <__assert_func>
 80118de:	6922      	ldr	r2, [r4, #16]
 80118e0:	3202      	adds	r2, #2
 80118e2:	f104 010c 	add.w	r1, r4, #12
 80118e6:	0092      	lsls	r2, r2, #2
 80118e8:	300c      	adds	r0, #12
 80118ea:	f7fe f8bb 	bl	800fa64 <memcpy>
 80118ee:	4621      	mov	r1, r4
 80118f0:	4638      	mov	r0, r7
 80118f2:	f7ff ffa3 	bl	801183c <_Bfree>
 80118f6:	462c      	mov	r4, r5
 80118f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80118fc:	3601      	adds	r6, #1
 80118fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8011902:	6126      	str	r6, [r4, #16]
 8011904:	4620      	mov	r0, r4
 8011906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801190a:	bf00      	nop
 801190c:	08014798 	.word	0x08014798
 8011910:	0801483f 	.word	0x0801483f

08011914 <__s2b>:
 8011914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011918:	460c      	mov	r4, r1
 801191a:	4615      	mov	r5, r2
 801191c:	461f      	mov	r7, r3
 801191e:	2209      	movs	r2, #9
 8011920:	3308      	adds	r3, #8
 8011922:	4606      	mov	r6, r0
 8011924:	fb93 f3f2 	sdiv	r3, r3, r2
 8011928:	2100      	movs	r1, #0
 801192a:	2201      	movs	r2, #1
 801192c:	429a      	cmp	r2, r3
 801192e:	db09      	blt.n	8011944 <__s2b+0x30>
 8011930:	4630      	mov	r0, r6
 8011932:	f7ff ff43 	bl	80117bc <_Balloc>
 8011936:	b940      	cbnz	r0, 801194a <__s2b+0x36>
 8011938:	4602      	mov	r2, r0
 801193a:	4b19      	ldr	r3, [pc, #100]	; (80119a0 <__s2b+0x8c>)
 801193c:	4819      	ldr	r0, [pc, #100]	; (80119a4 <__s2b+0x90>)
 801193e:	21ce      	movs	r1, #206	; 0xce
 8011940:	f001 f8a0 	bl	8012a84 <__assert_func>
 8011944:	0052      	lsls	r2, r2, #1
 8011946:	3101      	adds	r1, #1
 8011948:	e7f0      	b.n	801192c <__s2b+0x18>
 801194a:	9b08      	ldr	r3, [sp, #32]
 801194c:	6143      	str	r3, [r0, #20]
 801194e:	2d09      	cmp	r5, #9
 8011950:	f04f 0301 	mov.w	r3, #1
 8011954:	6103      	str	r3, [r0, #16]
 8011956:	dd16      	ble.n	8011986 <__s2b+0x72>
 8011958:	f104 0909 	add.w	r9, r4, #9
 801195c:	46c8      	mov	r8, r9
 801195e:	442c      	add	r4, r5
 8011960:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011964:	4601      	mov	r1, r0
 8011966:	3b30      	subs	r3, #48	; 0x30
 8011968:	220a      	movs	r2, #10
 801196a:	4630      	mov	r0, r6
 801196c:	f7ff ff88 	bl	8011880 <__multadd>
 8011970:	45a0      	cmp	r8, r4
 8011972:	d1f5      	bne.n	8011960 <__s2b+0x4c>
 8011974:	f1a5 0408 	sub.w	r4, r5, #8
 8011978:	444c      	add	r4, r9
 801197a:	1b2d      	subs	r5, r5, r4
 801197c:	1963      	adds	r3, r4, r5
 801197e:	42bb      	cmp	r3, r7
 8011980:	db04      	blt.n	801198c <__s2b+0x78>
 8011982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011986:	340a      	adds	r4, #10
 8011988:	2509      	movs	r5, #9
 801198a:	e7f6      	b.n	801197a <__s2b+0x66>
 801198c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011990:	4601      	mov	r1, r0
 8011992:	3b30      	subs	r3, #48	; 0x30
 8011994:	220a      	movs	r2, #10
 8011996:	4630      	mov	r0, r6
 8011998:	f7ff ff72 	bl	8011880 <__multadd>
 801199c:	e7ee      	b.n	801197c <__s2b+0x68>
 801199e:	bf00      	nop
 80119a0:	08014798 	.word	0x08014798
 80119a4:	0801483f 	.word	0x0801483f

080119a8 <__hi0bits>:
 80119a8:	0c03      	lsrs	r3, r0, #16
 80119aa:	041b      	lsls	r3, r3, #16
 80119ac:	b9d3      	cbnz	r3, 80119e4 <__hi0bits+0x3c>
 80119ae:	0400      	lsls	r0, r0, #16
 80119b0:	2310      	movs	r3, #16
 80119b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80119b6:	bf04      	itt	eq
 80119b8:	0200      	lsleq	r0, r0, #8
 80119ba:	3308      	addeq	r3, #8
 80119bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80119c0:	bf04      	itt	eq
 80119c2:	0100      	lsleq	r0, r0, #4
 80119c4:	3304      	addeq	r3, #4
 80119c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80119ca:	bf04      	itt	eq
 80119cc:	0080      	lsleq	r0, r0, #2
 80119ce:	3302      	addeq	r3, #2
 80119d0:	2800      	cmp	r0, #0
 80119d2:	db05      	blt.n	80119e0 <__hi0bits+0x38>
 80119d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80119d8:	f103 0301 	add.w	r3, r3, #1
 80119dc:	bf08      	it	eq
 80119de:	2320      	moveq	r3, #32
 80119e0:	4618      	mov	r0, r3
 80119e2:	4770      	bx	lr
 80119e4:	2300      	movs	r3, #0
 80119e6:	e7e4      	b.n	80119b2 <__hi0bits+0xa>

080119e8 <__lo0bits>:
 80119e8:	6803      	ldr	r3, [r0, #0]
 80119ea:	f013 0207 	ands.w	r2, r3, #7
 80119ee:	4601      	mov	r1, r0
 80119f0:	d00b      	beq.n	8011a0a <__lo0bits+0x22>
 80119f2:	07da      	lsls	r2, r3, #31
 80119f4:	d424      	bmi.n	8011a40 <__lo0bits+0x58>
 80119f6:	0798      	lsls	r0, r3, #30
 80119f8:	bf49      	itett	mi
 80119fa:	085b      	lsrmi	r3, r3, #1
 80119fc:	089b      	lsrpl	r3, r3, #2
 80119fe:	2001      	movmi	r0, #1
 8011a00:	600b      	strmi	r3, [r1, #0]
 8011a02:	bf5c      	itt	pl
 8011a04:	600b      	strpl	r3, [r1, #0]
 8011a06:	2002      	movpl	r0, #2
 8011a08:	4770      	bx	lr
 8011a0a:	b298      	uxth	r0, r3
 8011a0c:	b9b0      	cbnz	r0, 8011a3c <__lo0bits+0x54>
 8011a0e:	0c1b      	lsrs	r3, r3, #16
 8011a10:	2010      	movs	r0, #16
 8011a12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011a16:	bf04      	itt	eq
 8011a18:	0a1b      	lsreq	r3, r3, #8
 8011a1a:	3008      	addeq	r0, #8
 8011a1c:	071a      	lsls	r2, r3, #28
 8011a1e:	bf04      	itt	eq
 8011a20:	091b      	lsreq	r3, r3, #4
 8011a22:	3004      	addeq	r0, #4
 8011a24:	079a      	lsls	r2, r3, #30
 8011a26:	bf04      	itt	eq
 8011a28:	089b      	lsreq	r3, r3, #2
 8011a2a:	3002      	addeq	r0, #2
 8011a2c:	07da      	lsls	r2, r3, #31
 8011a2e:	d403      	bmi.n	8011a38 <__lo0bits+0x50>
 8011a30:	085b      	lsrs	r3, r3, #1
 8011a32:	f100 0001 	add.w	r0, r0, #1
 8011a36:	d005      	beq.n	8011a44 <__lo0bits+0x5c>
 8011a38:	600b      	str	r3, [r1, #0]
 8011a3a:	4770      	bx	lr
 8011a3c:	4610      	mov	r0, r2
 8011a3e:	e7e8      	b.n	8011a12 <__lo0bits+0x2a>
 8011a40:	2000      	movs	r0, #0
 8011a42:	4770      	bx	lr
 8011a44:	2020      	movs	r0, #32
 8011a46:	4770      	bx	lr

08011a48 <__i2b>:
 8011a48:	b510      	push	{r4, lr}
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	2101      	movs	r1, #1
 8011a4e:	f7ff feb5 	bl	80117bc <_Balloc>
 8011a52:	4602      	mov	r2, r0
 8011a54:	b928      	cbnz	r0, 8011a62 <__i2b+0x1a>
 8011a56:	4b05      	ldr	r3, [pc, #20]	; (8011a6c <__i2b+0x24>)
 8011a58:	4805      	ldr	r0, [pc, #20]	; (8011a70 <__i2b+0x28>)
 8011a5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011a5e:	f001 f811 	bl	8012a84 <__assert_func>
 8011a62:	2301      	movs	r3, #1
 8011a64:	6144      	str	r4, [r0, #20]
 8011a66:	6103      	str	r3, [r0, #16]
 8011a68:	bd10      	pop	{r4, pc}
 8011a6a:	bf00      	nop
 8011a6c:	08014798 	.word	0x08014798
 8011a70:	0801483f 	.word	0x0801483f

08011a74 <__multiply>:
 8011a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a78:	4614      	mov	r4, r2
 8011a7a:	690a      	ldr	r2, [r1, #16]
 8011a7c:	6923      	ldr	r3, [r4, #16]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	bfb8      	it	lt
 8011a82:	460b      	movlt	r3, r1
 8011a84:	460d      	mov	r5, r1
 8011a86:	bfbc      	itt	lt
 8011a88:	4625      	movlt	r5, r4
 8011a8a:	461c      	movlt	r4, r3
 8011a8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011a90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011a94:	68ab      	ldr	r3, [r5, #8]
 8011a96:	6869      	ldr	r1, [r5, #4]
 8011a98:	eb0a 0709 	add.w	r7, sl, r9
 8011a9c:	42bb      	cmp	r3, r7
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	bfb8      	it	lt
 8011aa2:	3101      	addlt	r1, #1
 8011aa4:	f7ff fe8a 	bl	80117bc <_Balloc>
 8011aa8:	b930      	cbnz	r0, 8011ab8 <__multiply+0x44>
 8011aaa:	4602      	mov	r2, r0
 8011aac:	4b42      	ldr	r3, [pc, #264]	; (8011bb8 <__multiply+0x144>)
 8011aae:	4843      	ldr	r0, [pc, #268]	; (8011bbc <__multiply+0x148>)
 8011ab0:	f240 115d 	movw	r1, #349	; 0x15d
 8011ab4:	f000 ffe6 	bl	8012a84 <__assert_func>
 8011ab8:	f100 0614 	add.w	r6, r0, #20
 8011abc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011ac0:	4633      	mov	r3, r6
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	4543      	cmp	r3, r8
 8011ac6:	d31e      	bcc.n	8011b06 <__multiply+0x92>
 8011ac8:	f105 0c14 	add.w	ip, r5, #20
 8011acc:	f104 0314 	add.w	r3, r4, #20
 8011ad0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011ad4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011ad8:	9202      	str	r2, [sp, #8]
 8011ada:	ebac 0205 	sub.w	r2, ip, r5
 8011ade:	3a15      	subs	r2, #21
 8011ae0:	f022 0203 	bic.w	r2, r2, #3
 8011ae4:	3204      	adds	r2, #4
 8011ae6:	f105 0115 	add.w	r1, r5, #21
 8011aea:	458c      	cmp	ip, r1
 8011aec:	bf38      	it	cc
 8011aee:	2204      	movcc	r2, #4
 8011af0:	9201      	str	r2, [sp, #4]
 8011af2:	9a02      	ldr	r2, [sp, #8]
 8011af4:	9303      	str	r3, [sp, #12]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d808      	bhi.n	8011b0c <__multiply+0x98>
 8011afa:	2f00      	cmp	r7, #0
 8011afc:	dc55      	bgt.n	8011baa <__multiply+0x136>
 8011afe:	6107      	str	r7, [r0, #16]
 8011b00:	b005      	add	sp, #20
 8011b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b06:	f843 2b04 	str.w	r2, [r3], #4
 8011b0a:	e7db      	b.n	8011ac4 <__multiply+0x50>
 8011b0c:	f8b3 a000 	ldrh.w	sl, [r3]
 8011b10:	f1ba 0f00 	cmp.w	sl, #0
 8011b14:	d020      	beq.n	8011b58 <__multiply+0xe4>
 8011b16:	f105 0e14 	add.w	lr, r5, #20
 8011b1a:	46b1      	mov	r9, r6
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011b22:	f8d9 b000 	ldr.w	fp, [r9]
 8011b26:	b2a1      	uxth	r1, r4
 8011b28:	fa1f fb8b 	uxth.w	fp, fp
 8011b2c:	fb0a b101 	mla	r1, sl, r1, fp
 8011b30:	4411      	add	r1, r2
 8011b32:	f8d9 2000 	ldr.w	r2, [r9]
 8011b36:	0c24      	lsrs	r4, r4, #16
 8011b38:	0c12      	lsrs	r2, r2, #16
 8011b3a:	fb0a 2404 	mla	r4, sl, r4, r2
 8011b3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011b42:	b289      	uxth	r1, r1
 8011b44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011b48:	45f4      	cmp	ip, lr
 8011b4a:	f849 1b04 	str.w	r1, [r9], #4
 8011b4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011b52:	d8e4      	bhi.n	8011b1e <__multiply+0xaa>
 8011b54:	9901      	ldr	r1, [sp, #4]
 8011b56:	5072      	str	r2, [r6, r1]
 8011b58:	9a03      	ldr	r2, [sp, #12]
 8011b5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011b5e:	3304      	adds	r3, #4
 8011b60:	f1b9 0f00 	cmp.w	r9, #0
 8011b64:	d01f      	beq.n	8011ba6 <__multiply+0x132>
 8011b66:	6834      	ldr	r4, [r6, #0]
 8011b68:	f105 0114 	add.w	r1, r5, #20
 8011b6c:	46b6      	mov	lr, r6
 8011b6e:	f04f 0a00 	mov.w	sl, #0
 8011b72:	880a      	ldrh	r2, [r1, #0]
 8011b74:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011b78:	fb09 b202 	mla	r2, r9, r2, fp
 8011b7c:	4492      	add	sl, r2
 8011b7e:	b2a4      	uxth	r4, r4
 8011b80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011b84:	f84e 4b04 	str.w	r4, [lr], #4
 8011b88:	f851 4b04 	ldr.w	r4, [r1], #4
 8011b8c:	f8be 2000 	ldrh.w	r2, [lr]
 8011b90:	0c24      	lsrs	r4, r4, #16
 8011b92:	fb09 2404 	mla	r4, r9, r4, r2
 8011b96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011b9a:	458c      	cmp	ip, r1
 8011b9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011ba0:	d8e7      	bhi.n	8011b72 <__multiply+0xfe>
 8011ba2:	9a01      	ldr	r2, [sp, #4]
 8011ba4:	50b4      	str	r4, [r6, r2]
 8011ba6:	3604      	adds	r6, #4
 8011ba8:	e7a3      	b.n	8011af2 <__multiply+0x7e>
 8011baa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d1a5      	bne.n	8011afe <__multiply+0x8a>
 8011bb2:	3f01      	subs	r7, #1
 8011bb4:	e7a1      	b.n	8011afa <__multiply+0x86>
 8011bb6:	bf00      	nop
 8011bb8:	08014798 	.word	0x08014798
 8011bbc:	0801483f 	.word	0x0801483f

08011bc0 <__pow5mult>:
 8011bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bc4:	4615      	mov	r5, r2
 8011bc6:	f012 0203 	ands.w	r2, r2, #3
 8011bca:	4606      	mov	r6, r0
 8011bcc:	460f      	mov	r7, r1
 8011bce:	d007      	beq.n	8011be0 <__pow5mult+0x20>
 8011bd0:	4c25      	ldr	r4, [pc, #148]	; (8011c68 <__pow5mult+0xa8>)
 8011bd2:	3a01      	subs	r2, #1
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011bda:	f7ff fe51 	bl	8011880 <__multadd>
 8011bde:	4607      	mov	r7, r0
 8011be0:	10ad      	asrs	r5, r5, #2
 8011be2:	d03d      	beq.n	8011c60 <__pow5mult+0xa0>
 8011be4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011be6:	b97c      	cbnz	r4, 8011c08 <__pow5mult+0x48>
 8011be8:	2010      	movs	r0, #16
 8011bea:	f7fd ff2b 	bl	800fa44 <malloc>
 8011bee:	4602      	mov	r2, r0
 8011bf0:	6270      	str	r0, [r6, #36]	; 0x24
 8011bf2:	b928      	cbnz	r0, 8011c00 <__pow5mult+0x40>
 8011bf4:	4b1d      	ldr	r3, [pc, #116]	; (8011c6c <__pow5mult+0xac>)
 8011bf6:	481e      	ldr	r0, [pc, #120]	; (8011c70 <__pow5mult+0xb0>)
 8011bf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011bfc:	f000 ff42 	bl	8012a84 <__assert_func>
 8011c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c04:	6004      	str	r4, [r0, #0]
 8011c06:	60c4      	str	r4, [r0, #12]
 8011c08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c10:	b94c      	cbnz	r4, 8011c26 <__pow5mult+0x66>
 8011c12:	f240 2171 	movw	r1, #625	; 0x271
 8011c16:	4630      	mov	r0, r6
 8011c18:	f7ff ff16 	bl	8011a48 <__i2b>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c22:	4604      	mov	r4, r0
 8011c24:	6003      	str	r3, [r0, #0]
 8011c26:	f04f 0900 	mov.w	r9, #0
 8011c2a:	07eb      	lsls	r3, r5, #31
 8011c2c:	d50a      	bpl.n	8011c44 <__pow5mult+0x84>
 8011c2e:	4639      	mov	r1, r7
 8011c30:	4622      	mov	r2, r4
 8011c32:	4630      	mov	r0, r6
 8011c34:	f7ff ff1e 	bl	8011a74 <__multiply>
 8011c38:	4639      	mov	r1, r7
 8011c3a:	4680      	mov	r8, r0
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	f7ff fdfd 	bl	801183c <_Bfree>
 8011c42:	4647      	mov	r7, r8
 8011c44:	106d      	asrs	r5, r5, #1
 8011c46:	d00b      	beq.n	8011c60 <__pow5mult+0xa0>
 8011c48:	6820      	ldr	r0, [r4, #0]
 8011c4a:	b938      	cbnz	r0, 8011c5c <__pow5mult+0x9c>
 8011c4c:	4622      	mov	r2, r4
 8011c4e:	4621      	mov	r1, r4
 8011c50:	4630      	mov	r0, r6
 8011c52:	f7ff ff0f 	bl	8011a74 <__multiply>
 8011c56:	6020      	str	r0, [r4, #0]
 8011c58:	f8c0 9000 	str.w	r9, [r0]
 8011c5c:	4604      	mov	r4, r0
 8011c5e:	e7e4      	b.n	8011c2a <__pow5mult+0x6a>
 8011c60:	4638      	mov	r0, r7
 8011c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c66:	bf00      	nop
 8011c68:	08014990 	.word	0x08014990
 8011c6c:	08014828 	.word	0x08014828
 8011c70:	0801483f 	.word	0x0801483f

08011c74 <__lshift>:
 8011c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c78:	460c      	mov	r4, r1
 8011c7a:	6849      	ldr	r1, [r1, #4]
 8011c7c:	6923      	ldr	r3, [r4, #16]
 8011c7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011c82:	68a3      	ldr	r3, [r4, #8]
 8011c84:	4607      	mov	r7, r0
 8011c86:	4691      	mov	r9, r2
 8011c88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011c8c:	f108 0601 	add.w	r6, r8, #1
 8011c90:	42b3      	cmp	r3, r6
 8011c92:	db0b      	blt.n	8011cac <__lshift+0x38>
 8011c94:	4638      	mov	r0, r7
 8011c96:	f7ff fd91 	bl	80117bc <_Balloc>
 8011c9a:	4605      	mov	r5, r0
 8011c9c:	b948      	cbnz	r0, 8011cb2 <__lshift+0x3e>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	4b28      	ldr	r3, [pc, #160]	; (8011d44 <__lshift+0xd0>)
 8011ca2:	4829      	ldr	r0, [pc, #164]	; (8011d48 <__lshift+0xd4>)
 8011ca4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011ca8:	f000 feec 	bl	8012a84 <__assert_func>
 8011cac:	3101      	adds	r1, #1
 8011cae:	005b      	lsls	r3, r3, #1
 8011cb0:	e7ee      	b.n	8011c90 <__lshift+0x1c>
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	f100 0114 	add.w	r1, r0, #20
 8011cb8:	f100 0210 	add.w	r2, r0, #16
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	4553      	cmp	r3, sl
 8011cc0:	db33      	blt.n	8011d2a <__lshift+0xb6>
 8011cc2:	6920      	ldr	r0, [r4, #16]
 8011cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011cc8:	f104 0314 	add.w	r3, r4, #20
 8011ccc:	f019 091f 	ands.w	r9, r9, #31
 8011cd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011cd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011cd8:	d02b      	beq.n	8011d32 <__lshift+0xbe>
 8011cda:	f1c9 0e20 	rsb	lr, r9, #32
 8011cde:	468a      	mov	sl, r1
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	6818      	ldr	r0, [r3, #0]
 8011ce4:	fa00 f009 	lsl.w	r0, r0, r9
 8011ce8:	4302      	orrs	r2, r0
 8011cea:	f84a 2b04 	str.w	r2, [sl], #4
 8011cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cf2:	459c      	cmp	ip, r3
 8011cf4:	fa22 f20e 	lsr.w	r2, r2, lr
 8011cf8:	d8f3      	bhi.n	8011ce2 <__lshift+0x6e>
 8011cfa:	ebac 0304 	sub.w	r3, ip, r4
 8011cfe:	3b15      	subs	r3, #21
 8011d00:	f023 0303 	bic.w	r3, r3, #3
 8011d04:	3304      	adds	r3, #4
 8011d06:	f104 0015 	add.w	r0, r4, #21
 8011d0a:	4584      	cmp	ip, r0
 8011d0c:	bf38      	it	cc
 8011d0e:	2304      	movcc	r3, #4
 8011d10:	50ca      	str	r2, [r1, r3]
 8011d12:	b10a      	cbz	r2, 8011d18 <__lshift+0xa4>
 8011d14:	f108 0602 	add.w	r6, r8, #2
 8011d18:	3e01      	subs	r6, #1
 8011d1a:	4638      	mov	r0, r7
 8011d1c:	612e      	str	r6, [r5, #16]
 8011d1e:	4621      	mov	r1, r4
 8011d20:	f7ff fd8c 	bl	801183c <_Bfree>
 8011d24:	4628      	mov	r0, r5
 8011d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011d2e:	3301      	adds	r3, #1
 8011d30:	e7c5      	b.n	8011cbe <__lshift+0x4a>
 8011d32:	3904      	subs	r1, #4
 8011d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d38:	f841 2f04 	str.w	r2, [r1, #4]!
 8011d3c:	459c      	cmp	ip, r3
 8011d3e:	d8f9      	bhi.n	8011d34 <__lshift+0xc0>
 8011d40:	e7ea      	b.n	8011d18 <__lshift+0xa4>
 8011d42:	bf00      	nop
 8011d44:	08014798 	.word	0x08014798
 8011d48:	0801483f 	.word	0x0801483f

08011d4c <__mcmp>:
 8011d4c:	b530      	push	{r4, r5, lr}
 8011d4e:	6902      	ldr	r2, [r0, #16]
 8011d50:	690c      	ldr	r4, [r1, #16]
 8011d52:	1b12      	subs	r2, r2, r4
 8011d54:	d10e      	bne.n	8011d74 <__mcmp+0x28>
 8011d56:	f100 0314 	add.w	r3, r0, #20
 8011d5a:	3114      	adds	r1, #20
 8011d5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011d60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011d64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011d68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011d6c:	42a5      	cmp	r5, r4
 8011d6e:	d003      	beq.n	8011d78 <__mcmp+0x2c>
 8011d70:	d305      	bcc.n	8011d7e <__mcmp+0x32>
 8011d72:	2201      	movs	r2, #1
 8011d74:	4610      	mov	r0, r2
 8011d76:	bd30      	pop	{r4, r5, pc}
 8011d78:	4283      	cmp	r3, r0
 8011d7a:	d3f3      	bcc.n	8011d64 <__mcmp+0x18>
 8011d7c:	e7fa      	b.n	8011d74 <__mcmp+0x28>
 8011d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8011d82:	e7f7      	b.n	8011d74 <__mcmp+0x28>

08011d84 <__mdiff>:
 8011d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d88:	460c      	mov	r4, r1
 8011d8a:	4606      	mov	r6, r0
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	4620      	mov	r0, r4
 8011d90:	4617      	mov	r7, r2
 8011d92:	f7ff ffdb 	bl	8011d4c <__mcmp>
 8011d96:	1e05      	subs	r5, r0, #0
 8011d98:	d110      	bne.n	8011dbc <__mdiff+0x38>
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	f7ff fd0d 	bl	80117bc <_Balloc>
 8011da2:	b930      	cbnz	r0, 8011db2 <__mdiff+0x2e>
 8011da4:	4b39      	ldr	r3, [pc, #228]	; (8011e8c <__mdiff+0x108>)
 8011da6:	4602      	mov	r2, r0
 8011da8:	f240 2132 	movw	r1, #562	; 0x232
 8011dac:	4838      	ldr	r0, [pc, #224]	; (8011e90 <__mdiff+0x10c>)
 8011dae:	f000 fe69 	bl	8012a84 <__assert_func>
 8011db2:	2301      	movs	r3, #1
 8011db4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dbc:	bfa4      	itt	ge
 8011dbe:	463b      	movge	r3, r7
 8011dc0:	4627      	movge	r7, r4
 8011dc2:	4630      	mov	r0, r6
 8011dc4:	6879      	ldr	r1, [r7, #4]
 8011dc6:	bfa6      	itte	ge
 8011dc8:	461c      	movge	r4, r3
 8011dca:	2500      	movge	r5, #0
 8011dcc:	2501      	movlt	r5, #1
 8011dce:	f7ff fcf5 	bl	80117bc <_Balloc>
 8011dd2:	b920      	cbnz	r0, 8011dde <__mdiff+0x5a>
 8011dd4:	4b2d      	ldr	r3, [pc, #180]	; (8011e8c <__mdiff+0x108>)
 8011dd6:	4602      	mov	r2, r0
 8011dd8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011ddc:	e7e6      	b.n	8011dac <__mdiff+0x28>
 8011dde:	693e      	ldr	r6, [r7, #16]
 8011de0:	60c5      	str	r5, [r0, #12]
 8011de2:	6925      	ldr	r5, [r4, #16]
 8011de4:	f107 0114 	add.w	r1, r7, #20
 8011de8:	f104 0914 	add.w	r9, r4, #20
 8011dec:	f100 0e14 	add.w	lr, r0, #20
 8011df0:	f107 0210 	add.w	r2, r7, #16
 8011df4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011df8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011dfc:	46f2      	mov	sl, lr
 8011dfe:	2700      	movs	r7, #0
 8011e00:	f859 3b04 	ldr.w	r3, [r9], #4
 8011e04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011e08:	fa1f f883 	uxth.w	r8, r3
 8011e0c:	fa17 f78b 	uxtah	r7, r7, fp
 8011e10:	0c1b      	lsrs	r3, r3, #16
 8011e12:	eba7 0808 	sub.w	r8, r7, r8
 8011e16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011e1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011e1e:	fa1f f888 	uxth.w	r8, r8
 8011e22:	141f      	asrs	r7, r3, #16
 8011e24:	454d      	cmp	r5, r9
 8011e26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011e2a:	f84a 3b04 	str.w	r3, [sl], #4
 8011e2e:	d8e7      	bhi.n	8011e00 <__mdiff+0x7c>
 8011e30:	1b2b      	subs	r3, r5, r4
 8011e32:	3b15      	subs	r3, #21
 8011e34:	f023 0303 	bic.w	r3, r3, #3
 8011e38:	3304      	adds	r3, #4
 8011e3a:	3415      	adds	r4, #21
 8011e3c:	42a5      	cmp	r5, r4
 8011e3e:	bf38      	it	cc
 8011e40:	2304      	movcc	r3, #4
 8011e42:	4419      	add	r1, r3
 8011e44:	4473      	add	r3, lr
 8011e46:	469e      	mov	lr, r3
 8011e48:	460d      	mov	r5, r1
 8011e4a:	4565      	cmp	r5, ip
 8011e4c:	d30e      	bcc.n	8011e6c <__mdiff+0xe8>
 8011e4e:	f10c 0203 	add.w	r2, ip, #3
 8011e52:	1a52      	subs	r2, r2, r1
 8011e54:	f022 0203 	bic.w	r2, r2, #3
 8011e58:	3903      	subs	r1, #3
 8011e5a:	458c      	cmp	ip, r1
 8011e5c:	bf38      	it	cc
 8011e5e:	2200      	movcc	r2, #0
 8011e60:	441a      	add	r2, r3
 8011e62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011e66:	b17b      	cbz	r3, 8011e88 <__mdiff+0x104>
 8011e68:	6106      	str	r6, [r0, #16]
 8011e6a:	e7a5      	b.n	8011db8 <__mdiff+0x34>
 8011e6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8011e70:	fa17 f488 	uxtah	r4, r7, r8
 8011e74:	1422      	asrs	r2, r4, #16
 8011e76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011e7a:	b2a4      	uxth	r4, r4
 8011e7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011e80:	f84e 4b04 	str.w	r4, [lr], #4
 8011e84:	1417      	asrs	r7, r2, #16
 8011e86:	e7e0      	b.n	8011e4a <__mdiff+0xc6>
 8011e88:	3e01      	subs	r6, #1
 8011e8a:	e7ea      	b.n	8011e62 <__mdiff+0xde>
 8011e8c:	08014798 	.word	0x08014798
 8011e90:	0801483f 	.word	0x0801483f

08011e94 <__ulp>:
 8011e94:	b082      	sub	sp, #8
 8011e96:	ed8d 0b00 	vstr	d0, [sp]
 8011e9a:	9b01      	ldr	r3, [sp, #4]
 8011e9c:	4912      	ldr	r1, [pc, #72]	; (8011ee8 <__ulp+0x54>)
 8011e9e:	4019      	ands	r1, r3
 8011ea0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011ea4:	2900      	cmp	r1, #0
 8011ea6:	dd05      	ble.n	8011eb4 <__ulp+0x20>
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	460b      	mov	r3, r1
 8011eac:	ec43 2b10 	vmov	d0, r2, r3
 8011eb0:	b002      	add	sp, #8
 8011eb2:	4770      	bx	lr
 8011eb4:	4249      	negs	r1, r1
 8011eb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011eba:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011ebe:	f04f 0200 	mov.w	r2, #0
 8011ec2:	f04f 0300 	mov.w	r3, #0
 8011ec6:	da04      	bge.n	8011ed2 <__ulp+0x3e>
 8011ec8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011ecc:	fa41 f300 	asr.w	r3, r1, r0
 8011ed0:	e7ec      	b.n	8011eac <__ulp+0x18>
 8011ed2:	f1a0 0114 	sub.w	r1, r0, #20
 8011ed6:	291e      	cmp	r1, #30
 8011ed8:	bfda      	itte	le
 8011eda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011ede:	fa20 f101 	lsrle.w	r1, r0, r1
 8011ee2:	2101      	movgt	r1, #1
 8011ee4:	460a      	mov	r2, r1
 8011ee6:	e7e1      	b.n	8011eac <__ulp+0x18>
 8011ee8:	7ff00000 	.word	0x7ff00000

08011eec <__b2d>:
 8011eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eee:	6905      	ldr	r5, [r0, #16]
 8011ef0:	f100 0714 	add.w	r7, r0, #20
 8011ef4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011ef8:	1f2e      	subs	r6, r5, #4
 8011efa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011efe:	4620      	mov	r0, r4
 8011f00:	f7ff fd52 	bl	80119a8 <__hi0bits>
 8011f04:	f1c0 0320 	rsb	r3, r0, #32
 8011f08:	280a      	cmp	r0, #10
 8011f0a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011f88 <__b2d+0x9c>
 8011f0e:	600b      	str	r3, [r1, #0]
 8011f10:	dc14      	bgt.n	8011f3c <__b2d+0x50>
 8011f12:	f1c0 0e0b 	rsb	lr, r0, #11
 8011f16:	fa24 f10e 	lsr.w	r1, r4, lr
 8011f1a:	42b7      	cmp	r7, r6
 8011f1c:	ea41 030c 	orr.w	r3, r1, ip
 8011f20:	bf34      	ite	cc
 8011f22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011f26:	2100      	movcs	r1, #0
 8011f28:	3015      	adds	r0, #21
 8011f2a:	fa04 f000 	lsl.w	r0, r4, r0
 8011f2e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011f32:	ea40 0201 	orr.w	r2, r0, r1
 8011f36:	ec43 2b10 	vmov	d0, r2, r3
 8011f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f3c:	42b7      	cmp	r7, r6
 8011f3e:	bf3a      	itte	cc
 8011f40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011f44:	f1a5 0608 	subcc.w	r6, r5, #8
 8011f48:	2100      	movcs	r1, #0
 8011f4a:	380b      	subs	r0, #11
 8011f4c:	d017      	beq.n	8011f7e <__b2d+0x92>
 8011f4e:	f1c0 0c20 	rsb	ip, r0, #32
 8011f52:	fa04 f500 	lsl.w	r5, r4, r0
 8011f56:	42be      	cmp	r6, r7
 8011f58:	fa21 f40c 	lsr.w	r4, r1, ip
 8011f5c:	ea45 0504 	orr.w	r5, r5, r4
 8011f60:	bf8c      	ite	hi
 8011f62:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011f66:	2400      	movls	r4, #0
 8011f68:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011f6c:	fa01 f000 	lsl.w	r0, r1, r0
 8011f70:	fa24 f40c 	lsr.w	r4, r4, ip
 8011f74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011f78:	ea40 0204 	orr.w	r2, r0, r4
 8011f7c:	e7db      	b.n	8011f36 <__b2d+0x4a>
 8011f7e:	ea44 030c 	orr.w	r3, r4, ip
 8011f82:	460a      	mov	r2, r1
 8011f84:	e7d7      	b.n	8011f36 <__b2d+0x4a>
 8011f86:	bf00      	nop
 8011f88:	3ff00000 	.word	0x3ff00000

08011f8c <__d2b>:
 8011f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f90:	4689      	mov	r9, r1
 8011f92:	2101      	movs	r1, #1
 8011f94:	ec57 6b10 	vmov	r6, r7, d0
 8011f98:	4690      	mov	r8, r2
 8011f9a:	f7ff fc0f 	bl	80117bc <_Balloc>
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	b930      	cbnz	r0, 8011fb0 <__d2b+0x24>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	4b25      	ldr	r3, [pc, #148]	; (801203c <__d2b+0xb0>)
 8011fa6:	4826      	ldr	r0, [pc, #152]	; (8012040 <__d2b+0xb4>)
 8011fa8:	f240 310a 	movw	r1, #778	; 0x30a
 8011fac:	f000 fd6a 	bl	8012a84 <__assert_func>
 8011fb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011fb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011fb8:	bb35      	cbnz	r5, 8012008 <__d2b+0x7c>
 8011fba:	2e00      	cmp	r6, #0
 8011fbc:	9301      	str	r3, [sp, #4]
 8011fbe:	d028      	beq.n	8012012 <__d2b+0x86>
 8011fc0:	4668      	mov	r0, sp
 8011fc2:	9600      	str	r6, [sp, #0]
 8011fc4:	f7ff fd10 	bl	80119e8 <__lo0bits>
 8011fc8:	9900      	ldr	r1, [sp, #0]
 8011fca:	b300      	cbz	r0, 801200e <__d2b+0x82>
 8011fcc:	9a01      	ldr	r2, [sp, #4]
 8011fce:	f1c0 0320 	rsb	r3, r0, #32
 8011fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8011fd6:	430b      	orrs	r3, r1
 8011fd8:	40c2      	lsrs	r2, r0
 8011fda:	6163      	str	r3, [r4, #20]
 8011fdc:	9201      	str	r2, [sp, #4]
 8011fde:	9b01      	ldr	r3, [sp, #4]
 8011fe0:	61a3      	str	r3, [r4, #24]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	bf14      	ite	ne
 8011fe6:	2202      	movne	r2, #2
 8011fe8:	2201      	moveq	r2, #1
 8011fea:	6122      	str	r2, [r4, #16]
 8011fec:	b1d5      	cbz	r5, 8012024 <__d2b+0x98>
 8011fee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011ff2:	4405      	add	r5, r0
 8011ff4:	f8c9 5000 	str.w	r5, [r9]
 8011ff8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ffc:	f8c8 0000 	str.w	r0, [r8]
 8012000:	4620      	mov	r0, r4
 8012002:	b003      	add	sp, #12
 8012004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801200c:	e7d5      	b.n	8011fba <__d2b+0x2e>
 801200e:	6161      	str	r1, [r4, #20]
 8012010:	e7e5      	b.n	8011fde <__d2b+0x52>
 8012012:	a801      	add	r0, sp, #4
 8012014:	f7ff fce8 	bl	80119e8 <__lo0bits>
 8012018:	9b01      	ldr	r3, [sp, #4]
 801201a:	6163      	str	r3, [r4, #20]
 801201c:	2201      	movs	r2, #1
 801201e:	6122      	str	r2, [r4, #16]
 8012020:	3020      	adds	r0, #32
 8012022:	e7e3      	b.n	8011fec <__d2b+0x60>
 8012024:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012028:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801202c:	f8c9 0000 	str.w	r0, [r9]
 8012030:	6918      	ldr	r0, [r3, #16]
 8012032:	f7ff fcb9 	bl	80119a8 <__hi0bits>
 8012036:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801203a:	e7df      	b.n	8011ffc <__d2b+0x70>
 801203c:	08014798 	.word	0x08014798
 8012040:	0801483f 	.word	0x0801483f

08012044 <__ratio>:
 8012044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012048:	4688      	mov	r8, r1
 801204a:	4669      	mov	r1, sp
 801204c:	4681      	mov	r9, r0
 801204e:	f7ff ff4d 	bl	8011eec <__b2d>
 8012052:	a901      	add	r1, sp, #4
 8012054:	4640      	mov	r0, r8
 8012056:	ec55 4b10 	vmov	r4, r5, d0
 801205a:	f7ff ff47 	bl	8011eec <__b2d>
 801205e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012062:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012066:	eba3 0c02 	sub.w	ip, r3, r2
 801206a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801206e:	1a9b      	subs	r3, r3, r2
 8012070:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012074:	ec51 0b10 	vmov	r0, r1, d0
 8012078:	2b00      	cmp	r3, #0
 801207a:	bfd6      	itet	le
 801207c:	460a      	movle	r2, r1
 801207e:	462a      	movgt	r2, r5
 8012080:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012084:	468b      	mov	fp, r1
 8012086:	462f      	mov	r7, r5
 8012088:	bfd4      	ite	le
 801208a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801208e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012092:	4620      	mov	r0, r4
 8012094:	ee10 2a10 	vmov	r2, s0
 8012098:	465b      	mov	r3, fp
 801209a:	4639      	mov	r1, r7
 801209c:	f7ee fbee 	bl	800087c <__aeabi_ddiv>
 80120a0:	ec41 0b10 	vmov	d0, r0, r1
 80120a4:	b003      	add	sp, #12
 80120a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080120aa <__copybits>:
 80120aa:	3901      	subs	r1, #1
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	1149      	asrs	r1, r1, #5
 80120b0:	6914      	ldr	r4, [r2, #16]
 80120b2:	3101      	adds	r1, #1
 80120b4:	f102 0314 	add.w	r3, r2, #20
 80120b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80120bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80120c0:	1f05      	subs	r5, r0, #4
 80120c2:	42a3      	cmp	r3, r4
 80120c4:	d30c      	bcc.n	80120e0 <__copybits+0x36>
 80120c6:	1aa3      	subs	r3, r4, r2
 80120c8:	3b11      	subs	r3, #17
 80120ca:	f023 0303 	bic.w	r3, r3, #3
 80120ce:	3211      	adds	r2, #17
 80120d0:	42a2      	cmp	r2, r4
 80120d2:	bf88      	it	hi
 80120d4:	2300      	movhi	r3, #0
 80120d6:	4418      	add	r0, r3
 80120d8:	2300      	movs	r3, #0
 80120da:	4288      	cmp	r0, r1
 80120dc:	d305      	bcc.n	80120ea <__copybits+0x40>
 80120de:	bd70      	pop	{r4, r5, r6, pc}
 80120e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80120e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80120e8:	e7eb      	b.n	80120c2 <__copybits+0x18>
 80120ea:	f840 3b04 	str.w	r3, [r0], #4
 80120ee:	e7f4      	b.n	80120da <__copybits+0x30>

080120f0 <__any_on>:
 80120f0:	f100 0214 	add.w	r2, r0, #20
 80120f4:	6900      	ldr	r0, [r0, #16]
 80120f6:	114b      	asrs	r3, r1, #5
 80120f8:	4298      	cmp	r0, r3
 80120fa:	b510      	push	{r4, lr}
 80120fc:	db11      	blt.n	8012122 <__any_on+0x32>
 80120fe:	dd0a      	ble.n	8012116 <__any_on+0x26>
 8012100:	f011 011f 	ands.w	r1, r1, #31
 8012104:	d007      	beq.n	8012116 <__any_on+0x26>
 8012106:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801210a:	fa24 f001 	lsr.w	r0, r4, r1
 801210e:	fa00 f101 	lsl.w	r1, r0, r1
 8012112:	428c      	cmp	r4, r1
 8012114:	d10b      	bne.n	801212e <__any_on+0x3e>
 8012116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801211a:	4293      	cmp	r3, r2
 801211c:	d803      	bhi.n	8012126 <__any_on+0x36>
 801211e:	2000      	movs	r0, #0
 8012120:	bd10      	pop	{r4, pc}
 8012122:	4603      	mov	r3, r0
 8012124:	e7f7      	b.n	8012116 <__any_on+0x26>
 8012126:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801212a:	2900      	cmp	r1, #0
 801212c:	d0f5      	beq.n	801211a <__any_on+0x2a>
 801212e:	2001      	movs	r0, #1
 8012130:	e7f6      	b.n	8012120 <__any_on+0x30>

08012132 <_calloc_r>:
 8012132:	b513      	push	{r0, r1, r4, lr}
 8012134:	434a      	muls	r2, r1
 8012136:	4611      	mov	r1, r2
 8012138:	9201      	str	r2, [sp, #4]
 801213a:	f7fd fcf9 	bl	800fb30 <_malloc_r>
 801213e:	4604      	mov	r4, r0
 8012140:	b118      	cbz	r0, 801214a <_calloc_r+0x18>
 8012142:	9a01      	ldr	r2, [sp, #4]
 8012144:	2100      	movs	r1, #0
 8012146:	f7fd fc9b 	bl	800fa80 <memset>
 801214a:	4620      	mov	r0, r4
 801214c:	b002      	add	sp, #8
 801214e:	bd10      	pop	{r4, pc}

08012150 <_realloc_r>:
 8012150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012152:	4607      	mov	r7, r0
 8012154:	4614      	mov	r4, r2
 8012156:	460e      	mov	r6, r1
 8012158:	b921      	cbnz	r1, 8012164 <_realloc_r+0x14>
 801215a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801215e:	4611      	mov	r1, r2
 8012160:	f7fd bce6 	b.w	800fb30 <_malloc_r>
 8012164:	b922      	cbnz	r2, 8012170 <_realloc_r+0x20>
 8012166:	f7fd fc93 	bl	800fa90 <_free_r>
 801216a:	4625      	mov	r5, r4
 801216c:	4628      	mov	r0, r5
 801216e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012170:	f000 fcf4 	bl	8012b5c <_malloc_usable_size_r>
 8012174:	42a0      	cmp	r0, r4
 8012176:	d20f      	bcs.n	8012198 <_realloc_r+0x48>
 8012178:	4621      	mov	r1, r4
 801217a:	4638      	mov	r0, r7
 801217c:	f7fd fcd8 	bl	800fb30 <_malloc_r>
 8012180:	4605      	mov	r5, r0
 8012182:	2800      	cmp	r0, #0
 8012184:	d0f2      	beq.n	801216c <_realloc_r+0x1c>
 8012186:	4631      	mov	r1, r6
 8012188:	4622      	mov	r2, r4
 801218a:	f7fd fc6b 	bl	800fa64 <memcpy>
 801218e:	4631      	mov	r1, r6
 8012190:	4638      	mov	r0, r7
 8012192:	f7fd fc7d 	bl	800fa90 <_free_r>
 8012196:	e7e9      	b.n	801216c <_realloc_r+0x1c>
 8012198:	4635      	mov	r5, r6
 801219a:	e7e7      	b.n	801216c <_realloc_r+0x1c>

0801219c <__ssputs_r>:
 801219c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121a0:	688e      	ldr	r6, [r1, #8]
 80121a2:	429e      	cmp	r6, r3
 80121a4:	4682      	mov	sl, r0
 80121a6:	460c      	mov	r4, r1
 80121a8:	4690      	mov	r8, r2
 80121aa:	461f      	mov	r7, r3
 80121ac:	d838      	bhi.n	8012220 <__ssputs_r+0x84>
 80121ae:	898a      	ldrh	r2, [r1, #12]
 80121b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80121b4:	d032      	beq.n	801221c <__ssputs_r+0x80>
 80121b6:	6825      	ldr	r5, [r4, #0]
 80121b8:	6909      	ldr	r1, [r1, #16]
 80121ba:	eba5 0901 	sub.w	r9, r5, r1
 80121be:	6965      	ldr	r5, [r4, #20]
 80121c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121c8:	3301      	adds	r3, #1
 80121ca:	444b      	add	r3, r9
 80121cc:	106d      	asrs	r5, r5, #1
 80121ce:	429d      	cmp	r5, r3
 80121d0:	bf38      	it	cc
 80121d2:	461d      	movcc	r5, r3
 80121d4:	0553      	lsls	r3, r2, #21
 80121d6:	d531      	bpl.n	801223c <__ssputs_r+0xa0>
 80121d8:	4629      	mov	r1, r5
 80121da:	f7fd fca9 	bl	800fb30 <_malloc_r>
 80121de:	4606      	mov	r6, r0
 80121e0:	b950      	cbnz	r0, 80121f8 <__ssputs_r+0x5c>
 80121e2:	230c      	movs	r3, #12
 80121e4:	f8ca 3000 	str.w	r3, [sl]
 80121e8:	89a3      	ldrh	r3, [r4, #12]
 80121ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121ee:	81a3      	strh	r3, [r4, #12]
 80121f0:	f04f 30ff 	mov.w	r0, #4294967295
 80121f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121f8:	6921      	ldr	r1, [r4, #16]
 80121fa:	464a      	mov	r2, r9
 80121fc:	f7fd fc32 	bl	800fa64 <memcpy>
 8012200:	89a3      	ldrh	r3, [r4, #12]
 8012202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801220a:	81a3      	strh	r3, [r4, #12]
 801220c:	6126      	str	r6, [r4, #16]
 801220e:	6165      	str	r5, [r4, #20]
 8012210:	444e      	add	r6, r9
 8012212:	eba5 0509 	sub.w	r5, r5, r9
 8012216:	6026      	str	r6, [r4, #0]
 8012218:	60a5      	str	r5, [r4, #8]
 801221a:	463e      	mov	r6, r7
 801221c:	42be      	cmp	r6, r7
 801221e:	d900      	bls.n	8012222 <__ssputs_r+0x86>
 8012220:	463e      	mov	r6, r7
 8012222:	4632      	mov	r2, r6
 8012224:	6820      	ldr	r0, [r4, #0]
 8012226:	4641      	mov	r1, r8
 8012228:	f000 fc7e 	bl	8012b28 <memmove>
 801222c:	68a3      	ldr	r3, [r4, #8]
 801222e:	6822      	ldr	r2, [r4, #0]
 8012230:	1b9b      	subs	r3, r3, r6
 8012232:	4432      	add	r2, r6
 8012234:	60a3      	str	r3, [r4, #8]
 8012236:	6022      	str	r2, [r4, #0]
 8012238:	2000      	movs	r0, #0
 801223a:	e7db      	b.n	80121f4 <__ssputs_r+0x58>
 801223c:	462a      	mov	r2, r5
 801223e:	f7ff ff87 	bl	8012150 <_realloc_r>
 8012242:	4606      	mov	r6, r0
 8012244:	2800      	cmp	r0, #0
 8012246:	d1e1      	bne.n	801220c <__ssputs_r+0x70>
 8012248:	6921      	ldr	r1, [r4, #16]
 801224a:	4650      	mov	r0, sl
 801224c:	f7fd fc20 	bl	800fa90 <_free_r>
 8012250:	e7c7      	b.n	80121e2 <__ssputs_r+0x46>
	...

08012254 <_svfiprintf_r>:
 8012254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012258:	4698      	mov	r8, r3
 801225a:	898b      	ldrh	r3, [r1, #12]
 801225c:	061b      	lsls	r3, r3, #24
 801225e:	b09d      	sub	sp, #116	; 0x74
 8012260:	4607      	mov	r7, r0
 8012262:	460d      	mov	r5, r1
 8012264:	4614      	mov	r4, r2
 8012266:	d50e      	bpl.n	8012286 <_svfiprintf_r+0x32>
 8012268:	690b      	ldr	r3, [r1, #16]
 801226a:	b963      	cbnz	r3, 8012286 <_svfiprintf_r+0x32>
 801226c:	2140      	movs	r1, #64	; 0x40
 801226e:	f7fd fc5f 	bl	800fb30 <_malloc_r>
 8012272:	6028      	str	r0, [r5, #0]
 8012274:	6128      	str	r0, [r5, #16]
 8012276:	b920      	cbnz	r0, 8012282 <_svfiprintf_r+0x2e>
 8012278:	230c      	movs	r3, #12
 801227a:	603b      	str	r3, [r7, #0]
 801227c:	f04f 30ff 	mov.w	r0, #4294967295
 8012280:	e0d1      	b.n	8012426 <_svfiprintf_r+0x1d2>
 8012282:	2340      	movs	r3, #64	; 0x40
 8012284:	616b      	str	r3, [r5, #20]
 8012286:	2300      	movs	r3, #0
 8012288:	9309      	str	r3, [sp, #36]	; 0x24
 801228a:	2320      	movs	r3, #32
 801228c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012290:	f8cd 800c 	str.w	r8, [sp, #12]
 8012294:	2330      	movs	r3, #48	; 0x30
 8012296:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012440 <_svfiprintf_r+0x1ec>
 801229a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801229e:	f04f 0901 	mov.w	r9, #1
 80122a2:	4623      	mov	r3, r4
 80122a4:	469a      	mov	sl, r3
 80122a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122aa:	b10a      	cbz	r2, 80122b0 <_svfiprintf_r+0x5c>
 80122ac:	2a25      	cmp	r2, #37	; 0x25
 80122ae:	d1f9      	bne.n	80122a4 <_svfiprintf_r+0x50>
 80122b0:	ebba 0b04 	subs.w	fp, sl, r4
 80122b4:	d00b      	beq.n	80122ce <_svfiprintf_r+0x7a>
 80122b6:	465b      	mov	r3, fp
 80122b8:	4622      	mov	r2, r4
 80122ba:	4629      	mov	r1, r5
 80122bc:	4638      	mov	r0, r7
 80122be:	f7ff ff6d 	bl	801219c <__ssputs_r>
 80122c2:	3001      	adds	r0, #1
 80122c4:	f000 80aa 	beq.w	801241c <_svfiprintf_r+0x1c8>
 80122c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122ca:	445a      	add	r2, fp
 80122cc:	9209      	str	r2, [sp, #36]	; 0x24
 80122ce:	f89a 3000 	ldrb.w	r3, [sl]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f000 80a2 	beq.w	801241c <_svfiprintf_r+0x1c8>
 80122d8:	2300      	movs	r3, #0
 80122da:	f04f 32ff 	mov.w	r2, #4294967295
 80122de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122e2:	f10a 0a01 	add.w	sl, sl, #1
 80122e6:	9304      	str	r3, [sp, #16]
 80122e8:	9307      	str	r3, [sp, #28]
 80122ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122ee:	931a      	str	r3, [sp, #104]	; 0x68
 80122f0:	4654      	mov	r4, sl
 80122f2:	2205      	movs	r2, #5
 80122f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122f8:	4851      	ldr	r0, [pc, #324]	; (8012440 <_svfiprintf_r+0x1ec>)
 80122fa:	f7ed ff89 	bl	8000210 <memchr>
 80122fe:	9a04      	ldr	r2, [sp, #16]
 8012300:	b9d8      	cbnz	r0, 801233a <_svfiprintf_r+0xe6>
 8012302:	06d0      	lsls	r0, r2, #27
 8012304:	bf44      	itt	mi
 8012306:	2320      	movmi	r3, #32
 8012308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801230c:	0711      	lsls	r1, r2, #28
 801230e:	bf44      	itt	mi
 8012310:	232b      	movmi	r3, #43	; 0x2b
 8012312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012316:	f89a 3000 	ldrb.w	r3, [sl]
 801231a:	2b2a      	cmp	r3, #42	; 0x2a
 801231c:	d015      	beq.n	801234a <_svfiprintf_r+0xf6>
 801231e:	9a07      	ldr	r2, [sp, #28]
 8012320:	4654      	mov	r4, sl
 8012322:	2000      	movs	r0, #0
 8012324:	f04f 0c0a 	mov.w	ip, #10
 8012328:	4621      	mov	r1, r4
 801232a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801232e:	3b30      	subs	r3, #48	; 0x30
 8012330:	2b09      	cmp	r3, #9
 8012332:	d94e      	bls.n	80123d2 <_svfiprintf_r+0x17e>
 8012334:	b1b0      	cbz	r0, 8012364 <_svfiprintf_r+0x110>
 8012336:	9207      	str	r2, [sp, #28]
 8012338:	e014      	b.n	8012364 <_svfiprintf_r+0x110>
 801233a:	eba0 0308 	sub.w	r3, r0, r8
 801233e:	fa09 f303 	lsl.w	r3, r9, r3
 8012342:	4313      	orrs	r3, r2
 8012344:	9304      	str	r3, [sp, #16]
 8012346:	46a2      	mov	sl, r4
 8012348:	e7d2      	b.n	80122f0 <_svfiprintf_r+0x9c>
 801234a:	9b03      	ldr	r3, [sp, #12]
 801234c:	1d19      	adds	r1, r3, #4
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	9103      	str	r1, [sp, #12]
 8012352:	2b00      	cmp	r3, #0
 8012354:	bfbb      	ittet	lt
 8012356:	425b      	neglt	r3, r3
 8012358:	f042 0202 	orrlt.w	r2, r2, #2
 801235c:	9307      	strge	r3, [sp, #28]
 801235e:	9307      	strlt	r3, [sp, #28]
 8012360:	bfb8      	it	lt
 8012362:	9204      	strlt	r2, [sp, #16]
 8012364:	7823      	ldrb	r3, [r4, #0]
 8012366:	2b2e      	cmp	r3, #46	; 0x2e
 8012368:	d10c      	bne.n	8012384 <_svfiprintf_r+0x130>
 801236a:	7863      	ldrb	r3, [r4, #1]
 801236c:	2b2a      	cmp	r3, #42	; 0x2a
 801236e:	d135      	bne.n	80123dc <_svfiprintf_r+0x188>
 8012370:	9b03      	ldr	r3, [sp, #12]
 8012372:	1d1a      	adds	r2, r3, #4
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	9203      	str	r2, [sp, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	bfb8      	it	lt
 801237c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012380:	3402      	adds	r4, #2
 8012382:	9305      	str	r3, [sp, #20]
 8012384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012450 <_svfiprintf_r+0x1fc>
 8012388:	7821      	ldrb	r1, [r4, #0]
 801238a:	2203      	movs	r2, #3
 801238c:	4650      	mov	r0, sl
 801238e:	f7ed ff3f 	bl	8000210 <memchr>
 8012392:	b140      	cbz	r0, 80123a6 <_svfiprintf_r+0x152>
 8012394:	2340      	movs	r3, #64	; 0x40
 8012396:	eba0 000a 	sub.w	r0, r0, sl
 801239a:	fa03 f000 	lsl.w	r0, r3, r0
 801239e:	9b04      	ldr	r3, [sp, #16]
 80123a0:	4303      	orrs	r3, r0
 80123a2:	3401      	adds	r4, #1
 80123a4:	9304      	str	r3, [sp, #16]
 80123a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123aa:	4826      	ldr	r0, [pc, #152]	; (8012444 <_svfiprintf_r+0x1f0>)
 80123ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123b0:	2206      	movs	r2, #6
 80123b2:	f7ed ff2d 	bl	8000210 <memchr>
 80123b6:	2800      	cmp	r0, #0
 80123b8:	d038      	beq.n	801242c <_svfiprintf_r+0x1d8>
 80123ba:	4b23      	ldr	r3, [pc, #140]	; (8012448 <_svfiprintf_r+0x1f4>)
 80123bc:	bb1b      	cbnz	r3, 8012406 <_svfiprintf_r+0x1b2>
 80123be:	9b03      	ldr	r3, [sp, #12]
 80123c0:	3307      	adds	r3, #7
 80123c2:	f023 0307 	bic.w	r3, r3, #7
 80123c6:	3308      	adds	r3, #8
 80123c8:	9303      	str	r3, [sp, #12]
 80123ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123cc:	4433      	add	r3, r6
 80123ce:	9309      	str	r3, [sp, #36]	; 0x24
 80123d0:	e767      	b.n	80122a2 <_svfiprintf_r+0x4e>
 80123d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80123d6:	460c      	mov	r4, r1
 80123d8:	2001      	movs	r0, #1
 80123da:	e7a5      	b.n	8012328 <_svfiprintf_r+0xd4>
 80123dc:	2300      	movs	r3, #0
 80123de:	3401      	adds	r4, #1
 80123e0:	9305      	str	r3, [sp, #20]
 80123e2:	4619      	mov	r1, r3
 80123e4:	f04f 0c0a 	mov.w	ip, #10
 80123e8:	4620      	mov	r0, r4
 80123ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123ee:	3a30      	subs	r2, #48	; 0x30
 80123f0:	2a09      	cmp	r2, #9
 80123f2:	d903      	bls.n	80123fc <_svfiprintf_r+0x1a8>
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d0c5      	beq.n	8012384 <_svfiprintf_r+0x130>
 80123f8:	9105      	str	r1, [sp, #20]
 80123fa:	e7c3      	b.n	8012384 <_svfiprintf_r+0x130>
 80123fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8012400:	4604      	mov	r4, r0
 8012402:	2301      	movs	r3, #1
 8012404:	e7f0      	b.n	80123e8 <_svfiprintf_r+0x194>
 8012406:	ab03      	add	r3, sp, #12
 8012408:	9300      	str	r3, [sp, #0]
 801240a:	462a      	mov	r2, r5
 801240c:	4b0f      	ldr	r3, [pc, #60]	; (801244c <_svfiprintf_r+0x1f8>)
 801240e:	a904      	add	r1, sp, #16
 8012410:	4638      	mov	r0, r7
 8012412:	f3af 8000 	nop.w
 8012416:	1c42      	adds	r2, r0, #1
 8012418:	4606      	mov	r6, r0
 801241a:	d1d6      	bne.n	80123ca <_svfiprintf_r+0x176>
 801241c:	89ab      	ldrh	r3, [r5, #12]
 801241e:	065b      	lsls	r3, r3, #25
 8012420:	f53f af2c 	bmi.w	801227c <_svfiprintf_r+0x28>
 8012424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012426:	b01d      	add	sp, #116	; 0x74
 8012428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242c:	ab03      	add	r3, sp, #12
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	462a      	mov	r2, r5
 8012432:	4b06      	ldr	r3, [pc, #24]	; (801244c <_svfiprintf_r+0x1f8>)
 8012434:	a904      	add	r1, sp, #16
 8012436:	4638      	mov	r0, r7
 8012438:	f000 f9d4 	bl	80127e4 <_printf_i>
 801243c:	e7eb      	b.n	8012416 <_svfiprintf_r+0x1c2>
 801243e:	bf00      	nop
 8012440:	0801499c 	.word	0x0801499c
 8012444:	080149a6 	.word	0x080149a6
 8012448:	00000000 	.word	0x00000000
 801244c:	0801219d 	.word	0x0801219d
 8012450:	080149a2 	.word	0x080149a2

08012454 <__sfputc_r>:
 8012454:	6893      	ldr	r3, [r2, #8]
 8012456:	3b01      	subs	r3, #1
 8012458:	2b00      	cmp	r3, #0
 801245a:	b410      	push	{r4}
 801245c:	6093      	str	r3, [r2, #8]
 801245e:	da08      	bge.n	8012472 <__sfputc_r+0x1e>
 8012460:	6994      	ldr	r4, [r2, #24]
 8012462:	42a3      	cmp	r3, r4
 8012464:	db01      	blt.n	801246a <__sfputc_r+0x16>
 8012466:	290a      	cmp	r1, #10
 8012468:	d103      	bne.n	8012472 <__sfputc_r+0x1e>
 801246a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801246e:	f7fe bb05 	b.w	8010a7c <__swbuf_r>
 8012472:	6813      	ldr	r3, [r2, #0]
 8012474:	1c58      	adds	r0, r3, #1
 8012476:	6010      	str	r0, [r2, #0]
 8012478:	7019      	strb	r1, [r3, #0]
 801247a:	4608      	mov	r0, r1
 801247c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012480:	4770      	bx	lr

08012482 <__sfputs_r>:
 8012482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012484:	4606      	mov	r6, r0
 8012486:	460f      	mov	r7, r1
 8012488:	4614      	mov	r4, r2
 801248a:	18d5      	adds	r5, r2, r3
 801248c:	42ac      	cmp	r4, r5
 801248e:	d101      	bne.n	8012494 <__sfputs_r+0x12>
 8012490:	2000      	movs	r0, #0
 8012492:	e007      	b.n	80124a4 <__sfputs_r+0x22>
 8012494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012498:	463a      	mov	r2, r7
 801249a:	4630      	mov	r0, r6
 801249c:	f7ff ffda 	bl	8012454 <__sfputc_r>
 80124a0:	1c43      	adds	r3, r0, #1
 80124a2:	d1f3      	bne.n	801248c <__sfputs_r+0xa>
 80124a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124a8 <_vfiprintf_r>:
 80124a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ac:	460d      	mov	r5, r1
 80124ae:	b09d      	sub	sp, #116	; 0x74
 80124b0:	4614      	mov	r4, r2
 80124b2:	4698      	mov	r8, r3
 80124b4:	4606      	mov	r6, r0
 80124b6:	b118      	cbz	r0, 80124c0 <_vfiprintf_r+0x18>
 80124b8:	6983      	ldr	r3, [r0, #24]
 80124ba:	b90b      	cbnz	r3, 80124c0 <_vfiprintf_r+0x18>
 80124bc:	f7fe fcda 	bl	8010e74 <__sinit>
 80124c0:	4b89      	ldr	r3, [pc, #548]	; (80126e8 <_vfiprintf_r+0x240>)
 80124c2:	429d      	cmp	r5, r3
 80124c4:	d11b      	bne.n	80124fe <_vfiprintf_r+0x56>
 80124c6:	6875      	ldr	r5, [r6, #4]
 80124c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124ca:	07d9      	lsls	r1, r3, #31
 80124cc:	d405      	bmi.n	80124da <_vfiprintf_r+0x32>
 80124ce:	89ab      	ldrh	r3, [r5, #12]
 80124d0:	059a      	lsls	r2, r3, #22
 80124d2:	d402      	bmi.n	80124da <_vfiprintf_r+0x32>
 80124d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124d6:	f7ff f8da 	bl	801168e <__retarget_lock_acquire_recursive>
 80124da:	89ab      	ldrh	r3, [r5, #12]
 80124dc:	071b      	lsls	r3, r3, #28
 80124de:	d501      	bpl.n	80124e4 <_vfiprintf_r+0x3c>
 80124e0:	692b      	ldr	r3, [r5, #16]
 80124e2:	b9eb      	cbnz	r3, 8012520 <_vfiprintf_r+0x78>
 80124e4:	4629      	mov	r1, r5
 80124e6:	4630      	mov	r0, r6
 80124e8:	f7fe fb2c 	bl	8010b44 <__swsetup_r>
 80124ec:	b1c0      	cbz	r0, 8012520 <_vfiprintf_r+0x78>
 80124ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124f0:	07dc      	lsls	r4, r3, #31
 80124f2:	d50e      	bpl.n	8012512 <_vfiprintf_r+0x6a>
 80124f4:	f04f 30ff 	mov.w	r0, #4294967295
 80124f8:	b01d      	add	sp, #116	; 0x74
 80124fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124fe:	4b7b      	ldr	r3, [pc, #492]	; (80126ec <_vfiprintf_r+0x244>)
 8012500:	429d      	cmp	r5, r3
 8012502:	d101      	bne.n	8012508 <_vfiprintf_r+0x60>
 8012504:	68b5      	ldr	r5, [r6, #8]
 8012506:	e7df      	b.n	80124c8 <_vfiprintf_r+0x20>
 8012508:	4b79      	ldr	r3, [pc, #484]	; (80126f0 <_vfiprintf_r+0x248>)
 801250a:	429d      	cmp	r5, r3
 801250c:	bf08      	it	eq
 801250e:	68f5      	ldreq	r5, [r6, #12]
 8012510:	e7da      	b.n	80124c8 <_vfiprintf_r+0x20>
 8012512:	89ab      	ldrh	r3, [r5, #12]
 8012514:	0598      	lsls	r0, r3, #22
 8012516:	d4ed      	bmi.n	80124f4 <_vfiprintf_r+0x4c>
 8012518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801251a:	f7ff f8b9 	bl	8011690 <__retarget_lock_release_recursive>
 801251e:	e7e9      	b.n	80124f4 <_vfiprintf_r+0x4c>
 8012520:	2300      	movs	r3, #0
 8012522:	9309      	str	r3, [sp, #36]	; 0x24
 8012524:	2320      	movs	r3, #32
 8012526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801252a:	f8cd 800c 	str.w	r8, [sp, #12]
 801252e:	2330      	movs	r3, #48	; 0x30
 8012530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80126f4 <_vfiprintf_r+0x24c>
 8012534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012538:	f04f 0901 	mov.w	r9, #1
 801253c:	4623      	mov	r3, r4
 801253e:	469a      	mov	sl, r3
 8012540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012544:	b10a      	cbz	r2, 801254a <_vfiprintf_r+0xa2>
 8012546:	2a25      	cmp	r2, #37	; 0x25
 8012548:	d1f9      	bne.n	801253e <_vfiprintf_r+0x96>
 801254a:	ebba 0b04 	subs.w	fp, sl, r4
 801254e:	d00b      	beq.n	8012568 <_vfiprintf_r+0xc0>
 8012550:	465b      	mov	r3, fp
 8012552:	4622      	mov	r2, r4
 8012554:	4629      	mov	r1, r5
 8012556:	4630      	mov	r0, r6
 8012558:	f7ff ff93 	bl	8012482 <__sfputs_r>
 801255c:	3001      	adds	r0, #1
 801255e:	f000 80aa 	beq.w	80126b6 <_vfiprintf_r+0x20e>
 8012562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012564:	445a      	add	r2, fp
 8012566:	9209      	str	r2, [sp, #36]	; 0x24
 8012568:	f89a 3000 	ldrb.w	r3, [sl]
 801256c:	2b00      	cmp	r3, #0
 801256e:	f000 80a2 	beq.w	80126b6 <_vfiprintf_r+0x20e>
 8012572:	2300      	movs	r3, #0
 8012574:	f04f 32ff 	mov.w	r2, #4294967295
 8012578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801257c:	f10a 0a01 	add.w	sl, sl, #1
 8012580:	9304      	str	r3, [sp, #16]
 8012582:	9307      	str	r3, [sp, #28]
 8012584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012588:	931a      	str	r3, [sp, #104]	; 0x68
 801258a:	4654      	mov	r4, sl
 801258c:	2205      	movs	r2, #5
 801258e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012592:	4858      	ldr	r0, [pc, #352]	; (80126f4 <_vfiprintf_r+0x24c>)
 8012594:	f7ed fe3c 	bl	8000210 <memchr>
 8012598:	9a04      	ldr	r2, [sp, #16]
 801259a:	b9d8      	cbnz	r0, 80125d4 <_vfiprintf_r+0x12c>
 801259c:	06d1      	lsls	r1, r2, #27
 801259e:	bf44      	itt	mi
 80125a0:	2320      	movmi	r3, #32
 80125a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125a6:	0713      	lsls	r3, r2, #28
 80125a8:	bf44      	itt	mi
 80125aa:	232b      	movmi	r3, #43	; 0x2b
 80125ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125b0:	f89a 3000 	ldrb.w	r3, [sl]
 80125b4:	2b2a      	cmp	r3, #42	; 0x2a
 80125b6:	d015      	beq.n	80125e4 <_vfiprintf_r+0x13c>
 80125b8:	9a07      	ldr	r2, [sp, #28]
 80125ba:	4654      	mov	r4, sl
 80125bc:	2000      	movs	r0, #0
 80125be:	f04f 0c0a 	mov.w	ip, #10
 80125c2:	4621      	mov	r1, r4
 80125c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125c8:	3b30      	subs	r3, #48	; 0x30
 80125ca:	2b09      	cmp	r3, #9
 80125cc:	d94e      	bls.n	801266c <_vfiprintf_r+0x1c4>
 80125ce:	b1b0      	cbz	r0, 80125fe <_vfiprintf_r+0x156>
 80125d0:	9207      	str	r2, [sp, #28]
 80125d2:	e014      	b.n	80125fe <_vfiprintf_r+0x156>
 80125d4:	eba0 0308 	sub.w	r3, r0, r8
 80125d8:	fa09 f303 	lsl.w	r3, r9, r3
 80125dc:	4313      	orrs	r3, r2
 80125de:	9304      	str	r3, [sp, #16]
 80125e0:	46a2      	mov	sl, r4
 80125e2:	e7d2      	b.n	801258a <_vfiprintf_r+0xe2>
 80125e4:	9b03      	ldr	r3, [sp, #12]
 80125e6:	1d19      	adds	r1, r3, #4
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	9103      	str	r1, [sp, #12]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	bfbb      	ittet	lt
 80125f0:	425b      	neglt	r3, r3
 80125f2:	f042 0202 	orrlt.w	r2, r2, #2
 80125f6:	9307      	strge	r3, [sp, #28]
 80125f8:	9307      	strlt	r3, [sp, #28]
 80125fa:	bfb8      	it	lt
 80125fc:	9204      	strlt	r2, [sp, #16]
 80125fe:	7823      	ldrb	r3, [r4, #0]
 8012600:	2b2e      	cmp	r3, #46	; 0x2e
 8012602:	d10c      	bne.n	801261e <_vfiprintf_r+0x176>
 8012604:	7863      	ldrb	r3, [r4, #1]
 8012606:	2b2a      	cmp	r3, #42	; 0x2a
 8012608:	d135      	bne.n	8012676 <_vfiprintf_r+0x1ce>
 801260a:	9b03      	ldr	r3, [sp, #12]
 801260c:	1d1a      	adds	r2, r3, #4
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	9203      	str	r2, [sp, #12]
 8012612:	2b00      	cmp	r3, #0
 8012614:	bfb8      	it	lt
 8012616:	f04f 33ff 	movlt.w	r3, #4294967295
 801261a:	3402      	adds	r4, #2
 801261c:	9305      	str	r3, [sp, #20]
 801261e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012704 <_vfiprintf_r+0x25c>
 8012622:	7821      	ldrb	r1, [r4, #0]
 8012624:	2203      	movs	r2, #3
 8012626:	4650      	mov	r0, sl
 8012628:	f7ed fdf2 	bl	8000210 <memchr>
 801262c:	b140      	cbz	r0, 8012640 <_vfiprintf_r+0x198>
 801262e:	2340      	movs	r3, #64	; 0x40
 8012630:	eba0 000a 	sub.w	r0, r0, sl
 8012634:	fa03 f000 	lsl.w	r0, r3, r0
 8012638:	9b04      	ldr	r3, [sp, #16]
 801263a:	4303      	orrs	r3, r0
 801263c:	3401      	adds	r4, #1
 801263e:	9304      	str	r3, [sp, #16]
 8012640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012644:	482c      	ldr	r0, [pc, #176]	; (80126f8 <_vfiprintf_r+0x250>)
 8012646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801264a:	2206      	movs	r2, #6
 801264c:	f7ed fde0 	bl	8000210 <memchr>
 8012650:	2800      	cmp	r0, #0
 8012652:	d03f      	beq.n	80126d4 <_vfiprintf_r+0x22c>
 8012654:	4b29      	ldr	r3, [pc, #164]	; (80126fc <_vfiprintf_r+0x254>)
 8012656:	bb1b      	cbnz	r3, 80126a0 <_vfiprintf_r+0x1f8>
 8012658:	9b03      	ldr	r3, [sp, #12]
 801265a:	3307      	adds	r3, #7
 801265c:	f023 0307 	bic.w	r3, r3, #7
 8012660:	3308      	adds	r3, #8
 8012662:	9303      	str	r3, [sp, #12]
 8012664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012666:	443b      	add	r3, r7
 8012668:	9309      	str	r3, [sp, #36]	; 0x24
 801266a:	e767      	b.n	801253c <_vfiprintf_r+0x94>
 801266c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012670:	460c      	mov	r4, r1
 8012672:	2001      	movs	r0, #1
 8012674:	e7a5      	b.n	80125c2 <_vfiprintf_r+0x11a>
 8012676:	2300      	movs	r3, #0
 8012678:	3401      	adds	r4, #1
 801267a:	9305      	str	r3, [sp, #20]
 801267c:	4619      	mov	r1, r3
 801267e:	f04f 0c0a 	mov.w	ip, #10
 8012682:	4620      	mov	r0, r4
 8012684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012688:	3a30      	subs	r2, #48	; 0x30
 801268a:	2a09      	cmp	r2, #9
 801268c:	d903      	bls.n	8012696 <_vfiprintf_r+0x1ee>
 801268e:	2b00      	cmp	r3, #0
 8012690:	d0c5      	beq.n	801261e <_vfiprintf_r+0x176>
 8012692:	9105      	str	r1, [sp, #20]
 8012694:	e7c3      	b.n	801261e <_vfiprintf_r+0x176>
 8012696:	fb0c 2101 	mla	r1, ip, r1, r2
 801269a:	4604      	mov	r4, r0
 801269c:	2301      	movs	r3, #1
 801269e:	e7f0      	b.n	8012682 <_vfiprintf_r+0x1da>
 80126a0:	ab03      	add	r3, sp, #12
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	462a      	mov	r2, r5
 80126a6:	4b16      	ldr	r3, [pc, #88]	; (8012700 <_vfiprintf_r+0x258>)
 80126a8:	a904      	add	r1, sp, #16
 80126aa:	4630      	mov	r0, r6
 80126ac:	f3af 8000 	nop.w
 80126b0:	4607      	mov	r7, r0
 80126b2:	1c78      	adds	r0, r7, #1
 80126b4:	d1d6      	bne.n	8012664 <_vfiprintf_r+0x1bc>
 80126b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126b8:	07d9      	lsls	r1, r3, #31
 80126ba:	d405      	bmi.n	80126c8 <_vfiprintf_r+0x220>
 80126bc:	89ab      	ldrh	r3, [r5, #12]
 80126be:	059a      	lsls	r2, r3, #22
 80126c0:	d402      	bmi.n	80126c8 <_vfiprintf_r+0x220>
 80126c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126c4:	f7fe ffe4 	bl	8011690 <__retarget_lock_release_recursive>
 80126c8:	89ab      	ldrh	r3, [r5, #12]
 80126ca:	065b      	lsls	r3, r3, #25
 80126cc:	f53f af12 	bmi.w	80124f4 <_vfiprintf_r+0x4c>
 80126d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126d2:	e711      	b.n	80124f8 <_vfiprintf_r+0x50>
 80126d4:	ab03      	add	r3, sp, #12
 80126d6:	9300      	str	r3, [sp, #0]
 80126d8:	462a      	mov	r2, r5
 80126da:	4b09      	ldr	r3, [pc, #36]	; (8012700 <_vfiprintf_r+0x258>)
 80126dc:	a904      	add	r1, sp, #16
 80126de:	4630      	mov	r0, r6
 80126e0:	f000 f880 	bl	80127e4 <_printf_i>
 80126e4:	e7e4      	b.n	80126b0 <_vfiprintf_r+0x208>
 80126e6:	bf00      	nop
 80126e8:	08014758 	.word	0x08014758
 80126ec:	08014778 	.word	0x08014778
 80126f0:	08014738 	.word	0x08014738
 80126f4:	0801499c 	.word	0x0801499c
 80126f8:	080149a6 	.word	0x080149a6
 80126fc:	00000000 	.word	0x00000000
 8012700:	08012483 	.word	0x08012483
 8012704:	080149a2 	.word	0x080149a2

08012708 <_printf_common>:
 8012708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801270c:	4616      	mov	r6, r2
 801270e:	4699      	mov	r9, r3
 8012710:	688a      	ldr	r2, [r1, #8]
 8012712:	690b      	ldr	r3, [r1, #16]
 8012714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012718:	4293      	cmp	r3, r2
 801271a:	bfb8      	it	lt
 801271c:	4613      	movlt	r3, r2
 801271e:	6033      	str	r3, [r6, #0]
 8012720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012724:	4607      	mov	r7, r0
 8012726:	460c      	mov	r4, r1
 8012728:	b10a      	cbz	r2, 801272e <_printf_common+0x26>
 801272a:	3301      	adds	r3, #1
 801272c:	6033      	str	r3, [r6, #0]
 801272e:	6823      	ldr	r3, [r4, #0]
 8012730:	0699      	lsls	r1, r3, #26
 8012732:	bf42      	ittt	mi
 8012734:	6833      	ldrmi	r3, [r6, #0]
 8012736:	3302      	addmi	r3, #2
 8012738:	6033      	strmi	r3, [r6, #0]
 801273a:	6825      	ldr	r5, [r4, #0]
 801273c:	f015 0506 	ands.w	r5, r5, #6
 8012740:	d106      	bne.n	8012750 <_printf_common+0x48>
 8012742:	f104 0a19 	add.w	sl, r4, #25
 8012746:	68e3      	ldr	r3, [r4, #12]
 8012748:	6832      	ldr	r2, [r6, #0]
 801274a:	1a9b      	subs	r3, r3, r2
 801274c:	42ab      	cmp	r3, r5
 801274e:	dc26      	bgt.n	801279e <_printf_common+0x96>
 8012750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012754:	1e13      	subs	r3, r2, #0
 8012756:	6822      	ldr	r2, [r4, #0]
 8012758:	bf18      	it	ne
 801275a:	2301      	movne	r3, #1
 801275c:	0692      	lsls	r2, r2, #26
 801275e:	d42b      	bmi.n	80127b8 <_printf_common+0xb0>
 8012760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012764:	4649      	mov	r1, r9
 8012766:	4638      	mov	r0, r7
 8012768:	47c0      	blx	r8
 801276a:	3001      	adds	r0, #1
 801276c:	d01e      	beq.n	80127ac <_printf_common+0xa4>
 801276e:	6823      	ldr	r3, [r4, #0]
 8012770:	68e5      	ldr	r5, [r4, #12]
 8012772:	6832      	ldr	r2, [r6, #0]
 8012774:	f003 0306 	and.w	r3, r3, #6
 8012778:	2b04      	cmp	r3, #4
 801277a:	bf08      	it	eq
 801277c:	1aad      	subeq	r5, r5, r2
 801277e:	68a3      	ldr	r3, [r4, #8]
 8012780:	6922      	ldr	r2, [r4, #16]
 8012782:	bf0c      	ite	eq
 8012784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012788:	2500      	movne	r5, #0
 801278a:	4293      	cmp	r3, r2
 801278c:	bfc4      	itt	gt
 801278e:	1a9b      	subgt	r3, r3, r2
 8012790:	18ed      	addgt	r5, r5, r3
 8012792:	2600      	movs	r6, #0
 8012794:	341a      	adds	r4, #26
 8012796:	42b5      	cmp	r5, r6
 8012798:	d11a      	bne.n	80127d0 <_printf_common+0xc8>
 801279a:	2000      	movs	r0, #0
 801279c:	e008      	b.n	80127b0 <_printf_common+0xa8>
 801279e:	2301      	movs	r3, #1
 80127a0:	4652      	mov	r2, sl
 80127a2:	4649      	mov	r1, r9
 80127a4:	4638      	mov	r0, r7
 80127a6:	47c0      	blx	r8
 80127a8:	3001      	adds	r0, #1
 80127aa:	d103      	bne.n	80127b4 <_printf_common+0xac>
 80127ac:	f04f 30ff 	mov.w	r0, #4294967295
 80127b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127b4:	3501      	adds	r5, #1
 80127b6:	e7c6      	b.n	8012746 <_printf_common+0x3e>
 80127b8:	18e1      	adds	r1, r4, r3
 80127ba:	1c5a      	adds	r2, r3, #1
 80127bc:	2030      	movs	r0, #48	; 0x30
 80127be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80127c2:	4422      	add	r2, r4
 80127c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80127c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80127cc:	3302      	adds	r3, #2
 80127ce:	e7c7      	b.n	8012760 <_printf_common+0x58>
 80127d0:	2301      	movs	r3, #1
 80127d2:	4622      	mov	r2, r4
 80127d4:	4649      	mov	r1, r9
 80127d6:	4638      	mov	r0, r7
 80127d8:	47c0      	blx	r8
 80127da:	3001      	adds	r0, #1
 80127dc:	d0e6      	beq.n	80127ac <_printf_common+0xa4>
 80127de:	3601      	adds	r6, #1
 80127e0:	e7d9      	b.n	8012796 <_printf_common+0x8e>
	...

080127e4 <_printf_i>:
 80127e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127e8:	460c      	mov	r4, r1
 80127ea:	4691      	mov	r9, r2
 80127ec:	7e27      	ldrb	r7, [r4, #24]
 80127ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80127f0:	2f78      	cmp	r7, #120	; 0x78
 80127f2:	4680      	mov	r8, r0
 80127f4:	469a      	mov	sl, r3
 80127f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80127fa:	d807      	bhi.n	801280c <_printf_i+0x28>
 80127fc:	2f62      	cmp	r7, #98	; 0x62
 80127fe:	d80a      	bhi.n	8012816 <_printf_i+0x32>
 8012800:	2f00      	cmp	r7, #0
 8012802:	f000 80d8 	beq.w	80129b6 <_printf_i+0x1d2>
 8012806:	2f58      	cmp	r7, #88	; 0x58
 8012808:	f000 80a3 	beq.w	8012952 <_printf_i+0x16e>
 801280c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012814:	e03a      	b.n	801288c <_printf_i+0xa8>
 8012816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801281a:	2b15      	cmp	r3, #21
 801281c:	d8f6      	bhi.n	801280c <_printf_i+0x28>
 801281e:	a001      	add	r0, pc, #4	; (adr r0, 8012824 <_printf_i+0x40>)
 8012820:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012824:	0801287d 	.word	0x0801287d
 8012828:	08012891 	.word	0x08012891
 801282c:	0801280d 	.word	0x0801280d
 8012830:	0801280d 	.word	0x0801280d
 8012834:	0801280d 	.word	0x0801280d
 8012838:	0801280d 	.word	0x0801280d
 801283c:	08012891 	.word	0x08012891
 8012840:	0801280d 	.word	0x0801280d
 8012844:	0801280d 	.word	0x0801280d
 8012848:	0801280d 	.word	0x0801280d
 801284c:	0801280d 	.word	0x0801280d
 8012850:	0801299d 	.word	0x0801299d
 8012854:	080128c1 	.word	0x080128c1
 8012858:	0801297f 	.word	0x0801297f
 801285c:	0801280d 	.word	0x0801280d
 8012860:	0801280d 	.word	0x0801280d
 8012864:	080129bf 	.word	0x080129bf
 8012868:	0801280d 	.word	0x0801280d
 801286c:	080128c1 	.word	0x080128c1
 8012870:	0801280d 	.word	0x0801280d
 8012874:	0801280d 	.word	0x0801280d
 8012878:	08012987 	.word	0x08012987
 801287c:	680b      	ldr	r3, [r1, #0]
 801287e:	1d1a      	adds	r2, r3, #4
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	600a      	str	r2, [r1, #0]
 8012884:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801288c:	2301      	movs	r3, #1
 801288e:	e0a3      	b.n	80129d8 <_printf_i+0x1f4>
 8012890:	6825      	ldr	r5, [r4, #0]
 8012892:	6808      	ldr	r0, [r1, #0]
 8012894:	062e      	lsls	r6, r5, #24
 8012896:	f100 0304 	add.w	r3, r0, #4
 801289a:	d50a      	bpl.n	80128b2 <_printf_i+0xce>
 801289c:	6805      	ldr	r5, [r0, #0]
 801289e:	600b      	str	r3, [r1, #0]
 80128a0:	2d00      	cmp	r5, #0
 80128a2:	da03      	bge.n	80128ac <_printf_i+0xc8>
 80128a4:	232d      	movs	r3, #45	; 0x2d
 80128a6:	426d      	negs	r5, r5
 80128a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128ac:	485e      	ldr	r0, [pc, #376]	; (8012a28 <_printf_i+0x244>)
 80128ae:	230a      	movs	r3, #10
 80128b0:	e019      	b.n	80128e6 <_printf_i+0x102>
 80128b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80128b6:	6805      	ldr	r5, [r0, #0]
 80128b8:	600b      	str	r3, [r1, #0]
 80128ba:	bf18      	it	ne
 80128bc:	b22d      	sxthne	r5, r5
 80128be:	e7ef      	b.n	80128a0 <_printf_i+0xbc>
 80128c0:	680b      	ldr	r3, [r1, #0]
 80128c2:	6825      	ldr	r5, [r4, #0]
 80128c4:	1d18      	adds	r0, r3, #4
 80128c6:	6008      	str	r0, [r1, #0]
 80128c8:	0628      	lsls	r0, r5, #24
 80128ca:	d501      	bpl.n	80128d0 <_printf_i+0xec>
 80128cc:	681d      	ldr	r5, [r3, #0]
 80128ce:	e002      	b.n	80128d6 <_printf_i+0xf2>
 80128d0:	0669      	lsls	r1, r5, #25
 80128d2:	d5fb      	bpl.n	80128cc <_printf_i+0xe8>
 80128d4:	881d      	ldrh	r5, [r3, #0]
 80128d6:	4854      	ldr	r0, [pc, #336]	; (8012a28 <_printf_i+0x244>)
 80128d8:	2f6f      	cmp	r7, #111	; 0x6f
 80128da:	bf0c      	ite	eq
 80128dc:	2308      	moveq	r3, #8
 80128de:	230a      	movne	r3, #10
 80128e0:	2100      	movs	r1, #0
 80128e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80128e6:	6866      	ldr	r6, [r4, #4]
 80128e8:	60a6      	str	r6, [r4, #8]
 80128ea:	2e00      	cmp	r6, #0
 80128ec:	bfa2      	ittt	ge
 80128ee:	6821      	ldrge	r1, [r4, #0]
 80128f0:	f021 0104 	bicge.w	r1, r1, #4
 80128f4:	6021      	strge	r1, [r4, #0]
 80128f6:	b90d      	cbnz	r5, 80128fc <_printf_i+0x118>
 80128f8:	2e00      	cmp	r6, #0
 80128fa:	d04d      	beq.n	8012998 <_printf_i+0x1b4>
 80128fc:	4616      	mov	r6, r2
 80128fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8012902:	fb03 5711 	mls	r7, r3, r1, r5
 8012906:	5dc7      	ldrb	r7, [r0, r7]
 8012908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801290c:	462f      	mov	r7, r5
 801290e:	42bb      	cmp	r3, r7
 8012910:	460d      	mov	r5, r1
 8012912:	d9f4      	bls.n	80128fe <_printf_i+0x11a>
 8012914:	2b08      	cmp	r3, #8
 8012916:	d10b      	bne.n	8012930 <_printf_i+0x14c>
 8012918:	6823      	ldr	r3, [r4, #0]
 801291a:	07df      	lsls	r7, r3, #31
 801291c:	d508      	bpl.n	8012930 <_printf_i+0x14c>
 801291e:	6923      	ldr	r3, [r4, #16]
 8012920:	6861      	ldr	r1, [r4, #4]
 8012922:	4299      	cmp	r1, r3
 8012924:	bfde      	ittt	le
 8012926:	2330      	movle	r3, #48	; 0x30
 8012928:	f806 3c01 	strble.w	r3, [r6, #-1]
 801292c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012930:	1b92      	subs	r2, r2, r6
 8012932:	6122      	str	r2, [r4, #16]
 8012934:	f8cd a000 	str.w	sl, [sp]
 8012938:	464b      	mov	r3, r9
 801293a:	aa03      	add	r2, sp, #12
 801293c:	4621      	mov	r1, r4
 801293e:	4640      	mov	r0, r8
 8012940:	f7ff fee2 	bl	8012708 <_printf_common>
 8012944:	3001      	adds	r0, #1
 8012946:	d14c      	bne.n	80129e2 <_printf_i+0x1fe>
 8012948:	f04f 30ff 	mov.w	r0, #4294967295
 801294c:	b004      	add	sp, #16
 801294e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012952:	4835      	ldr	r0, [pc, #212]	; (8012a28 <_printf_i+0x244>)
 8012954:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012958:	6823      	ldr	r3, [r4, #0]
 801295a:	680e      	ldr	r6, [r1, #0]
 801295c:	061f      	lsls	r7, r3, #24
 801295e:	f856 5b04 	ldr.w	r5, [r6], #4
 8012962:	600e      	str	r6, [r1, #0]
 8012964:	d514      	bpl.n	8012990 <_printf_i+0x1ac>
 8012966:	07d9      	lsls	r1, r3, #31
 8012968:	bf44      	itt	mi
 801296a:	f043 0320 	orrmi.w	r3, r3, #32
 801296e:	6023      	strmi	r3, [r4, #0]
 8012970:	b91d      	cbnz	r5, 801297a <_printf_i+0x196>
 8012972:	6823      	ldr	r3, [r4, #0]
 8012974:	f023 0320 	bic.w	r3, r3, #32
 8012978:	6023      	str	r3, [r4, #0]
 801297a:	2310      	movs	r3, #16
 801297c:	e7b0      	b.n	80128e0 <_printf_i+0xfc>
 801297e:	6823      	ldr	r3, [r4, #0]
 8012980:	f043 0320 	orr.w	r3, r3, #32
 8012984:	6023      	str	r3, [r4, #0]
 8012986:	2378      	movs	r3, #120	; 0x78
 8012988:	4828      	ldr	r0, [pc, #160]	; (8012a2c <_printf_i+0x248>)
 801298a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801298e:	e7e3      	b.n	8012958 <_printf_i+0x174>
 8012990:	065e      	lsls	r6, r3, #25
 8012992:	bf48      	it	mi
 8012994:	b2ad      	uxthmi	r5, r5
 8012996:	e7e6      	b.n	8012966 <_printf_i+0x182>
 8012998:	4616      	mov	r6, r2
 801299a:	e7bb      	b.n	8012914 <_printf_i+0x130>
 801299c:	680b      	ldr	r3, [r1, #0]
 801299e:	6826      	ldr	r6, [r4, #0]
 80129a0:	6960      	ldr	r0, [r4, #20]
 80129a2:	1d1d      	adds	r5, r3, #4
 80129a4:	600d      	str	r5, [r1, #0]
 80129a6:	0635      	lsls	r5, r6, #24
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	d501      	bpl.n	80129b0 <_printf_i+0x1cc>
 80129ac:	6018      	str	r0, [r3, #0]
 80129ae:	e002      	b.n	80129b6 <_printf_i+0x1d2>
 80129b0:	0671      	lsls	r1, r6, #25
 80129b2:	d5fb      	bpl.n	80129ac <_printf_i+0x1c8>
 80129b4:	8018      	strh	r0, [r3, #0]
 80129b6:	2300      	movs	r3, #0
 80129b8:	6123      	str	r3, [r4, #16]
 80129ba:	4616      	mov	r6, r2
 80129bc:	e7ba      	b.n	8012934 <_printf_i+0x150>
 80129be:	680b      	ldr	r3, [r1, #0]
 80129c0:	1d1a      	adds	r2, r3, #4
 80129c2:	600a      	str	r2, [r1, #0]
 80129c4:	681e      	ldr	r6, [r3, #0]
 80129c6:	6862      	ldr	r2, [r4, #4]
 80129c8:	2100      	movs	r1, #0
 80129ca:	4630      	mov	r0, r6
 80129cc:	f7ed fc20 	bl	8000210 <memchr>
 80129d0:	b108      	cbz	r0, 80129d6 <_printf_i+0x1f2>
 80129d2:	1b80      	subs	r0, r0, r6
 80129d4:	6060      	str	r0, [r4, #4]
 80129d6:	6863      	ldr	r3, [r4, #4]
 80129d8:	6123      	str	r3, [r4, #16]
 80129da:	2300      	movs	r3, #0
 80129dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129e0:	e7a8      	b.n	8012934 <_printf_i+0x150>
 80129e2:	6923      	ldr	r3, [r4, #16]
 80129e4:	4632      	mov	r2, r6
 80129e6:	4649      	mov	r1, r9
 80129e8:	4640      	mov	r0, r8
 80129ea:	47d0      	blx	sl
 80129ec:	3001      	adds	r0, #1
 80129ee:	d0ab      	beq.n	8012948 <_printf_i+0x164>
 80129f0:	6823      	ldr	r3, [r4, #0]
 80129f2:	079b      	lsls	r3, r3, #30
 80129f4:	d413      	bmi.n	8012a1e <_printf_i+0x23a>
 80129f6:	68e0      	ldr	r0, [r4, #12]
 80129f8:	9b03      	ldr	r3, [sp, #12]
 80129fa:	4298      	cmp	r0, r3
 80129fc:	bfb8      	it	lt
 80129fe:	4618      	movlt	r0, r3
 8012a00:	e7a4      	b.n	801294c <_printf_i+0x168>
 8012a02:	2301      	movs	r3, #1
 8012a04:	4632      	mov	r2, r6
 8012a06:	4649      	mov	r1, r9
 8012a08:	4640      	mov	r0, r8
 8012a0a:	47d0      	blx	sl
 8012a0c:	3001      	adds	r0, #1
 8012a0e:	d09b      	beq.n	8012948 <_printf_i+0x164>
 8012a10:	3501      	adds	r5, #1
 8012a12:	68e3      	ldr	r3, [r4, #12]
 8012a14:	9903      	ldr	r1, [sp, #12]
 8012a16:	1a5b      	subs	r3, r3, r1
 8012a18:	42ab      	cmp	r3, r5
 8012a1a:	dcf2      	bgt.n	8012a02 <_printf_i+0x21e>
 8012a1c:	e7eb      	b.n	80129f6 <_printf_i+0x212>
 8012a1e:	2500      	movs	r5, #0
 8012a20:	f104 0619 	add.w	r6, r4, #25
 8012a24:	e7f5      	b.n	8012a12 <_printf_i+0x22e>
 8012a26:	bf00      	nop
 8012a28:	080149ad 	.word	0x080149ad
 8012a2c:	080149be 	.word	0x080149be

08012a30 <_read_r>:
 8012a30:	b538      	push	{r3, r4, r5, lr}
 8012a32:	4d07      	ldr	r5, [pc, #28]	; (8012a50 <_read_r+0x20>)
 8012a34:	4604      	mov	r4, r0
 8012a36:	4608      	mov	r0, r1
 8012a38:	4611      	mov	r1, r2
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	602a      	str	r2, [r5, #0]
 8012a3e:	461a      	mov	r2, r3
 8012a40:	f7f0 f828 	bl	8002a94 <_read>
 8012a44:	1c43      	adds	r3, r0, #1
 8012a46:	d102      	bne.n	8012a4e <_read_r+0x1e>
 8012a48:	682b      	ldr	r3, [r5, #0]
 8012a4a:	b103      	cbz	r3, 8012a4e <_read_r+0x1e>
 8012a4c:	6023      	str	r3, [r4, #0]
 8012a4e:	bd38      	pop	{r3, r4, r5, pc}
 8012a50:	20003498 	.word	0x20003498
 8012a54:	00000000 	.word	0x00000000

08012a58 <nan>:
 8012a58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012a60 <nan+0x8>
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	00000000 	.word	0x00000000
 8012a64:	7ff80000 	.word	0x7ff80000

08012a68 <__ascii_wctomb>:
 8012a68:	b149      	cbz	r1, 8012a7e <__ascii_wctomb+0x16>
 8012a6a:	2aff      	cmp	r2, #255	; 0xff
 8012a6c:	bf85      	ittet	hi
 8012a6e:	238a      	movhi	r3, #138	; 0x8a
 8012a70:	6003      	strhi	r3, [r0, #0]
 8012a72:	700a      	strbls	r2, [r1, #0]
 8012a74:	f04f 30ff 	movhi.w	r0, #4294967295
 8012a78:	bf98      	it	ls
 8012a7a:	2001      	movls	r0, #1
 8012a7c:	4770      	bx	lr
 8012a7e:	4608      	mov	r0, r1
 8012a80:	4770      	bx	lr
	...

08012a84 <__assert_func>:
 8012a84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a86:	4614      	mov	r4, r2
 8012a88:	461a      	mov	r2, r3
 8012a8a:	4b09      	ldr	r3, [pc, #36]	; (8012ab0 <__assert_func+0x2c>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4605      	mov	r5, r0
 8012a90:	68d8      	ldr	r0, [r3, #12]
 8012a92:	b14c      	cbz	r4, 8012aa8 <__assert_func+0x24>
 8012a94:	4b07      	ldr	r3, [pc, #28]	; (8012ab4 <__assert_func+0x30>)
 8012a96:	9100      	str	r1, [sp, #0]
 8012a98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a9c:	4906      	ldr	r1, [pc, #24]	; (8012ab8 <__assert_func+0x34>)
 8012a9e:	462b      	mov	r3, r5
 8012aa0:	f000 f80e 	bl	8012ac0 <fiprintf>
 8012aa4:	f000 f862 	bl	8012b6c <abort>
 8012aa8:	4b04      	ldr	r3, [pc, #16]	; (8012abc <__assert_func+0x38>)
 8012aaa:	461c      	mov	r4, r3
 8012aac:	e7f3      	b.n	8012a96 <__assert_func+0x12>
 8012aae:	bf00      	nop
 8012ab0:	20000160 	.word	0x20000160
 8012ab4:	080149cf 	.word	0x080149cf
 8012ab8:	080149dc 	.word	0x080149dc
 8012abc:	08014a0a 	.word	0x08014a0a

08012ac0 <fiprintf>:
 8012ac0:	b40e      	push	{r1, r2, r3}
 8012ac2:	b503      	push	{r0, r1, lr}
 8012ac4:	4601      	mov	r1, r0
 8012ac6:	ab03      	add	r3, sp, #12
 8012ac8:	4805      	ldr	r0, [pc, #20]	; (8012ae0 <fiprintf+0x20>)
 8012aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ace:	6800      	ldr	r0, [r0, #0]
 8012ad0:	9301      	str	r3, [sp, #4]
 8012ad2:	f7ff fce9 	bl	80124a8 <_vfiprintf_r>
 8012ad6:	b002      	add	sp, #8
 8012ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012adc:	b003      	add	sp, #12
 8012ade:	4770      	bx	lr
 8012ae0:	20000160 	.word	0x20000160

08012ae4 <_fstat_r>:
 8012ae4:	b538      	push	{r3, r4, r5, lr}
 8012ae6:	4d07      	ldr	r5, [pc, #28]	; (8012b04 <_fstat_r+0x20>)
 8012ae8:	2300      	movs	r3, #0
 8012aea:	4604      	mov	r4, r0
 8012aec:	4608      	mov	r0, r1
 8012aee:	4611      	mov	r1, r2
 8012af0:	602b      	str	r3, [r5, #0]
 8012af2:	f7f0 f814 	bl	8002b1e <_fstat>
 8012af6:	1c43      	adds	r3, r0, #1
 8012af8:	d102      	bne.n	8012b00 <_fstat_r+0x1c>
 8012afa:	682b      	ldr	r3, [r5, #0]
 8012afc:	b103      	cbz	r3, 8012b00 <_fstat_r+0x1c>
 8012afe:	6023      	str	r3, [r4, #0]
 8012b00:	bd38      	pop	{r3, r4, r5, pc}
 8012b02:	bf00      	nop
 8012b04:	20003498 	.word	0x20003498

08012b08 <_isatty_r>:
 8012b08:	b538      	push	{r3, r4, r5, lr}
 8012b0a:	4d06      	ldr	r5, [pc, #24]	; (8012b24 <_isatty_r+0x1c>)
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	4604      	mov	r4, r0
 8012b10:	4608      	mov	r0, r1
 8012b12:	602b      	str	r3, [r5, #0]
 8012b14:	f7f0 f813 	bl	8002b3e <_isatty>
 8012b18:	1c43      	adds	r3, r0, #1
 8012b1a:	d102      	bne.n	8012b22 <_isatty_r+0x1a>
 8012b1c:	682b      	ldr	r3, [r5, #0]
 8012b1e:	b103      	cbz	r3, 8012b22 <_isatty_r+0x1a>
 8012b20:	6023      	str	r3, [r4, #0]
 8012b22:	bd38      	pop	{r3, r4, r5, pc}
 8012b24:	20003498 	.word	0x20003498

08012b28 <memmove>:
 8012b28:	4288      	cmp	r0, r1
 8012b2a:	b510      	push	{r4, lr}
 8012b2c:	eb01 0402 	add.w	r4, r1, r2
 8012b30:	d902      	bls.n	8012b38 <memmove+0x10>
 8012b32:	4284      	cmp	r4, r0
 8012b34:	4623      	mov	r3, r4
 8012b36:	d807      	bhi.n	8012b48 <memmove+0x20>
 8012b38:	1e43      	subs	r3, r0, #1
 8012b3a:	42a1      	cmp	r1, r4
 8012b3c:	d008      	beq.n	8012b50 <memmove+0x28>
 8012b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b46:	e7f8      	b.n	8012b3a <memmove+0x12>
 8012b48:	4402      	add	r2, r0
 8012b4a:	4601      	mov	r1, r0
 8012b4c:	428a      	cmp	r2, r1
 8012b4e:	d100      	bne.n	8012b52 <memmove+0x2a>
 8012b50:	bd10      	pop	{r4, pc}
 8012b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b5a:	e7f7      	b.n	8012b4c <memmove+0x24>

08012b5c <_malloc_usable_size_r>:
 8012b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b60:	1f18      	subs	r0, r3, #4
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	bfbc      	itt	lt
 8012b66:	580b      	ldrlt	r3, [r1, r0]
 8012b68:	18c0      	addlt	r0, r0, r3
 8012b6a:	4770      	bx	lr

08012b6c <abort>:
 8012b6c:	b508      	push	{r3, lr}
 8012b6e:	2006      	movs	r0, #6
 8012b70:	f000 f82c 	bl	8012bcc <raise>
 8012b74:	2001      	movs	r0, #1
 8012b76:	f7ef ff83 	bl	8002a80 <_exit>

08012b7a <_raise_r>:
 8012b7a:	291f      	cmp	r1, #31
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	4604      	mov	r4, r0
 8012b80:	460d      	mov	r5, r1
 8012b82:	d904      	bls.n	8012b8e <_raise_r+0x14>
 8012b84:	2316      	movs	r3, #22
 8012b86:	6003      	str	r3, [r0, #0]
 8012b88:	f04f 30ff 	mov.w	r0, #4294967295
 8012b8c:	bd38      	pop	{r3, r4, r5, pc}
 8012b8e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b90:	b112      	cbz	r2, 8012b98 <_raise_r+0x1e>
 8012b92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b96:	b94b      	cbnz	r3, 8012bac <_raise_r+0x32>
 8012b98:	4620      	mov	r0, r4
 8012b9a:	f000 f831 	bl	8012c00 <_getpid_r>
 8012b9e:	462a      	mov	r2, r5
 8012ba0:	4601      	mov	r1, r0
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ba8:	f000 b818 	b.w	8012bdc <_kill_r>
 8012bac:	2b01      	cmp	r3, #1
 8012bae:	d00a      	beq.n	8012bc6 <_raise_r+0x4c>
 8012bb0:	1c59      	adds	r1, r3, #1
 8012bb2:	d103      	bne.n	8012bbc <_raise_r+0x42>
 8012bb4:	2316      	movs	r3, #22
 8012bb6:	6003      	str	r3, [r0, #0]
 8012bb8:	2001      	movs	r0, #1
 8012bba:	e7e7      	b.n	8012b8c <_raise_r+0x12>
 8012bbc:	2400      	movs	r4, #0
 8012bbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	4798      	blx	r3
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	e7e0      	b.n	8012b8c <_raise_r+0x12>
	...

08012bcc <raise>:
 8012bcc:	4b02      	ldr	r3, [pc, #8]	; (8012bd8 <raise+0xc>)
 8012bce:	4601      	mov	r1, r0
 8012bd0:	6818      	ldr	r0, [r3, #0]
 8012bd2:	f7ff bfd2 	b.w	8012b7a <_raise_r>
 8012bd6:	bf00      	nop
 8012bd8:	20000160 	.word	0x20000160

08012bdc <_kill_r>:
 8012bdc:	b538      	push	{r3, r4, r5, lr}
 8012bde:	4d07      	ldr	r5, [pc, #28]	; (8012bfc <_kill_r+0x20>)
 8012be0:	2300      	movs	r3, #0
 8012be2:	4604      	mov	r4, r0
 8012be4:	4608      	mov	r0, r1
 8012be6:	4611      	mov	r1, r2
 8012be8:	602b      	str	r3, [r5, #0]
 8012bea:	f7ef ff39 	bl	8002a60 <_kill>
 8012bee:	1c43      	adds	r3, r0, #1
 8012bf0:	d102      	bne.n	8012bf8 <_kill_r+0x1c>
 8012bf2:	682b      	ldr	r3, [r5, #0]
 8012bf4:	b103      	cbz	r3, 8012bf8 <_kill_r+0x1c>
 8012bf6:	6023      	str	r3, [r4, #0]
 8012bf8:	bd38      	pop	{r3, r4, r5, pc}
 8012bfa:	bf00      	nop
 8012bfc:	20003498 	.word	0x20003498

08012c00 <_getpid_r>:
 8012c00:	f7ef bf26 	b.w	8002a50 <_getpid>

08012c04 <_init>:
 8012c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c06:	bf00      	nop
 8012c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c0a:	bc08      	pop	{r3}
 8012c0c:	469e      	mov	lr, r3
 8012c0e:	4770      	bx	lr

08012c10 <_fini>:
 8012c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c12:	bf00      	nop
 8012c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c16:	bc08      	pop	{r3}
 8012c18:	469e      	mov	lr, r3
 8012c1a:	4770      	bx	lr
