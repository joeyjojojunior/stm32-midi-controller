
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015a0  0800b128  0800b128  0001b128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6c8  0800c6c8  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6c8  0800c6c8  0001c6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6d0  0800c6d0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6d0  0800c6d0  0001c6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6d4  0800c6d4  0001c6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800c6d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b9c  20000180  0800c858  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d1c  0800c858  00022d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c82e  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004165  00000000  00000000  0003c9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00040b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00041d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd7e  00000000  00000000  00042e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019662  00000000  00000000  0005fb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a155c  00000000  00000000  000791f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a74c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  0011a7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b110 	.word	0x0800b110

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800b110 	.word	0x0800b110

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <KnobMap>:
//uint8_t Knob_Map(Knob *k) {
//	return k->value * k->max_range / (k->max_values - 1);
//}

// Maps values from (0, max_values-1) to (0, m)
uint8_t KnobMap(Knob *k, uint8_t value, uint8_t m) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	fb02 f203 	mul.w	r2, r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000f32:	3b01      	subs	r3, #1
 8000f34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <ADC_DMA_Average>:
void dmux_select(uint8_t row, uint8_t col);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ADC_DMA_Average(int channel) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	uint32_t adc_sum;
	int i;

	adc_sum = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
	if (channel < NUM_ADC_CHANNELS) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	dc14      	bgt.n	8000f84 <ADC_DMA_Average+0x3c>
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	e00d      	b.n	8000f7c <ADC_DMA_Average+0x34>
			adc_sum += adcBuf[channel + i * NUM_ADC_CHANNELS];
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	009a      	lsls	r2, r3, #2
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <ADC_DMA_Average+0x54>)
 8000f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < NUM_ADC_SAMPLES; i++)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b1f      	cmp	r3, #31
 8000f80:	ddee      	ble.n	8000f60 <ADC_DMA_Average+0x18>
 8000f82:	e001      	b.n	8000f88 <ADC_DMA_Average+0x40>
	} else {
		return 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e002      	b.n	8000f8e <ADC_DMA_Average+0x46>
	}

	return adc_sum / NUM_ADC_SAMPLES;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	b29b      	uxth	r3, r3
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000019c 	.word	0x2000019c

08000fa0 <MIDI_Send>:

void MIDI_Send(Knob *k, uint8_t value) {
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	MX_USB_Send_Midi(k->channel, k->cc, KnobMap(k, value, k->max_range));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 5029 	ldrb.w	r5, [r3, #41]	; 0x29
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa6 	bl	8000f14 <KnobMap>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4629      	mov	r1, r5
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f008 fb6c 	bl	80096ac <MX_USB_Send_Midi>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bdb0      	pop	{r4, r5, r7, pc}
 8000fdc:	0000      	movs	r0, r0
	...

08000fe0 <MIDI_Scale_And_Filter>:

uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	float midi_scale_factor = 1.0 * (k->max_values) / UPPER_BOUND_ADC;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fa9e 	bl	8000534 <__aeabi_i2d>
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b4c      	ldr	r3, [pc, #304]	; (8001130 <MIDI_Scale_And_Filter+0x150>)
 8000ffe:	f7ff fc2d 	bl	800085c <__aeabi_ddiv>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fdb7 	bl	8000b7c <__aeabi_d2f>
 800100e:	4603      	mov	r3, r0
 8001010:	60fb      	str	r3, [r7, #12]
	return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f7ff faa0 	bl	8000558 <__aeabi_f2d>
 8001018:	a341      	add	r3, pc, #260	; (adr r3, 8001120 <MIDI_Scale_And_Filter+0x140>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff faf3 	bl	8000608 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4614      	mov	r4, r2
 8001028:	461d      	mov	r5, r3
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa81 	bl	8000534 <__aeabi_i2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4620      	mov	r0, r4
 8001038:	4629      	mov	r1, r5
 800103a:	f7ff fae5 	bl	8000608 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4614      	mov	r4, r2
 8001044:	461d      	mov	r5, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa71 	bl	8000534 <__aeabi_i2d>
 8001052:	a335      	add	r3, pc, #212	; (adr r3, 8001128 <MIDI_Scale_And_Filter+0x148>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fad6 	bl	8000608 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4620      	mov	r0, r4
 8001062:	4629      	mov	r1, r5
 8001064:	f7ff f91a 	bl	800029c <__adddf3>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4614      	mov	r4, r2
 800106e:	461d      	mov	r5, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa5c 	bl	8000534 <__aeabi_i2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff fd32 	bl	8000aec <__aeabi_dcmplt>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d033      	beq.n	80010f6 <MIDI_Scale_And_Filter+0x116>
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff fa62 	bl	8000558 <__aeabi_f2d>
 8001094:	a322      	add	r3, pc, #136	; (adr r3, 8001120 <MIDI_Scale_And_Filter+0x140>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff fab5 	bl	8000608 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4614      	mov	r4, r2
 80010a4:	461d      	mov	r5, r3
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa43 	bl	8000534 <__aeabi_i2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4620      	mov	r0, r4
 80010b4:	4629      	mov	r1, r5
 80010b6:	f7ff faa7 	bl	8000608 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4614      	mov	r4, r2
 80010c0:	461d      	mov	r5, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa33 	bl	8000534 <__aeabi_i2d>
 80010ce:	a316      	add	r3, pc, #88	; (adr r3, 8001128 <MIDI_Scale_And_Filter+0x148>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff fa98 	bl	8000608 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff f8dc 	bl	800029c <__adddf3>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fd26 	bl	8000b3c <__aeabi_d2uiz>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	e00d      	b.n	8001112 <MIDI_Scale_And_Filter+0x132>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fa19 	bl	8000534 <__aeabi_i2d>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd17 	bl	8000b3c <__aeabi_d2uiz>
 800110e:	4603      	mov	r3, r0
 8001110:	b2db      	uxtb	r3, r3
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bdb0      	pop	{r4, r5, r7, pc}
 800111a:	bf00      	nop
 800111c:	f3af 8000 	nop.w
 8001120:	66666666 	.word	0x66666666
 8001124:	3fe66666 	.word	0x3fe66666
 8001128:	33333334 	.word	0x33333334
 800112c:	3fd33333 	.word	0x3fd33333
 8001130:	406f4000 	.word	0x406f4000

08001134 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b0b4      	sub	sp, #208	; 0xd0
 8001138:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	Knob knobs[4] = {
 800113a:	463b      	mov	r3, r7
 800113c:	22c0      	movs	r2, #192	; 0xc0
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f008 ff89 	bl	800a058 <memset>
 8001146:	4ad4      	ldr	r2, [pc, #848]	; (8001498 <main+0x364>)
 8001148:	1cfb      	adds	r3, r7, #3
 800114a:	6810      	ldr	r0, [r2, #0]
 800114c:	6018      	str	r0, [r3, #0]
 800114e:	8891      	ldrh	r1, [r2, #4]
 8001150:	7992      	ldrb	r2, [r2, #6]
 8001152:	8099      	strh	r1, [r3, #4]
 8001154:	719a      	strb	r2, [r3, #6]
 8001156:	f107 030a 	add.w	r3, r7, #10
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	4bce      	ldr	r3, [pc, #824]	; (800149c <main+0x368>)
 8001162:	f107 0212 	add.w	r2, r7, #18
 8001166:	cb03      	ldmia	r3!, {r0, r1}
 8001168:	6010      	str	r0, [r2, #0]
 800116a:	6051      	str	r1, [r2, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	7213      	strb	r3, [r2, #8]
 8001170:	f107 031b 	add.w	r3, r7, #27
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	809a      	strh	r2, [r3, #4]
 800117a:	2311      	movs	r3, #17
 800117c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001186:	237f      	movs	r3, #127	; 0x7f
 8001188:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800118c:	237f      	movs	r3, #127	; 0x7f
 800118e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001192:	2301      	movs	r3, #1
 8001194:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001198:	4bc1      	ldr	r3, [pc, #772]	; (80014a0 <main+0x36c>)
 800119a:	f107 0233 	add.w	r2, r7, #51	; 0x33
 800119e:	cb03      	ldmia	r3!, {r0, r1}
 80011a0:	6010      	str	r0, [r2, #0]
 80011a2:	6051      	str	r1, [r2, #4]
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	8113      	strh	r3, [r2, #8]
 80011a8:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	711a      	strb	r2, [r3, #4]
 80011b2:	4bbc      	ldr	r3, [pc, #752]	; (80014a4 <main+0x370>)
 80011b4:	f107 0242 	add.w	r2, r7, #66	; 0x42
 80011b8:	cb03      	ldmia	r3!, {r0, r1}
 80011ba:	6010      	str	r0, [r2, #0]
 80011bc:	6051      	str	r1, [r2, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	7213      	strb	r3, [r2, #8]
 80011c2:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	809a      	strh	r2, [r3, #4]
 80011cc:	2301      	movs	r3, #1
 80011ce:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80011d2:	2312      	movs	r3, #18
 80011d4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80011de:	237f      	movs	r3, #127	; 0x7f
 80011e0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80011e4:	2303      	movs	r3, #3
 80011e6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80011ea:	2301      	movs	r3, #1
 80011ec:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80011f0:	4aad      	ldr	r2, [pc, #692]	; (80014a8 <main+0x374>)
 80011f2:	f107 0363 	add.w	r3, r7, #99	; 0x63
 80011f6:	6810      	ldr	r0, [r2, #0]
 80011f8:	6018      	str	r0, [r3, #0]
 80011fa:	8892      	ldrh	r2, [r2, #4]
 80011fc:	809a      	strh	r2, [r3, #4]
 80011fe:	f107 0369 	add.w	r3, r7, #105	; 0x69
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	721a      	strb	r2, [r3, #8]
 800120a:	2302      	movs	r3, #2
 800120c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
 8001210:	2313      	movs	r3, #19
 8001212:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 8001216:	230c      	movs	r3, #12
 8001218:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800121c:	237f      	movs	r3, #127	; 0x7f
 800121e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8001222:	2304      	movs	r3, #4
 8001224:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8001228:	2301      	movs	r3, #1
 800122a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 800122e:	2301      	movs	r3, #1
 8001230:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8001234:	4a9d      	ldr	r2, [pc, #628]	; (80014ac <main+0x378>)
 8001236:	f107 0393 	add.w	r3, r7, #147	; 0x93
 800123a:	6810      	ldr	r0, [r2, #0]
 800123c:	6018      	str	r0, [r3, #0]
 800123e:	8892      	ldrh	r2, [r2, #4]
 8001240:	809a      	strh	r2, [r3, #4]
 8001242:	f107 0399 	add.w	r3, r7, #153	; 0x99
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	721a      	strb	r2, [r3, #8]
 800124e:	4b98      	ldr	r3, [pc, #608]	; (80014b0 <main+0x37c>)
 8001250:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 8001254:	cb03      	ldmia	r3!, {r0, r1}
 8001256:	6010      	str	r0, [r2, #0]
 8001258:	6051      	str	r1, [r2, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	7213      	strb	r3, [r2, #8]
 800125e:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	809a      	strh	r2, [r3, #4]
 8001268:	2303      	movs	r3, #3
 800126a:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 800126e:	2314      	movs	r3, #20
 8001270:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 8001274:	230c      	movs	r3, #12
 8001276:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800127a:	230b      	movs	r3, #11
 800127c:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
			{.init_value = 127, .row = 0, .col = 1, .label = "Resonance", .sub_label = "Filter 2", .channel = 1, .cc = 18, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 0},
			{.init_value = 3, .row = 1, .col = 0, .label = "Osc 0", .sub_label = "", .channel = 2, .cc = 19, .value = 0, .max_values = 12, .max_range = 127, .isLocked = 0},
			{.init_value = 4, .row = 1, .col = 1, .label = "Osc 1", .sub_label = "Velocity", .channel = 3, .cc = 20, .value = 0, .max_values = 12, .max_range = 11, .isLocked = 0}
	};

	for (int i = 2; i < 4; i++) {
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001286:	e0ee      	b.n	8001466 <main+0x332>
		knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 8001288:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001298:	4413      	add	r3, r2
 800129a:	3ba5      	subs	r3, #165	; 0xa5
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	4613      	mov	r3, r2
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	1a9b      	subs	r3, r3, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 fece 	bl	800a048 <malloc>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4619      	mov	r1, r3
 80012b0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80012c0:	4413      	add	r3, r2
 80012c2:	3bac      	subs	r3, #172	; 0xac
 80012c4:	6019      	str	r1, [r3, #0]
		strncpy(knobs[i].sub_labels[0], "Sine><", MAX_LABEL_CHARS);
 80012c6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80012d6:	4413      	add	r3, r2
 80012d8:	3bac      	subs	r3, #172	; 0xac
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	220e      	movs	r2, #14
 80012de:	4975      	ldr	r1, [pc, #468]	; (80014b4 <main+0x380>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f009 f825 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[1], "Saw", MAX_LABEL_CHARS);
 80012e6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80012f6:	4413      	add	r3, r2
 80012f8:	3bac      	subs	r3, #172	; 0xac
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	330f      	adds	r3, #15
 80012fe:	220e      	movs	r2, #14
 8001300:	496d      	ldr	r1, [pc, #436]	; (80014b8 <main+0x384>)
 8001302:	4618      	mov	r0, r3
 8001304:	f009 f814 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[2], "Square", MAX_LABEL_CHARS);
 8001308:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001318:	4413      	add	r3, r2
 800131a:	3bac      	subs	r3, #172	; 0xac
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	331e      	adds	r3, #30
 8001320:	220e      	movs	r2, #14
 8001322:	4966      	ldr	r1, [pc, #408]	; (80014bc <main+0x388>)
 8001324:	4618      	mov	r0, r3
 8001326:	f009 f803 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[3], "Pulse1", MAX_LABEL_CHARS);
 800132a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800133a:	4413      	add	r3, r2
 800133c:	3bac      	subs	r3, #172	; 0xac
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	332d      	adds	r3, #45	; 0x2d
 8001342:	220e      	movs	r2, #14
 8001344:	495e      	ldr	r1, [pc, #376]	; (80014c0 <main+0x38c>)
 8001346:	4618      	mov	r0, r3
 8001348:	f008 fff2 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[4], "Pulse2", MAX_LABEL_CHARS);
 800134c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800135c:	4413      	add	r3, r2
 800135e:	3bac      	subs	r3, #172	; 0xac
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	333c      	adds	r3, #60	; 0x3c
 8001364:	220e      	movs	r2, #14
 8001366:	4957      	ldr	r1, [pc, #348]	; (80014c4 <main+0x390>)
 8001368:	4618      	mov	r0, r3
 800136a:	f008 ffe1 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[5], "Pulse3", MAX_LABEL_CHARS);
 800136e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800137e:	4413      	add	r3, r2
 8001380:	3bac      	subs	r3, #172	; 0xac
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	334b      	adds	r3, #75	; 0x4b
 8001386:	220e      	movs	r2, #14
 8001388:	494f      	ldr	r1, [pc, #316]	; (80014c8 <main+0x394>)
 800138a:	4618      	mov	r0, r3
 800138c:	f008 ffd0 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[6], "Pulse4", MAX_LABEL_CHARS);
 8001390:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80013a0:	4413      	add	r3, r2
 80013a2:	3bac      	subs	r3, #172	; 0xac
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	335a      	adds	r3, #90	; 0x5a
 80013a8:	220e      	movs	r2, #14
 80013aa:	4948      	ldr	r1, [pc, #288]	; (80014cc <main+0x398>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f008 ffbf 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[7], "Pulse5", MAX_LABEL_CHARS);
 80013b2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80013c2:	4413      	add	r3, r2
 80013c4:	3bac      	subs	r3, #172	; 0xac
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3369      	adds	r3, #105	; 0x69
 80013ca:	220e      	movs	r2, #14
 80013cc:	4940      	ldr	r1, [pc, #256]	; (80014d0 <main+0x39c>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f008 ffae 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[8], "Pulse6", MAX_LABEL_CHARS);
 80013d4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80013e4:	4413      	add	r3, r2
 80013e6:	3bac      	subs	r3, #172	; 0xac
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3378      	adds	r3, #120	; 0x78
 80013ec:	220e      	movs	r2, #14
 80013ee:	4939      	ldr	r1, [pc, #228]	; (80014d4 <main+0x3a0>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f008 ff9d 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[9], "Pulse7", MAX_LABEL_CHARS);
 80013f6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001406:	4413      	add	r3, r2
 8001408:	3bac      	subs	r3, #172	; 0xac
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3387      	adds	r3, #135	; 0x87
 800140e:	220e      	movs	r2, #14
 8001410:	4931      	ldr	r1, [pc, #196]	; (80014d8 <main+0x3a4>)
 8001412:	4618      	mov	r0, r3
 8001414:	f008 ff8c 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[10], "Pulse8", MAX_LABEL_CHARS);
 8001418:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001428:	4413      	add	r3, r2
 800142a:	3bac      	subs	r3, #172	; 0xac
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3396      	adds	r3, #150	; 0x96
 8001430:	220e      	movs	r2, #14
 8001432:	492a      	ldr	r1, [pc, #168]	; (80014dc <main+0x3a8>)
 8001434:	4618      	mov	r0, r3
 8001436:	f008 ff7b 	bl	800a330 <strncpy>
		strncpy(knobs[i].sub_labels[11], "Pulse9", MAX_LABEL_CHARS);
 800143a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800144a:	4413      	add	r3, r2
 800144c:	3bac      	subs	r3, #172	; 0xac
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	33a5      	adds	r3, #165	; 0xa5
 8001452:	220e      	movs	r2, #14
 8001454:	4922      	ldr	r1, [pc, #136]	; (80014e0 <main+0x3ac>)
 8001456:	4618      	mov	r0, r3
 8001458:	f008 ff6a 	bl	800a330 <strncpy>
	for (int i = 2; i < 4; i++) {
 800145c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001460:	3301      	adds	r3, #1
 8001462:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001466:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800146a:	2b03      	cmp	r3, #3
 800146c:	f77f af0c 	ble.w	8001288 <main+0x154>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001470:	f000 fcca 	bl	8001e08 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001474:	f000 f8d8 	bl	8001628 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001478:	f000 fa4c 	bl	8001914 <MX_GPIO_Init>
	MX_RTC_Init();
 800147c:	f000 fa04 	bl	8001888 <MX_RTC_Init>
	MX_DMA_Init();
 8001480:	f000 fa28 	bl	80018d4 <MX_DMA_Init>
	MX_ADC1_Init();
 8001484:	f000 f956 	bl	8001734 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001488:	f000 f9d0 	bl	800182c <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 800148c:	f008 f8de 	bl	800964c <MX_USB_DEVICE_Init>
	//MX_SDIO_SD_Init();

	/* USER CODE BEGIN 2 */
	// Init displays
	for (int i = 0; i < 4; i++) {
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001496:	e039      	b.n	800150c <main+0x3d8>
 8001498:	0800b184 	.word	0x0800b184
 800149c:	0800b194 	.word	0x0800b194
 80014a0:	0800b1a4 	.word	0x0800b1a4
 80014a4:	0800b1b4 	.word	0x0800b1b4
 80014a8:	0800b1c4 	.word	0x0800b1c4
 80014ac:	0800b1d4 	.word	0x0800b1d4
 80014b0:	0800b1e4 	.word	0x0800b1e4
 80014b4:	0800b128 	.word	0x0800b128
 80014b8:	0800b130 	.word	0x0800b130
 80014bc:	0800b134 	.word	0x0800b134
 80014c0:	0800b13c 	.word	0x0800b13c
 80014c4:	0800b144 	.word	0x0800b144
 80014c8:	0800b14c 	.word	0x0800b14c
 80014cc:	0800b154 	.word	0x0800b154
 80014d0:	0800b15c 	.word	0x0800b15c
 80014d4:	0800b164 	.word	0x0800b164
 80014d8:	0800b16c 	.word	0x0800b16c
 80014dc:	0800b174 	.word	0x0800b174
 80014e0:	0800b17c 	.word	0x0800b17c
		ssd1306_Init(&hi2c1, &knobs[i]);
 80014e4:	4639      	mov	r1, r7
 80014e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	440b      	add	r3, r1
 80014f4:	4619      	mov	r1, r3
 80014f6:	4848      	ldr	r0, [pc, #288]	; (8001618 <main+0x4e4>)
 80014f8:	f007 fb90 	bl	8008c1c <ssd1306_Init>
		HAL_Delay(10);
 80014fc:	200a      	movs	r0, #10
 80014fe:	f000 fcf5 	bl	8001eec <HAL_Delay>
	for (int i = 0; i < 4; i++) {
 8001502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001506:	3301      	adds	r3, #1
 8001508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800150c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001510:	2b03      	cmp	r3, #3
 8001512:	dde7      	ble.n	80014e4 <main+0x3b0>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_ADC_Start(&hadc1);
 8001514:	4841      	ldr	r0, [pc, #260]	; (800161c <main+0x4e8>)
 8001516:	f000 fd51 	bl	8001fbc <HAL_ADC_Start>

	while (1) {
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	4940      	ldr	r1, [pc, #256]	; (8001620 <main+0x4ec>)
 800151e:	483f      	ldr	r0, [pc, #252]	; (800161c <main+0x4e8>)
 8001520:	f000 fe00 	bl	8002124 <HAL_ADC_Start_DMA>

		for (int i = 0; i < 4; i++) {
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800152a:	e06f      	b.n	800160c <main+0x4d8>
			adcAveraged[i] = ADC_DMA_Average(i);
 800152c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001530:	f7ff fd0a 	bl	8000f48 <ADC_DMA_Average>
 8001534:	4603      	mov	r3, r0
 8001536:	4619      	mov	r1, r3
 8001538:	4a3a      	ldr	r2, [pc, #232]	; (8001624 <main+0x4f0>)
 800153a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800153e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcAveraged[i]);
 8001542:	4639      	mov	r1, r7
 8001544:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	18ca      	adds	r2, r1, r3
 8001552:	4934      	ldr	r1, [pc, #208]	; (8001624 <main+0x4f0>)
 8001554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001558:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	4610      	mov	r0, r2
 8001562:	f7ff fd3d 	bl	8000fe0 <MIDI_Scale_And_Filter>
 8001566:	4603      	mov	r3, r0
 8001568:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

			if (curr_MIDI_val != knobs[i].value) {
 800156c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800157c:	4413      	add	r3, r2
 800157e:	3ba6      	subs	r3, #166	; 0xa6
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8001586:	429a      	cmp	r2, r3
 8001588:	d03b      	beq.n	8001602 <main+0x4ce>
				knobs[i].value = curr_MIDI_val;
 800158a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800159a:	4413      	add	r3, r2
 800159c:	3ba6      	subs	r3, #166	; 0xa6
 800159e:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 80015a2:	701a      	strb	r2, [r3, #0]
				ssd1306_WriteKnob(&hi2c1, &knobs[i]);
 80015a4:	4639      	mov	r1, r7
 80015a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	440b      	add	r3, r1
 80015b4:	4619      	mov	r1, r3
 80015b6:	4818      	ldr	r0, [pc, #96]	; (8001618 <main+0x4e4>)
 80015b8:	f007 fcac 	bl	8008f14 <ssd1306_WriteKnob>

				if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 80015bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80015cc:	4413      	add	r3, r2
 80015ce:	3ba3      	subs	r3, #163	; 0xa3
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d115      	bne.n	8001602 <main+0x4ce>
 80015d6:	4639      	mov	r1, r7
 80015d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	18c8      	adds	r0, r1, r3
 80015e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80015f6:	4413      	add	r3, r2
 80015f8:	3ba6      	subs	r3, #166	; 0xa6
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff fccf 	bl	8000fa0 <MIDI_Send>
		for (int i = 0; i < 4; i++) {
 8001602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001606:	3301      	adds	r3, #1
 8001608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800160c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001610:	2b03      	cmp	r3, #3
 8001612:	dd8b      	ble.n	800152c <main+0x3f8>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcBuf, NUM_ADC_CHANNELS * NUM_ADC_SAMPLES);
 8001614:	e781      	b.n	800151a <main+0x3e6>
 8001616:	bf00      	nop
 8001618:	20002290 	.word	0x20002290
 800161c:	200022e4 	.word	0x200022e4
 8001620:	2000019c 	.word	0x2000019c
 8001624:	2000029c 	.word	0x2000029c

08001628 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b09a      	sub	sp, #104	; 0x68
 800162c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800162e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001632:	2230      	movs	r2, #48	; 0x30
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f008 fd0e 	bl	800a058 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <SystemClock_Config+0x104>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a31      	ldr	r2, [pc, #196]	; (800172c <SystemClock_Config+0x104>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <SystemClock_Config+0x104>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <SystemClock_Config+0x108>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a2b      	ldr	r2, [pc, #172]	; (8001730 <SystemClock_Config+0x108>)
 8001684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <SystemClock_Config+0x108>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8001696:	230b      	movs	r3, #11
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a4:	2310      	movs	r3, #16
 80016a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016a8:	2301      	movs	r3, #1
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ac:	2302      	movs	r3, #2
 80016ae:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b4:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 15;
 80016b6:	230f      	movs	r3, #15
 80016b8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 144;
 80016ba:	2390      	movs	r3, #144	; 0x90
 80016bc:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016be:	2302      	movs	r3, #2
 80016c0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80016c2:	2305      	movs	r3, #5
 80016c4:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 ff02 	bl	80054d4 <HAL_RCC_OscConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0xb2>
		Error_Handler();
 80016d6:	f000 f976 	bl	80019c6 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016da:	230f      	movs	r3, #15
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f004 f965 	bl	80059c4 <HAL_RCC_ClockConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0xdc>
		Error_Handler();
 8001700:	f000 f961 	bl	80019c6 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001704:	2302      	movs	r3, #2
 8001706:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fb12 	bl	8005d3c <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xfa>
		Error_Handler();
 800171e:	f000 f952 	bl	80019c6 <Error_Handler>
	}
}
 8001722:	bf00      	nop
 8001724:	3768      	adds	r7, #104	; 0x68
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001746:	4b36      	ldr	r3, [pc, #216]	; (8001820 <MX_ADC1_Init+0xec>)
 8001748:	4a36      	ldr	r2, [pc, #216]	; (8001824 <MX_ADC1_Init+0xf0>)
 800174a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <MX_ADC1_Init+0xec>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001752:	4b33      	ldr	r3, [pc, #204]	; (8001820 <MX_ADC1_Init+0xec>)
 8001754:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001758:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <MX_ADC1_Init+0xec>)
 800175c:	2201      	movs	r2, #1
 800175e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001760:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <MX_ADC1_Init+0xec>)
 8001762:	2201      	movs	r2, #1
 8001764:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <MX_ADC1_Init+0xec>)
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <MX_ADC1_Init+0xec>)
 8001770:	2200      	movs	r2, #0
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <MX_ADC1_Init+0xec>)
 8001776:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <MX_ADC1_Init+0xf4>)
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <MX_ADC1_Init+0xec>)
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 4;
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <MX_ADC1_Init+0xec>)
 8001782:	2204      	movs	r2, #4
 8001784:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <MX_ADC1_Init+0xec>)
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <MX_ADC1_Init+0xec>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001794:	4822      	ldr	r0, [pc, #136]	; (8001820 <MX_ADC1_Init+0xec>)
 8001796:	f000 fbcd 	bl	8001f34 <HAL_ADC_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0x70>
		Error_Handler();
 80017a0:	f000 f911 	bl	80019c6 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80017ac:	2301      	movs	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	481a      	ldr	r0, [pc, #104]	; (8001820 <MX_ADC1_Init+0xec>)
 80017b6:	f000 fe09 	bl	80023cc <HAL_ADC_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC1_Init+0x90>
		Error_Handler();
 80017c0:	f000 f901 	bl	80019c6 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <MX_ADC1_Init+0xec>)
 80017d2:	f000 fdfb 	bl	80023cc <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0xac>
		Error_Handler();
 80017dc:	f000 f8f3 	bl	80019c6 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 80017e4:	2303      	movs	r3, #3
 80017e6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80017e8:	463b      	mov	r3, r7
 80017ea:	4619      	mov	r1, r3
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <MX_ADC1_Init+0xec>)
 80017ee:	f000 fded 	bl	80023cc <HAL_ADC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC1_Init+0xc8>
		Error_Handler();
 80017f8:	f000 f8e5 	bl	80019c6 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80017fc:	2303      	movs	r3, #3
 80017fe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8001800:	2304      	movs	r3, #4
 8001802:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001804:	463b      	mov	r3, r7
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_ADC1_Init+0xec>)
 800180a:	f000 fddf 	bl	80023cc <HAL_ADC_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC1_Init+0xe4>
		Error_Handler();
 8001814:	f000 f8d7 	bl	80019c6 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200022e4 	.word	0x200022e4
 8001824:	40012000 	.word	0x40012000
 8001828:	0f000001 	.word	0x0f000001

0800182c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_I2C1_Init+0x50>)
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <MX_I2C1_Init+0x54>)
 8001834:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_I2C1_Init+0x50>)
 8001838:	4a12      	ldr	r2, [pc, #72]	; (8001884 <MX_I2C1_Init+0x58>)
 800183a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_I2C1_Init+0x50>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_I2C1_Init+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_I2C1_Init+0x50>)
 800184a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800184e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <MX_I2C1_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_I2C1_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_I2C1_Init+0x50>)
 800186a:	f001 fed5 	bl	8003618 <HAL_I2C_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001874:	f000 f8a7 	bl	80019c6 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20002290 	.word	0x20002290
 8001880:	40005400 	.word	0x40005400
 8001884:	00061a80 	.word	0x00061a80

08001888 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_RTC_Init+0x44>)
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <MX_RTC_Init+0x48>)
 8001890:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_RTC_Init+0x44>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_RTC_Init+0x44>)
 800189a:	227f      	movs	r2, #127	; 0x7f
 800189c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_RTC_Init+0x44>)
 80018a0:	22ff      	movs	r2, #255	; 0xff
 80018a2:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_RTC_Init+0x44>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_RTC_Init+0x44>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_RTC_Init+0x44>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_RTC_Init+0x44>)
 80018b8:	f004 fb30 	bl	8005f1c <HAL_RTC_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_RTC_Init+0x3e>
		Error_Handler();
 80018c2:	f000 f880 	bl	80019c6 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000238c 	.word	0x2000238c
 80018d0:	40002800 	.word	0x40002800

080018d4 <MX_DMA_Init>:
}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_DMA_Init+0x3c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <MX_DMA_Init+0x3c>)
 80018e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_DMA_Init+0x3c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2038      	movs	r0, #56	; 0x38
 80018fc:	f001 f8f1 	bl	8002ae2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001900:	2038      	movs	r0, #56	; 0x38
 8001902:	f001 f90a 	bl	8002b1a <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_GPIO_Init+0x84>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <MX_GPIO_Init+0x84>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <MX_GPIO_Init+0x84>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_GPIO_Init+0x84>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a16      	ldr	r2, [pc, #88]	; (8001998 <MX_GPIO_Init+0x84>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <MX_GPIO_Init+0x84>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_GPIO_Init+0x84>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <MX_GPIO_Init+0x84>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <MX_GPIO_Init+0x84>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_GPIO_Init+0x84>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <MX_GPIO_Init+0x84>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_GPIO_Init+0x84>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fca3 	bl	8002304 <HAL_ADC_Stop_DMA>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ca:	b672      	cpsid	i
}
 80019cc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019ce:	e7fe      	b.n	80019ce <Error_Handler+0x8>

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <HAL_MspInit+0x4c>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x4c>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2f      	ldr	r2, [pc, #188]	; (8001afc <HAL_ADC_MspInit+0xdc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d157      	bne.n	8001af2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <HAL_ADC_MspInit+0xe0>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a2d      	ldr	r2, [pc, #180]	; (8001b00 <HAL_ADC_MspInit+0xe0>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_ADC_MspInit+0xe0>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_ADC_MspInit+0xe0>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <HAL_ADC_MspInit+0xe0>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_ADC_MspInit+0xe0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	481d      	ldr	r0, [pc, #116]	; (8001b04 <HAL_ADC_MspInit+0xe4>)
 8001a8e:	f001 fc3f 	bl	8003310 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001a94:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <HAL_ADC_MspInit+0xec>)
 8001a96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ab8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001abc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001ad8:	f001 f83a 	bl	8002b50 <HAL_DMA_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ae2:	f7ff ff70 	bl	80019c6 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <HAL_ADC_MspInit+0xe8>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40012000 	.word	0x40012000
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	2000232c 	.word	0x2000232c
 8001b0c:	40026410 	.word	0x40026410

08001b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <HAL_I2C_MspInit+0x84>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d12b      	bne.n	8001b8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_I2C_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_I2C_MspInit+0x88>)
 8001b3c:	f043 0302 	orr.w	r3, r3, #2
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_I2C_MspInit+0x88>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b4e:	23c0      	movs	r3, #192	; 0xc0
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b52:	2312      	movs	r3, #18
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <HAL_I2C_MspInit+0x8c>)
 8001b6a:	f001 fbd1 	bl	8003310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_I2C_MspInit+0x88>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_I2C_MspInit+0x88>)
 8001b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_I2C_MspInit+0x88>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40005400 	.word	0x40005400
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <HAL_RTC_MspInit+0x24>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RTC_MspInit+0x28>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40002800 	.word	0x40002800
 8001bc8:	42470e3c 	.word	0x42470e3c

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c18:	f000 f948 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <DMA2_Stream0_IRQHandler+0x10>)
 8001c26:	f001 f909 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000232c 	.word	0x2000232c

08001c34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <OTG_FS_IRQHandler+0x10>)
 8001c3a:	f002 fc18 	bl	800446e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20002904 	.word	0x20002904

08001c48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e00a      	b.n	8001c70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c5a:	f3af 8000 	nop.w
 8001c5e:	4601      	mov	r1, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	b2ca      	uxtb	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbf0      	blt.n	8001c5a <_read+0x12>
	}

return len;
 8001c78:	687b      	ldr	r3, [r7, #4]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e009      	b.n	8001ca8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf1      	blt.n	8001c94 <_write+0x12>
	}
	return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_close>:

int _close(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_isatty>:

int _isatty(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
	return 0;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f008 f94e 	bl	8009ff4 <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20020000 	.word	0x20020000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	200002a4 	.word	0x200002a4
 8001d8c:	20002d20 	.word	0x20002d20

08001d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <SystemInit+0x20>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <SystemInit+0x20>)
 8001d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dba:	490e      	ldr	r1, [pc, #56]	; (8001df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd0:	4c0b      	ldr	r4, [pc, #44]	; (8001e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dde:	f7ff ffd7 	bl	8001d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f008 f90d 	bl	800a000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7ff f9a5 	bl	8001134 <main>
  bx  lr    
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001df8:	0800c6d8 	.word	0x0800c6d8
  ldr r2, =_sbss
 8001dfc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001e00:	20002d1c 	.word	0x20002d1c

08001e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_Init+0x40>)
 8001e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_Init+0x40>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x40>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 fe4b 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fdc8 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fe63 	bl	8002b36 <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 fe2b 	bl	8002ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20002430 	.word	0x20002430

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20002430 	.word	0x20002430

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff ffee 	bl	8001ed4 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f12:	bf00      	nop
 8001f14:	f7ff ffde 	bl	8001ed4 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008

08001f34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e033      	b.n	8001fb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fd64 	bl	8001a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d118      	bne.n	8001fa4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7a:	f023 0302 	bic.w	r3, r3, #2
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fb52 	bl	8002630 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa2:	e001      	b.n	8001fa8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Start+0x1a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e097      	b.n	8002106 <HAL_ADC_Start+0x14a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d018      	beq.n	800201e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffc:	4b45      	ldr	r3, [pc, #276]	; (8002114 <HAL_ADC_Start+0x158>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a45      	ldr	r2, [pc, #276]	; (8002118 <HAL_ADC_Start+0x15c>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0c9a      	lsrs	r2, r3, #18
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002010:	e002      	b.n	8002018 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3b01      	subs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d15f      	bne.n	80020ec <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002056:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206a:	d106      	bne.n	800207a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f023 0206 	bic.w	r2, r3, #6
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
 8002078:	e002      	b.n	8002080 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_ADC_Start+0x160>)
 800208a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002094:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10f      	bne.n	80020c2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d129      	bne.n	8002104 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e020      	b.n	8002104 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a16      	ldr	r2, [pc, #88]	; (8002120 <HAL_ADC_Start+0x164>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d11b      	bne.n	8002104 <HAL_ADC_Start+0x148>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d114      	bne.n	8002104 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	e00b      	b.n	8002104 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f043 0210 	orr.w	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000000 	.word	0x20000000
 8002118:	431bde83 	.word	0x431bde83
 800211c:	40012300 	.word	0x40012300
 8002120:	40012000 	.word	0x40012000

08002124 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADC_Start_DMA+0x1e>
 800213e:	2302      	movs	r3, #2
 8002140:	e0ce      	b.n	80022e0 <HAL_ADC_Start_DMA+0x1bc>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d018      	beq.n	800218a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002168:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_ADC_Start_DMA+0x1c4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a5f      	ldr	r2, [pc, #380]	; (80022ec <HAL_ADC_Start_DMA+0x1c8>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0c9a      	lsrs	r2, r3, #18
 8002174:	4613      	mov	r3, r2
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800217c:	e002      	b.n	8002184 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	3b01      	subs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002198:	d107      	bne.n	80021aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	f040 8086 	bne.w	80022c6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f8:	d106      	bne.n	8002208 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f023 0206 	bic.w	r2, r3, #6
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
 8002206:	e002      	b.n	800220e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_ADC_Start_DMA+0x1cc>)
 8002218:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	4a35      	ldr	r2, [pc, #212]	; (80022f4 <HAL_ADC_Start_DMA+0x1d0>)
 8002220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_ADC_Start_DMA+0x1d4>)
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_ADC_Start_DMA+0x1d8>)
 8002230:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800223a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800224a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800225a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	334c      	adds	r3, #76	; 0x4c
 8002266:	4619      	mov	r1, r3
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f000 fd1e 	bl	8002cac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10f      	bne.n	800229c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d129      	bne.n	80022de <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	e020      	b.n	80022de <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <HAL_ADC_Start_DMA+0x1dc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d11b      	bne.n	80022de <HAL_ADC_Start_DMA+0x1ba>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d114      	bne.n	80022de <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	e00b      	b.n	80022de <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000000 	.word	0x20000000
 80022ec:	431bde83 	.word	0x431bde83
 80022f0:	40012300 	.word	0x40012300
 80022f4:	08002829 	.word	0x08002829
 80022f8:	080028e3 	.word	0x080028e3
 80022fc:	080028ff 	.word	0x080028ff
 8002300:	40012000 	.word	0x40012000

08002304 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_ADC_Stop_DMA+0x1a>
 800231a:	2302      	movs	r3, #2
 800231c:	e048      	b.n	80023b0 <HAL_ADC_Stop_DMA+0xac>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d130      	bne.n	80023a6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002352:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d10f      	bne.n	8002382 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fcf8 	bl	8002d5c <HAL_DMA_Abort>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002390:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x1c>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e113      	b.n	8002610 <HAL_ADC_ConfigChannel+0x244>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	d925      	bls.n	8002444 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68d9      	ldr	r1, [r3, #12]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	3b1e      	subs	r3, #30
 800240e:	2207      	movs	r2, #7
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43da      	mvns	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	400a      	ands	r2, r1
 800241c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68d9      	ldr	r1, [r3, #12]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4618      	mov	r0, r3
 8002430:	4603      	mov	r3, r0
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4403      	add	r3, r0
 8002436:	3b1e      	subs	r3, #30
 8002438:	409a      	lsls	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	e022      	b.n	800248a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6919      	ldr	r1, [r3, #16]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	2207      	movs	r2, #7
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	400a      	ands	r2, r1
 8002466:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6919      	ldr	r1, [r3, #16]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	4603      	mov	r3, r0
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4403      	add	r3, r0
 8002480:	409a      	lsls	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b06      	cmp	r3, #6
 8002490:	d824      	bhi.n	80024dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	3b05      	subs	r3, #5
 80024a4:	221f      	movs	r2, #31
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	400a      	ands	r2, r1
 80024b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	3b05      	subs	r3, #5
 80024ce:	fa00 f203 	lsl.w	r2, r0, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	635a      	str	r2, [r3, #52]	; 0x34
 80024da:	e04c      	b.n	8002576 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	d824      	bhi.n	800252e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3b23      	subs	r3, #35	; 0x23
 80024f6:	221f      	movs	r2, #31
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43da      	mvns	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	400a      	ands	r2, r1
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	4618      	mov	r0, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	3b23      	subs	r3, #35	; 0x23
 8002520:	fa00 f203 	lsl.w	r2, r0, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
 800252c:	e023      	b.n	8002576 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	3b41      	subs	r3, #65	; 0x41
 8002540:	221f      	movs	r2, #31
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43da      	mvns	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	400a      	ands	r2, r1
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3b41      	subs	r3, #65	; 0x41
 800256a:	fa00 f203 	lsl.w	r2, r0, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002576:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_ADC_ConfigChannel+0x250>)
 8002578:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a28      	ldr	r2, [pc, #160]	; (8002620 <HAL_ADC_ConfigChannel+0x254>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d10f      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b12      	cmp	r3, #18
 800258a:	d10b      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_ADC_ConfigChannel+0x254>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d12b      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x23a>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_ADC_ConfigChannel+0x258>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d003      	beq.n	80025c0 <HAL_ADC_ConfigChannel+0x1f4>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b11      	cmp	r3, #17
 80025be:	d122      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_ADC_ConfigChannel+0x258>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d111      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_ADC_ConfigChannel+0x25c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a11      	ldr	r2, [pc, #68]	; (800262c <HAL_ADC_ConfigChannel+0x260>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	0c9a      	lsrs	r2, r3, #18
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025f8:	e002      	b.n	8002600 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f9      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40012300 	.word	0x40012300
 8002620:	40012000 	.word	0x40012000
 8002624:	10000012 	.word	0x10000012
 8002628:	20000000 	.word	0x20000000
 800262c:	431bde83 	.word	0x431bde83

08002630 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002638:	4b79      	ldr	r3, [pc, #484]	; (8002820 <ADC_Init+0x1f0>)
 800263a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	021a      	lsls	r2, r3, #8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	4a58      	ldr	r2, [pc, #352]	; (8002824 <ADC_Init+0x1f4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d022      	beq.n	800270e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	e00f      	b.n	800272e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800271c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800272c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0202 	bic.w	r2, r2, #2
 800273c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6899      	ldr	r1, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7e1b      	ldrb	r3, [r3, #24]
 8002748:	005a      	lsls	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800276a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800277a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	3b01      	subs	r3, #1
 8002788:	035a      	lsls	r2, r3, #13
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	e007      	b.n	80027a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	3b01      	subs	r3, #1
 80027c0:	051a      	lsls	r2, r3, #20
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6899      	ldr	r1, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027e6:	025a      	lsls	r2, r3, #9
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	029a      	lsls	r2, r3, #10
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40012300 	.word	0x40012300
 8002824:	0f000001 	.word	0x0f000001

08002828 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800283e:	2b00      	cmp	r3, #0
 8002840:	d13c      	bne.n	80028bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d12b      	bne.n	80028b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002860:	2b00      	cmp	r3, #0
 8002862:	d127      	bne.n	80028b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800287c:	2b00      	cmp	r3, #0
 800287e:	d119      	bne.n	80028b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0220 	bic.w	r2, r2, #32
 800288e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff f87b 	bl	80019b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028ba:	e00e      	b.n	80028da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f7ff fd75 	bl	80023b8 <HAL_ADC_ErrorCallback>
}
 80028ce:	e004      	b.n	80028da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff f853 	bl	800199c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f043 0204 	orr.w	r2, r3, #4
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff fd4a 	bl	80023b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	; (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	; (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f7ff ff8e 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff29 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af4:	f7ff ff3e 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f7ff ff8e 	bl	8002a20 <NVIC_EncodePriority>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff5d 	bl	80029cc <__NVIC_SetPriority>
}
 8002b12:	bf00      	nop
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff31 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ffa2 	bl	8002a88 <SysTick_Config>
 8002b44:	4603      	mov	r3, r0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7ff f9ba 	bl	8001ed4 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e099      	b.n	8002ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8c:	e00f      	b.n	8002bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8e:	f7ff f9a1 	bl	8001ed4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d908      	bls.n	8002bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e078      	b.n	8002ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e8      	bne.n	8002b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <HAL_DMA_Init+0x158>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d107      	bne.n	8002c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	4313      	orrs	r3, r2
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f023 0307 	bic.w	r3, r3, #7
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d117      	bne.n	8002c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fadf 	bl	8003218 <DMA_CheckFifoParam>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2240      	movs	r2, #64	; 0x40
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e016      	b.n	8002ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fa96 	bl	80031ac <DMA_CalcBaseAndBitshift>
 8002c80:	4603      	mov	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	223f      	movs	r2, #63	; 0x3f
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	f010803f 	.word	0xf010803f

08002cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DMA_Start_IT+0x26>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e040      	b.n	8002d54 <HAL_DMA_Start_IT+0xa8>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d12f      	bne.n	8002d46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fa28 	bl	8003150 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	223f      	movs	r2, #63	; 0x3f
 8002d06:	409a      	lsls	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0216 	orr.w	r2, r2, #22
 8002d1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0208 	orr.w	r2, r2, #8
 8002d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e005      	b.n	8002d52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d6a:	f7ff f8b3 	bl	8001ed4 <HAL_GetTick>
 8002d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2280      	movs	r2, #128	; 0x80
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e052      	b.n	8002e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0216 	bic.w	r2, r2, #22
 8002d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_DMA_Abort+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dde:	e013      	b.n	8002e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de0:	f7ff f878 	bl	8001ed4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d90c      	bls.n	8002e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2203      	movs	r2, #3
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e015      	b.n	8002e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e4      	bne.n	8002de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	223f      	movs	r2, #63	; 0x3f
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e48:	4b92      	ldr	r3, [pc, #584]	; (8003094 <HAL_DMA_IRQHandler+0x258>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a92      	ldr	r2, [pc, #584]	; (8003098 <HAL_DMA_IRQHandler+0x25c>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0a9b      	lsrs	r3, r3, #10
 8002e54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	2208      	movs	r2, #8
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01a      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0204 	bic.w	r2, r2, #4
 8002e8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	2208      	movs	r2, #8
 8002e96:	409a      	lsls	r2, r3
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	2201      	movs	r2, #1
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f043 0202 	orr.w	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	2204      	movs	r2, #4
 8002f02:	409a      	lsls	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	2210      	movs	r2, #16
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d043      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d03c      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2210      	movs	r2, #16
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d018      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d108      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d024      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
 8002f6a:	e01f      	b.n	8002fac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
 8002f7c:	e016      	b.n	8002fac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0208 	bic.w	r2, r2, #8
 8002f9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 808e 	beq.w	80030da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8086 	beq.w	80030da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d136      	bne.n	8003054 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0216 	bic.w	r2, r2, #22
 8002ff4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003004:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_DMA_IRQHandler+0x1da>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0208 	bic.w	r2, r2, #8
 8003024:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	223f      	movs	r2, #63	; 0x3f
 800302c:	409a      	lsls	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003046:	2b00      	cmp	r3, #0
 8003048:	d07d      	beq.n	8003146 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	4798      	blx	r3
        }
        return;
 8003052:	e078      	b.n	8003146 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01c      	beq.n	800309c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d108      	bne.n	8003082 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	2b00      	cmp	r3, #0
 8003076:	d030      	beq.n	80030da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
 8003080:	e02b      	b.n	80030da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d027      	beq.n	80030da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
 8003092:	e022      	b.n	80030da <HAL_DMA_IRQHandler+0x29e>
 8003094:	20000000 	.word	0x20000000
 8003098:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0210 	bic.w	r2, r2, #16
 80030b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d032      	beq.n	8003148 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d022      	beq.n	8003134 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2205      	movs	r2, #5
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3301      	adds	r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	429a      	cmp	r2, r3
 8003110:	d307      	bcc.n	8003122 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f2      	bne.n	8003106 <HAL_DMA_IRQHandler+0x2ca>
 8003120:	e000      	b.n	8003124 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003122:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
 8003144:	e000      	b.n	8003148 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003146:	bf00      	nop
    }
  }
}
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop

08003150 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800316c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d108      	bne.n	8003190 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800318e:	e007      	b.n	80031a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	3b10      	subs	r3, #16
 80031bc:	4a14      	ldr	r2, [pc, #80]	; (8003210 <DMA_CalcBaseAndBitshift+0x64>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031c6:	4a13      	ldr	r2, [pc, #76]	; (8003214 <DMA_CalcBaseAndBitshift+0x68>)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d909      	bls.n	80031ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031e2:	f023 0303 	bic.w	r3, r3, #3
 80031e6:	1d1a      	adds	r2, r3, #4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	659a      	str	r2, [r3, #88]	; 0x58
 80031ec:	e007      	b.n	80031fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	aaaaaaab 	.word	0xaaaaaaab
 8003214:	0800b398 	.word	0x0800b398

08003218 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d11f      	bne.n	8003272 <DMA_CheckFifoParam+0x5a>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d856      	bhi.n	80032e6 <DMA_CheckFifoParam+0xce>
 8003238:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <DMA_CheckFifoParam+0x28>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003251 	.word	0x08003251
 8003244:	08003263 	.word	0x08003263
 8003248:	08003251 	.word	0x08003251
 800324c:	080032e7 	.word	0x080032e7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d046      	beq.n	80032ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003260:	e043      	b.n	80032ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800326a:	d140      	bne.n	80032ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003270:	e03d      	b.n	80032ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327a:	d121      	bne.n	80032c0 <DMA_CheckFifoParam+0xa8>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d837      	bhi.n	80032f2 <DMA_CheckFifoParam+0xda>
 8003282:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <DMA_CheckFifoParam+0x70>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	08003299 	.word	0x08003299
 800328c:	0800329f 	.word	0x0800329f
 8003290:	08003299 	.word	0x08003299
 8003294:	080032b1 	.word	0x080032b1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e030      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d025      	beq.n	80032f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ae:	e022      	b.n	80032f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032b8:	d11f      	bne.n	80032fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032be:	e01c      	b.n	80032fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d903      	bls.n	80032ce <DMA_CheckFifoParam+0xb6>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d003      	beq.n	80032d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032cc:	e018      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
      break;
 80032d2:	e015      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00e      	beq.n	80032fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      break;
 80032e4:	e00b      	b.n	80032fe <DMA_CheckFifoParam+0xe6>
      break;
 80032e6:	bf00      	nop
 80032e8:	e00a      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032ea:	bf00      	nop
 80032ec:	e008      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e006      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032f2:	bf00      	nop
 80032f4:	e004      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032f6:	bf00      	nop
 80032f8:	e002      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;   
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <DMA_CheckFifoParam+0xe8>
      break;
 80032fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop

08003310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	e159      	b.n	80035e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800332c:	2201      	movs	r2, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	f040 8148 	bne.w	80035da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d005      	beq.n	8003362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335e:	2b02      	cmp	r3, #2
 8003360:	d130      	bne.n	80033c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2203      	movs	r2, #3
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 0201 	and.w	r2, r3, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d017      	beq.n	8003400 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d123      	bne.n	8003454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	220f      	movs	r2, #15
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	08da      	lsrs	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3208      	adds	r2, #8
 800344e:	69b9      	ldr	r1, [r7, #24]
 8003450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0203 	and.w	r2, r3, #3
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80a2 	beq.w	80035da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <HAL_GPIO_Init+0x2e8>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <HAL_GPIO_Init+0x2e8>)
 80034a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a4:	6453      	str	r3, [r2, #68]	; 0x44
 80034a6:	4b54      	ldr	r3, [pc, #336]	; (80035f8 <HAL_GPIO_Init+0x2e8>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034b2:	4a52      	ldr	r2, [pc, #328]	; (80035fc <HAL_GPIO_Init+0x2ec>)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	3302      	adds	r3, #2
 80034ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	220f      	movs	r2, #15
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a49      	ldr	r2, [pc, #292]	; (8003600 <HAL_GPIO_Init+0x2f0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d019      	beq.n	8003512 <HAL_GPIO_Init+0x202>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a48      	ldr	r2, [pc, #288]	; (8003604 <HAL_GPIO_Init+0x2f4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_GPIO_Init+0x1fe>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a47      	ldr	r2, [pc, #284]	; (8003608 <HAL_GPIO_Init+0x2f8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00d      	beq.n	800350a <HAL_GPIO_Init+0x1fa>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a46      	ldr	r2, [pc, #280]	; (800360c <HAL_GPIO_Init+0x2fc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <HAL_GPIO_Init+0x1f6>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a45      	ldr	r2, [pc, #276]	; (8003610 <HAL_GPIO_Init+0x300>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_GPIO_Init+0x1f2>
 80034fe:	2304      	movs	r3, #4
 8003500:	e008      	b.n	8003514 <HAL_GPIO_Init+0x204>
 8003502:	2307      	movs	r3, #7
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x204>
 8003506:	2303      	movs	r3, #3
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x204>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x204>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x204>
 8003512:	2300      	movs	r3, #0
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003524:	4935      	ldr	r1, [pc, #212]	; (80035fc <HAL_GPIO_Init+0x2ec>)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003532:	4b38      	ldr	r3, [pc, #224]	; (8003614 <HAL_GPIO_Init+0x304>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003556:	4a2f      	ldr	r2, [pc, #188]	; (8003614 <HAL_GPIO_Init+0x304>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800355c:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <HAL_GPIO_Init+0x304>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003580:	4a24      	ldr	r2, [pc, #144]	; (8003614 <HAL_GPIO_Init+0x304>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_GPIO_Init+0x304>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_GPIO_Init+0x304>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b0:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_GPIO_Init+0x304>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d4:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <HAL_GPIO_Init+0x304>)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3301      	adds	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b0f      	cmp	r3, #15
 80035e4:	f67f aea2 	bls.w	800332c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40013800 	.word	0x40013800
 8003600:	40020000 	.word	0x40020000
 8003604:	40020400 	.word	0x40020400
 8003608:	40020800 	.word	0x40020800
 800360c:	40020c00 	.word	0x40020c00
 8003610:	40021000 	.word	0x40021000
 8003614:	40013c00 	.word	0x40013c00

08003618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e12b      	b.n	8003882 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe fa66 	bl	8001b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	; 0x24
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800367a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800367c:	f002 fb4a 	bl	8005d14 <HAL_RCC_GetPCLK1Freq>
 8003680:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4a81      	ldr	r2, [pc, #516]	; (800388c <HAL_I2C_Init+0x274>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d807      	bhi.n	800369c <HAL_I2C_Init+0x84>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a80      	ldr	r2, [pc, #512]	; (8003890 <HAL_I2C_Init+0x278>)
 8003690:	4293      	cmp	r3, r2
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e006      	b.n	80036aa <HAL_I2C_Init+0x92>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a7d      	ldr	r2, [pc, #500]	; (8003894 <HAL_I2C_Init+0x27c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	bf94      	ite	ls
 80036a4:	2301      	movls	r3, #1
 80036a6:	2300      	movhi	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e0e7      	b.n	8003882 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a78      	ldr	r2, [pc, #480]	; (8003898 <HAL_I2C_Init+0x280>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0c9b      	lsrs	r3, r3, #18
 80036bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a6a      	ldr	r2, [pc, #424]	; (800388c <HAL_I2C_Init+0x274>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d802      	bhi.n	80036ec <HAL_I2C_Init+0xd4>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3301      	adds	r3, #1
 80036ea:	e009      	b.n	8003700 <HAL_I2C_Init+0xe8>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	4a69      	ldr	r2, [pc, #420]	; (800389c <HAL_I2C_Init+0x284>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	099b      	lsrs	r3, r3, #6
 80036fe:	3301      	adds	r3, #1
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	430b      	orrs	r3, r1
 8003706:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003712:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	495c      	ldr	r1, [pc, #368]	; (800388c <HAL_I2C_Init+0x274>)
 800371c:	428b      	cmp	r3, r1
 800371e:	d819      	bhi.n	8003754 <HAL_I2C_Init+0x13c>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e59      	subs	r1, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fbb1 f3f3 	udiv	r3, r1, r3
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003734:	400b      	ands	r3, r1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_I2C_Init+0x138>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e59      	subs	r1, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fbb1 f3f3 	udiv	r3, r1, r3
 8003748:	3301      	adds	r3, #1
 800374a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374e:	e051      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 8003750:	2304      	movs	r3, #4
 8003752:	e04f      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d111      	bne.n	8003780 <HAL_I2C_Init+0x168>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1e58      	subs	r0, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e012      	b.n	80037a6 <HAL_I2C_Init+0x18e>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1e58      	subs	r0, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	0099      	lsls	r1, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Init+0x196>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e022      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10e      	bne.n	80037d4 <HAL_I2C_Init+0x1bc>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e58      	subs	r0, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	440b      	add	r3, r1
 80037c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d2:	e00f      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	0099      	lsls	r1, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	6809      	ldr	r1, [r1, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6911      	ldr	r1, [r2, #16]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	430b      	orrs	r3, r1
 8003836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	000186a0 	.word	0x000186a0
 8003890:	001e847f 	.word	0x001e847f
 8003894:	003d08ff 	.word	0x003d08ff
 8003898:	431bde83 	.word	0x431bde83
 800389c:	10624dd3 	.word	0x10624dd3

080038a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	461a      	mov	r2, r3
 80038ac:	460b      	mov	r3, r1
 80038ae:	817b      	strh	r3, [r7, #10]
 80038b0:	4613      	mov	r3, r2
 80038b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038b4:	f7fe fb0e 	bl	8001ed4 <HAL_GetTick>
 80038b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	f040 80e0 	bne.w	8003a88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2319      	movs	r3, #25
 80038ce:	2201      	movs	r2, #1
 80038d0:	4970      	ldr	r1, [pc, #448]	; (8003a94 <HAL_I2C_Master_Transmit+0x1f4>)
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 faf4 	bl	8003ec0 <I2C_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
 80038e0:	e0d3      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_I2C_Master_Transmit+0x50>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e0cc      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1ea>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d007      	beq.n	8003916 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003924:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	; 0x21
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2210      	movs	r2, #16
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	893a      	ldrh	r2, [r7, #8]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4a50      	ldr	r2, [pc, #320]	; (8003a98 <HAL_I2C_Master_Transmit+0x1f8>)
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003958:	8979      	ldrh	r1, [r7, #10]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f996 	bl	8003c90 <I2C_MasterRequestWrite>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e08d      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003984:	e066      	b.n	8003a54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	6a39      	ldr	r1, [r7, #32]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fb6e 	bl	800406c <I2C_WaitOnTXEFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00d      	beq.n	80039b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	2b04      	cmp	r3, #4
 800399c:	d107      	bne.n	80039ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06b      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d11b      	bne.n	8003a28 <HAL_I2C_Master_Transmit+0x188>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d017      	beq.n	8003a28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	6a39      	ldr	r1, [r7, #32]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fb5e 	bl	80040ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00d      	beq.n	8003a54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d107      	bne.n	8003a50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e01a      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d194      	bne.n	8003986 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	00100002 	.word	0x00100002
 8003a98:	ffff0000 	.word	0xffff0000

08003a9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	813b      	strh	r3, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab6:	f7fe fa0d 	bl	8001ed4 <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	f040 80d9 	bne.w	8003c7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	2319      	movs	r3, #25
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	496d      	ldr	r1, [pc, #436]	; (8003c88 <HAL_I2C_Mem_Write+0x1ec>)
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f9f3 	bl	8003ec0 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e0cc      	b.n	8003c7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_I2C_Mem_Write+0x56>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e0c5      	b.n	8003c7e <HAL_I2C_Mem_Write+0x1e2>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d007      	beq.n	8003b18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2221      	movs	r2, #33	; 0x21
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2240      	movs	r2, #64	; 0x40
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a3a      	ldr	r2, [r7, #32]
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a4d      	ldr	r2, [pc, #308]	; (8003c8c <HAL_I2C_Mem_Write+0x1f0>)
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b5a:	88f8      	ldrh	r0, [r7, #6]
 8003b5c:	893a      	ldrh	r2, [r7, #8]
 8003b5e:	8979      	ldrh	r1, [r7, #10]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	4603      	mov	r3, r0
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f912 	bl	8003d94 <I2C_RequestMemoryWrite>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d052      	beq.n	8003c1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e081      	b.n	8003c7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fa74 	bl	800406c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d107      	bne.n	8003ba2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e06b      	b.n	8003c7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d11b      	bne.n	8003c1c <HAL_I2C_Mem_Write+0x180>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d017      	beq.n	8003c1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	781a      	ldrb	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1aa      	bne.n	8003b7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fa60 	bl	80040ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d107      	bne.n	8003c4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e016      	b.n	8003c7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	00100002 	.word	0x00100002
 8003c8c:	ffff0000 	.word	0xffff0000

08003c90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d006      	beq.n	8003cba <I2C_MasterRequestWrite+0x2a>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d003      	beq.n	8003cba <I2C_MasterRequestWrite+0x2a>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cb8:	d108      	bne.n	8003ccc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e00b      	b.n	8003ce4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	2b12      	cmp	r3, #18
 8003cd2:	d107      	bne.n	8003ce4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f8e5 	bl	8003ec0 <I2C_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00d      	beq.n	8003d18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0a:	d103      	bne.n	8003d14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e035      	b.n	8003d84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d20:	d108      	bne.n	8003d34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d22:	897b      	ldrh	r3, [r7, #10]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	e01b      	b.n	8003d6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d34:	897b      	ldrh	r3, [r7, #10]
 8003d36:	11db      	asrs	r3, r3, #7
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0306 	and.w	r3, r3, #6
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f063 030f 	orn	r3, r3, #15
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	490e      	ldr	r1, [pc, #56]	; (8003d8c <I2C_MasterRequestWrite+0xfc>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f90b 	bl	8003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e010      	b.n	8003d84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d62:	897b      	ldrh	r3, [r7, #10]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4907      	ldr	r1, [pc, #28]	; (8003d90 <I2C_MasterRequestWrite+0x100>)
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f8fb 	bl	8003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	00010008 	.word	0x00010008
 8003d90:	00010002 	.word	0x00010002

08003d94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	817b      	strh	r3, [r7, #10]
 8003da6:	460b      	mov	r3, r1
 8003da8:	813b      	strh	r3, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f878 	bl	8003ec0 <I2C_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de4:	d103      	bne.n	8003dee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e05f      	b.n	8003eb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003df2:	897b      	ldrh	r3, [r7, #10]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	492d      	ldr	r1, [pc, #180]	; (8003ebc <I2C_RequestMemoryWrite+0x128>)
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f8b0 	bl	8003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e04c      	b.n	8003eb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	6a39      	ldr	r1, [r7, #32]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f91a 	bl	800406c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d107      	bne.n	8003e56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e02b      	b.n	8003eb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d105      	bne.n	8003e6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e60:	893b      	ldrh	r3, [r7, #8]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	611a      	str	r2, [r3, #16]
 8003e6a:	e021      	b.n	8003eb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e6c:	893b      	ldrh	r3, [r7, #8]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	6a39      	ldr	r1, [r7, #32]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8f4 	bl	800406c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d107      	bne.n	8003ea2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e005      	b.n	8003eb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea6:	893b      	ldrh	r3, [r7, #8]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	00010002 	.word	0x00010002

08003ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed0:	e025      	b.n	8003f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d021      	beq.n	8003f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fd fffb 	bl	8001ed4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d116      	bne.n	8003f1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e023      	b.n	8003f66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d10d      	bne.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	43da      	mvns	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf0c      	ite	eq
 8003f3a:	2301      	moveq	r3, #1
 8003f3c:	2300      	movne	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	e00c      	b.n	8003f5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d0b6      	beq.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f7c:	e051      	b.n	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8c:	d123      	bne.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fa6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f043 0204 	orr.w	r2, r3, #4
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e046      	b.n	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d021      	beq.n	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7fd ff79 	bl	8001ed4 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e020      	b.n	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10c      	bne.n	8004046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf14      	ite	ne
 800403e:	2301      	movne	r3, #1
 8004040:	2300      	moveq	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e00b      	b.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	43da      	mvns	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf14      	ite	ne
 8004058:	2301      	movne	r3, #1
 800405a:	2300      	moveq	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d18d      	bne.n	8003f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004078:	e02d      	b.n	80040d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f878 	bl	8004170 <I2C_IsAcknowledgeFailed>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e02d      	b.n	80040e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d021      	beq.n	80040d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fd ff1f 	bl	8001ed4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d116      	bne.n	80040d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f043 0220 	orr.w	r2, r3, #32
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e007      	b.n	80040e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d1ca      	bne.n	800407a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040fa:	e02d      	b.n	8004158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f837 	bl	8004170 <I2C_IsAcknowledgeFailed>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e02d      	b.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d021      	beq.n	8004158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004114:	f7fd fede 	bl	8001ed4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d116      	bne.n	8004158 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f043 0220 	orr.w	r2, r3, #32
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e007      	b.n	8004168 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b04      	cmp	r3, #4
 8004164:	d1ca      	bne.n	80040fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004186:	d11b      	bne.n	80041c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004190:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	f043 0204 	orr.w	r2, r3, #4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041d0:	b08f      	sub	sp, #60	; 0x3c
 80041d2:	af0a      	add	r7, sp, #40	; 0x28
 80041d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e10f      	b.n	8004400 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f005 fbfa 	bl	80099f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2203      	movs	r2, #3
 8004204:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f002 f875 	bl	800630e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	687e      	ldr	r6, [r7, #4]
 800422c:	466d      	mov	r5, sp
 800422e:	f106 0410 	add.w	r4, r6, #16
 8004232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800423a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800423e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004242:	1d33      	adds	r3, r6, #4
 8004244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004246:	6838      	ldr	r0, [r7, #0]
 8004248:	f001 ff4d 	bl	80060e6 <USB_CoreInit>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e0d0      	b.n	8004400 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f002 f863 	bl	8006330 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
 800426e:	e04a      	b.n	8004306 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	333d      	adds	r3, #61	; 0x3d
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	333c      	adds	r3, #60	; 0x3c
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	b298      	uxth	r0, r3
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	3342      	adds	r3, #66	; 0x42
 80042ac:	4602      	mov	r2, r0
 80042ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042b0:	7bfa      	ldrb	r2, [r7, #15]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	333f      	adds	r3, #63	; 0x3f
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042c4:	7bfa      	ldrb	r2, [r7, #15]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3344      	adds	r3, #68	; 0x44
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	3348      	adds	r3, #72	; 0x48
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3350      	adds	r3, #80	; 0x50
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	3301      	adds	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d3af      	bcc.n	8004270 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	e044      	b.n	80043a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004358:	7bfa      	ldrb	r2, [r7, #15]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	3301      	adds	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d3b5      	bcc.n	8004316 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	687e      	ldr	r6, [r7, #4]
 80043b2:	466d      	mov	r5, sp
 80043b4:	f106 0410 	add.w	r4, r6, #16
 80043b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80043c8:	1d33      	adds	r3, r6, #4
 80043ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043cc:	6838      	ldr	r0, [r7, #0]
 80043ce:	f001 ffd9 	bl	8006384 <USB_DevInit>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e00d      	b.n	8004400 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f003 f821 	bl	8007440 <USB_DevDisconnect>

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004408 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_PCD_Start+0x1c>
 8004420:	2302      	movs	r3, #2
 8004422:	e020      	b.n	8004466 <HAL_PCD_Start+0x5e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	2b01      	cmp	r3, #1
 8004432:	d109      	bne.n	8004448 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004438:	2b01      	cmp	r3, #1
 800443a:	d005      	beq.n	8004448 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f001 ff4d 	bl	80062ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f002 ffd1 	bl	80073fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800446e:	b590      	push	{r4, r7, lr}
 8004470:	b08d      	sub	sp, #52	; 0x34
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f003 f88f 	bl	80075a8 <USB_GetMode>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 839d 	bne.w	8004bcc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f002 fff3 	bl	8007482 <USB_ReadInterrupts>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8393 	beq.w	8004bca <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f002 ffea 	bl	8007482 <USB_ReadInterrupts>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d107      	bne.n	80044c8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f002 0202 	and.w	r2, r2, #2
 80044c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f002 ffd8 	bl	8007482 <USB_ReadInterrupts>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d161      	bne.n	80045a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0210 	bic.w	r2, r2, #16
 80044ea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f003 020f 	and.w	r2, r3, #15
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	4413      	add	r3, r2
 8004508:	3304      	adds	r3, #4
 800450a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	0c5b      	lsrs	r3, r3, #17
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	2b02      	cmp	r3, #2
 8004516:	d124      	bne.n	8004562 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d035      	beq.n	8004590 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800452e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004532:	b29b      	uxth	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	6a38      	ldr	r0, [r7, #32]
 8004538:	f002 fe3e 	bl	80071b8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004548:	441a      	add	r2, r3
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800455a:	441a      	add	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	619a      	str	r2, [r3, #24]
 8004560:	e016      	b.n	8004590 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	0c5b      	lsrs	r3, r3, #17
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	2b06      	cmp	r3, #6
 800456c:	d110      	bne.n	8004590 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004574:	2208      	movs	r2, #8
 8004576:	4619      	mov	r1, r3
 8004578:	6a38      	ldr	r0, [r7, #32]
 800457a:	f002 fe1d 	bl	80071b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800458a:	441a      	add	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0210 	orr.w	r2, r2, #16
 800459e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f002 ff6c 	bl	8007482 <USB_ReadInterrupts>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045b4:	d16e      	bne.n	8004694 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f002 ff72 	bl	80074a8 <USB_ReadDevAllOutEpInterrupt>
 80045c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80045c6:	e062      	b.n	800468e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d057      	beq.n	8004682 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f002 ff97 	bl	8007510 <USB_ReadDevOutEPInterrupt>
 80045e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	2301      	movs	r3, #1
 80045fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fdb0 	bl	8005168 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	461a      	mov	r2, r3
 8004620:	2308      	movs	r3, #8
 8004622:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 feaa 	bl	8005380 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	461a      	mov	r2, r3
 8004644:	2310      	movs	r3, #16
 8004646:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2320      	movs	r3, #32
 8004662:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	461a      	mov	r2, r3
 800467c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004680:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	3301      	adds	r3, #1
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	085b      	lsrs	r3, r3, #1
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d199      	bne.n	80045c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f002 fef2 	bl	8007482 <USB_ReadInterrupts>
 800469e:	4603      	mov	r3, r0
 80046a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046a8:	f040 80c0 	bne.w	800482c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f002 ff13 	bl	80074dc <USB_ReadDevAllInEpInterrupt>
 80046b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80046bc:	e0b2      	b.n	8004824 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80a7 	beq.w	8004818 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f002 ff39 	bl	800754c <USB_ReadDevInEPInterrupt>
 80046da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d057      	beq.n	8004796 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	2201      	movs	r2, #1
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	43db      	mvns	r3, r3
 8004700:	69f9      	ldr	r1, [r7, #28]
 8004702:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004706:	4013      	ands	r3, r2
 8004708:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004716:	461a      	mov	r2, r3
 8004718:	2301      	movs	r3, #1
 800471a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d132      	bne.n	800478a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004728:	4613      	mov	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	3348      	adds	r3, #72	; 0x48
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4403      	add	r3, r0
 8004744:	3344      	adds	r3, #68	; 0x44
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4419      	add	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4403      	add	r3, r0
 8004758:	3348      	adds	r3, #72	; 0x48
 800475a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d113      	bne.n	800478a <HAL_PCD_IRQHandler+0x31c>
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	3350      	adds	r3, #80	; 0x50
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d108      	bne.n	800478a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004782:	461a      	mov	r2, r3
 8004784:	2101      	movs	r1, #1
 8004786:	f002 ff41 	bl	800760c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	b2db      	uxtb	r3, r3
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f005 f9b0 	bl	8009af6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	2308      	movs	r3, #8
 80047b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	461a      	mov	r2, r3
 80047ca:	2310      	movs	r3, #16
 80047cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e4:	461a      	mov	r2, r3
 80047e6:	2340      	movs	r3, #64	; 0x40
 80047e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	461a      	mov	r2, r3
 8004802:	2302      	movs	r3, #2
 8004804:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fc1b 	bl	800504e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	3301      	adds	r3, #1
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	f47f af49 	bne.w	80046be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f002 fe26 	bl	8007482 <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800483c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004840:	d122      	bne.n	8004888 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800485c:	2b01      	cmp	r3, #1
 800485e:	d108      	bne.n	8004872 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004868:	2100      	movs	r1, #0
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fe26 	bl	80054bc <HAL_PCDEx_LPM_Callback>
 8004870:	e002      	b.n	8004878 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f005 f9ac 	bl	8009bd0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f002 fdf8 	bl	8007482 <USB_ReadInterrupts>
 8004892:	4603      	mov	r3, r0
 8004894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489c:	d112      	bne.n	80048c4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d102      	bne.n	80048b4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f005 f968 	bl	8009b84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80048c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f002 fdda 	bl	8007482 <USB_ReadInterrupts>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d8:	f040 80c7 	bne.w	8004a6a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2110      	movs	r1, #16
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 fea8 	bl	800664c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004900:	e056      	b.n	80049b0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490e:	461a      	mov	r2, r3
 8004910:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004914:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004926:	0151      	lsls	r1, r2, #5
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	440a      	add	r2, r1
 800492c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004934:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004950:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004954:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	461a      	mov	r2, r3
 8004964:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004968:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	440a      	add	r2, r1
 8004980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004984:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004988:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800499a:	0151      	lsls	r1, r2, #5
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	440a      	add	r2, r1
 80049a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	3301      	adds	r3, #1
 80049ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3a3      	bcc.n	8004902 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80049cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049e6:	f043 030b 	orr.w	r3, r3, #11
 80049ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fc:	f043 030b 	orr.w	r3, r3, #11
 8004a00:	6453      	str	r3, [r2, #68]	; 0x44
 8004a02:	e015      	b.n	8004a30 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a16:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004a1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a2a:	f043 030b 	orr.w	r3, r3, #11
 8004a2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a54:	461a      	mov	r2, r3
 8004a56:	f002 fdd9 	bl	800760c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f002 fd07 	bl	8007482 <USB_ReadInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7e:	d124      	bne.n	8004aca <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f002 fd9d 	bl	80075c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f001 fe3d 	bl	800670e <USB_GetDevSpeed>
 8004a94:	4603      	mov	r3, r0
 8004a96:	461a      	mov	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681c      	ldr	r4, [r3, #0]
 8004aa0:	f001 f92c 	bl	8005cfc <HAL_RCC_GetHCLKFreq>
 8004aa4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f001 fb7a 	bl	80061a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f005 f846 	bl	8009b46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f002 fcd7 	bl	8007482 <USB_ReadInterrupts>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d10a      	bne.n	8004af4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f005 f823 	bl	8009b2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f002 0208 	and.w	r2, r2, #8
 8004af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f002 fcc2 	bl	8007482 <USB_ReadInterrupts>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b08:	d10f      	bne.n	8004b2a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	4619      	mov	r1, r3
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f005 f87b 	bl	8009c10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f002 fca7 	bl	8007482 <USB_ReadInterrupts>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b3e:	d10f      	bne.n	8004b60 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	4619      	mov	r1, r3
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f005 f84e 	bl	8009bec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f002 fc8c 	bl	8007482 <USB_ReadInterrupts>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b74:	d10a      	bne.n	8004b8c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f005 f85c 	bl	8009c34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f002 fc76 	bl	8007482 <USB_ReadInterrupts>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d115      	bne.n	8004bcc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f005 f84c 	bl	8009c50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	e000      	b.n	8004bcc <HAL_PCD_IRQHandler+0x75e>
      return;
 8004bca:	bf00      	nop
    }
  }
}
 8004bcc:	3734      	adds	r7, #52	; 0x34
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}

08004bd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_PCD_SetAddress+0x1a>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e013      	b.n	8004c14 <HAL_PCD_SetAddress+0x42>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f002 fbd4 	bl	80073b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	4608      	mov	r0, r1
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	70fb      	strb	r3, [r7, #3]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	803b      	strh	r3, [r7, #0]
 8004c32:	4613      	mov	r3, r2
 8004c34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da0f      	bge.n	8004c62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 020f 	and.w	r2, r3, #15
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	3338      	adds	r3, #56	; 0x38
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4413      	add	r3, r2
 8004c56:	3304      	adds	r3, #4
 8004c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	705a      	strb	r2, [r3, #1]
 8004c60:	e00f      	b.n	8004c82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 020f 	and.w	r2, r3, #15
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c8e:	883a      	ldrh	r2, [r7, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	78ba      	ldrb	r2, [r7, #2]
 8004c98:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cac:	78bb      	ldrb	r3, [r7, #2]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d102      	bne.n	8004cb8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_PCD_EP_Open+0xaa>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e00e      	b.n	8004ce4 <HAL_PCD_EP_Open+0xc8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fd3f 	bl	8006758 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	da0f      	bge.n	8004d20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	f003 020f 	and.w	r2, r3, #15
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	3338      	adds	r3, #56	; 0x38
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	3304      	adds	r3, #4
 8004d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	705a      	strb	r2, [r3, #1]
 8004d1e:	e00f      	b.n	8004d40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	f003 020f 	and.w	r2, r3, #15
 8004d26:	4613      	mov	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4413      	add	r3, r2
 8004d36:	3304      	adds	r3, #4
 8004d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_PCD_EP_Close+0x6e>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e00e      	b.n	8004d78 <HAL_PCD_EP_Close+0x8c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 fd7d 	bl	8006868 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d90:	7afb      	ldrb	r3, [r7, #11]
 8004d92:	f003 020f 	and.w	r2, r3, #15
 8004d96:	4613      	mov	r3, r2
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	3304      	adds	r3, #4
 8004da8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2200      	movs	r2, #0
 8004dba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dc2:	7afb      	ldrb	r3, [r7, #11]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d102      	bne.n	8004ddc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ddc:	7afb      	ldrb	r3, [r7, #11]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	6979      	ldr	r1, [r7, #20]
 8004df4:	f002 f858 	bl	8006ea8 <USB_EP0StartXfer>
 8004df8:	e008      	b.n	8004e0c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	6979      	ldr	r1, [r7, #20]
 8004e08:	f001 fe0a 	bl	8006a20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	f003 020f 	and.w	r2, r3, #15
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004e38:	681b      	ldr	r3, [r3, #0]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b086      	sub	sp, #24
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	460b      	mov	r3, r1
 8004e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e56:	7afb      	ldrb	r3, [r7, #11]
 8004e58:	f003 020f 	and.w	r2, r3, #15
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	3338      	adds	r3, #56	; 0x38
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2201      	movs	r2, #1
 8004e84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e86:	7afb      	ldrb	r3, [r7, #11]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d102      	bne.n	8004ea0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ea0:	7afb      	ldrb	r3, [r7, #11]
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6979      	ldr	r1, [r7, #20]
 8004eb8:	f001 fff6 	bl	8006ea8 <USB_EP0StartXfer>
 8004ebc:	e008      	b.n	8004ed0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6979      	ldr	r1, [r7, #20]
 8004ecc:	f001 fda8 	bl	8006a20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	f003 020f 	and.w	r2, r3, #15
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d901      	bls.n	8004ef8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e050      	b.n	8004f9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	da0f      	bge.n	8004f20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	f003 020f 	and.w	r2, r3, #15
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	3338      	adds	r3, #56	; 0x38
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4413      	add	r3, r2
 8004f14:	3304      	adds	r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	705a      	strb	r2, [r3, #1]
 8004f1e:	e00d      	b.n	8004f3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	3304      	adds	r3, #4
 8004f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_PCD_EP_SetStall+0x82>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e01e      	b.n	8004f9a <HAL_PCD_EP_SetStall+0xc0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f002 f94d 	bl	800720a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	b2d9      	uxtb	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f002 fb3e 	bl	800760c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	f003 020f 	and.w	r2, r3, #15
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d901      	bls.n	8004fc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e042      	b.n	8005046 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da0f      	bge.n	8004fe8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	f003 020f 	and.w	r2, r3, #15
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	3338      	adds	r3, #56	; 0x38
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	3304      	adds	r3, #4
 8004fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	705a      	strb	r2, [r3, #1]
 8004fe6:	e00f      	b.n	8005008 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3304      	adds	r3, #4
 8005000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	b2da      	uxtb	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_PCD_EP_ClrStall+0x86>
 8005024:	2302      	movs	r3, #2
 8005026:	e00e      	b.n	8005046 <HAL_PCD_EP_ClrStall+0xa4>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	4618      	mov	r0, r3
 8005038:	f002 f955 	bl	80072e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b08a      	sub	sp, #40	; 0x28
 8005052:	af02      	add	r7, sp, #8
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	3338      	adds	r3, #56	; 0x38
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4413      	add	r3, r2
 8005072:	3304      	adds	r3, #4
 8005074:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	429a      	cmp	r2, r3
 8005080:	d901      	bls.n	8005086 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06c      	b.n	8005160 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	695a      	ldr	r2, [r3, #20]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	429a      	cmp	r2, r3
 800509a:	d902      	bls.n	80050a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3303      	adds	r3, #3
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050aa:	e02b      	b.n	8005104 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d902      	bls.n	80050c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3303      	adds	r3, #3
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68d9      	ldr	r1, [r3, #12]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	4603      	mov	r3, r0
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f002 f831 	bl	800714e <USB_WritePacket>

    ep->xfer_buff  += len;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	441a      	add	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	b29b      	uxth	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	429a      	cmp	r2, r3
 8005118:	d809      	bhi.n	800512e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005122:	429a      	cmp	r2, r3
 8005124:	d203      	bcs.n	800512e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1be      	bne.n	80050ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	695a      	ldr	r2, [r3, #20]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	429a      	cmp	r2, r3
 8005138:	d811      	bhi.n	800515e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	2201      	movs	r2, #1
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	43db      	mvns	r3, r3
 8005154:	6939      	ldr	r1, [r7, #16]
 8005156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800515a:	4013      	ands	r3, r2
 800515c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	333c      	adds	r3, #60	; 0x3c
 8005180:	3304      	adds	r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b01      	cmp	r3, #1
 800519c:	f040 80a0 	bne.w	80052e0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d015      	beq.n	80051d6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a72      	ldr	r2, [pc, #456]	; (8005378 <PCD_EP_OutXfrComplete_int+0x210>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	f240 80dd 	bls.w	800536e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80d7 	beq.w	800536e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	461a      	mov	r2, r3
 80051ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d2:	6093      	str	r3, [r2, #8]
 80051d4:	e0cb      	b.n	800536e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	461a      	mov	r2, r3
 80051ee:	2320      	movs	r3, #32
 80051f0:	6093      	str	r3, [r2, #8]
 80051f2:	e0bc      	b.n	800536e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 80b7 	bne.w	800536e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a5d      	ldr	r2, [pc, #372]	; (8005378 <PCD_EP_OutXfrComplete_int+0x210>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d90f      	bls.n	8005228 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521e:	461a      	mov	r2, r3
 8005220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005224:	6093      	str	r3, [r2, #8]
 8005226:	e0a2      	b.n	800536e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800523a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	0159      	lsls	r1, r3, #5
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	440b      	add	r3, r1
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800524e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4403      	add	r3, r0
 800525e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005262:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005276:	6819      	ldr	r1, [r3, #0]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4403      	add	r3, r0
 8005286:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4419      	add	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4403      	add	r3, r0
 800529c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80052a0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d114      	bne.n	80052d2 <PCD_EP_OutXfrComplete_int+0x16a>
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	1a9b      	subs	r3, r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d108      	bne.n	80052d2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80052ca:	461a      	mov	r2, r3
 80052cc:	2101      	movs	r1, #1
 80052ce:	f002 f99d 	bl	800760c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f004 fbf1 	bl	8009ac0 <HAL_PCD_DataOutStageCallback>
 80052de:	e046      	b.n	800536e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a26      	ldr	r2, [pc, #152]	; (800537c <PCD_EP_OutXfrComplete_int+0x214>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d124      	bne.n	8005332 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	461a      	mov	r2, r3
 8005300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005304:	6093      	str	r3, [r2, #8]
 8005306:	e032      	b.n	800536e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	461a      	mov	r2, r3
 8005320:	2320      	movs	r3, #32
 8005322:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f004 fbc8 	bl	8009ac0 <HAL_PCD_DataOutStageCallback>
 8005330:	e01d      	b.n	800536e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d114      	bne.n	8005362 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800535a:	461a      	mov	r2, r3
 800535c:	2100      	movs	r1, #0
 800535e:	f002 f955 	bl	800760c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f004 fba9 	bl	8009ac0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	4f54300a 	.word	0x4f54300a
 800537c:	4f54310a 	.word	0x4f54310a

08005380 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	333c      	adds	r3, #60	; 0x3c
 8005398:	3304      	adds	r3, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a15      	ldr	r2, [pc, #84]	; (8005408 <PCD_EP_OutSetupPacket_int+0x88>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d90e      	bls.n	80053d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	461a      	mov	r2, r3
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f004 fb61 	bl	8009a9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <PCD_EP_OutSetupPacket_int+0x88>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d90c      	bls.n	80053fc <PCD_EP_OutSetupPacket_int+0x7c>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d108      	bne.n	80053fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053f4:	461a      	mov	r2, r3
 80053f6:	2101      	movs	r1, #1
 80053f8:	f002 f908 	bl	800760c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	4f54300a 	.word	0x4f54300a

0800540c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
 8005418:	4613      	mov	r3, r2
 800541a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d107      	bne.n	800543a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800542a:	883b      	ldrh	r3, [r7, #0]
 800542c:	0419      	lsls	r1, r3, #16
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	430a      	orrs	r2, r1
 8005436:	629a      	str	r2, [r3, #40]	; 0x28
 8005438:	e028      	b.n	800548c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4413      	add	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005448:	2300      	movs	r3, #0
 800544a:	73fb      	strb	r3, [r7, #15]
 800544c:	e00d      	b.n	800546a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	3340      	adds	r3, #64	; 0x40
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	0c1b      	lsrs	r3, r3, #16
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4413      	add	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	3301      	adds	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
 800546a:	7bfa      	ldrb	r2, [r7, #15]
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	3b01      	subs	r3, #1
 8005470:	429a      	cmp	r2, r3
 8005472:	d3ec      	bcc.n	800544e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005474:	883b      	ldrh	r3, [r7, #0]
 8005476:	0418      	lsls	r0, r3, #16
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6819      	ldr	r1, [r3, #0]
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	3b01      	subs	r3, #1
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	4302      	orrs	r2, r0
 8005484:	3340      	adds	r3, #64	; 0x40
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	887a      	ldrh	r2, [r7, #2]
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e264      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d075      	beq.n	80055de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054f2:	4ba3      	ldr	r3, [pc, #652]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d00c      	beq.n	8005518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fe:	4ba0      	ldr	r3, [pc, #640]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005506:	2b08      	cmp	r3, #8
 8005508:	d112      	bne.n	8005530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800550a:	4b9d      	ldr	r3, [pc, #628]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005516:	d10b      	bne.n	8005530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005518:	4b99      	ldr	r3, [pc, #612]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05b      	beq.n	80055dc <HAL_RCC_OscConfig+0x108>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d157      	bne.n	80055dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e23f      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d106      	bne.n	8005548 <HAL_RCC_OscConfig+0x74>
 800553a:	4b91      	ldr	r3, [pc, #580]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a90      	ldr	r2, [pc, #576]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e01d      	b.n	8005584 <HAL_RCC_OscConfig+0xb0>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005550:	d10c      	bne.n	800556c <HAL_RCC_OscConfig+0x98>
 8005552:	4b8b      	ldr	r3, [pc, #556]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a8a      	ldr	r2, [pc, #552]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	4b88      	ldr	r3, [pc, #544]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a87      	ldr	r2, [pc, #540]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e00b      	b.n	8005584 <HAL_RCC_OscConfig+0xb0>
 800556c:	4b84      	ldr	r3, [pc, #528]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a83      	ldr	r2, [pc, #524]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	4b81      	ldr	r3, [pc, #516]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a80      	ldr	r2, [pc, #512]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 800557e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d013      	beq.n	80055b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558c:	f7fc fca2 	bl	8001ed4 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005594:	f7fc fc9e 	bl	8001ed4 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b64      	cmp	r3, #100	; 0x64
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e204      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a6:	4b76      	ldr	r3, [pc, #472]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f0      	beq.n	8005594 <HAL_RCC_OscConfig+0xc0>
 80055b2:	e014      	b.n	80055de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b4:	f7fc fc8e 	bl	8001ed4 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055bc:	f7fc fc8a 	bl	8001ed4 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b64      	cmp	r3, #100	; 0x64
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e1f0      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ce:	4b6c      	ldr	r3, [pc, #432]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0xe8>
 80055da:	e000      	b.n	80055de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d063      	beq.n	80056b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ea:	4b65      	ldr	r3, [pc, #404]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f6:	4b62      	ldr	r3, [pc, #392]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d11c      	bne.n	800563c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005602:	4b5f      	ldr	r3, [pc, #380]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d116      	bne.n	800563c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560e:	4b5c      	ldr	r3, [pc, #368]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_RCC_OscConfig+0x152>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d001      	beq.n	8005626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e1c4      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005626:	4b56      	ldr	r3, [pc, #344]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4952      	ldr	r1, [pc, #328]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005636:	4313      	orrs	r3, r2
 8005638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800563a:	e03a      	b.n	80056b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d020      	beq.n	8005686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005644:	4b4f      	ldr	r3, [pc, #316]	; (8005784 <HAL_RCC_OscConfig+0x2b0>)
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564a:	f7fc fc43 	bl	8001ed4 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005652:	f7fc fc3f 	bl	8001ed4 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e1a5      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005664:	4b46      	ldr	r3, [pc, #280]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005670:	4b43      	ldr	r3, [pc, #268]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4940      	ldr	r1, [pc, #256]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005680:	4313      	orrs	r3, r2
 8005682:	600b      	str	r3, [r1, #0]
 8005684:	e015      	b.n	80056b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005686:	4b3f      	ldr	r3, [pc, #252]	; (8005784 <HAL_RCC_OscConfig+0x2b0>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fc fc22 	bl	8001ed4 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005694:	f7fc fc1e 	bl	8001ed4 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e184      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d030      	beq.n	8005720 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056c6:	4b30      	ldr	r3, [pc, #192]	; (8005788 <HAL_RCC_OscConfig+0x2b4>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056cc:	f7fc fc02 	bl	8001ed4 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056d4:	f7fc fbfe 	bl	8001ed4 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e164      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056e6:	4b26      	ldr	r3, [pc, #152]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0x200>
 80056f2:	e015      	b.n	8005720 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f4:	4b24      	ldr	r3, [pc, #144]	; (8005788 <HAL_RCC_OscConfig+0x2b4>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fa:	f7fc fbeb 	bl	8001ed4 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005702:	f7fc fbe7 	bl	8001ed4 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e14d      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f0      	bne.n	8005702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80a0 	beq.w	800586e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10f      	bne.n	800575e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	4a0e      	ldr	r2, [pc, #56]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574c:	6413      	str	r3, [r2, #64]	; 0x40
 800574e:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <HAL_RCC_OscConfig+0x2ac>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <HAL_RCC_OscConfig+0x2b8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d121      	bne.n	80057ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800576a:	4b08      	ldr	r3, [pc, #32]	; (800578c <HAL_RCC_OscConfig+0x2b8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a07      	ldr	r2, [pc, #28]	; (800578c <HAL_RCC_OscConfig+0x2b8>)
 8005770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005776:	f7fc fbad 	bl	8001ed4 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800577c:	e011      	b.n	80057a2 <HAL_RCC_OscConfig+0x2ce>
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	42470000 	.word	0x42470000
 8005788:	42470e80 	.word	0x42470e80
 800578c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005790:	f7fc fba0 	bl	8001ed4 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e106      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a2:	4b85      	ldr	r3, [pc, #532]	; (80059b8 <HAL_RCC_OscConfig+0x4e4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d106      	bne.n	80057c4 <HAL_RCC_OscConfig+0x2f0>
 80057b6:	4b81      	ldr	r3, [pc, #516]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	4a80      	ldr	r2, [pc, #512]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	6713      	str	r3, [r2, #112]	; 0x70
 80057c2:	e01c      	b.n	80057fe <HAL_RCC_OscConfig+0x32a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b05      	cmp	r3, #5
 80057ca:	d10c      	bne.n	80057e6 <HAL_RCC_OscConfig+0x312>
 80057cc:	4b7b      	ldr	r3, [pc, #492]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	4a7a      	ldr	r2, [pc, #488]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057d2:	f043 0304 	orr.w	r3, r3, #4
 80057d6:	6713      	str	r3, [r2, #112]	; 0x70
 80057d8:	4b78      	ldr	r3, [pc, #480]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	4a77      	ldr	r2, [pc, #476]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6713      	str	r3, [r2, #112]	; 0x70
 80057e4:	e00b      	b.n	80057fe <HAL_RCC_OscConfig+0x32a>
 80057e6:	4b75      	ldr	r3, [pc, #468]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	4a74      	ldr	r2, [pc, #464]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	6713      	str	r3, [r2, #112]	; 0x70
 80057f2:	4b72      	ldr	r3, [pc, #456]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4a71      	ldr	r2, [pc, #452]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d015      	beq.n	8005832 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005806:	f7fc fb65 	bl	8001ed4 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580c:	e00a      	b.n	8005824 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fc fb61 	bl	8001ed4 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e0c5      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	4b65      	ldr	r3, [pc, #404]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ee      	beq.n	800580e <HAL_RCC_OscConfig+0x33a>
 8005830:	e014      	b.n	800585c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005832:	f7fc fb4f 	bl	8001ed4 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005838:	e00a      	b.n	8005850 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583a:	f7fc fb4b 	bl	8001ed4 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	; 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e0af      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005850:	4b5a      	ldr	r3, [pc, #360]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ee      	bne.n	800583a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800585c:	7dfb      	ldrb	r3, [r7, #23]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d105      	bne.n	800586e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005862:	4b56      	ldr	r3, [pc, #344]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	4a55      	ldr	r2, [pc, #340]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 8005868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 809b 	beq.w	80059ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005878:	4b50      	ldr	r3, [pc, #320]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	2b08      	cmp	r3, #8
 8005882:	d05c      	beq.n	800593e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d141      	bne.n	8005910 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588c:	4b4c      	ldr	r3, [pc, #304]	; (80059c0 <HAL_RCC_OscConfig+0x4ec>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005892:	f7fc fb1f 	bl	8001ed4 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589a:	f7fc fb1b 	bl	8001ed4 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e081      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ac:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	019b      	lsls	r3, r3, #6
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	3b01      	subs	r3, #1
 80058d2:	041b      	lsls	r3, r3, #16
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	061b      	lsls	r3, r3, #24
 80058dc:	4937      	ldr	r1, [pc, #220]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e2:	4b37      	ldr	r3, [pc, #220]	; (80059c0 <HAL_RCC_OscConfig+0x4ec>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fc faf4 	bl	8001ed4 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fc faf0 	bl	8001ed4 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e056      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005902:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0x41c>
 800590e:	e04e      	b.n	80059ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005910:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <HAL_RCC_OscConfig+0x4ec>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005916:	f7fc fadd 	bl	8001ed4 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800591e:	f7fc fad9 	bl	8001ed4 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e03f      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005930:	4b22      	ldr	r3, [pc, #136]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x44a>
 800593c:	e037      	b.n	80059ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e032      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800594a:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <HAL_RCC_OscConfig+0x4e8>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d028      	beq.n	80059aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005962:	429a      	cmp	r2, r3
 8005964:	d121      	bne.n	80059aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005970:	429a      	cmp	r2, r3
 8005972:	d11a      	bne.n	80059aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800597a:	4013      	ands	r3, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005980:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005982:	4293      	cmp	r3, r2
 8005984:	d111      	bne.n	80059aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	3b01      	subs	r3, #1
 8005994:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d107      	bne.n	80059aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40007000 	.word	0x40007000
 80059bc:	40023800 	.word	0x40023800
 80059c0:	42470060 	.word	0x42470060

080059c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0cc      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059d8:	4b68      	ldr	r3, [pc, #416]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d90c      	bls.n	8005a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e6:	4b65      	ldr	r3, [pc, #404]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ee:	4b63      	ldr	r3, [pc, #396]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0b8      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d020      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a18:	4b59      	ldr	r3, [pc, #356]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	4a58      	ldr	r2, [pc, #352]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a30:	4b53      	ldr	r3, [pc, #332]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4a52      	ldr	r2, [pc, #328]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a3c:	4b50      	ldr	r3, [pc, #320]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	494d      	ldr	r1, [pc, #308]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d044      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d107      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a62:	4b47      	ldr	r3, [pc, #284]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d119      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e07f      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d003      	beq.n	8005a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a82:	4b3f      	ldr	r3, [pc, #252]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e06f      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a92:	4b3b      	ldr	r3, [pc, #236]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e067      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aa2:	4b37      	ldr	r3, [pc, #220]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f023 0203 	bic.w	r2, r3, #3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4934      	ldr	r1, [pc, #208]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab4:	f7fc fa0e 	bl	8001ed4 <HAL_GetTick>
 8005ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aba:	e00a      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005abc:	f7fc fa0a 	bl	8001ed4 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e04f      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 020c 	and.w	r2, r3, #12
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d1eb      	bne.n	8005abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d20c      	bcs.n	8005b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afa:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <HAL_RCC_ClockConfig+0x1b8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e032      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b18:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4916      	ldr	r1, [pc, #88]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	490e      	ldr	r1, [pc, #56]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b4a:	f000 f821 	bl	8005b90 <HAL_RCC_GetSysClockFreq>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	490a      	ldr	r1, [pc, #40]	; (8005b84 <HAL_RCC_ClockConfig+0x1c0>)
 8005b5c:	5ccb      	ldrb	r3, [r1, r3]
 8005b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b62:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <HAL_RCC_ClockConfig+0x1c4>)
 8005b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <HAL_RCC_ClockConfig+0x1c8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fc f96e 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40023c00 	.word	0x40023c00
 8005b80:	40023800 	.word	0x40023800
 8005b84:	0800b380 	.word	0x0800b380
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	20000004 	.word	0x20000004

08005b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b90:	b5b0      	push	{r4, r5, r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b96:	2100      	movs	r1, #0
 8005b98:	6079      	str	r1, [r7, #4]
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	60f9      	str	r1, [r7, #12]
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ba6:	4952      	ldr	r1, [pc, #328]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ba8:	6889      	ldr	r1, [r1, #8]
 8005baa:	f001 010c 	and.w	r1, r1, #12
 8005bae:	2908      	cmp	r1, #8
 8005bb0:	d00d      	beq.n	8005bce <HAL_RCC_GetSysClockFreq+0x3e>
 8005bb2:	2908      	cmp	r1, #8
 8005bb4:	f200 8094 	bhi.w	8005ce0 <HAL_RCC_GetSysClockFreq+0x150>
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x32>
 8005bbc:	2904      	cmp	r1, #4
 8005bbe:	d003      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x38>
 8005bc0:	e08e      	b.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bc2:	4b4c      	ldr	r3, [pc, #304]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005bc4:	60bb      	str	r3, [r7, #8]
       break;
 8005bc6:	e08e      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bc8:	4b4b      	ldr	r3, [pc, #300]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005bca:	60bb      	str	r3, [r7, #8]
      break;
 8005bcc:	e08b      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bce:	4948      	ldr	r1, [pc, #288]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bd0:	6849      	ldr	r1, [r1, #4]
 8005bd2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005bd6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bd8:	4945      	ldr	r1, [pc, #276]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bda:	6849      	ldr	r1, [r1, #4]
 8005bdc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005be0:	2900      	cmp	r1, #0
 8005be2:	d024      	beq.n	8005c2e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005be4:	4942      	ldr	r1, [pc, #264]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005be6:	6849      	ldr	r1, [r1, #4]
 8005be8:	0989      	lsrs	r1, r1, #6
 8005bea:	4608      	mov	r0, r1
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005bf4:	f04f 0500 	mov.w	r5, #0
 8005bf8:	ea00 0204 	and.w	r2, r0, r4
 8005bfc:	ea01 0305 	and.w	r3, r1, r5
 8005c00:	493d      	ldr	r1, [pc, #244]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c02:	fb01 f003 	mul.w	r0, r1, r3
 8005c06:	2100      	movs	r1, #0
 8005c08:	fb01 f102 	mul.w	r1, r1, r2
 8005c0c:	1844      	adds	r4, r0, r1
 8005c0e:	493a      	ldr	r1, [pc, #232]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c10:	fba2 0101 	umull	r0, r1, r2, r1
 8005c14:	1863      	adds	r3, r4, r1
 8005c16:	4619      	mov	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	f7fa fffc 	bl	8000c1c <__aeabi_uldivmod>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4613      	mov	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e04a      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c2e:	4b30      	ldr	r3, [pc, #192]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	099b      	lsrs	r3, r3, #6
 8005c34:	461a      	mov	r2, r3
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c3e:	f04f 0100 	mov.w	r1, #0
 8005c42:	ea02 0400 	and.w	r4, r2, r0
 8005c46:	ea03 0501 	and.w	r5, r3, r1
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	014b      	lsls	r3, r1, #5
 8005c58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c5c:	0142      	lsls	r2, r0, #5
 8005c5e:	4610      	mov	r0, r2
 8005c60:	4619      	mov	r1, r3
 8005c62:	1b00      	subs	r0, r0, r4
 8005c64:	eb61 0105 	sbc.w	r1, r1, r5
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	018b      	lsls	r3, r1, #6
 8005c72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c76:	0182      	lsls	r2, r0, #6
 8005c78:	1a12      	subs	r2, r2, r0
 8005c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c7e:	f04f 0000 	mov.w	r0, #0
 8005c82:	f04f 0100 	mov.w	r1, #0
 8005c86:	00d9      	lsls	r1, r3, #3
 8005c88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c8c:	00d0      	lsls	r0, r2, #3
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	1912      	adds	r2, r2, r4
 8005c94:	eb45 0303 	adc.w	r3, r5, r3
 8005c98:	f04f 0000 	mov.w	r0, #0
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	0299      	lsls	r1, r3, #10
 8005ca2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ca6:	0290      	lsls	r0, r2, #10
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4610      	mov	r0, r2
 8005cae:	4619      	mov	r1, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	f7fa ffb0 	bl	8000c1c <__aeabi_uldivmod>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	0c1b      	lsrs	r3, r3, #16
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cdc:	60bb      	str	r3, [r7, #8]
      break;
 8005cde:	e002      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x164>)
 8005ce2:	60bb      	str	r3, [r7, #8]
      break;
 8005ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bdb0      	pop	{r4, r5, r7, pc}
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	00f42400 	.word	0x00f42400
 8005cf8:	017d7840 	.word	0x017d7840

08005cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d00:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d02:	681b      	ldr	r3, [r3, #0]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000000 	.word	0x20000000

08005d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d18:	f7ff fff0 	bl	8005cfc <HAL_RCC_GetHCLKFreq>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	0a9b      	lsrs	r3, r3, #10
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	4903      	ldr	r1, [pc, #12]	; (8005d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d2a:	5ccb      	ldrb	r3, [r1, r3]
 8005d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40023800 	.word	0x40023800
 8005d38:	0800b390 	.word	0x0800b390

08005d3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d105      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d038      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d64:	4b68      	ldr	r3, [pc, #416]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d6a:	f7fc f8b3 	bl	8001ed4 <HAL_GetTick>
 8005d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d72:	f7fc f8af 	bl	8001ed4 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e0bd      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d84:	4b61      	ldr	r3, [pc, #388]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1f0      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	019b      	lsls	r3, r3, #6
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	071b      	lsls	r3, r3, #28
 8005da2:	495a      	ldr	r1, [pc, #360]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005daa:	4b57      	ldr	r3, [pc, #348]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005db0:	f7fc f890 	bl	8001ed4 <HAL_GetTick>
 8005db4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005db8:	f7fc f88c 	bl	8001ed4 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e09a      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dca:	4b50      	ldr	r3, [pc, #320]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8083 	beq.w	8005eea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	4b48      	ldr	r3, [pc, #288]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	4a47      	ldr	r2, [pc, #284]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df2:	6413      	str	r3, [r2, #64]	; 0x40
 8005df4:	4b45      	ldr	r3, [pc, #276]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e00:	4b43      	ldr	r3, [pc, #268]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a42      	ldr	r2, [pc, #264]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e0c:	f7fc f862 	bl	8001ed4 <HAL_GetTick>
 8005e10:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e14:	f7fc f85e 	bl	8001ed4 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e06c      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e26:	4b3a      	ldr	r3, [pc, #232]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e32:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d02f      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d028      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e50:	4b2e      	ldr	r3, [pc, #184]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e58:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e60:	4b2c      	ldr	r3, [pc, #176]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e66:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e6c:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d114      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e78:	f7fc f82c 	bl	8001ed4 <HAL_GetTick>
 8005e7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e80:	f7fc f828 	bl	8001ed4 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e034      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e96:	4b1d      	ldr	r3, [pc, #116]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0ee      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eae:	d10d      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005eb0:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec4:	4911      	ldr	r1, [pc, #68]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	608b      	str	r3, [r1, #8]
 8005eca:	e005      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4a0e      	ldr	r2, [pc, #56]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ed6:	6093      	str	r3, [r2, #8]
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee4:	4909      	ldr	r1, [pc, #36]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	7d1a      	ldrb	r2, [r3, #20]
 8005efa:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005efc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	42470068 	.word	0x42470068
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	40007000 	.word	0x40007000
 8005f14:	42470e40 	.word	0x42470e40
 8005f18:	424711e0 	.word	0x424711e0

08005f1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e083      	b.n	8006036 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7f5b      	ldrb	r3, [r3, #29]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb fe2e 	bl	8001ba0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	22ca      	movs	r2, #202	; 0xca
 8005f50:	625a      	str	r2, [r3, #36]	; 0x24
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2253      	movs	r2, #83	; 0x53
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f897 	bl	800608e <RTC_EnterInitMode>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	22ff      	movs	r2, #255	; 0xff
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e05e      	b.n	8006036 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6899      	ldr	r1, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	68d2      	ldr	r2, [r2, #12]
 8005fb2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6919      	ldr	r1, [r3, #16]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	041a      	lsls	r2, r3, #16
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10e      	bne.n	8006004 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f829 	bl	800603e <HAL_RTC_WaitForSynchro>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	22ff      	movs	r2, #255	; 0xff
 8005ff8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e018      	b.n	8006036 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006012:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	22ff      	movs	r2, #255	; 0xff
 800602c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006034:	2300      	movs	r3, #0
  }
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006058:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800605a:	f7fb ff3b 	bl	8001ed4 <HAL_GetTick>
 800605e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006060:	e009      	b.n	8006076 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006062:	f7fb ff37 	bl	8001ed4 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006070:	d901      	bls.n	8006076 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e007      	b.n	8006086 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0ee      	beq.n	8006062 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d119      	bne.n	80060dc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295
 80060b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060b2:	f7fb ff0f 	bl	8001ed4 <HAL_GetTick>
 80060b6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060b8:	e009      	b.n	80060ce <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060ba:	f7fb ff0b 	bl	8001ed4 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060c8:	d901      	bls.n	80060ce <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e007      	b.n	80060de <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0ee      	beq.n	80060ba <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060e6:	b084      	sub	sp, #16
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	f107 001c 	add.w	r0, r7, #28
 80060f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d122      	bne.n	8006144 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006128:	2b01      	cmp	r3, #1
 800612a:	d105      	bne.n	8006138 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fac5 	bl	80076c8 <USB_CoreReset>
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]
 8006142:	e01a      	b.n	800617a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fab9 	bl	80076c8 <USB_CoreReset>
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800615a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	639a      	str	r2, [r3, #56]	; 0x38
 800616c:	e005      	b.n	800617a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	2b01      	cmp	r3, #1
 800617e:	d10b      	bne.n	8006198 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f043 0206 	orr.w	r2, r3, #6
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f043 0220 	orr.w	r2, r3, #32
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061a4:	b004      	add	sp, #16
 80061a6:	4770      	bx	lr

080061a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061b6:	79fb      	ldrb	r3, [r7, #7]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d165      	bne.n	8006288 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4a41      	ldr	r2, [pc, #260]	; (80062c4 <USB_SetTurnaroundTime+0x11c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d906      	bls.n	80061d2 <USB_SetTurnaroundTime+0x2a>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4a40      	ldr	r2, [pc, #256]	; (80062c8 <USB_SetTurnaroundTime+0x120>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d202      	bcs.n	80061d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061cc:	230f      	movs	r3, #15
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e062      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4a3c      	ldr	r2, [pc, #240]	; (80062c8 <USB_SetTurnaroundTime+0x120>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d306      	bcc.n	80061e8 <USB_SetTurnaroundTime+0x40>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4a3b      	ldr	r2, [pc, #236]	; (80062cc <USB_SetTurnaroundTime+0x124>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d202      	bcs.n	80061e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061e2:	230e      	movs	r3, #14
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	e057      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4a38      	ldr	r2, [pc, #224]	; (80062cc <USB_SetTurnaroundTime+0x124>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d306      	bcc.n	80061fe <USB_SetTurnaroundTime+0x56>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4a37      	ldr	r2, [pc, #220]	; (80062d0 <USB_SetTurnaroundTime+0x128>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d202      	bcs.n	80061fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061f8:	230d      	movs	r3, #13
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e04c      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4a33      	ldr	r2, [pc, #204]	; (80062d0 <USB_SetTurnaroundTime+0x128>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d306      	bcc.n	8006214 <USB_SetTurnaroundTime+0x6c>
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4a32      	ldr	r2, [pc, #200]	; (80062d4 <USB_SetTurnaroundTime+0x12c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d802      	bhi.n	8006214 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800620e:	230c      	movs	r3, #12
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	e041      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4a2f      	ldr	r2, [pc, #188]	; (80062d4 <USB_SetTurnaroundTime+0x12c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d906      	bls.n	800622a <USB_SetTurnaroundTime+0x82>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4a2e      	ldr	r2, [pc, #184]	; (80062d8 <USB_SetTurnaroundTime+0x130>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d802      	bhi.n	800622a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006224:	230b      	movs	r3, #11
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	e036      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4a2a      	ldr	r2, [pc, #168]	; (80062d8 <USB_SetTurnaroundTime+0x130>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d906      	bls.n	8006240 <USB_SetTurnaroundTime+0x98>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4a29      	ldr	r2, [pc, #164]	; (80062dc <USB_SetTurnaroundTime+0x134>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d802      	bhi.n	8006240 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800623a:	230a      	movs	r3, #10
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e02b      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4a26      	ldr	r2, [pc, #152]	; (80062dc <USB_SetTurnaroundTime+0x134>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d906      	bls.n	8006256 <USB_SetTurnaroundTime+0xae>
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4a25      	ldr	r2, [pc, #148]	; (80062e0 <USB_SetTurnaroundTime+0x138>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d202      	bcs.n	8006256 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006250:	2309      	movs	r3, #9
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	e020      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4a21      	ldr	r2, [pc, #132]	; (80062e0 <USB_SetTurnaroundTime+0x138>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d306      	bcc.n	800626c <USB_SetTurnaroundTime+0xc4>
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <USB_SetTurnaroundTime+0x13c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d802      	bhi.n	800626c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006266:	2308      	movs	r3, #8
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	e015      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4a1d      	ldr	r2, [pc, #116]	; (80062e4 <USB_SetTurnaroundTime+0x13c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d906      	bls.n	8006282 <USB_SetTurnaroundTime+0xda>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4a1c      	ldr	r2, [pc, #112]	; (80062e8 <USB_SetTurnaroundTime+0x140>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d202      	bcs.n	8006282 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800627c:	2307      	movs	r3, #7
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	e00a      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006282:	2306      	movs	r3, #6
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	e007      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800628e:	2309      	movs	r3, #9
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	e001      	b.n	8006298 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006294:	2309      	movs	r3, #9
 8006296:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	029b      	lsls	r3, r3, #10
 80062ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80062b0:	431a      	orrs	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	00d8acbf 	.word	0x00d8acbf
 80062c8:	00e4e1c0 	.word	0x00e4e1c0
 80062cc:	00f42400 	.word	0x00f42400
 80062d0:	01067380 	.word	0x01067380
 80062d4:	011a499f 	.word	0x011a499f
 80062d8:	01312cff 	.word	0x01312cff
 80062dc:	014ca43f 	.word	0x014ca43f
 80062e0:	016e3600 	.word	0x016e3600
 80062e4:	01a6ab1f 	.word	0x01a6ab1f
 80062e8:	01e84800 	.word	0x01e84800

080062ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f043 0201 	orr.w	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f023 0201 	bic.w	r2, r3, #1
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d106      	bne.n	800635c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60da      	str	r2, [r3, #12]
 800635a:	e00b      	b.n	8006374 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60da      	str	r2, [r3, #12]
 800636e:	e001      	b.n	8006374 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e003      	b.n	800637c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006374:	2032      	movs	r0, #50	; 0x32
 8006376:	f7fb fdb9 	bl	8001eec <HAL_Delay>

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006384:	b084      	sub	sp, #16
 8006386:	b580      	push	{r7, lr}
 8006388:	b086      	sub	sp, #24
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	e009      	b.n	80063b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	3340      	adds	r3, #64	; 0x40
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	2200      	movs	r2, #0
 80063b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	3301      	adds	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b0e      	cmp	r3, #14
 80063bc:	d9f2      	bls.n	80063a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d11c      	bne.n	80063fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d2:	f043 0302 	orr.w	r3, r3, #2
 80063d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	639a      	str	r2, [r3, #56]	; 0x38
 80063fc:	e00b      	b.n	8006416 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800641c:	461a      	mov	r2, r3
 800641e:	2300      	movs	r3, #0
 8006420:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006428:	4619      	mov	r1, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006430:	461a      	mov	r2, r3
 8006432:	680b      	ldr	r3, [r1, #0]
 8006434:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	2b01      	cmp	r3, #1
 800643a:	d10c      	bne.n	8006456 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d104      	bne.n	800644c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006442:	2100      	movs	r1, #0
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f949 	bl	80066dc <USB_SetDevSpeed>
 800644a:	e008      	b.n	800645e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800644c:	2101      	movs	r1, #1
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f944 	bl	80066dc <USB_SetDevSpeed>
 8006454:	e003      	b.n	800645e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006456:	2103      	movs	r1, #3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f93f 	bl	80066dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800645e:	2110      	movs	r1, #16
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f8f3 	bl	800664c <USB_FlushTxFifo>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f911 	bl	8006698 <USB_FlushRxFifo>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	461a      	mov	r2, r3
 8006488:	2300      	movs	r3, #0
 800648a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006492:	461a      	mov	r2, r3
 8006494:	2300      	movs	r3, #0
 8006496:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649e:	461a      	mov	r2, r3
 80064a0:	2300      	movs	r3, #0
 80064a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064a4:	2300      	movs	r3, #0
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	e043      	b.n	8006532 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064c0:	d118      	bne.n	80064f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	461a      	mov	r2, r3
 80064d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e013      	b.n	8006506 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ea:	461a      	mov	r2, r3
 80064ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	e008      	b.n	8006506 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006500:	461a      	mov	r2, r3
 8006502:	2300      	movs	r3, #0
 8006504:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006512:	461a      	mov	r2, r3
 8006514:	2300      	movs	r3, #0
 8006516:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	461a      	mov	r2, r3
 8006526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800652a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	3301      	adds	r3, #1
 8006530:	613b      	str	r3, [r7, #16]
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	429a      	cmp	r2, r3
 8006538:	d3b7      	bcc.n	80064aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800653a:	2300      	movs	r3, #0
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	e043      	b.n	80065c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006556:	d118      	bne.n	800658a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	461a      	mov	r2, r3
 800656c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e013      	b.n	800659c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	461a      	mov	r2, r3
 8006582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	e008      	b.n	800659c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	461a      	mov	r2, r3
 8006598:	2300      	movs	r3, #0
 800659a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	461a      	mov	r2, r3
 80065aa:	2300      	movs	r3, #0
 80065ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ba:	461a      	mov	r2, r3
 80065bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	3301      	adds	r3, #1
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d3b7      	bcc.n	8006540 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d105      	bne.n	8006604 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f043 0210 	orr.w	r2, r3, #16
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <USB_DevInit+0x2c4>)
 800660a:	4313      	orrs	r3, r2
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f043 0208 	orr.w	r2, r3, #8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d107      	bne.n	8006638 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006630:	f043 0304 	orr.w	r3, r3, #4
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006638:	7dfb      	ldrb	r3, [r7, #23]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006644:	b004      	add	sp, #16
 8006646:	4770      	bx	lr
 8006648:	803c3800 	.word	0x803c3800

0800664c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	019b      	lsls	r3, r3, #6
 800665e:	f043 0220 	orr.w	r2, r3, #32
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a09      	ldr	r2, [pc, #36]	; (8006694 <USB_FlushTxFifo+0x48>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d901      	bls.n	8006678 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e006      	b.n	8006686 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b20      	cmp	r3, #32
 8006682:	d0f0      	beq.n	8006666 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	00030d40 	.word	0x00030d40

08006698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2210      	movs	r2, #16
 80066a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4a09      	ldr	r2, [pc, #36]	; (80066d8 <USB_FlushRxFifo+0x40>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d901      	bls.n	80066bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e006      	b.n	80066ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b10      	cmp	r3, #16
 80066c6:	d0f0      	beq.n	80066aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	00030d40 	.word	0x00030d40

080066dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	68f9      	ldr	r1, [r7, #12]
 80066f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066fc:	4313      	orrs	r3, r2
 80066fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800670e:	b480      	push	{r7}
 8006710:	b087      	sub	sp, #28
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0306 	and.w	r3, r3, #6
 8006726:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800672e:	2300      	movs	r3, #0
 8006730:	75fb      	strb	r3, [r7, #23]
 8006732:	e00a      	b.n	800674a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d002      	beq.n	8006740 <USB_GetDevSpeed+0x32>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b06      	cmp	r3, #6
 800673e:	d102      	bne.n	8006746 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006740:	2302      	movs	r3, #2
 8006742:	75fb      	strb	r3, [r7, #23]
 8006744:	e001      	b.n	800674a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006746:	230f      	movs	r3, #15
 8006748:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
}
 800674c:	4618      	mov	r0, r3
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d13a      	bne.n	80067ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	2101      	movs	r1, #1
 8006786:	fa01 f303 	lsl.w	r3, r1, r3
 800678a:	b29b      	uxth	r3, r3
 800678c:	68f9      	ldr	r1, [r7, #12]
 800678e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006792:	4313      	orrs	r3, r2
 8006794:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d155      	bne.n	8006858 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	78db      	ldrb	r3, [r3, #3]
 80067c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	059b      	lsls	r3, r3, #22
 80067ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067d0:	4313      	orrs	r3, r2
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	e036      	b.n	8006858 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f0:	69da      	ldr	r2, [r3, #28]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	2101      	movs	r1, #1
 80067fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006808:	4313      	orrs	r3, r2
 800680a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d11a      	bne.n	8006858 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	78db      	ldrb	r3, [r3, #3]
 800683c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800683e:	430b      	orrs	r3, r1
 8006840:	4313      	orrs	r3, r2
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800684e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006856:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d161      	bne.n	8006948 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800689a:	d11f      	bne.n	80068dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	2101      	movs	r1, #1
 80068ee:	fa01 f303 	lsl.w	r3, r1, r3
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	43db      	mvns	r3, r3
 80068f6:	68f9      	ldr	r1, [r7, #12]
 80068f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068fc:	4013      	ands	r3, r2
 80068fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	2101      	movs	r1, #1
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	b29b      	uxth	r3, r3
 8006918:	43db      	mvns	r3, r3
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006920:	4013      	ands	r3, r2
 8006922:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	0159      	lsls	r1, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	440b      	add	r3, r1
 800693a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693e:	4619      	mov	r1, r3
 8006940:	4b35      	ldr	r3, [pc, #212]	; (8006a18 <USB_DeactivateEndpoint+0x1b0>)
 8006942:	4013      	ands	r3, r2
 8006944:	600b      	str	r3, [r1, #0]
 8006946:	e060      	b.n	8006a0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800695a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800695e:	d11f      	bne.n	80069a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800697e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	440a      	add	r2, r1
 8006996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800699e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f003 030f 	and.w	r3, r3, #15
 80069b0:	2101      	movs	r1, #1
 80069b2:	fa01 f303 	lsl.w	r3, r1, r3
 80069b6:	041b      	lsls	r3, r3, #16
 80069b8:	43db      	mvns	r3, r3
 80069ba:	68f9      	ldr	r1, [r7, #12]
 80069bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c0:	4013      	ands	r3, r2
 80069c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	2101      	movs	r1, #1
 80069d6:	fa01 f303 	lsl.w	r3, r1, r3
 80069da:	041b      	lsls	r3, r3, #16
 80069dc:	43db      	mvns	r3, r3
 80069de:	68f9      	ldr	r1, [r7, #12]
 80069e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e4:	4013      	ands	r3, r2
 80069e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	0159      	lsls	r1, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	440b      	add	r3, r1
 80069fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a02:	4619      	mov	r1, r3
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <USB_DeactivateEndpoint+0x1b4>)
 8006a06:	4013      	ands	r3, r2
 8006a08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	ec337800 	.word	0xec337800
 8006a1c:	eff37800 	.word	0xeff37800

08006a20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08a      	sub	sp, #40	; 0x28
 8006a24:	af02      	add	r7, sp, #8
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	f040 815c 	bne.w	8006cfa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d132      	bne.n	8006ab0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	0151      	lsls	r1, r2, #5
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	440a      	add	r2, r1
 8006a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa8:	0cdb      	lsrs	r3, r3, #19
 8006aaa:	04db      	lsls	r3, r3, #19
 8006aac:	6113      	str	r3, [r2, #16]
 8006aae:	e074      	b.n	8006b9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aca:	0cdb      	lsrs	r3, r3, #19
 8006acc:	04db      	lsls	r3, r3, #19
 8006ace:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006aee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b00:	691a      	ldr	r2, [r3, #16]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6959      	ldr	r1, [r3, #20]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	440b      	add	r3, r1
 8006b0c:	1e59      	subs	r1, r3, #1
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b16:	04d9      	lsls	r1, r3, #19
 8006b18:	4b9d      	ldr	r3, [pc, #628]	; (8006d90 <USB_EPStartXfer+0x370>)
 8006b1a:	400b      	ands	r3, r1
 8006b1c:	69b9      	ldr	r1, [r7, #24]
 8006b1e:	0148      	lsls	r0, r1, #5
 8006b20:	69f9      	ldr	r1, [r7, #28]
 8006b22:	4401      	add	r1, r0
 8006b24:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b42:	69b9      	ldr	r1, [r7, #24]
 8006b44:	0148      	lsls	r0, r1, #5
 8006b46:	69f9      	ldr	r1, [r7, #28]
 8006b48:	4401      	add	r1, r0
 8006b4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	78db      	ldrb	r3, [r3, #3]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d11f      	bne.n	8006b9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b74:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006b78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d14b      	bne.n	8006c38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	78db      	ldrb	r3, [r3, #3]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d128      	bne.n	8006c16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d110      	bne.n	8006bf6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	e00f      	b.n	8006c16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	0151      	lsls	r1, r2, #5
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	440a      	add	r2, r1
 8006c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e12f      	b.n	8006e98 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	78db      	ldrb	r3, [r3, #3]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d015      	beq.n	8006c8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8117 	beq.w	8006e98 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f003 030f 	and.w	r3, r3, #15
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c80:	69f9      	ldr	r1, [r7, #28]
 8006c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c86:	4313      	orrs	r3, r2
 8006c88:	634b      	str	r3, [r1, #52]	; 0x34
 8006c8a:	e105      	b.n	8006e98 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d110      	bne.n	8006cbe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	e00f      	b.n	8006cde <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cdc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	68d9      	ldr	r1, [r3, #12]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	b298      	uxth	r0, r3
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fa2b 	bl	800714e <USB_WritePacket>
 8006cf8:	e0ce      	b.n	8006e98 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d14:	0cdb      	lsrs	r3, r3, #19
 8006d16:	04db      	lsls	r3, r3, #19
 8006d18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d126      	bne.n	8006d94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d5c:	69b9      	ldr	r1, [r7, #24]
 8006d5e:	0148      	lsls	r0, r1, #5
 8006d60:	69f9      	ldr	r1, [r7, #28]
 8006d62:	4401      	add	r1, r0
 8006d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	0151      	lsls	r1, r2, #5
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	440a      	add	r2, r1
 8006d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d8a:	6113      	str	r3, [r2, #16]
 8006d8c:	e036      	b.n	8006dfc <USB_EPStartXfer+0x3dc>
 8006d8e:	bf00      	nop
 8006d90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	695a      	ldr	r2, [r3, #20]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	1e5a      	subs	r2, r3, #1
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	8afb      	ldrh	r3, [r7, #22]
 8006dba:	04d9      	lsls	r1, r3, #19
 8006dbc:	4b39      	ldr	r3, [pc, #228]	; (8006ea4 <USB_EPStartXfer+0x484>)
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	69b9      	ldr	r1, [r7, #24]
 8006dc2:	0148      	lsls	r0, r1, #5
 8006dc4:	69f9      	ldr	r1, [r7, #28]
 8006dc6:	4401      	add	r1, r0
 8006dc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	691a      	ldr	r2, [r3, #16]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	8af9      	ldrh	r1, [r7, #22]
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dec:	69b9      	ldr	r1, [r7, #24]
 8006dee:	0148      	lsls	r0, r1, #5
 8006df0:	69f9      	ldr	r1, [r7, #28]
 8006df2:	4401      	add	r1, r0
 8006df4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d10d      	bne.n	8006e1e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	68d9      	ldr	r1, [r3, #12]
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1a:	460a      	mov	r2, r1
 8006e1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	78db      	ldrb	r3, [r3, #3]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d128      	bne.n	8006e78 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d110      	bne.n	8006e58 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	e00f      	b.n	8006e78 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3720      	adds	r7, #32
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	1ff80000 	.word	0x1ff80000

08006ea8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	f040 80cd 	bne.w	8007064 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d132      	bne.n	8006f38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ef0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	0151      	lsls	r1, r2, #5
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	440a      	add	r2, r1
 8006f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f30:	0cdb      	lsrs	r3, r3, #19
 8006f32:	04db      	lsls	r3, r3, #19
 8006f34:	6113      	str	r3, [r2, #16]
 8006f36:	e04e      	b.n	8006fd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f52:	0cdb      	lsrs	r3, r3, #19
 8006f54:	04db      	lsls	r3, r3, #19
 8006f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	695a      	ldr	r2, [r3, #20]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d903      	bls.n	8006f90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	0151      	lsls	r1, r2, #5
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	440a      	add	r2, r1
 8006fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc6:	6939      	ldr	r1, [r7, #16]
 8006fc8:	0148      	lsls	r0, r1, #5
 8006fca:	6979      	ldr	r1, [r7, #20]
 8006fcc:	4401      	add	r1, r0
 8006fce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d11e      	bne.n	800701a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	440a      	add	r2, r1
 800700e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007012:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	e092      	b.n	8007140 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	0151      	lsls	r1, r2, #5
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	440a      	add	r2, r1
 8007030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007038:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d07e      	beq.n	8007140 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	2101      	movs	r1, #1
 8007054:	fa01 f303 	lsl.w	r3, r1, r3
 8007058:	6979      	ldr	r1, [r7, #20]
 800705a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800705e:	4313      	orrs	r3, r2
 8007060:	634b      	str	r3, [r1, #52]	; 0x34
 8007062:	e06d      	b.n	8007140 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	440a      	add	r2, r1
 800707a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707e:	0cdb      	lsrs	r3, r3, #19
 8007080:	04db      	lsls	r3, r3, #19
 8007082:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	440a      	add	r2, r1
 800709a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e4:	691a      	ldr	r2, [r3, #16]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ee:	6939      	ldr	r1, [r7, #16]
 80070f0:	0148      	lsls	r0, r1, #5
 80070f2:	6979      	ldr	r1, [r7, #20]
 80070f4:	4401      	add	r1, r0
 80070f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070fa:	4313      	orrs	r3, r2
 80070fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d10d      	bne.n	8007120 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	68d9      	ldr	r1, [r3, #12]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	460a      	mov	r2, r1
 800711e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800713a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800713e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800714e:	b480      	push	{r7}
 8007150:	b089      	sub	sp, #36	; 0x24
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	4611      	mov	r1, r2
 800715a:	461a      	mov	r2, r3
 800715c:	460b      	mov	r3, r1
 800715e:	71fb      	strb	r3, [r7, #7]
 8007160:	4613      	mov	r3, r2
 8007162:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800716c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007170:	2b00      	cmp	r3, #0
 8007172:	d11a      	bne.n	80071aa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007174:	88bb      	ldrh	r3, [r7, #4]
 8007176:	3303      	adds	r3, #3
 8007178:	089b      	lsrs	r3, r3, #2
 800717a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800717c:	2300      	movs	r3, #0
 800717e:	61bb      	str	r3, [r7, #24]
 8007180:	e00f      	b.n	80071a2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	031a      	lsls	r2, r3, #12
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	4413      	add	r3, r2
 800718a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800718e:	461a      	mov	r2, r3
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	3304      	adds	r3, #4
 800719a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	3301      	adds	r3, #1
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d3eb      	bcc.n	8007182 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3724      	adds	r7, #36	; 0x24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b089      	sub	sp, #36	; 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80071ce:	88fb      	ldrh	r3, [r7, #6]
 80071d0:	3303      	adds	r3, #3
 80071d2:	089b      	lsrs	r3, r3, #2
 80071d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	e00b      	b.n	80071f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	3304      	adds	r3, #4
 80071ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	3301      	adds	r3, #1
 80071f2:	61bb      	str	r3, [r7, #24]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d3ef      	bcc.n	80071dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80071fc:	69fb      	ldr	r3, [r7, #28]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3724      	adds	r7, #36	; 0x24
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d12c      	bne.n	8007280 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	db12      	blt.n	800725e <USB_EPSetStall+0x54>
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00f      	beq.n	800725e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007258:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800725c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	440a      	add	r2, r1
 8007274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	e02b      	b.n	80072d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	db12      	blt.n	80072b8 <USB_EPSetStall+0xae>
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00f      	beq.n	80072b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d128      	bne.n	8007354 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	0151      	lsls	r1, r2, #5
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	440a      	add	r2, r1
 8007318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007320:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	78db      	ldrb	r3, [r3, #3]
 8007326:	2b03      	cmp	r3, #3
 8007328:	d003      	beq.n	8007332 <USB_EPClearStall+0x4c>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	78db      	ldrb	r3, [r3, #3]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d138      	bne.n	80073a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	0151      	lsls	r1, r2, #5
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	440a      	add	r2, r1
 8007348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	e027      	b.n	80073a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007372:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	78db      	ldrb	r3, [r3, #3]
 8007378:	2b03      	cmp	r3, #3
 800737a:	d003      	beq.n	8007384 <USB_EPClearStall+0x9e>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	78db      	ldrb	r3, [r3, #3]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d10f      	bne.n	80073a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	0151      	lsls	r1, r2, #5
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	440a      	add	r2, r1
 800739a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800739e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80073d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ec:	4313      	orrs	r3, r2
 80073ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007418:	f023 0303 	bic.w	r3, r3, #3
 800741c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800742c:	f023 0302 	bic.w	r3, r3, #2
 8007430:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800745a:	f023 0303 	bic.w	r3, r3, #3
 800745e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800746e:	f043 0302 	orr.w	r3, r3, #2
 8007472:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4013      	ands	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800749a:	68fb      	ldr	r3, [r7, #12]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4013      	ands	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	0c1b      	lsrs	r3, r3, #16
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	4013      	ands	r3, r2
 80074fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	b29b      	uxth	r3, r3
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	4013      	ands	r3, r2
 800753c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800753e:	68bb      	ldr	r3, [r7, #8]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
 800757c:	01db      	lsls	r3, r3, #7
 800757e:	b2db      	uxtb	r3, r3
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4313      	orrs	r3, r2
 8007584:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4013      	ands	r3, r2
 8007598:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800759a:	68bb      	ldr	r3, [r7, #8]
}
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f003 0301 	and.w	r3, r3, #1
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80075e2:	f023 0307 	bic.w	r3, r3, #7
 80075e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
	...

0800760c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	460b      	mov	r3, r1
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	333c      	adds	r3, #60	; 0x3c
 8007622:	3304      	adds	r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4a26      	ldr	r2, [pc, #152]	; (80076c4 <USB_EP0_OutStart+0xb8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d90a      	bls.n	8007646 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800763c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007640:	d101      	bne.n	8007646 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e037      	b.n	80076b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	461a      	mov	r2, r3
 800764e:	2300      	movs	r3, #0
 8007650:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007664:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007674:	f043 0318 	orr.w	r3, r3, #24
 8007678:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007688:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800768c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10f      	bne.n	80076b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	461a      	mov	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80076b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	4f54300a 	.word	0x4f54300a

080076c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a13      	ldr	r2, [pc, #76]	; (800772c <USB_CoreReset+0x64>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d901      	bls.n	80076e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e01b      	b.n	800771e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	daf2      	bge.n	80076d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f043 0201 	orr.w	r2, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3301      	adds	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4a09      	ldr	r2, [pc, #36]	; (800772c <USB_CoreReset+0x64>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d901      	bls.n	8007710 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e006      	b.n	800771e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b01      	cmp	r3, #1
 800771a:	d0f0      	beq.n	80076fe <USB_CoreReset+0x36>

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	00030d40 	.word	0x00030d40

08007730 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 800773c:	2044      	movs	r0, #68	; 0x44
 800773e:	f002 fc1f 	bl	8009f80 <USBD_static_malloc>
 8007742:	4602      	mov	r2, r0
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 8007754:	2303      	movs	r3, #3
 8007756:	e016      	b.n	8007786 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800775e:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 8007760:	2340      	movs	r3, #64	; 0x40
 8007762:	2202      	movs	r2, #2
 8007764:	2181      	movs	r1, #129	; 0x81
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f002 fae7 	bl	8009d3a <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 800776c:	2340      	movs	r3, #64	; 0x40
 800776e:	2202      	movs	r2, #2
 8007770:	2101      	movs	r1, #1
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f002 fae1 	bl	8009d3a <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8007778:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 800777a:	2340      	movs	r3, #64	; 0x40
 800777c:	2101      	movs	r1, #1
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f002 fbca 	bl	8009f18 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 800779a:	2181      	movs	r1, #129	; 0x81
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f002 faf2 	bl	8009d86 <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 80077a2:	2101      	movs	r1, #1
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f002 faee 	bl	8009d86 <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <USBD_Midi_Setup+0x26>
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d10b      	bne.n	80077e6 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 f937 	bl	8008a44 <USBD_CtlError>
      return USBD_FAIL;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e006      	b.n	80077e8 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f931 	bl	8008a44 <USBD_CtlError>
      return USBD_FAIL;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e000      	b.n	80077e8 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2265      	movs	r2, #101	; 0x65
 80077fc:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 80077fe:	4b03      	ldr	r3, [pc, #12]	; (800780c <USBD_Midi_GetCfgDesc+0x1c>)
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	20000044 	.word	0x20000044

08007810 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	460b      	mov	r3, r1
 8007890:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b2:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f002 fb4e 	bl	8009f5a <USBD_LL_GetRxDataSize>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e00c      	b.n	80078e8 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	440a      	add	r2, r1
 80078dc:	2104      	movs	r1, #4
 80078de:	4610      	mov	r0, r2
 80078e0:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	3304      	adds	r3, #4
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d3ed      	bcc.n	80078ce <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 80078f2:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 80078f4:	2340      	movs	r3, #64	; 0x40
 80078f6:	2101      	movs	r1, #1
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f002 fb0d 	bl	8009f18 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	220a      	movs	r2, #10
 8007914:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8007916:	4b03      	ldr	r3, [pc, #12]	; (8007924 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	200000ac 	.word	0x200000ac

08007928 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007932:	2303      	movs	r3, #3
 8007934:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	4613      	mov	r3, r2
 8007962:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	e01f      	b.n	80079ae <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	79fa      	ldrb	r2, [r7, #7]
 80079a0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f002 f962 	bl	8009c6c <USBD_LL_Init>
 80079a8:	4603      	mov	r3, r0
 80079aa:	75fb      	strb	r3, [r7, #23]

  return ret;
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e016      	b.n	80079fc <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	f107 020e 	add.w	r2, r7, #14
 80079ee:	4610      	mov	r0, r2
 80079f0:	4798      	blx	r3
 80079f2:	4602      	mov	r2, r0
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f002 f979 	bl	8009d04 <USBD_LL_Start>
 8007a12:	4603      	mov	r3, r0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d009      	beq.n	8007a60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	4611      	mov	r1, r2
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	78fa      	ldrb	r2, [r7, #3]
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
  }

  return USBD_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 ff8f 	bl	80089d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ace:	f003 031f 	and.w	r3, r3, #31
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d01a      	beq.n	8007b0c <USBD_LL_SetupStage+0x72>
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d822      	bhi.n	8007b20 <USBD_LL_SetupStage+0x86>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <USBD_LL_SetupStage+0x4a>
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d00a      	beq.n	8007af8 <USBD_LL_SetupStage+0x5e>
 8007ae2:	e01d      	b.n	8007b20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fa61 	bl	8007fb4 <USBD_StdDevReq>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
      break;
 8007af6:	e020      	b.n	8007b3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fac5 	bl	8008090 <USBD_StdItfReq>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0a:	e016      	b.n	8007b3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fb04 	bl	8008122 <USBD_StdEPReq>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1e:	e00c      	b.n	8007b3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f002 f948 	bl	8009dc4 <USBD_LL_StallEP>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
      break;
 8007b38:	bf00      	nop
  }

  return ret;
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d138      	bne.n	8007bca <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d14a      	bne.n	8007c00 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d913      	bls.n	8007b9e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	bf28      	it	cs
 8007b90:	4613      	movcs	r3, r2
 8007b92:	461a      	mov	r2, r3
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 fff1 	bl	8008b7e <USBD_CtlContinueRx>
 8007b9c:	e030      	b.n	8007c00 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d10b      	bne.n	8007bc2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 ffec 	bl	8008ba0 <USBD_CtlSendStatus>
 8007bc8:	e01a      	b.n	8007c00 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d114      	bne.n	8007c00 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00e      	beq.n	8007c00 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	7afa      	ldrb	r2, [r7, #11]
 8007bec:	4611      	mov	r1, r2
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	4798      	blx	r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	e000      	b.n	8007c02 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b086      	sub	sp, #24
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	460b      	mov	r3, r1
 8007c14:	607a      	str	r2, [r7, #4]
 8007c16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d16b      	bne.n	8007cf6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3314      	adds	r3, #20
 8007c22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d156      	bne.n	8007cdc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	689a      	ldr	r2, [r3, #8]
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d914      	bls.n	8007c64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	1ad2      	subs	r2, r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 ff83 	bl	8008b5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c56:	2300      	movs	r3, #0
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f002 f95b 	bl	8009f18 <USBD_LL_PrepareReceive>
 8007c62:	e03b      	b.n	8007cdc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d11c      	bne.n	8007caa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d316      	bcc.n	8007caa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d20f      	bcs.n	8007caa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 ff64 	bl	8008b5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f002 f938 	bl	8009f18 <USBD_LL_PrepareReceive>
 8007ca8:	e018      	b.n	8007cdc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d10b      	bne.n	8007cce <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cce:	2180      	movs	r1, #128	; 0x80
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f002 f877 	bl	8009dc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 ff75 	bl	8008bc6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d122      	bne.n	8007d2c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff fe98 	bl	8007a1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007cf4:	e01a      	b.n	8007d2c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d114      	bne.n	8007d2c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00e      	beq.n	8007d2c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	7afa      	ldrb	r2, [r7, #11]
 8007d18:	4611      	mov	r1, r2
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	4798      	blx	r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	e000      	b.n	8007d2e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e02f      	b.n	8007dca <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00f      	beq.n	8007d94 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d009      	beq.n	8007d94 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6852      	ldr	r2, [r2, #4]
 8007d8c:	b2d2      	uxtb	r2, r2
 8007d8e:	4611      	mov	r1, r2
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	2200      	movs	r2, #0
 8007d98:	2100      	movs	r1, #0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 ffcd 	bl	8009d3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2240      	movs	r2, #64	; 0x40
 8007dac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007db0:	2340      	movs	r3, #64	; 0x40
 8007db2:	2200      	movs	r2, #0
 8007db4:	2180      	movs	r1, #128	; 0x80
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 ffbf 	bl	8009d3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2240      	movs	r2, #64	; 0x40
 8007dc6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	78fa      	ldrb	r2, [r7, #3]
 8007de2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d106      	bne.n	8007e40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e012      	b.n	8007e8a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d10b      	bne.n	8007e88 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e014      	b.n	8007ed6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d10d      	bne.n	8007ed4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	78fa      	ldrb	r2, [r7, #3]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e014      	b.n	8007f22 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d10d      	bne.n	8007f20 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d007      	beq.n	8007f20 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	78fa      	ldrb	r2, [r7, #3]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d009      	beq.n	8007f6e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	6852      	ldr	r2, [r2, #4]
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	4611      	mov	r1, r2
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
  }

  return USBD_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f96:	8a3b      	ldrh	r3, [r7, #16]
 8007f98:	021b      	lsls	r3, r3, #8
 8007f9a:	b21a      	sxth	r2, r3
 8007f9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	b21b      	sxth	r3, r3
 8007fa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fa6:	89fb      	ldrh	r3, [r7, #14]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d005      	beq.n	8007fda <USBD_StdDevReq+0x26>
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d853      	bhi.n	800807a <USBD_StdDevReq+0xc6>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <USBD_StdDevReq+0x3a>
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d14f      	bne.n	800807a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
      break;
 8007fec:	e04a      	b.n	8008084 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2b09      	cmp	r3, #9
 8007ff4:	d83b      	bhi.n	800806e <USBD_StdDevReq+0xba>
 8007ff6:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <USBD_StdDevReq+0x48>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	08008051 	.word	0x08008051
 8008000:	08008065 	.word	0x08008065
 8008004:	0800806f 	.word	0x0800806f
 8008008:	0800805b 	.word	0x0800805b
 800800c:	0800806f 	.word	0x0800806f
 8008010:	0800802f 	.word	0x0800802f
 8008014:	08008025 	.word	0x08008025
 8008018:	0800806f 	.word	0x0800806f
 800801c:	08008047 	.word	0x08008047
 8008020:	08008039 	.word	0x08008039
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f9de 	bl	80083e8 <USBD_GetDescriptor>
          break;
 800802c:	e024      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb43 	bl	80086bc <USBD_SetAddress>
          break;
 8008036:	e01f      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fb82 	bl	8008744 <USBD_SetConfig>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
          break;
 8008044:	e018      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fc21 	bl	8008890 <USBD_GetConfig>
          break;
 800804e:	e013      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fc52 	bl	80088fc <USBD_GetStatus>
          break;
 8008058:	e00e      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc81 	bl	8008964 <USBD_SetFeature>
          break;
 8008062:	e009      	b.n	8008078 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fc90 	bl	800898c <USBD_ClrFeature>
          break;
 800806c:	e004      	b.n	8008078 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fce7 	bl	8008a44 <USBD_CtlError>
          break;
 8008076:	bf00      	nop
      }
      break;
 8008078:	e004      	b.n	8008084 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fce1 	bl	8008a44 <USBD_CtlError>
      break;
 8008082:	bf00      	nop
  }

  return ret;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop

08008090 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d005      	beq.n	80080b6 <USBD_StdItfReq+0x26>
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d82f      	bhi.n	800810e <USBD_StdItfReq+0x7e>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <USBD_StdItfReq+0x26>
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d12b      	bne.n	800810e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d81d      	bhi.n	8008100 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	889b      	ldrh	r3, [r3, #4]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d813      	bhi.n	80080f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	88db      	ldrh	r3, [r3, #6]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d110      	bne.n	800810a <USBD_StdItfReq+0x7a>
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10d      	bne.n	800810a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fd56 	bl	8008ba0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080f4:	e009      	b.n	800810a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fca3 	bl	8008a44 <USBD_CtlError>
          break;
 80080fe:	e004      	b.n	800810a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fc9e 	bl	8008a44 <USBD_CtlError>
          break;
 8008108:	e000      	b.n	800810c <USBD_StdItfReq+0x7c>
          break;
 800810a:	bf00      	nop
      }
      break;
 800810c:	e004      	b.n	8008118 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fc97 	bl	8008a44 <USBD_CtlError>
      break;
 8008116:	bf00      	nop
  }

  return ret;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	889b      	ldrh	r3, [r3, #4]
 8008134:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	d007      	beq.n	8008152 <USBD_StdEPReq+0x30>
 8008142:	2b40      	cmp	r3, #64	; 0x40
 8008144:	f200 8145 	bhi.w	80083d2 <USBD_StdEPReq+0x2b0>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00c      	beq.n	8008166 <USBD_StdEPReq+0x44>
 800814c:	2b20      	cmp	r3, #32
 800814e:	f040 8140 	bne.w	80083d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	4798      	blx	r3
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]
      break;
 8008164:	e13a      	b.n	80083dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	2b03      	cmp	r3, #3
 800816c:	d007      	beq.n	800817e <USBD_StdEPReq+0x5c>
 800816e:	2b03      	cmp	r3, #3
 8008170:	f300 8129 	bgt.w	80083c6 <USBD_StdEPReq+0x2a4>
 8008174:	2b00      	cmp	r3, #0
 8008176:	d07f      	beq.n	8008278 <USBD_StdEPReq+0x156>
 8008178:	2b01      	cmp	r3, #1
 800817a:	d03c      	beq.n	80081f6 <USBD_StdEPReq+0xd4>
 800817c:	e123      	b.n	80083c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d002      	beq.n	8008190 <USBD_StdEPReq+0x6e>
 800818a:	2b03      	cmp	r3, #3
 800818c:	d016      	beq.n	80081bc <USBD_StdEPReq+0x9a>
 800818e:	e02c      	b.n	80081ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00d      	beq.n	80081b2 <USBD_StdEPReq+0x90>
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b80      	cmp	r3, #128	; 0x80
 800819a:	d00a      	beq.n	80081b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fe0f 	bl	8009dc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081a6:	2180      	movs	r1, #128	; 0x80
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 fe0b 	bl	8009dc4 <USBD_LL_StallEP>
 80081ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081b0:	e020      	b.n	80081f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fc45 	bl	8008a44 <USBD_CtlError>
              break;
 80081ba:	e01b      	b.n	80081f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	885b      	ldrh	r3, [r3, #2]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10e      	bne.n	80081e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <USBD_StdEPReq+0xc0>
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b80      	cmp	r3, #128	; 0x80
 80081ce:	d008      	beq.n	80081e2 <USBD_StdEPReq+0xc0>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	88db      	ldrh	r3, [r3, #6]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fdf1 	bl	8009dc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fcdc 	bl	8008ba0 <USBD_CtlSendStatus>

              break;
 80081e8:	e004      	b.n	80081f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fc29 	bl	8008a44 <USBD_CtlError>
              break;
 80081f2:	bf00      	nop
          }
          break;
 80081f4:	e0ec      	b.n	80083d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d002      	beq.n	8008208 <USBD_StdEPReq+0xe6>
 8008202:	2b03      	cmp	r3, #3
 8008204:	d016      	beq.n	8008234 <USBD_StdEPReq+0x112>
 8008206:	e030      	b.n	800826a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00d      	beq.n	800822a <USBD_StdEPReq+0x108>
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	2b80      	cmp	r3, #128	; 0x80
 8008212:	d00a      	beq.n	800822a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 fdd3 	bl	8009dc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800821e:	2180      	movs	r1, #128	; 0x80
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 fdcf 	bl	8009dc4 <USBD_LL_StallEP>
 8008226:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008228:	e025      	b.n	8008276 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fc09 	bl	8008a44 <USBD_CtlError>
              break;
 8008232:	e020      	b.n	8008276 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	885b      	ldrh	r3, [r3, #2]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d11b      	bne.n	8008274 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 fdd9 	bl	8009e02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fca5 	bl	8008ba0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	4798      	blx	r3
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008268:	e004      	b.n	8008274 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fbe9 	bl	8008a44 <USBD_CtlError>
              break;
 8008272:	e000      	b.n	8008276 <USBD_StdEPReq+0x154>
              break;
 8008274:	bf00      	nop
          }
          break;
 8008276:	e0ab      	b.n	80083d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d002      	beq.n	800828a <USBD_StdEPReq+0x168>
 8008284:	2b03      	cmp	r3, #3
 8008286:	d032      	beq.n	80082ee <USBD_StdEPReq+0x1cc>
 8008288:	e097      	b.n	80083ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <USBD_StdEPReq+0x17e>
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d004      	beq.n	80082a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fbd3 	bl	8008a44 <USBD_CtlError>
                break;
 800829e:	e091      	b.n	80083c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	da0b      	bge.n	80082c0 <USBD_StdEPReq+0x19e>
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	3310      	adds	r3, #16
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	4413      	add	r3, r2
 80082bc:	3304      	adds	r3, #4
 80082be:	e00b      	b.n	80082d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4413      	add	r3, r2
 80082d6:	3304      	adds	r3, #4
 80082d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2202      	movs	r2, #2
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fc1d 	bl	8008b26 <USBD_CtlSendData>
              break;
 80082ec:	e06a      	b.n	80083c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da11      	bge.n	800831a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	f003 020f 	and.w	r2, r3, #15
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	3324      	adds	r3, #36	; 0x24
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d117      	bne.n	8008340 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fb96 	bl	8008a44 <USBD_CtlError>
                  break;
 8008318:	e054      	b.n	80083c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	f003 020f 	and.w	r2, r3, #15
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fb83 	bl	8008a44 <USBD_CtlError>
                  break;
 800833e:	e041      	b.n	80083c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008344:	2b00      	cmp	r3, #0
 8008346:	da0b      	bge.n	8008360 <USBD_StdEPReq+0x23e>
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	3310      	adds	r3, #16
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	4413      	add	r3, r2
 800835c:	3304      	adds	r3, #4
 800835e:	e00b      	b.n	8008378 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4413      	add	r3, r2
 8008376:	3304      	adds	r3, #4
 8008378:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <USBD_StdEPReq+0x264>
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b80      	cmp	r3, #128	; 0x80
 8008384:	d103      	bne.n	800838e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	e00e      	b.n	80083ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 fd54 	bl	8009e40 <USBD_LL_IsStallEP>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2201      	movs	r2, #1
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	e002      	b.n	80083ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2202      	movs	r2, #2
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fbb7 	bl	8008b26 <USBD_CtlSendData>
              break;
 80083b8:	e004      	b.n	80083c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fb41 	bl	8008a44 <USBD_CtlError>
              break;
 80083c2:	bf00      	nop
          }
          break;
 80083c4:	e004      	b.n	80083d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fb3b 	bl	8008a44 <USBD_CtlError>
          break;
 80083ce:	bf00      	nop
      }
      break;
 80083d0:	e004      	b.n	80083dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fb35 	bl	8008a44 <USBD_CtlError>
      break;
 80083da:	bf00      	nop
  }

  return ret;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	2b06      	cmp	r3, #6
 800840a:	f200 8128 	bhi.w	800865e <USBD_GetDescriptor+0x276>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <USBD_GetDescriptor+0x2c>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008431 	.word	0x08008431
 8008418:	08008449 	.word	0x08008449
 800841c:	08008489 	.word	0x08008489
 8008420:	0800865f 	.word	0x0800865f
 8008424:	0800865f 	.word	0x0800865f
 8008428:	080085ff 	.word	0x080085ff
 800842c:	0800862b 	.word	0x0800862b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	7c12      	ldrb	r2, [r2, #16]
 800843c:	f107 0108 	add.w	r1, r7, #8
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
 8008444:	60f8      	str	r0, [r7, #12]
      break;
 8008446:	e112      	b.n	800866e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7c1b      	ldrb	r3, [r3, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10d      	bne.n	800846c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008458:	f107 0208 	add.w	r2, r7, #8
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
 8008460:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3301      	adds	r3, #1
 8008466:	2202      	movs	r2, #2
 8008468:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800846a:	e100      	b.n	800866e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	f107 0208 	add.w	r2, r7, #8
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
 800847c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	2202      	movs	r2, #2
 8008484:	701a      	strb	r2, [r3, #0]
      break;
 8008486:	e0f2      	b.n	800866e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	885b      	ldrh	r3, [r3, #2]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b05      	cmp	r3, #5
 8008490:	f200 80ac 	bhi.w	80085ec <USBD_GetDescriptor+0x204>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <USBD_GetDescriptor+0xb4>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	080084b5 	.word	0x080084b5
 80084a0:	080084e9 	.word	0x080084e9
 80084a4:	0800851d 	.word	0x0800851d
 80084a8:	08008551 	.word	0x08008551
 80084ac:	08008585 	.word	0x08008585
 80084b0:	080085b9 	.word	0x080085b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	7c12      	ldrb	r2, [r2, #16]
 80084cc:	f107 0108 	add.w	r1, r7, #8
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
 80084d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084d6:	e091      	b.n	80085fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fab2 	bl	8008a44 <USBD_CtlError>
            err++;
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	3301      	adds	r3, #1
 80084e4:	72fb      	strb	r3, [r7, #11]
          break;
 80084e6:	e089      	b.n	80085fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	7c12      	ldrb	r2, [r2, #16]
 8008500:	f107 0108 	add.w	r1, r7, #8
 8008504:	4610      	mov	r0, r2
 8008506:	4798      	blx	r3
 8008508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800850a:	e077      	b.n	80085fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa98 	bl	8008a44 <USBD_CtlError>
            err++;
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	3301      	adds	r3, #1
 8008518:	72fb      	strb	r3, [r7, #11]
          break;
 800851a:	e06f      	b.n	80085fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	7c12      	ldrb	r2, [r2, #16]
 8008534:	f107 0108 	add.w	r1, r7, #8
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800853e:	e05d      	b.n	80085fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fa7e 	bl	8008a44 <USBD_CtlError>
            err++;
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	3301      	adds	r3, #1
 800854c:	72fb      	strb	r3, [r7, #11]
          break;
 800854e:	e055      	b.n	80085fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	7c12      	ldrb	r2, [r2, #16]
 8008568:	f107 0108 	add.w	r1, r7, #8
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
 8008570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008572:	e043      	b.n	80085fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa64 	bl	8008a44 <USBD_CtlError>
            err++;
 800857c:	7afb      	ldrb	r3, [r7, #11]
 800857e:	3301      	adds	r3, #1
 8008580:	72fb      	strb	r3, [r7, #11]
          break;
 8008582:	e03b      	b.n	80085fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a6:	e029      	b.n	80085fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa4a 	bl	8008a44 <USBD_CtlError>
            err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
          break;
 80085b6:	e021      	b.n	80085fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e00f      	b.n	80085fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa30 	bl	8008a44 <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e007      	b.n	80085fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fa28 	bl	8008a44 <USBD_CtlError>
          err++;
 80085f4:	7afb      	ldrb	r3, [r7, #11]
 80085f6:	3301      	adds	r3, #1
 80085f8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80085fa:	bf00      	nop
      }
      break;
 80085fc:	e037      	b.n	800866e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	7c1b      	ldrb	r3, [r3, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d109      	bne.n	800861a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860e:	f107 0208 	add.w	r2, r7, #8
 8008612:	4610      	mov	r0, r2
 8008614:	4798      	blx	r3
 8008616:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008618:	e029      	b.n	800866e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fa11 	bl	8008a44 <USBD_CtlError>
        err++;
 8008622:	7afb      	ldrb	r3, [r7, #11]
 8008624:	3301      	adds	r3, #1
 8008626:	72fb      	strb	r3, [r7, #11]
      break;
 8008628:	e021      	b.n	800866e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	7c1b      	ldrb	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10d      	bne.n	800864e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	f107 0208 	add.w	r2, r7, #8
 800863e:	4610      	mov	r0, r2
 8008640:	4798      	blx	r3
 8008642:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3301      	adds	r3, #1
 8008648:	2207      	movs	r2, #7
 800864a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800864c:	e00f      	b.n	800866e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f9f7 	bl	8008a44 <USBD_CtlError>
        err++;
 8008656:	7afb      	ldrb	r3, [r7, #11]
 8008658:	3301      	adds	r3, #1
 800865a:	72fb      	strb	r3, [r7, #11]
      break;
 800865c:	e007      	b.n	800866e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f9ef 	bl	8008a44 <USBD_CtlError>
      err++;
 8008666:	7afb      	ldrb	r3, [r7, #11]
 8008668:	3301      	adds	r3, #1
 800866a:	72fb      	strb	r3, [r7, #11]
      break;
 800866c:	bf00      	nop
  }

  if (err != 0U)
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d11e      	bne.n	80086b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	88db      	ldrh	r3, [r3, #6]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d016      	beq.n	80086aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800867c:	893b      	ldrh	r3, [r7, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00e      	beq.n	80086a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	88da      	ldrh	r2, [r3, #6]
 8008686:	893b      	ldrh	r3, [r7, #8]
 8008688:	4293      	cmp	r3, r2
 800868a:	bf28      	it	cs
 800868c:	4613      	movcs	r3, r2
 800868e:	b29b      	uxth	r3, r3
 8008690:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008692:	893b      	ldrh	r3, [r7, #8]
 8008694:	461a      	mov	r2, r3
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fa44 	bl	8008b26 <USBD_CtlSendData>
 800869e:	e009      	b.n	80086b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f9ce 	bl	8008a44 <USBD_CtlError>
 80086a8:	e004      	b.n	80086b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa78 	bl	8008ba0 <USBD_CtlSendStatus>
 80086b0:	e000      	b.n	80086b4 <USBD_GetDescriptor+0x2cc>
    return;
 80086b2:	bf00      	nop
  }
}
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop

080086bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	889b      	ldrh	r3, [r3, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d131      	bne.n	8008732 <USBD_SetAddress+0x76>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	88db      	ldrh	r3, [r3, #6]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d12d      	bne.n	8008732 <USBD_SetAddress+0x76>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	885b      	ldrh	r3, [r3, #2]
 80086da:	2b7f      	cmp	r3, #127	; 0x7f
 80086dc:	d829      	bhi.n	8008732 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	885b      	ldrh	r3, [r3, #2]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d104      	bne.n	8008700 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f9a3 	bl	8008a44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fe:	e01d      	b.n	800873c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7bfa      	ldrb	r2, [r7, #15]
 8008704:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 fbc3 	bl	8009e98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa44 	bl	8008ba0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d004      	beq.n	8008728 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2202      	movs	r2, #2
 8008722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008726:	e009      	b.n	800873c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008730:	e004      	b.n	800873c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f985 	bl	8008a44 <USBD_CtlError>
  }
}
 800873a:	bf00      	nop
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	885b      	ldrh	r3, [r3, #2]
 8008756:	b2da      	uxtb	r2, r3
 8008758:	4b4c      	ldr	r3, [pc, #304]	; (800888c <USBD_SetConfig+0x148>)
 800875a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800875c:	4b4b      	ldr	r3, [pc, #300]	; (800888c <USBD_SetConfig+0x148>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d905      	bls.n	8008770 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f96c 	bl	8008a44 <USBD_CtlError>
    return USBD_FAIL;
 800876c:	2303      	movs	r3, #3
 800876e:	e088      	b.n	8008882 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d002      	beq.n	8008782 <USBD_SetConfig+0x3e>
 800877c:	2b03      	cmp	r3, #3
 800877e:	d025      	beq.n	80087cc <USBD_SetConfig+0x88>
 8008780:	e071      	b.n	8008866 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008782:	4b42      	ldr	r3, [pc, #264]	; (800888c <USBD_SetConfig+0x148>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01c      	beq.n	80087c4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800878a:	4b40      	ldr	r3, [pc, #256]	; (800888c <USBD_SetConfig+0x148>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008794:	4b3d      	ldr	r3, [pc, #244]	; (800888c <USBD_SetConfig+0x148>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7ff f949 	bl	8007a32 <USBD_SetClassConfig>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f949 	bl	8008a44 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087b2:	e065      	b.n	8008880 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9f3 	bl	8008ba0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2203      	movs	r2, #3
 80087be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087c2:	e05d      	b.n	8008880 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f9eb 	bl	8008ba0 <USBD_CtlSendStatus>
      break;
 80087ca:	e059      	b.n	8008880 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087cc:	4b2f      	ldr	r3, [pc, #188]	; (800888c <USBD_SetConfig+0x148>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d112      	bne.n	80087fa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80087dc:	4b2b      	ldr	r3, [pc, #172]	; (800888c <USBD_SetConfig+0x148>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087e6:	4b29      	ldr	r3, [pc, #164]	; (800888c <USBD_SetConfig+0x148>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff f93c 	bl	8007a6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f9d4 	bl	8008ba0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087f8:	e042      	b.n	8008880 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80087fa:	4b24      	ldr	r3, [pc, #144]	; (800888c <USBD_SetConfig+0x148>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d02a      	beq.n	800885e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff f92a 	bl	8007a6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008816:	4b1d      	ldr	r3, [pc, #116]	; (800888c <USBD_SetConfig+0x148>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008820:	4b1a      	ldr	r3, [pc, #104]	; (800888c <USBD_SetConfig+0x148>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff f903 	bl	8007a32 <USBD_SetClassConfig>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00f      	beq.n	8008856 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f903 	bl	8008a44 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	4619      	mov	r1, r3
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7ff f90f 	bl	8007a6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008854:	e014      	b.n	8008880 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f9a2 	bl	8008ba0 <USBD_CtlSendStatus>
      break;
 800885c:	e010      	b.n	8008880 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f99e 	bl	8008ba0 <USBD_CtlSendStatus>
      break;
 8008864:	e00c      	b.n	8008880 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f8eb 	bl	8008a44 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800886e:	4b07      	ldr	r3, [pc, #28]	; (800888c <USBD_SetConfig+0x148>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff f8f8 	bl	8007a6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800887a:	2303      	movs	r3, #3
 800887c:	73fb      	strb	r3, [r7, #15]
      break;
 800887e:	bf00      	nop
  }

  return ret;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	200002a8 	.word	0x200002a8

08008890 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d004      	beq.n	80088ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f8cd 	bl	8008a44 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088aa:	e023      	b.n	80088f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	dc02      	bgt.n	80088be <USBD_GetConfig+0x2e>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dc03      	bgt.n	80088c4 <USBD_GetConfig+0x34>
 80088bc:	e015      	b.n	80088ea <USBD_GetConfig+0x5a>
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d00b      	beq.n	80088da <USBD_GetConfig+0x4a>
 80088c2:	e012      	b.n	80088ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3308      	adds	r3, #8
 80088ce:	2201      	movs	r2, #1
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f927 	bl	8008b26 <USBD_CtlSendData>
        break;
 80088d8:	e00c      	b.n	80088f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3304      	adds	r3, #4
 80088de:	2201      	movs	r2, #1
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f91f 	bl	8008b26 <USBD_CtlSendData>
        break;
 80088e8:	e004      	b.n	80088f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f8a9 	bl	8008a44 <USBD_CtlError>
        break;
 80088f2:	bf00      	nop
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890c:	b2db      	uxtb	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	2b02      	cmp	r3, #2
 8008912:	d81e      	bhi.n	8008952 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	88db      	ldrh	r3, [r3, #6]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d004      	beq.n	8008926 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f890 	bl	8008a44 <USBD_CtlError>
        break;
 8008924:	e01a      	b.n	800895c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	f043 0202 	orr.w	r2, r3, #2
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	330c      	adds	r3, #12
 8008946:	2202      	movs	r2, #2
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f8eb 	bl	8008b26 <USBD_CtlSendData>
      break;
 8008950:	e004      	b.n	800895c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f875 	bl	8008a44 <USBD_CtlError>
      break;
 800895a:	bf00      	nop
  }
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	885b      	ldrh	r3, [r3, #2]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d106      	bne.n	8008984 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f90e 	bl	8008ba0 <USBD_CtlSendStatus>
  }
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899c:	b2db      	uxtb	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d80b      	bhi.n	80089bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	885b      	ldrh	r3, [r3, #2]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d10c      	bne.n	80089c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f8f3 	bl	8008ba0 <USBD_CtlSendStatus>
      }
      break;
 80089ba:	e004      	b.n	80089c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f840 	bl	8008a44 <USBD_CtlError>
      break;
 80089c4:	e000      	b.n	80089c8 <USBD_ClrFeature+0x3c>
      break;
 80089c6:	bf00      	nop
  }
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	781a      	ldrb	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3301      	adds	r3, #1
 80089ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff fabc 	bl	8007f78 <SWAPBYTE>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3301      	adds	r3, #1
 8008a12:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f7ff faaf 	bl	8007f78 <SWAPBYTE>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3301      	adds	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f7ff faa2 	bl	8007f78 <SWAPBYTE>
 8008a34:	4603      	mov	r3, r0
 8008a36:	461a      	mov	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	80da      	strh	r2, [r3, #6]
}
 8008a3c:	bf00      	nop
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a4e:	2180      	movs	r1, #128	; 0x80
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 f9b7 	bl	8009dc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a56:	2100      	movs	r1, #0
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 f9b3 	bl	8009dc4 <USBD_LL_StallEP>
}
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b086      	sub	sp, #24
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d036      	beq.n	8008aea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a80:	6938      	ldr	r0, [r7, #16]
 8008a82:	f000 f836 	bl	8008af2 <USBD_GetLen>
 8008a86:	4603      	mov	r3, r0
 8008a88:	3301      	adds	r3, #1
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	4413      	add	r3, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	7812      	ldrb	r2, [r2, #0]
 8008a9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	4413      	add	r3, r2
 8008aac:	2203      	movs	r2, #3
 8008aae:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ab6:	e013      	b.n	8008ae0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	4413      	add	r3, r2
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	7812      	ldrb	r2, [r2, #0]
 8008ac2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	613b      	str	r3, [r7, #16]
    idx++;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	3301      	adds	r3, #1
 8008ace:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
 8008adc:	3301      	adds	r3, #1
 8008ade:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e7      	bne.n	8008ab8 <USBD_GetString+0x52>
 8008ae8:	e000      	b.n	8008aec <USBD_GetString+0x86>
    return;
 8008aea:	bf00      	nop
  }
}
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b085      	sub	sp, #20
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b02:	e005      	b.n	8008b10 <USBD_GetLen+0x1e>
  {
    len++;
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	3301      	adds	r3, #1
 8008b08:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1f5      	bne.n	8008b04 <USBD_GetLen+0x12>
  }

  return len;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	60f8      	str	r0, [r7, #12]
 8008b2e:	60b9      	str	r1, [r7, #8]
 8008b30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2202      	movs	r2, #2
 8008b36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f001 f9c2 	bl	8009ed6 <USBD_LL_Transmit>

  return USBD_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f001 f9b1 	bl	8009ed6 <USBD_LL_Transmit>

  return USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	60f8      	str	r0, [r7, #12]
 8008b86:	60b9      	str	r1, [r7, #8]
 8008b88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	2100      	movs	r1, #0
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f001 f9c1 	bl	8009f18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2204      	movs	r2, #4
 8008bac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 f98d 	bl	8009ed6 <USBD_LL_Transmit>

  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2205      	movs	r2, #5
 8008bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2100      	movs	r1, #0
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f99b 	bl	8009f18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af04      	add	r7, sp, #16
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8008bf8:	230a      	movs	r3, #10
 8008bfa:	9302      	str	r3, [sp, #8]
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	1cfb      	adds	r3, r7, #3
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	2301      	movs	r3, #1
 8008c06:	2200      	movs	r2, #0
 8008c08:	2178      	movs	r1, #120	; 0x78
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7fa ff46 	bl	8003a9c <HAL_I2C_Mem_Write>
 8008c10:	4603      	mov	r3, r0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, Knob *k) {
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
    // Wait for the screen to boot
    HAL_Delay(100);
 8008c26:	2064      	movs	r0, #100	; 0x64
 8008c28:	f7f9 f960 	bl	8001eec <HAL_Delay>
    int status = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(hi2c, k);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fbc4 	bl	80093c0 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8008c38:	21ae      	movs	r1, #174	; 0xae
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff ffd6 	bl	8008bec <ssd1306_WriteCommand>
 8008c40:	4603      	mov	r3, r0
 8008c42:	461a      	mov	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8008c4a:	2120      	movs	r1, #32
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff ffcd 	bl	8008bec <ssd1306_WriteCommand>
 8008c52:	4603      	mov	r3, r0
 8008c54:	461a      	mov	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4413      	add	r3, r2
 8008c5a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10); // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8008c5c:	2110      	movs	r1, #16
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff ffc4 	bl	8008bec <ssd1306_WriteCommand>
 8008c64:	4603      	mov	r3, r0
 8008c66:	461a      	mov	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8008c6e:	21b0      	movs	r1, #176	; 0xb0
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff ffbb 	bl	8008bec <ssd1306_WriteCommand>
 8008c76:	4603      	mov	r3, r0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8008c80:	21c8      	movs	r1, #200	; 0xc8
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff ffb2 	bl	8008bec <ssd1306_WriteCommand>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8008c92:	2100      	movs	r1, #0
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff ffa9 	bl	8008bec <ssd1306_WriteCommand>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8008ca4:	2110      	movs	r1, #16
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff ffa0 	bl	8008bec <ssd1306_WriteCommand>
 8008cac:	4603      	mov	r3, r0
 8008cae:	461a      	mov	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8008cb6:	2140      	movs	r1, #64	; 0x40
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff ff97 	bl	8008bec <ssd1306_WriteCommand>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8008cc8:	2181      	movs	r1, #129	; 0x81
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff ff8e 	bl	8008bec <ssd1306_WriteCommand>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 8008cda:	2140      	movs	r1, #64	; 0x40
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff ff85 	bl	8008bec <ssd1306_WriteCommand>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4413      	add	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8008cec:	21a1      	movs	r1, #161	; 0xa1
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff ff7c 	bl	8008bec <ssd1306_WriteCommand>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8008cfe:	21a6      	movs	r1, #166	; 0xa6
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff ff73 	bl	8008bec <ssd1306_WriteCommand>
 8008d06:	4603      	mov	r3, r0
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8008d10:	21a8      	movs	r1, #168	; 0xa8
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff ff6a 	bl	8008bec <ssd1306_WriteCommand>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8008d22:	213f      	movs	r1, #63	; 0x3f
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff ff61 	bl	8008bec <ssd1306_WriteCommand>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	4413      	add	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008d34:	21a4      	movs	r1, #164	; 0xa4
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff ff58 	bl	8008bec <ssd1306_WriteCommand>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	461a      	mov	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8008d46:	21d3      	movs	r1, #211	; 0xd3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff ff4f 	bl	8008bec <ssd1306_WriteCommand>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8008d58:	2100      	movs	r1, #0
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff ff46 	bl	8008bec <ssd1306_WriteCommand>
 8008d60:	4603      	mov	r3, r0
 8008d62:	461a      	mov	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8008d6a:	21d5      	movs	r1, #213	; 0xd5
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff ff3d 	bl	8008bec <ssd1306_WriteCommand>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8008d7c:	21f0      	movs	r1, #240	; 0xf0
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff ff34 	bl	8008bec <ssd1306_WriteCommand>
 8008d84:	4603      	mov	r3, r0
 8008d86:	461a      	mov	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8008d8e:	21d9      	movs	r1, #217	; 0xd9
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff ff2b 	bl	8008bec <ssd1306_WriteCommand>
 8008d96:	4603      	mov	r3, r0
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8008da0:	2122      	movs	r1, #34	; 0x22
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff ff22 	bl	8008bec <ssd1306_WriteCommand>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8008db2:	21da      	movs	r1, #218	; 0xda
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff ff19 	bl	8008bec <ssd1306_WriteCommand>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8008dc4:	2112      	movs	r1, #18
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ff10 	bl	8008bec <ssd1306_WriteCommand>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8008dd6:	21db      	movs	r1, #219	; 0xdb
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff ff07 	bl	8008bec <ssd1306_WriteCommand>
 8008dde:	4603      	mov	r3, r0
 8008de0:	461a      	mov	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	4413      	add	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8008de8:	2120      	movs	r1, #32
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff fefe 	bl	8008bec <ssd1306_WriteCommand>
 8008df0:	4603      	mov	r3, r0
 8008df2:	461a      	mov	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8008dfa:	218d      	movs	r1, #141	; 0x8d
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7ff fef5 	bl	8008bec <ssd1306_WriteCommand>
 8008e02:	4603      	mov	r3, r0
 8008e04:	461a      	mov	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8008e0c:	2114      	movs	r1, #20
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff feec 	bl	8008bec <ssd1306_WriteCommand>
 8008e14:	4603      	mov	r3, r0
 8008e16:	461a      	mov	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8008e1e:	21af      	movs	r1, #175	; 0xaf
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff fee3 	bl	8008bec <ssd1306_WriteCommand>
 8008e26:	4603      	mov	r3, r0
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <ssd1306_Init+0x21e>
        return 1;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e00f      	b.n	8008e5a <ssd1306_Init+0x23e>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	f000 f814 	bl	8008e68 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f835 	bl	8008eb0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8008e46:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <ssd1306_Init+0x248>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008e4c:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <ssd1306_Init+0x248>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8008e52:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <ssd1306_Init+0x248>)
 8008e54:	2201      	movs	r2, #1
 8008e56:	715a      	strb	r2, [r3, #5]

    return 0;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200006ac 	.word	0x200006ac

08008e68 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008e72:	2300      	movs	r3, #0
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	e00d      	b.n	8008e94 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <ssd1306_Fill+0x1a>
 8008e7e:	2100      	movs	r1, #0
 8008e80:	e000      	b.n	8008e84 <ssd1306_Fill+0x1c>
 8008e82:	21ff      	movs	r1, #255	; 0xff
 8008e84:	4a09      	ldr	r2, [pc, #36]	; (8008eac <ssd1306_Fill+0x44>)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	460a      	mov	r2, r1
 8008e8c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e9a:	d3ed      	bcc.n	8008e78 <ssd1306_Fill+0x10>
    }
}
 8008e9c:	bf00      	nop
 8008e9e:	bf00      	nop
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	200002ac 	.word	0x200002ac

08008eb0 <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af04      	add	r7, sp, #16
 8008eb6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73fb      	strb	r3, [r7, #15]
 8008ebc:	e020      	b.n	8008f00 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	3b50      	subs	r3, #80	; 0x50
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7ff fe90 	bl	8008bec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8008ecc:	2100      	movs	r1, #0
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff fe8c 	bl	8008bec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8008ed4:	2110      	movs	r1, #16
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7ff fe88 	bl	8008bec <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	01db      	lsls	r3, r3, #7
 8008ee0:	4a0b      	ldr	r2, [pc, #44]	; (8008f10 <ssd1306_UpdateScreen+0x60>)
 8008ee2:	4413      	add	r3, r2
 8008ee4:	2264      	movs	r2, #100	; 0x64
 8008ee6:	9202      	str	r2, [sp, #8]
 8008ee8:	2280      	movs	r2, #128	; 0x80
 8008eea:	9201      	str	r2, [sp, #4]
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	2301      	movs	r3, #1
 8008ef0:	2240      	movs	r2, #64	; 0x40
 8008ef2:	2178      	movs	r1, #120	; 0x78
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f7fa fdd1 	bl	8003a9c <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	3301      	adds	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	2b07      	cmp	r3, #7
 8008f04:	d9db      	bls.n	8008ebe <ssd1306_UpdateScreen+0xe>
    }
}
 8008f06:	bf00      	nop
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	200002ac 	.word	0x200002ac

08008f14 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob *k) {
 8008f14:	b590      	push	{r4, r7, lr}
 8008f16:	b08b      	sub	sp, #44	; 0x2c
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
    ssd1306_Select(hi2c, k);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fa4d 	bl	80093c0 <ssd1306_Select>
    ssd1306_Fill(Black);
 8008f26:	2000      	movs	r0, #0
 8008f28:	f7ff ff9e 	bl	8008e68 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8008f2c:	4b90      	ldr	r3, [pc, #576]	; (8009170 <ssd1306_WriteKnob+0x25c>)
 8008f2e:	f107 040c 	add.w	r4, r7, #12
 8008f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel + 1);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f3e:	3301      	adds	r3, #1
 8008f40:	f107 0020 	add.w	r0, r7, #32
 8008f44:	4a8b      	ldr	r2, [pc, #556]	; (8009174 <ssd1306_WriteKnob+0x260>)
 8008f46:	2103      	movs	r1, #3
 8008f48:	f001 f9be 	bl	800a2c8 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008f52:	f107 001c 	add.w	r0, r7, #28
 8008f56:	4a88      	ldr	r2, [pc, #544]	; (8009178 <ssd1306_WriteKnob+0x264>)
 8008f58:	2104      	movs	r1, #4
 8008f5a:	f001 f9b5 	bl	800a2c8 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) KnobMap(k, k->value, k->max_range));
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	6838      	ldr	r0, [r7, #0]
 8008f6e:	f7f7 ffd1 	bl	8000f14 <KnobMap>
 8008f72:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8008f74:	f107 0008 	add.w	r0, r7, #8
 8008f78:	4a7f      	ldr	r2, [pc, #508]	; (8009178 <ssd1306_WriteKnob+0x264>)
 8008f7a:	2104      	movs	r1, #4
 8008f7c:	f001 f9a4 	bl	800a2c8 <sniprintf>
    update_init_indicator(k, init_indicator_string);
 8008f80:	f107 030c 	add.w	r3, r7, #12
 8008f84:	4619      	mov	r1, r3
 8008f86:	6838      	ldr	r0, [r7, #0]
 8008f88:	f000 fa52 	bl	8009430 <update_init_indicator>

    ssd1306_SetCursor(0, 0);
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	2000      	movs	r0, #0
 8008f90:	f000 f9fe 	bl	8009390 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8008f94:	4a79      	ldr	r2, [pc, #484]	; (800917c <ssd1306_WriteKnob+0x268>)
 8008f96:	f107 0020 	add.w	r0, r7, #32
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	ca06      	ldmia	r2, {r1, r2}
 8008f9e:	f000 f9d1 	bl	8009344 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 8);
 8008fa2:	2108      	movs	r1, #8
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	f000 f9f3 	bl	8009390 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8008faa:	4a74      	ldr	r2, [pc, #464]	; (800917c <ssd1306_WriteKnob+0x268>)
 8008fac:	f107 001c 	add.w	r0, r7, #28
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	ca06      	ldmia	r2, {r1, r2}
 8008fb4:	f000 f9c6 	bl	8009344 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, 4);
 8008fb8:	f107 030c 	add.w	r3, r7, #12
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7f7 f90f 	bl	80001e0 <strlen>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	4a6d      	ldr	r2, [pc, #436]	; (800917c <ssd1306_WriteKnob+0x268>)
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	fb02 f303 	mul.w	r3, r2, r3
 8008fcc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8008fd0:	085b      	lsrs	r3, r3, #1
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2104      	movs	r1, #4
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f9da 	bl	8009390 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8008fdc:	4a67      	ldr	r2, [pc, #412]	; (800917c <ssd1306_WriteKnob+0x268>)
 8008fde:	f107 000c 	add.w	r0, r7, #12
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	ca06      	ldmia	r2, {r1, r2}
 8008fe6:	f000 f9ad 	bl	8009344 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, 4);
 8008fea:	4b64      	ldr	r3, [pc, #400]	; (800917c <ssd1306_WriteKnob+0x268>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	f1c3 0320 	rsb	r3, r3, #32
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2104      	movs	r1, #4
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 f9c6 	bl	8009390 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8009004:	4a5d      	ldr	r2, [pc, #372]	; (800917c <ssd1306_WriteKnob+0x268>)
 8009006:	f107 0008 	add.w	r0, r7, #8
 800900a:	2301      	movs	r3, #1
 800900c:	ca06      	ldmia	r2, {r1, r2}
 800900e:	f000 f999 	bl	8009344 <ssd1306_WriteString>

    uint8_t len_label = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t x = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Draw main label
    len_label = strlen(k->label);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	3303      	adds	r3, #3
 8009022:	4618      	mov	r0, r3
 8009024:	f7f7 f8dc 	bl	80001e0 <strlen>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 800902e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009032:	4a53      	ldr	r2, [pc, #332]	; (8009180 <ssd1306_WriteKnob+0x26c>)
 8009034:	7812      	ldrb	r2, [r2, #0]
 8009036:	fb02 f303 	mul.w	r3, r2, r3
 800903a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800903e:	0fda      	lsrs	r2, r3, #31
 8009040:	4413      	add	r3, r2
 8009042:	105b      	asrs	r3, r3, #1
 8009044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (len_label % 2 != 0) x += 5;
 8009048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d004      	beq.n	8009060 <ssd1306_WriteKnob+0x14c>
 8009056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800905a:	3305      	adds	r3, #5
 800905c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ssd1306_SetCursor(x, 16);
 8009060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009064:	2110      	movs	r1, #16
 8009066:	4618      	mov	r0, r3
 8009068:	f000 f992 	bl	8009390 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	1cd8      	adds	r0, r3, #3
 8009070:	4a43      	ldr	r2, [pc, #268]	; (8009180 <ssd1306_WriteKnob+0x26c>)
 8009072:	2301      	movs	r3, #1
 8009074:	ca06      	ldmia	r2, {r1, r2}
 8009076:	f000 f965 	bl	8009344 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    if (k->max_values < 127) {
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009080:	2b7e      	cmp	r3, #126	; 0x7e
 8009082:	d83e      	bhi.n	8009102 <ssd1306_WriteKnob+0x1ee>
        len_label = strlen(k->sub_labels[k->value]);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800908e:	4619      	mov	r1, r3
 8009090:	460b      	mov	r3, r1
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	1a5b      	subs	r3, r3, r1
 8009096:	4413      	add	r3, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7f7 f8a1 	bl	80001e0 <strlen>
 800909e:	4603      	mov	r3, r0
 80090a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 80090a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090a8:	4a35      	ldr	r2, [pc, #212]	; (8009180 <ssd1306_WriteKnob+0x26c>)
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	fb02 f303 	mul.w	r3, r2, r3
 80090b0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80090b4:	0fda      	lsrs	r2, r3, #31
 80090b6:	4413      	add	r3, r2
 80090b8:	105b      	asrs	r3, r3, #1
 80090ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len_label % 2 != 0) x += 5;
 80090be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d004      	beq.n	80090d6 <ssd1306_WriteKnob+0x1c2>
 80090cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090d0:	3305      	adds	r3, #5
 80090d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ssd1306_SetCursor(x, 40);
 80090d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090da:	2128      	movs	r1, #40	; 0x28
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 f957 	bl	8009390 <ssd1306_SetCursor>
        ssd1306_WriteString(k->sub_labels[k->value], Font_10x18, White);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80090ec:	4619      	mov	r1, r3
 80090ee:	460b      	mov	r3, r1
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	1a5b      	subs	r3, r3, r1
 80090f4:	18d0      	adds	r0, r2, r3
 80090f6:	4a22      	ldr	r2, [pc, #136]	; (8009180 <ssd1306_WriteKnob+0x26c>)
 80090f8:	2301      	movs	r3, #1
 80090fa:	ca06      	ldmia	r2, {r1, r2}
 80090fc:	f000 f922 	bl	8009344 <ssd1306_WriteString>
 8009100:	e02e      	b.n	8009160 <ssd1306_WriteKnob+0x24c>
    } else {
        // Full-range value - draw single sub-label
        len_label = strlen(k->sub_label);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	3312      	adds	r3, #18
 8009106:	4618      	mov	r0, r3
 8009108:	f7f7 f86a 	bl	80001e0 <strlen>
 800910c:	4603      	mov	r3, r0
 800910e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8009112:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009116:	4a1a      	ldr	r2, [pc, #104]	; (8009180 <ssd1306_WriteKnob+0x26c>)
 8009118:	7812      	ldrb	r2, [r2, #0]
 800911a:	fb02 f303 	mul.w	r3, r2, r3
 800911e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009122:	0fda      	lsrs	r2, r3, #31
 8009124:	4413      	add	r3, r2
 8009126:	105b      	asrs	r3, r3, #1
 8009128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len_label % 2 != 0) x += 5;
 800912c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d004      	beq.n	8009144 <ssd1306_WriteKnob+0x230>
 800913a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800913e:	3305      	adds	r3, #5
 8009140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ssd1306_SetCursor(x, 40);
 8009144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009148:	2128      	movs	r1, #40	; 0x28
 800914a:	4618      	mov	r0, r3
 800914c:	f000 f920 	bl	8009390 <ssd1306_SetCursor>
        ssd1306_WriteString(k->sub_label, Font_10x18, White);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	f103 0012 	add.w	r0, r3, #18
 8009156:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <ssd1306_WriteKnob+0x26c>)
 8009158:	2301      	movs	r3, #1
 800915a:	ca06      	ldmia	r2, {r1, r2}
 800915c:	f000 f8f2 	bl	8009344 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen(hi2c);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff fea5 	bl	8008eb0 <ssd1306_UpdateScreen>
}
 8009166:	bf00      	nop
 8009168:	372c      	adds	r7, #44	; 0x2c
 800916a:	46bd      	mov	sp, r7
 800916c:	bd90      	pop	{r4, r7, pc}
 800916e:	bf00      	nop
 8009170:	0800b204 	.word	0x0800b204
 8009174:	0800b1f4 	.word	0x0800b1f4
 8009178:	0800b1fc 	.word	0x0800b1fc
 800917c:	200000b8 	.word	0x200000b8
 8009180:	200000c0 	.word	0x200000c0

08009184 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
 800918e:	460b      	mov	r3, r1
 8009190:	71bb      	strb	r3, [r7, #6]
 8009192:	4613      	mov	r3, r2
 8009194:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8009196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800919a:	2b00      	cmp	r3, #0
 800919c:	db48      	blt.n	8009230 <ssd1306_DrawPixel+0xac>
 800919e:	79bb      	ldrb	r3, [r7, #6]
 80091a0:	2b3f      	cmp	r3, #63	; 0x3f
 80091a2:	d845      	bhi.n	8009230 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 80091a4:	4b25      	ldr	r3, [pc, #148]	; (800923c <ssd1306_DrawPixel+0xb8>)
 80091a6:	791b      	ldrb	r3, [r3, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d006      	beq.n	80091ba <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 80091ac:	797b      	ldrb	r3, [r7, #5]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	bf0c      	ite	eq
 80091b2:	2301      	moveq	r3, #1
 80091b4:	2300      	movne	r3, #0
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 80091ba:	797b      	ldrb	r3, [r7, #5]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d11a      	bne.n	80091f6 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80091c0:	79fa      	ldrb	r2, [r7, #7]
 80091c2:	79bb      	ldrb	r3, [r7, #6]
 80091c4:	08db      	lsrs	r3, r3, #3
 80091c6:	b2d8      	uxtb	r0, r3
 80091c8:	4603      	mov	r3, r0
 80091ca:	01db      	lsls	r3, r3, #7
 80091cc:	4413      	add	r3, r2
 80091ce:	4a1c      	ldr	r2, [pc, #112]	; (8009240 <ssd1306_DrawPixel+0xbc>)
 80091d0:	5cd3      	ldrb	r3, [r2, r3]
 80091d2:	b25a      	sxtb	r2, r3
 80091d4:	79bb      	ldrb	r3, [r7, #6]
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	2101      	movs	r1, #1
 80091dc:	fa01 f303 	lsl.w	r3, r1, r3
 80091e0:	b25b      	sxtb	r3, r3
 80091e2:	4313      	orrs	r3, r2
 80091e4:	b259      	sxtb	r1, r3
 80091e6:	79fa      	ldrb	r2, [r7, #7]
 80091e8:	4603      	mov	r3, r0
 80091ea:	01db      	lsls	r3, r3, #7
 80091ec:	4413      	add	r3, r2
 80091ee:	b2c9      	uxtb	r1, r1
 80091f0:	4a13      	ldr	r2, [pc, #76]	; (8009240 <ssd1306_DrawPixel+0xbc>)
 80091f2:	54d1      	strb	r1, [r2, r3]
 80091f4:	e01d      	b.n	8009232 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80091f6:	79fa      	ldrb	r2, [r7, #7]
 80091f8:	79bb      	ldrb	r3, [r7, #6]
 80091fa:	08db      	lsrs	r3, r3, #3
 80091fc:	b2d8      	uxtb	r0, r3
 80091fe:	4603      	mov	r3, r0
 8009200:	01db      	lsls	r3, r3, #7
 8009202:	4413      	add	r3, r2
 8009204:	4a0e      	ldr	r2, [pc, #56]	; (8009240 <ssd1306_DrawPixel+0xbc>)
 8009206:	5cd3      	ldrb	r3, [r2, r3]
 8009208:	b25a      	sxtb	r2, r3
 800920a:	79bb      	ldrb	r3, [r7, #6]
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	2101      	movs	r1, #1
 8009212:	fa01 f303 	lsl.w	r3, r1, r3
 8009216:	b25b      	sxtb	r3, r3
 8009218:	43db      	mvns	r3, r3
 800921a:	b25b      	sxtb	r3, r3
 800921c:	4013      	ands	r3, r2
 800921e:	b259      	sxtb	r1, r3
 8009220:	79fa      	ldrb	r2, [r7, #7]
 8009222:	4603      	mov	r3, r0
 8009224:	01db      	lsls	r3, r3, #7
 8009226:	4413      	add	r3, r2
 8009228:	b2c9      	uxtb	r1, r1
 800922a:	4a05      	ldr	r2, [pc, #20]	; (8009240 <ssd1306_DrawPixel+0xbc>)
 800922c:	54d1      	strb	r1, [r2, r3]
 800922e:	e000      	b.n	8009232 <ssd1306_DrawPixel+0xae>
        return;
 8009230:	bf00      	nop
    }
}
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	200006ac 	.word	0x200006ac
 8009240:	200002ac 	.word	0x200002ac

08009244 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8009244:	b590      	push	{r4, r7, lr}
 8009246:	b089      	sub	sp, #36	; 0x24
 8009248:	af00      	add	r7, sp, #0
 800924a:	4604      	mov	r4, r0
 800924c:	1d38      	adds	r0, r7, #4
 800924e:	e880 0006 	stmia.w	r0, {r1, r2}
 8009252:	461a      	mov	r2, r3
 8009254:	4623      	mov	r3, r4
 8009256:	73fb      	strb	r3, [r7, #15]
 8009258:	4613      	mov	r3, r2
 800925a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800925c:	4b38      	ldr	r3, [pc, #224]	; (8009340 <ssd1306_WriteChar+0xfc>)
 800925e:	881b      	ldrh	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	793b      	ldrb	r3, [r7, #4]
 8009264:	4413      	add	r3, r2
 8009266:	2b7f      	cmp	r3, #127	; 0x7f
 8009268:	dc06      	bgt.n	8009278 <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 800926a:	4b35      	ldr	r3, [pc, #212]	; (8009340 <ssd1306_WriteChar+0xfc>)
 800926c:	885b      	ldrh	r3, [r3, #2]
 800926e:	461a      	mov	r2, r3
 8009270:	797b      	ldrb	r3, [r7, #5]
 8009272:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8009274:	2b3f      	cmp	r3, #63	; 0x3f
 8009276:	dd01      	ble.n	800927c <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8009278:	2300      	movs	r3, #0
 800927a:	e05d      	b.n	8009338 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]
 8009280:	e04c      	b.n	800931c <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	3b20      	subs	r3, #32
 8009288:	7979      	ldrb	r1, [r7, #5]
 800928a:	fb01 f303 	mul.w	r3, r1, r3
 800928e:	4619      	mov	r1, r3
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	440b      	add	r3, r1
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	4413      	add	r3, r2
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 800929c:	2300      	movs	r3, #0
 800929e:	61bb      	str	r3, [r7, #24]
 80092a0:	e034      	b.n	800930c <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	fa02 f303 	lsl.w	r3, r2, r3
 80092aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d012      	beq.n	80092d8 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80092b2:	4b23      	ldr	r3, [pc, #140]	; (8009340 <ssd1306_WriteChar+0xfc>)
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	4413      	add	r3, r2
 80092be:	b2d8      	uxtb	r0, r3
 80092c0:	4b1f      	ldr	r3, [pc, #124]	; (8009340 <ssd1306_WriteChar+0xfc>)
 80092c2:	885b      	ldrh	r3, [r3, #2]
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	4413      	add	r3, r2
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	7bba      	ldrb	r2, [r7, #14]
 80092d0:	4619      	mov	r1, r3
 80092d2:	f7ff ff57 	bl	8009184 <ssd1306_DrawPixel>
 80092d6:	e016      	b.n	8009306 <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 80092d8:	4b19      	ldr	r3, [pc, #100]	; (8009340 <ssd1306_WriteChar+0xfc>)
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	4413      	add	r3, r2
 80092e4:	b2d8      	uxtb	r0, r3
 80092e6:	4b16      	ldr	r3, [pc, #88]	; (8009340 <ssd1306_WriteChar+0xfc>)
 80092e8:	885b      	ldrh	r3, [r3, #2]
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	4413      	add	r3, r2
 80092f2:	b2d9      	uxtb	r1, r3
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	bf0c      	ite	eq
 80092fa:	2301      	moveq	r3, #1
 80092fc:	2300      	movne	r3, #0
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	461a      	mov	r2, r3
 8009302:	f7ff ff3f 	bl	8009184 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	3301      	adds	r3, #1
 800930a:	61bb      	str	r3, [r7, #24]
 800930c:	793b      	ldrb	r3, [r7, #4]
 800930e:	461a      	mov	r2, r3
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	4293      	cmp	r3, r2
 8009314:	d3c5      	bcc.n	80092a2 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	3301      	adds	r3, #1
 800931a:	61fb      	str	r3, [r7, #28]
 800931c:	797b      	ldrb	r3, [r7, #5]
 800931e:	461a      	mov	r2, r3
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	4293      	cmp	r3, r2
 8009324:	d3ad      	bcc.n	8009282 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8009326:	4b06      	ldr	r3, [pc, #24]	; (8009340 <ssd1306_WriteChar+0xfc>)
 8009328:	881a      	ldrh	r2, [r3, #0]
 800932a:	793b      	ldrb	r3, [r7, #4]
 800932c:	b29b      	uxth	r3, r3
 800932e:	4413      	add	r3, r2
 8009330:	b29a      	uxth	r2, r3
 8009332:	4b03      	ldr	r3, [pc, #12]	; (8009340 <ssd1306_WriteChar+0xfc>)
 8009334:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3724      	adds	r7, #36	; 0x24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd90      	pop	{r4, r7, pc}
 8009340:	200006ac 	.word	0x200006ac

08009344 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	1d38      	adds	r0, r7, #4
 800934e:	e880 0006 	stmia.w	r0, {r1, r2}
 8009352:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8009354:	e012      	b.n	800937c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	7818      	ldrb	r0, [r3, #0]
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	1d3a      	adds	r2, r7, #4
 800935e:	ca06      	ldmia	r2, {r1, r2}
 8009360:	f7ff ff70 	bl	8009244 <ssd1306_WriteChar>
 8009364:	4603      	mov	r3, r0
 8009366:	461a      	mov	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d002      	beq.n	8009376 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	e008      	b.n	8009388 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e8      	bne.n	8009356 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	781b      	ldrb	r3, [r3, #0]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	460a      	mov	r2, r1
 800939a:	71fb      	strb	r3, [r7, #7]
 800939c:	4613      	mov	r3, r2
 800939e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <ssd1306_SetCursor+0x2c>)
 80093a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80093a8:	79bb      	ldrb	r3, [r7, #6]
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <ssd1306_SetCursor+0x2c>)
 80093ae:	805a      	strh	r2, [r3, #2]
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	200006ac 	.word	0x200006ac

080093c0 <ssd1306_Select>:

// Select a display
void ssd1306_Select(I2C_HandleTypeDef *hi2c, Knob *k) {
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
    i2c_Select(hi2c, I2C_MUX_MASTER_ADDR, k->row);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	461a      	mov	r2, r3
 80093d0:	21e2      	movs	r1, #226	; 0xe2
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f80b 	bl	80093ee <i2c_Select>
    i2c_Select(hi2c, I2C_MUX_SLAVE_ADDR, k->col);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	789b      	ldrb	r3, [r3, #2]
 80093dc:	461a      	mov	r2, r3
 80093de:	21e0      	movs	r1, #224	; 0xe0
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f804 	bl	80093ee <i2c_Select>
}
 80093e6:	bf00      	nop
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(I2C_HandleTypeDef *hi2c, uint8_t mux_addr, uint8_t i) {
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b086      	sub	sp, #24
 80093f2:	af02      	add	r7, sp, #8
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	460b      	mov	r3, r1
 80093f8:	70fb      	strb	r3, [r7, #3]
 80093fa:	4613      	mov	r3, r2
 80093fc:	70bb      	strb	r3, [r7, #2]
    if (i > 7) return;
 80093fe:	78bb      	ldrb	r3, [r7, #2]
 8009400:	2b07      	cmp	r3, #7
 8009402:	d810      	bhi.n	8009426 <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 8009404:	78bb      	ldrb	r3, [r7, #2]
 8009406:	2201      	movs	r2, #1
 8009408:	fa02 f303 	lsl.w	r3, r2, r3
 800940c:	b2db      	uxtb	r3, r3
 800940e:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(hi2c, mux_addr, temp, 1, 100);
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	b299      	uxth	r1, r3
 8009414:	f107 020c 	add.w	r2, r7, #12
 8009418:	2364      	movs	r3, #100	; 0x64
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	2301      	movs	r3, #1
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7fa fa3e 	bl	80038a0 <HAL_I2C_Master_Transmit>
 8009424:	e000      	b.n	8009428 <i2c_Select+0x3a>
    if (i > 7) return;
 8009426:	bf00      	nop
}
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <update_init_indicator>:

// Update the init value closeness indicator
void update_init_indicator(Knob *k, char *s) {
 8009430:	b590      	push	{r4, r7, lr}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
    int8_t init_diff = KnobMap(k, k->init_value, 127) - KnobMap(k, k->value, 127);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	227f      	movs	r2, #127	; 0x7f
 8009440:	4619      	mov	r1, r3
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f7f7 fd66 	bl	8000f14 <KnobMap>
 8009448:	4603      	mov	r3, r0
 800944a:	461c      	mov	r4, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009452:	227f      	movs	r2, #127	; 0x7f
 8009454:	4619      	mov	r1, r3
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7f7 fd5c 	bl	8000f14 <KnobMap>
 800945c:	4603      	mov	r3, r0
 800945e:	1ae3      	subs	r3, r4, r3
 8009460:	b2db      	uxtb	r3, r3
 8009462:	75fb      	strb	r3, [r7, #23]
    uint8_t init_pct = (abs(init_diff) / 127.0f) * 100;
 8009464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009468:	2b00      	cmp	r3, #0
 800946a:	bfb8      	it	lt
 800946c:	425b      	neglt	r3, r3
 800946e:	b2db      	uxtb	r3, r3
 8009470:	ee07 3a90 	vmov	s15, r3
 8009474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009478:	eddf 6a62 	vldr	s13, [pc, #392]	; 8009604 <update_init_indicator+0x1d4>
 800947c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009480:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8009608 <update_init_indicator+0x1d8>
 8009484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948c:	edc7 7a01 	vstr	s15, [r7, #4]
 8009490:	793b      	ldrb	r3, [r7, #4]
 8009492:	75bb      	strb	r3, [r7, #22]
    uint8_t iis_len = strlen(s);
 8009494:	68b8      	ldr	r0, [r7, #8]
 8009496:	f7f6 fea3 	bl	80001e0 <strlen>
 800949a:	4603      	mov	r3, r0
 800949c:	757b      	strb	r3, [r7, #21]

    if (init_diff == 0) {
 800949e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <update_init_indicator+0x8c>
        snprintf(s, iis_len, "%s", "       @       ");
 80094a6:	7d79      	ldrb	r1, [r7, #21]
 80094a8:	4b58      	ldr	r3, [pc, #352]	; (800960c <update_init_indicator+0x1dc>)
 80094aa:	4a59      	ldr	r2, [pc, #356]	; (8009610 <update_init_indicator+0x1e0>)
 80094ac:	68b8      	ldr	r0, [r7, #8]
 80094ae:	f000 ff0b 	bl	800a2c8 <sniprintf>
        k->isLocked = 0;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return;
 80094ba:	e0a0      	b.n	80095fe <update_init_indicator+0x1ce>
    }

    if (init_pct < 15) {
 80094bc:	7dbb      	ldrb	r3, [r7, #22]
 80094be:	2b0e      	cmp	r3, #14
 80094c0:	d811      	bhi.n	80094e6 <update_init_indicator+0xb6>
        if (init_diff > 0) snprintf(s, iis_len, "%s", "      >        ");
 80094c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	dd06      	ble.n	80094d8 <update_init_indicator+0xa8>
 80094ca:	7d79      	ldrb	r1, [r7, #21]
 80094cc:	4b51      	ldr	r3, [pc, #324]	; (8009614 <update_init_indicator+0x1e4>)
 80094ce:	4a50      	ldr	r2, [pc, #320]	; (8009610 <update_init_indicator+0x1e0>)
 80094d0:	68b8      	ldr	r0, [r7, #8]
 80094d2:	f000 fef9 	bl	800a2c8 <sniprintf>
 80094d6:	e092      	b.n	80095fe <update_init_indicator+0x1ce>
        else               snprintf(s, iis_len, "%s", "        <      ");
 80094d8:	7d79      	ldrb	r1, [r7, #21]
 80094da:	4b4f      	ldr	r3, [pc, #316]	; (8009618 <update_init_indicator+0x1e8>)
 80094dc:	4a4c      	ldr	r2, [pc, #304]	; (8009610 <update_init_indicator+0x1e0>)
 80094de:	68b8      	ldr	r0, [r7, #8]
 80094e0:	f000 fef2 	bl	800a2c8 <sniprintf>
 80094e4:	e08b      	b.n	80095fe <update_init_indicator+0x1ce>
    } else if (init_pct >= 15 && init_pct < 30) {
 80094e6:	7dbb      	ldrb	r3, [r7, #22]
 80094e8:	2b0e      	cmp	r3, #14
 80094ea:	d914      	bls.n	8009516 <update_init_indicator+0xe6>
 80094ec:	7dbb      	ldrb	r3, [r7, #22]
 80094ee:	2b1d      	cmp	r3, #29
 80094f0:	d811      	bhi.n	8009516 <update_init_indicator+0xe6>
        if (init_diff > 0) snprintf(s, iis_len, "%s", "     >>        ");
 80094f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	dd06      	ble.n	8009508 <update_init_indicator+0xd8>
 80094fa:	7d79      	ldrb	r1, [r7, #21]
 80094fc:	4b47      	ldr	r3, [pc, #284]	; (800961c <update_init_indicator+0x1ec>)
 80094fe:	4a44      	ldr	r2, [pc, #272]	; (8009610 <update_init_indicator+0x1e0>)
 8009500:	68b8      	ldr	r0, [r7, #8]
 8009502:	f000 fee1 	bl	800a2c8 <sniprintf>
 8009506:	e07a      	b.n	80095fe <update_init_indicator+0x1ce>
        else               snprintf(s, iis_len, "%s", "        <<     ");
 8009508:	7d79      	ldrb	r1, [r7, #21]
 800950a:	4b45      	ldr	r3, [pc, #276]	; (8009620 <update_init_indicator+0x1f0>)
 800950c:	4a40      	ldr	r2, [pc, #256]	; (8009610 <update_init_indicator+0x1e0>)
 800950e:	68b8      	ldr	r0, [r7, #8]
 8009510:	f000 feda 	bl	800a2c8 <sniprintf>
        if (init_diff > 0) snprintf(s, iis_len, "%s", "     >>        ");
 8009514:	e073      	b.n	80095fe <update_init_indicator+0x1ce>
    } else if (init_pct >= 30 && init_pct < 45) {
 8009516:	7dbb      	ldrb	r3, [r7, #22]
 8009518:	2b1d      	cmp	r3, #29
 800951a:	d914      	bls.n	8009546 <update_init_indicator+0x116>
 800951c:	7dbb      	ldrb	r3, [r7, #22]
 800951e:	2b2c      	cmp	r3, #44	; 0x2c
 8009520:	d811      	bhi.n	8009546 <update_init_indicator+0x116>
        if (init_diff > 0) snprintf(s, iis_len, "%s", "    >>>        ");
 8009522:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dd06      	ble.n	8009538 <update_init_indicator+0x108>
 800952a:	7d79      	ldrb	r1, [r7, #21]
 800952c:	4b3d      	ldr	r3, [pc, #244]	; (8009624 <update_init_indicator+0x1f4>)
 800952e:	4a38      	ldr	r2, [pc, #224]	; (8009610 <update_init_indicator+0x1e0>)
 8009530:	68b8      	ldr	r0, [r7, #8]
 8009532:	f000 fec9 	bl	800a2c8 <sniprintf>
 8009536:	e062      	b.n	80095fe <update_init_indicator+0x1ce>
        else               snprintf(s, iis_len, "%s", "        <<<    ");
 8009538:	7d79      	ldrb	r1, [r7, #21]
 800953a:	4b3b      	ldr	r3, [pc, #236]	; (8009628 <update_init_indicator+0x1f8>)
 800953c:	4a34      	ldr	r2, [pc, #208]	; (8009610 <update_init_indicator+0x1e0>)
 800953e:	68b8      	ldr	r0, [r7, #8]
 8009540:	f000 fec2 	bl	800a2c8 <sniprintf>
        if (init_diff > 0) snprintf(s, iis_len, "%s", "    >>>        ");
 8009544:	e05b      	b.n	80095fe <update_init_indicator+0x1ce>
    } else if (init_pct >= 45 && init_pct < 61) {
 8009546:	7dbb      	ldrb	r3, [r7, #22]
 8009548:	2b2c      	cmp	r3, #44	; 0x2c
 800954a:	d914      	bls.n	8009576 <update_init_indicator+0x146>
 800954c:	7dbb      	ldrb	r3, [r7, #22]
 800954e:	2b3c      	cmp	r3, #60	; 0x3c
 8009550:	d811      	bhi.n	8009576 <update_init_indicator+0x146>
        if (init_diff > 0) snprintf(s, iis_len, "%s", "   >>>>        ");
 8009552:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dd06      	ble.n	8009568 <update_init_indicator+0x138>
 800955a:	7d79      	ldrb	r1, [r7, #21]
 800955c:	4b33      	ldr	r3, [pc, #204]	; (800962c <update_init_indicator+0x1fc>)
 800955e:	4a2c      	ldr	r2, [pc, #176]	; (8009610 <update_init_indicator+0x1e0>)
 8009560:	68b8      	ldr	r0, [r7, #8]
 8009562:	f000 feb1 	bl	800a2c8 <sniprintf>
 8009566:	e04a      	b.n	80095fe <update_init_indicator+0x1ce>
        else               snprintf(s, iis_len, "%s", "        <<<<   ");
 8009568:	7d79      	ldrb	r1, [r7, #21]
 800956a:	4b31      	ldr	r3, [pc, #196]	; (8009630 <update_init_indicator+0x200>)
 800956c:	4a28      	ldr	r2, [pc, #160]	; (8009610 <update_init_indicator+0x1e0>)
 800956e:	68b8      	ldr	r0, [r7, #8]
 8009570:	f000 feaa 	bl	800a2c8 <sniprintf>
        if (init_diff > 0) snprintf(s, iis_len, "%s", "   >>>>        ");
 8009574:	e043      	b.n	80095fe <update_init_indicator+0x1ce>
    } else if (init_pct >= 61 && init_pct < 77) {
 8009576:	7dbb      	ldrb	r3, [r7, #22]
 8009578:	2b3c      	cmp	r3, #60	; 0x3c
 800957a:	d914      	bls.n	80095a6 <update_init_indicator+0x176>
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	2b4c      	cmp	r3, #76	; 0x4c
 8009580:	d811      	bhi.n	80095a6 <update_init_indicator+0x176>
        if (init_diff > 0) snprintf(s, iis_len, "%s", "  >>>>>        ");
 8009582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009586:	2b00      	cmp	r3, #0
 8009588:	dd06      	ble.n	8009598 <update_init_indicator+0x168>
 800958a:	7d79      	ldrb	r1, [r7, #21]
 800958c:	4b29      	ldr	r3, [pc, #164]	; (8009634 <update_init_indicator+0x204>)
 800958e:	4a20      	ldr	r2, [pc, #128]	; (8009610 <update_init_indicator+0x1e0>)
 8009590:	68b8      	ldr	r0, [r7, #8]
 8009592:	f000 fe99 	bl	800a2c8 <sniprintf>
 8009596:	e032      	b.n	80095fe <update_init_indicator+0x1ce>
        else               snprintf(s, iis_len, "%s", "        <<<<<  ");
 8009598:	7d79      	ldrb	r1, [r7, #21]
 800959a:	4b27      	ldr	r3, [pc, #156]	; (8009638 <update_init_indicator+0x208>)
 800959c:	4a1c      	ldr	r2, [pc, #112]	; (8009610 <update_init_indicator+0x1e0>)
 800959e:	68b8      	ldr	r0, [r7, #8]
 80095a0:	f000 fe92 	bl	800a2c8 <sniprintf>
        if (init_diff > 0) snprintf(s, iis_len, "%s", "  >>>>>        ");
 80095a4:	e02b      	b.n	80095fe <update_init_indicator+0x1ce>
    } else if (init_pct >= 77 && init_pct < 93) {
 80095a6:	7dbb      	ldrb	r3, [r7, #22]
 80095a8:	2b4c      	cmp	r3, #76	; 0x4c
 80095aa:	d914      	bls.n	80095d6 <update_init_indicator+0x1a6>
 80095ac:	7dbb      	ldrb	r3, [r7, #22]
 80095ae:	2b5c      	cmp	r3, #92	; 0x5c
 80095b0:	d811      	bhi.n	80095d6 <update_init_indicator+0x1a6>
        if (init_diff > 0) snprintf(s, iis_len, "%s", " >>>>>>        ");
 80095b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	dd06      	ble.n	80095c8 <update_init_indicator+0x198>
 80095ba:	7d79      	ldrb	r1, [r7, #21]
 80095bc:	4b1f      	ldr	r3, [pc, #124]	; (800963c <update_init_indicator+0x20c>)
 80095be:	4a14      	ldr	r2, [pc, #80]	; (8009610 <update_init_indicator+0x1e0>)
 80095c0:	68b8      	ldr	r0, [r7, #8]
 80095c2:	f000 fe81 	bl	800a2c8 <sniprintf>
 80095c6:	e01a      	b.n	80095fe <update_init_indicator+0x1ce>
        else               snprintf(s, iis_len, "%s", "        <<<<<< ");
 80095c8:	7d79      	ldrb	r1, [r7, #21]
 80095ca:	4b1d      	ldr	r3, [pc, #116]	; (8009640 <update_init_indicator+0x210>)
 80095cc:	4a10      	ldr	r2, [pc, #64]	; (8009610 <update_init_indicator+0x1e0>)
 80095ce:	68b8      	ldr	r0, [r7, #8]
 80095d0:	f000 fe7a 	bl	800a2c8 <sniprintf>
        if (init_diff > 0) snprintf(s, iis_len, "%s", " >>>>>>        ");
 80095d4:	e013      	b.n	80095fe <update_init_indicator+0x1ce>
    } else if (init_pct >= 93) {
 80095d6:	7dbb      	ldrb	r3, [r7, #22]
 80095d8:	2b5c      	cmp	r3, #92	; 0x5c
 80095da:	d910      	bls.n	80095fe <update_init_indicator+0x1ce>
        if (init_diff > 0) snprintf(s, iis_len, "%s", ">>>>>>>        ");
 80095dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	dd06      	ble.n	80095f2 <update_init_indicator+0x1c2>
 80095e4:	7d79      	ldrb	r1, [r7, #21]
 80095e6:	4b17      	ldr	r3, [pc, #92]	; (8009644 <update_init_indicator+0x214>)
 80095e8:	4a09      	ldr	r2, [pc, #36]	; (8009610 <update_init_indicator+0x1e0>)
 80095ea:	68b8      	ldr	r0, [r7, #8]
 80095ec:	f000 fe6c 	bl	800a2c8 <sniprintf>
 80095f0:	e005      	b.n	80095fe <update_init_indicator+0x1ce>
        else               snprintf(s, iis_len, "%s", "        <<<<<<<");
 80095f2:	7d79      	ldrb	r1, [r7, #21]
 80095f4:	4b14      	ldr	r3, [pc, #80]	; (8009648 <update_init_indicator+0x218>)
 80095f6:	4a06      	ldr	r2, [pc, #24]	; (8009610 <update_init_indicator+0x1e0>)
 80095f8:	68b8      	ldr	r0, [r7, #8]
 80095fa:	f000 fe65 	bl	800a2c8 <sniprintf>
    }

}
 80095fe:	371c      	adds	r7, #28
 8009600:	46bd      	mov	sp, r7
 8009602:	bd90      	pop	{r4, r7, pc}
 8009604:	42fe0000 	.word	0x42fe0000
 8009608:	42c80000 	.word	0x42c80000
 800960c:	0800b204 	.word	0x0800b204
 8009610:	0800b214 	.word	0x0800b214
 8009614:	0800b218 	.word	0x0800b218
 8009618:	0800b228 	.word	0x0800b228
 800961c:	0800b238 	.word	0x0800b238
 8009620:	0800b248 	.word	0x0800b248
 8009624:	0800b258 	.word	0x0800b258
 8009628:	0800b268 	.word	0x0800b268
 800962c:	0800b278 	.word	0x0800b278
 8009630:	0800b288 	.word	0x0800b288
 8009634:	0800b298 	.word	0x0800b298
 8009638:	0800b2a8 	.word	0x0800b2a8
 800963c:	0800b2b8 	.word	0x0800b2b8
 8009640:	0800b2c8 	.word	0x0800b2c8
 8009644:	0800b2d8 	.word	0x0800b2d8
 8009648:	0800b2e8 	.word	0x0800b2e8

0800964c <MX_USB_DEVICE_Init>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009650:	2200      	movs	r2, #0
 8009652:	4912      	ldr	r1, [pc, #72]	; (800969c <MX_USB_DEVICE_Init+0x50>)
 8009654:	4812      	ldr	r0, [pc, #72]	; (80096a0 <MX_USB_DEVICE_Init+0x54>)
 8009656:	f7fe f97e 	bl	8007956 <USBD_Init>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009660:	f7f8 f9b1 	bl	80019c6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK)
 8009664:	490f      	ldr	r1, [pc, #60]	; (80096a4 <MX_USB_DEVICE_Init+0x58>)
 8009666:	480e      	ldr	r0, [pc, #56]	; (80096a0 <MX_USB_DEVICE_Init+0x54>)
 8009668:	f7fe f9a5 	bl	80079b6 <USBD_RegisterClass>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009672:	f7f8 f9a8 	bl	80019c6 <Error_Handler>
  }
  if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK)
 8009676:	490c      	ldr	r1, [pc, #48]	; (80096a8 <MX_USB_DEVICE_Init+0x5c>)
 8009678:	4809      	ldr	r0, [pc, #36]	; (80096a0 <MX_USB_DEVICE_Init+0x54>)
 800967a:	f7fe f955 	bl	8007928 <USBD_Midi_RegisterInterface>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009684:	f7f8 f99f 	bl	80019c6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009688:	4805      	ldr	r0, [pc, #20]	; (80096a0 <MX_USB_DEVICE_Init+0x54>)
 800968a:	f7fe f9bb 	bl	8007a04 <USBD_Start>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009694:	f7f8 f997 	bl	80019c6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009698:	bf00      	nop
 800969a:	bd80      	pop	{r7, pc}
 800969c:	200000c8 	.word	0x200000c8
 80096a0:	20002434 	.word	0x20002434
 80096a4:	2000000c 	.word	0x2000000c
 80096a8:	20000118 	.word	0x20000118

080096ac <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	71fb      	strb	r3, [r7, #7]
 80096b6:	460b      	mov	r3, r1
 80096b8:	71bb      	strb	r3, [r7, #6]
 80096ba:	4613      	mov	r3, r2
 80096bc:	717b      	strb	r3, [r7, #5]
		  uint8_t buffer[4];
		  const uint8_t usbFrame = (0 << 4) | 0x0B;
 80096be:	230b      	movs	r3, #11
 80096c0:	73fb      	strb	r3, [r7, #15]
		  const uint8_t midiCommand = 0xB0 | channel;
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80096c8:	73bb      	strb	r3, [r7, #14]

		  buffer[0] = usbFrame;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	723b      	strb	r3, [r7, #8]
		  buffer[1] = midiCommand;
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	727b      	strb	r3, [r7, #9]
		  buffer[2] = cc;
 80096d2:	79bb      	ldrb	r3, [r7, #6]
 80096d4:	72bb      	strb	r3, [r7, #10]
		  buffer[3] = value;
 80096d6:	797b      	ldrb	r3, [r7, #5]
 80096d8:	72fb      	strb	r3, [r7, #11]

		  switch(USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4))
 80096da:	f107 0208 	add.w	r2, r7, #8
 80096de:	2304      	movs	r3, #4
 80096e0:	2181      	movs	r1, #129	; 0x81
 80096e2:	4810      	ldr	r0, [pc, #64]	; (8009724 <MX_USB_Send_Midi+0x78>)
 80096e4:	f000 fbf7 	bl	8009ed6 <USBD_LL_Transmit>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d00a      	beq.n	8009704 <MX_USB_Send_Midi+0x58>
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	dc10      	bgt.n	8009714 <MX_USB_Send_Midi+0x68>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <MX_USB_Send_Midi+0x50>
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d008      	beq.n	800970c <MX_USB_Send_Midi+0x60>
 80096fa:	e00b      	b.n	8009714 <MX_USB_Send_Midi+0x68>
		  {
		  	  //FIXME use errorhandler!
		  	  case USBD_OK:
		  		  printf("ok\n");
 80096fc:	480a      	ldr	r0, [pc, #40]	; (8009728 <MX_USB_Send_Midi+0x7c>)
 80096fe:	f000 fdcb 	bl	800a298 <puts>
		  		  break;
 8009702:	e00b      	b.n	800971c <MX_USB_Send_Midi+0x70>
		  	  case USBD_FAIL:
		  		  printf("USB SEND FAIL\n");
 8009704:	4809      	ldr	r0, [pc, #36]	; (800972c <MX_USB_Send_Midi+0x80>)
 8009706:	f000 fdc7 	bl	800a298 <puts>
		  		  break;
 800970a:	e007      	b.n	800971c <MX_USB_Send_Midi+0x70>
		  	  case USBD_BUSY:
		  		  printf("USB SEND BUS\n");
 800970c:	4808      	ldr	r0, [pc, #32]	; (8009730 <MX_USB_Send_Midi+0x84>)
 800970e:	f000 fdc3 	bl	800a298 <puts>
		  		  break;
 8009712:	e003      	b.n	800971c <MX_USB_Send_Midi+0x70>
		  	  default:
		  		  printf("USB SEND ERROR DEFAULT CASE\n");
 8009714:	4807      	ldr	r0, [pc, #28]	; (8009734 <MX_USB_Send_Midi+0x88>)
 8009716:	f000 fdbf 	bl	800a298 <puts>
		  }
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	20002434 	.word	0x20002434
 8009728:	0800b2f8 	.word	0x0800b2f8
 800972c:	0800b2fc 	.word	0x0800b2fc
 8009730:	0800b30c 	.word	0x0800b30c
 8009734:	0800b31c 	.word	0x0800b31c

08009738 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	6039      	str	r1, [r7, #0]
 8009742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2212      	movs	r2, #18
 8009748:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800974a:	4b03      	ldr	r3, [pc, #12]	; (8009758 <USBD_FS_DeviceDescriptor+0x20>)
}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	200000e4 	.word	0x200000e4

0800975c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2204      	movs	r2, #4
 800976c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800976e:	4b03      	ldr	r3, [pc, #12]	; (800977c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	200000f8 	.word	0x200000f8

08009780 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d105      	bne.n	800979e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	4907      	ldr	r1, [pc, #28]	; (80097b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009796:	4808      	ldr	r0, [pc, #32]	; (80097b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009798:	f7ff f965 	bl	8008a66 <USBD_GetString>
 800979c:	e004      	b.n	80097a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	4904      	ldr	r1, [pc, #16]	; (80097b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80097a2:	4805      	ldr	r0, [pc, #20]	; (80097b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80097a4:	f7ff f95f 	bl	8008a66 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a8:	4b02      	ldr	r3, [pc, #8]	; (80097b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20002704 	.word	0x20002704
 80097b8:	0800b338 	.word	0x0800b338

080097bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	6039      	str	r1, [r7, #0]
 80097c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	4904      	ldr	r1, [pc, #16]	; (80097dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097cc:	4804      	ldr	r0, [pc, #16]	; (80097e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097ce:	f7ff f94a 	bl	8008a66 <USBD_GetString>
  return USBD_StrDesc;
 80097d2:	4b02      	ldr	r3, [pc, #8]	; (80097dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	20002704 	.word	0x20002704
 80097e0:	0800b34c 	.word	0x0800b34c

080097e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	221a      	movs	r2, #26
 80097f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097f6:	f000 f843 	bl	8009880 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097fa:	4b02      	ldr	r3, [pc, #8]	; (8009804 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	200000fc 	.word	0x200000fc

08009808 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	6039      	str	r1, [r7, #0]
 8009812:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	4907      	ldr	r1, [pc, #28]	; (800983c <USBD_FS_ConfigStrDescriptor+0x34>)
 800981e:	4808      	ldr	r0, [pc, #32]	; (8009840 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009820:	f7ff f921 	bl	8008a66 <USBD_GetString>
 8009824:	e004      	b.n	8009830 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4904      	ldr	r1, [pc, #16]	; (800983c <USBD_FS_ConfigStrDescriptor+0x34>)
 800982a:	4805      	ldr	r0, [pc, #20]	; (8009840 <USBD_FS_ConfigStrDescriptor+0x38>)
 800982c:	f7ff f91b 	bl	8008a66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009830:	4b02      	ldr	r3, [pc, #8]	; (800983c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20002704 	.word	0x20002704
 8009840:	0800b360 	.word	0x0800b360

08009844 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009850:	79fb      	ldrb	r3, [r7, #7]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d105      	bne.n	8009862 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	4907      	ldr	r1, [pc, #28]	; (8009878 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800985a:	4808      	ldr	r0, [pc, #32]	; (800987c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800985c:	f7ff f903 	bl	8008a66 <USBD_GetString>
 8009860:	e004      	b.n	800986c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4904      	ldr	r1, [pc, #16]	; (8009878 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009866:	4805      	ldr	r0, [pc, #20]	; (800987c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009868:	f7ff f8fd 	bl	8008a66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20002704 	.word	0x20002704
 800987c:	0800b370 	.word	0x0800b370

08009880 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009886:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <Get_SerialNum+0x44>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800988c:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <Get_SerialNum+0x48>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009892:	4b0e      	ldr	r3, [pc, #56]	; (80098cc <Get_SerialNum+0x4c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4413      	add	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d009      	beq.n	80098ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098a6:	2208      	movs	r2, #8
 80098a8:	4909      	ldr	r1, [pc, #36]	; (80098d0 <Get_SerialNum+0x50>)
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 f814 	bl	80098d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098b0:	2204      	movs	r2, #4
 80098b2:	4908      	ldr	r1, [pc, #32]	; (80098d4 <Get_SerialNum+0x54>)
 80098b4:	68b8      	ldr	r0, [r7, #8]
 80098b6:	f000 f80f 	bl	80098d8 <IntToUnicode>
  }
}
 80098ba:	bf00      	nop
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	1fff7a10 	.word	0x1fff7a10
 80098c8:	1fff7a14 	.word	0x1fff7a14
 80098cc:	1fff7a18 	.word	0x1fff7a18
 80098d0:	200000fe 	.word	0x200000fe
 80098d4:	2000010e 	.word	0x2000010e

080098d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	4613      	mov	r3, r2
 80098e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098ea:	2300      	movs	r3, #0
 80098ec:	75fb      	strb	r3, [r7, #23]
 80098ee:	e027      	b.n	8009940 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	0f1b      	lsrs	r3, r3, #28
 80098f4:	2b09      	cmp	r3, #9
 80098f6:	d80b      	bhi.n	8009910 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	0f1b      	lsrs	r3, r3, #28
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4619      	mov	r1, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	440b      	add	r3, r1
 8009908:	3230      	adds	r2, #48	; 0x30
 800990a:	b2d2      	uxtb	r2, r2
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	e00a      	b.n	8009926 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	0f1b      	lsrs	r3, r3, #28
 8009914:	b2da      	uxtb	r2, r3
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	4619      	mov	r1, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	440b      	add	r3, r1
 8009920:	3237      	adds	r2, #55	; 0x37
 8009922:	b2d2      	uxtb	r2, r2
 8009924:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	011b      	lsls	r3, r3, #4
 800992a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	3301      	adds	r3, #1
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	4413      	add	r3, r2
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	3301      	adds	r3, #1
 800993e:	75fb      	strb	r3, [r7, #23]
 8009940:	7dfa      	ldrb	r2, [r7, #23]
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	429a      	cmp	r2, r3
 8009946:	d3d3      	bcc.n	80098f0 <IntToUnicode+0x18>
  }
}
 8009948:	bf00      	nop
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 8009956:	b480      	push	{r7}
 8009958:	b085      	sub	sp, #20
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]

	uint8_t chan = msg[1] & 0xf;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3301      	adds	r3, #1
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	f003 030f 	and.w	r3, r3, #15
 800996a:	73fb      	strb	r3, [r7, #15]
	uint8_t msgtype = msg[1] & 0xf0;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3301      	adds	r3, #1
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	f023 030f 	bic.w	r3, r3, #15
 8009976:	73bb      	strb	r3, [r7, #14]
	uint8_t b1 =  msg[2];
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	789b      	ldrb	r3, [r3, #2]
 800997c:	737b      	strb	r3, [r7, #13]
	uint8_t b2 =  msg[3];
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	78db      	ldrb	r3, [r3, #3]
 8009982:	733b      	strb	r3, [r7, #12]
	uint16_t b = ((b2 & 0x7f) << 7) | (b1 & 0x7f);
 8009984:	7b3b      	ldrb	r3, [r7, #12]
 8009986:	01db      	lsls	r3, r3, #7
 8009988:	b21b      	sxth	r3, r3
 800998a:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 800998e:	b21a      	sxth	r2, r3
 8009990:	7b7b      	ldrb	r3, [r7, #13]
 8009992:	b21b      	sxth	r3, r3
 8009994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009998:	b21b      	sxth	r3, r3
 800999a:	4313      	orrs	r3, r2
 800999c:	b21b      	sxth	r3, r3
 800999e:	817b      	strh	r3, [r7, #10]

	switch (msgtype) {
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
 80099a2:	2be0      	cmp	r3, #224	; 0xe0
 80099a4:	d012      	beq.n	80099cc <Midi_Receive+0x76>
 80099a6:	2be0      	cmp	r3, #224	; 0xe0
 80099a8:	dc12      	bgt.n	80099d0 <Midi_Receive+0x7a>
 80099aa:	2bd0      	cmp	r3, #208	; 0xd0
 80099ac:	d012      	beq.n	80099d4 <Midi_Receive+0x7e>
 80099ae:	2bd0      	cmp	r3, #208	; 0xd0
 80099b0:	dc0e      	bgt.n	80099d0 <Midi_Receive+0x7a>
 80099b2:	2bc0      	cmp	r3, #192	; 0xc0
 80099b4:	d010      	beq.n	80099d8 <Midi_Receive+0x82>
 80099b6:	2bc0      	cmp	r3, #192	; 0xc0
 80099b8:	dc0a      	bgt.n	80099d0 <Midi_Receive+0x7a>
 80099ba:	2bb0      	cmp	r3, #176	; 0xb0
 80099bc:	d00e      	beq.n	80099dc <Midi_Receive+0x86>
 80099be:	2bb0      	cmp	r3, #176	; 0xb0
 80099c0:	dc06      	bgt.n	80099d0 <Midi_Receive+0x7a>
 80099c2:	2b80      	cmp	r3, #128	; 0x80
 80099c4:	d00c      	beq.n	80099e0 <Midi_Receive+0x8a>
 80099c6:	2b90      	cmp	r3, #144	; 0x90
 80099c8:	d00c      	beq.n	80099e4 <Midi_Receive+0x8e>
		break;
	case 0xE0:
//		fluid_synth_pitch_bend(synth, chan, b);
		break;
	default:
		break;
 80099ca:	e001      	b.n	80099d0 <Midi_Receive+0x7a>
		break;
 80099cc:	bf00      	nop
 80099ce:	e00a      	b.n	80099e6 <Midi_Receive+0x90>
		break;
 80099d0:	bf00      	nop
 80099d2:	e008      	b.n	80099e6 <Midi_Receive+0x90>
		break;
 80099d4:	bf00      	nop
 80099d6:	e006      	b.n	80099e6 <Midi_Receive+0x90>
		break;
 80099d8:	bf00      	nop
 80099da:	e004      	b.n	80099e6 <Midi_Receive+0x90>
		break;
 80099dc:	bf00      	nop
 80099de:	e002      	b.n	80099e6 <Midi_Receive+0x90>
		break;
 80099e0:	bf00      	nop
 80099e2:	e000      	b.n	80099e6 <Midi_Receive+0x90>
		break;
 80099e4:	bf00      	nop
	}

	return 0;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08a      	sub	sp, #40	; 0x28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099fc:	f107 0314 	add.w	r3, r7, #20
 8009a00:	2200      	movs	r2, #0
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	605a      	str	r2, [r3, #4]
 8009a06:	609a      	str	r2, [r3, #8]
 8009a08:	60da      	str	r2, [r3, #12]
 8009a0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a14:	d13a      	bne.n	8009a8c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a16:	2300      	movs	r3, #0
 8009a18:	613b      	str	r3, [r7, #16]
 8009a1a:	4b1e      	ldr	r3, [pc, #120]	; (8009a94 <HAL_PCD_MspInit+0xa0>)
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	4a1d      	ldr	r2, [pc, #116]	; (8009a94 <HAL_PCD_MspInit+0xa0>)
 8009a20:	f043 0301 	orr.w	r3, r3, #1
 8009a24:	6313      	str	r3, [r2, #48]	; 0x30
 8009a26:	4b1b      	ldr	r3, [pc, #108]	; (8009a94 <HAL_PCD_MspInit+0xa0>)
 8009a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8009a32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a38:	2302      	movs	r3, #2
 8009a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a40:	2300      	movs	r3, #0
 8009a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a44:	230a      	movs	r3, #10
 8009a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a48:	f107 0314 	add.w	r3, r7, #20
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4812      	ldr	r0, [pc, #72]	; (8009a98 <HAL_PCD_MspInit+0xa4>)
 8009a50:	f7f9 fc5e 	bl	8003310 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a54:	4b0f      	ldr	r3, [pc, #60]	; (8009a94 <HAL_PCD_MspInit+0xa0>)
 8009a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a58:	4a0e      	ldr	r2, [pc, #56]	; (8009a94 <HAL_PCD_MspInit+0xa0>)
 8009a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a5e:	6353      	str	r3, [r2, #52]	; 0x34
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	4b0b      	ldr	r3, [pc, #44]	; (8009a94 <HAL_PCD_MspInit+0xa0>)
 8009a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a68:	4a0a      	ldr	r2, [pc, #40]	; (8009a94 <HAL_PCD_MspInit+0xa0>)
 8009a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8009a70:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <HAL_PCD_MspInit+0xa0>)
 8009a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a78:	60fb      	str	r3, [r7, #12]
 8009a7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2100      	movs	r1, #0
 8009a80:	2043      	movs	r0, #67	; 0x43
 8009a82:	f7f9 f82e 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a86:	2043      	movs	r0, #67	; 0x43
 8009a88:	f7f9 f847 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a8c:	bf00      	nop
 8009a8e:	3728      	adds	r7, #40	; 0x28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	40023800 	.word	0x40023800
 8009a98:	40020000 	.word	0x40020000

08009a9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	f7fd fff1 	bl	8007a9a <USBD_LL_SetupStage>
}
 8009ab8:	bf00      	nop
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009ad2:	78fa      	ldrb	r2, [r7, #3]
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	00db      	lsls	r3, r3, #3
 8009ada:	1a9b      	subs	r3, r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	440b      	add	r3, r1
 8009ae0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	78fb      	ldrb	r3, [r7, #3]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	f7fe f82b 	bl	8007b44 <USBD_LL_DataOutStage>
}
 8009aee:	bf00      	nop
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b082      	sub	sp, #8
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009b08:	78fa      	ldrb	r2, [r7, #3]
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	1a9b      	subs	r3, r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	440b      	add	r3, r1
 8009b16:	3348      	adds	r3, #72	; 0x48
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	78fb      	ldrb	r3, [r7, #3]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	f7fe f874 	bl	8007c0a <USBD_LL_DataInStage>
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fe f988 	bl	8007e4e <USBD_LL_SOF>
}
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d001      	beq.n	8009b5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b5a:	f7f7 ff34 	bl	80019c6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b64:	7bfa      	ldrb	r2, [r7, #15]
 8009b66:	4611      	mov	r1, r2
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe f932 	bl	8007dd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe f8de 	bl	8007d36 <USBD_LL_Reset>
}
 8009b7a:	bf00      	nop
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe f92d 	bl	8007df2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	6812      	ldr	r2, [r2, #0]
 8009ba6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009baa:	f043 0301 	orr.w	r3, r3, #1
 8009bae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bb8:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <HAL_PCD_SuspendCallback+0x48>)
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	4a03      	ldr	r2, [pc, #12]	; (8009bcc <HAL_PCD_SuspendCallback+0x48>)
 8009bbe:	f043 0306 	orr.w	r3, r3, #6
 8009bc2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	e000ed00 	.word	0xe000ed00

08009bd0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe f91d 	bl	8007e1e <USBD_LL_Resume>
}
 8009be4:	bf00      	nop
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bfe:	78fa      	ldrb	r2, [r7, #3]
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fe f96b 	bl	8007ede <USBD_LL_IsoOUTIncomplete>
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c22:	78fa      	ldrb	r2, [r7, #3]
 8009c24:	4611      	mov	r1, r2
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fe f933 	bl	8007e92 <USBD_LL_IsoINIncomplete>
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe f971 	bl	8007f2a <USBD_LL_DevConnected>
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe f96e 	bl	8007f40 <USBD_LL_DevDisconnected>
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d13c      	bne.n	8009cf6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c7c:	4a20      	ldr	r2, [pc, #128]	; (8009d00 <USBD_LL_Init+0x94>)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a1e      	ldr	r2, [pc, #120]	; (8009d00 <USBD_LL_Init+0x94>)
 8009c88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c8c:	4b1c      	ldr	r3, [pc, #112]	; (8009d00 <USBD_LL_Init+0x94>)
 8009c8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009c92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009c94:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <USBD_LL_Init+0x94>)
 8009c96:	2204      	movs	r2, #4
 8009c98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c9a:	4b19      	ldr	r3, [pc, #100]	; (8009d00 <USBD_LL_Init+0x94>)
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ca0:	4b17      	ldr	r3, [pc, #92]	; (8009d00 <USBD_LL_Init+0x94>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ca6:	4b16      	ldr	r3, [pc, #88]	; (8009d00 <USBD_LL_Init+0x94>)
 8009ca8:	2202      	movs	r2, #2
 8009caa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cac:	4b14      	ldr	r3, [pc, #80]	; (8009d00 <USBD_LL_Init+0x94>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009cb2:	4b13      	ldr	r3, [pc, #76]	; (8009d00 <USBD_LL_Init+0x94>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009cb8:	4b11      	ldr	r3, [pc, #68]	; (8009d00 <USBD_LL_Init+0x94>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009cbe:	4b10      	ldr	r3, [pc, #64]	; (8009d00 <USBD_LL_Init+0x94>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	; (8009d00 <USBD_LL_Init+0x94>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009cca:	480d      	ldr	r0, [pc, #52]	; (8009d00 <USBD_LL_Init+0x94>)
 8009ccc:	f7fa fa7f 	bl	80041ce <HAL_PCD_Init>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009cd6:	f7f7 fe76 	bl	80019c6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009cda:	2180      	movs	r1, #128	; 0x80
 8009cdc:	4808      	ldr	r0, [pc, #32]	; (8009d00 <USBD_LL_Init+0x94>)
 8009cde:	f7fb fbdc 	bl	800549a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009ce2:	2240      	movs	r2, #64	; 0x40
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4806      	ldr	r0, [pc, #24]	; (8009d00 <USBD_LL_Init+0x94>)
 8009ce8:	f7fb fb90 	bl	800540c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009cec:	2280      	movs	r2, #128	; 0x80
 8009cee:	2101      	movs	r1, #1
 8009cf0:	4803      	ldr	r0, [pc, #12]	; (8009d00 <USBD_LL_Init+0x94>)
 8009cf2:	f7fb fb8b 	bl	800540c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	20002904 	.word	0x20002904

08009d04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fa fb74 	bl	8004408 <HAL_PCD_Start>
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 f938 	bl	8009f9c <USBD_Get_USB_Status>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	4608      	mov	r0, r1
 8009d44:	4611      	mov	r1, r2
 8009d46:	461a      	mov	r2, r3
 8009d48:	4603      	mov	r3, r0
 8009d4a:	70fb      	strb	r3, [r7, #3]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	70bb      	strb	r3, [r7, #2]
 8009d50:	4613      	mov	r3, r2
 8009d52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d62:	78bb      	ldrb	r3, [r7, #2]
 8009d64:	883a      	ldrh	r2, [r7, #0]
 8009d66:	78f9      	ldrb	r1, [r7, #3]
 8009d68:	f7fa ff58 	bl	8004c1c <HAL_PCD_EP_Open>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 f912 	bl	8009f9c <USBD_Get_USB_Status>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	460b      	mov	r3, r1
 8009d90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009da0:	78fa      	ldrb	r2, [r7, #3]
 8009da2:	4611      	mov	r1, r2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fa ffa1 	bl	8004cec <HAL_PCD_EP_Close>
 8009daa:	4603      	mov	r3, r0
 8009dac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 f8f3 	bl	8009f9c <USBD_Get_USB_Status>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dde:	78fa      	ldrb	r2, [r7, #3]
 8009de0:	4611      	mov	r1, r2
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fb f879 	bl	8004eda <HAL_PCD_EP_SetStall>
 8009de8:	4603      	mov	r3, r0
 8009dea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 f8d4 	bl	8009f9c <USBD_Get_USB_Status>
 8009df4:	4603      	mov	r3, r0
 8009df6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e1c:	78fa      	ldrb	r2, [r7, #3]
 8009e1e:	4611      	mov	r1, r2
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7fb f8be 	bl	8004fa2 <HAL_PCD_EP_ClrStall>
 8009e26:	4603      	mov	r3, r0
 8009e28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 f8b5 	bl	8009f9c <USBD_Get_USB_Status>
 8009e32:	4603      	mov	r3, r0
 8009e34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	da0b      	bge.n	8009e74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e62:	68f9      	ldr	r1, [r7, #12]
 8009e64:	4613      	mov	r3, r2
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	440b      	add	r3, r1
 8009e6e:	333e      	adds	r3, #62	; 0x3e
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	e00b      	b.n	8009e8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e74:	78fb      	ldrb	r3, [r7, #3]
 8009e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e7a:	68f9      	ldr	r1, [r7, #12]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009eb2:	78fa      	ldrb	r2, [r7, #3]
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fa fe8b 	bl	8004bd2 <HAL_PCD_SetAddress>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ec0:	7bfb      	ldrb	r3, [r7, #15]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 f86a 	bl	8009f9c <USBD_Get_USB_Status>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b086      	sub	sp, #24
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	603b      	str	r3, [r7, #0]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ef4:	7af9      	ldrb	r1, [r7, #11]
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	f7fa ffa4 	bl	8004e46 <HAL_PCD_EP_Transmit>
 8009efe:	4603      	mov	r3, r0
 8009f00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f02:	7dfb      	ldrb	r3, [r7, #23]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 f849 	bl	8009f9c <USBD_Get_USB_Status>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	607a      	str	r2, [r7, #4]
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	460b      	mov	r3, r1
 8009f26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f36:	7af9      	ldrb	r1, [r7, #11]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	f7fa ff20 	bl	8004d80 <HAL_PCD_EP_Receive>
 8009f40:	4603      	mov	r3, r0
 8009f42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 f828 	bl	8009f9c <USBD_Get_USB_Status>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f50:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	460b      	mov	r3, r1
 8009f64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fa ff50 	bl	8004e16 <HAL_PCD_EP_GetRxCount>
 8009f76:	4603      	mov	r3, r0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f88:	4b03      	ldr	r3, [pc, #12]	; (8009f98 <USBD_static_malloc+0x18>)
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	200006b4 	.word	0x200006b4

08009f9c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	2b03      	cmp	r3, #3
 8009fae:	d817      	bhi.n	8009fe0 <USBD_Get_USB_Status+0x44>
 8009fb0:	a201      	add	r2, pc, #4	; (adr r2, 8009fb8 <USBD_Get_USB_Status+0x1c>)
 8009fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb6:	bf00      	nop
 8009fb8:	08009fc9 	.word	0x08009fc9
 8009fbc:	08009fcf 	.word	0x08009fcf
 8009fc0:	08009fd5 	.word	0x08009fd5
 8009fc4:	08009fdb 	.word	0x08009fdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]
    break;
 8009fcc:	e00b      	b.n	8009fe6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd2:	e008      	b.n	8009fe6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd8:	e005      	b.n	8009fe6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009fde:	e002      	b.n	8009fe6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe4:	bf00      	nop
  }
  return usb_status;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <__errno>:
 8009ff4:	4b01      	ldr	r3, [pc, #4]	; (8009ffc <__errno+0x8>)
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	2000011c 	.word	0x2000011c

0800a000 <__libc_init_array>:
 800a000:	b570      	push	{r4, r5, r6, lr}
 800a002:	4d0d      	ldr	r5, [pc, #52]	; (800a038 <__libc_init_array+0x38>)
 800a004:	4c0d      	ldr	r4, [pc, #52]	; (800a03c <__libc_init_array+0x3c>)
 800a006:	1b64      	subs	r4, r4, r5
 800a008:	10a4      	asrs	r4, r4, #2
 800a00a:	2600      	movs	r6, #0
 800a00c:	42a6      	cmp	r6, r4
 800a00e:	d109      	bne.n	800a024 <__libc_init_array+0x24>
 800a010:	4d0b      	ldr	r5, [pc, #44]	; (800a040 <__libc_init_array+0x40>)
 800a012:	4c0c      	ldr	r4, [pc, #48]	; (800a044 <__libc_init_array+0x44>)
 800a014:	f001 f87c 	bl	800b110 <_init>
 800a018:	1b64      	subs	r4, r4, r5
 800a01a:	10a4      	asrs	r4, r4, #2
 800a01c:	2600      	movs	r6, #0
 800a01e:	42a6      	cmp	r6, r4
 800a020:	d105      	bne.n	800a02e <__libc_init_array+0x2e>
 800a022:	bd70      	pop	{r4, r5, r6, pc}
 800a024:	f855 3b04 	ldr.w	r3, [r5], #4
 800a028:	4798      	blx	r3
 800a02a:	3601      	adds	r6, #1
 800a02c:	e7ee      	b.n	800a00c <__libc_init_array+0xc>
 800a02e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a032:	4798      	blx	r3
 800a034:	3601      	adds	r6, #1
 800a036:	e7f2      	b.n	800a01e <__libc_init_array+0x1e>
 800a038:	0800c6d0 	.word	0x0800c6d0
 800a03c:	0800c6d0 	.word	0x0800c6d0
 800a040:	0800c6d0 	.word	0x0800c6d0
 800a044:	0800c6d4 	.word	0x0800c6d4

0800a048 <malloc>:
 800a048:	4b02      	ldr	r3, [pc, #8]	; (800a054 <malloc+0xc>)
 800a04a:	4601      	mov	r1, r0
 800a04c:	6818      	ldr	r0, [r3, #0]
 800a04e:	f000 b85b 	b.w	800a108 <_malloc_r>
 800a052:	bf00      	nop
 800a054:	2000011c 	.word	0x2000011c

0800a058 <memset>:
 800a058:	4402      	add	r2, r0
 800a05a:	4603      	mov	r3, r0
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d100      	bne.n	800a062 <memset+0xa>
 800a060:	4770      	bx	lr
 800a062:	f803 1b01 	strb.w	r1, [r3], #1
 800a066:	e7f9      	b.n	800a05c <memset+0x4>

0800a068 <_free_r>:
 800a068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06a:	2900      	cmp	r1, #0
 800a06c:	d048      	beq.n	800a100 <_free_r+0x98>
 800a06e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a072:	9001      	str	r0, [sp, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f1a1 0404 	sub.w	r4, r1, #4
 800a07a:	bfb8      	it	lt
 800a07c:	18e4      	addlt	r4, r4, r3
 800a07e:	f000 fc49 	bl	800a914 <__malloc_lock>
 800a082:	4a20      	ldr	r2, [pc, #128]	; (800a104 <_free_r+0x9c>)
 800a084:	9801      	ldr	r0, [sp, #4]
 800a086:	6813      	ldr	r3, [r2, #0]
 800a088:	4615      	mov	r5, r2
 800a08a:	b933      	cbnz	r3, 800a09a <_free_r+0x32>
 800a08c:	6063      	str	r3, [r4, #4]
 800a08e:	6014      	str	r4, [r2, #0]
 800a090:	b003      	add	sp, #12
 800a092:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a096:	f000 bc43 	b.w	800a920 <__malloc_unlock>
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	d90b      	bls.n	800a0b6 <_free_r+0x4e>
 800a09e:	6821      	ldr	r1, [r4, #0]
 800a0a0:	1862      	adds	r2, r4, r1
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	bf04      	itt	eq
 800a0a6:	681a      	ldreq	r2, [r3, #0]
 800a0a8:	685b      	ldreq	r3, [r3, #4]
 800a0aa:	6063      	str	r3, [r4, #4]
 800a0ac:	bf04      	itt	eq
 800a0ae:	1852      	addeq	r2, r2, r1
 800a0b0:	6022      	streq	r2, [r4, #0]
 800a0b2:	602c      	str	r4, [r5, #0]
 800a0b4:	e7ec      	b.n	800a090 <_free_r+0x28>
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	b10b      	cbz	r3, 800a0c0 <_free_r+0x58>
 800a0bc:	42a3      	cmp	r3, r4
 800a0be:	d9fa      	bls.n	800a0b6 <_free_r+0x4e>
 800a0c0:	6811      	ldr	r1, [r2, #0]
 800a0c2:	1855      	adds	r5, r2, r1
 800a0c4:	42a5      	cmp	r5, r4
 800a0c6:	d10b      	bne.n	800a0e0 <_free_r+0x78>
 800a0c8:	6824      	ldr	r4, [r4, #0]
 800a0ca:	4421      	add	r1, r4
 800a0cc:	1854      	adds	r4, r2, r1
 800a0ce:	42a3      	cmp	r3, r4
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	d1dd      	bne.n	800a090 <_free_r+0x28>
 800a0d4:	681c      	ldr	r4, [r3, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	6053      	str	r3, [r2, #4]
 800a0da:	4421      	add	r1, r4
 800a0dc:	6011      	str	r1, [r2, #0]
 800a0de:	e7d7      	b.n	800a090 <_free_r+0x28>
 800a0e0:	d902      	bls.n	800a0e8 <_free_r+0x80>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	e7d3      	b.n	800a090 <_free_r+0x28>
 800a0e8:	6825      	ldr	r5, [r4, #0]
 800a0ea:	1961      	adds	r1, r4, r5
 800a0ec:	428b      	cmp	r3, r1
 800a0ee:	bf04      	itt	eq
 800a0f0:	6819      	ldreq	r1, [r3, #0]
 800a0f2:	685b      	ldreq	r3, [r3, #4]
 800a0f4:	6063      	str	r3, [r4, #4]
 800a0f6:	bf04      	itt	eq
 800a0f8:	1949      	addeq	r1, r1, r5
 800a0fa:	6021      	streq	r1, [r4, #0]
 800a0fc:	6054      	str	r4, [r2, #4]
 800a0fe:	e7c7      	b.n	800a090 <_free_r+0x28>
 800a100:	b003      	add	sp, #12
 800a102:	bd30      	pop	{r4, r5, pc}
 800a104:	20002288 	.word	0x20002288

0800a108 <_malloc_r>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	1ccd      	adds	r5, r1, #3
 800a10c:	f025 0503 	bic.w	r5, r5, #3
 800a110:	3508      	adds	r5, #8
 800a112:	2d0c      	cmp	r5, #12
 800a114:	bf38      	it	cc
 800a116:	250c      	movcc	r5, #12
 800a118:	2d00      	cmp	r5, #0
 800a11a:	4606      	mov	r6, r0
 800a11c:	db01      	blt.n	800a122 <_malloc_r+0x1a>
 800a11e:	42a9      	cmp	r1, r5
 800a120:	d903      	bls.n	800a12a <_malloc_r+0x22>
 800a122:	230c      	movs	r3, #12
 800a124:	6033      	str	r3, [r6, #0]
 800a126:	2000      	movs	r0, #0
 800a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a12a:	f000 fbf3 	bl	800a914 <__malloc_lock>
 800a12e:	4921      	ldr	r1, [pc, #132]	; (800a1b4 <_malloc_r+0xac>)
 800a130:	680a      	ldr	r2, [r1, #0]
 800a132:	4614      	mov	r4, r2
 800a134:	b99c      	cbnz	r4, 800a15e <_malloc_r+0x56>
 800a136:	4f20      	ldr	r7, [pc, #128]	; (800a1b8 <_malloc_r+0xb0>)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	b923      	cbnz	r3, 800a146 <_malloc_r+0x3e>
 800a13c:	4621      	mov	r1, r4
 800a13e:	4630      	mov	r0, r6
 800a140:	f000 f8b2 	bl	800a2a8 <_sbrk_r>
 800a144:	6038      	str	r0, [r7, #0]
 800a146:	4629      	mov	r1, r5
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 f8ad 	bl	800a2a8 <_sbrk_r>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	d123      	bne.n	800a19a <_malloc_r+0x92>
 800a152:	230c      	movs	r3, #12
 800a154:	6033      	str	r3, [r6, #0]
 800a156:	4630      	mov	r0, r6
 800a158:	f000 fbe2 	bl	800a920 <__malloc_unlock>
 800a15c:	e7e3      	b.n	800a126 <_malloc_r+0x1e>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	1b5b      	subs	r3, r3, r5
 800a162:	d417      	bmi.n	800a194 <_malloc_r+0x8c>
 800a164:	2b0b      	cmp	r3, #11
 800a166:	d903      	bls.n	800a170 <_malloc_r+0x68>
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	441c      	add	r4, r3
 800a16c:	6025      	str	r5, [r4, #0]
 800a16e:	e004      	b.n	800a17a <_malloc_r+0x72>
 800a170:	6863      	ldr	r3, [r4, #4]
 800a172:	42a2      	cmp	r2, r4
 800a174:	bf0c      	ite	eq
 800a176:	600b      	streq	r3, [r1, #0]
 800a178:	6053      	strne	r3, [r2, #4]
 800a17a:	4630      	mov	r0, r6
 800a17c:	f000 fbd0 	bl	800a920 <__malloc_unlock>
 800a180:	f104 000b 	add.w	r0, r4, #11
 800a184:	1d23      	adds	r3, r4, #4
 800a186:	f020 0007 	bic.w	r0, r0, #7
 800a18a:	1ac2      	subs	r2, r0, r3
 800a18c:	d0cc      	beq.n	800a128 <_malloc_r+0x20>
 800a18e:	1a1b      	subs	r3, r3, r0
 800a190:	50a3      	str	r3, [r4, r2]
 800a192:	e7c9      	b.n	800a128 <_malloc_r+0x20>
 800a194:	4622      	mov	r2, r4
 800a196:	6864      	ldr	r4, [r4, #4]
 800a198:	e7cc      	b.n	800a134 <_malloc_r+0x2c>
 800a19a:	1cc4      	adds	r4, r0, #3
 800a19c:	f024 0403 	bic.w	r4, r4, #3
 800a1a0:	42a0      	cmp	r0, r4
 800a1a2:	d0e3      	beq.n	800a16c <_malloc_r+0x64>
 800a1a4:	1a21      	subs	r1, r4, r0
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f000 f87e 	bl	800a2a8 <_sbrk_r>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d1dd      	bne.n	800a16c <_malloc_r+0x64>
 800a1b0:	e7cf      	b.n	800a152 <_malloc_r+0x4a>
 800a1b2:	bf00      	nop
 800a1b4:	20002288 	.word	0x20002288
 800a1b8:	2000228c 	.word	0x2000228c

0800a1bc <_puts_r>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	b118      	cbz	r0, 800a1cc <_puts_r+0x10>
 800a1c4:	6983      	ldr	r3, [r0, #24]
 800a1c6:	b90b      	cbnz	r3, 800a1cc <_puts_r+0x10>
 800a1c8:	f000 faa0 	bl	800a70c <__sinit>
 800a1cc:	69ab      	ldr	r3, [r5, #24]
 800a1ce:	68ac      	ldr	r4, [r5, #8]
 800a1d0:	b913      	cbnz	r3, 800a1d8 <_puts_r+0x1c>
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f000 fa9a 	bl	800a70c <__sinit>
 800a1d8:	4b2c      	ldr	r3, [pc, #176]	; (800a28c <_puts_r+0xd0>)
 800a1da:	429c      	cmp	r4, r3
 800a1dc:	d120      	bne.n	800a220 <_puts_r+0x64>
 800a1de:	686c      	ldr	r4, [r5, #4]
 800a1e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1e2:	07db      	lsls	r3, r3, #31
 800a1e4:	d405      	bmi.n	800a1f2 <_puts_r+0x36>
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	0598      	lsls	r0, r3, #22
 800a1ea:	d402      	bmi.n	800a1f2 <_puts_r+0x36>
 800a1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ee:	f000 fb2b 	bl	800a848 <__retarget_lock_acquire_recursive>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	0719      	lsls	r1, r3, #28
 800a1f6:	d51d      	bpl.n	800a234 <_puts_r+0x78>
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	b1db      	cbz	r3, 800a234 <_puts_r+0x78>
 800a1fc:	3e01      	subs	r6, #1
 800a1fe:	68a3      	ldr	r3, [r4, #8]
 800a200:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a204:	3b01      	subs	r3, #1
 800a206:	60a3      	str	r3, [r4, #8]
 800a208:	bb39      	cbnz	r1, 800a25a <_puts_r+0x9e>
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	da38      	bge.n	800a280 <_puts_r+0xc4>
 800a20e:	4622      	mov	r2, r4
 800a210:	210a      	movs	r1, #10
 800a212:	4628      	mov	r0, r5
 800a214:	f000 f8a0 	bl	800a358 <__swbuf_r>
 800a218:	3001      	adds	r0, #1
 800a21a:	d011      	beq.n	800a240 <_puts_r+0x84>
 800a21c:	250a      	movs	r5, #10
 800a21e:	e011      	b.n	800a244 <_puts_r+0x88>
 800a220:	4b1b      	ldr	r3, [pc, #108]	; (800a290 <_puts_r+0xd4>)
 800a222:	429c      	cmp	r4, r3
 800a224:	d101      	bne.n	800a22a <_puts_r+0x6e>
 800a226:	68ac      	ldr	r4, [r5, #8]
 800a228:	e7da      	b.n	800a1e0 <_puts_r+0x24>
 800a22a:	4b1a      	ldr	r3, [pc, #104]	; (800a294 <_puts_r+0xd8>)
 800a22c:	429c      	cmp	r4, r3
 800a22e:	bf08      	it	eq
 800a230:	68ec      	ldreq	r4, [r5, #12]
 800a232:	e7d5      	b.n	800a1e0 <_puts_r+0x24>
 800a234:	4621      	mov	r1, r4
 800a236:	4628      	mov	r0, r5
 800a238:	f000 f8e0 	bl	800a3fc <__swsetup_r>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d0dd      	beq.n	800a1fc <_puts_r+0x40>
 800a240:	f04f 35ff 	mov.w	r5, #4294967295
 800a244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a246:	07da      	lsls	r2, r3, #31
 800a248:	d405      	bmi.n	800a256 <_puts_r+0x9a>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	059b      	lsls	r3, r3, #22
 800a24e:	d402      	bmi.n	800a256 <_puts_r+0x9a>
 800a250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a252:	f000 fafa 	bl	800a84a <__retarget_lock_release_recursive>
 800a256:	4628      	mov	r0, r5
 800a258:	bd70      	pop	{r4, r5, r6, pc}
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	da04      	bge.n	800a268 <_puts_r+0xac>
 800a25e:	69a2      	ldr	r2, [r4, #24]
 800a260:	429a      	cmp	r2, r3
 800a262:	dc06      	bgt.n	800a272 <_puts_r+0xb6>
 800a264:	290a      	cmp	r1, #10
 800a266:	d004      	beq.n	800a272 <_puts_r+0xb6>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	6022      	str	r2, [r4, #0]
 800a26e:	7019      	strb	r1, [r3, #0]
 800a270:	e7c5      	b.n	800a1fe <_puts_r+0x42>
 800a272:	4622      	mov	r2, r4
 800a274:	4628      	mov	r0, r5
 800a276:	f000 f86f 	bl	800a358 <__swbuf_r>
 800a27a:	3001      	adds	r0, #1
 800a27c:	d1bf      	bne.n	800a1fe <_puts_r+0x42>
 800a27e:	e7df      	b.n	800a240 <_puts_r+0x84>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	250a      	movs	r5, #10
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	6022      	str	r2, [r4, #0]
 800a288:	701d      	strb	r5, [r3, #0]
 800a28a:	e7db      	b.n	800a244 <_puts_r+0x88>
 800a28c:	0800c654 	.word	0x0800c654
 800a290:	0800c674 	.word	0x0800c674
 800a294:	0800c634 	.word	0x0800c634

0800a298 <puts>:
 800a298:	4b02      	ldr	r3, [pc, #8]	; (800a2a4 <puts+0xc>)
 800a29a:	4601      	mov	r1, r0
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	f7ff bf8d 	b.w	800a1bc <_puts_r>
 800a2a2:	bf00      	nop
 800a2a4:	2000011c 	.word	0x2000011c

0800a2a8 <_sbrk_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d06      	ldr	r5, [pc, #24]	; (800a2c4 <_sbrk_r+0x1c>)
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	602b      	str	r3, [r5, #0]
 800a2b4:	f7f7 fd36 	bl	8001d24 <_sbrk>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_sbrk_r+0x1a>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_sbrk_r+0x1a>
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	20002d18 	.word	0x20002d18

0800a2c8 <sniprintf>:
 800a2c8:	b40c      	push	{r2, r3}
 800a2ca:	b530      	push	{r4, r5, lr}
 800a2cc:	4b17      	ldr	r3, [pc, #92]	; (800a32c <sniprintf+0x64>)
 800a2ce:	1e0c      	subs	r4, r1, #0
 800a2d0:	681d      	ldr	r5, [r3, #0]
 800a2d2:	b09d      	sub	sp, #116	; 0x74
 800a2d4:	da08      	bge.n	800a2e8 <sniprintf+0x20>
 800a2d6:	238b      	movs	r3, #139	; 0x8b
 800a2d8:	602b      	str	r3, [r5, #0]
 800a2da:	f04f 30ff 	mov.w	r0, #4294967295
 800a2de:	b01d      	add	sp, #116	; 0x74
 800a2e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2e4:	b002      	add	sp, #8
 800a2e6:	4770      	bx	lr
 800a2e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a2ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a2f0:	bf14      	ite	ne
 800a2f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a2f6:	4623      	moveq	r3, r4
 800a2f8:	9304      	str	r3, [sp, #16]
 800a2fa:	9307      	str	r3, [sp, #28]
 800a2fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a300:	9002      	str	r0, [sp, #8]
 800a302:	9006      	str	r0, [sp, #24]
 800a304:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a308:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a30a:	ab21      	add	r3, sp, #132	; 0x84
 800a30c:	a902      	add	r1, sp, #8
 800a30e:	4628      	mov	r0, r5
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	f000 fb67 	bl	800a9e4 <_svfiprintf_r>
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	bfbc      	itt	lt
 800a31a:	238b      	movlt	r3, #139	; 0x8b
 800a31c:	602b      	strlt	r3, [r5, #0]
 800a31e:	2c00      	cmp	r4, #0
 800a320:	d0dd      	beq.n	800a2de <sniprintf+0x16>
 800a322:	9b02      	ldr	r3, [sp, #8]
 800a324:	2200      	movs	r2, #0
 800a326:	701a      	strb	r2, [r3, #0]
 800a328:	e7d9      	b.n	800a2de <sniprintf+0x16>
 800a32a:	bf00      	nop
 800a32c:	2000011c 	.word	0x2000011c

0800a330 <strncpy>:
 800a330:	b510      	push	{r4, lr}
 800a332:	3901      	subs	r1, #1
 800a334:	4603      	mov	r3, r0
 800a336:	b132      	cbz	r2, 800a346 <strncpy+0x16>
 800a338:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a33c:	f803 4b01 	strb.w	r4, [r3], #1
 800a340:	3a01      	subs	r2, #1
 800a342:	2c00      	cmp	r4, #0
 800a344:	d1f7      	bne.n	800a336 <strncpy+0x6>
 800a346:	441a      	add	r2, r3
 800a348:	2100      	movs	r1, #0
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d100      	bne.n	800a350 <strncpy+0x20>
 800a34e:	bd10      	pop	{r4, pc}
 800a350:	f803 1b01 	strb.w	r1, [r3], #1
 800a354:	e7f9      	b.n	800a34a <strncpy+0x1a>
	...

0800a358 <__swbuf_r>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	460e      	mov	r6, r1
 800a35c:	4614      	mov	r4, r2
 800a35e:	4605      	mov	r5, r0
 800a360:	b118      	cbz	r0, 800a36a <__swbuf_r+0x12>
 800a362:	6983      	ldr	r3, [r0, #24]
 800a364:	b90b      	cbnz	r3, 800a36a <__swbuf_r+0x12>
 800a366:	f000 f9d1 	bl	800a70c <__sinit>
 800a36a:	4b21      	ldr	r3, [pc, #132]	; (800a3f0 <__swbuf_r+0x98>)
 800a36c:	429c      	cmp	r4, r3
 800a36e:	d12b      	bne.n	800a3c8 <__swbuf_r+0x70>
 800a370:	686c      	ldr	r4, [r5, #4]
 800a372:	69a3      	ldr	r3, [r4, #24]
 800a374:	60a3      	str	r3, [r4, #8]
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	071a      	lsls	r2, r3, #28
 800a37a:	d52f      	bpl.n	800a3dc <__swbuf_r+0x84>
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	b36b      	cbz	r3, 800a3dc <__swbuf_r+0x84>
 800a380:	6923      	ldr	r3, [r4, #16]
 800a382:	6820      	ldr	r0, [r4, #0]
 800a384:	1ac0      	subs	r0, r0, r3
 800a386:	6963      	ldr	r3, [r4, #20]
 800a388:	b2f6      	uxtb	r6, r6
 800a38a:	4283      	cmp	r3, r0
 800a38c:	4637      	mov	r7, r6
 800a38e:	dc04      	bgt.n	800a39a <__swbuf_r+0x42>
 800a390:	4621      	mov	r1, r4
 800a392:	4628      	mov	r0, r5
 800a394:	f000 f926 	bl	800a5e4 <_fflush_r>
 800a398:	bb30      	cbnz	r0, 800a3e8 <__swbuf_r+0x90>
 800a39a:	68a3      	ldr	r3, [r4, #8]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	60a3      	str	r3, [r4, #8]
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	1c5a      	adds	r2, r3, #1
 800a3a4:	6022      	str	r2, [r4, #0]
 800a3a6:	701e      	strb	r6, [r3, #0]
 800a3a8:	6963      	ldr	r3, [r4, #20]
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	4283      	cmp	r3, r0
 800a3ae:	d004      	beq.n	800a3ba <__swbuf_r+0x62>
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	07db      	lsls	r3, r3, #31
 800a3b4:	d506      	bpl.n	800a3c4 <__swbuf_r+0x6c>
 800a3b6:	2e0a      	cmp	r6, #10
 800a3b8:	d104      	bne.n	800a3c4 <__swbuf_r+0x6c>
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	4628      	mov	r0, r5
 800a3be:	f000 f911 	bl	800a5e4 <_fflush_r>
 800a3c2:	b988      	cbnz	r0, 800a3e8 <__swbuf_r+0x90>
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <__swbuf_r+0x9c>)
 800a3ca:	429c      	cmp	r4, r3
 800a3cc:	d101      	bne.n	800a3d2 <__swbuf_r+0x7a>
 800a3ce:	68ac      	ldr	r4, [r5, #8]
 800a3d0:	e7cf      	b.n	800a372 <__swbuf_r+0x1a>
 800a3d2:	4b09      	ldr	r3, [pc, #36]	; (800a3f8 <__swbuf_r+0xa0>)
 800a3d4:	429c      	cmp	r4, r3
 800a3d6:	bf08      	it	eq
 800a3d8:	68ec      	ldreq	r4, [r5, #12]
 800a3da:	e7ca      	b.n	800a372 <__swbuf_r+0x1a>
 800a3dc:	4621      	mov	r1, r4
 800a3de:	4628      	mov	r0, r5
 800a3e0:	f000 f80c 	bl	800a3fc <__swsetup_r>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d0cb      	beq.n	800a380 <__swbuf_r+0x28>
 800a3e8:	f04f 37ff 	mov.w	r7, #4294967295
 800a3ec:	e7ea      	b.n	800a3c4 <__swbuf_r+0x6c>
 800a3ee:	bf00      	nop
 800a3f0:	0800c654 	.word	0x0800c654
 800a3f4:	0800c674 	.word	0x0800c674
 800a3f8:	0800c634 	.word	0x0800c634

0800a3fc <__swsetup_r>:
 800a3fc:	4b32      	ldr	r3, [pc, #200]	; (800a4c8 <__swsetup_r+0xcc>)
 800a3fe:	b570      	push	{r4, r5, r6, lr}
 800a400:	681d      	ldr	r5, [r3, #0]
 800a402:	4606      	mov	r6, r0
 800a404:	460c      	mov	r4, r1
 800a406:	b125      	cbz	r5, 800a412 <__swsetup_r+0x16>
 800a408:	69ab      	ldr	r3, [r5, #24]
 800a40a:	b913      	cbnz	r3, 800a412 <__swsetup_r+0x16>
 800a40c:	4628      	mov	r0, r5
 800a40e:	f000 f97d 	bl	800a70c <__sinit>
 800a412:	4b2e      	ldr	r3, [pc, #184]	; (800a4cc <__swsetup_r+0xd0>)
 800a414:	429c      	cmp	r4, r3
 800a416:	d10f      	bne.n	800a438 <__swsetup_r+0x3c>
 800a418:	686c      	ldr	r4, [r5, #4]
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a420:	0719      	lsls	r1, r3, #28
 800a422:	d42c      	bmi.n	800a47e <__swsetup_r+0x82>
 800a424:	06dd      	lsls	r5, r3, #27
 800a426:	d411      	bmi.n	800a44c <__swsetup_r+0x50>
 800a428:	2309      	movs	r3, #9
 800a42a:	6033      	str	r3, [r6, #0]
 800a42c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a430:	81a3      	strh	r3, [r4, #12]
 800a432:	f04f 30ff 	mov.w	r0, #4294967295
 800a436:	e03e      	b.n	800a4b6 <__swsetup_r+0xba>
 800a438:	4b25      	ldr	r3, [pc, #148]	; (800a4d0 <__swsetup_r+0xd4>)
 800a43a:	429c      	cmp	r4, r3
 800a43c:	d101      	bne.n	800a442 <__swsetup_r+0x46>
 800a43e:	68ac      	ldr	r4, [r5, #8]
 800a440:	e7eb      	b.n	800a41a <__swsetup_r+0x1e>
 800a442:	4b24      	ldr	r3, [pc, #144]	; (800a4d4 <__swsetup_r+0xd8>)
 800a444:	429c      	cmp	r4, r3
 800a446:	bf08      	it	eq
 800a448:	68ec      	ldreq	r4, [r5, #12]
 800a44a:	e7e6      	b.n	800a41a <__swsetup_r+0x1e>
 800a44c:	0758      	lsls	r0, r3, #29
 800a44e:	d512      	bpl.n	800a476 <__swsetup_r+0x7a>
 800a450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a452:	b141      	cbz	r1, 800a466 <__swsetup_r+0x6a>
 800a454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a458:	4299      	cmp	r1, r3
 800a45a:	d002      	beq.n	800a462 <__swsetup_r+0x66>
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7ff fe03 	bl	800a068 <_free_r>
 800a462:	2300      	movs	r3, #0
 800a464:	6363      	str	r3, [r4, #52]	; 0x34
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a46c:	81a3      	strh	r3, [r4, #12]
 800a46e:	2300      	movs	r3, #0
 800a470:	6063      	str	r3, [r4, #4]
 800a472:	6923      	ldr	r3, [r4, #16]
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f043 0308 	orr.w	r3, r3, #8
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	b94b      	cbnz	r3, 800a496 <__swsetup_r+0x9a>
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a48c:	d003      	beq.n	800a496 <__swsetup_r+0x9a>
 800a48e:	4621      	mov	r1, r4
 800a490:	4630      	mov	r0, r6
 800a492:	f000 f9ff 	bl	800a894 <__smakebuf_r>
 800a496:	89a0      	ldrh	r0, [r4, #12]
 800a498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a49c:	f010 0301 	ands.w	r3, r0, #1
 800a4a0:	d00a      	beq.n	800a4b8 <__swsetup_r+0xbc>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60a3      	str	r3, [r4, #8]
 800a4a6:	6963      	ldr	r3, [r4, #20]
 800a4a8:	425b      	negs	r3, r3
 800a4aa:	61a3      	str	r3, [r4, #24]
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	b943      	cbnz	r3, 800a4c2 <__swsetup_r+0xc6>
 800a4b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4b4:	d1ba      	bne.n	800a42c <__swsetup_r+0x30>
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	0781      	lsls	r1, r0, #30
 800a4ba:	bf58      	it	pl
 800a4bc:	6963      	ldrpl	r3, [r4, #20]
 800a4be:	60a3      	str	r3, [r4, #8]
 800a4c0:	e7f4      	b.n	800a4ac <__swsetup_r+0xb0>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e7f7      	b.n	800a4b6 <__swsetup_r+0xba>
 800a4c6:	bf00      	nop
 800a4c8:	2000011c 	.word	0x2000011c
 800a4cc:	0800c654 	.word	0x0800c654
 800a4d0:	0800c674 	.word	0x0800c674
 800a4d4:	0800c634 	.word	0x0800c634

0800a4d8 <__sflush_r>:
 800a4d8:	898a      	ldrh	r2, [r1, #12]
 800a4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	4605      	mov	r5, r0
 800a4e0:	0710      	lsls	r0, r2, #28
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	d458      	bmi.n	800a598 <__sflush_r+0xc0>
 800a4e6:	684b      	ldr	r3, [r1, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	dc05      	bgt.n	800a4f8 <__sflush_r+0x20>
 800a4ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	dc02      	bgt.n	800a4f8 <__sflush_r+0x20>
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4fa:	2e00      	cmp	r6, #0
 800a4fc:	d0f9      	beq.n	800a4f2 <__sflush_r+0x1a>
 800a4fe:	2300      	movs	r3, #0
 800a500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a504:	682f      	ldr	r7, [r5, #0]
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	d032      	beq.n	800a570 <__sflush_r+0x98>
 800a50a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	075a      	lsls	r2, r3, #29
 800a510:	d505      	bpl.n	800a51e <__sflush_r+0x46>
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	1ac0      	subs	r0, r0, r3
 800a516:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a518:	b10b      	cbz	r3, 800a51e <__sflush_r+0x46>
 800a51a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a51c:	1ac0      	subs	r0, r0, r3
 800a51e:	2300      	movs	r3, #0
 800a520:	4602      	mov	r2, r0
 800a522:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a524:	6a21      	ldr	r1, [r4, #32]
 800a526:	4628      	mov	r0, r5
 800a528:	47b0      	blx	r6
 800a52a:	1c43      	adds	r3, r0, #1
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	d106      	bne.n	800a53e <__sflush_r+0x66>
 800a530:	6829      	ldr	r1, [r5, #0]
 800a532:	291d      	cmp	r1, #29
 800a534:	d82c      	bhi.n	800a590 <__sflush_r+0xb8>
 800a536:	4a2a      	ldr	r2, [pc, #168]	; (800a5e0 <__sflush_r+0x108>)
 800a538:	40ca      	lsrs	r2, r1
 800a53a:	07d6      	lsls	r6, r2, #31
 800a53c:	d528      	bpl.n	800a590 <__sflush_r+0xb8>
 800a53e:	2200      	movs	r2, #0
 800a540:	6062      	str	r2, [r4, #4]
 800a542:	04d9      	lsls	r1, r3, #19
 800a544:	6922      	ldr	r2, [r4, #16]
 800a546:	6022      	str	r2, [r4, #0]
 800a548:	d504      	bpl.n	800a554 <__sflush_r+0x7c>
 800a54a:	1c42      	adds	r2, r0, #1
 800a54c:	d101      	bne.n	800a552 <__sflush_r+0x7a>
 800a54e:	682b      	ldr	r3, [r5, #0]
 800a550:	b903      	cbnz	r3, 800a554 <__sflush_r+0x7c>
 800a552:	6560      	str	r0, [r4, #84]	; 0x54
 800a554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a556:	602f      	str	r7, [r5, #0]
 800a558:	2900      	cmp	r1, #0
 800a55a:	d0ca      	beq.n	800a4f2 <__sflush_r+0x1a>
 800a55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a560:	4299      	cmp	r1, r3
 800a562:	d002      	beq.n	800a56a <__sflush_r+0x92>
 800a564:	4628      	mov	r0, r5
 800a566:	f7ff fd7f 	bl	800a068 <_free_r>
 800a56a:	2000      	movs	r0, #0
 800a56c:	6360      	str	r0, [r4, #52]	; 0x34
 800a56e:	e7c1      	b.n	800a4f4 <__sflush_r+0x1c>
 800a570:	6a21      	ldr	r1, [r4, #32]
 800a572:	2301      	movs	r3, #1
 800a574:	4628      	mov	r0, r5
 800a576:	47b0      	blx	r6
 800a578:	1c41      	adds	r1, r0, #1
 800a57a:	d1c7      	bne.n	800a50c <__sflush_r+0x34>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0c4      	beq.n	800a50c <__sflush_r+0x34>
 800a582:	2b1d      	cmp	r3, #29
 800a584:	d001      	beq.n	800a58a <__sflush_r+0xb2>
 800a586:	2b16      	cmp	r3, #22
 800a588:	d101      	bne.n	800a58e <__sflush_r+0xb6>
 800a58a:	602f      	str	r7, [r5, #0]
 800a58c:	e7b1      	b.n	800a4f2 <__sflush_r+0x1a>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a594:	81a3      	strh	r3, [r4, #12]
 800a596:	e7ad      	b.n	800a4f4 <__sflush_r+0x1c>
 800a598:	690f      	ldr	r7, [r1, #16]
 800a59a:	2f00      	cmp	r7, #0
 800a59c:	d0a9      	beq.n	800a4f2 <__sflush_r+0x1a>
 800a59e:	0793      	lsls	r3, r2, #30
 800a5a0:	680e      	ldr	r6, [r1, #0]
 800a5a2:	bf08      	it	eq
 800a5a4:	694b      	ldreq	r3, [r1, #20]
 800a5a6:	600f      	str	r7, [r1, #0]
 800a5a8:	bf18      	it	ne
 800a5aa:	2300      	movne	r3, #0
 800a5ac:	eba6 0807 	sub.w	r8, r6, r7
 800a5b0:	608b      	str	r3, [r1, #8]
 800a5b2:	f1b8 0f00 	cmp.w	r8, #0
 800a5b6:	dd9c      	ble.n	800a4f2 <__sflush_r+0x1a>
 800a5b8:	6a21      	ldr	r1, [r4, #32]
 800a5ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5bc:	4643      	mov	r3, r8
 800a5be:	463a      	mov	r2, r7
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	47b0      	blx	r6
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	dc06      	bgt.n	800a5d6 <__sflush_r+0xfe>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ce:	81a3      	strh	r3, [r4, #12]
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d4:	e78e      	b.n	800a4f4 <__sflush_r+0x1c>
 800a5d6:	4407      	add	r7, r0
 800a5d8:	eba8 0800 	sub.w	r8, r8, r0
 800a5dc:	e7e9      	b.n	800a5b2 <__sflush_r+0xda>
 800a5de:	bf00      	nop
 800a5e0:	20400001 	.word	0x20400001

0800a5e4 <_fflush_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	690b      	ldr	r3, [r1, #16]
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	b913      	cbnz	r3, 800a5f4 <_fflush_r+0x10>
 800a5ee:	2500      	movs	r5, #0
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	b118      	cbz	r0, 800a5fe <_fflush_r+0x1a>
 800a5f6:	6983      	ldr	r3, [r0, #24]
 800a5f8:	b90b      	cbnz	r3, 800a5fe <_fflush_r+0x1a>
 800a5fa:	f000 f887 	bl	800a70c <__sinit>
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <_fflush_r+0x6c>)
 800a600:	429c      	cmp	r4, r3
 800a602:	d11b      	bne.n	800a63c <_fflush_r+0x58>
 800a604:	686c      	ldr	r4, [r5, #4]
 800a606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d0ef      	beq.n	800a5ee <_fflush_r+0xa>
 800a60e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a610:	07d0      	lsls	r0, r2, #31
 800a612:	d404      	bmi.n	800a61e <_fflush_r+0x3a>
 800a614:	0599      	lsls	r1, r3, #22
 800a616:	d402      	bmi.n	800a61e <_fflush_r+0x3a>
 800a618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a61a:	f000 f915 	bl	800a848 <__retarget_lock_acquire_recursive>
 800a61e:	4628      	mov	r0, r5
 800a620:	4621      	mov	r1, r4
 800a622:	f7ff ff59 	bl	800a4d8 <__sflush_r>
 800a626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a628:	07da      	lsls	r2, r3, #31
 800a62a:	4605      	mov	r5, r0
 800a62c:	d4e0      	bmi.n	800a5f0 <_fflush_r+0xc>
 800a62e:	89a3      	ldrh	r3, [r4, #12]
 800a630:	059b      	lsls	r3, r3, #22
 800a632:	d4dd      	bmi.n	800a5f0 <_fflush_r+0xc>
 800a634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a636:	f000 f908 	bl	800a84a <__retarget_lock_release_recursive>
 800a63a:	e7d9      	b.n	800a5f0 <_fflush_r+0xc>
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <_fflush_r+0x70>)
 800a63e:	429c      	cmp	r4, r3
 800a640:	d101      	bne.n	800a646 <_fflush_r+0x62>
 800a642:	68ac      	ldr	r4, [r5, #8]
 800a644:	e7df      	b.n	800a606 <_fflush_r+0x22>
 800a646:	4b04      	ldr	r3, [pc, #16]	; (800a658 <_fflush_r+0x74>)
 800a648:	429c      	cmp	r4, r3
 800a64a:	bf08      	it	eq
 800a64c:	68ec      	ldreq	r4, [r5, #12]
 800a64e:	e7da      	b.n	800a606 <_fflush_r+0x22>
 800a650:	0800c654 	.word	0x0800c654
 800a654:	0800c674 	.word	0x0800c674
 800a658:	0800c634 	.word	0x0800c634

0800a65c <std>:
 800a65c:	2300      	movs	r3, #0
 800a65e:	b510      	push	{r4, lr}
 800a660:	4604      	mov	r4, r0
 800a662:	e9c0 3300 	strd	r3, r3, [r0]
 800a666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a66a:	6083      	str	r3, [r0, #8]
 800a66c:	8181      	strh	r1, [r0, #12]
 800a66e:	6643      	str	r3, [r0, #100]	; 0x64
 800a670:	81c2      	strh	r2, [r0, #14]
 800a672:	6183      	str	r3, [r0, #24]
 800a674:	4619      	mov	r1, r3
 800a676:	2208      	movs	r2, #8
 800a678:	305c      	adds	r0, #92	; 0x5c
 800a67a:	f7ff fced 	bl	800a058 <memset>
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <std+0x38>)
 800a680:	6263      	str	r3, [r4, #36]	; 0x24
 800a682:	4b05      	ldr	r3, [pc, #20]	; (800a698 <std+0x3c>)
 800a684:	62a3      	str	r3, [r4, #40]	; 0x28
 800a686:	4b05      	ldr	r3, [pc, #20]	; (800a69c <std+0x40>)
 800a688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a68a:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <std+0x44>)
 800a68c:	6224      	str	r4, [r4, #32]
 800a68e:	6323      	str	r3, [r4, #48]	; 0x30
 800a690:	bd10      	pop	{r4, pc}
 800a692:	bf00      	nop
 800a694:	0800af0d 	.word	0x0800af0d
 800a698:	0800af2f 	.word	0x0800af2f
 800a69c:	0800af67 	.word	0x0800af67
 800a6a0:	0800af8b 	.word	0x0800af8b

0800a6a4 <_cleanup_r>:
 800a6a4:	4901      	ldr	r1, [pc, #4]	; (800a6ac <_cleanup_r+0x8>)
 800a6a6:	f000 b8af 	b.w	800a808 <_fwalk_reent>
 800a6aa:	bf00      	nop
 800a6ac:	0800a5e5 	.word	0x0800a5e5

0800a6b0 <__sfmoreglue>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	1e4a      	subs	r2, r1, #1
 800a6b4:	2568      	movs	r5, #104	; 0x68
 800a6b6:	4355      	muls	r5, r2
 800a6b8:	460e      	mov	r6, r1
 800a6ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6be:	f7ff fd23 	bl	800a108 <_malloc_r>
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	b140      	cbz	r0, 800a6d8 <__sfmoreglue+0x28>
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	e9c0 1600 	strd	r1, r6, [r0]
 800a6cc:	300c      	adds	r0, #12
 800a6ce:	60a0      	str	r0, [r4, #8]
 800a6d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6d4:	f7ff fcc0 	bl	800a058 <memset>
 800a6d8:	4620      	mov	r0, r4
 800a6da:	bd70      	pop	{r4, r5, r6, pc}

0800a6dc <__sfp_lock_acquire>:
 800a6dc:	4801      	ldr	r0, [pc, #4]	; (800a6e4 <__sfp_lock_acquire+0x8>)
 800a6de:	f000 b8b3 	b.w	800a848 <__retarget_lock_acquire_recursive>
 800a6e2:	bf00      	nop
 800a6e4:	20002d14 	.word	0x20002d14

0800a6e8 <__sfp_lock_release>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	; (800a6f0 <__sfp_lock_release+0x8>)
 800a6ea:	f000 b8ae 	b.w	800a84a <__retarget_lock_release_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	20002d14 	.word	0x20002d14

0800a6f4 <__sinit_lock_acquire>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__sinit_lock_acquire+0x8>)
 800a6f6:	f000 b8a7 	b.w	800a848 <__retarget_lock_acquire_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	20002d0f 	.word	0x20002d0f

0800a700 <__sinit_lock_release>:
 800a700:	4801      	ldr	r0, [pc, #4]	; (800a708 <__sinit_lock_release+0x8>)
 800a702:	f000 b8a2 	b.w	800a84a <__retarget_lock_release_recursive>
 800a706:	bf00      	nop
 800a708:	20002d0f 	.word	0x20002d0f

0800a70c <__sinit>:
 800a70c:	b510      	push	{r4, lr}
 800a70e:	4604      	mov	r4, r0
 800a710:	f7ff fff0 	bl	800a6f4 <__sinit_lock_acquire>
 800a714:	69a3      	ldr	r3, [r4, #24]
 800a716:	b11b      	cbz	r3, 800a720 <__sinit+0x14>
 800a718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a71c:	f7ff bff0 	b.w	800a700 <__sinit_lock_release>
 800a720:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a724:	6523      	str	r3, [r4, #80]	; 0x50
 800a726:	4b13      	ldr	r3, [pc, #76]	; (800a774 <__sinit+0x68>)
 800a728:	4a13      	ldr	r2, [pc, #76]	; (800a778 <__sinit+0x6c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a72e:	42a3      	cmp	r3, r4
 800a730:	bf04      	itt	eq
 800a732:	2301      	moveq	r3, #1
 800a734:	61a3      	streq	r3, [r4, #24]
 800a736:	4620      	mov	r0, r4
 800a738:	f000 f820 	bl	800a77c <__sfp>
 800a73c:	6060      	str	r0, [r4, #4]
 800a73e:	4620      	mov	r0, r4
 800a740:	f000 f81c 	bl	800a77c <__sfp>
 800a744:	60a0      	str	r0, [r4, #8]
 800a746:	4620      	mov	r0, r4
 800a748:	f000 f818 	bl	800a77c <__sfp>
 800a74c:	2200      	movs	r2, #0
 800a74e:	60e0      	str	r0, [r4, #12]
 800a750:	2104      	movs	r1, #4
 800a752:	6860      	ldr	r0, [r4, #4]
 800a754:	f7ff ff82 	bl	800a65c <std>
 800a758:	68a0      	ldr	r0, [r4, #8]
 800a75a:	2201      	movs	r2, #1
 800a75c:	2109      	movs	r1, #9
 800a75e:	f7ff ff7d 	bl	800a65c <std>
 800a762:	68e0      	ldr	r0, [r4, #12]
 800a764:	2202      	movs	r2, #2
 800a766:	2112      	movs	r1, #18
 800a768:	f7ff ff78 	bl	800a65c <std>
 800a76c:	2301      	movs	r3, #1
 800a76e:	61a3      	str	r3, [r4, #24]
 800a770:	e7d2      	b.n	800a718 <__sinit+0xc>
 800a772:	bf00      	nop
 800a774:	0800c630 	.word	0x0800c630
 800a778:	0800a6a5 	.word	0x0800a6a5

0800a77c <__sfp>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	4607      	mov	r7, r0
 800a780:	f7ff ffac 	bl	800a6dc <__sfp_lock_acquire>
 800a784:	4b1e      	ldr	r3, [pc, #120]	; (800a800 <__sfp+0x84>)
 800a786:	681e      	ldr	r6, [r3, #0]
 800a788:	69b3      	ldr	r3, [r6, #24]
 800a78a:	b913      	cbnz	r3, 800a792 <__sfp+0x16>
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7ff ffbd 	bl	800a70c <__sinit>
 800a792:	3648      	adds	r6, #72	; 0x48
 800a794:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a798:	3b01      	subs	r3, #1
 800a79a:	d503      	bpl.n	800a7a4 <__sfp+0x28>
 800a79c:	6833      	ldr	r3, [r6, #0]
 800a79e:	b30b      	cbz	r3, 800a7e4 <__sfp+0x68>
 800a7a0:	6836      	ldr	r6, [r6, #0]
 800a7a2:	e7f7      	b.n	800a794 <__sfp+0x18>
 800a7a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7a8:	b9d5      	cbnz	r5, 800a7e0 <__sfp+0x64>
 800a7aa:	4b16      	ldr	r3, [pc, #88]	; (800a804 <__sfp+0x88>)
 800a7ac:	60e3      	str	r3, [r4, #12]
 800a7ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7b2:	6665      	str	r5, [r4, #100]	; 0x64
 800a7b4:	f000 f847 	bl	800a846 <__retarget_lock_init_recursive>
 800a7b8:	f7ff ff96 	bl	800a6e8 <__sfp_lock_release>
 800a7bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7c4:	6025      	str	r5, [r4, #0]
 800a7c6:	61a5      	str	r5, [r4, #24]
 800a7c8:	2208      	movs	r2, #8
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7d0:	f7ff fc42 	bl	800a058 <memset>
 800a7d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7dc:	4620      	mov	r0, r4
 800a7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e0:	3468      	adds	r4, #104	; 0x68
 800a7e2:	e7d9      	b.n	800a798 <__sfp+0x1c>
 800a7e4:	2104      	movs	r1, #4
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	f7ff ff62 	bl	800a6b0 <__sfmoreglue>
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	6030      	str	r0, [r6, #0]
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d1d5      	bne.n	800a7a0 <__sfp+0x24>
 800a7f4:	f7ff ff78 	bl	800a6e8 <__sfp_lock_release>
 800a7f8:	230c      	movs	r3, #12
 800a7fa:	603b      	str	r3, [r7, #0]
 800a7fc:	e7ee      	b.n	800a7dc <__sfp+0x60>
 800a7fe:	bf00      	nop
 800a800:	0800c630 	.word	0x0800c630
 800a804:	ffff0001 	.word	0xffff0001

0800a808 <_fwalk_reent>:
 800a808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a80c:	4606      	mov	r6, r0
 800a80e:	4688      	mov	r8, r1
 800a810:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a814:	2700      	movs	r7, #0
 800a816:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a81a:	f1b9 0901 	subs.w	r9, r9, #1
 800a81e:	d505      	bpl.n	800a82c <_fwalk_reent+0x24>
 800a820:	6824      	ldr	r4, [r4, #0]
 800a822:	2c00      	cmp	r4, #0
 800a824:	d1f7      	bne.n	800a816 <_fwalk_reent+0xe>
 800a826:	4638      	mov	r0, r7
 800a828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a82c:	89ab      	ldrh	r3, [r5, #12]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d907      	bls.n	800a842 <_fwalk_reent+0x3a>
 800a832:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a836:	3301      	adds	r3, #1
 800a838:	d003      	beq.n	800a842 <_fwalk_reent+0x3a>
 800a83a:	4629      	mov	r1, r5
 800a83c:	4630      	mov	r0, r6
 800a83e:	47c0      	blx	r8
 800a840:	4307      	orrs	r7, r0
 800a842:	3568      	adds	r5, #104	; 0x68
 800a844:	e7e9      	b.n	800a81a <_fwalk_reent+0x12>

0800a846 <__retarget_lock_init_recursive>:
 800a846:	4770      	bx	lr

0800a848 <__retarget_lock_acquire_recursive>:
 800a848:	4770      	bx	lr

0800a84a <__retarget_lock_release_recursive>:
 800a84a:	4770      	bx	lr

0800a84c <__swhatbuf_r>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	460e      	mov	r6, r1
 800a850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a854:	2900      	cmp	r1, #0
 800a856:	b096      	sub	sp, #88	; 0x58
 800a858:	4614      	mov	r4, r2
 800a85a:	461d      	mov	r5, r3
 800a85c:	da07      	bge.n	800a86e <__swhatbuf_r+0x22>
 800a85e:	2300      	movs	r3, #0
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	89b3      	ldrh	r3, [r6, #12]
 800a864:	061a      	lsls	r2, r3, #24
 800a866:	d410      	bmi.n	800a88a <__swhatbuf_r+0x3e>
 800a868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a86c:	e00e      	b.n	800a88c <__swhatbuf_r+0x40>
 800a86e:	466a      	mov	r2, sp
 800a870:	f000 fbb2 	bl	800afd8 <_fstat_r>
 800a874:	2800      	cmp	r0, #0
 800a876:	dbf2      	blt.n	800a85e <__swhatbuf_r+0x12>
 800a878:	9a01      	ldr	r2, [sp, #4]
 800a87a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a87e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a882:	425a      	negs	r2, r3
 800a884:	415a      	adcs	r2, r3
 800a886:	602a      	str	r2, [r5, #0]
 800a888:	e7ee      	b.n	800a868 <__swhatbuf_r+0x1c>
 800a88a:	2340      	movs	r3, #64	; 0x40
 800a88c:	2000      	movs	r0, #0
 800a88e:	6023      	str	r3, [r4, #0]
 800a890:	b016      	add	sp, #88	; 0x58
 800a892:	bd70      	pop	{r4, r5, r6, pc}

0800a894 <__smakebuf_r>:
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a898:	079d      	lsls	r5, r3, #30
 800a89a:	4606      	mov	r6, r0
 800a89c:	460c      	mov	r4, r1
 800a89e:	d507      	bpl.n	800a8b0 <__smakebuf_r+0x1c>
 800a8a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	6163      	str	r3, [r4, #20]
 800a8ac:	b002      	add	sp, #8
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}
 800a8b0:	ab01      	add	r3, sp, #4
 800a8b2:	466a      	mov	r2, sp
 800a8b4:	f7ff ffca 	bl	800a84c <__swhatbuf_r>
 800a8b8:	9900      	ldr	r1, [sp, #0]
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff fc23 	bl	800a108 <_malloc_r>
 800a8c2:	b948      	cbnz	r0, 800a8d8 <__smakebuf_r+0x44>
 800a8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c8:	059a      	lsls	r2, r3, #22
 800a8ca:	d4ef      	bmi.n	800a8ac <__smakebuf_r+0x18>
 800a8cc:	f023 0303 	bic.w	r3, r3, #3
 800a8d0:	f043 0302 	orr.w	r3, r3, #2
 800a8d4:	81a3      	strh	r3, [r4, #12]
 800a8d6:	e7e3      	b.n	800a8a0 <__smakebuf_r+0xc>
 800a8d8:	4b0d      	ldr	r3, [pc, #52]	; (800a910 <__smakebuf_r+0x7c>)
 800a8da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	6020      	str	r0, [r4, #0]
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	6163      	str	r3, [r4, #20]
 800a8ea:	9b01      	ldr	r3, [sp, #4]
 800a8ec:	6120      	str	r0, [r4, #16]
 800a8ee:	b15b      	cbz	r3, 800a908 <__smakebuf_r+0x74>
 800a8f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f000 fb81 	bl	800affc <_isatty_r>
 800a8fa:	b128      	cbz	r0, 800a908 <__smakebuf_r+0x74>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	89a0      	ldrh	r0, [r4, #12]
 800a90a:	4305      	orrs	r5, r0
 800a90c:	81a5      	strh	r5, [r4, #12]
 800a90e:	e7cd      	b.n	800a8ac <__smakebuf_r+0x18>
 800a910:	0800a6a5 	.word	0x0800a6a5

0800a914 <__malloc_lock>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__malloc_lock+0x8>)
 800a916:	f7ff bf97 	b.w	800a848 <__retarget_lock_acquire_recursive>
 800a91a:	bf00      	nop
 800a91c:	20002d10 	.word	0x20002d10

0800a920 <__malloc_unlock>:
 800a920:	4801      	ldr	r0, [pc, #4]	; (800a928 <__malloc_unlock+0x8>)
 800a922:	f7ff bf92 	b.w	800a84a <__retarget_lock_release_recursive>
 800a926:	bf00      	nop
 800a928:	20002d10 	.word	0x20002d10

0800a92c <__ssputs_r>:
 800a92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a930:	688e      	ldr	r6, [r1, #8]
 800a932:	429e      	cmp	r6, r3
 800a934:	4682      	mov	sl, r0
 800a936:	460c      	mov	r4, r1
 800a938:	4690      	mov	r8, r2
 800a93a:	461f      	mov	r7, r3
 800a93c:	d838      	bhi.n	800a9b0 <__ssputs_r+0x84>
 800a93e:	898a      	ldrh	r2, [r1, #12]
 800a940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a944:	d032      	beq.n	800a9ac <__ssputs_r+0x80>
 800a946:	6825      	ldr	r5, [r4, #0]
 800a948:	6909      	ldr	r1, [r1, #16]
 800a94a:	eba5 0901 	sub.w	r9, r5, r1
 800a94e:	6965      	ldr	r5, [r4, #20]
 800a950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a958:	3301      	adds	r3, #1
 800a95a:	444b      	add	r3, r9
 800a95c:	106d      	asrs	r5, r5, #1
 800a95e:	429d      	cmp	r5, r3
 800a960:	bf38      	it	cc
 800a962:	461d      	movcc	r5, r3
 800a964:	0553      	lsls	r3, r2, #21
 800a966:	d531      	bpl.n	800a9cc <__ssputs_r+0xa0>
 800a968:	4629      	mov	r1, r5
 800a96a:	f7ff fbcd 	bl	800a108 <_malloc_r>
 800a96e:	4606      	mov	r6, r0
 800a970:	b950      	cbnz	r0, 800a988 <__ssputs_r+0x5c>
 800a972:	230c      	movs	r3, #12
 800a974:	f8ca 3000 	str.w	r3, [sl]
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a97e:	81a3      	strh	r3, [r4, #12]
 800a980:	f04f 30ff 	mov.w	r0, #4294967295
 800a984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a988:	6921      	ldr	r1, [r4, #16]
 800a98a:	464a      	mov	r2, r9
 800a98c:	f000 fb58 	bl	800b040 <memcpy>
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a99a:	81a3      	strh	r3, [r4, #12]
 800a99c:	6126      	str	r6, [r4, #16]
 800a99e:	6165      	str	r5, [r4, #20]
 800a9a0:	444e      	add	r6, r9
 800a9a2:	eba5 0509 	sub.w	r5, r5, r9
 800a9a6:	6026      	str	r6, [r4, #0]
 800a9a8:	60a5      	str	r5, [r4, #8]
 800a9aa:	463e      	mov	r6, r7
 800a9ac:	42be      	cmp	r6, r7
 800a9ae:	d900      	bls.n	800a9b2 <__ssputs_r+0x86>
 800a9b0:	463e      	mov	r6, r7
 800a9b2:	4632      	mov	r2, r6
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	4641      	mov	r1, r8
 800a9b8:	f000 fb50 	bl	800b05c <memmove>
 800a9bc:	68a3      	ldr	r3, [r4, #8]
 800a9be:	6822      	ldr	r2, [r4, #0]
 800a9c0:	1b9b      	subs	r3, r3, r6
 800a9c2:	4432      	add	r2, r6
 800a9c4:	60a3      	str	r3, [r4, #8]
 800a9c6:	6022      	str	r2, [r4, #0]
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e7db      	b.n	800a984 <__ssputs_r+0x58>
 800a9cc:	462a      	mov	r2, r5
 800a9ce:	f000 fb5f 	bl	800b090 <_realloc_r>
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d1e1      	bne.n	800a99c <__ssputs_r+0x70>
 800a9d8:	6921      	ldr	r1, [r4, #16]
 800a9da:	4650      	mov	r0, sl
 800a9dc:	f7ff fb44 	bl	800a068 <_free_r>
 800a9e0:	e7c7      	b.n	800a972 <__ssputs_r+0x46>
	...

0800a9e4 <_svfiprintf_r>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	4698      	mov	r8, r3
 800a9ea:	898b      	ldrh	r3, [r1, #12]
 800a9ec:	061b      	lsls	r3, r3, #24
 800a9ee:	b09d      	sub	sp, #116	; 0x74
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	460d      	mov	r5, r1
 800a9f4:	4614      	mov	r4, r2
 800a9f6:	d50e      	bpl.n	800aa16 <_svfiprintf_r+0x32>
 800a9f8:	690b      	ldr	r3, [r1, #16]
 800a9fa:	b963      	cbnz	r3, 800aa16 <_svfiprintf_r+0x32>
 800a9fc:	2140      	movs	r1, #64	; 0x40
 800a9fe:	f7ff fb83 	bl	800a108 <_malloc_r>
 800aa02:	6028      	str	r0, [r5, #0]
 800aa04:	6128      	str	r0, [r5, #16]
 800aa06:	b920      	cbnz	r0, 800aa12 <_svfiprintf_r+0x2e>
 800aa08:	230c      	movs	r3, #12
 800aa0a:	603b      	str	r3, [r7, #0]
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	e0d1      	b.n	800abb6 <_svfiprintf_r+0x1d2>
 800aa12:	2340      	movs	r3, #64	; 0x40
 800aa14:	616b      	str	r3, [r5, #20]
 800aa16:	2300      	movs	r3, #0
 800aa18:	9309      	str	r3, [sp, #36]	; 0x24
 800aa1a:	2320      	movs	r3, #32
 800aa1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa20:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa24:	2330      	movs	r3, #48	; 0x30
 800aa26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800abd0 <_svfiprintf_r+0x1ec>
 800aa2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa2e:	f04f 0901 	mov.w	r9, #1
 800aa32:	4623      	mov	r3, r4
 800aa34:	469a      	mov	sl, r3
 800aa36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa3a:	b10a      	cbz	r2, 800aa40 <_svfiprintf_r+0x5c>
 800aa3c:	2a25      	cmp	r2, #37	; 0x25
 800aa3e:	d1f9      	bne.n	800aa34 <_svfiprintf_r+0x50>
 800aa40:	ebba 0b04 	subs.w	fp, sl, r4
 800aa44:	d00b      	beq.n	800aa5e <_svfiprintf_r+0x7a>
 800aa46:	465b      	mov	r3, fp
 800aa48:	4622      	mov	r2, r4
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff ff6d 	bl	800a92c <__ssputs_r>
 800aa52:	3001      	adds	r0, #1
 800aa54:	f000 80aa 	beq.w	800abac <_svfiprintf_r+0x1c8>
 800aa58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa5a:	445a      	add	r2, fp
 800aa5c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa5e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 80a2 	beq.w	800abac <_svfiprintf_r+0x1c8>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa72:	f10a 0a01 	add.w	sl, sl, #1
 800aa76:	9304      	str	r3, [sp, #16]
 800aa78:	9307      	str	r3, [sp, #28]
 800aa7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa7e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa80:	4654      	mov	r4, sl
 800aa82:	2205      	movs	r2, #5
 800aa84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa88:	4851      	ldr	r0, [pc, #324]	; (800abd0 <_svfiprintf_r+0x1ec>)
 800aa8a:	f7f5 fbb1 	bl	80001f0 <memchr>
 800aa8e:	9a04      	ldr	r2, [sp, #16]
 800aa90:	b9d8      	cbnz	r0, 800aaca <_svfiprintf_r+0xe6>
 800aa92:	06d0      	lsls	r0, r2, #27
 800aa94:	bf44      	itt	mi
 800aa96:	2320      	movmi	r3, #32
 800aa98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa9c:	0711      	lsls	r1, r2, #28
 800aa9e:	bf44      	itt	mi
 800aaa0:	232b      	movmi	r3, #43	; 0x2b
 800aaa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaa6:	f89a 3000 	ldrb.w	r3, [sl]
 800aaaa:	2b2a      	cmp	r3, #42	; 0x2a
 800aaac:	d015      	beq.n	800aada <_svfiprintf_r+0xf6>
 800aaae:	9a07      	ldr	r2, [sp, #28]
 800aab0:	4654      	mov	r4, sl
 800aab2:	2000      	movs	r0, #0
 800aab4:	f04f 0c0a 	mov.w	ip, #10
 800aab8:	4621      	mov	r1, r4
 800aaba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aabe:	3b30      	subs	r3, #48	; 0x30
 800aac0:	2b09      	cmp	r3, #9
 800aac2:	d94e      	bls.n	800ab62 <_svfiprintf_r+0x17e>
 800aac4:	b1b0      	cbz	r0, 800aaf4 <_svfiprintf_r+0x110>
 800aac6:	9207      	str	r2, [sp, #28]
 800aac8:	e014      	b.n	800aaf4 <_svfiprintf_r+0x110>
 800aaca:	eba0 0308 	sub.w	r3, r0, r8
 800aace:	fa09 f303 	lsl.w	r3, r9, r3
 800aad2:	4313      	orrs	r3, r2
 800aad4:	9304      	str	r3, [sp, #16]
 800aad6:	46a2      	mov	sl, r4
 800aad8:	e7d2      	b.n	800aa80 <_svfiprintf_r+0x9c>
 800aada:	9b03      	ldr	r3, [sp, #12]
 800aadc:	1d19      	adds	r1, r3, #4
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	9103      	str	r1, [sp, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	bfbb      	ittet	lt
 800aae6:	425b      	neglt	r3, r3
 800aae8:	f042 0202 	orrlt.w	r2, r2, #2
 800aaec:	9307      	strge	r3, [sp, #28]
 800aaee:	9307      	strlt	r3, [sp, #28]
 800aaf0:	bfb8      	it	lt
 800aaf2:	9204      	strlt	r2, [sp, #16]
 800aaf4:	7823      	ldrb	r3, [r4, #0]
 800aaf6:	2b2e      	cmp	r3, #46	; 0x2e
 800aaf8:	d10c      	bne.n	800ab14 <_svfiprintf_r+0x130>
 800aafa:	7863      	ldrb	r3, [r4, #1]
 800aafc:	2b2a      	cmp	r3, #42	; 0x2a
 800aafe:	d135      	bne.n	800ab6c <_svfiprintf_r+0x188>
 800ab00:	9b03      	ldr	r3, [sp, #12]
 800ab02:	1d1a      	adds	r2, r3, #4
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	9203      	str	r2, [sp, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfb8      	it	lt
 800ab0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab10:	3402      	adds	r4, #2
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800abe0 <_svfiprintf_r+0x1fc>
 800ab18:	7821      	ldrb	r1, [r4, #0]
 800ab1a:	2203      	movs	r2, #3
 800ab1c:	4650      	mov	r0, sl
 800ab1e:	f7f5 fb67 	bl	80001f0 <memchr>
 800ab22:	b140      	cbz	r0, 800ab36 <_svfiprintf_r+0x152>
 800ab24:	2340      	movs	r3, #64	; 0x40
 800ab26:	eba0 000a 	sub.w	r0, r0, sl
 800ab2a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab2e:	9b04      	ldr	r3, [sp, #16]
 800ab30:	4303      	orrs	r3, r0
 800ab32:	3401      	adds	r4, #1
 800ab34:	9304      	str	r3, [sp, #16]
 800ab36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab3a:	4826      	ldr	r0, [pc, #152]	; (800abd4 <_svfiprintf_r+0x1f0>)
 800ab3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab40:	2206      	movs	r2, #6
 800ab42:	f7f5 fb55 	bl	80001f0 <memchr>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d038      	beq.n	800abbc <_svfiprintf_r+0x1d8>
 800ab4a:	4b23      	ldr	r3, [pc, #140]	; (800abd8 <_svfiprintf_r+0x1f4>)
 800ab4c:	bb1b      	cbnz	r3, 800ab96 <_svfiprintf_r+0x1b2>
 800ab4e:	9b03      	ldr	r3, [sp, #12]
 800ab50:	3307      	adds	r3, #7
 800ab52:	f023 0307 	bic.w	r3, r3, #7
 800ab56:	3308      	adds	r3, #8
 800ab58:	9303      	str	r3, [sp, #12]
 800ab5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5c:	4433      	add	r3, r6
 800ab5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab60:	e767      	b.n	800aa32 <_svfiprintf_r+0x4e>
 800ab62:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab66:	460c      	mov	r4, r1
 800ab68:	2001      	movs	r0, #1
 800ab6a:	e7a5      	b.n	800aab8 <_svfiprintf_r+0xd4>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	3401      	adds	r4, #1
 800ab70:	9305      	str	r3, [sp, #20]
 800ab72:	4619      	mov	r1, r3
 800ab74:	f04f 0c0a 	mov.w	ip, #10
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab7e:	3a30      	subs	r2, #48	; 0x30
 800ab80:	2a09      	cmp	r2, #9
 800ab82:	d903      	bls.n	800ab8c <_svfiprintf_r+0x1a8>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d0c5      	beq.n	800ab14 <_svfiprintf_r+0x130>
 800ab88:	9105      	str	r1, [sp, #20]
 800ab8a:	e7c3      	b.n	800ab14 <_svfiprintf_r+0x130>
 800ab8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab90:	4604      	mov	r4, r0
 800ab92:	2301      	movs	r3, #1
 800ab94:	e7f0      	b.n	800ab78 <_svfiprintf_r+0x194>
 800ab96:	ab03      	add	r3, sp, #12
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	462a      	mov	r2, r5
 800ab9c:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <_svfiprintf_r+0x1f8>)
 800ab9e:	a904      	add	r1, sp, #16
 800aba0:	4638      	mov	r0, r7
 800aba2:	f3af 8000 	nop.w
 800aba6:	1c42      	adds	r2, r0, #1
 800aba8:	4606      	mov	r6, r0
 800abaa:	d1d6      	bne.n	800ab5a <_svfiprintf_r+0x176>
 800abac:	89ab      	ldrh	r3, [r5, #12]
 800abae:	065b      	lsls	r3, r3, #25
 800abb0:	f53f af2c 	bmi.w	800aa0c <_svfiprintf_r+0x28>
 800abb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abb6:	b01d      	add	sp, #116	; 0x74
 800abb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbc:	ab03      	add	r3, sp, #12
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	462a      	mov	r2, r5
 800abc2:	4b06      	ldr	r3, [pc, #24]	; (800abdc <_svfiprintf_r+0x1f8>)
 800abc4:	a904      	add	r1, sp, #16
 800abc6:	4638      	mov	r0, r7
 800abc8:	f000 f87a 	bl	800acc0 <_printf_i>
 800abcc:	e7eb      	b.n	800aba6 <_svfiprintf_r+0x1c2>
 800abce:	bf00      	nop
 800abd0:	0800c694 	.word	0x0800c694
 800abd4:	0800c69e 	.word	0x0800c69e
 800abd8:	00000000 	.word	0x00000000
 800abdc:	0800a92d 	.word	0x0800a92d
 800abe0:	0800c69a 	.word	0x0800c69a

0800abe4 <_printf_common>:
 800abe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe8:	4616      	mov	r6, r2
 800abea:	4699      	mov	r9, r3
 800abec:	688a      	ldr	r2, [r1, #8]
 800abee:	690b      	ldr	r3, [r1, #16]
 800abf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abf4:	4293      	cmp	r3, r2
 800abf6:	bfb8      	it	lt
 800abf8:	4613      	movlt	r3, r2
 800abfa:	6033      	str	r3, [r6, #0]
 800abfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac00:	4607      	mov	r7, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	b10a      	cbz	r2, 800ac0a <_printf_common+0x26>
 800ac06:	3301      	adds	r3, #1
 800ac08:	6033      	str	r3, [r6, #0]
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	0699      	lsls	r1, r3, #26
 800ac0e:	bf42      	ittt	mi
 800ac10:	6833      	ldrmi	r3, [r6, #0]
 800ac12:	3302      	addmi	r3, #2
 800ac14:	6033      	strmi	r3, [r6, #0]
 800ac16:	6825      	ldr	r5, [r4, #0]
 800ac18:	f015 0506 	ands.w	r5, r5, #6
 800ac1c:	d106      	bne.n	800ac2c <_printf_common+0x48>
 800ac1e:	f104 0a19 	add.w	sl, r4, #25
 800ac22:	68e3      	ldr	r3, [r4, #12]
 800ac24:	6832      	ldr	r2, [r6, #0]
 800ac26:	1a9b      	subs	r3, r3, r2
 800ac28:	42ab      	cmp	r3, r5
 800ac2a:	dc26      	bgt.n	800ac7a <_printf_common+0x96>
 800ac2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac30:	1e13      	subs	r3, r2, #0
 800ac32:	6822      	ldr	r2, [r4, #0]
 800ac34:	bf18      	it	ne
 800ac36:	2301      	movne	r3, #1
 800ac38:	0692      	lsls	r2, r2, #26
 800ac3a:	d42b      	bmi.n	800ac94 <_printf_common+0xb0>
 800ac3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac40:	4649      	mov	r1, r9
 800ac42:	4638      	mov	r0, r7
 800ac44:	47c0      	blx	r8
 800ac46:	3001      	adds	r0, #1
 800ac48:	d01e      	beq.n	800ac88 <_printf_common+0xa4>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	68e5      	ldr	r5, [r4, #12]
 800ac4e:	6832      	ldr	r2, [r6, #0]
 800ac50:	f003 0306 	and.w	r3, r3, #6
 800ac54:	2b04      	cmp	r3, #4
 800ac56:	bf08      	it	eq
 800ac58:	1aad      	subeq	r5, r5, r2
 800ac5a:	68a3      	ldr	r3, [r4, #8]
 800ac5c:	6922      	ldr	r2, [r4, #16]
 800ac5e:	bf0c      	ite	eq
 800ac60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac64:	2500      	movne	r5, #0
 800ac66:	4293      	cmp	r3, r2
 800ac68:	bfc4      	itt	gt
 800ac6a:	1a9b      	subgt	r3, r3, r2
 800ac6c:	18ed      	addgt	r5, r5, r3
 800ac6e:	2600      	movs	r6, #0
 800ac70:	341a      	adds	r4, #26
 800ac72:	42b5      	cmp	r5, r6
 800ac74:	d11a      	bne.n	800acac <_printf_common+0xc8>
 800ac76:	2000      	movs	r0, #0
 800ac78:	e008      	b.n	800ac8c <_printf_common+0xa8>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	4652      	mov	r2, sl
 800ac7e:	4649      	mov	r1, r9
 800ac80:	4638      	mov	r0, r7
 800ac82:	47c0      	blx	r8
 800ac84:	3001      	adds	r0, #1
 800ac86:	d103      	bne.n	800ac90 <_printf_common+0xac>
 800ac88:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac90:	3501      	adds	r5, #1
 800ac92:	e7c6      	b.n	800ac22 <_printf_common+0x3e>
 800ac94:	18e1      	adds	r1, r4, r3
 800ac96:	1c5a      	adds	r2, r3, #1
 800ac98:	2030      	movs	r0, #48	; 0x30
 800ac9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac9e:	4422      	add	r2, r4
 800aca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aca8:	3302      	adds	r3, #2
 800acaa:	e7c7      	b.n	800ac3c <_printf_common+0x58>
 800acac:	2301      	movs	r3, #1
 800acae:	4622      	mov	r2, r4
 800acb0:	4649      	mov	r1, r9
 800acb2:	4638      	mov	r0, r7
 800acb4:	47c0      	blx	r8
 800acb6:	3001      	adds	r0, #1
 800acb8:	d0e6      	beq.n	800ac88 <_printf_common+0xa4>
 800acba:	3601      	adds	r6, #1
 800acbc:	e7d9      	b.n	800ac72 <_printf_common+0x8e>
	...

0800acc0 <_printf_i>:
 800acc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acc4:	460c      	mov	r4, r1
 800acc6:	4691      	mov	r9, r2
 800acc8:	7e27      	ldrb	r7, [r4, #24]
 800acca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800accc:	2f78      	cmp	r7, #120	; 0x78
 800acce:	4680      	mov	r8, r0
 800acd0:	469a      	mov	sl, r3
 800acd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acd6:	d807      	bhi.n	800ace8 <_printf_i+0x28>
 800acd8:	2f62      	cmp	r7, #98	; 0x62
 800acda:	d80a      	bhi.n	800acf2 <_printf_i+0x32>
 800acdc:	2f00      	cmp	r7, #0
 800acde:	f000 80d8 	beq.w	800ae92 <_printf_i+0x1d2>
 800ace2:	2f58      	cmp	r7, #88	; 0x58
 800ace4:	f000 80a3 	beq.w	800ae2e <_printf_i+0x16e>
 800ace8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800acec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acf0:	e03a      	b.n	800ad68 <_printf_i+0xa8>
 800acf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acf6:	2b15      	cmp	r3, #21
 800acf8:	d8f6      	bhi.n	800ace8 <_printf_i+0x28>
 800acfa:	a001      	add	r0, pc, #4	; (adr r0, 800ad00 <_printf_i+0x40>)
 800acfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ad00:	0800ad59 	.word	0x0800ad59
 800ad04:	0800ad6d 	.word	0x0800ad6d
 800ad08:	0800ace9 	.word	0x0800ace9
 800ad0c:	0800ace9 	.word	0x0800ace9
 800ad10:	0800ace9 	.word	0x0800ace9
 800ad14:	0800ace9 	.word	0x0800ace9
 800ad18:	0800ad6d 	.word	0x0800ad6d
 800ad1c:	0800ace9 	.word	0x0800ace9
 800ad20:	0800ace9 	.word	0x0800ace9
 800ad24:	0800ace9 	.word	0x0800ace9
 800ad28:	0800ace9 	.word	0x0800ace9
 800ad2c:	0800ae79 	.word	0x0800ae79
 800ad30:	0800ad9d 	.word	0x0800ad9d
 800ad34:	0800ae5b 	.word	0x0800ae5b
 800ad38:	0800ace9 	.word	0x0800ace9
 800ad3c:	0800ace9 	.word	0x0800ace9
 800ad40:	0800ae9b 	.word	0x0800ae9b
 800ad44:	0800ace9 	.word	0x0800ace9
 800ad48:	0800ad9d 	.word	0x0800ad9d
 800ad4c:	0800ace9 	.word	0x0800ace9
 800ad50:	0800ace9 	.word	0x0800ace9
 800ad54:	0800ae63 	.word	0x0800ae63
 800ad58:	680b      	ldr	r3, [r1, #0]
 800ad5a:	1d1a      	adds	r2, r3, #4
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	600a      	str	r2, [r1, #0]
 800ad60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e0a3      	b.n	800aeb4 <_printf_i+0x1f4>
 800ad6c:	6825      	ldr	r5, [r4, #0]
 800ad6e:	6808      	ldr	r0, [r1, #0]
 800ad70:	062e      	lsls	r6, r5, #24
 800ad72:	f100 0304 	add.w	r3, r0, #4
 800ad76:	d50a      	bpl.n	800ad8e <_printf_i+0xce>
 800ad78:	6805      	ldr	r5, [r0, #0]
 800ad7a:	600b      	str	r3, [r1, #0]
 800ad7c:	2d00      	cmp	r5, #0
 800ad7e:	da03      	bge.n	800ad88 <_printf_i+0xc8>
 800ad80:	232d      	movs	r3, #45	; 0x2d
 800ad82:	426d      	negs	r5, r5
 800ad84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad88:	485e      	ldr	r0, [pc, #376]	; (800af04 <_printf_i+0x244>)
 800ad8a:	230a      	movs	r3, #10
 800ad8c:	e019      	b.n	800adc2 <_printf_i+0x102>
 800ad8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad92:	6805      	ldr	r5, [r0, #0]
 800ad94:	600b      	str	r3, [r1, #0]
 800ad96:	bf18      	it	ne
 800ad98:	b22d      	sxthne	r5, r5
 800ad9a:	e7ef      	b.n	800ad7c <_printf_i+0xbc>
 800ad9c:	680b      	ldr	r3, [r1, #0]
 800ad9e:	6825      	ldr	r5, [r4, #0]
 800ada0:	1d18      	adds	r0, r3, #4
 800ada2:	6008      	str	r0, [r1, #0]
 800ada4:	0628      	lsls	r0, r5, #24
 800ada6:	d501      	bpl.n	800adac <_printf_i+0xec>
 800ada8:	681d      	ldr	r5, [r3, #0]
 800adaa:	e002      	b.n	800adb2 <_printf_i+0xf2>
 800adac:	0669      	lsls	r1, r5, #25
 800adae:	d5fb      	bpl.n	800ada8 <_printf_i+0xe8>
 800adb0:	881d      	ldrh	r5, [r3, #0]
 800adb2:	4854      	ldr	r0, [pc, #336]	; (800af04 <_printf_i+0x244>)
 800adb4:	2f6f      	cmp	r7, #111	; 0x6f
 800adb6:	bf0c      	ite	eq
 800adb8:	2308      	moveq	r3, #8
 800adba:	230a      	movne	r3, #10
 800adbc:	2100      	movs	r1, #0
 800adbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adc2:	6866      	ldr	r6, [r4, #4]
 800adc4:	60a6      	str	r6, [r4, #8]
 800adc6:	2e00      	cmp	r6, #0
 800adc8:	bfa2      	ittt	ge
 800adca:	6821      	ldrge	r1, [r4, #0]
 800adcc:	f021 0104 	bicge.w	r1, r1, #4
 800add0:	6021      	strge	r1, [r4, #0]
 800add2:	b90d      	cbnz	r5, 800add8 <_printf_i+0x118>
 800add4:	2e00      	cmp	r6, #0
 800add6:	d04d      	beq.n	800ae74 <_printf_i+0x1b4>
 800add8:	4616      	mov	r6, r2
 800adda:	fbb5 f1f3 	udiv	r1, r5, r3
 800adde:	fb03 5711 	mls	r7, r3, r1, r5
 800ade2:	5dc7      	ldrb	r7, [r0, r7]
 800ade4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ade8:	462f      	mov	r7, r5
 800adea:	42bb      	cmp	r3, r7
 800adec:	460d      	mov	r5, r1
 800adee:	d9f4      	bls.n	800adda <_printf_i+0x11a>
 800adf0:	2b08      	cmp	r3, #8
 800adf2:	d10b      	bne.n	800ae0c <_printf_i+0x14c>
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	07df      	lsls	r7, r3, #31
 800adf8:	d508      	bpl.n	800ae0c <_printf_i+0x14c>
 800adfa:	6923      	ldr	r3, [r4, #16]
 800adfc:	6861      	ldr	r1, [r4, #4]
 800adfe:	4299      	cmp	r1, r3
 800ae00:	bfde      	ittt	le
 800ae02:	2330      	movle	r3, #48	; 0x30
 800ae04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae0c:	1b92      	subs	r2, r2, r6
 800ae0e:	6122      	str	r2, [r4, #16]
 800ae10:	f8cd a000 	str.w	sl, [sp]
 800ae14:	464b      	mov	r3, r9
 800ae16:	aa03      	add	r2, sp, #12
 800ae18:	4621      	mov	r1, r4
 800ae1a:	4640      	mov	r0, r8
 800ae1c:	f7ff fee2 	bl	800abe4 <_printf_common>
 800ae20:	3001      	adds	r0, #1
 800ae22:	d14c      	bne.n	800aebe <_printf_i+0x1fe>
 800ae24:	f04f 30ff 	mov.w	r0, #4294967295
 800ae28:	b004      	add	sp, #16
 800ae2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2e:	4835      	ldr	r0, [pc, #212]	; (800af04 <_printf_i+0x244>)
 800ae30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	680e      	ldr	r6, [r1, #0]
 800ae38:	061f      	lsls	r7, r3, #24
 800ae3a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ae3e:	600e      	str	r6, [r1, #0]
 800ae40:	d514      	bpl.n	800ae6c <_printf_i+0x1ac>
 800ae42:	07d9      	lsls	r1, r3, #31
 800ae44:	bf44      	itt	mi
 800ae46:	f043 0320 	orrmi.w	r3, r3, #32
 800ae4a:	6023      	strmi	r3, [r4, #0]
 800ae4c:	b91d      	cbnz	r5, 800ae56 <_printf_i+0x196>
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	f023 0320 	bic.w	r3, r3, #32
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	2310      	movs	r3, #16
 800ae58:	e7b0      	b.n	800adbc <_printf_i+0xfc>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	f043 0320 	orr.w	r3, r3, #32
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	2378      	movs	r3, #120	; 0x78
 800ae64:	4828      	ldr	r0, [pc, #160]	; (800af08 <_printf_i+0x248>)
 800ae66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae6a:	e7e3      	b.n	800ae34 <_printf_i+0x174>
 800ae6c:	065e      	lsls	r6, r3, #25
 800ae6e:	bf48      	it	mi
 800ae70:	b2ad      	uxthmi	r5, r5
 800ae72:	e7e6      	b.n	800ae42 <_printf_i+0x182>
 800ae74:	4616      	mov	r6, r2
 800ae76:	e7bb      	b.n	800adf0 <_printf_i+0x130>
 800ae78:	680b      	ldr	r3, [r1, #0]
 800ae7a:	6826      	ldr	r6, [r4, #0]
 800ae7c:	6960      	ldr	r0, [r4, #20]
 800ae7e:	1d1d      	adds	r5, r3, #4
 800ae80:	600d      	str	r5, [r1, #0]
 800ae82:	0635      	lsls	r5, r6, #24
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	d501      	bpl.n	800ae8c <_printf_i+0x1cc>
 800ae88:	6018      	str	r0, [r3, #0]
 800ae8a:	e002      	b.n	800ae92 <_printf_i+0x1d2>
 800ae8c:	0671      	lsls	r1, r6, #25
 800ae8e:	d5fb      	bpl.n	800ae88 <_printf_i+0x1c8>
 800ae90:	8018      	strh	r0, [r3, #0]
 800ae92:	2300      	movs	r3, #0
 800ae94:	6123      	str	r3, [r4, #16]
 800ae96:	4616      	mov	r6, r2
 800ae98:	e7ba      	b.n	800ae10 <_printf_i+0x150>
 800ae9a:	680b      	ldr	r3, [r1, #0]
 800ae9c:	1d1a      	adds	r2, r3, #4
 800ae9e:	600a      	str	r2, [r1, #0]
 800aea0:	681e      	ldr	r6, [r3, #0]
 800aea2:	6862      	ldr	r2, [r4, #4]
 800aea4:	2100      	movs	r1, #0
 800aea6:	4630      	mov	r0, r6
 800aea8:	f7f5 f9a2 	bl	80001f0 <memchr>
 800aeac:	b108      	cbz	r0, 800aeb2 <_printf_i+0x1f2>
 800aeae:	1b80      	subs	r0, r0, r6
 800aeb0:	6060      	str	r0, [r4, #4]
 800aeb2:	6863      	ldr	r3, [r4, #4]
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aebc:	e7a8      	b.n	800ae10 <_printf_i+0x150>
 800aebe:	6923      	ldr	r3, [r4, #16]
 800aec0:	4632      	mov	r2, r6
 800aec2:	4649      	mov	r1, r9
 800aec4:	4640      	mov	r0, r8
 800aec6:	47d0      	blx	sl
 800aec8:	3001      	adds	r0, #1
 800aeca:	d0ab      	beq.n	800ae24 <_printf_i+0x164>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	079b      	lsls	r3, r3, #30
 800aed0:	d413      	bmi.n	800aefa <_printf_i+0x23a>
 800aed2:	68e0      	ldr	r0, [r4, #12]
 800aed4:	9b03      	ldr	r3, [sp, #12]
 800aed6:	4298      	cmp	r0, r3
 800aed8:	bfb8      	it	lt
 800aeda:	4618      	movlt	r0, r3
 800aedc:	e7a4      	b.n	800ae28 <_printf_i+0x168>
 800aede:	2301      	movs	r3, #1
 800aee0:	4632      	mov	r2, r6
 800aee2:	4649      	mov	r1, r9
 800aee4:	4640      	mov	r0, r8
 800aee6:	47d0      	blx	sl
 800aee8:	3001      	adds	r0, #1
 800aeea:	d09b      	beq.n	800ae24 <_printf_i+0x164>
 800aeec:	3501      	adds	r5, #1
 800aeee:	68e3      	ldr	r3, [r4, #12]
 800aef0:	9903      	ldr	r1, [sp, #12]
 800aef2:	1a5b      	subs	r3, r3, r1
 800aef4:	42ab      	cmp	r3, r5
 800aef6:	dcf2      	bgt.n	800aede <_printf_i+0x21e>
 800aef8:	e7eb      	b.n	800aed2 <_printf_i+0x212>
 800aefa:	2500      	movs	r5, #0
 800aefc:	f104 0619 	add.w	r6, r4, #25
 800af00:	e7f5      	b.n	800aeee <_printf_i+0x22e>
 800af02:	bf00      	nop
 800af04:	0800c6a5 	.word	0x0800c6a5
 800af08:	0800c6b6 	.word	0x0800c6b6

0800af0c <__sread>:
 800af0c:	b510      	push	{r4, lr}
 800af0e:	460c      	mov	r4, r1
 800af10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af14:	f000 f8e2 	bl	800b0dc <_read_r>
 800af18:	2800      	cmp	r0, #0
 800af1a:	bfab      	itete	ge
 800af1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af1e:	89a3      	ldrhlt	r3, [r4, #12]
 800af20:	181b      	addge	r3, r3, r0
 800af22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af26:	bfac      	ite	ge
 800af28:	6563      	strge	r3, [r4, #84]	; 0x54
 800af2a:	81a3      	strhlt	r3, [r4, #12]
 800af2c:	bd10      	pop	{r4, pc}

0800af2e <__swrite>:
 800af2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af32:	461f      	mov	r7, r3
 800af34:	898b      	ldrh	r3, [r1, #12]
 800af36:	05db      	lsls	r3, r3, #23
 800af38:	4605      	mov	r5, r0
 800af3a:	460c      	mov	r4, r1
 800af3c:	4616      	mov	r6, r2
 800af3e:	d505      	bpl.n	800af4c <__swrite+0x1e>
 800af40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af44:	2302      	movs	r3, #2
 800af46:	2200      	movs	r2, #0
 800af48:	f000 f868 	bl	800b01c <_lseek_r>
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af56:	81a3      	strh	r3, [r4, #12]
 800af58:	4632      	mov	r2, r6
 800af5a:	463b      	mov	r3, r7
 800af5c:	4628      	mov	r0, r5
 800af5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af62:	f000 b817 	b.w	800af94 <_write_r>

0800af66 <__sseek>:
 800af66:	b510      	push	{r4, lr}
 800af68:	460c      	mov	r4, r1
 800af6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af6e:	f000 f855 	bl	800b01c <_lseek_r>
 800af72:	1c43      	adds	r3, r0, #1
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	bf15      	itete	ne
 800af78:	6560      	strne	r0, [r4, #84]	; 0x54
 800af7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af82:	81a3      	strheq	r3, [r4, #12]
 800af84:	bf18      	it	ne
 800af86:	81a3      	strhne	r3, [r4, #12]
 800af88:	bd10      	pop	{r4, pc}

0800af8a <__sclose>:
 800af8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af8e:	f000 b813 	b.w	800afb8 <_close_r>
	...

0800af94 <_write_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	4d07      	ldr	r5, [pc, #28]	; (800afb4 <_write_r+0x20>)
 800af98:	4604      	mov	r4, r0
 800af9a:	4608      	mov	r0, r1
 800af9c:	4611      	mov	r1, r2
 800af9e:	2200      	movs	r2, #0
 800afa0:	602a      	str	r2, [r5, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	f7f6 fe6d 	bl	8001c82 <_write>
 800afa8:	1c43      	adds	r3, r0, #1
 800afaa:	d102      	bne.n	800afb2 <_write_r+0x1e>
 800afac:	682b      	ldr	r3, [r5, #0]
 800afae:	b103      	cbz	r3, 800afb2 <_write_r+0x1e>
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	bd38      	pop	{r3, r4, r5, pc}
 800afb4:	20002d18 	.word	0x20002d18

0800afb8 <_close_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d06      	ldr	r5, [pc, #24]	; (800afd4 <_close_r+0x1c>)
 800afbc:	2300      	movs	r3, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	602b      	str	r3, [r5, #0]
 800afc4:	f7f6 fe79 	bl	8001cba <_close>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_close_r+0x1a>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_close_r+0x1a>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	20002d18 	.word	0x20002d18

0800afd8 <_fstat_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	; (800aff8 <_fstat_r+0x20>)
 800afdc:	2300      	movs	r3, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	4608      	mov	r0, r1
 800afe2:	4611      	mov	r1, r2
 800afe4:	602b      	str	r3, [r5, #0]
 800afe6:	f7f6 fe74 	bl	8001cd2 <_fstat>
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	d102      	bne.n	800aff4 <_fstat_r+0x1c>
 800afee:	682b      	ldr	r3, [r5, #0]
 800aff0:	b103      	cbz	r3, 800aff4 <_fstat_r+0x1c>
 800aff2:	6023      	str	r3, [r4, #0]
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	bf00      	nop
 800aff8:	20002d18 	.word	0x20002d18

0800affc <_isatty_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d06      	ldr	r5, [pc, #24]	; (800b018 <_isatty_r+0x1c>)
 800b000:	2300      	movs	r3, #0
 800b002:	4604      	mov	r4, r0
 800b004:	4608      	mov	r0, r1
 800b006:	602b      	str	r3, [r5, #0]
 800b008:	f7f6 fe73 	bl	8001cf2 <_isatty>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d102      	bne.n	800b016 <_isatty_r+0x1a>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b103      	cbz	r3, 800b016 <_isatty_r+0x1a>
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	20002d18 	.word	0x20002d18

0800b01c <_lseek_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d07      	ldr	r5, [pc, #28]	; (800b03c <_lseek_r+0x20>)
 800b020:	4604      	mov	r4, r0
 800b022:	4608      	mov	r0, r1
 800b024:	4611      	mov	r1, r2
 800b026:	2200      	movs	r2, #0
 800b028:	602a      	str	r2, [r5, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	f7f6 fe6c 	bl	8001d08 <_lseek>
 800b030:	1c43      	adds	r3, r0, #1
 800b032:	d102      	bne.n	800b03a <_lseek_r+0x1e>
 800b034:	682b      	ldr	r3, [r5, #0]
 800b036:	b103      	cbz	r3, 800b03a <_lseek_r+0x1e>
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	20002d18 	.word	0x20002d18

0800b040 <memcpy>:
 800b040:	440a      	add	r2, r1
 800b042:	4291      	cmp	r1, r2
 800b044:	f100 33ff 	add.w	r3, r0, #4294967295
 800b048:	d100      	bne.n	800b04c <memcpy+0xc>
 800b04a:	4770      	bx	lr
 800b04c:	b510      	push	{r4, lr}
 800b04e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b052:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b056:	4291      	cmp	r1, r2
 800b058:	d1f9      	bne.n	800b04e <memcpy+0xe>
 800b05a:	bd10      	pop	{r4, pc}

0800b05c <memmove>:
 800b05c:	4288      	cmp	r0, r1
 800b05e:	b510      	push	{r4, lr}
 800b060:	eb01 0402 	add.w	r4, r1, r2
 800b064:	d902      	bls.n	800b06c <memmove+0x10>
 800b066:	4284      	cmp	r4, r0
 800b068:	4623      	mov	r3, r4
 800b06a:	d807      	bhi.n	800b07c <memmove+0x20>
 800b06c:	1e43      	subs	r3, r0, #1
 800b06e:	42a1      	cmp	r1, r4
 800b070:	d008      	beq.n	800b084 <memmove+0x28>
 800b072:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b07a:	e7f8      	b.n	800b06e <memmove+0x12>
 800b07c:	4402      	add	r2, r0
 800b07e:	4601      	mov	r1, r0
 800b080:	428a      	cmp	r2, r1
 800b082:	d100      	bne.n	800b086 <memmove+0x2a>
 800b084:	bd10      	pop	{r4, pc}
 800b086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b08a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b08e:	e7f7      	b.n	800b080 <memmove+0x24>

0800b090 <_realloc_r>:
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b092:	4607      	mov	r7, r0
 800b094:	4614      	mov	r4, r2
 800b096:	460e      	mov	r6, r1
 800b098:	b921      	cbnz	r1, 800b0a4 <_realloc_r+0x14>
 800b09a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b09e:	4611      	mov	r1, r2
 800b0a0:	f7ff b832 	b.w	800a108 <_malloc_r>
 800b0a4:	b922      	cbnz	r2, 800b0b0 <_realloc_r+0x20>
 800b0a6:	f7fe ffdf 	bl	800a068 <_free_r>
 800b0aa:	4625      	mov	r5, r4
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b0:	f000 f826 	bl	800b100 <_malloc_usable_size_r>
 800b0b4:	42a0      	cmp	r0, r4
 800b0b6:	d20f      	bcs.n	800b0d8 <_realloc_r+0x48>
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	f7ff f824 	bl	800a108 <_malloc_r>
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d0f2      	beq.n	800b0ac <_realloc_r+0x1c>
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	f7ff ffb9 	bl	800b040 <memcpy>
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7fe ffc9 	bl	800a068 <_free_r>
 800b0d6:	e7e9      	b.n	800b0ac <_realloc_r+0x1c>
 800b0d8:	4635      	mov	r5, r6
 800b0da:	e7e7      	b.n	800b0ac <_realloc_r+0x1c>

0800b0dc <_read_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d07      	ldr	r5, [pc, #28]	; (800b0fc <_read_r+0x20>)
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	4608      	mov	r0, r1
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	602a      	str	r2, [r5, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f7f6 fdac 	bl	8001c48 <_read>
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	d102      	bne.n	800b0fa <_read_r+0x1e>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	b103      	cbz	r3, 800b0fa <_read_r+0x1e>
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	20002d18 	.word	0x20002d18

0800b100 <_malloc_usable_size_r>:
 800b100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b104:	1f18      	subs	r0, r3, #4
 800b106:	2b00      	cmp	r3, #0
 800b108:	bfbc      	itt	lt
 800b10a:	580b      	ldrlt	r3, [r1, r0]
 800b10c:	18c0      	addlt	r0, r0, r3
 800b10e:	4770      	bx	lr

0800b110 <_init>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	bf00      	nop
 800b114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b116:	bc08      	pop	{r3}
 800b118:	469e      	mov	lr, r3
 800b11a:	4770      	bx	lr

0800b11c <_fini>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	bf00      	nop
 800b120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b122:	bc08      	pop	{r3}
 800b124:	469e      	mov	lr, r3
 800b126:	4770      	bx	lr
