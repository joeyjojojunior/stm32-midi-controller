
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a140  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001540  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b820  0800b820  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800b820  0800b820  0001b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b828  0800b828  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b828  0800b828  0001b828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b82c  0800b82c  0001b82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800b830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a7c  20000190  0800b9c0  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c0c  0800b9c0  00022c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b93c  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e5c  00000000  00000000  0003bafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001cb62  00000000  00000000  00040ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000184e8  00000000  00000000  0005d64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a1255  00000000  00000000  00075b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00116d87  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000fe8  00000000  00000000  00116de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005240  00000000  00000000  00117dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2c8 	.word	0x0800a2c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	0800a2c8 	.word	0x0800a2c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <KnobMap>:
//uint8_t Knob_Map(Knob *k) {
//	return k->value * k->max_range / (k->max_values - 1);
//}

// Maps values from (0, max_values-1) to (0, m)
uint8_t KnobMap(Knob *k, uint8_t value, uint8_t m) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
 8000f20:	4613      	mov	r3, r2
 8000f22:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	fb02 f203 	mul.w	r2, r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7edb      	ldrb	r3, [r3, #27]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <adc_Averaged_Read>:
void ADC_Select(uint8_t channel);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t adc_Averaged_Read(uint8_t channel) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
    if (channel >= NUM_ADC_CHANNELS) return 1;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d901      	bls.n	8000f58 <adc_Averaged_Read+0x14>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e04c      	b.n	8000ff2 <adc_Averaged_Read+0xae>

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
    sConfig.Channel = adcChannels[channel];
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4a24      	ldr	r2, [pc, #144]	; (8000ffc <adc_Averaged_Read+0xb8>)
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4820      	ldr	r0, [pc, #128]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000f80:	f001 fcd4 	bl	800292c <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <adc_Averaged_Read+0x4a>
        Error_Handler();
 8000f8a:	f000 fbd9 	bl	8001740 <Error_Handler>
    }

    for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	77fb      	strb	r3, [r7, #31]
 8000f92:	e016      	b.n	8000fc2 <adc_Averaged_Read+0x7e>
        HAL_ADC_Start(&hadc1);
 8000f94:	481a      	ldr	r0, [pc, #104]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000f96:	f001 fb49 	bl	800262c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000fa0:	f001 fc2b 	bl	80027fa <HAL_ADC_PollForConversion>
        adcBuf[i] = HAL_ADC_GetValue(&hadc1);
 8000fa4:	4816      	ldr	r0, [pc, #88]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000fa6:	f001 fcb3 	bl	8002910 <HAL_ADC_GetValue>
 8000faa:	4602      	mov	r2, r0
 8000fac:	7ffb      	ldrb	r3, [r7, #31]
 8000fae:	b291      	uxth	r1, r2
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <adc_Averaged_Read+0xc0>)
 8000fb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        HAL_ADC_Stop(&hadc1);
 8000fb6:	4812      	ldr	r0, [pc, #72]	; (8001000 <adc_Averaged_Read+0xbc>)
 8000fb8:	f001 fbec 	bl	8002794 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++) {
 8000fbc:	7ffb      	ldrb	r3, [r7, #31]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	77fb      	strb	r3, [r7, #31]
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	2b1f      	cmp	r3, #31
 8000fc6:	d9e5      	bls.n	8000f94 <adc_Averaged_Read+0x50>
    }

    uint16_t adc_sum = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	83bb      	strh	r3, [r7, #28]

    for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	76fb      	strb	r3, [r7, #27]
 8000fd0:	e009      	b.n	8000fe6 <adc_Averaged_Read+0xa2>
        adc_sum += adcBuf[i];
 8000fd2:	7efb      	ldrb	r3, [r7, #27]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <adc_Averaged_Read+0xc0>)
 8000fd6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fda:	8bbb      	ldrh	r3, [r7, #28]
 8000fdc:	4413      	add	r3, r2
 8000fde:	83bb      	strh	r3, [r7, #28]
    for (uint8_t i = 0; i < NUM_ADC_SAMPLES; i++)
 8000fe0:	7efb      	ldrb	r3, [r7, #27]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	76fb      	strb	r3, [r7, #27]
 8000fe6:	7efb      	ldrb	r3, [r7, #27]
 8000fe8:	2b1f      	cmp	r3, #31
 8000fea:	d9f2      	bls.n	8000fd2 <adc_Averaged_Read+0x8e>

    return adc_sum / NUM_ADC_SAMPLES;
 8000fec:	8bbb      	ldrh	r3, [r7, #28]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	b29b      	uxth	r3, r3
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000010 	.word	0x20000010
 8001000:	20002234 	.word	0x20002234
 8001004:	200001ac 	.word	0x200001ac

08001008 <MIDI_Send>:

void MIDI_Send(Knob *k, uint8_t value) {
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
    MX_USB_Send_Midi(k->channel, k->cc, KnobMap(k, value, k->max_range));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7e1b      	ldrb	r3, [r3, #24]
 8001018:	461c      	mov	r4, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7e5b      	ldrb	r3, [r3, #25]
 800101e:	461d      	mov	r5, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7f1a      	ldrb	r2, [r3, #28]
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff73 	bl	8000f14 <KnobMap>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4629      	mov	r1, r5
 8001034:	4620      	mov	r0, r4
 8001036:	f007 fc57 	bl	80088e8 <MX_USB_Send_Midi>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bdb0      	pop	{r4, r5, r7, pc}
 8001042:	0000      	movs	r0, r0
 8001044:	0000      	movs	r0, r0
	...

08001048 <MIDI_Scale_And_Filter>:

uint8_t MIDI_Scale_And_Filter(Knob *k, uint8_t adc_value) {
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
    float midi_scale_factor = 1.0 * (k->max_values) / UPPER_BOUND_ADC;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7edb      	ldrb	r3, [r3, #27]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa6b 	bl	8000534 <__aeabi_i2d>
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <MIDI_Scale_And_Filter+0x140>)
 8001064:	f7ff fbfa 	bl	800085c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fd84 	bl	8000b7c <__aeabi_d2f>
 8001074:	4603      	mov	r3, r0
 8001076:	60fb      	str	r3, [r7, #12]
    return MIN(EMA_A * midi_scale_factor * adc_value + (1 - EMA_A) * k->value, k->max_range);
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff fa6d 	bl	8000558 <__aeabi_f2d>
 800107e:	a33e      	add	r3, pc, #248	; (adr r3, 8001178 <MIDI_Scale_And_Filter+0x130>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fac0 	bl	8000608 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4614      	mov	r4, r2
 800108e:	461d      	mov	r5, r3
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa4e 	bl	8000534 <__aeabi_i2d>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4620      	mov	r0, r4
 800109e:	4629      	mov	r1, r5
 80010a0:	f7ff fab2 	bl	8000608 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4614      	mov	r4, r2
 80010aa:	461d      	mov	r5, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7e9b      	ldrb	r3, [r3, #26]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa3f 	bl	8000534 <__aeabi_i2d>
 80010b6:	a332      	add	r3, pc, #200	; (adr r3, 8001180 <MIDI_Scale_And_Filter+0x138>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff faa4 	bl	8000608 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4620      	mov	r0, r4
 80010c6:	4629      	mov	r1, r5
 80010c8:	f7ff f8e8 	bl	800029c <__adddf3>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4614      	mov	r4, r2
 80010d2:	461d      	mov	r5, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7f1b      	ldrb	r3, [r3, #28]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa2b 	bl	8000534 <__aeabi_i2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4620      	mov	r0, r4
 80010e4:	4629      	mov	r1, r5
 80010e6:	f7ff fd01 	bl	8000aec <__aeabi_dcmplt>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d032      	beq.n	8001156 <MIDI_Scale_And_Filter+0x10e>
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fa31 	bl	8000558 <__aeabi_f2d>
 80010f6:	a320      	add	r3, pc, #128	; (adr r3, 8001178 <MIDI_Scale_And_Filter+0x130>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fa84 	bl	8000608 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4614      	mov	r4, r2
 8001106:	461d      	mov	r5, r3
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa12 	bl	8000534 <__aeabi_i2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff fa76 	bl	8000608 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4614      	mov	r4, r2
 8001122:	461d      	mov	r5, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e9b      	ldrb	r3, [r3, #26]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa03 	bl	8000534 <__aeabi_i2d>
 800112e:	a314      	add	r3, pc, #80	; (adr r3, 8001180 <MIDI_Scale_And_Filter+0x138>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa68 	bl	8000608 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff f8ac 	bl	800029c <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fcf6 	bl	8000b3c <__aeabi_d2uiz>
 8001150:	4603      	mov	r3, r0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	e00c      	b.n	8001170 <MIDI_Scale_And_Filter+0x128>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7f1b      	ldrb	r3, [r3, #28]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9ea 	bl	8000534 <__aeabi_i2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fce8 	bl	8000b3c <__aeabi_d2uiz>
 800116c:	4603      	mov	r3, r0
 800116e:	b2db      	uxtb	r3, r3
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}
 8001178:	66666666 	.word	0x66666666
 800117c:	3fe66666 	.word	0x3fe66666
 8001180:	33333334 	.word	0x33333334
 8001184:	3fd33333 	.word	0x3fd33333
 8001188:	406f4000 	.word	0x406f4000

0800118c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b0a3      	sub	sp, #140	; 0x8c
 8001190:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    Knob knobs[4] = { { .init_value = 63, .row = 0, .col = 0, .label = "Cutoff", .channel = 0, .cc = 17, .value = 0, .max_values = 128, .max_range = 127, .isLocked = 1 },
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f008 f839 	bl	8009210 <memset>
 800119e:	233f      	movs	r3, #63	; 0x3f
 80011a0:	713b      	strb	r3, [r7, #4]
 80011a2:	4aac      	ldr	r2, [pc, #688]	; (8001454 <main+0x2c8>)
 80011a4:	1dfb      	adds	r3, r7, #7
 80011a6:	6810      	ldr	r0, [r2, #0]
 80011a8:	6018      	str	r0, [r3, #0]
 80011aa:	8891      	ldrh	r1, [r2, #4]
 80011ac:	7992      	ldrb	r2, [r2, #6]
 80011ae:	8099      	strh	r1, [r3, #4]
 80011b0:	719a      	strb	r2, [r3, #6]
 80011b2:	f107 030e 	add.w	r3, r7, #14
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	2311      	movs	r3, #17
 80011be:	777b      	strb	r3, [r7, #29]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	77fb      	strb	r3, [r7, #31]
 80011c4:	237f      	movs	r3, #127	; 0x7f
 80011c6:	f887 3020 	strb.w	r3, [r7, #32]
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80011d0:	237f      	movs	r3, #127	; 0x7f
 80011d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011d6:	2301      	movs	r3, #1
 80011d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011dc:	4b9e      	ldr	r3, [pc, #632]	; (8001458 <main+0x2cc>)
 80011de:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80011e2:	cb03      	ldmia	r3!, {r0, r1}
 80011e4:	6010      	str	r0, [r2, #0]
 80011e6:	6051      	str	r1, [r2, #4]
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	8113      	strh	r3, [r2, #8]
 80011ec:	f107 0331 	add.w	r3, r7, #49	; 0x31
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	711a      	strb	r2, [r3, #4]
 80011f6:	2301      	movs	r3, #1
 80011f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80011fc:	2312      	movs	r3, #18
 80011fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001208:	237f      	movs	r3, #127	; 0x7f
 800120a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800120e:	2303      	movs	r3, #3
 8001210:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001214:	2301      	movs	r3, #1
 8001216:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800121a:	4a90      	ldr	r2, [pc, #576]	; (800145c <main+0x2d0>)
 800121c:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8001220:	6810      	ldr	r0, [r2, #0]
 8001222:	6018      	str	r0, [r3, #0]
 8001224:	8892      	ldrh	r2, [r2, #4]
 8001226:	809a      	strh	r2, [r3, #4]
 8001228:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	721a      	strb	r2, [r3, #8]
 8001234:	2302      	movs	r3, #2
 8001236:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800123a:	2313      	movs	r3, #19
 800123c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001246:	237f      	movs	r3, #127	; 0x7f
 8001248:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800124c:	2304      	movs	r3, #4
 800124e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001252:	2301      	movs	r3, #1
 8001254:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001258:	2301      	movs	r3, #1
 800125a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800125e:	4a80      	ldr	r2, [pc, #512]	; (8001460 <main+0x2d4>)
 8001260:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8001264:	6810      	ldr	r0, [r2, #0]
 8001266:	6018      	str	r0, [r3, #0]
 8001268:	8892      	ldrh	r2, [r2, #4]
 800126a:	809a      	strh	r2, [r3, #4]
 800126c:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	721a      	strb	r2, [r3, #8]
 8001278:	2303      	movs	r3, #3
 800127a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 800127e:	2314      	movs	r3, #20
 8001280:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800128a:	237f      	movs	r3, #127	; 0x7f
 800128c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
     strncpy(knobs[i].sub_labels[9], "Pulse7", MAX_LABEL_CHARS);
     strncpy(knobs[i].sub_labels[10], "Pulse8", MAX_LABEL_CHARS);
     strncpy(knobs[i].sub_labels[11], "Pulse9", MAX_LABEL_CHARS);
     }*/

    knobs[0].sub_labels = malloc(sizeof(*knobs[0].sub_labels));
 8001290:	200f      	movs	r0, #15
 8001292:	f007 ffb5 	bl	8009200 <malloc>
 8001296:	4603      	mov	r3, r0
 8001298:	61bb      	str	r3, [r7, #24]
    strncpy(knobs[0].sub_labels[0], "Filter 1", MAX_LABEL_CHARS);
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	220e      	movs	r2, #14
 800129e:	4971      	ldr	r1, [pc, #452]	; (8001464 <main+0x2d8>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f008 f921 	bl	80094e8 <strncpy>

    knobs[1].sub_labels = malloc(sizeof(*knobs[1].sub_labels));
 80012a6:	200f      	movs	r0, #15
 80012a8:	f007 ffaa 	bl	8009200 <malloc>
 80012ac:	4603      	mov	r3, r0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
    strncpy(knobs[1].sub_labels[0], "Filter 2", MAX_LABEL_CHARS);
 80012b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b2:	220e      	movs	r2, #14
 80012b4:	496c      	ldr	r1, [pc, #432]	; (8001468 <main+0x2dc>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f008 f916 	bl	80094e8 <strncpy>

    knobs[2].sub_labels = malloc(sizeof(*knobs[2].sub_labels));
 80012bc:	200f      	movs	r0, #15
 80012be:	f007 ff9f 	bl	8009200 <malloc>
 80012c2:	4603      	mov	r3, r0
 80012c4:	65bb      	str	r3, [r7, #88]	; 0x58
    strncpy(knobs[2].sub_labels[0], "Filter 3", MAX_LABEL_CHARS);
 80012c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012c8:	220e      	movs	r2, #14
 80012ca:	4968      	ldr	r1, [pc, #416]	; (800146c <main+0x2e0>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f008 f90b 	bl	80094e8 <strncpy>

    knobs[3].sub_labels = malloc(sizeof(*knobs[3].sub_labels));
 80012d2:	200f      	movs	r0, #15
 80012d4:	f007 ff94 	bl	8009200 <malloc>
 80012d8:	4603      	mov	r3, r0
 80012da:	67bb      	str	r3, [r7, #120]	; 0x78
    strncpy(knobs[3].sub_labels[0], "Filter 4", MAX_LABEL_CHARS);
 80012dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012de:	220e      	movs	r2, #14
 80012e0:	4963      	ldr	r1, [pc, #396]	; (8001470 <main+0x2e4>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f008 f900 	bl	80094e8 <strncpy>
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80012e8:	f001 f8c6 	bl	8002478 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80012ec:	f000 f8c8 	bl	8001480 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_RTC_Init();
 80012f0:	f000 f9ca 	bl	8001688 <MX_RTC_Init>
    MX_GPIO_Init();
 80012f4:	f000 f9ee 	bl	80016d4 <MX_GPIO_Init>
    MX_ADC1_Init();
 80012f8:	f000 f944 	bl	8001584 <MX_ADC1_Init>
    MX_I2C1_Init();
 80012fc:	f000 f996 	bl	800162c <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 8001300:	f007 fac2 	bl	8008888 <MX_USB_DEVICE_Init>
    //MX_SDIO_SD_Init();
    /* USER CODE BEGIN 2 */
    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001304:	2300      	movs	r3, #0
 8001306:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800130a:	e017      	b.n	800133c <main+0x1b0>
        ssd1306_Init(&hi2c1, &knobs[i]);
 800130c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001310:	1d3a      	adds	r2, r7, #4
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	4413      	add	r3, r2
 8001316:	4619      	mov	r1, r3
 8001318:	4856      	ldr	r0, [pc, #344]	; (8001474 <main+0x2e8>)
 800131a:	f000 fa2d 	bl	8001778 <ssd1306_Init>
        ssd1306_WriteKnob(&hi2c1, &knobs[i], 0);
 800131e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001322:	1d3a      	adds	r2, r7, #4
 8001324:	015b      	lsls	r3, r3, #5
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4851      	ldr	r0, [pc, #324]	; (8001474 <main+0x2e8>)
 800132e:	f000 fb9f 	bl	8001a70 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001332:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001336:	3301      	adds	r3, #1
 8001338:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800133c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001340:	2b03      	cmp	r3, #3
 8001342:	d9e3      	bls.n	800130c <main+0x180>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 8001344:	2300      	movs	r3, #0
 8001346:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800134a:	e07c      	b.n	8001446 <main+0x2ba>
            adcAveraged[i] = adc_Averaged_Read(i);
 800134c:	f897 4086 	ldrb.w	r4, [r7, #134]	; 0x86
 8001350:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fdf5 	bl	8000f44 <adc_Averaged_Read>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b46      	ldr	r3, [pc, #280]	; (8001478 <main+0x2ec>)
 8001360:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

            uint8_t curr_MIDI_val = MIDI_Scale_And_Filter(&knobs[i], adcBuf[i]);
 8001364:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001368:	1d3a      	adds	r2, r7, #4
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	441a      	add	r2, r3
 800136e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001372:	4942      	ldr	r1, [pc, #264]	; (800147c <main+0x2f0>)
 8001374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f7ff fe63 	bl	8001048 <MIDI_Scale_And_Filter>
 8001382:	4603      	mov	r3, r0
 8001384:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

            if (curr_MIDI_val != knobs[i].value) {
 8001388:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800138c:	015b      	lsls	r3, r3, #5
 800138e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001392:	4413      	add	r3, r2
 8001394:	3b6a      	subs	r3, #106	; 0x6a
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800139c:	429a      	cmp	r2, r3
 800139e:	d04d      	beq.n	800143c <main+0x2b0>
                knobs[i].value = curr_MIDI_val;
 80013a0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013aa:	4413      	add	r3, r2
 80013ac:	3b6a      	subs	r3, #106	; 0x6a
 80013ae:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80013b2:	701a      	strb	r2, [r3, #0]
                ssd1306_WriteKnob(&hi2c1, &knobs[i], adcAveraged[i]);
 80013b4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013b8:	1d3a      	adds	r2, r7, #4
 80013ba:	015b      	lsls	r3, r3, #5
 80013bc:	18d1      	adds	r1, r2, r3
 80013be:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013c2:	4a2d      	ldr	r2, [pc, #180]	; (8001478 <main+0x2ec>)
 80013c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c8:	461a      	mov	r2, r3
 80013ca:	482a      	ldr	r0, [pc, #168]	; (8001474 <main+0x2e8>)
 80013cc:	f000 fb50 	bl	8001a70 <ssd1306_WriteKnob>
                if (knobs[i].value == knobs[i].init_value) knobs[i].isLocked = false;
 80013d0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013d4:	015b      	lsls	r3, r3, #5
 80013d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013da:	4413      	add	r3, r2
 80013dc:	3b6a      	subs	r3, #106	; 0x6a
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013e4:	015b      	lsls	r3, r3, #5
 80013e6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80013ea:	440b      	add	r3, r1
 80013ec:	3b84      	subs	r3, #132	; 0x84
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d108      	bne.n	8001406 <main+0x27a>
 80013f4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80013f8:	015b      	lsls	r3, r3, #5
 80013fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013fe:	4413      	add	r3, r2
 8001400:	3b67      	subs	r3, #103	; 0x67
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
                if (!knobs[i].isLocked) MIDI_Send(&knobs[i], knobs[i].value);
 8001406:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001410:	4413      	add	r3, r2
 8001412:	3b67      	subs	r3, #103	; 0x67
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d110      	bne.n	800143c <main+0x2b0>
 800141a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800141e:	1d3a      	adds	r2, r7, #4
 8001420:	015b      	lsls	r3, r3, #5
 8001422:	441a      	add	r2, r3
 8001424:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001428:	015b      	lsls	r3, r3, #5
 800142a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800142e:	440b      	add	r3, r1
 8001430:	3b6a      	subs	r3, #106	; 0x6a
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f7ff fde6 	bl	8001008 <MIDI_Send>
        for (uint8_t i = 0; i < NUM_ADC_CHANNELS; i++) {
 800143c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001440:	3301      	adds	r3, #1
 8001442:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8001446:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800144a:	2b03      	cmp	r3, #3
 800144c:	f67f af7e 	bls.w	800134c <main+0x1c0>
 8001450:	e778      	b.n	8001344 <main+0x1b8>
 8001452:	bf00      	nop
 8001454:	0800a310 	.word	0x0800a310
 8001458:	0800a320 	.word	0x0800a320
 800145c:	0800a330 	.word	0x0800a330
 8001460:	0800a340 	.word	0x0800a340
 8001464:	0800a2e0 	.word	0x0800a2e0
 8001468:	0800a2ec 	.word	0x0800a2ec
 800146c:	0800a2f8 	.word	0x0800a2f8
 8001470:	0800a304 	.word	0x0800a304
 8001474:	200021e0 	.word	0x200021e0
 8001478:	200001ec 	.word	0x200001ec
 800147c:	200001ac 	.word	0x200001ac

08001480 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b09a      	sub	sp, #104	; 0x68
 8001484:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001486:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800148a:	2230      	movs	r2, #48	; 0x30
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f007 febe 	bl	8009210 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
 80014b4:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <SystemClock_Config+0xfc>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a2f      	ldr	r2, [pc, #188]	; (800157c <SystemClock_Config+0xfc>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <SystemClock_Config+0xfc>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <SystemClock_Config+0x100>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a29      	ldr	r2, [pc, #164]	; (8001580 <SystemClock_Config+0x100>)
 80014dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <SystemClock_Config+0x100>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80014ee:	2309      	movs	r3, #9
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fc:	2302      	movs	r3, #2
 80014fe:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001500:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001504:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 8001506:	2319      	movs	r3, #25
 8001508:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 800150a:	23c0      	movs	r3, #192	; 0xc0
 800150c:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800150e:	2302      	movs	r3, #2
 8001510:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001512:	2304      	movs	r3, #4
 8001514:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001516:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fe28 	bl	8005170 <HAL_RCC_OscConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0xaa>
        Error_Handler();
 8001526:	f000 f90b 	bl	8001740 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800152a:	230f      	movs	r3, #15
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	2302      	movs	r3, #2
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	2103      	movs	r1, #3
 8001546:	4618      	mov	r0, r3
 8001548:	f004 f88a 	bl	8005660 <HAL_RCC_ClockConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0xd6>
        Error_Handler();
 8001552:	f000 f8f5 	bl	8001740 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001556:	2302      	movs	r3, #2
 8001558:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800155a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4618      	mov	r0, r3
 8001566:	f004 fa37 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0xf4>
        Error_Handler();
 8001570:	f000 f8e6 	bl	8001740 <Error_Handler>
    }
}
 8001574:	bf00      	nop
 8001576:	3768      	adds	r7, #104	; 0x68
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <MX_ADC1_Init+0x9c>)
 8001598:	4a22      	ldr	r2, [pc, #136]	; (8001624 <MX_ADC1_Init+0xa0>)
 800159a:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <MX_ADC1_Init+0x9c>)
 800159e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015a2:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015aa:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <MX_ADC1_Init+0xa4>)
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <MX_ADC1_Init+0x9c>)
 80015e8:	f000 ffdc 	bl	80025a4 <HAL_ADC_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_ADC1_Init+0x72>
        Error_Handler();
 80015f2:	f000 f8a5 	bl	8001740 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80015fa:	2301      	movs	r3, #1
 80015fc:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001602:	463b      	mov	r3, r7
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_ADC1_Init+0x9c>)
 8001608:	f001 f990 	bl	800292c <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC1_Init+0x92>
        Error_Handler();
 8001612:	f000 f895 	bl	8001740 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20002234 	.word	0x20002234
 8001624:	40012000 	.word	0x40012000
 8001628:	0f000001 	.word	0x0f000001

0800162c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x50>)
 8001632:	4a13      	ldr	r2, [pc, #76]	; (8001680 <MX_I2C1_Init+0x54>)
 8001634:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C1_Init+0x50>)
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <MX_I2C1_Init+0x58>)
 800163a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <MX_I2C1_Init+0x50>)
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_I2C1_Init+0x50>)
 800166a:	f001 fe23 	bl	80032b4 <HAL_I2C_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8001674:	f000 f864 	bl	8001740 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200021e0 	.word	0x200021e0
 8001680:	40005400 	.word	0x40005400
 8001684:	000c3500 	.word	0x000c3500

08001688 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_RTC_Init+0x44>)
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <MX_RTC_Init+0x48>)
 8001690:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_RTC_Init+0x44>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_RTC_Init+0x44>)
 800169a:	227f      	movs	r2, #127	; 0x7f
 800169c:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_RTC_Init+0x44>)
 80016a0:	22ff      	movs	r2, #255	; 0xff
 80016a2:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_RTC_Init+0x44>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_RTC_Init+0x44>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_RTC_Init+0x44>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_RTC_Init+0x44>)
 80016b8:	f004 fa7e 	bl	8005bb8 <HAL_RTC_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_RTC_Init+0x3e>
        Error_Handler();
 80016c2:	f000 f83d 	bl	8001740 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000227c 	.word	0x2000227c
 80016d0:	40002800 	.word	0x40002800

080016d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_GPIO_Init+0x68>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <MX_GPIO_Init+0x68>)
 80016e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <MX_GPIO_Init+0x68>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <MX_GPIO_Init+0x68>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <MX_GPIO_Init+0x68>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <MX_GPIO_Init+0x68>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_GPIO_Init+0x68>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <MX_GPIO_Init+0x68>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_GPIO_Init+0x68>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]

}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x8>

0800174a <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command) {
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af04      	add	r7, sp, #16
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001756:	230a      	movs	r3, #10
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2301      	movs	r3, #1
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	1cfb      	adds	r3, r7, #3
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	2200      	movs	r2, #0
 8001766:	2178      	movs	r1, #120	; 0x78
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f001 ffe5 	bl	8003738 <HAL_I2C_Mem_Write>
 800176e:	4603      	mov	r3, r0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001782:	2064      	movs	r0, #100	; 0x64
 8001784:	f000 feea 	bl	800255c <HAL_Delay>
    int status = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(hi2c, k);
 800178c:	6839      	ldr	r1, [r7, #0]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fba0 	bl	8001ed4 <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001794:	21ae      	movs	r1, #174	; 0xae
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffd7 	bl	800174a <ssd1306_WriteCommand>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80017a6:	2120      	movs	r1, #32
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffce 	bl	800174a <ssd1306_WriteCommand>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10); // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80017b8:	2110      	movs	r1, #16
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffc5 	bl	800174a <ssd1306_WriteCommand>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80017ca:	21b0      	movs	r1, #176	; 0xb0
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffbc 	bl	800174a <ssd1306_WriteCommand>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80017dc:	21c8      	movs	r1, #200	; 0xc8
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffb3 	bl	800174a <ssd1306_WriteCommand>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80017ee:	2100      	movs	r1, #0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ffaa 	bl	800174a <ssd1306_WriteCommand>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8001800:	2110      	movs	r1, #16
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa1 	bl	800174a <ssd1306_WriteCommand>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8001812:	2140      	movs	r1, #64	; 0x40
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff98 	bl	800174a <ssd1306_WriteCommand>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001824:	2181      	movs	r1, #129	; 0x81
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff8f 	bl	800174a <ssd1306_WriteCommand>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff86 	bl	800174a <ssd1306_WriteCommand>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001848:	21a1      	movs	r1, #161	; 0xa1
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ff7d 	bl	800174a <ssd1306_WriteCommand>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 800185a:	21a6      	movs	r1, #166	; 0xa6
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff74 	bl	800174a <ssd1306_WriteCommand>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800186c:	21a8      	movs	r1, #168	; 0xa8
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff6b 	bl	800174a <ssd1306_WriteCommand>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800187e:	213f      	movs	r1, #63	; 0x3f
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff62 	bl	800174a <ssd1306_WriteCommand>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001890:	21a4      	movs	r1, #164	; 0xa4
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff59 	bl	800174a <ssd1306_WriteCommand>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80018a2:	21d3      	movs	r1, #211	; 0xd3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff50 	bl	800174a <ssd1306_WriteCommand>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80018b4:	2100      	movs	r1, #0
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff47 	bl	800174a <ssd1306_WriteCommand>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80018c6:	21d5      	movs	r1, #213	; 0xd5
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff3e 	bl	800174a <ssd1306_WriteCommand>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80018d8:	21f0      	movs	r1, #240	; 0xf0
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff35 	bl	800174a <ssd1306_WriteCommand>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80018ea:	21d9      	movs	r1, #217	; 0xd9
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff2c 	bl	800174a <ssd1306_WriteCommand>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4413      	add	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80018fc:	2122      	movs	r1, #34	; 0x22
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff23 	bl	800174a <ssd1306_WriteCommand>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 800190e:	21da      	movs	r1, #218	; 0xda
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff1a 	bl	800174a <ssd1306_WriteCommand>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8001920:	2112      	movs	r1, #18
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff11 	bl	800174a <ssd1306_WriteCommand>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001932:	21db      	movs	r1, #219	; 0xdb
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff08 	bl	800174a <ssd1306_WriteCommand>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001944:	2120      	movs	r1, #32
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff feff 	bl	800174a <ssd1306_WriteCommand>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001956:	218d      	movs	r1, #141	; 0x8d
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fef6 	bl	800174a <ssd1306_WriteCommand>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001968:	2114      	movs	r1, #20
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff feed 	bl	800174a <ssd1306_WriteCommand>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 800197a:	21af      	movs	r1, #175	; 0xaf
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fee4 	bl	800174a <ssd1306_WriteCommand>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <ssd1306_Init+0x21e>
        return 1;
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <ssd1306_Init+0x23e>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f814 	bl	80019c4 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f835 	bl	8001a0c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <ssd1306_Init+0x248>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <ssd1306_Init+0x248>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <ssd1306_Init+0x248>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	715a      	strb	r2, [r3, #5]

    return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200005f4 	.word	0x200005f4

080019c4 <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e00d      	b.n	80019f0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <ssd1306_Fill+0x1a>
 80019da:	2100      	movs	r1, #0
 80019dc:	e000      	b.n	80019e0 <ssd1306_Fill+0x1c>
 80019de:	21ff      	movs	r1, #255	; 0xff
 80019e0:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <ssd1306_Fill+0x44>)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	460a      	mov	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d3ed      	bcc.n	80019d4 <ssd1306_Fill+0x10>
    }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	200001f4 	.word	0x200001f4

08001a0c <ssd1306_UpdateScreen>:

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e020      	b.n	8001a5c <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3b50      	subs	r3, #80	; 0x50
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fe91 	bl	800174a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fe8d 	bl	800174a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001a30:	2110      	movs	r1, #16
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fe89 	bl	800174a <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	01db      	lsls	r3, r3, #7
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <ssd1306_UpdateScreen+0x60>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	2264      	movs	r2, #100	; 0x64
 8001a42:	9202      	str	r2, [sp, #8]
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2240      	movs	r2, #64	; 0x40
 8001a4e:	2178      	movs	r1, #120	; 0x78
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f001 fe71 	bl	8003738 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b07      	cmp	r3, #7
 8001a60:	d9db      	bls.n	8001a1a <ssd1306_UpdateScreen+0xe>
    }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200001f4 	.word	0x200001f4

08001a70 <ssd1306_WriteKnob>:

// Write a knob's values to the screen
void ssd1306_WriteKnob(I2C_HandleTypeDef *hi2c, Knob *k, uint16_t adc) {
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b08d      	sub	sp, #52	; 0x34
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	80fb      	strh	r3, [r7, #6]
    ssd1306_Select(hi2c, k);
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fa27 	bl	8001ed4 <ssd1306_Select>
    ssd1306_Fill(Black);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff ff9c 	bl	80019c4 <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001a8c:	4b7c      	ldr	r3, [pc, #496]	; (8001c80 <ssd1306_WriteKnob+0x210>)
 8001a8e:	f107 0414 	add.w	r4, r7, #20
 8001a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel + 1);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	7e1b      	ldrb	r3, [r3, #24]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001aa2:	4a78      	ldr	r2, [pc, #480]	; (8001c84 <ssd1306_WriteKnob+0x214>)
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	f007 fceb 	bl	8009480 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	7e5b      	ldrb	r3, [r3, #25]
 8001aae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001ab2:	4a75      	ldr	r2, [pc, #468]	; (8001c88 <ssd1306_WriteKnob+0x218>)
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	f007 fce3 	bl	8009480 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fb8e 	bl	80001e0 <strlen>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	68b8      	ldr	r0, [r7, #8]
 8001ac8:	f000 fa3c 	bl	8001f44 <update_init_indicator>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f107 0014 	add.w	r0, r7, #20
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <ssd1306_WriteKnob+0x21c>)
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f007 fcd3 	bl	8009480 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) KnobMap(k, k->value, k->max_range));
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	7e99      	ldrb	r1, [r3, #26]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	7f1b      	ldrb	r3, [r3, #28]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68b8      	ldr	r0, [r7, #8]
 8001ae6:	f7ff fa15 	bl	8000f14 <KnobMap>
 8001aea:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8001aec:	f107 0010 	add.w	r0, r7, #16
 8001af0:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <ssd1306_WriteKnob+0x218>)
 8001af2:	2104      	movs	r1, #4
 8001af4:	f007 fcc4 	bl	8009480 <sniprintf>

    ssd1306_SetCursor(0, 0);
 8001af8:	2100      	movs	r1, #0
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f9d2 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8001b00:	4a63      	ldr	r2, [pc, #396]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b02:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001b06:	2301      	movs	r3, #1
 8001b08:	ca06      	ldmia	r2, {r1, r2}
 8001b0a:	f000 f9a5 	bl	8001e58 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 8);
 8001b0e:	2108      	movs	r1, #8
 8001b10:	2000      	movs	r0, #0
 8001b12:	f000 f9c7 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8001b16:	4a5e      	ldr	r2, [pc, #376]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b18:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	ca06      	ldmia	r2, {r1, r2}
 8001b20:	f000 f99a 	bl	8001e58 <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, 4);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fb59 	bl	80001e0 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2104      	movs	r1, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f9ae 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8001b48:	4a51      	ldr	r2, [pc, #324]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b4a:	f107 0014 	add.w	r0, r7, #20
 8001b4e:	2301      	movs	r3, #1
 8001b50:	ca06      	ldmia	r2, {r1, r2}
 8001b52:	f000 f981 	bl	8001e58 <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, 4);
 8001b56:	4b4e      	ldr	r3, [pc, #312]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	f1c3 0320 	rsb	r3, r3, #32
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2104      	movs	r1, #4
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f99a 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8001b70:	4a47      	ldr	r2, [pc, #284]	; (8001c90 <ssd1306_WriteKnob+0x220>)
 8001b72:	f107 0010 	add.w	r0, r7, #16
 8001b76:	2301      	movs	r3, #1
 8001b78:	ca06      	ldmia	r2, {r1, r2}
 8001b7a:	f000 f96d 	bl	8001e58 <ssd1306_WriteString>

    uint8_t len_label = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Draw main label
    len_label = strlen(k->label);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3303      	adds	r3, #3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fb26 	bl	80001e0 <strlen>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b9e:	4a3d      	ldr	r2, [pc, #244]	; (8001c94 <ssd1306_WriteKnob+0x224>)
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001baa:	0fda      	lsrs	r2, r3, #31
 8001bac:	4413      	add	r3, r2
 8001bae:	105b      	asrs	r3, r3, #1
 8001bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (len_label % 2 != 0) x += 5;
 8001bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <ssd1306_WriteKnob+0x15c>
 8001bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bc6:	3305      	adds	r3, #5
 8001bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ssd1306_SetCursor(x, 16);
 8001bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f966 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1cd8      	adds	r0, r3, #3
 8001bdc:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <ssd1306_WriteKnob+0x224>)
 8001bde:	2301      	movs	r3, #1
 8001be0:	ca06      	ldmia	r2, {r1, r2}
 8001be2:	f000 f939 	bl	8001e58 <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < 128) ? k->value : 0;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	7edb      	ldrb	r3, [r3, #27]
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db02      	blt.n	8001bf6 <ssd1306_WriteKnob+0x186>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	7e9b      	ldrb	r3, [r3, #26]
 8001bf4:	e000      	b.n	8001bf8 <ssd1306_WriteKnob+0x188>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    len_label = strlen(k->sub_labels[sl_index]);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6959      	ldr	r1, [r3, #20]
 8001c00:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c04:	4613      	mov	r3, r2
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fae7 	bl	80001e0 <strlen>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001c18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <ssd1306_WriteKnob+0x224>)
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c28:	0fda      	lsrs	r2, r3, #31
 8001c2a:	4413      	add	r3, r2
 8001c2c:	105b      	asrs	r3, r3, #1
 8001c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (len_label % 2 != 0) x += 5;
 8001c32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <ssd1306_WriteKnob+0x1da>
 8001c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c44:	3305      	adds	r3, #5
 8001c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    ssd1306_SetCursor(x, 40);
 8001c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c4e:	2128      	movs	r1, #40	; 0x28
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f927 	bl	8001ea4 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	6959      	ldr	r1, [r3, #20]
 8001c5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c5e:	4613      	mov	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	18c8      	adds	r0, r1, r3
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <ssd1306_WriteKnob+0x224>)
 8001c68:	2301      	movs	r3, #1
 8001c6a:	ca06      	ldmia	r2, {r1, r2}
 8001c6c:	f000 f8f4 	bl	8001e58 <ssd1306_WriteString>

    ssd1306_UpdateScreen(hi2c);
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7ff fecb 	bl	8001a0c <ssd1306_UpdateScreen>
}
 8001c76:	bf00      	nop
 8001c78:	3734      	adds	r7, #52	; 0x34
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800a364 	.word	0x0800a364
 8001c84:	0800a350 	.word	0x0800a350
 8001c88:	0800a358 	.word	0x0800a358
 8001c8c:	0800a360 	.word	0x0800a360
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000008 	.word	0x20000008

08001c98 <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	71bb      	strb	r3, [r7, #6]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db48      	blt.n	8001d44 <ssd1306_DrawPixel+0xac>
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001cb6:	d845      	bhi.n	8001d44 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <ssd1306_DrawPixel+0xb8>)
 8001cba:	791b      	ldrb	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8001cc0:	797b      	ldrb	r3, [r7, #5]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf0c      	ite	eq
 8001cc6:	2301      	moveq	r3, #1
 8001cc8:	2300      	movne	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 8001cce:	797b      	ldrb	r3, [r7, #5]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11a      	bne.n	8001d0a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cd4:	79fa      	ldrb	r2, [r7, #7]
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	b2d8      	uxtb	r0, r3
 8001cdc:	4603      	mov	r3, r0
 8001cde:	01db      	lsls	r3, r3, #7
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <ssd1306_DrawPixel+0xbc>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	b25a      	sxtb	r2, r3
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b259      	sxtb	r1, r3
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	4413      	add	r3, r2
 8001d02:	b2c9      	uxtb	r1, r1
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <ssd1306_DrawPixel+0xbc>)
 8001d06:	54d1      	strb	r1, [r2, r3]
 8001d08:	e01d      	b.n	8001d46 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d0a:	79fa      	ldrb	r2, [r7, #7]
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	b2d8      	uxtb	r0, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	01db      	lsls	r3, r3, #7
 8001d16:	4413      	add	r3, r2
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <ssd1306_DrawPixel+0xbc>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	b25a      	sxtb	r2, r3
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	4013      	ands	r3, r2
 8001d32:	b259      	sxtb	r1, r3
 8001d34:	79fa      	ldrb	r2, [r7, #7]
 8001d36:	4603      	mov	r3, r0
 8001d38:	01db      	lsls	r3, r3, #7
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b2c9      	uxtb	r1, r1
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <ssd1306_DrawPixel+0xbc>)
 8001d40:	54d1      	strb	r1, [r2, r3]
 8001d42:	e000      	b.n	8001d46 <ssd1306_DrawPixel+0xae>
        return;
 8001d44:	bf00      	nop
    }
}
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	200005f4 	.word	0x200005f4
 8001d54:	200001f4 	.word	0x200001f4

08001d58 <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4604      	mov	r4, r0
 8001d60:	1d38      	adds	r0, r7, #4
 8001d62:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d66:	461a      	mov	r2, r3
 8001d68:	4623      	mov	r3, r4
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d70:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	793b      	ldrb	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d7c:	dc06      	bgt.n	8001d8c <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001d80:	885b      	ldrh	r3, [r3, #2]
 8001d82:	461a      	mov	r2, r3
 8001d84:	797b      	ldrb	r3, [r7, #5]
 8001d86:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d88:	2b3f      	cmp	r3, #63	; 0x3f
 8001d8a:	dd01      	ble.n	8001d90 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e05d      	b.n	8001e4c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	e04c      	b.n	8001e30 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	3b20      	subs	r3, #32
 8001d9c:	7979      	ldrb	r1, [r7, #5]
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	440b      	add	r3, r1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	e034      	b.n	8001e20 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b2d8      	uxtb	r0, r3
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	7bba      	ldrb	r2, [r7, #14]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7ff ff57 	bl	8001c98 <ssd1306_DrawPixel>
 8001dea:	e016      	b.n	8001e1a <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	b2d8      	uxtb	r0, r3
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001dfc:	885b      	ldrh	r3, [r3, #2]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	b2d9      	uxtb	r1, r3
 8001e08:	7bbb      	ldrb	r3, [r7, #14]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	f7ff ff3f 	bl	8001c98 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	793b      	ldrb	r3, [r7, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d3c5      	bcc.n	8001db6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	797b      	ldrb	r3, [r7, #5]
 8001e32:	461a      	mov	r2, r3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d3ad      	bcc.n	8001d96 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	793b      	ldrb	r3, [r7, #4]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <ssd1306_WriteChar+0xfc>)
 8001e48:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3724      	adds	r7, #36	; 0x24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd90      	pop	{r4, r7, pc}
 8001e54:	200005f4 	.word	0x200005f4

08001e58 <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	1d38      	adds	r0, r7, #4
 8001e62:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e66:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001e68:	e012      	b.n	8001e90 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	7818      	ldrb	r0, [r3, #0]
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	1d3a      	adds	r2, r7, #4
 8001e72:	ca06      	ldmia	r2, {r1, r2}
 8001e74:	f7ff ff70 	bl	8001d58 <ssd1306_WriteChar>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d002      	beq.n	8001e8a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	e008      	b.n	8001e9c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e8      	bne.n	8001e6a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460a      	mov	r2, r1
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <ssd1306_SetCursor+0x2c>)
 8001eba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ebc:	79bb      	ldrb	r3, [r7, #6]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <ssd1306_SetCursor+0x2c>)
 8001ec2:	805a      	strh	r2, [r3, #2]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	200005f4 	.word	0x200005f4

08001ed4 <ssd1306_Select>:

// Select a display
void ssd1306_Select(I2C_HandleTypeDef *hi2c, Knob *k) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
    i2c_Select(hi2c, I2C_MUX_MASTER_ADDR, k->row);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	21e2      	movs	r1, #226	; 0xe2
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f80b 	bl	8001f02 <i2c_Select>
    i2c_Select(hi2c, I2C_MUX_SLAVE_ADDR, k->col);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	789b      	ldrb	r3, [r3, #2]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	21e0      	movs	r1, #224	; 0xe0
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f804 	bl	8001f02 <i2c_Select>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(I2C_HandleTypeDef *hi2c, uint8_t mux_addr, uint8_t i) {
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af02      	add	r7, sp, #8
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	70bb      	strb	r3, [r7, #2]
    if (i > 7) return;
 8001f12:	78bb      	ldrb	r3, [r7, #2]
 8001f14:	2b07      	cmp	r3, #7
 8001f16:	d810      	bhi.n	8001f3a <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 8001f18:	78bb      	ldrb	r3, [r7, #2]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(hi2c, mux_addr, temp, 1, 100);
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	b299      	uxth	r1, r3
 8001f28:	f107 020c 	add.w	r2, r7, #12
 8001f2c:	2364      	movs	r3, #100	; 0x64
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2301      	movs	r3, #1
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f001 fb02 	bl	800353c <HAL_I2C_Master_Transmit>
 8001f38:	e000      	b.n	8001f3c <i2c_Select+0x3a>
    if (i > 7) return;
 8001f3a:	bf00      	nop
}
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
    int8_t init_diff = KnobMap(k, k->init_value, 127) - KnobMap(k, k->value, 127);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	227f      	movs	r2, #127	; 0x7f
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe ffdd 	bl	8000f14 <KnobMap>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461c      	mov	r4, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7e9b      	ldrb	r3, [r3, #26]
 8001f62:	227f      	movs	r2, #127	; 0x7f
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe ffd4 	bl	8000f14 <KnobMap>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	1ae3      	subs	r3, r4, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = (abs(init_diff) / 127.0f) * 100;
 8001f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bfb8      	it	lt
 8001f7c:	425b      	neglt	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f88:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002074 <update_init_indicator+0x130>
 8001f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f90:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002078 <update_init_indicator+0x134>
 8001f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9c:	edc7 7a00 	vstr	s15, [r7]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 8001fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <update_init_indicator+0x6c>
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <update_init_indicator+0x138>)
 8001fae:	e05c      	b.n	800206a <update_init_indicator+0x126>

    if (init_pct < 15) {
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	2b0e      	cmp	r3, #14
 8001fb4:	d807      	bhi.n	8001fc6 <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	dd01      	ble.n	8001fc2 <update_init_indicator+0x7e>
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <update_init_indicator+0x13c>)
 8001fc0:	e053      	b.n	800206a <update_init_indicator+0x126>
        else return "        <      ";
 8001fc2:	4b30      	ldr	r3, [pc, #192]	; (8002084 <update_init_indicator+0x140>)
 8001fc4:	e051      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	2b0e      	cmp	r3, #14
 8001fca:	d90a      	bls.n	8001fe2 <update_init_indicator+0x9e>
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	2b1d      	cmp	r3, #29
 8001fd0:	d807      	bhi.n	8001fe2 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	dd01      	ble.n	8001fde <update_init_indicator+0x9a>
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <update_init_indicator+0x144>)
 8001fdc:	e045      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<     ";
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <update_init_indicator+0x148>)
 8001fe0:	e043      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 8001fe2:	7bbb      	ldrb	r3, [r7, #14]
 8001fe4:	2b1d      	cmp	r3, #29
 8001fe6:	d90a      	bls.n	8001ffe <update_init_indicator+0xba>
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	2b2c      	cmp	r3, #44	; 0x2c
 8001fec:	d807      	bhi.n	8001ffe <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	dd01      	ble.n	8001ffa <update_init_indicator+0xb6>
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <update_init_indicator+0x14c>)
 8001ff8:	e037      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<    ";
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <update_init_indicator+0x150>)
 8001ffc:	e035      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	2b2c      	cmp	r3, #44	; 0x2c
 8002002:	d90a      	bls.n	800201a <update_init_indicator+0xd6>
 8002004:	7bbb      	ldrb	r3, [r7, #14]
 8002006:	2b3c      	cmp	r3, #60	; 0x3c
 8002008:	d807      	bhi.n	800201a <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	dd01      	ble.n	8002016 <update_init_indicator+0xd2>
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <update_init_indicator+0x154>)
 8002014:	e029      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<<   ";
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <update_init_indicator+0x158>)
 8002018:	e027      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	2b3c      	cmp	r3, #60	; 0x3c
 800201e:	d90a      	bls.n	8002036 <update_init_indicator+0xf2>
 8002020:	7bbb      	ldrb	r3, [r7, #14]
 8002022:	2b4c      	cmp	r3, #76	; 0x4c
 8002024:	d807      	bhi.n	8002036 <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 8002026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	dd01      	ble.n	8002032 <update_init_indicator+0xee>
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <update_init_indicator+0x15c>)
 8002030:	e01b      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<<<  ";
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <update_init_indicator+0x160>)
 8002034:	e019      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 8002036:	7bbb      	ldrb	r3, [r7, #14]
 8002038:	2b4c      	cmp	r3, #76	; 0x4c
 800203a:	d90a      	bls.n	8002052 <update_init_indicator+0x10e>
 800203c:	7bbb      	ldrb	r3, [r7, #14]
 800203e:	2b5c      	cmp	r3, #92	; 0x5c
 8002040:	d807      	bhi.n	8002052 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	dd01      	ble.n	800204e <update_init_indicator+0x10a>
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <update_init_indicator+0x164>)
 800204c:	e00d      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<<<< ";
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <update_init_indicator+0x168>)
 8002050:	e00b      	b.n	800206a <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	2b5c      	cmp	r3, #92	; 0x5c
 8002056:	d907      	bls.n	8002068 <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 8002058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205c:	2b00      	cmp	r3, #0
 800205e:	dd01      	ble.n	8002064 <update_init_indicator+0x120>
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <update_init_indicator+0x16c>)
 8002062:	e002      	b.n	800206a <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <update_init_indicator+0x170>)
 8002066:	e000      	b.n	800206a <update_init_indicator+0x126>
    } else {
        return " ";
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <update_init_indicator+0x174>)
    }
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	bf00      	nop
 8002074:	42fe0000 	.word	0x42fe0000
 8002078:	42c80000 	.word	0x42c80000
 800207c:	0800a364 	.word	0x0800a364
 8002080:	0800a374 	.word	0x0800a374
 8002084:	0800a384 	.word	0x0800a384
 8002088:	0800a394 	.word	0x0800a394
 800208c:	0800a3a4 	.word	0x0800a3a4
 8002090:	0800a3b4 	.word	0x0800a3b4
 8002094:	0800a3c4 	.word	0x0800a3c4
 8002098:	0800a3d4 	.word	0x0800a3d4
 800209c:	0800a3e4 	.word	0x0800a3e4
 80020a0:	0800a3f4 	.word	0x0800a3f4
 80020a4:	0800a404 	.word	0x0800a404
 80020a8:	0800a414 	.word	0x0800a414
 80020ac:	0800a424 	.word	0x0800a424
 80020b0:	0800a434 	.word	0x0800a434
 80020b4:	0800a444 	.word	0x0800a444
 80020b8:	0800a454 	.word	0x0800a454

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_ADC_MspInit+0x7c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d127      	bne.n	800217e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_ADC_MspInit+0x80>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a15      	ldr	r2, [pc, #84]	; (800218c <HAL_ADC_MspInit+0x80>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_ADC_MspInit+0x80>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_ADC_MspInit+0x80>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <HAL_ADC_MspInit+0x80>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_ADC_MspInit+0x80>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002166:	230f      	movs	r3, #15
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216a:	2303      	movs	r3, #3
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <HAL_ADC_MspInit+0x84>)
 800217a:	f000 ff17 	bl	8002fac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	; 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40012000 	.word	0x40012000
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a19      	ldr	r2, [pc, #100]	; (8002218 <HAL_I2C_MspInit+0x84>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12b      	bne.n	800220e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_I2C_MspInit+0x88>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a17      	ldr	r2, [pc, #92]	; (800221c <HAL_I2C_MspInit+0x88>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_I2C_MspInit+0x88>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021d2:	23c0      	movs	r3, #192	; 0xc0
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d6:	2312      	movs	r3, #18
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021da:	2301      	movs	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e2:	2304      	movs	r3, #4
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <HAL_I2C_MspInit+0x8c>)
 80021ee:	f000 fedd 	bl	8002fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_I2C_MspInit+0x88>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_I2C_MspInit+0x88>)
 80021fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_I2C_MspInit+0x88>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	; 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40005400 	.word	0x40005400
 800221c:	40023800 	.word	0x40023800
 8002220:	40020400 	.word	0x40020400

08002224 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a05      	ldr	r2, [pc, #20]	; (8002248 <HAL_RTC_MspInit+0x24>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d102      	bne.n	800223c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RTC_MspInit+0x28>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40002800 	.word	0x40002800
 800224c:	42470e3c 	.word	0x42470e3c

08002250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <NMI_Handler+0x4>

08002256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <MemManage_Handler+0x4>

08002262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	e7fe      	b.n	800226c <UsageFault_Handler+0x4>

0800226e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229c:	f000 f93e 	bl	800251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <OTG_FS_IRQHandler+0x10>)
 80022aa:	f001 ff2e 	bl	800410a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200027f4 	.word	0x200027f4

080022b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e00a      	b.n	80022e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ca:	f3af 8000 	nop.w
 80022ce:	4601      	mov	r1, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	60ba      	str	r2, [r7, #8]
 80022d6:	b2ca      	uxtb	r2, r1
 80022d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbf0      	blt.n	80022ca <_read+0x12>
	}

return len;
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	e009      	b.n	8002318 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	60ba      	str	r2, [r7, #8]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbf1      	blt.n	8002304 <_write+0x12>
	}
	return len;
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_close>:

int _close(int file)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	return -1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002352:	605a      	str	r2, [r3, #4]
	return 0;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_isatty>:

int _isatty(int file)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
	return 1;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
	return 0;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <_sbrk+0x5c>)
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <_sbrk+0x60>)
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <_sbrk+0x64>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <_sbrk+0x68>)
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d207      	bcs.n	80023d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c4:	f006 fef2 	bl	80091ac <__errno>
 80023c8:	4603      	mov	r3, r0
 80023ca:	220c      	movs	r2, #12
 80023cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	e009      	b.n	80023e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <_sbrk+0x64>)
 80023e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023e6:	68fb      	ldr	r3, [r7, #12]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20020000 	.word	0x20020000
 80023f4:	00000400 	.word	0x00000400
 80023f8:	200005fc 	.word	0x200005fc
 80023fc:	20002c10 	.word	0x20002c10

08002400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <SystemInit+0x20>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <SystemInit+0x20>)
 800240c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800245c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800242a:	490e      	ldr	r1, [pc, #56]	; (8002464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800242c:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002430:	e002      	b.n	8002438 <LoopCopyDataInit>

08002432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002436:	3304      	adds	r3, #4

08002438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800243c:	d3f9      	bcc.n	8002432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243e:	4a0b      	ldr	r2, [pc, #44]	; (800246c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002440:	4c0b      	ldr	r4, [pc, #44]	; (8002470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002444:	e001      	b.n	800244a <LoopFillZerobss>

08002446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002448:	3204      	adds	r2, #4

0800244a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800244c:	d3fb      	bcc.n	8002446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800244e:	f7ff ffd7 	bl	8002400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002452:	f006 feb1 	bl	80091b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002456:	f7fe fe99 	bl	800118c <main>
  bx  lr    
 800245a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800245c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002464:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002468:	0800b830 	.word	0x0800b830
  ldr r2, =_sbss
 800246c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002470:	20002c0c 	.word	0x20002c0c

08002474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002474:	e7fe      	b.n	8002474 <ADC_IRQHandler>
	...

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_Init+0x40>)
 8002482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_Init+0x40>)
 800248e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <HAL_Init+0x40>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a0:	2003      	movs	r0, #3
 80024a2:	f000 fd41 	bl	8002f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f000 f808 	bl	80024bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ac:	f7ff fe06 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00

080024bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_InitTick+0x54>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x58>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fd59 	bl	8002f92 <HAL_SYSTICK_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00e      	b.n	8002508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d80a      	bhi.n	8002506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f000 fd21 	bl	8002f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <HAL_InitTick+0x5c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000020 	.word	0x20000020
 8002514:	20000028 	.word	0x20000028
 8002518:	20000024 	.word	0x20000024

0800251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x24>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_IncTick+0x24>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000028 	.word	0x20000028
 8002540:	20002320 	.word	0x20002320

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20002320 	.word	0x20002320

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff ffee 	bl	8002544 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d005      	beq.n	8002582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_Delay+0x44>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002582:	bf00      	nop
 8002584:	f7ff ffde 	bl	8002544 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d8f7      	bhi.n	8002584 <HAL_Delay+0x28>
  {
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000028 	.word	0x20000028

080025a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e033      	b.n	8002622 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fda2 	bl	800210c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025ea:	f023 0302 	bic.w	r3, r3, #2
 80025ee:	f043 0202 	orr.w	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 faca 	bl	8002b90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f023 0303 	bic.w	r3, r3, #3
 800260a:	f043 0201 	orr.w	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
 8002612:	e001      	b.n	8002618 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_ADC_Start+0x1a>
 8002642:	2302      	movs	r3, #2
 8002644:	e097      	b.n	8002776 <HAL_ADC_Start+0x14a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d018      	beq.n	800268e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800266c:	4b45      	ldr	r3, [pc, #276]	; (8002784 <HAL_ADC_Start+0x158>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a45      	ldr	r2, [pc, #276]	; (8002788 <HAL_ADC_Start+0x15c>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0c9a      	lsrs	r2, r3, #18
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002680:	e002      	b.n	8002688 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3b01      	subs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f9      	bne.n	8002682 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d15f      	bne.n	800275c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026da:	d106      	bne.n	80026ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f023 0206 	bic.w	r2, r3, #6
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_ADC_Start+0x160>)
 80026fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002704:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d129      	bne.n	8002774 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e020      	b.n	8002774 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_ADC_Start+0x164>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d11b      	bne.n	8002774 <HAL_ADC_Start+0x148>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d114      	bne.n	8002774 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	e00b      	b.n	8002774 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f043 0210 	orr.w	r2, r3, #16
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000020 	.word	0x20000020
 8002788:	431bde83 	.word	0x431bde83
 800278c:	40012300 	.word	0x40012300
 8002790:	40012000 	.word	0x40012000

08002794 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_Stop+0x16>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e021      	b.n	80027ee <HAL_ADC_Stop+0x5a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002816:	d113      	bne.n	8002840 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002826:	d10b      	bne.n	8002840 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f043 0220 	orr.w	r2, r3, #32
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e063      	b.n	8002908 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002840:	f7ff fe80 	bl	8002544 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002846:	e021      	b.n	800288c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d01d      	beq.n	800288c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_ADC_PollForConversion+0x6c>
 8002856:	f7ff fe75 	bl	8002544 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d212      	bcs.n	800288c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b02      	cmp	r3, #2
 8002872:	d00b      	beq.n	800288c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f043 0204 	orr.w	r2, r3, #4
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e03d      	b.n	8002908 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b02      	cmp	r3, #2
 8002898:	d1d6      	bne.n	8002848 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0212 	mvn.w	r2, #18
 80028a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d123      	bne.n	8002906 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11f      	bne.n	8002906 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d111      	bne.n	8002906 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1c>
 8002944:	2302      	movs	r3, #2
 8002946:	e113      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x244>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b09      	cmp	r3, #9
 8002956:	d925      	bls.n	80029a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68d9      	ldr	r1, [r3, #12]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	3b1e      	subs	r3, #30
 800296e:	2207      	movs	r2, #7
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43da      	mvns	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	400a      	ands	r2, r1
 800297c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68d9      	ldr	r1, [r3, #12]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	4618      	mov	r0, r3
 8002990:	4603      	mov	r3, r0
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4403      	add	r3, r0
 8002996:	3b1e      	subs	r3, #30
 8002998:	409a      	lsls	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	e022      	b.n	80029ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6919      	ldr	r1, [r3, #16]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	2207      	movs	r2, #7
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	400a      	ands	r2, r1
 80029c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6919      	ldr	r1, [r3, #16]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	4618      	mov	r0, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4403      	add	r3, r0
 80029e0:	409a      	lsls	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d824      	bhi.n	8002a3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	3b05      	subs	r3, #5
 8002a04:	221f      	movs	r2, #31
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	400a      	ands	r2, r1
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b05      	subs	r3, #5
 8002a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34
 8002a3a:	e04c      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	d824      	bhi.n	8002a8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	3b23      	subs	r3, #35	; 0x23
 8002a56:	221f      	movs	r2, #31
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43da      	mvns	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	400a      	ands	r2, r1
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3b23      	subs	r3, #35	; 0x23
 8002a80:	fa00 f203 	lsl.w	r2, r0, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8c:	e023      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b41      	subs	r3, #65	; 0x41
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	400a      	ands	r2, r1
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b41      	subs	r3, #65	; 0x41
 8002aca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_ADC_ConfigChannel+0x250>)
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a28      	ldr	r2, [pc, #160]	; (8002b80 <HAL_ADC_ConfigChannel+0x254>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10f      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1d8>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b12      	cmp	r3, #18
 8002aea:	d10b      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_ADC_ConfigChannel+0x254>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d12b      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x23a>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <HAL_ADC_ConfigChannel+0x258>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x1f4>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b11      	cmp	r3, #17
 8002b1e:	d122      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <HAL_ADC_ConfigChannel+0x258>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d111      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_ADC_ConfigChannel+0x25c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_ADC_ConfigChannel+0x260>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	0c9a      	lsrs	r2, r3, #18
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b58:	e002      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f9      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40012300 	.word	0x40012300
 8002b80:	40012000 	.word	0x40012000
 8002b84:	10000012 	.word	0x10000012
 8002b88:	20000020 	.word	0x20000020
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b98:	4b79      	ldr	r3, [pc, #484]	; (8002d80 <ADC_Init+0x1f0>)
 8002b9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	021a      	lsls	r2, r3, #8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6899      	ldr	r1, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <ADC_Init+0x1f4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d022      	beq.n	8002c6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6899      	ldr	r1, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6899      	ldr	r1, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	e00f      	b.n	8002c8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0202 	bic.w	r2, r2, #2
 8002c9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6899      	ldr	r1, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7e1b      	ldrb	r3, [r3, #24]
 8002ca8:	005a      	lsls	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01b      	beq.n	8002cf4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	035a      	lsls	r2, r3, #13
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	e007      	b.n	8002d04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	051a      	lsls	r2, r3, #20
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d46:	025a      	lsls	r2, r3, #9
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	029a      	lsls	r2, r3, #10
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40012300 	.word	0x40012300
 8002d84:	0f000001 	.word	0x0f000001

08002d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dba:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	60d3      	str	r3, [r2, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	f003 0307 	and.w	r3, r3, #7
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	db0b      	blt.n	8002e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4907      	ldr	r1, [pc, #28]	; (8002e24 <__NVIC_EnableIRQ+0x38>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100

08002e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db0a      	blt.n	8002e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <__NVIC_SetPriority+0x4c>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e50:	e00a      	b.n	8002e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4908      	ldr	r1, [pc, #32]	; (8002e78 <__NVIC_SetPriority+0x50>)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	3b04      	subs	r3, #4
 8002e60:	0112      	lsls	r2, r2, #4
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	440b      	add	r3, r1
 8002e66:	761a      	strb	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000e100 	.word	0xe000e100
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f1c3 0307 	rsb	r3, r3, #7
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	bf28      	it	cs
 8002e9a:	2304      	movcs	r3, #4
 8002e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d902      	bls.n	8002eac <NVIC_EncodePriority+0x30>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3b03      	subs	r3, #3
 8002eaa:	e000      	b.n	8002eae <NVIC_EncodePriority+0x32>
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	43d9      	mvns	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	4313      	orrs	r3, r2
         );
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef4:	d301      	bcc.n	8002efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00f      	b.n	8002f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <SysTick_Config+0x40>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f02:	210f      	movs	r1, #15
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	f7ff ff8e 	bl	8002e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <SysTick_Config+0x40>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SysTick_Config+0x40>)
 8002f14:	2207      	movs	r2, #7
 8002f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000e010 	.word	0xe000e010

08002f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff29 	bl	8002d88 <__NVIC_SetPriorityGrouping>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f50:	f7ff ff3e 	bl	8002dd0 <__NVIC_GetPriorityGrouping>
 8002f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f7ff ff8e 	bl	8002e7c <NVIC_EncodePriority>
 8002f60:	4602      	mov	r2, r0
 8002f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff5d 	bl	8002e28 <__NVIC_SetPriority>
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff31 	bl	8002dec <__NVIC_EnableIRQ>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ffa2 	bl	8002ee4 <SysTick_Config>
 8002fa0:	4603      	mov	r3, r0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	; 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e159      	b.n	800327c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	f040 8148 	bne.w	8003276 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d005      	beq.n	8002ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d130      	bne.n	8003060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	2203      	movs	r2, #3
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003034:	2201      	movs	r2, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 0201 	and.w	r2, r3, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b03      	cmp	r3, #3
 800306a:	d017      	beq.n	800309c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d123      	bne.n	80030f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3208      	adds	r2, #8
 80030b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	220f      	movs	r2, #15
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	08da      	lsrs	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3208      	adds	r2, #8
 80030ea:	69b9      	ldr	r1, [r7, #24]
 80030ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0203 	and.w	r2, r3, #3
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80a2 	beq.w	8003276 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_GPIO_Init+0x2e8>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_GPIO_Init+0x2e8>)
 800313c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003140:	6453      	str	r3, [r2, #68]	; 0x44
 8003142:	4b54      	ldr	r3, [pc, #336]	; (8003294 <HAL_GPIO_Init+0x2e8>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800314e:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_GPIO_Init+0x2ec>)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	3302      	adds	r3, #2
 8003156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	220f      	movs	r2, #15
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a49      	ldr	r2, [pc, #292]	; (800329c <HAL_GPIO_Init+0x2f0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d019      	beq.n	80031ae <HAL_GPIO_Init+0x202>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a48      	ldr	r2, [pc, #288]	; (80032a0 <HAL_GPIO_Init+0x2f4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <HAL_GPIO_Init+0x1fe>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a47      	ldr	r2, [pc, #284]	; (80032a4 <HAL_GPIO_Init+0x2f8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00d      	beq.n	80031a6 <HAL_GPIO_Init+0x1fa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a46      	ldr	r2, [pc, #280]	; (80032a8 <HAL_GPIO_Init+0x2fc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <HAL_GPIO_Init+0x1f6>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a45      	ldr	r2, [pc, #276]	; (80032ac <HAL_GPIO_Init+0x300>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d101      	bne.n	800319e <HAL_GPIO_Init+0x1f2>
 800319a:	2304      	movs	r3, #4
 800319c:	e008      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 800319e:	2307      	movs	r3, #7
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 80031a2:	2303      	movs	r3, #3
 80031a4:	e004      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e002      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x204>
 80031ae:	2300      	movs	r3, #0
 80031b0:	69fa      	ldr	r2, [r7, #28]
 80031b2:	f002 0203 	and.w	r2, r2, #3
 80031b6:	0092      	lsls	r2, r2, #2
 80031b8:	4093      	lsls	r3, r2
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031c0:	4935      	ldr	r1, [pc, #212]	; (8003298 <HAL_GPIO_Init+0x2ec>)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ce:	4b38      	ldr	r3, [pc, #224]	; (80032b0 <HAL_GPIO_Init+0x304>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f2:	4a2f      	ldr	r2, [pc, #188]	; (80032b0 <HAL_GPIO_Init+0x304>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031f8:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <HAL_GPIO_Init+0x304>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_GPIO_Init+0x304>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_GPIO_Init+0x304>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003246:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <HAL_GPIO_Init+0x304>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <HAL_GPIO_Init+0x304>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003270:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_GPIO_Init+0x304>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3301      	adds	r3, #1
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b0f      	cmp	r3, #15
 8003280:	f67f aea2 	bls.w	8002fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40013800 	.word	0x40013800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020800 	.word	0x40020800
 80032a8:	40020c00 	.word	0x40020c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e12b      	b.n	800351e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe ff5a 	bl	8002194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003306:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003316:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003318:	f002 fb4a 	bl	80059b0 <HAL_RCC_GetPCLK1Freq>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	4a81      	ldr	r2, [pc, #516]	; (8003528 <HAL_I2C_Init+0x274>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d807      	bhi.n	8003338 <HAL_I2C_Init+0x84>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a80      	ldr	r2, [pc, #512]	; (800352c <HAL_I2C_Init+0x278>)
 800332c:	4293      	cmp	r3, r2
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e006      	b.n	8003346 <HAL_I2C_Init+0x92>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a7d      	ldr	r2, [pc, #500]	; (8003530 <HAL_I2C_Init+0x27c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	bf94      	ite	ls
 8003340:	2301      	movls	r3, #1
 8003342:	2300      	movhi	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0e7      	b.n	800351e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a78      	ldr	r2, [pc, #480]	; (8003534 <HAL_I2C_Init+0x280>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0c9b      	lsrs	r3, r3, #18
 8003358:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a6a      	ldr	r2, [pc, #424]	; (8003528 <HAL_I2C_Init+0x274>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d802      	bhi.n	8003388 <HAL_I2C_Init+0xd4>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	e009      	b.n	800339c <HAL_I2C_Init+0xe8>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800338e:	fb02 f303 	mul.w	r3, r2, r3
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_I2C_Init+0x284>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	3301      	adds	r3, #1
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	495c      	ldr	r1, [pc, #368]	; (8003528 <HAL_I2C_Init+0x274>)
 80033b8:	428b      	cmp	r3, r1
 80033ba:	d819      	bhi.n	80033f0 <HAL_I2C_Init+0x13c>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e59      	subs	r1, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033d0:	400b      	ands	r3, r1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_I2C_Init+0x138>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1e59      	subs	r1, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e4:	3301      	adds	r3, #1
 80033e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ea:	e051      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e04f      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d111      	bne.n	800341c <HAL_I2C_Init+0x168>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e012      	b.n	8003442 <HAL_I2C_Init+0x18e>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	0099      	lsls	r1, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Init+0x196>
 8003446:	2301      	movs	r3, #1
 8003448:	e022      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10e      	bne.n	8003470 <HAL_I2C_Init+0x1bc>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1e58      	subs	r0, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	440b      	add	r3, r1
 8003460:	fbb0 f3f3 	udiv	r3, r0, r3
 8003464:	3301      	adds	r3, #1
 8003466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346e:	e00f      	b.n	8003490 <HAL_I2C_Init+0x1dc>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1e58      	subs	r0, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	0099      	lsls	r1, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	6809      	ldr	r1, [r1, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6911      	ldr	r1, [r2, #16]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68d2      	ldr	r2, [r2, #12]
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	000186a0 	.word	0x000186a0
 800352c:	001e847f 	.word	0x001e847f
 8003530:	003d08ff 	.word	0x003d08ff
 8003534:	431bde83 	.word	0x431bde83
 8003538:	10624dd3 	.word	0x10624dd3

0800353c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	461a      	mov	r2, r3
 8003548:	460b      	mov	r3, r1
 800354a:	817b      	strh	r3, [r7, #10]
 800354c:	4613      	mov	r3, r2
 800354e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003550:	f7fe fff8 	bl	8002544 <HAL_GetTick>
 8003554:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b20      	cmp	r3, #32
 8003560:	f040 80e0 	bne.w	8003724 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2319      	movs	r3, #25
 800356a:	2201      	movs	r2, #1
 800356c:	4970      	ldr	r1, [pc, #448]	; (8003730 <HAL_I2C_Master_Transmit+0x1f4>)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 faf4 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
 800357c:	e0d3      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_I2C_Master_Transmit+0x50>
 8003588:	2302      	movs	r3, #2
 800358a:	e0cc      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d007      	beq.n	80035b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2221      	movs	r2, #33	; 0x21
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2210      	movs	r2, #16
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	893a      	ldrh	r2, [r7, #8]
 80035e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a50      	ldr	r2, [pc, #320]	; (8003734 <HAL_I2C_Master_Transmit+0x1f8>)
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035f4:	8979      	ldrh	r1, [r7, #10]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	6a3a      	ldr	r2, [r7, #32]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f996 	bl	800392c <I2C_MasterRequestWrite>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e08d      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003620:	e066      	b.n	80036f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	6a39      	ldr	r1, [r7, #32]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 fb6e 	bl	8003d08 <I2C_WaitOnTXEFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b04      	cmp	r3, #4
 8003638:	d107      	bne.n	800364a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06b      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	781a      	ldrb	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d11b      	bne.n	80036c4 <HAL_I2C_Master_Transmit+0x188>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	6a39      	ldr	r1, [r7, #32]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fb5e 	bl	8003d8a <I2C_WaitOnBTFFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d107      	bne.n	80036ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e01a      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d194      	bne.n	8003622 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	00100002 	.word	0x00100002
 8003734:	ffff0000 	.word	0xffff0000

08003738 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	461a      	mov	r2, r3
 8003746:	4603      	mov	r3, r0
 8003748:	817b      	strh	r3, [r7, #10]
 800374a:	460b      	mov	r3, r1
 800374c:	813b      	strh	r3, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003752:	f7fe fef7 	bl	8002544 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b20      	cmp	r3, #32
 8003762:	f040 80d9 	bne.w	8003918 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2319      	movs	r3, #25
 800376c:	2201      	movs	r2, #1
 800376e:	496d      	ldr	r1, [pc, #436]	; (8003924 <HAL_I2C_Mem_Write+0x1ec>)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f9f3 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	e0cc      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_I2C_Mem_Write+0x56>
 800378a:	2302      	movs	r3, #2
 800378c:	e0c5      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d007      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2221      	movs	r2, #33	; 0x21
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <HAL_I2C_Mem_Write+0x1f0>)
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037f6:	88f8      	ldrh	r0, [r7, #6]
 80037f8:	893a      	ldrh	r2, [r7, #8]
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4603      	mov	r3, r0
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f912 	bl	8003a30 <I2C_RequestMemoryWrite>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d052      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e081      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fa74 	bl	8003d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00d      	beq.n	8003842 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2b04      	cmp	r3, #4
 800382c:	d107      	bne.n	800383e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06b      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d11b      	bne.n	80038b8 <HAL_I2C_Mem_Write+0x180>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1aa      	bne.n	8003816 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fa60 	bl	8003d8a <I2C_WaitOnBTFFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d107      	bne.n	80038e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e016      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	00100002 	.word	0x00100002
 8003928:	ffff0000 	.word	0xffff0000

0800392c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	460b      	mov	r3, r1
 800393a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d006      	beq.n	8003956 <I2C_MasterRequestWrite+0x2a>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d003      	beq.n	8003956 <I2C_MasterRequestWrite+0x2a>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003954:	d108      	bne.n	8003968 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00b      	b.n	8003980 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	2b12      	cmp	r3, #18
 800396e:	d107      	bne.n	8003980 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f8e5 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a6:	d103      	bne.n	80039b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e035      	b.n	8003a20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039bc:	d108      	bne.n	80039d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039cc:	611a      	str	r2, [r3, #16]
 80039ce:	e01b      	b.n	8003a08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	11db      	asrs	r3, r3, #7
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 0306 	and.w	r3, r3, #6
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f063 030f 	orn	r3, r3, #15
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	490e      	ldr	r1, [pc, #56]	; (8003a28 <I2C_MasterRequestWrite+0xfc>)
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f90b 	bl	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e010      	b.n	8003a20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4907      	ldr	r1, [pc, #28]	; (8003a2c <I2C_MasterRequestWrite+0x100>)
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f8fb 	bl	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	00010008 	.word	0x00010008
 8003a2c:	00010002 	.word	0x00010002

08003a30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	460b      	mov	r3, r1
 8003a44:	813b      	strh	r3, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f878 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a80:	d103      	bne.n	8003a8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e05f      	b.n	8003b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	492d      	ldr	r1, [pc, #180]	; (8003b58 <I2C_RequestMemoryWrite+0x128>)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f8b0 	bl	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e04c      	b.n	8003b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f91a 	bl	8003d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d107      	bne.n	8003af2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e02b      	b.n	8003b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003afc:	893b      	ldrh	r3, [r7, #8]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	611a      	str	r2, [r3, #16]
 8003b06:	e021      	b.n	8003b4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	6a39      	ldr	r1, [r7, #32]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f8f4 	bl	8003d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d107      	bne.n	8003b3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e005      	b.n	8003b4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b42:	893b      	ldrh	r3, [r7, #8]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	00010002 	.word	0x00010002

08003b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b6c:	e025      	b.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d021      	beq.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe fce5 	bl	8002544 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d116      	bne.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e023      	b.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d10d      	bne.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	2300      	movne	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	e00c      	b.n	8003bfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	43da      	mvns	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4013      	ands	r3, r2
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d0b6      	beq.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c18:	e051      	b.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c28:	d123      	bne.n	8003c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f043 0204 	orr.w	r2, r3, #4
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e046      	b.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d021      	beq.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7fe fc63 	bl	8002544 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d116      	bne.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e020      	b.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10c      	bne.n	8003ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	e00b      	b.n	8003cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d18d      	bne.n	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d14:	e02d      	b.n	8003d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f878 	bl	8003e0c <I2C_IsAcknowledgeFailed>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e02d      	b.n	8003d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d021      	beq.n	8003d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fe fc09 	bl	8002544 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d116      	bne.n	8003d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e007      	b.n	8003d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7c:	2b80      	cmp	r3, #128	; 0x80
 8003d7e:	d1ca      	bne.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d96:	e02d      	b.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f837 	bl	8003e0c <I2C_IsAcknowledgeFailed>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e02d      	b.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d021      	beq.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db0:	f7fe fbc8 	bl	8002544 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d302      	bcc.n	8003dc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d116      	bne.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e007      	b.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d1ca      	bne.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e22:	d11b      	bne.n	8003e5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f043 0204 	orr.w	r2, r3, #4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6c:	b08f      	sub	sp, #60	; 0x3c
 8003e6e:	af0a      	add	r7, sp, #40	; 0x28
 8003e70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e10f      	b.n	800409c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f004 fe88 	bl	8008bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f002 f875 	bl	8005faa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	687e      	ldr	r6, [r7, #4]
 8003ec8:	466d      	mov	r5, sp
 8003eca:	f106 0410 	add.w	r4, r6, #16
 8003ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eda:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ede:	1d33      	adds	r3, r6, #4
 8003ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ee2:	6838      	ldr	r0, [r7, #0]
 8003ee4:	f001 ff4d 	bl	8005d82 <USB_CoreInit>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0d0      	b.n	800409c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f002 f863 	bl	8005fcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
 8003f0a:	e04a      	b.n	8003fa2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	333d      	adds	r3, #61	; 0x3d
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	333c      	adds	r3, #60	; 0x3c
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	b298      	uxth	r0, r3
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3342      	adds	r3, #66	; 0x42
 8003f48:	4602      	mov	r2, r0
 8003f4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	333f      	adds	r3, #63	; 0x3f
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3344      	adds	r3, #68	; 0x44
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3348      	adds	r3, #72	; 0x48
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3350      	adds	r3, #80	; 0x50
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d3af      	bcc.n	8003f0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]
 8003fb0:	e044      	b.n	800403c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	3301      	adds	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d3b5      	bcc.n	8003fb2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	687e      	ldr	r6, [r7, #4]
 800404e:	466d      	mov	r5, sp
 8004050:	f106 0410 	add.w	r4, r6, #16
 8004054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800405a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800405c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004060:	e885 0003 	stmia.w	r5, {r0, r1}
 8004064:	1d33      	adds	r3, r6, #4
 8004066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004068:	6838      	ldr	r0, [r7, #0]
 800406a:	f001 ffd9 	bl	8006020 <USB_DevInit>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e00d      	b.n	800409c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f003 f821 	bl	80070dc <USB_DevDisconnect>

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_PCD_Start+0x1c>
 80040bc:	2302      	movs	r3, #2
 80040be:	e020      	b.n	8004102 <HAL_PCD_Start+0x5e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d109      	bne.n	80040e4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 ff4d 	bl	8005f88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f002 ffd1 	bl	800709a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800410a:	b590      	push	{r4, r7, lr}
 800410c:	b08d      	sub	sp, #52	; 0x34
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f003 f88f 	bl	8007244 <USB_GetMode>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 839d 	bne.w	8004868 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f002 fff3 	bl	800711e <USB_ReadInterrupts>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8393 	beq.w	8004866 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f002 ffea 	bl	800711e <USB_ReadInterrupts>
 800414a:	4603      	mov	r3, r0
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	d107      	bne.n	8004164 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f002 0202 	and.w	r2, r2, #2
 8004162:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f002 ffd8 	bl	800711e <USB_ReadInterrupts>
 800416e:	4603      	mov	r3, r0
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	d161      	bne.n	800423c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0210 	bic.w	r2, r2, #16
 8004186:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f003 020f 	and.w	r2, r3, #15
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	3304      	adds	r3, #4
 80041a6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	0c5b      	lsrs	r3, r3, #17
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d124      	bne.n	80041fe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d035      	beq.n	800422c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80041ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	6a38      	ldr	r0, [r7, #32]
 80041d4:	f002 fe3e 	bl	8006e54 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041e4:	441a      	add	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f6:	441a      	add	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	619a      	str	r2, [r3, #24]
 80041fc:	e016      	b.n	800422c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	0c5b      	lsrs	r3, r3, #17
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	2b06      	cmp	r3, #6
 8004208:	d110      	bne.n	800422c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004210:	2208      	movs	r2, #8
 8004212:	4619      	mov	r1, r3
 8004214:	6a38      	ldr	r0, [r7, #32]
 8004216:	f002 fe1d 	bl	8006e54 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004226:	441a      	add	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0210 	orr.w	r2, r2, #16
 800423a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f002 ff6c 	bl	800711e <USB_ReadInterrupts>
 8004246:	4603      	mov	r3, r0
 8004248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004250:	d16e      	bne.n	8004330 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f002 ff72 	bl	8007144 <USB_ReadDevAllOutEpInterrupt>
 8004260:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004262:	e062      	b.n	800432a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d057      	beq.n	800431e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f002 ff97 	bl	80071ac <USB_ReadDevOutEPInterrupt>
 800427e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004296:	461a      	mov	r2, r3
 8004298:	2301      	movs	r3, #1
 800429a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800429c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fdb0 	bl	8004e04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	461a      	mov	r2, r3
 80042bc:	2308      	movs	r3, #8
 80042be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80042c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 feaa 	bl	800501c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042de:	461a      	mov	r2, r3
 80042e0:	2310      	movs	r3, #16
 80042e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d008      	beq.n	8004300 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	461a      	mov	r2, r3
 80042fc:	2320      	movs	r3, #32
 80042fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	461a      	mov	r2, r3
 8004318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800431c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	3301      	adds	r3, #1
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d199      	bne.n	8004264 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f002 fef2 	bl	800711e <USB_ReadInterrupts>
 800433a:	4603      	mov	r3, r0
 800433c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004344:	f040 80c0 	bne.w	80044c8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f002 ff13 	bl	8007178 <USB_ReadDevAllInEpInterrupt>
 8004352:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004358:	e0b2      	b.n	80044c0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80a7 	beq.w	80044b4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f002 ff39 	bl	80071e8 <USB_ReadDevInEPInterrupt>
 8004376:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d057      	beq.n	8004432 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	2201      	movs	r2, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	43db      	mvns	r3, r3
 800439c:	69f9      	ldr	r1, [r7, #28]
 800439e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a2:	4013      	ands	r3, r2
 80043a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b2:	461a      	mov	r2, r3
 80043b4:	2301      	movs	r3, #1
 80043b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d132      	bne.n	8004426 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	3348      	adds	r3, #72	; 0x48
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4403      	add	r3, r0
 80043e0:	3344      	adds	r3, #68	; 0x44
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4419      	add	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4403      	add	r3, r0
 80043f4:	3348      	adds	r3, #72	; 0x48
 80043f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d113      	bne.n	8004426 <HAL_PCD_IRQHandler+0x31c>
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	3350      	adds	r3, #80	; 0x50
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d108      	bne.n	8004426 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800441e:	461a      	mov	r2, r3
 8004420:	2101      	movs	r1, #1
 8004422:	f002 ff41 	bl	80072a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	b2db      	uxtb	r3, r3
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f004 fc3e 	bl	8008cae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	461a      	mov	r2, r3
 800444a:	2308      	movs	r3, #8
 800444c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	461a      	mov	r2, r3
 8004466:	2310      	movs	r3, #16
 8004468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	461a      	mov	r2, r3
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	461a      	mov	r2, r3
 800449e:	2302      	movs	r3, #2
 80044a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fc1b 	bl	8004cea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	3301      	adds	r3, #1
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f47f af49 	bne.w	800435a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f002 fe26 	bl	800711e <USB_ReadInterrupts>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044dc:	d122      	bne.n	8004524 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d108      	bne.n	800450e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004504:	2100      	movs	r1, #0
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fe26 	bl	8005158 <HAL_PCDEx_LPM_Callback>
 800450c:	e002      	b.n	8004514 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f004 fc3a 	bl	8008d88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f002 fdf8 	bl	800711e <USB_ReadInterrupts>
 800452e:	4603      	mov	r3, r0
 8004530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004538:	d112      	bne.n	8004560 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d102      	bne.n	8004550 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f004 fbf6 	bl	8008d3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800455e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f002 fdda 	bl	800711e <USB_ReadInterrupts>
 800456a:	4603      	mov	r3, r0
 800456c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	f040 80c7 	bne.w	8004706 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2110      	movs	r1, #16
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fea8 	bl	80062e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004598:	2300      	movs	r3, #0
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800459c:	e056      	b.n	800464c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	461a      	mov	r2, r3
 80045ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045d0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e2:	0151      	lsls	r1, r2, #5
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	440a      	add	r2, r1
 80045e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	461a      	mov	r2, r3
 8004600:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004604:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004616:	0151      	lsls	r1, r2, #5
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	440a      	add	r2, r1
 800461c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004620:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004624:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004640:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004644:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	3301      	adds	r3, #1
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004652:	429a      	cmp	r2, r3
 8004654:	d3a3      	bcc.n	800459e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004664:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004668:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004682:	f043 030b 	orr.w	r3, r3, #11
 8004686:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004698:	f043 030b 	orr.w	r3, r3, #11
 800469c:	6453      	str	r3, [r2, #68]	; 0x44
 800469e:	e015      	b.n	80046cc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80046b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c6:	f043 030b 	orr.w	r3, r3, #11
 80046ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80046de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046f0:	461a      	mov	r2, r3
 80046f2:	f002 fdd9 	bl	80072a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004704:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f002 fd07 	bl	800711e <USB_ReadInterrupts>
 8004710:	4603      	mov	r3, r0
 8004712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471a:	d124      	bne.n	8004766 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f002 fd9d 	bl	8007260 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f001 fe3d 	bl	80063aa <USB_GetDevSpeed>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681c      	ldr	r4, [r3, #0]
 800473c:	f001 f92c 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 8004740:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	4620      	mov	r0, r4
 800474c:	f001 fb7a 	bl	8005e44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f004 fad4 	bl	8008cfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695a      	ldr	r2, [r3, #20]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004764:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f002 fcd7 	bl	800711e <USB_ReadInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b08      	cmp	r3, #8
 8004778:	d10a      	bne.n	8004790 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f004 fab1 	bl	8008ce2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f002 0208 	and.w	r2, r2, #8
 800478e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f002 fcc2 	bl	800711e <USB_ReadInterrupts>
 800479a:	4603      	mov	r3, r0
 800479c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a4:	d10f      	bne.n	80047c6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f004 fb09 	bl	8008dc8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80047c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f002 fca7 	bl	800711e <USB_ReadInterrupts>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047da:	d10f      	bne.n	80047fc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	4619      	mov	r1, r3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f004 fadc 	bl	8008da4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80047fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f002 fc8c 	bl	800711e <USB_ReadInterrupts>
 8004806:	4603      	mov	r3, r0
 8004808:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800480c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004810:	d10a      	bne.n	8004828 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f004 faea 	bl	8008dec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004826:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f002 fc76 	bl	800711e <USB_ReadInterrupts>
 8004832:	4603      	mov	r3, r0
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d115      	bne.n	8004868 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f004 fada 	bl	8008e08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	e000      	b.n	8004868 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004866:	bf00      	nop
    }
  }
}
 8004868:	3734      	adds	r7, #52	; 0x34
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}

0800486e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_PCD_SetAddress+0x1a>
 8004884:	2302      	movs	r3, #2
 8004886:	e013      	b.n	80048b0 <HAL_PCD_SetAddress+0x42>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	4611      	mov	r1, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f002 fbd4 	bl	800704e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	4608      	mov	r0, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	461a      	mov	r2, r3
 80048c6:	4603      	mov	r3, r0
 80048c8:	70fb      	strb	r3, [r7, #3]
 80048ca:	460b      	mov	r3, r1
 80048cc:	803b      	strh	r3, [r7, #0]
 80048ce:	4613      	mov	r3, r2
 80048d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da0f      	bge.n	80048fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	f003 020f 	and.w	r2, r3, #15
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	3338      	adds	r3, #56	; 0x38
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	3304      	adds	r3, #4
 80048f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	705a      	strb	r2, [r3, #1]
 80048fc:	e00f      	b.n	800491e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4413      	add	r3, r2
 8004914:	3304      	adds	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	b2da      	uxtb	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800492a:	883a      	ldrh	r2, [r7, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	78ba      	ldrb	r2, [r7, #2]
 8004934:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004948:	78bb      	ldrb	r3, [r7, #2]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d102      	bne.n	8004954 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_PCD_EP_Open+0xaa>
 800495e:	2302      	movs	r3, #2
 8004960:	e00e      	b.n	8004980 <HAL_PCD_EP_Open+0xc8>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68f9      	ldr	r1, [r7, #12]
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fd3f 	bl	80063f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800497e:	7afb      	ldrb	r3, [r7, #11]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	da0f      	bge.n	80049bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	3338      	adds	r3, #56	; 0x38
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	3304      	adds	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	705a      	strb	r2, [r3, #1]
 80049ba:	e00f      	b.n	80049dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_PCD_EP_Close+0x6e>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e00e      	b.n	8004a14 <HAL_PCD_EP_Close+0x8c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68f9      	ldr	r1, [r7, #12]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 fd7d 	bl	8006504 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a2c:	7afb      	ldrb	r3, [r7, #11]
 8004a2e:	f003 020f 	and.w	r2, r3, #15
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	3304      	adds	r3, #4
 8004a44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2200      	movs	r2, #0
 8004a56:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a5e:	7afb      	ldrb	r3, [r7, #11]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d102      	bne.n	8004a78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a78:	7afb      	ldrb	r3, [r7, #11]
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6979      	ldr	r1, [r7, #20]
 8004a90:	f002 f858 	bl	8006b44 <USB_EP0StartXfer>
 8004a94:	e008      	b.n	8004aa8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6979      	ldr	r1, [r7, #20]
 8004aa4:	f001 fe0a 	bl	80066bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	f003 020f 	and.w	r2, r3, #15
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004ad4:	681b      	ldr	r3, [r3, #0]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b086      	sub	sp, #24
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	460b      	mov	r3, r1
 8004af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af2:	7afb      	ldrb	r3, [r7, #11]
 8004af4:	f003 020f 	and.w	r2, r3, #15
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	3338      	adds	r3, #56	; 0x38
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	3304      	adds	r3, #4
 8004b08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b22:	7afb      	ldrb	r3, [r7, #11]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d102      	bne.n	8004b3c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b3c:	7afb      	ldrb	r3, [r7, #11]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	f001 fff6 	bl	8006b44 <USB_EP0StartXfer>
 8004b58:	e008      	b.n	8004b6c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	6979      	ldr	r1, [r7, #20]
 8004b68:	f001 fda8 	bl	80066bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f003 020f 	and.w	r2, r3, #15
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d901      	bls.n	8004b94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e050      	b.n	8004c36 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	da0f      	bge.n	8004bbc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	f003 020f 	and.w	r2, r3, #15
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	3338      	adds	r3, #56	; 0x38
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4413      	add	r3, r2
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	705a      	strb	r2, [r3, #1]
 8004bba:	e00d      	b.n	8004bd8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	3304      	adds	r3, #4
 8004bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_PCD_EP_SetStall+0x82>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e01e      	b.n	8004c36 <HAL_PCD_EP_SetStall+0xc0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f002 f94d 	bl	8006ea6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	b2d9      	uxtb	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c26:	461a      	mov	r2, r3
 8004c28:	f002 fb3e 	bl	80072a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	460b      	mov	r3, r1
 8004c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 020f 	and.w	r2, r3, #15
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d901      	bls.n	8004c5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e042      	b.n	8004ce2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	da0f      	bge.n	8004c84 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	f003 020f 	and.w	r2, r3, #15
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	3338      	adds	r3, #56	; 0x38
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	705a      	strb	r2, [r3, #1]
 8004c82:	e00f      	b.n	8004ca4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	f003 020f 	and.w	r2, r3, #15
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4413      	add	r3, r2
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_PCD_EP_ClrStall+0x86>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e00e      	b.n	8004ce2 <HAL_PCD_EP_ClrStall+0xa4>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f002 f955 	bl	8006f82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b08a      	sub	sp, #40	; 0x28
 8004cee:	af02      	add	r7, sp, #8
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	3338      	adds	r3, #56	; 0x38
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3304      	adds	r3, #4
 8004d10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d901      	bls.n	8004d22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e06c      	b.n	8004dfc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d902      	bls.n	8004d3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3303      	adds	r3, #3
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d46:	e02b      	b.n	8004da0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d902      	bls.n	8004d64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	3303      	adds	r3, #3
 8004d68:	089b      	lsrs	r3, r3, #2
 8004d6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68d9      	ldr	r1, [r3, #12]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	4603      	mov	r3, r0
 8004d82:	6978      	ldr	r0, [r7, #20]
 8004d84:	f002 f831 	bl	8006dea <USB_WritePacket>

    ep->xfer_buff  += len;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	441a      	add	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d809      	bhi.n	8004dca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d203      	bcs.n	8004dca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1be      	bne.n	8004d48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d811      	bhi.n	8004dfa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	2201      	movs	r2, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	43db      	mvns	r3, r3
 8004df0:	6939      	ldr	r1, [r7, #16]
 8004df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004df6:	4013      	ands	r3, r2
 8004df8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3720      	adds	r7, #32
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	333c      	adds	r3, #60	; 0x3c
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	f040 80a0 	bne.w	8004f7c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d015      	beq.n	8004e72 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4a72      	ldr	r2, [pc, #456]	; (8005014 <PCD_EP_OutXfrComplete_int+0x210>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	f240 80dd 	bls.w	800500a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80d7 	beq.w	800500a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6e:	6093      	str	r3, [r2, #8]
 8004e70:	e0cb      	b.n	800500a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d009      	beq.n	8004e90 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2320      	movs	r3, #32
 8004e8c:	6093      	str	r3, [r2, #8]
 8004e8e:	e0bc      	b.n	800500a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 80b7 	bne.w	800500a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a5d      	ldr	r2, [pc, #372]	; (8005014 <PCD_EP_OutXfrComplete_int+0x210>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d90f      	bls.n	8004ec4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec0:	6093      	str	r3, [r2, #8]
 8004ec2:	e0a2      	b.n	800500a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ed6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	0159      	lsls	r1, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	440b      	add	r3, r1
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004eea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4403      	add	r3, r0
 8004efa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004efe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f12:	6819      	ldr	r1, [r3, #0]
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4403      	add	r3, r0
 8004f22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4419      	add	r1, r3
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4403      	add	r3, r0
 8004f38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f3c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d114      	bne.n	8004f6e <PCD_EP_OutXfrComplete_int+0x16a>
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d108      	bne.n	8004f6e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f66:	461a      	mov	r2, r3
 8004f68:	2101      	movs	r1, #1
 8004f6a:	f002 f99d 	bl	80072a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f003 fe7f 	bl	8008c78 <HAL_PCD_DataOutStageCallback>
 8004f7a:	e046      	b.n	800500a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a26      	ldr	r2, [pc, #152]	; (8005018 <PCD_EP_OutXfrComplete_int+0x214>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d124      	bne.n	8004fce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa0:	6093      	str	r3, [r2, #8]
 8004fa2:	e032      	b.n	800500a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f003 fe56 	bl	8008c78 <HAL_PCD_DataOutStageCallback>
 8004fcc:	e01d      	b.n	800500a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d114      	bne.n	8004ffe <PCD_EP_OutXfrComplete_int+0x1fa>
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	f002 f955 	bl	80072a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	4619      	mov	r1, r3
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f003 fe37 	bl	8008c78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	4f54300a 	.word	0x4f54300a
 8005018:	4f54310a 	.word	0x4f54310a

0800501c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	333c      	adds	r3, #60	; 0x3c
 8005034:	3304      	adds	r3, #4
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d90e      	bls.n	8005070 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005058:	2b00      	cmp	r3, #0
 800505a:	d009      	beq.n	8005070 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	461a      	mov	r2, r3
 800506a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f003 fdef 	bl	8008c54 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d90c      	bls.n	8005098 <PCD_EP_OutSetupPacket_int+0x7c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d108      	bne.n	8005098 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005090:	461a      	mov	r2, r3
 8005092:	2101      	movs	r1, #1
 8005094:	f002 f908 	bl	80072a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	4f54300a 	.word	0x4f54300a

080050a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
 80050b4:	4613      	mov	r3, r2
 80050b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050c6:	883b      	ldrh	r3, [r7, #0]
 80050c8:	0419      	lsls	r1, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28
 80050d4:	e028      	b.n	8005128 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4413      	add	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e00d      	b.n	8005106 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	3340      	adds	r3, #64	; 0x40
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	0c1b      	lsrs	r3, r3, #16
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	3301      	adds	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	3b01      	subs	r3, #1
 800510c:	429a      	cmp	r2, r3
 800510e:	d3ec      	bcc.n	80050ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005110:	883b      	ldrh	r3, [r7, #0]
 8005112:	0418      	lsls	r0, r3, #16
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	3b01      	subs	r3, #1
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	4302      	orrs	r2, r0
 8005120:	3340      	adds	r3, #64	; 0x40
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	460b      	mov	r3, r1
 8005140:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	887a      	ldrh	r2, [r7, #2]
 8005148:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e264      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d075      	beq.n	800527a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800518e:	4ba3      	ldr	r3, [pc, #652]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b04      	cmp	r3, #4
 8005198:	d00c      	beq.n	80051b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800519a:	4ba0      	ldr	r3, [pc, #640]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d112      	bne.n	80051cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051a6:	4b9d      	ldr	r3, [pc, #628]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b2:	d10b      	bne.n	80051cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b4:	4b99      	ldr	r3, [pc, #612]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05b      	beq.n	8005278 <HAL_RCC_OscConfig+0x108>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d157      	bne.n	8005278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e23f      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d106      	bne.n	80051e4 <HAL_RCC_OscConfig+0x74>
 80051d6:	4b91      	ldr	r3, [pc, #580]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a90      	ldr	r2, [pc, #576]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e01d      	b.n	8005220 <HAL_RCC_OscConfig+0xb0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051ec:	d10c      	bne.n	8005208 <HAL_RCC_OscConfig+0x98>
 80051ee:	4b8b      	ldr	r3, [pc, #556]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a8a      	ldr	r2, [pc, #552]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	4b88      	ldr	r3, [pc, #544]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a87      	ldr	r2, [pc, #540]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 8005200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e00b      	b.n	8005220 <HAL_RCC_OscConfig+0xb0>
 8005208:	4b84      	ldr	r3, [pc, #528]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a83      	ldr	r2, [pc, #524]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 800520e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	4b81      	ldr	r3, [pc, #516]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a80      	ldr	r2, [pc, #512]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 800521a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800521e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d013      	beq.n	8005250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005228:	f7fd f98c 	bl	8002544 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005230:	f7fd f988 	bl	8002544 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b64      	cmp	r3, #100	; 0x64
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e204      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	4b76      	ldr	r3, [pc, #472]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0xc0>
 800524e:	e014      	b.n	800527a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fd f978 	bl	8002544 <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005258:	f7fd f974 	bl	8002544 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	; 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1f0      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800526a:	4b6c      	ldr	r3, [pc, #432]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0xe8>
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d063      	beq.n	800534e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005286:	4b65      	ldr	r3, [pc, #404]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005292:	4b62      	ldr	r3, [pc, #392]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800529a:	2b08      	cmp	r3, #8
 800529c:	d11c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800529e:	4b5f      	ldr	r3, [pc, #380]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d116      	bne.n	80052d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052aa:	4b5c      	ldr	r3, [pc, #368]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_RCC_OscConfig+0x152>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e1c4      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c2:	4b56      	ldr	r3, [pc, #344]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4952      	ldr	r1, [pc, #328]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d6:	e03a      	b.n	800534e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d020      	beq.n	8005322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052e0:	4b4f      	ldr	r3, [pc, #316]	; (8005420 <HAL_RCC_OscConfig+0x2b0>)
 80052e2:	2201      	movs	r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e6:	f7fd f92d 	bl	8002544 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052ee:	f7fd f929 	bl	8002544 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e1a5      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005300:	4b46      	ldr	r3, [pc, #280]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530c:	4b43      	ldr	r3, [pc, #268]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4940      	ldr	r1, [pc, #256]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]
 8005320:	e015      	b.n	800534e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005322:	4b3f      	ldr	r3, [pc, #252]	; (8005420 <HAL_RCC_OscConfig+0x2b0>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005328:	f7fd f90c 	bl	8002544 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005330:	f7fd f908 	bl	8002544 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e184      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005342:	4b36      	ldr	r3, [pc, #216]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d030      	beq.n	80053bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d016      	beq.n	8005390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005362:	4b30      	ldr	r3, [pc, #192]	; (8005424 <HAL_RCC_OscConfig+0x2b4>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fd f8ec 	bl	8002544 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005370:	f7fd f8e8 	bl	8002544 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e164      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005382:	4b26      	ldr	r3, [pc, #152]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 8005384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x200>
 800538e:	e015      	b.n	80053bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005390:	4b24      	ldr	r3, [pc, #144]	; (8005424 <HAL_RCC_OscConfig+0x2b4>)
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005396:	f7fd f8d5 	bl	8002544 <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800539e:	f7fd f8d1 	bl	8002544 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e14d      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b0:	4b1a      	ldr	r3, [pc, #104]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f0      	bne.n	800539e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a0 	beq.w	800550a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10f      	bne.n	80053fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	4b0f      	ldr	r3, [pc, #60]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a0e      	ldr	r2, [pc, #56]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053f6:	2301      	movs	r3, #1
 80053f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCC_OscConfig+0x2b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d121      	bne.n	800544a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <HAL_RCC_OscConfig+0x2b8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a07      	ldr	r2, [pc, #28]	; (8005428 <HAL_RCC_OscConfig+0x2b8>)
 800540c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005412:	f7fd f897 	bl	8002544 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005418:	e011      	b.n	800543e <HAL_RCC_OscConfig+0x2ce>
 800541a:	bf00      	nop
 800541c:	40023800 	.word	0x40023800
 8005420:	42470000 	.word	0x42470000
 8005424:	42470e80 	.word	0x42470e80
 8005428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542c:	f7fd f88a 	bl	8002544 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e106      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543e:	4b85      	ldr	r3, [pc, #532]	; (8005654 <HAL_RCC_OscConfig+0x4e4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d106      	bne.n	8005460 <HAL_RCC_OscConfig+0x2f0>
 8005452:	4b81      	ldr	r3, [pc, #516]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005456:	4a80      	ldr	r2, [pc, #512]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	6713      	str	r3, [r2, #112]	; 0x70
 800545e:	e01c      	b.n	800549a <HAL_RCC_OscConfig+0x32a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2b05      	cmp	r3, #5
 8005466:	d10c      	bne.n	8005482 <HAL_RCC_OscConfig+0x312>
 8005468:	4b7b      	ldr	r3, [pc, #492]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	4a7a      	ldr	r2, [pc, #488]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 800546e:	f043 0304 	orr.w	r3, r3, #4
 8005472:	6713      	str	r3, [r2, #112]	; 0x70
 8005474:	4b78      	ldr	r3, [pc, #480]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	4a77      	ldr	r2, [pc, #476]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	6713      	str	r3, [r2, #112]	; 0x70
 8005480:	e00b      	b.n	800549a <HAL_RCC_OscConfig+0x32a>
 8005482:	4b75      	ldr	r3, [pc, #468]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	4a74      	ldr	r2, [pc, #464]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	6713      	str	r3, [r2, #112]	; 0x70
 800548e:	4b72      	ldr	r3, [pc, #456]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4a71      	ldr	r2, [pc, #452]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005494:	f023 0304 	bic.w	r3, r3, #4
 8005498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d015      	beq.n	80054ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a2:	f7fd f84f 	bl	8002544 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a8:	e00a      	b.n	80054c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054aa:	f7fd f84b 	bl	8002544 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e0c5      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c0:	4b65      	ldr	r3, [pc, #404]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 80054c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0ee      	beq.n	80054aa <HAL_RCC_OscConfig+0x33a>
 80054cc:	e014      	b.n	80054f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ce:	f7fd f839 	bl	8002544 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054d4:	e00a      	b.n	80054ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d6:	f7fd f835 	bl	8002544 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e0af      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ec:	4b5a      	ldr	r3, [pc, #360]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 80054ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ee      	bne.n	80054d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d105      	bne.n	800550a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054fe:	4b56      	ldr	r3, [pc, #344]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	4a55      	ldr	r2, [pc, #340]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 809b 	beq.w	800564a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005514:	4b50      	ldr	r3, [pc, #320]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 030c 	and.w	r3, r3, #12
 800551c:	2b08      	cmp	r3, #8
 800551e:	d05c      	beq.n	80055da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d141      	bne.n	80055ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005528:	4b4c      	ldr	r3, [pc, #304]	; (800565c <HAL_RCC_OscConfig+0x4ec>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552e:	f7fd f809 	bl	8002544 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005536:	f7fd f805 	bl	8002544 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e081      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005548:	4b43      	ldr	r3, [pc, #268]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	019b      	lsls	r3, r3, #6
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	3b01      	subs	r3, #1
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	061b      	lsls	r3, r3, #24
 8005578:	4937      	ldr	r1, [pc, #220]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 800557a:	4313      	orrs	r3, r2
 800557c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800557e:	4b37      	ldr	r3, [pc, #220]	; (800565c <HAL_RCC_OscConfig+0x4ec>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005584:	f7fc ffde 	bl	8002544 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800558c:	f7fc ffda 	bl	8002544 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e056      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800559e:	4b2e      	ldr	r3, [pc, #184]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x41c>
 80055aa:	e04e      	b.n	800564a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ac:	4b2b      	ldr	r3, [pc, #172]	; (800565c <HAL_RCC_OscConfig+0x4ec>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b2:	f7fc ffc7 	bl	8002544 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ba:	f7fc ffc3 	bl	8002544 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e03f      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055cc:	4b22      	ldr	r3, [pc, #136]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <HAL_RCC_OscConfig+0x44a>
 80055d8:	e037      	b.n	800564a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e032      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <HAL_RCC_OscConfig+0x4e8>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d028      	beq.n	8005646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d121      	bne.n	8005646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560c:	429a      	cmp	r2, r3
 800560e:	d11a      	bne.n	8005646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005616:	4013      	ands	r3, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800561c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800561e:	4293      	cmp	r3, r2
 8005620:	d111      	bne.n	8005646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	3b01      	subs	r3, #1
 8005630:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005632:	429a      	cmp	r2, r3
 8005634:	d107      	bne.n	8005646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005642:	429a      	cmp	r2, r3
 8005644:	d001      	beq.n	800564a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40007000 	.word	0x40007000
 8005658:	40023800 	.word	0x40023800
 800565c:	42470060 	.word	0x42470060

08005660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0cc      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005674:	4b68      	ldr	r3, [pc, #416]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d90c      	bls.n	800569c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b65      	ldr	r3, [pc, #404]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b63      	ldr	r3, [pc, #396]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0b8      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d020      	beq.n	80056ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056b4:	4b59      	ldr	r3, [pc, #356]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4a58      	ldr	r2, [pc, #352]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056cc:	4b53      	ldr	r3, [pc, #332]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4a52      	ldr	r2, [pc, #328]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d8:	4b50      	ldr	r3, [pc, #320]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	494d      	ldr	r1, [pc, #308]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d044      	beq.n	8005780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d107      	bne.n	800570e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	4b47      	ldr	r3, [pc, #284]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d119      	bne.n	800573e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e07f      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d003      	beq.n	800571e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800571a:	2b03      	cmp	r3, #3
 800571c:	d107      	bne.n	800572e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800571e:	4b3f      	ldr	r3, [pc, #252]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e06f      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572e:	4b3b      	ldr	r3, [pc, #236]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e067      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 0203 	bic.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4934      	ldr	r1, [pc, #208]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	4313      	orrs	r3, r2
 800574e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005750:	f7fc fef8 	bl	8002544 <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005756:	e00a      	b.n	800576e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005758:	f7fc fef4 	bl	8002544 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	; 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e04f      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576e:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 020c 	and.w	r2, r3, #12
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	429a      	cmp	r2, r3
 800577e:	d1eb      	bne.n	8005758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005780:	4b25      	ldr	r3, [pc, #148]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d20c      	bcs.n	80057a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578e:	4b22      	ldr	r3, [pc, #136]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005796:	4b20      	ldr	r3, [pc, #128]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e032      	b.n	800580e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057b4:	4b19      	ldr	r3, [pc, #100]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4916      	ldr	r1, [pc, #88]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	490e      	ldr	r1, [pc, #56]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057e6:	f000 f821 	bl	800582c <HAL_RCC_GetSysClockFreq>
 80057ea:	4602      	mov	r2, r0
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	490a      	ldr	r1, [pc, #40]	; (8005820 <HAL_RCC_ClockConfig+0x1c0>)
 80057f8:	5ccb      	ldrb	r3, [r1, r3]
 80057fa:	fa22 f303 	lsr.w	r3, r2, r3
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <HAL_RCC_ClockConfig+0x1c4>)
 8005800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005802:	4b09      	ldr	r3, [pc, #36]	; (8005828 <HAL_RCC_ClockConfig+0x1c8>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f7fc fe58 	bl	80024bc <HAL_InitTick>

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40023c00 	.word	0x40023c00
 800581c:	40023800 	.word	0x40023800
 8005820:	0800b770 	.word	0x0800b770
 8005824:	20000020 	.word	0x20000020
 8005828:	20000024 	.word	0x20000024

0800582c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800582c:	b5b0      	push	{r4, r5, r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005832:	2100      	movs	r1, #0
 8005834:	6079      	str	r1, [r7, #4]
 8005836:	2100      	movs	r1, #0
 8005838:	60f9      	str	r1, [r7, #12]
 800583a:	2100      	movs	r1, #0
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800583e:	2100      	movs	r1, #0
 8005840:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005842:	4952      	ldr	r1, [pc, #328]	; (800598c <HAL_RCC_GetSysClockFreq+0x160>)
 8005844:	6889      	ldr	r1, [r1, #8]
 8005846:	f001 010c 	and.w	r1, r1, #12
 800584a:	2908      	cmp	r1, #8
 800584c:	d00d      	beq.n	800586a <HAL_RCC_GetSysClockFreq+0x3e>
 800584e:	2908      	cmp	r1, #8
 8005850:	f200 8094 	bhi.w	800597c <HAL_RCC_GetSysClockFreq+0x150>
 8005854:	2900      	cmp	r1, #0
 8005856:	d002      	beq.n	800585e <HAL_RCC_GetSysClockFreq+0x32>
 8005858:	2904      	cmp	r1, #4
 800585a:	d003      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x38>
 800585c:	e08e      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800585e:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <HAL_RCC_GetSysClockFreq+0x164>)
 8005860:	60bb      	str	r3, [r7, #8]
       break;
 8005862:	e08e      	b.n	8005982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005864:	4b4b      	ldr	r3, [pc, #300]	; (8005994 <HAL_RCC_GetSysClockFreq+0x168>)
 8005866:	60bb      	str	r3, [r7, #8]
      break;
 8005868:	e08b      	b.n	8005982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800586a:	4948      	ldr	r1, [pc, #288]	; (800598c <HAL_RCC_GetSysClockFreq+0x160>)
 800586c:	6849      	ldr	r1, [r1, #4]
 800586e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005872:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005874:	4945      	ldr	r1, [pc, #276]	; (800598c <HAL_RCC_GetSysClockFreq+0x160>)
 8005876:	6849      	ldr	r1, [r1, #4]
 8005878:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800587c:	2900      	cmp	r1, #0
 800587e:	d024      	beq.n	80058ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005880:	4942      	ldr	r1, [pc, #264]	; (800598c <HAL_RCC_GetSysClockFreq+0x160>)
 8005882:	6849      	ldr	r1, [r1, #4]
 8005884:	0989      	lsrs	r1, r1, #6
 8005886:	4608      	mov	r0, r1
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005890:	f04f 0500 	mov.w	r5, #0
 8005894:	ea00 0204 	and.w	r2, r0, r4
 8005898:	ea01 0305 	and.w	r3, r1, r5
 800589c:	493d      	ldr	r1, [pc, #244]	; (8005994 <HAL_RCC_GetSysClockFreq+0x168>)
 800589e:	fb01 f003 	mul.w	r0, r1, r3
 80058a2:	2100      	movs	r1, #0
 80058a4:	fb01 f102 	mul.w	r1, r1, r2
 80058a8:	1844      	adds	r4, r0, r1
 80058aa:	493a      	ldr	r1, [pc, #232]	; (8005994 <HAL_RCC_GetSysClockFreq+0x168>)
 80058ac:	fba2 0101 	umull	r0, r1, r2, r1
 80058b0:	1863      	adds	r3, r4, r1
 80058b2:	4619      	mov	r1, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	f7fb f9ae 	bl	8000c1c <__aeabi_uldivmod>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4613      	mov	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e04a      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ca:	4b30      	ldr	r3, [pc, #192]	; (800598c <HAL_RCC_GetSysClockFreq+0x160>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	099b      	lsrs	r3, r3, #6
 80058d0:	461a      	mov	r2, r3
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058da:	f04f 0100 	mov.w	r1, #0
 80058de:	ea02 0400 	and.w	r4, r2, r0
 80058e2:	ea03 0501 	and.w	r5, r3, r1
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	014b      	lsls	r3, r1, #5
 80058f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058f8:	0142      	lsls	r2, r0, #5
 80058fa:	4610      	mov	r0, r2
 80058fc:	4619      	mov	r1, r3
 80058fe:	1b00      	subs	r0, r0, r4
 8005900:	eb61 0105 	sbc.w	r1, r1, r5
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	018b      	lsls	r3, r1, #6
 800590e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005912:	0182      	lsls	r2, r0, #6
 8005914:	1a12      	subs	r2, r2, r0
 8005916:	eb63 0301 	sbc.w	r3, r3, r1
 800591a:	f04f 0000 	mov.w	r0, #0
 800591e:	f04f 0100 	mov.w	r1, #0
 8005922:	00d9      	lsls	r1, r3, #3
 8005924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005928:	00d0      	lsls	r0, r2, #3
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	1912      	adds	r2, r2, r4
 8005930:	eb45 0303 	adc.w	r3, r5, r3
 8005934:	f04f 0000 	mov.w	r0, #0
 8005938:	f04f 0100 	mov.w	r1, #0
 800593c:	0299      	lsls	r1, r3, #10
 800593e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005942:	0290      	lsls	r0, r2, #10
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	461a      	mov	r2, r3
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	f7fb f962 	bl	8000c1c <__aeabi_uldivmod>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4613      	mov	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <HAL_RCC_GetSysClockFreq+0x160>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	3301      	adds	r3, #1
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	60bb      	str	r3, [r7, #8]
      break;
 800597a:	e002      	b.n	8005982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <HAL_RCC_GetSysClockFreq+0x164>)
 800597e:	60bb      	str	r3, [r7, #8]
      break;
 8005980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005982:	68bb      	ldr	r3, [r7, #8]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bdb0      	pop	{r4, r5, r7, pc}
 800598c:	40023800 	.word	0x40023800
 8005990:	00f42400 	.word	0x00f42400
 8005994:	017d7840 	.word	0x017d7840

08005998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800599c:	4b03      	ldr	r3, [pc, #12]	; (80059ac <HAL_RCC_GetHCLKFreq+0x14>)
 800599e:	681b      	ldr	r3, [r3, #0]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000020 	.word	0x20000020

080059b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059b4:	f7ff fff0 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 80059b8:	4602      	mov	r2, r0
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	0a9b      	lsrs	r3, r3, #10
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	4903      	ldr	r1, [pc, #12]	; (80059d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c6:	5ccb      	ldrb	r3, [r1, r3]
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40023800 	.word	0x40023800
 80059d4:	0800b780 	.word	0x0800b780

080059d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d038      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a00:	4b68      	ldr	r3, [pc, #416]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a06:	f7fc fd9d 	bl	8002544 <HAL_GetTick>
 8005a0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a0e:	f7fc fd99 	bl	8002544 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e0bd      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a20:	4b61      	ldr	r3, [pc, #388]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f0      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	019b      	lsls	r3, r3, #6
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	071b      	lsls	r3, r3, #28
 8005a3e:	495a      	ldr	r1, [pc, #360]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a46:	4b57      	ldr	r3, [pc, #348]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a4c:	f7fc fd7a 	bl	8002544 <HAL_GetTick>
 8005a50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a54:	f7fc fd76 	bl	8002544 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e09a      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a66:	4b50      	ldr	r3, [pc, #320]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f0      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8083 	beq.w	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	4b48      	ldr	r3, [pc, #288]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	4a47      	ldr	r2, [pc, #284]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a90:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a9c:	4b43      	ldr	r3, [pc, #268]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a42      	ldr	r2, [pc, #264]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aa8:	f7fc fd4c 	bl	8002544 <HAL_GetTick>
 8005aac:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ab0:	f7fc fd48 	bl	8002544 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e06c      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ac2:	4b3a      	ldr	r3, [pc, #232]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ace:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d02f      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d028      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005aec:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005af6:	4b2e      	ldr	r3, [pc, #184]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005afc:	4b2c      	ldr	r3, [pc, #176]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b02:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b08:	4b27      	ldr	r3, [pc, #156]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d114      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b14:	f7fc fd16 	bl	8002544 <HAL_GetTick>
 8005b18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1a:	e00a      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b1c:	f7fc fd12 	bl	8002544 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e034      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0ee      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4a:	d10d      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005b4c:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b60:	4911      	ldr	r1, [pc, #68]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	608b      	str	r3, [r1, #8]
 8005b66:	e005      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005b68:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	4a0e      	ldr	r2, [pc, #56]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b72:	6093      	str	r3, [r2, #8]
 8005b74:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b80:	4909      	ldr	r1, [pc, #36]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	7d1a      	ldrb	r2, [r3, #20]
 8005b96:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005b98:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	42470068 	.word	0x42470068
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	40007000 	.word	0x40007000
 8005bb0:	42470e40 	.word	0x42470e40
 8005bb4:	424711e0 	.word	0x424711e0

08005bb8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e083      	b.n	8005cd2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	7f5b      	ldrb	r3, [r3, #29]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d105      	bne.n	8005be0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fc fb22 	bl	8002224 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	22ca      	movs	r2, #202	; 0xca
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2253      	movs	r2, #83	; 0x53
 8005bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f897 	bl	8005d2a <RTC_EnterInitMode>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	22ff      	movs	r2, #255	; 0xff
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e05e      	b.n	8005cd2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c26:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6899      	ldr	r1, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	68d2      	ldr	r2, [r2, #12]
 8005c4e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6919      	ldr	r1, [r3, #16]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	041a      	lsls	r2, r3, #16
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10e      	bne.n	8005ca0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f829 	bl	8005cda <HAL_RTC_WaitForSynchro>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	22ff      	movs	r2, #255	; 0xff
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e018      	b.n	8005cd2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	22ff      	movs	r2, #255	; 0xff
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cf4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf6:	f7fc fc25 	bl	8002544 <HAL_GetTick>
 8005cfa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005cfc:	e009      	b.n	8005d12 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cfe:	f7fc fc21 	bl	8002544 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d0c:	d901      	bls.n	8005d12 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e007      	b.n	8005d22 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0ee      	beq.n	8005cfe <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d119      	bne.n	8005d78 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d4e:	f7fc fbf9 	bl	8002544 <HAL_GetTick>
 8005d52:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d54:	e009      	b.n	8005d6a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d56:	f7fc fbf5 	bl	8002544 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d64:	d901      	bls.n	8005d6a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e007      	b.n	8005d7a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0ee      	beq.n	8005d56 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d82:	b084      	sub	sp, #16
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	f107 001c 	add.w	r0, r7, #28
 8005d90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d122      	bne.n	8005de0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d105      	bne.n	8005dd4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fac5 	bl	8007364 <USB_CoreReset>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	73fb      	strb	r3, [r7, #15]
 8005dde:	e01a      	b.n	8005e16 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 fab9 	bl	8007364 <USB_CoreReset>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
 8005e08:	e005      	b.n	8005e16 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d10b      	bne.n	8005e34 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f043 0206 	orr.w	r2, r3, #6
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e40:	b004      	add	sp, #16
 8005e42:	4770      	bx	lr

08005e44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d165      	bne.n	8005f24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4a41      	ldr	r2, [pc, #260]	; (8005f60 <USB_SetTurnaroundTime+0x11c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d906      	bls.n	8005e6e <USB_SetTurnaroundTime+0x2a>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4a40      	ldr	r2, [pc, #256]	; (8005f64 <USB_SetTurnaroundTime+0x120>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d202      	bcs.n	8005e6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e68:	230f      	movs	r3, #15
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e062      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4a3c      	ldr	r2, [pc, #240]	; (8005f64 <USB_SetTurnaroundTime+0x120>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d306      	bcc.n	8005e84 <USB_SetTurnaroundTime+0x40>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4a3b      	ldr	r2, [pc, #236]	; (8005f68 <USB_SetTurnaroundTime+0x124>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d202      	bcs.n	8005e84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e7e:	230e      	movs	r3, #14
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e057      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4a38      	ldr	r2, [pc, #224]	; (8005f68 <USB_SetTurnaroundTime+0x124>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d306      	bcc.n	8005e9a <USB_SetTurnaroundTime+0x56>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4a37      	ldr	r2, [pc, #220]	; (8005f6c <USB_SetTurnaroundTime+0x128>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d202      	bcs.n	8005e9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e94:	230d      	movs	r3, #13
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e04c      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a33      	ldr	r2, [pc, #204]	; (8005f6c <USB_SetTurnaroundTime+0x128>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d306      	bcc.n	8005eb0 <USB_SetTurnaroundTime+0x6c>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4a32      	ldr	r2, [pc, #200]	; (8005f70 <USB_SetTurnaroundTime+0x12c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d802      	bhi.n	8005eb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005eaa:	230c      	movs	r3, #12
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	e041      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4a2f      	ldr	r2, [pc, #188]	; (8005f70 <USB_SetTurnaroundTime+0x12c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d906      	bls.n	8005ec6 <USB_SetTurnaroundTime+0x82>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4a2e      	ldr	r2, [pc, #184]	; (8005f74 <USB_SetTurnaroundTime+0x130>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d802      	bhi.n	8005ec6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ec0:	230b      	movs	r3, #11
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e036      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	4a2a      	ldr	r2, [pc, #168]	; (8005f74 <USB_SetTurnaroundTime+0x130>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d906      	bls.n	8005edc <USB_SetTurnaroundTime+0x98>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4a29      	ldr	r2, [pc, #164]	; (8005f78 <USB_SetTurnaroundTime+0x134>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d802      	bhi.n	8005edc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ed6:	230a      	movs	r3, #10
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e02b      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4a26      	ldr	r2, [pc, #152]	; (8005f78 <USB_SetTurnaroundTime+0x134>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d906      	bls.n	8005ef2 <USB_SetTurnaroundTime+0xae>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4a25      	ldr	r2, [pc, #148]	; (8005f7c <USB_SetTurnaroundTime+0x138>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d202      	bcs.n	8005ef2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005eec:	2309      	movs	r3, #9
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e020      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <USB_SetTurnaroundTime+0x138>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d306      	bcc.n	8005f08 <USB_SetTurnaroundTime+0xc4>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	4a20      	ldr	r2, [pc, #128]	; (8005f80 <USB_SetTurnaroundTime+0x13c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d802      	bhi.n	8005f08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f02:	2308      	movs	r3, #8
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e015      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <USB_SetTurnaroundTime+0x13c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d906      	bls.n	8005f1e <USB_SetTurnaroundTime+0xda>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4a1c      	ldr	r2, [pc, #112]	; (8005f84 <USB_SetTurnaroundTime+0x140>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d202      	bcs.n	8005f1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f18:	2307      	movs	r3, #7
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	e00a      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f1e:	2306      	movs	r3, #6
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e007      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f2a:	2309      	movs	r3, #9
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e001      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f30:	2309      	movs	r3, #9
 8005f32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	029b      	lsls	r3, r3, #10
 8005f48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	00d8acbf 	.word	0x00d8acbf
 8005f64:	00e4e1c0 	.word	0x00e4e1c0
 8005f68:	00f42400 	.word	0x00f42400
 8005f6c:	01067380 	.word	0x01067380
 8005f70:	011a499f 	.word	0x011a499f
 8005f74:	01312cff 	.word	0x01312cff
 8005f78:	014ca43f 	.word	0x014ca43f
 8005f7c:	016e3600 	.word	0x016e3600
 8005f80:	01a6ab1f 	.word	0x01a6ab1f
 8005f84:	01e84800 	.word	0x01e84800

08005f88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f043 0201 	orr.w	r2, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d106      	bne.n	8005ff8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60da      	str	r2, [r3, #12]
 8005ff6:	e00b      	b.n	8006010 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60da      	str	r2, [r3, #12]
 800600a:	e001      	b.n	8006010 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e003      	b.n	8006018 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006010:	2032      	movs	r0, #50	; 0x32
 8006012:	f7fc faa3 	bl	800255c <HAL_Delay>

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006020:	b084      	sub	sp, #16
 8006022:	b580      	push	{r7, lr}
 8006024:	b086      	sub	sp, #24
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800602e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	e009      	b.n	8006054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	3340      	adds	r3, #64	; 0x40
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	2200      	movs	r2, #0
 800604c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	3301      	adds	r3, #1
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	2b0e      	cmp	r3, #14
 8006058:	d9f2      	bls.n	8006040 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800605a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d11c      	bne.n	800609a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800606e:	f043 0302 	orr.w	r3, r3, #2
 8006072:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	639a      	str	r2, [r3, #56]	; 0x38
 8006098:	e00b      	b.n	80060b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060b8:	461a      	mov	r2, r3
 80060ba:	2300      	movs	r3, #0
 80060bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c4:	4619      	mov	r1, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060cc:	461a      	mov	r2, r3
 80060ce:	680b      	ldr	r3, [r1, #0]
 80060d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d10c      	bne.n	80060f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d104      	bne.n	80060e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060de:	2100      	movs	r1, #0
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f949 	bl	8006378 <USB_SetDevSpeed>
 80060e6:	e008      	b.n	80060fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060e8:	2101      	movs	r1, #1
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f944 	bl	8006378 <USB_SetDevSpeed>
 80060f0:	e003      	b.n	80060fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060f2:	2103      	movs	r1, #3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f93f 	bl	8006378 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060fa:	2110      	movs	r1, #16
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f8f3 	bl	80062e8 <USB_FlushTxFifo>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f911 	bl	8006334 <USB_FlushRxFifo>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006122:	461a      	mov	r2, r3
 8006124:	2300      	movs	r3, #0
 8006126:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612e:	461a      	mov	r2, r3
 8006130:	2300      	movs	r3, #0
 8006132:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	461a      	mov	r2, r3
 800613c:	2300      	movs	r3, #0
 800613e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	e043      	b.n	80061ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800615c:	d118      	bne.n	8006190 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	461a      	mov	r2, r3
 8006172:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e013      	b.n	80061a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	461a      	mov	r2, r3
 8006188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e008      	b.n	80061a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	461a      	mov	r2, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	461a      	mov	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	461a      	mov	r2, r3
 80061c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	3301      	adds	r3, #1
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d3b7      	bcc.n	8006146 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	e043      	b.n	8006264 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f2:	d118      	bne.n	8006226 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006206:	461a      	mov	r2, r3
 8006208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e013      	b.n	8006238 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	461a      	mov	r2, r3
 800621e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e008      	b.n	8006238 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	461a      	mov	r2, r3
 8006234:	2300      	movs	r3, #0
 8006236:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006244:	461a      	mov	r2, r3
 8006246:	2300      	movs	r3, #0
 8006248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	461a      	mov	r2, r3
 8006258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800625c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	3301      	adds	r3, #1
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	429a      	cmp	r2, r3
 800626a:	d3b7      	bcc.n	80061dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800627e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800628c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	2b00      	cmp	r3, #0
 8006292:	d105      	bne.n	80062a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f043 0210 	orr.w	r2, r3, #16
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	4b0f      	ldr	r3, [pc, #60]	; (80062e4 <USB_DevInit+0x2c4>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f043 0208 	orr.w	r2, r3, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d107      	bne.n	80062d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062cc:	f043 0304 	orr.w	r3, r3, #4
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e0:	b004      	add	sp, #16
 80062e2:	4770      	bx	lr
 80062e4:	803c3800 	.word	0x803c3800

080062e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	019b      	lsls	r3, r3, #6
 80062fa:	f043 0220 	orr.w	r2, r3, #32
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4a09      	ldr	r2, [pc, #36]	; (8006330 <USB_FlushTxFifo+0x48>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d901      	bls.n	8006314 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e006      	b.n	8006322 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b20      	cmp	r3, #32
 800631e:	d0f0      	beq.n	8006302 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	00030d40 	.word	0x00030d40

08006334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2210      	movs	r2, #16
 8006344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <USB_FlushRxFifo+0x40>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d901      	bls.n	8006358 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e006      	b.n	8006366 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b10      	cmp	r3, #16
 8006362:	d0f0      	beq.n	8006346 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	00030d40 	.word	0x00030d40

08006378 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006398:	4313      	orrs	r3, r2
 800639a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b087      	sub	sp, #28
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0306 	and.w	r3, r3, #6
 80063c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]
 80063ce:	e00a      	b.n	80063e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d002      	beq.n	80063dc <USB_GetDevSpeed+0x32>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b06      	cmp	r3, #6
 80063da:	d102      	bne.n	80063e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063dc:	2302      	movs	r3, #2
 80063de:	75fb      	strb	r3, [r7, #23]
 80063e0:	e001      	b.n	80063e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063e2:	230f      	movs	r3, #15
 80063e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	371c      	adds	r7, #28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d13a      	bne.n	8006486 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	2101      	movs	r1, #1
 8006422:	fa01 f303 	lsl.w	r3, r1, r3
 8006426:	b29b      	uxth	r3, r3
 8006428:	68f9      	ldr	r1, [r7, #12]
 800642a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800642e:	4313      	orrs	r3, r2
 8006430:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d155      	bne.n	80064f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	78db      	ldrb	r3, [r3, #3]
 8006462:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006464:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	059b      	lsls	r3, r3, #22
 800646a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800646c:	4313      	orrs	r3, r2
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e036      	b.n	80064f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648c:	69da      	ldr	r2, [r3, #28]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	2101      	movs	r1, #1
 8006498:	fa01 f303 	lsl.w	r3, r1, r3
 800649c:	041b      	lsls	r3, r3, #16
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a4:	4313      	orrs	r3, r2
 80064a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d11a      	bne.n	80064f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	78db      	ldrb	r3, [r3, #3]
 80064d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064da:	430b      	orrs	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d161      	bne.n	80065e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006536:	d11f      	bne.n	8006578 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006552:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006556:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006576:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	2101      	movs	r1, #1
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	b29b      	uxth	r3, r3
 8006590:	43db      	mvns	r3, r3
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006598:	4013      	ands	r3, r2
 800659a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	2101      	movs	r1, #1
 80065ae:	fa01 f303 	lsl.w	r3, r1, r3
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065bc:	4013      	ands	r3, r2
 80065be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	0159      	lsls	r1, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	440b      	add	r3, r1
 80065d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065da:	4619      	mov	r1, r3
 80065dc:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <USB_DeactivateEndpoint+0x1b0>)
 80065de:	4013      	ands	r3, r2
 80065e0:	600b      	str	r3, [r1, #0]
 80065e2:	e060      	b.n	80066a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065fa:	d11f      	bne.n	800663c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800661a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800663a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	2101      	movs	r1, #1
 800664e:	fa01 f303 	lsl.w	r3, r1, r3
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	43db      	mvns	r3, r3
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800665c:	4013      	ands	r3, r2
 800665e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	2101      	movs	r1, #1
 8006672:	fa01 f303 	lsl.w	r3, r1, r3
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	43db      	mvns	r3, r3
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006680:	4013      	ands	r3, r2
 8006682:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	0159      	lsls	r1, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	440b      	add	r3, r1
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	4619      	mov	r1, r3
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <USB_DeactivateEndpoint+0x1b4>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	ec337800 	.word	0xec337800
 80066b8:	eff37800 	.word	0xeff37800

080066bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	; 0x28
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	f040 815c 	bne.w	8006996 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d132      	bne.n	800674c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006700:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006704:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006708:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	440a      	add	r2, r1
 8006720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006724:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	0151      	lsls	r1, r2, #5
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	440a      	add	r2, r1
 8006740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006744:	0cdb      	lsrs	r3, r3, #19
 8006746:	04db      	lsls	r3, r3, #19
 8006748:	6113      	str	r3, [r2, #16]
 800674a:	e074      	b.n	8006836 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006766:	0cdb      	lsrs	r3, r3, #19
 8006768:	04db      	lsls	r3, r3, #19
 800676a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	440a      	add	r2, r1
 8006782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006786:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800678a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800678e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6959      	ldr	r1, [r3, #20]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	440b      	add	r3, r1
 80067a8:	1e59      	subs	r1, r3, #1
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80067b2:	04d9      	lsls	r1, r3, #19
 80067b4:	4b9d      	ldr	r3, [pc, #628]	; (8006a2c <USB_EPStartXfer+0x370>)
 80067b6:	400b      	ands	r3, r1
 80067b8:	69b9      	ldr	r1, [r7, #24]
 80067ba:	0148      	lsls	r0, r1, #5
 80067bc:	69f9      	ldr	r1, [r7, #28]
 80067be:	4401      	add	r1, r0
 80067c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067c4:	4313      	orrs	r3, r2
 80067c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067de:	69b9      	ldr	r1, [r7, #24]
 80067e0:	0148      	lsls	r0, r1, #5
 80067e2:	69f9      	ldr	r1, [r7, #28]
 80067e4:	4401      	add	r1, r0
 80067e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067ea:	4313      	orrs	r3, r2
 80067ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d11f      	bne.n	8006836 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006810:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006814:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006830:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006834:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d14b      	bne.n	80068d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	461a      	mov	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	78db      	ldrb	r3, [r3, #3]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d128      	bne.n	80068b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d110      	bne.n	8006892 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	0151      	lsls	r1, r2, #5
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	440a      	add	r2, r1
 8006886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e00f      	b.n	80068b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	e12f      	b.n	8006b34 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	78db      	ldrb	r3, [r3, #3]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d015      	beq.n	8006928 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8117 	beq.w	8006b34 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	2101      	movs	r1, #1
 8006918:	fa01 f303 	lsl.w	r3, r1, r3
 800691c:	69f9      	ldr	r1, [r7, #28]
 800691e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006922:	4313      	orrs	r3, r2
 8006924:	634b      	str	r3, [r1, #52]	; 0x34
 8006926:	e105      	b.n	8006b34 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d110      	bne.n	800695a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006952:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e00f      	b.n	800697a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006978:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	68d9      	ldr	r1, [r3, #12]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	781a      	ldrb	r2, [r3, #0]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	b298      	uxth	r0, r3
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	4603      	mov	r3, r0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fa2b 	bl	8006dea <USB_WritePacket>
 8006994:	e0ce      	b.n	8006b34 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	0151      	lsls	r1, r2, #5
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	440a      	add	r2, r1
 80069ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b0:	0cdb      	lsrs	r3, r3, #19
 80069b2:	04db      	lsls	r3, r3, #19
 80069b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d126      	bne.n	8006a30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f8:	69b9      	ldr	r1, [r7, #24]
 80069fa:	0148      	lsls	r0, r1, #5
 80069fc:	69f9      	ldr	r1, [r7, #28]
 80069fe:	4401      	add	r1, r0
 8006a00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a04:	4313      	orrs	r3, r2
 8006a06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a26:	6113      	str	r3, [r2, #16]
 8006a28:	e036      	b.n	8006a98 <USB_EPStartXfer+0x3dc>
 8006a2a:	bf00      	nop
 8006a2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	695a      	ldr	r2, [r3, #20]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	4413      	add	r3, r2
 8006a3a:	1e5a      	subs	r2, r3, #1
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a44:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	8afb      	ldrh	r3, [r7, #22]
 8006a56:	04d9      	lsls	r1, r3, #19
 8006a58:	4b39      	ldr	r3, [pc, #228]	; (8006b40 <USB_EPStartXfer+0x484>)
 8006a5a:	400b      	ands	r3, r1
 8006a5c:	69b9      	ldr	r1, [r7, #24]
 8006a5e:	0148      	lsls	r0, r1, #5
 8006a60:	69f9      	ldr	r1, [r7, #28]
 8006a62:	4401      	add	r1, r0
 8006a64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	8af9      	ldrh	r1, [r7, #22]
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a88:	69b9      	ldr	r1, [r7, #24]
 8006a8a:	0148      	lsls	r0, r1, #5
 8006a8c:	69f9      	ldr	r1, [r7, #28]
 8006a8e:	4401      	add	r1, r0
 8006a90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a94:	4313      	orrs	r3, r2
 8006a96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d10d      	bne.n	8006aba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	68d9      	ldr	r1, [r3, #12]
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	460a      	mov	r2, r1
 8006ab8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	78db      	ldrb	r3, [r3, #3]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d128      	bne.n	8006b14 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d110      	bne.n	8006af4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	e00f      	b.n	8006b14 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	0151      	lsls	r1, r2, #5
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	440a      	add	r2, r1
 8006b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	1ff80000 	.word	0x1ff80000

08006b44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	785b      	ldrb	r3, [r3, #1]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	f040 80cd 	bne.w	8006d00 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d132      	bne.n	8006bd4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	0151      	lsls	r1, r2, #5
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	440a      	add	r2, r1
 8006b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bcc:	0cdb      	lsrs	r3, r3, #19
 8006bce:	04db      	lsls	r3, r3, #19
 8006bd0:	6113      	str	r3, [r2, #16]
 8006bd2:	e04e      	b.n	8006c72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bee:	0cdb      	lsrs	r3, r3, #19
 8006bf0:	04db      	lsls	r3, r3, #19
 8006bf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	695a      	ldr	r2, [r3, #20]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d903      	bls.n	8006c2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c62:	6939      	ldr	r1, [r7, #16]
 8006c64:	0148      	lsls	r0, r1, #5
 8006c66:	6979      	ldr	r1, [r7, #20]
 8006c68:	4401      	add	r1, r0
 8006c6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d11e      	bne.n	8006cb6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	e092      	b.n	8006ddc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d07e      	beq.n	8006ddc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	2101      	movs	r1, #1
 8006cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf4:	6979      	ldr	r1, [r7, #20]
 8006cf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	634b      	str	r3, [r1, #52]	; 0x34
 8006cfe:	e06d      	b.n	8006ddc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d1a:	0cdb      	lsrs	r3, r3, #19
 8006d1c:	04db      	lsls	r3, r3, #19
 8006d1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d42:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	691a      	ldr	r2, [r3, #16]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d8a:	6939      	ldr	r1, [r7, #16]
 8006d8c:	0148      	lsls	r0, r1, #5
 8006d8e:	6979      	ldr	r1, [r7, #20]
 8006d90:	4401      	add	r1, r0
 8006d92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d96:	4313      	orrs	r3, r2
 8006d98:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d10d      	bne.n	8006dbc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d009      	beq.n	8006dbc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	68d9      	ldr	r1, [r3, #12]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db8:	460a      	mov	r2, r1
 8006dba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b089      	sub	sp, #36	; 0x24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	4611      	mov	r1, r2
 8006df6:	461a      	mov	r2, r3
 8006df8:	460b      	mov	r3, r1
 8006dfa:	71fb      	strb	r3, [r7, #7]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006e08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11a      	bne.n	8006e46 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e10:	88bb      	ldrh	r3, [r7, #4]
 8006e12:	3303      	adds	r3, #3
 8006e14:	089b      	lsrs	r3, r3, #2
 8006e16:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61bb      	str	r3, [r7, #24]
 8006e1c:	e00f      	b.n	8006e3e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e1e:	79fb      	ldrb	r3, [r7, #7]
 8006e20:	031a      	lsls	r2, r3, #12
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	3304      	adds	r3, #4
 8006e36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d3eb      	bcc.n	8006e1e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3724      	adds	r7, #36	; 0x24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b089      	sub	sp, #36	; 0x24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	3303      	adds	r3, #3
 8006e6e:	089b      	lsrs	r3, r3, #2
 8006e70:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	e00b      	b.n	8006e90 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	3304      	adds	r3, #4
 8006e88:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	61bb      	str	r3, [r7, #24]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d3ef      	bcc.n	8006e78 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e98:	69fb      	ldr	r3, [r7, #28]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3724      	adds	r7, #36	; 0x24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d12c      	bne.n	8006f1c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	db12      	blt.n	8006efa <USB_EPSetStall+0x54>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00f      	beq.n	8006efa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ef8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	0151      	lsls	r1, r2, #5
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	440a      	add	r2, r1
 8006f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	e02b      	b.n	8006f74 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	db12      	blt.n	8006f54 <USB_EPSetStall+0xae>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00f      	beq.n	8006f54 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f52:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d128      	bne.n	8006ff0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	78db      	ldrb	r3, [r3, #3]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d003      	beq.n	8006fce <USB_EPClearStall+0x4c>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	78db      	ldrb	r3, [r3, #3]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d138      	bne.n	8007040 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e027      	b.n	8007040 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800700a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800700e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	78db      	ldrb	r3, [r3, #3]
 8007014:	2b03      	cmp	r3, #3
 8007016:	d003      	beq.n	8007020 <USB_EPClearStall+0x9e>
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	78db      	ldrb	r3, [r3, #3]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d10f      	bne.n	8007040 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	0151      	lsls	r1, r2, #5
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	440a      	add	r2, r1
 8007036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800703a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800703e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800706c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007070:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007082:	68f9      	ldr	r1, [r7, #12]
 8007084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007088:	4313      	orrs	r3, r2
 800708a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070b4:	f023 0303 	bic.w	r3, r3, #3
 80070b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070c8:	f023 0302 	bic.w	r3, r3, #2
 80070cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800710a:	f043 0302 	orr.w	r3, r3, #2
 800710e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4013      	ands	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	4013      	ands	r3, r2
 8007166:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	0c1b      	lsrs	r3, r3, #16
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4013      	ands	r3, r2
 800719a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	b29b      	uxth	r3, r3
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4013      	ands	r3, r2
 80071d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071da:	68bb      	ldr	r3, [r7, #8]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
 8007218:	01db      	lsls	r3, r3, #7
 800721a:	b2db      	uxtb	r3, r3
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007222:	78fb      	ldrb	r3, [r7, #3]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4013      	ands	r3, r2
 8007234:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007236:	68bb      	ldr	r3, [r7, #8]
}
 8007238:	4618      	mov	r0, r3
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	f003 0301 	and.w	r3, r3, #1
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800727e:	f023 0307 	bic.w	r3, r3, #7
 8007282:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007296:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
	...

080072a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	460b      	mov	r3, r1
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	333c      	adds	r3, #60	; 0x3c
 80072be:	3304      	adds	r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4a26      	ldr	r2, [pc, #152]	; (8007360 <USB_EP0_OutStart+0xb8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d90a      	bls.n	80072e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072dc:	d101      	bne.n	80072e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	e037      	b.n	8007352 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e8:	461a      	mov	r2, r3
 80072ea:	2300      	movs	r3, #0
 80072ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007310:	f043 0318 	orr.w	r3, r3, #24
 8007314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007324:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007328:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d10f      	bne.n	8007350 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800734a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800734e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	4f54300a 	.word	0x4f54300a

08007364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4a13      	ldr	r2, [pc, #76]	; (80073c8 <USB_CoreReset+0x64>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d901      	bls.n	8007382 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e01b      	b.n	80073ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	daf2      	bge.n	8007370 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f043 0201 	orr.w	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <USB_CoreReset+0x64>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d901      	bls.n	80073ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e006      	b.n	80073ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d0f0      	beq.n	800739a <USB_CoreReset+0x36>

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	00030d40 	.word	0x00030d40

080073cc <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 80073d8:	2044      	movs	r0, #68	; 0x44
 80073da:	f001 fead 	bl	8009138 <USBD_static_malloc>
 80073de:	4602      	mov	r2, r0
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e016      	b.n	8007422 <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 80073fc:	2340      	movs	r3, #64	; 0x40
 80073fe:	2202      	movs	r2, #2
 8007400:	2181      	movs	r1, #129	; 0x81
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 fd75 	bl	8008ef2 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 8007408:	2340      	movs	r3, #64	; 0x40
 800740a:	2202      	movs	r2, #2
 800740c:	2101      	movs	r1, #1
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 fd6f 	bl	8008ef2 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8007414:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 8007416:	2340      	movs	r3, #64	; 0x40
 8007418:	2101      	movs	r1, #1
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 fe58 	bl	80090d0 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8007420:	2300      	movs	r3, #0
  }
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 8007436:	2181      	movs	r1, #129	; 0x81
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 fd80 	bl	8008f3e <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 800743e:	2101      	movs	r1, #1
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 fd7c 	bl	8008f3e <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <USBD_Midi_Setup+0x26>
 8007466:	2b20      	cmp	r3, #32
 8007468:	d10b      	bne.n	8007482 <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 f937 	bl	80086e0 <USBD_CtlError>
      return USBD_FAIL;
 8007472:	2303      	movs	r3, #3
 8007474:	e006      	b.n	8007484 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 f931 	bl	80086e0 <USBD_CtlError>
      return USBD_FAIL;
 800747e:	2303      	movs	r3, #3
 8007480:	e000      	b.n	8007484 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2265      	movs	r2, #101	; 0x65
 8007498:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 800749a:	4b03      	ldr	r3, [pc, #12]	; (80074a8 <USBD_Midi_GetCfgDesc+0x1c>)
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	20000064 	.word	0x20000064

080074ac <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800754e:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 fddc 	bl	8009112 <USBD_LL_GetRxDataSize>
 800755a:	4602      	mov	r2, r0
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8007564:	2300      	movs	r3, #0
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	e00c      	b.n	8007584 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	440a      	add	r2, r1
 8007578:	2104      	movs	r1, #4
 800757a:	4610      	mov	r0, r2
 800757c:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	3304      	adds	r3, #4
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	429a      	cmp	r2, r3
 800758c:	d3ed      	bcc.n	800756a <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 800758e:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	2101      	movs	r1, #1
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 fd9b 	bl	80090d0 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	220a      	movs	r2, #10
 80075b0:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 80075b2:	4b03      	ldr	r3, [pc, #12]	; (80075c0 <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	200000cc 	.word	0x200000cc

080075c4 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80075ce:	2303      	movs	r3, #3
 80075d0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	4613      	mov	r3, r2
 80075fe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007606:	2303      	movs	r3, #3
 8007608:	e01f      	b.n	800764a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	79fa      	ldrb	r2, [r7, #7]
 800763c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f001 fbf0 	bl	8008e24 <USBD_LL_Init>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007666:	2303      	movs	r3, #3
 8007668:	e016      	b.n	8007698 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	f107 020e 	add.w	r2, r7, #14
 800768a:	4610      	mov	r0, r2
 800768c:	4798      	blx	r3
 800768e:	4602      	mov	r2, r0
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 fc07 	bl	8008ebc <USBD_LL_Start>
 80076ae:	4603      	mov	r3, r0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076da:	2303      	movs	r3, #3
 80076dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d009      	beq.n	80076fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	4611      	mov	r1, r2
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
 80076f8:	4603      	mov	r3, r0
 80076fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	78fa      	ldrb	r2, [r7, #3]
 8007726:	4611      	mov	r1, r2
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	4798      	blx	r3
  }

  return USBD_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f000 ff8f 	bl	800866c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800775c:	461a      	mov	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800776a:	f003 031f 	and.w	r3, r3, #31
 800776e:	2b02      	cmp	r3, #2
 8007770:	d01a      	beq.n	80077a8 <USBD_LL_SetupStage+0x72>
 8007772:	2b02      	cmp	r3, #2
 8007774:	d822      	bhi.n	80077bc <USBD_LL_SetupStage+0x86>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <USBD_LL_SetupStage+0x4a>
 800777a:	2b01      	cmp	r3, #1
 800777c:	d00a      	beq.n	8007794 <USBD_LL_SetupStage+0x5e>
 800777e:	e01d      	b.n	80077bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa61 	bl	8007c50 <USBD_StdDevReq>
 800778e:	4603      	mov	r3, r0
 8007790:	73fb      	strb	r3, [r7, #15]
      break;
 8007792:	e020      	b.n	80077d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fac5 	bl	8007d2c <USBD_StdItfReq>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]
      break;
 80077a6:	e016      	b.n	80077d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fb04 	bl	8007dbe <USBD_StdEPReq>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]
      break;
 80077ba:	e00c      	b.n	80077d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fbd6 	bl	8008f7c <USBD_LL_StallEP>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
      break;
 80077d4:	bf00      	nop
  }

  return ret;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	460b      	mov	r3, r1
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d138      	bne.n	8007866 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007802:	2b03      	cmp	r3, #3
 8007804:	d14a      	bne.n	800789c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	429a      	cmp	r2, r3
 8007810:	d913      	bls.n	800783a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	689a      	ldr	r2, [r3, #8]
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	1ad2      	subs	r2, r2, r3
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4293      	cmp	r3, r2
 800782a:	bf28      	it	cs
 800782c:	4613      	movcs	r3, r2
 800782e:	461a      	mov	r2, r3
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 fff1 	bl	800881a <USBD_CtlContinueRx>
 8007838:	e030      	b.n	800789c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b03      	cmp	r3, #3
 8007844:	d10b      	bne.n	800785e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d005      	beq.n	800785e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 ffec 	bl	800883c <USBD_CtlSendStatus>
 8007864:	e01a      	b.n	800789c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b03      	cmp	r3, #3
 8007870:	d114      	bne.n	800789c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00e      	beq.n	800789c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	7afa      	ldrb	r2, [r7, #11]
 8007888:	4611      	mov	r1, r2
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	4798      	blx	r3
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	e000      	b.n	800789e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b086      	sub	sp, #24
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	460b      	mov	r3, r1
 80078b0:	607a      	str	r2, [r7, #4]
 80078b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d16b      	bne.n	8007992 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3314      	adds	r3, #20
 80078be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d156      	bne.n	8007978 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d914      	bls.n	8007900 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	461a      	mov	r2, r3
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 ff83 	bl	80087f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078f2:	2300      	movs	r3, #0
 80078f4:	2200      	movs	r2, #0
 80078f6:	2100      	movs	r1, #0
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f001 fbe9 	bl	80090d0 <USBD_LL_PrepareReceive>
 80078fe:	e03b      	b.n	8007978 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	429a      	cmp	r2, r3
 800790a:	d11c      	bne.n	8007946 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007914:	429a      	cmp	r2, r3
 8007916:	d316      	bcc.n	8007946 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007922:	429a      	cmp	r2, r3
 8007924:	d20f      	bcs.n	8007946 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007926:	2200      	movs	r2, #0
 8007928:	2100      	movs	r1, #0
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 ff64 	bl	80087f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007938:	2300      	movs	r3, #0
 800793a:	2200      	movs	r2, #0
 800793c:	2100      	movs	r1, #0
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f001 fbc6 	bl	80090d0 <USBD_LL_PrepareReceive>
 8007944:	e018      	b.n	8007978 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b03      	cmp	r3, #3
 8007950:	d10b      	bne.n	800796a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d005      	beq.n	800796a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800796a:	2180      	movs	r1, #128	; 0x80
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f001 fb05 	bl	8008f7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 ff75 	bl	8008862 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800797e:	2b01      	cmp	r3, #1
 8007980:	d122      	bne.n	80079c8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff fe98 	bl	80076b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007990:	e01a      	b.n	80079c8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b03      	cmp	r3, #3
 800799c:	d114      	bne.n	80079c8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00e      	beq.n	80079c8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	7afa      	ldrb	r2, [r7, #11]
 80079b4:	4611      	mov	r1, r2
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	4798      	blx	r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	e000      	b.n	80079ca <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e02f      	b.n	8007a66 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00f      	beq.n	8007a30 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6852      	ldr	r2, [r2, #4]
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a30:	2340      	movs	r3, #64	; 0x40
 8007a32:	2200      	movs	r2, #0
 8007a34:	2100      	movs	r1, #0
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fa5b 	bl	8008ef2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2240      	movs	r2, #64	; 0x40
 8007a48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2180      	movs	r1, #128	; 0x80
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fa4d 	bl	8008ef2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2240      	movs	r2, #64	; 0x40
 8007a62:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	78fa      	ldrb	r2, [r7, #3]
 8007a7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d106      	bne.n	8007adc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e012      	b.n	8007b26 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d10b      	bne.n	8007b24 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e014      	b.n	8007b72 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d10d      	bne.n	8007b70 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d007      	beq.n	8007b70 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	78fa      	ldrb	r2, [r7, #3]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e014      	b.n	8007bbe <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d10d      	bne.n	8007bbc <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d007      	beq.n	8007bbc <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	6852      	ldr	r2, [r2, #4]
 8007c02:	b2d2      	uxtb	r2, r2
 8007c04:	4611      	mov	r1, r2
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
  }

  return USBD_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c32:	8a3b      	ldrh	r3, [r7, #16]
 8007c34:	021b      	lsls	r3, r3, #8
 8007c36:	b21a      	sxth	r2, r3
 8007c38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	b21b      	sxth	r3, r3
 8007c40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c42:	89fb      	ldrh	r3, [r7, #14]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d005      	beq.n	8007c76 <USBD_StdDevReq+0x26>
 8007c6a:	2b40      	cmp	r3, #64	; 0x40
 8007c6c:	d853      	bhi.n	8007d16 <USBD_StdDevReq+0xc6>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <USBD_StdDevReq+0x3a>
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d14f      	bne.n	8007d16 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
      break;
 8007c88:	e04a      	b.n	8007d20 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b09      	cmp	r3, #9
 8007c90:	d83b      	bhi.n	8007d0a <USBD_StdDevReq+0xba>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <USBD_StdDevReq+0x48>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007d01 	.word	0x08007d01
 8007ca0:	08007d0b 	.word	0x08007d0b
 8007ca4:	08007cf7 	.word	0x08007cf7
 8007ca8:	08007d0b 	.word	0x08007d0b
 8007cac:	08007ccb 	.word	0x08007ccb
 8007cb0:	08007cc1 	.word	0x08007cc1
 8007cb4:	08007d0b 	.word	0x08007d0b
 8007cb8:	08007ce3 	.word	0x08007ce3
 8007cbc:	08007cd5 	.word	0x08007cd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f9de 	bl	8008084 <USBD_GetDescriptor>
          break;
 8007cc8:	e024      	b.n	8007d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fb43 	bl	8008358 <USBD_SetAddress>
          break;
 8007cd2:	e01f      	b.n	8007d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fb82 	bl	80083e0 <USBD_SetConfig>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]
          break;
 8007ce0:	e018      	b.n	8007d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fc21 	bl	800852c <USBD_GetConfig>
          break;
 8007cea:	e013      	b.n	8007d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fc52 	bl	8008598 <USBD_GetStatus>
          break;
 8007cf4:	e00e      	b.n	8007d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fc81 	bl	8008600 <USBD_SetFeature>
          break;
 8007cfe:	e009      	b.n	8007d14 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fc90 	bl	8008628 <USBD_ClrFeature>
          break;
 8007d08:	e004      	b.n	8007d14 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fce7 	bl	80086e0 <USBD_CtlError>
          break;
 8007d12:	bf00      	nop
      }
      break;
 8007d14:	e004      	b.n	8007d20 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fce1 	bl	80086e0 <USBD_CtlError>
      break;
 8007d1e:	bf00      	nop
  }

  return ret;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop

08007d2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d005      	beq.n	8007d52 <USBD_StdItfReq+0x26>
 8007d46:	2b40      	cmp	r3, #64	; 0x40
 8007d48:	d82f      	bhi.n	8007daa <USBD_StdItfReq+0x7e>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <USBD_StdItfReq+0x26>
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d12b      	bne.n	8007daa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d81d      	bhi.n	8007d9c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	889b      	ldrh	r3, [r3, #4]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d813      	bhi.n	8007d92 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	88db      	ldrh	r3, [r3, #6]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d110      	bne.n	8007da6 <USBD_StdItfReq+0x7a>
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10d      	bne.n	8007da6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fd56 	bl	800883c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d90:	e009      	b.n	8007da6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fca3 	bl	80086e0 <USBD_CtlError>
          break;
 8007d9a:	e004      	b.n	8007da6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fc9e 	bl	80086e0 <USBD_CtlError>
          break;
 8007da4:	e000      	b.n	8007da8 <USBD_StdItfReq+0x7c>
          break;
 8007da6:	bf00      	nop
      }
      break;
 8007da8:	e004      	b.n	8007db4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fc97 	bl	80086e0 <USBD_CtlError>
      break;
 8007db2:	bf00      	nop
  }

  return ret;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	889b      	ldrh	r3, [r3, #4]
 8007dd0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dda:	2b40      	cmp	r3, #64	; 0x40
 8007ddc:	d007      	beq.n	8007dee <USBD_StdEPReq+0x30>
 8007dde:	2b40      	cmp	r3, #64	; 0x40
 8007de0:	f200 8145 	bhi.w	800806e <USBD_StdEPReq+0x2b0>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00c      	beq.n	8007e02 <USBD_StdEPReq+0x44>
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	f040 8140 	bne.w	800806e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007e00:	e13a      	b.n	8008078 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d007      	beq.n	8007e1a <USBD_StdEPReq+0x5c>
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	f300 8129 	bgt.w	8008062 <USBD_StdEPReq+0x2a4>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d07f      	beq.n	8007f14 <USBD_StdEPReq+0x156>
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d03c      	beq.n	8007e92 <USBD_StdEPReq+0xd4>
 8007e18:	e123      	b.n	8008062 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d002      	beq.n	8007e2c <USBD_StdEPReq+0x6e>
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d016      	beq.n	8007e58 <USBD_StdEPReq+0x9a>
 8007e2a:	e02c      	b.n	8007e86 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00d      	beq.n	8007e4e <USBD_StdEPReq+0x90>
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	2b80      	cmp	r3, #128	; 0x80
 8007e36:	d00a      	beq.n	8007e4e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f89d 	bl	8008f7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e42:	2180      	movs	r1, #128	; 0x80
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 f899 	bl	8008f7c <USBD_LL_StallEP>
 8007e4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e4c:	e020      	b.n	8007e90 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fc45 	bl	80086e0 <USBD_CtlError>
              break;
 8007e56:	e01b      	b.n	8007e90 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	885b      	ldrh	r3, [r3, #2]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10e      	bne.n	8007e7e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <USBD_StdEPReq+0xc0>
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b80      	cmp	r3, #128	; 0x80
 8007e6a:	d008      	beq.n	8007e7e <USBD_StdEPReq+0xc0>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	88db      	ldrh	r3, [r3, #6]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 f87f 	bl	8008f7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fcdc 	bl	800883c <USBD_CtlSendStatus>

              break;
 8007e84:	e004      	b.n	8007e90 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fc29 	bl	80086e0 <USBD_CtlError>
              break;
 8007e8e:	bf00      	nop
          }
          break;
 8007e90:	e0ec      	b.n	800806c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d002      	beq.n	8007ea4 <USBD_StdEPReq+0xe6>
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d016      	beq.n	8007ed0 <USBD_StdEPReq+0x112>
 8007ea2:	e030      	b.n	8007f06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00d      	beq.n	8007ec6 <USBD_StdEPReq+0x108>
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	2b80      	cmp	r3, #128	; 0x80
 8007eae:	d00a      	beq.n	8007ec6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 f861 	bl	8008f7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eba:	2180      	movs	r1, #128	; 0x80
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f85d 	bl	8008f7c <USBD_LL_StallEP>
 8007ec2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ec4:	e025      	b.n	8007f12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fc09 	bl	80086e0 <USBD_CtlError>
              break;
 8007ece:	e020      	b.n	8007f12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	885b      	ldrh	r3, [r3, #2]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11b      	bne.n	8007f10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 f867 	bl	8008fba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fca5 	bl	800883c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
 8007f00:	4603      	mov	r3, r0
 8007f02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fbe9 	bl	80086e0 <USBD_CtlError>
              break;
 8007f0e:	e000      	b.n	8007f12 <USBD_StdEPReq+0x154>
              break;
 8007f10:	bf00      	nop
          }
          break;
 8007f12:	e0ab      	b.n	800806c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d002      	beq.n	8007f26 <USBD_StdEPReq+0x168>
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d032      	beq.n	8007f8a <USBD_StdEPReq+0x1cc>
 8007f24:	e097      	b.n	8008056 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <USBD_StdEPReq+0x17e>
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	2b80      	cmp	r3, #128	; 0x80
 8007f30:	d004      	beq.n	8007f3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fbd3 	bl	80086e0 <USBD_CtlError>
                break;
 8007f3a:	e091      	b.n	8008060 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da0b      	bge.n	8007f5c <USBD_StdEPReq+0x19e>
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	3310      	adds	r3, #16
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	4413      	add	r3, r2
 8007f58:	3304      	adds	r3, #4
 8007f5a:	e00b      	b.n	8007f74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	4413      	add	r3, r2
 8007f72:	3304      	adds	r3, #4
 8007f74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fc1d 	bl	80087c2 <USBD_CtlSendData>
              break;
 8007f88:	e06a      	b.n	8008060 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	da11      	bge.n	8007fb6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	f003 020f 	and.w	r2, r3, #15
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3324      	adds	r3, #36	; 0x24
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d117      	bne.n	8007fdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fb96 	bl	80086e0 <USBD_CtlError>
                  break;
 8007fb4:	e054      	b.n	8008060 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	f003 020f 	and.w	r2, r3, #15
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d104      	bne.n	8007fdc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fb83 	bl	80086e0 <USBD_CtlError>
                  break;
 8007fda:	e041      	b.n	8008060 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	da0b      	bge.n	8007ffc <USBD_StdEPReq+0x23e>
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	3310      	adds	r3, #16
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	e00b      	b.n	8008014 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4413      	add	r3, r2
 8008012:	3304      	adds	r3, #4
 8008014:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <USBD_StdEPReq+0x264>
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d103      	bne.n	800802a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	e00e      	b.n	8008048 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 ffe2 	bl	8008ff8 <USBD_LL_IsStallEP>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]
 8008040:	e002      	b.n	8008048 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2202      	movs	r2, #2
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fbb7 	bl	80087c2 <USBD_CtlSendData>
              break;
 8008054:	e004      	b.n	8008060 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fb41 	bl	80086e0 <USBD_CtlError>
              break;
 800805e:	bf00      	nop
          }
          break;
 8008060:	e004      	b.n	800806c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fb3b 	bl	80086e0 <USBD_CtlError>
          break;
 800806a:	bf00      	nop
      }
      break;
 800806c:	e004      	b.n	8008078 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fb35 	bl	80086e0 <USBD_CtlError>
      break;
 8008076:	bf00      	nop
  }

  return ret;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	885b      	ldrh	r3, [r3, #2]
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	2b06      	cmp	r3, #6
 80080a6:	f200 8128 	bhi.w	80082fa <USBD_GetDescriptor+0x276>
 80080aa:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <USBD_GetDescriptor+0x2c>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	080080e5 	.word	0x080080e5
 80080b8:	08008125 	.word	0x08008125
 80080bc:	080082fb 	.word	0x080082fb
 80080c0:	080082fb 	.word	0x080082fb
 80080c4:	0800829b 	.word	0x0800829b
 80080c8:	080082c7 	.word	0x080082c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
 80080d8:	f107 0108 	add.w	r1, r7, #8
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	60f8      	str	r0, [r7, #12]
      break;
 80080e2:	e112      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7c1b      	ldrb	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10d      	bne.n	8008108 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f4:	f107 0208 	add.w	r2, r7, #8
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	2202      	movs	r2, #2
 8008104:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008106:	e100      	b.n	800830a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	f107 0208 	add.w	r2, r7, #8
 8008114:	4610      	mov	r0, r2
 8008116:	4798      	blx	r3
 8008118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	2202      	movs	r2, #2
 8008120:	701a      	strb	r2, [r3, #0]
      break;
 8008122:	e0f2      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	885b      	ldrh	r3, [r3, #2]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b05      	cmp	r3, #5
 800812c:	f200 80ac 	bhi.w	8008288 <USBD_GetDescriptor+0x204>
 8008130:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <USBD_GetDescriptor+0xb4>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	08008151 	.word	0x08008151
 800813c:	08008185 	.word	0x08008185
 8008140:	080081b9 	.word	0x080081b9
 8008144:	080081ed 	.word	0x080081ed
 8008148:	08008221 	.word	0x08008221
 800814c:	08008255 	.word	0x08008255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7c12      	ldrb	r2, [r2, #16]
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008172:	e091      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fab2 	bl	80086e0 <USBD_CtlError>
            err++;
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	3301      	adds	r3, #1
 8008180:	72fb      	strb	r3, [r7, #11]
          break;
 8008182:	e089      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a6:	e077      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa98 	bl	80086e0 <USBD_CtlError>
            err++;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	3301      	adds	r3, #1
 80081b4:	72fb      	strb	r3, [r7, #11]
          break;
 80081b6:	e06f      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e05d      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa7e 	bl	80086e0 <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e055      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7c12      	ldrb	r2, [r2, #16]
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
 800820c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800820e:	e043      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa64 	bl	80086e0 <USBD_CtlError>
            err++;
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	3301      	adds	r3, #1
 800821c:	72fb      	strb	r3, [r7, #11]
          break;
 800821e:	e03b      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7c12      	ldrb	r2, [r2, #16]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008242:	e029      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa4a 	bl	80086e0 <USBD_CtlError>
            err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
          break;
 8008252:	e021      	b.n	8008298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7c12      	ldrb	r2, [r2, #16]
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008276:	e00f      	b.n	8008298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa30 	bl	80086e0 <USBD_CtlError>
            err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
          break;
 8008286:	e007      	b.n	8008298 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa28 	bl	80086e0 <USBD_CtlError>
          err++;
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	3301      	adds	r3, #1
 8008294:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008296:	bf00      	nop
      }
      break;
 8008298:	e037      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	7c1b      	ldrb	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082aa:	f107 0208 	add.w	r2, r7, #8
 80082ae:	4610      	mov	r0, r2
 80082b0:	4798      	blx	r3
 80082b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082b4:	e029      	b.n	800830a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa11 	bl	80086e0 <USBD_CtlError>
        err++;
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	3301      	adds	r3, #1
 80082c2:	72fb      	strb	r3, [r7, #11]
      break;
 80082c4:	e021      	b.n	800830a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	7c1b      	ldrb	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10d      	bne.n	80082ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	f107 0208 	add.w	r2, r7, #8
 80082da:	4610      	mov	r0, r2
 80082dc:	4798      	blx	r3
 80082de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	2207      	movs	r2, #7
 80082e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082e8:	e00f      	b.n	800830a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f9f7 	bl	80086e0 <USBD_CtlError>
        err++;
 80082f2:	7afb      	ldrb	r3, [r7, #11]
 80082f4:	3301      	adds	r3, #1
 80082f6:	72fb      	strb	r3, [r7, #11]
      break;
 80082f8:	e007      	b.n	800830a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f9ef 	bl	80086e0 <USBD_CtlError>
      err++;
 8008302:	7afb      	ldrb	r3, [r7, #11]
 8008304:	3301      	adds	r3, #1
 8008306:	72fb      	strb	r3, [r7, #11]
      break;
 8008308:	bf00      	nop
  }

  if (err != 0U)
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d11e      	bne.n	800834e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d016      	beq.n	8008346 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008318:	893b      	ldrh	r3, [r7, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00e      	beq.n	800833c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88da      	ldrh	r2, [r3, #6]
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	4293      	cmp	r3, r2
 8008326:	bf28      	it	cs
 8008328:	4613      	movcs	r3, r2
 800832a:	b29b      	uxth	r3, r3
 800832c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800832e:	893b      	ldrh	r3, [r7, #8]
 8008330:	461a      	mov	r2, r3
 8008332:	68f9      	ldr	r1, [r7, #12]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fa44 	bl	80087c2 <USBD_CtlSendData>
 800833a:	e009      	b.n	8008350 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9ce 	bl	80086e0 <USBD_CtlError>
 8008344:	e004      	b.n	8008350 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa78 	bl	800883c <USBD_CtlSendStatus>
 800834c:	e000      	b.n	8008350 <USBD_GetDescriptor+0x2cc>
    return;
 800834e:	bf00      	nop
  }
}
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop

08008358 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	889b      	ldrh	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d131      	bne.n	80083ce <USBD_SetAddress+0x76>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	88db      	ldrh	r3, [r3, #6]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d12d      	bne.n	80083ce <USBD_SetAddress+0x76>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	885b      	ldrh	r3, [r3, #2]
 8008376:	2b7f      	cmp	r3, #127	; 0x7f
 8008378:	d829      	bhi.n	80083ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	885b      	ldrh	r3, [r3, #2]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008384:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d104      	bne.n	800839c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f9a3 	bl	80086e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839a:	e01d      	b.n	80083d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7bfa      	ldrb	r2, [r7, #15]
 80083a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fe51 	bl	8009050 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa44 	bl	800883c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2202      	movs	r2, #2
 80083be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	e009      	b.n	80083d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083cc:	e004      	b.n	80083d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f985 	bl	80086e0 <USBD_CtlError>
  }
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	885b      	ldrh	r3, [r3, #2]
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	4b4c      	ldr	r3, [pc, #304]	; (8008528 <USBD_SetConfig+0x148>)
 80083f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083f8:	4b4b      	ldr	r3, [pc, #300]	; (8008528 <USBD_SetConfig+0x148>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d905      	bls.n	800840c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f96c 	bl	80086e0 <USBD_CtlError>
    return USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e088      	b.n	800851e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d002      	beq.n	800841e <USBD_SetConfig+0x3e>
 8008418:	2b03      	cmp	r3, #3
 800841a:	d025      	beq.n	8008468 <USBD_SetConfig+0x88>
 800841c:	e071      	b.n	8008502 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800841e:	4b42      	ldr	r3, [pc, #264]	; (8008528 <USBD_SetConfig+0x148>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01c      	beq.n	8008460 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008426:	4b40      	ldr	r3, [pc, #256]	; (8008528 <USBD_SetConfig+0x148>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008430:	4b3d      	ldr	r3, [pc, #244]	; (8008528 <USBD_SetConfig+0x148>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff f949 	bl	80076ce <USBD_SetClassConfig>
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f949 	bl	80086e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800844e:	e065      	b.n	800851c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f9f3 	bl	800883c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2203      	movs	r2, #3
 800845a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800845e:	e05d      	b.n	800851c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f9eb 	bl	800883c <USBD_CtlSendStatus>
      break;
 8008466:	e059      	b.n	800851c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008468:	4b2f      	ldr	r3, [pc, #188]	; (8008528 <USBD_SetConfig+0x148>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d112      	bne.n	8008496 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008478:	4b2b      	ldr	r3, [pc, #172]	; (8008528 <USBD_SetConfig+0x148>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	461a      	mov	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008482:	4b29      	ldr	r3, [pc, #164]	; (8008528 <USBD_SetConfig+0x148>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff f93c 	bl	8007706 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f9d4 	bl	800883c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008494:	e042      	b.n	800851c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008496:	4b24      	ldr	r3, [pc, #144]	; (8008528 <USBD_SetConfig+0x148>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d02a      	beq.n	80084fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff f92a 	bl	8007706 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084b2:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <USBD_SetConfig+0x148>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084bc:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <USBD_SetConfig+0x148>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff f903 	bl	80076ce <USBD_SetClassConfig>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00f      	beq.n	80084f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f903 	bl	80086e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff f90f 	bl	8007706 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084f0:	e014      	b.n	800851c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f9a2 	bl	800883c <USBD_CtlSendStatus>
      break;
 80084f8:	e010      	b.n	800851c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f99e 	bl	800883c <USBD_CtlSendStatus>
      break;
 8008500:	e00c      	b.n	800851c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f8eb 	bl	80086e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800850a:	4b07      	ldr	r3, [pc, #28]	; (8008528 <USBD_SetConfig+0x148>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff f8f8 	bl	8007706 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008516:	2303      	movs	r3, #3
 8008518:	73fb      	strb	r3, [r7, #15]
      break;
 800851a:	bf00      	nop
  }

  return ret;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20000600 	.word	0x20000600

0800852c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d004      	beq.n	8008548 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f8cd 	bl	80086e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008546:	e023      	b.n	8008590 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b02      	cmp	r3, #2
 8008552:	dc02      	bgt.n	800855a <USBD_GetConfig+0x2e>
 8008554:	2b00      	cmp	r3, #0
 8008556:	dc03      	bgt.n	8008560 <USBD_GetConfig+0x34>
 8008558:	e015      	b.n	8008586 <USBD_GetConfig+0x5a>
 800855a:	2b03      	cmp	r3, #3
 800855c:	d00b      	beq.n	8008576 <USBD_GetConfig+0x4a>
 800855e:	e012      	b.n	8008586 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3308      	adds	r3, #8
 800856a:	2201      	movs	r2, #1
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f927 	bl	80087c2 <USBD_CtlSendData>
        break;
 8008574:	e00c      	b.n	8008590 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3304      	adds	r3, #4
 800857a:	2201      	movs	r2, #1
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f91f 	bl	80087c2 <USBD_CtlSendData>
        break;
 8008584:	e004      	b.n	8008590 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f8a9 	bl	80086e0 <USBD_CtlError>
        break;
 800858e:	bf00      	nop
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d81e      	bhi.n	80085ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	88db      	ldrh	r3, [r3, #6]
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d004      	beq.n	80085c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f890 	bl	80086e0 <USBD_CtlError>
        break;
 80085c0:	e01a      	b.n	80085f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f043 0202 	orr.w	r2, r3, #2
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	330c      	adds	r3, #12
 80085e2:	2202      	movs	r2, #2
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f8eb 	bl	80087c2 <USBD_CtlSendData>
      break;
 80085ec:	e004      	b.n	80085f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f875 	bl	80086e0 <USBD_CtlError>
      break;
 80085f6:	bf00      	nop
  }
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	885b      	ldrh	r3, [r3, #2]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d106      	bne.n	8008620 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f90e 	bl	800883c <USBD_CtlSendStatus>
  }
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	2b02      	cmp	r3, #2
 800863e:	d80b      	bhi.n	8008658 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	885b      	ldrh	r3, [r3, #2]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d10c      	bne.n	8008662 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f8f3 	bl	800883c <USBD_CtlSendStatus>
      }
      break;
 8008656:	e004      	b.n	8008662 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f840 	bl	80086e0 <USBD_CtlError>
      break;
 8008660:	e000      	b.n	8008664 <USBD_ClrFeature+0x3c>
      break;
 8008662:	bf00      	nop
  }
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	781a      	ldrb	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	781a      	ldrb	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff fabc 	bl	8007c14 <SWAPBYTE>
 800869c:	4603      	mov	r3, r0
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3301      	adds	r3, #1
 80086ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f7ff faaf 	bl	8007c14 <SWAPBYTE>
 80086b6:	4603      	mov	r3, r0
 80086b8:	461a      	mov	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3301      	adds	r3, #1
 80086c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3301      	adds	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff faa2 	bl	8007c14 <SWAPBYTE>
 80086d0:	4603      	mov	r3, r0
 80086d2:	461a      	mov	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	80da      	strh	r2, [r3, #6]
}
 80086d8:	bf00      	nop
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ea:	2180      	movs	r1, #128	; 0x80
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fc45 	bl	8008f7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086f2:	2100      	movs	r1, #0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fc41 	bl	8008f7c <USBD_LL_StallEP>
}
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b086      	sub	sp, #24
 8008706:	af00      	add	r7, sp, #0
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d036      	beq.n	8008786 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800871c:	6938      	ldr	r0, [r7, #16]
 800871e:	f000 f836 	bl	800878e <USBD_GetLen>
 8008722:	4603      	mov	r3, r0
 8008724:	3301      	adds	r3, #1
 8008726:	b29b      	uxth	r3, r3
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	b29a      	uxth	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008730:	7dfb      	ldrb	r3, [r7, #23]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	4413      	add	r3, r2
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	7812      	ldrb	r2, [r2, #0]
 800873a:	701a      	strb	r2, [r3, #0]
  idx++;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	3301      	adds	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	4413      	add	r3, r2
 8008748:	2203      	movs	r2, #3
 800874a:	701a      	strb	r2, [r3, #0]
  idx++;
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	3301      	adds	r3, #1
 8008750:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008752:	e013      	b.n	800877c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	4413      	add	r3, r2
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	7812      	ldrb	r2, [r2, #0]
 800875e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	3301      	adds	r3, #1
 8008764:	613b      	str	r3, [r7, #16]
    idx++;
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	3301      	adds	r3, #1
 800876a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4413      	add	r3, r2
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
    idx++;
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	3301      	adds	r3, #1
 800877a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e7      	bne.n	8008754 <USBD_GetString+0x52>
 8008784:	e000      	b.n	8008788 <USBD_GetString+0x86>
    return;
 8008786:	bf00      	nop
  }
}
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800878e:	b480      	push	{r7}
 8008790:	b085      	sub	sp, #20
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800879e:	e005      	b.n	80087ac <USBD_GetLen+0x1e>
  {
    len++;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	3301      	adds	r3, #1
 80087a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	3301      	adds	r3, #1
 80087aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f5      	bne.n	80087a0 <USBD_GetLen+0x12>
  }

  return len;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2202      	movs	r2, #2
 80087d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	2100      	movs	r1, #0
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fc50 	bl	800908e <USBD_LL_Transmit>

  return USBD_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	2100      	movs	r1, #0
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fc3f 	bl	800908e <USBD_LL_Transmit>

  return USBD_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	2100      	movs	r1, #0
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 fc4f 	bl	80090d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2204      	movs	r2, #4
 8008848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800884c:	2300      	movs	r3, #0
 800884e:	2200      	movs	r2, #0
 8008850:	2100      	movs	r1, #0
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fc1b 	bl	800908e <USBD_LL_Transmit>

  return USBD_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2205      	movs	r2, #5
 800886e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008872:	2300      	movs	r3, #0
 8008874:	2200      	movs	r2, #0
 8008876:	2100      	movs	r1, #0
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fc29 	bl	80090d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800888c:	2200      	movs	r2, #0
 800888e:	4912      	ldr	r1, [pc, #72]	; (80088d8 <MX_USB_DEVICE_Init+0x50>)
 8008890:	4812      	ldr	r0, [pc, #72]	; (80088dc <MX_USB_DEVICE_Init+0x54>)
 8008892:	f7fe feae 	bl	80075f2 <USBD_Init>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800889c:	f7f8 ff50 	bl	8001740 <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 80088a0:	490f      	ldr	r1, [pc, #60]	; (80088e0 <MX_USB_DEVICE_Init+0x58>)
 80088a2:	480e      	ldr	r0, [pc, #56]	; (80088dc <MX_USB_DEVICE_Init+0x54>)
 80088a4:	f7fe fed5 	bl	8007652 <USBD_RegisterClass>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 80088ae:	f7f8 ff47 	bl	8001740 <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 80088b2:	490c      	ldr	r1, [pc, #48]	; (80088e4 <MX_USB_DEVICE_Init+0x5c>)
 80088b4:	4809      	ldr	r0, [pc, #36]	; (80088dc <MX_USB_DEVICE_Init+0x54>)
 80088b6:	f7fe fe85 	bl	80075c4 <USBD_Midi_RegisterInterface>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 80088c0:	f7f8 ff3e 	bl	8001740 <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80088c4:	4805      	ldr	r0, [pc, #20]	; (80088dc <MX_USB_DEVICE_Init+0x54>)
 80088c6:	f7fe feeb 	bl	80076a0 <USBD_Start>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 80088d0:	f7f8 ff36 	bl	8001740 <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80088d4:	bf00      	nop
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	200000d8 	.word	0x200000d8
 80088dc:	20002324 	.word	0x20002324
 80088e0:	2000002c 	.word	0x2000002c
 80088e4:	20000128 	.word	0x20000128

080088e8 <MX_USB_Send_Midi>:

void MX_USB_Send_Midi(uint8_t channel, uint8_t cc, uint8_t value) {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	71fb      	strb	r3, [r7, #7]
 80088f2:	460b      	mov	r3, r1
 80088f4:	71bb      	strb	r3, [r7, #6]
 80088f6:	4613      	mov	r3, r2
 80088f8:	717b      	strb	r3, [r7, #5]
    uint8_t buffer[4];
    const uint8_t usbFrame = (0 << 4) | 0x0B;
 80088fa:	230b      	movs	r3, #11
 80088fc:	73fb      	strb	r3, [r7, #15]
    const uint8_t midiCommand = 0xB0 | channel;
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8008904:	73bb      	strb	r3, [r7, #14]

    buffer[0] = usbFrame;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	723b      	strb	r3, [r7, #8]
    buffer[1] = midiCommand;
 800890a:	7bbb      	ldrb	r3, [r7, #14]
 800890c:	727b      	strb	r3, [r7, #9]
    buffer[2] = cc;
 800890e:	79bb      	ldrb	r3, [r7, #6]
 8008910:	72bb      	strb	r3, [r7, #10]
    buffer[3] = value;
 8008912:	797b      	ldrb	r3, [r7, #5]
 8008914:	72fb      	strb	r3, [r7, #11]

    switch (USBD_LL_Transmit(&hUsbDeviceFS, MIDI_IN_EP, buffer, 4)) {
 8008916:	f107 0208 	add.w	r2, r7, #8
 800891a:	2304      	movs	r3, #4
 800891c:	2181      	movs	r1, #129	; 0x81
 800891e:	4810      	ldr	r0, [pc, #64]	; (8008960 <MX_USB_Send_Midi+0x78>)
 8008920:	f000 fbb5 	bl	800908e <USBD_LL_Transmit>
 8008924:	4603      	mov	r3, r0
 8008926:	2b03      	cmp	r3, #3
 8008928:	d00a      	beq.n	8008940 <MX_USB_Send_Midi+0x58>
 800892a:	2b03      	cmp	r3, #3
 800892c:	dc10      	bgt.n	8008950 <MX_USB_Send_Midi+0x68>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <MX_USB_Send_Midi+0x50>
 8008932:	2b01      	cmp	r3, #1
 8008934:	d008      	beq.n	8008948 <MX_USB_Send_Midi+0x60>
 8008936:	e00b      	b.n	8008950 <MX_USB_Send_Midi+0x68>
    //FIXME use errorhandler!
    case USBD_OK:
        printf("ok\n");
 8008938:	480a      	ldr	r0, [pc, #40]	; (8008964 <MX_USB_Send_Midi+0x7c>)
 800893a:	f000 fd89 	bl	8009450 <puts>
        break;
 800893e:	e00b      	b.n	8008958 <MX_USB_Send_Midi+0x70>
    case USBD_FAIL:
        printf("USB SEND FAIL\n");
 8008940:	4809      	ldr	r0, [pc, #36]	; (8008968 <MX_USB_Send_Midi+0x80>)
 8008942:	f000 fd85 	bl	8009450 <puts>
        break;
 8008946:	e007      	b.n	8008958 <MX_USB_Send_Midi+0x70>
    case USBD_BUSY:
        printf("USB SEND BUS\n");
 8008948:	4808      	ldr	r0, [pc, #32]	; (800896c <MX_USB_Send_Midi+0x84>)
 800894a:	f000 fd81 	bl	8009450 <puts>
        break;
 800894e:	e003      	b.n	8008958 <MX_USB_Send_Midi+0x70>
    default:
        printf("USB SEND ERROR DEFAULT CASE\n");
 8008950:	4807      	ldr	r0, [pc, #28]	; (8008970 <MX_USB_Send_Midi+0x88>)
 8008952:	f000 fd7d 	bl	8009450 <puts>
    }
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20002324 	.word	0x20002324
 8008964:	0800a458 	.word	0x0800a458
 8008968:	0800a45c 	.word	0x0800a45c
 800896c:	0800a46c 	.word	0x0800a46c
 8008970:	0800a47c 	.word	0x0800a47c

08008974 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	6039      	str	r1, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2212      	movs	r2, #18
 8008984:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008986:	4b03      	ldr	r3, [pc, #12]	; (8008994 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	200000f4 	.word	0x200000f4

08008998 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2204      	movs	r2, #4
 80089a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089aa:	4b03      	ldr	r3, [pc, #12]	; (80089b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	20000108 	.word	0x20000108

080089bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d105      	bne.n	80089da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	4907      	ldr	r1, [pc, #28]	; (80089f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80089d2:	4808      	ldr	r0, [pc, #32]	; (80089f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80089d4:	f7ff fe95 	bl	8008702 <USBD_GetString>
 80089d8:	e004      	b.n	80089e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	4904      	ldr	r1, [pc, #16]	; (80089f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80089de:	4805      	ldr	r0, [pc, #20]	; (80089f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80089e0:	f7ff fe8f 	bl	8008702 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	200025f4 	.word	0x200025f4
 80089f4:	0800a498 	.word	0x0800a498

080089f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	6039      	str	r1, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	4904      	ldr	r1, [pc, #16]	; (8008a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a08:	4804      	ldr	r0, [pc, #16]	; (8008a1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a0a:	f7ff fe7a 	bl	8008702 <USBD_GetString>
  return USBD_StrDesc;
 8008a0e:	4b02      	ldr	r3, [pc, #8]	; (8008a18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	200025f4 	.word	0x200025f4
 8008a1c:	0800a4ac 	.word	0x0800a4ac

08008a20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	6039      	str	r1, [r7, #0]
 8008a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	221a      	movs	r2, #26
 8008a30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a32:	f000 f843 	bl	8008abc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a36:	4b02      	ldr	r3, [pc, #8]	; (8008a40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	2000010c 	.word	0x2000010c

08008a44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6039      	str	r1, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d105      	bne.n	8008a62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	4907      	ldr	r1, [pc, #28]	; (8008a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a5a:	4808      	ldr	r0, [pc, #32]	; (8008a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a5c:	f7ff fe51 	bl	8008702 <USBD_GetString>
 8008a60:	e004      	b.n	8008a6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	4904      	ldr	r1, [pc, #16]	; (8008a78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a66:	4805      	ldr	r0, [pc, #20]	; (8008a7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a68:	f7ff fe4b 	bl	8008702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a6c:	4b02      	ldr	r3, [pc, #8]	; (8008a78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	200025f4 	.word	0x200025f4
 8008a7c:	0800a4c0 	.word	0x0800a4c0

08008a80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d105      	bne.n	8008a9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	4907      	ldr	r1, [pc, #28]	; (8008ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a96:	4808      	ldr	r0, [pc, #32]	; (8008ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a98:	f7ff fe33 	bl	8008702 <USBD_GetString>
 8008a9c:	e004      	b.n	8008aa8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	4904      	ldr	r1, [pc, #16]	; (8008ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008aa2:	4805      	ldr	r0, [pc, #20]	; (8008ab8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008aa4:	f7ff fe2d 	bl	8008702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008aa8:	4b02      	ldr	r3, [pc, #8]	; (8008ab4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200025f4 	.word	0x200025f4
 8008ab8:	0800a4d0 	.word	0x0800a4d0

08008abc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ac2:	4b0f      	ldr	r3, [pc, #60]	; (8008b00 <Get_SerialNum+0x44>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <Get_SerialNum+0x48>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ace:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <Get_SerialNum+0x4c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4413      	add	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d009      	beq.n	8008af6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ae2:	2208      	movs	r2, #8
 8008ae4:	4909      	ldr	r1, [pc, #36]	; (8008b0c <Get_SerialNum+0x50>)
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 f814 	bl	8008b14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008aec:	2204      	movs	r2, #4
 8008aee:	4908      	ldr	r1, [pc, #32]	; (8008b10 <Get_SerialNum+0x54>)
 8008af0:	68b8      	ldr	r0, [r7, #8]
 8008af2:	f000 f80f 	bl	8008b14 <IntToUnicode>
  }
}
 8008af6:	bf00      	nop
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	1fff7a10 	.word	0x1fff7a10
 8008b04:	1fff7a14 	.word	0x1fff7a14
 8008b08:	1fff7a18 	.word	0x1fff7a18
 8008b0c:	2000010e 	.word	0x2000010e
 8008b10:	2000011e 	.word	0x2000011e

08008b14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]
 8008b2a:	e027      	b.n	8008b7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	0f1b      	lsrs	r3, r3, #28
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	d80b      	bhi.n	8008b4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	0f1b      	lsrs	r3, r3, #28
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	4619      	mov	r1, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	440b      	add	r3, r1
 8008b44:	3230      	adds	r2, #48	; 0x30
 8008b46:	b2d2      	uxtb	r2, r2
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	e00a      	b.n	8008b62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	0f1b      	lsrs	r3, r3, #28
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	4619      	mov	r1, r3
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	440b      	add	r3, r1
 8008b5c:	3237      	adds	r2, #55	; 0x37
 8008b5e:	b2d2      	uxtb	r2, r2
 8008b60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4413      	add	r3, r2
 8008b72:	2200      	movs	r2, #0
 8008b74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
 8008b7c:	7dfa      	ldrb	r2, [r7, #23]
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d3d3      	bcc.n	8008b2c <IntToUnicode+0x18>
  }
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	; 0x28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb4:	f107 0314 	add.w	r3, r7, #20
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	605a      	str	r2, [r3, #4]
 8008bbe:	609a      	str	r2, [r3, #8]
 8008bc0:	60da      	str	r2, [r3, #12]
 8008bc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bcc:	d13a      	bne.n	8008c44 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bce:	2300      	movs	r3, #0
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	4b1e      	ldr	r3, [pc, #120]	; (8008c4c <HAL_PCD_MspInit+0xa0>)
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	4a1d      	ldr	r2, [pc, #116]	; (8008c4c <HAL_PCD_MspInit+0xa0>)
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8008bde:	4b1b      	ldr	r3, [pc, #108]	; (8008c4c <HAL_PCD_MspInit+0xa0>)
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	613b      	str	r3, [r7, #16]
 8008be8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8008bea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008bfc:	230a      	movs	r3, #10
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c00:	f107 0314 	add.w	r3, r7, #20
 8008c04:	4619      	mov	r1, r3
 8008c06:	4812      	ldr	r0, [pc, #72]	; (8008c50 <HAL_PCD_MspInit+0xa4>)
 8008c08:	f7fa f9d0 	bl	8002fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <HAL_PCD_MspInit+0xa0>)
 8008c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c10:	4a0e      	ldr	r2, [pc, #56]	; (8008c4c <HAL_PCD_MspInit+0xa0>)
 8008c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c16:	6353      	str	r3, [r2, #52]	; 0x34
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <HAL_PCD_MspInit+0xa0>)
 8008c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c20:	4a0a      	ldr	r2, [pc, #40]	; (8008c4c <HAL_PCD_MspInit+0xa0>)
 8008c22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c26:	6453      	str	r3, [r2, #68]	; 0x44
 8008c28:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <HAL_PCD_MspInit+0xa0>)
 8008c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c34:	2200      	movs	r2, #0
 8008c36:	2100      	movs	r1, #0
 8008c38:	2043      	movs	r0, #67	; 0x43
 8008c3a:	f7fa f980 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c3e:	2043      	movs	r0, #67	; 0x43
 8008c40:	f7fa f999 	bl	8002f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c44:	bf00      	nop
 8008c46:	3728      	adds	r7, #40	; 0x28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	40023800 	.word	0x40023800
 8008c50:	40020000 	.word	0x40020000

08008c54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f7fe fd63 	bl	8007736 <USBD_LL_SetupStage>
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c8a:	78fa      	ldrb	r2, [r7, #3]
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	440b      	add	r3, r1
 8008c98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	78fb      	ldrb	r3, [r7, #3]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f7fe fd9d 	bl	80077e0 <USBD_LL_DataOutStage>
}
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008cc0:	78fa      	ldrb	r2, [r7, #3]
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	3348      	adds	r3, #72	; 0x48
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f7fe fde6 	bl	80078a6 <USBD_LL_DataInStage>
}
 8008cda:	bf00      	nop
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b082      	sub	sp, #8
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe fefa 	bl	8007aea <USBD_LL_SOF>
}
 8008cf6:	bf00      	nop
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d06:	2301      	movs	r3, #1
 8008d08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d001      	beq.n	8008d16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d12:	f7f8 fd15 	bl	8001740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d1c:	7bfa      	ldrb	r2, [r7, #15]
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe fea4 	bl	8007a6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe fe50 	bl	80079d2 <USBD_LL_Reset>
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fe9f 	bl	8007a8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6812      	ldr	r2, [r2, #0]
 8008d5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d62:	f043 0301 	orr.w	r3, r3, #1
 8008d66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d005      	beq.n	8008d7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d70:	4b04      	ldr	r3, [pc, #16]	; (8008d84 <HAL_PCD_SuspendCallback+0x48>)
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	4a03      	ldr	r2, [pc, #12]	; (8008d84 <HAL_PCD_SuspendCallback+0x48>)
 8008d76:	f043 0306 	orr.w	r3, r3, #6
 8008d7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	e000ed00 	.word	0xe000ed00

08008d88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe fe8f 	bl	8007aba <USBD_LL_Resume>
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008db6:	78fa      	ldrb	r2, [r7, #3]
 8008db8:	4611      	mov	r1, r2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fe fedd 	bl	8007b7a <USBD_LL_IsoOUTIncomplete>
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	4611      	mov	r1, r2
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fea5 	bl	8007b2e <USBD_LL_IsoINIncomplete>
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe fee3 	bl	8007bc6 <USBD_LL_DevConnected>
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe fee0 	bl	8007bdc <USBD_LL_DevDisconnected>
}
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d13c      	bne.n	8008eae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e34:	4a20      	ldr	r2, [pc, #128]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a1e      	ldr	r2, [pc, #120]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e44:	4b1c      	ldr	r3, [pc, #112]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e4e:	2204      	movs	r2, #4
 8008e50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e52:	4b19      	ldr	r3, [pc, #100]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e54:	2202      	movs	r2, #2
 8008e56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e58:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e5e:	4b16      	ldr	r3, [pc, #88]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e60:	2202      	movs	r2, #2
 8008e62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e64:	4b14      	ldr	r3, [pc, #80]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e6a:	4b13      	ldr	r3, [pc, #76]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e70:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e76:	4b10      	ldr	r3, [pc, #64]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e7c:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e82:	480d      	ldr	r0, [pc, #52]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e84:	f7fa fff1 	bl	8003e6a <HAL_PCD_Init>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e8e:	f7f8 fc57 	bl	8001740 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e92:	2180      	movs	r1, #128	; 0x80
 8008e94:	4808      	ldr	r0, [pc, #32]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008e96:	f7fc f94e 	bl	8005136 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e9a:	2240      	movs	r2, #64	; 0x40
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4806      	ldr	r0, [pc, #24]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008ea0:	f7fc f902 	bl	80050a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ea4:	2280      	movs	r2, #128	; 0x80
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	4803      	ldr	r0, [pc, #12]	; (8008eb8 <USBD_LL_Init+0x94>)
 8008eaa:	f7fc f8fd 	bl	80050a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	200027f4 	.word	0x200027f4

08008ebc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fb f8e6 	bl	80040a4 <HAL_PCD_Start>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f938 	bl	8009154 <USBD_Get_USB_Status>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	4608      	mov	r0, r1
 8008efc:	4611      	mov	r1, r2
 8008efe:	461a      	mov	r2, r3
 8008f00:	4603      	mov	r3, r0
 8008f02:	70fb      	strb	r3, [r7, #3]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70bb      	strb	r3, [r7, #2]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f1a:	78bb      	ldrb	r3, [r7, #2]
 8008f1c:	883a      	ldrh	r2, [r7, #0]
 8008f1e:	78f9      	ldrb	r1, [r7, #3]
 8008f20:	f7fb fcca 	bl	80048b8 <HAL_PCD_EP_Open>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 f912 	bl	8009154 <USBD_Get_USB_Status>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	460b      	mov	r3, r1
 8008f48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f58:	78fa      	ldrb	r2, [r7, #3]
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fb fd13 	bl	8004988 <HAL_PCD_EP_Close>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 f8f3 	bl	8009154 <USBD_Get_USB_Status>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f96:	78fa      	ldrb	r2, [r7, #3]
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fb fdeb 	bl	8004b76 <HAL_PCD_EP_SetStall>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f8d4 	bl	8009154 <USBD_Get_USB_Status>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fd4:	78fa      	ldrb	r2, [r7, #3]
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fb fe30 	bl	8004c3e <HAL_PCD_EP_ClrStall>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f8b5 	bl	8009154 <USBD_Get_USB_Status>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800900a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800900c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009010:	2b00      	cmp	r3, #0
 8009012:	da0b      	bge.n	800902c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800901a:	68f9      	ldr	r1, [r7, #12]
 800901c:	4613      	mov	r3, r2
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	1a9b      	subs	r3, r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	440b      	add	r3, r1
 8009026:	333e      	adds	r3, #62	; 0x3e
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	e00b      	b.n	8009044 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009032:	68f9      	ldr	r1, [r7, #12]
 8009034:	4613      	mov	r3, r2
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	1a9b      	subs	r3, r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009042:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f7fb fbfd 	bl	800486e <HAL_PCD_SetAddress>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 f86a 	bl	8009154 <USBD_Get_USB_Status>
 8009080:	4603      	mov	r3, r0
 8009082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009084:	7bbb      	ldrb	r3, [r7, #14]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b086      	sub	sp, #24
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
 800909a:	460b      	mov	r3, r1
 800909c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090ac:	7af9      	ldrb	r1, [r7, #11]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	f7fb fd16 	bl	8004ae2 <HAL_PCD_EP_Transmit>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 f849 	bl	8009154 <USBD_Get_USB_Status>
 80090c2:	4603      	mov	r3, r0
 80090c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	607a      	str	r2, [r7, #4]
 80090da:	603b      	str	r3, [r7, #0]
 80090dc:	460b      	mov	r3, r1
 80090de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090ee:	7af9      	ldrb	r1, [r7, #11]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	f7fb fc92 	bl	8004a1c <HAL_PCD_EP_Receive>
 80090f8:	4603      	mov	r3, r0
 80090fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f828 	bl	8009154 <USBD_Get_USB_Status>
 8009104:	4603      	mov	r3, r0
 8009106:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009108:	7dbb      	ldrb	r3, [r7, #22]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	460b      	mov	r3, r1
 800911c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009124:	78fa      	ldrb	r2, [r7, #3]
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f7fb fcc2 	bl	8004ab2 <HAL_PCD_EP_GetRxCount>
 800912e:	4603      	mov	r3, r0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009140:	4b03      	ldr	r3, [pc, #12]	; (8009150 <USBD_static_malloc+0x18>)
}
 8009142:	4618      	mov	r0, r3
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	20000604 	.word	0x20000604

08009154 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	2b03      	cmp	r3, #3
 8009166:	d817      	bhi.n	8009198 <USBD_Get_USB_Status+0x44>
 8009168:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <USBD_Get_USB_Status+0x1c>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	08009181 	.word	0x08009181
 8009174:	08009187 	.word	0x08009187
 8009178:	0800918d 	.word	0x0800918d
 800917c:	08009193 	.word	0x08009193
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
    break;
 8009184:	e00b      	b.n	800919e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009186:	2303      	movs	r3, #3
 8009188:	73fb      	strb	r3, [r7, #15]
    break;
 800918a:	e008      	b.n	800919e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800918c:	2301      	movs	r3, #1
 800918e:	73fb      	strb	r3, [r7, #15]
    break;
 8009190:	e005      	b.n	800919e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009192:	2303      	movs	r3, #3
 8009194:	73fb      	strb	r3, [r7, #15]
    break;
 8009196:	e002      	b.n	800919e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009198:	2303      	movs	r3, #3
 800919a:	73fb      	strb	r3, [r7, #15]
    break;
 800919c:	bf00      	nop
  }
  return usb_status;
 800919e:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <__errno>:
 80091ac:	4b01      	ldr	r3, [pc, #4]	; (80091b4 <__errno+0x8>)
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	2000012c 	.word	0x2000012c

080091b8 <__libc_init_array>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	4d0d      	ldr	r5, [pc, #52]	; (80091f0 <__libc_init_array+0x38>)
 80091bc:	4c0d      	ldr	r4, [pc, #52]	; (80091f4 <__libc_init_array+0x3c>)
 80091be:	1b64      	subs	r4, r4, r5
 80091c0:	10a4      	asrs	r4, r4, #2
 80091c2:	2600      	movs	r6, #0
 80091c4:	42a6      	cmp	r6, r4
 80091c6:	d109      	bne.n	80091dc <__libc_init_array+0x24>
 80091c8:	4d0b      	ldr	r5, [pc, #44]	; (80091f8 <__libc_init_array+0x40>)
 80091ca:	4c0c      	ldr	r4, [pc, #48]	; (80091fc <__libc_init_array+0x44>)
 80091cc:	f001 f87c 	bl	800a2c8 <_init>
 80091d0:	1b64      	subs	r4, r4, r5
 80091d2:	10a4      	asrs	r4, r4, #2
 80091d4:	2600      	movs	r6, #0
 80091d6:	42a6      	cmp	r6, r4
 80091d8:	d105      	bne.n	80091e6 <__libc_init_array+0x2e>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e0:	4798      	blx	r3
 80091e2:	3601      	adds	r6, #1
 80091e4:	e7ee      	b.n	80091c4 <__libc_init_array+0xc>
 80091e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ea:	4798      	blx	r3
 80091ec:	3601      	adds	r6, #1
 80091ee:	e7f2      	b.n	80091d6 <__libc_init_array+0x1e>
 80091f0:	0800b828 	.word	0x0800b828
 80091f4:	0800b828 	.word	0x0800b828
 80091f8:	0800b828 	.word	0x0800b828
 80091fc:	0800b82c 	.word	0x0800b82c

08009200 <malloc>:
 8009200:	4b02      	ldr	r3, [pc, #8]	; (800920c <malloc+0xc>)
 8009202:	4601      	mov	r1, r0
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	f000 b85b 	b.w	80092c0 <_malloc_r>
 800920a:	bf00      	nop
 800920c:	2000012c 	.word	0x2000012c

08009210 <memset>:
 8009210:	4402      	add	r2, r0
 8009212:	4603      	mov	r3, r0
 8009214:	4293      	cmp	r3, r2
 8009216:	d100      	bne.n	800921a <memset+0xa>
 8009218:	4770      	bx	lr
 800921a:	f803 1b01 	strb.w	r1, [r3], #1
 800921e:	e7f9      	b.n	8009214 <memset+0x4>

08009220 <_free_r>:
 8009220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009222:	2900      	cmp	r1, #0
 8009224:	d048      	beq.n	80092b8 <_free_r+0x98>
 8009226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800922a:	9001      	str	r0, [sp, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f1a1 0404 	sub.w	r4, r1, #4
 8009232:	bfb8      	it	lt
 8009234:	18e4      	addlt	r4, r4, r3
 8009236:	f000 fc49 	bl	8009acc <__malloc_lock>
 800923a:	4a20      	ldr	r2, [pc, #128]	; (80092bc <_free_r+0x9c>)
 800923c:	9801      	ldr	r0, [sp, #4]
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	4615      	mov	r5, r2
 8009242:	b933      	cbnz	r3, 8009252 <_free_r+0x32>
 8009244:	6063      	str	r3, [r4, #4]
 8009246:	6014      	str	r4, [r2, #0]
 8009248:	b003      	add	sp, #12
 800924a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800924e:	f000 bc43 	b.w	8009ad8 <__malloc_unlock>
 8009252:	42a3      	cmp	r3, r4
 8009254:	d90b      	bls.n	800926e <_free_r+0x4e>
 8009256:	6821      	ldr	r1, [r4, #0]
 8009258:	1862      	adds	r2, r4, r1
 800925a:	4293      	cmp	r3, r2
 800925c:	bf04      	itt	eq
 800925e:	681a      	ldreq	r2, [r3, #0]
 8009260:	685b      	ldreq	r3, [r3, #4]
 8009262:	6063      	str	r3, [r4, #4]
 8009264:	bf04      	itt	eq
 8009266:	1852      	addeq	r2, r2, r1
 8009268:	6022      	streq	r2, [r4, #0]
 800926a:	602c      	str	r4, [r5, #0]
 800926c:	e7ec      	b.n	8009248 <_free_r+0x28>
 800926e:	461a      	mov	r2, r3
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	b10b      	cbz	r3, 8009278 <_free_r+0x58>
 8009274:	42a3      	cmp	r3, r4
 8009276:	d9fa      	bls.n	800926e <_free_r+0x4e>
 8009278:	6811      	ldr	r1, [r2, #0]
 800927a:	1855      	adds	r5, r2, r1
 800927c:	42a5      	cmp	r5, r4
 800927e:	d10b      	bne.n	8009298 <_free_r+0x78>
 8009280:	6824      	ldr	r4, [r4, #0]
 8009282:	4421      	add	r1, r4
 8009284:	1854      	adds	r4, r2, r1
 8009286:	42a3      	cmp	r3, r4
 8009288:	6011      	str	r1, [r2, #0]
 800928a:	d1dd      	bne.n	8009248 <_free_r+0x28>
 800928c:	681c      	ldr	r4, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	6053      	str	r3, [r2, #4]
 8009292:	4421      	add	r1, r4
 8009294:	6011      	str	r1, [r2, #0]
 8009296:	e7d7      	b.n	8009248 <_free_r+0x28>
 8009298:	d902      	bls.n	80092a0 <_free_r+0x80>
 800929a:	230c      	movs	r3, #12
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	e7d3      	b.n	8009248 <_free_r+0x28>
 80092a0:	6825      	ldr	r5, [r4, #0]
 80092a2:	1961      	adds	r1, r4, r5
 80092a4:	428b      	cmp	r3, r1
 80092a6:	bf04      	itt	eq
 80092a8:	6819      	ldreq	r1, [r3, #0]
 80092aa:	685b      	ldreq	r3, [r3, #4]
 80092ac:	6063      	str	r3, [r4, #4]
 80092ae:	bf04      	itt	eq
 80092b0:	1949      	addeq	r1, r1, r5
 80092b2:	6021      	streq	r1, [r4, #0]
 80092b4:	6054      	str	r4, [r2, #4]
 80092b6:	e7c7      	b.n	8009248 <_free_r+0x28>
 80092b8:	b003      	add	sp, #12
 80092ba:	bd30      	pop	{r4, r5, pc}
 80092bc:	200021d8 	.word	0x200021d8

080092c0 <_malloc_r>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	1ccd      	adds	r5, r1, #3
 80092c4:	f025 0503 	bic.w	r5, r5, #3
 80092c8:	3508      	adds	r5, #8
 80092ca:	2d0c      	cmp	r5, #12
 80092cc:	bf38      	it	cc
 80092ce:	250c      	movcc	r5, #12
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	4606      	mov	r6, r0
 80092d4:	db01      	blt.n	80092da <_malloc_r+0x1a>
 80092d6:	42a9      	cmp	r1, r5
 80092d8:	d903      	bls.n	80092e2 <_malloc_r+0x22>
 80092da:	230c      	movs	r3, #12
 80092dc:	6033      	str	r3, [r6, #0]
 80092de:	2000      	movs	r0, #0
 80092e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e2:	f000 fbf3 	bl	8009acc <__malloc_lock>
 80092e6:	4921      	ldr	r1, [pc, #132]	; (800936c <_malloc_r+0xac>)
 80092e8:	680a      	ldr	r2, [r1, #0]
 80092ea:	4614      	mov	r4, r2
 80092ec:	b99c      	cbnz	r4, 8009316 <_malloc_r+0x56>
 80092ee:	4f20      	ldr	r7, [pc, #128]	; (8009370 <_malloc_r+0xb0>)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	b923      	cbnz	r3, 80092fe <_malloc_r+0x3e>
 80092f4:	4621      	mov	r1, r4
 80092f6:	4630      	mov	r0, r6
 80092f8:	f000 f8b2 	bl	8009460 <_sbrk_r>
 80092fc:	6038      	str	r0, [r7, #0]
 80092fe:	4629      	mov	r1, r5
 8009300:	4630      	mov	r0, r6
 8009302:	f000 f8ad 	bl	8009460 <_sbrk_r>
 8009306:	1c43      	adds	r3, r0, #1
 8009308:	d123      	bne.n	8009352 <_malloc_r+0x92>
 800930a:	230c      	movs	r3, #12
 800930c:	6033      	str	r3, [r6, #0]
 800930e:	4630      	mov	r0, r6
 8009310:	f000 fbe2 	bl	8009ad8 <__malloc_unlock>
 8009314:	e7e3      	b.n	80092de <_malloc_r+0x1e>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	1b5b      	subs	r3, r3, r5
 800931a:	d417      	bmi.n	800934c <_malloc_r+0x8c>
 800931c:	2b0b      	cmp	r3, #11
 800931e:	d903      	bls.n	8009328 <_malloc_r+0x68>
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	441c      	add	r4, r3
 8009324:	6025      	str	r5, [r4, #0]
 8009326:	e004      	b.n	8009332 <_malloc_r+0x72>
 8009328:	6863      	ldr	r3, [r4, #4]
 800932a:	42a2      	cmp	r2, r4
 800932c:	bf0c      	ite	eq
 800932e:	600b      	streq	r3, [r1, #0]
 8009330:	6053      	strne	r3, [r2, #4]
 8009332:	4630      	mov	r0, r6
 8009334:	f000 fbd0 	bl	8009ad8 <__malloc_unlock>
 8009338:	f104 000b 	add.w	r0, r4, #11
 800933c:	1d23      	adds	r3, r4, #4
 800933e:	f020 0007 	bic.w	r0, r0, #7
 8009342:	1ac2      	subs	r2, r0, r3
 8009344:	d0cc      	beq.n	80092e0 <_malloc_r+0x20>
 8009346:	1a1b      	subs	r3, r3, r0
 8009348:	50a3      	str	r3, [r4, r2]
 800934a:	e7c9      	b.n	80092e0 <_malloc_r+0x20>
 800934c:	4622      	mov	r2, r4
 800934e:	6864      	ldr	r4, [r4, #4]
 8009350:	e7cc      	b.n	80092ec <_malloc_r+0x2c>
 8009352:	1cc4      	adds	r4, r0, #3
 8009354:	f024 0403 	bic.w	r4, r4, #3
 8009358:	42a0      	cmp	r0, r4
 800935a:	d0e3      	beq.n	8009324 <_malloc_r+0x64>
 800935c:	1a21      	subs	r1, r4, r0
 800935e:	4630      	mov	r0, r6
 8009360:	f000 f87e 	bl	8009460 <_sbrk_r>
 8009364:	3001      	adds	r0, #1
 8009366:	d1dd      	bne.n	8009324 <_malloc_r+0x64>
 8009368:	e7cf      	b.n	800930a <_malloc_r+0x4a>
 800936a:	bf00      	nop
 800936c:	200021d8 	.word	0x200021d8
 8009370:	200021dc 	.word	0x200021dc

08009374 <_puts_r>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	460e      	mov	r6, r1
 8009378:	4605      	mov	r5, r0
 800937a:	b118      	cbz	r0, 8009384 <_puts_r+0x10>
 800937c:	6983      	ldr	r3, [r0, #24]
 800937e:	b90b      	cbnz	r3, 8009384 <_puts_r+0x10>
 8009380:	f000 faa0 	bl	80098c4 <__sinit>
 8009384:	69ab      	ldr	r3, [r5, #24]
 8009386:	68ac      	ldr	r4, [r5, #8]
 8009388:	b913      	cbnz	r3, 8009390 <_puts_r+0x1c>
 800938a:	4628      	mov	r0, r5
 800938c:	f000 fa9a 	bl	80098c4 <__sinit>
 8009390:	4b2c      	ldr	r3, [pc, #176]	; (8009444 <_puts_r+0xd0>)
 8009392:	429c      	cmp	r4, r3
 8009394:	d120      	bne.n	80093d8 <_puts_r+0x64>
 8009396:	686c      	ldr	r4, [r5, #4]
 8009398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800939a:	07db      	lsls	r3, r3, #31
 800939c:	d405      	bmi.n	80093aa <_puts_r+0x36>
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	0598      	lsls	r0, r3, #22
 80093a2:	d402      	bmi.n	80093aa <_puts_r+0x36>
 80093a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a6:	f000 fb2b 	bl	8009a00 <__retarget_lock_acquire_recursive>
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	0719      	lsls	r1, r3, #28
 80093ae:	d51d      	bpl.n	80093ec <_puts_r+0x78>
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	b1db      	cbz	r3, 80093ec <_puts_r+0x78>
 80093b4:	3e01      	subs	r6, #1
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093bc:	3b01      	subs	r3, #1
 80093be:	60a3      	str	r3, [r4, #8]
 80093c0:	bb39      	cbnz	r1, 8009412 <_puts_r+0x9e>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	da38      	bge.n	8009438 <_puts_r+0xc4>
 80093c6:	4622      	mov	r2, r4
 80093c8:	210a      	movs	r1, #10
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f8a0 	bl	8009510 <__swbuf_r>
 80093d0:	3001      	adds	r0, #1
 80093d2:	d011      	beq.n	80093f8 <_puts_r+0x84>
 80093d4:	250a      	movs	r5, #10
 80093d6:	e011      	b.n	80093fc <_puts_r+0x88>
 80093d8:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <_puts_r+0xd4>)
 80093da:	429c      	cmp	r4, r3
 80093dc:	d101      	bne.n	80093e2 <_puts_r+0x6e>
 80093de:	68ac      	ldr	r4, [r5, #8]
 80093e0:	e7da      	b.n	8009398 <_puts_r+0x24>
 80093e2:	4b1a      	ldr	r3, [pc, #104]	; (800944c <_puts_r+0xd8>)
 80093e4:	429c      	cmp	r4, r3
 80093e6:	bf08      	it	eq
 80093e8:	68ec      	ldreq	r4, [r5, #12]
 80093ea:	e7d5      	b.n	8009398 <_puts_r+0x24>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f8e0 	bl	80095b4 <__swsetup_r>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d0dd      	beq.n	80093b4 <_puts_r+0x40>
 80093f8:	f04f 35ff 	mov.w	r5, #4294967295
 80093fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093fe:	07da      	lsls	r2, r3, #31
 8009400:	d405      	bmi.n	800940e <_puts_r+0x9a>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	059b      	lsls	r3, r3, #22
 8009406:	d402      	bmi.n	800940e <_puts_r+0x9a>
 8009408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800940a:	f000 fafa 	bl	8009a02 <__retarget_lock_release_recursive>
 800940e:	4628      	mov	r0, r5
 8009410:	bd70      	pop	{r4, r5, r6, pc}
 8009412:	2b00      	cmp	r3, #0
 8009414:	da04      	bge.n	8009420 <_puts_r+0xac>
 8009416:	69a2      	ldr	r2, [r4, #24]
 8009418:	429a      	cmp	r2, r3
 800941a:	dc06      	bgt.n	800942a <_puts_r+0xb6>
 800941c:	290a      	cmp	r1, #10
 800941e:	d004      	beq.n	800942a <_puts_r+0xb6>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	6022      	str	r2, [r4, #0]
 8009426:	7019      	strb	r1, [r3, #0]
 8009428:	e7c5      	b.n	80093b6 <_puts_r+0x42>
 800942a:	4622      	mov	r2, r4
 800942c:	4628      	mov	r0, r5
 800942e:	f000 f86f 	bl	8009510 <__swbuf_r>
 8009432:	3001      	adds	r0, #1
 8009434:	d1bf      	bne.n	80093b6 <_puts_r+0x42>
 8009436:	e7df      	b.n	80093f8 <_puts_r+0x84>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	250a      	movs	r5, #10
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	6022      	str	r2, [r4, #0]
 8009440:	701d      	strb	r5, [r3, #0]
 8009442:	e7db      	b.n	80093fc <_puts_r+0x88>
 8009444:	0800b7ac 	.word	0x0800b7ac
 8009448:	0800b7cc 	.word	0x0800b7cc
 800944c:	0800b78c 	.word	0x0800b78c

08009450 <puts>:
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <puts+0xc>)
 8009452:	4601      	mov	r1, r0
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	f7ff bf8d 	b.w	8009374 <_puts_r>
 800945a:	bf00      	nop
 800945c:	2000012c 	.word	0x2000012c

08009460 <_sbrk_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4d06      	ldr	r5, [pc, #24]	; (800947c <_sbrk_r+0x1c>)
 8009464:	2300      	movs	r3, #0
 8009466:	4604      	mov	r4, r0
 8009468:	4608      	mov	r0, r1
 800946a:	602b      	str	r3, [r5, #0]
 800946c:	f7f8 ff92 	bl	8002394 <_sbrk>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d102      	bne.n	800947a <_sbrk_r+0x1a>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	b103      	cbz	r3, 800947a <_sbrk_r+0x1a>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	20002c08 	.word	0x20002c08

08009480 <sniprintf>:
 8009480:	b40c      	push	{r2, r3}
 8009482:	b530      	push	{r4, r5, lr}
 8009484:	4b17      	ldr	r3, [pc, #92]	; (80094e4 <sniprintf+0x64>)
 8009486:	1e0c      	subs	r4, r1, #0
 8009488:	681d      	ldr	r5, [r3, #0]
 800948a:	b09d      	sub	sp, #116	; 0x74
 800948c:	da08      	bge.n	80094a0 <sniprintf+0x20>
 800948e:	238b      	movs	r3, #139	; 0x8b
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	f04f 30ff 	mov.w	r0, #4294967295
 8009496:	b01d      	add	sp, #116	; 0x74
 8009498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800949c:	b002      	add	sp, #8
 800949e:	4770      	bx	lr
 80094a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80094a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094a8:	bf14      	ite	ne
 80094aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80094ae:	4623      	moveq	r3, r4
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	9307      	str	r3, [sp, #28]
 80094b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094b8:	9002      	str	r0, [sp, #8]
 80094ba:	9006      	str	r0, [sp, #24]
 80094bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094c2:	ab21      	add	r3, sp, #132	; 0x84
 80094c4:	a902      	add	r1, sp, #8
 80094c6:	4628      	mov	r0, r5
 80094c8:	9301      	str	r3, [sp, #4]
 80094ca:	f000 fb67 	bl	8009b9c <_svfiprintf_r>
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	bfbc      	itt	lt
 80094d2:	238b      	movlt	r3, #139	; 0x8b
 80094d4:	602b      	strlt	r3, [r5, #0]
 80094d6:	2c00      	cmp	r4, #0
 80094d8:	d0dd      	beq.n	8009496 <sniprintf+0x16>
 80094da:	9b02      	ldr	r3, [sp, #8]
 80094dc:	2200      	movs	r2, #0
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	e7d9      	b.n	8009496 <sniprintf+0x16>
 80094e2:	bf00      	nop
 80094e4:	2000012c 	.word	0x2000012c

080094e8 <strncpy>:
 80094e8:	b510      	push	{r4, lr}
 80094ea:	3901      	subs	r1, #1
 80094ec:	4603      	mov	r3, r0
 80094ee:	b132      	cbz	r2, 80094fe <strncpy+0x16>
 80094f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80094f4:	f803 4b01 	strb.w	r4, [r3], #1
 80094f8:	3a01      	subs	r2, #1
 80094fa:	2c00      	cmp	r4, #0
 80094fc:	d1f7      	bne.n	80094ee <strncpy+0x6>
 80094fe:	441a      	add	r2, r3
 8009500:	2100      	movs	r1, #0
 8009502:	4293      	cmp	r3, r2
 8009504:	d100      	bne.n	8009508 <strncpy+0x20>
 8009506:	bd10      	pop	{r4, pc}
 8009508:	f803 1b01 	strb.w	r1, [r3], #1
 800950c:	e7f9      	b.n	8009502 <strncpy+0x1a>
	...

08009510 <__swbuf_r>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	460e      	mov	r6, r1
 8009514:	4614      	mov	r4, r2
 8009516:	4605      	mov	r5, r0
 8009518:	b118      	cbz	r0, 8009522 <__swbuf_r+0x12>
 800951a:	6983      	ldr	r3, [r0, #24]
 800951c:	b90b      	cbnz	r3, 8009522 <__swbuf_r+0x12>
 800951e:	f000 f9d1 	bl	80098c4 <__sinit>
 8009522:	4b21      	ldr	r3, [pc, #132]	; (80095a8 <__swbuf_r+0x98>)
 8009524:	429c      	cmp	r4, r3
 8009526:	d12b      	bne.n	8009580 <__swbuf_r+0x70>
 8009528:	686c      	ldr	r4, [r5, #4]
 800952a:	69a3      	ldr	r3, [r4, #24]
 800952c:	60a3      	str	r3, [r4, #8]
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	071a      	lsls	r2, r3, #28
 8009532:	d52f      	bpl.n	8009594 <__swbuf_r+0x84>
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	b36b      	cbz	r3, 8009594 <__swbuf_r+0x84>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	6820      	ldr	r0, [r4, #0]
 800953c:	1ac0      	subs	r0, r0, r3
 800953e:	6963      	ldr	r3, [r4, #20]
 8009540:	b2f6      	uxtb	r6, r6
 8009542:	4283      	cmp	r3, r0
 8009544:	4637      	mov	r7, r6
 8009546:	dc04      	bgt.n	8009552 <__swbuf_r+0x42>
 8009548:	4621      	mov	r1, r4
 800954a:	4628      	mov	r0, r5
 800954c:	f000 f926 	bl	800979c <_fflush_r>
 8009550:	bb30      	cbnz	r0, 80095a0 <__swbuf_r+0x90>
 8009552:	68a3      	ldr	r3, [r4, #8]
 8009554:	3b01      	subs	r3, #1
 8009556:	60a3      	str	r3, [r4, #8]
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	6022      	str	r2, [r4, #0]
 800955e:	701e      	strb	r6, [r3, #0]
 8009560:	6963      	ldr	r3, [r4, #20]
 8009562:	3001      	adds	r0, #1
 8009564:	4283      	cmp	r3, r0
 8009566:	d004      	beq.n	8009572 <__swbuf_r+0x62>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	07db      	lsls	r3, r3, #31
 800956c:	d506      	bpl.n	800957c <__swbuf_r+0x6c>
 800956e:	2e0a      	cmp	r6, #10
 8009570:	d104      	bne.n	800957c <__swbuf_r+0x6c>
 8009572:	4621      	mov	r1, r4
 8009574:	4628      	mov	r0, r5
 8009576:	f000 f911 	bl	800979c <_fflush_r>
 800957a:	b988      	cbnz	r0, 80095a0 <__swbuf_r+0x90>
 800957c:	4638      	mov	r0, r7
 800957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <__swbuf_r+0x9c>)
 8009582:	429c      	cmp	r4, r3
 8009584:	d101      	bne.n	800958a <__swbuf_r+0x7a>
 8009586:	68ac      	ldr	r4, [r5, #8]
 8009588:	e7cf      	b.n	800952a <__swbuf_r+0x1a>
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <__swbuf_r+0xa0>)
 800958c:	429c      	cmp	r4, r3
 800958e:	bf08      	it	eq
 8009590:	68ec      	ldreq	r4, [r5, #12]
 8009592:	e7ca      	b.n	800952a <__swbuf_r+0x1a>
 8009594:	4621      	mov	r1, r4
 8009596:	4628      	mov	r0, r5
 8009598:	f000 f80c 	bl	80095b4 <__swsetup_r>
 800959c:	2800      	cmp	r0, #0
 800959e:	d0cb      	beq.n	8009538 <__swbuf_r+0x28>
 80095a0:	f04f 37ff 	mov.w	r7, #4294967295
 80095a4:	e7ea      	b.n	800957c <__swbuf_r+0x6c>
 80095a6:	bf00      	nop
 80095a8:	0800b7ac 	.word	0x0800b7ac
 80095ac:	0800b7cc 	.word	0x0800b7cc
 80095b0:	0800b78c 	.word	0x0800b78c

080095b4 <__swsetup_r>:
 80095b4:	4b32      	ldr	r3, [pc, #200]	; (8009680 <__swsetup_r+0xcc>)
 80095b6:	b570      	push	{r4, r5, r6, lr}
 80095b8:	681d      	ldr	r5, [r3, #0]
 80095ba:	4606      	mov	r6, r0
 80095bc:	460c      	mov	r4, r1
 80095be:	b125      	cbz	r5, 80095ca <__swsetup_r+0x16>
 80095c0:	69ab      	ldr	r3, [r5, #24]
 80095c2:	b913      	cbnz	r3, 80095ca <__swsetup_r+0x16>
 80095c4:	4628      	mov	r0, r5
 80095c6:	f000 f97d 	bl	80098c4 <__sinit>
 80095ca:	4b2e      	ldr	r3, [pc, #184]	; (8009684 <__swsetup_r+0xd0>)
 80095cc:	429c      	cmp	r4, r3
 80095ce:	d10f      	bne.n	80095f0 <__swsetup_r+0x3c>
 80095d0:	686c      	ldr	r4, [r5, #4]
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095d8:	0719      	lsls	r1, r3, #28
 80095da:	d42c      	bmi.n	8009636 <__swsetup_r+0x82>
 80095dc:	06dd      	lsls	r5, r3, #27
 80095de:	d411      	bmi.n	8009604 <__swsetup_r+0x50>
 80095e0:	2309      	movs	r3, #9
 80095e2:	6033      	str	r3, [r6, #0]
 80095e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	f04f 30ff 	mov.w	r0, #4294967295
 80095ee:	e03e      	b.n	800966e <__swsetup_r+0xba>
 80095f0:	4b25      	ldr	r3, [pc, #148]	; (8009688 <__swsetup_r+0xd4>)
 80095f2:	429c      	cmp	r4, r3
 80095f4:	d101      	bne.n	80095fa <__swsetup_r+0x46>
 80095f6:	68ac      	ldr	r4, [r5, #8]
 80095f8:	e7eb      	b.n	80095d2 <__swsetup_r+0x1e>
 80095fa:	4b24      	ldr	r3, [pc, #144]	; (800968c <__swsetup_r+0xd8>)
 80095fc:	429c      	cmp	r4, r3
 80095fe:	bf08      	it	eq
 8009600:	68ec      	ldreq	r4, [r5, #12]
 8009602:	e7e6      	b.n	80095d2 <__swsetup_r+0x1e>
 8009604:	0758      	lsls	r0, r3, #29
 8009606:	d512      	bpl.n	800962e <__swsetup_r+0x7a>
 8009608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800960a:	b141      	cbz	r1, 800961e <__swsetup_r+0x6a>
 800960c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009610:	4299      	cmp	r1, r3
 8009612:	d002      	beq.n	800961a <__swsetup_r+0x66>
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff fe03 	bl	8009220 <_free_r>
 800961a:	2300      	movs	r3, #0
 800961c:	6363      	str	r3, [r4, #52]	; 0x34
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	2300      	movs	r3, #0
 8009628:	6063      	str	r3, [r4, #4]
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	f043 0308 	orr.w	r3, r3, #8
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	b94b      	cbnz	r3, 800964e <__swsetup_r+0x9a>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009644:	d003      	beq.n	800964e <__swsetup_r+0x9a>
 8009646:	4621      	mov	r1, r4
 8009648:	4630      	mov	r0, r6
 800964a:	f000 f9ff 	bl	8009a4c <__smakebuf_r>
 800964e:	89a0      	ldrh	r0, [r4, #12]
 8009650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009654:	f010 0301 	ands.w	r3, r0, #1
 8009658:	d00a      	beq.n	8009670 <__swsetup_r+0xbc>
 800965a:	2300      	movs	r3, #0
 800965c:	60a3      	str	r3, [r4, #8]
 800965e:	6963      	ldr	r3, [r4, #20]
 8009660:	425b      	negs	r3, r3
 8009662:	61a3      	str	r3, [r4, #24]
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	b943      	cbnz	r3, 800967a <__swsetup_r+0xc6>
 8009668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800966c:	d1ba      	bne.n	80095e4 <__swsetup_r+0x30>
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	0781      	lsls	r1, r0, #30
 8009672:	bf58      	it	pl
 8009674:	6963      	ldrpl	r3, [r4, #20]
 8009676:	60a3      	str	r3, [r4, #8]
 8009678:	e7f4      	b.n	8009664 <__swsetup_r+0xb0>
 800967a:	2000      	movs	r0, #0
 800967c:	e7f7      	b.n	800966e <__swsetup_r+0xba>
 800967e:	bf00      	nop
 8009680:	2000012c 	.word	0x2000012c
 8009684:	0800b7ac 	.word	0x0800b7ac
 8009688:	0800b7cc 	.word	0x0800b7cc
 800968c:	0800b78c 	.word	0x0800b78c

08009690 <__sflush_r>:
 8009690:	898a      	ldrh	r2, [r1, #12]
 8009692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009696:	4605      	mov	r5, r0
 8009698:	0710      	lsls	r0, r2, #28
 800969a:	460c      	mov	r4, r1
 800969c:	d458      	bmi.n	8009750 <__sflush_r+0xc0>
 800969e:	684b      	ldr	r3, [r1, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	dc05      	bgt.n	80096b0 <__sflush_r+0x20>
 80096a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dc02      	bgt.n	80096b0 <__sflush_r+0x20>
 80096aa:	2000      	movs	r0, #0
 80096ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	d0f9      	beq.n	80096aa <__sflush_r+0x1a>
 80096b6:	2300      	movs	r3, #0
 80096b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096bc:	682f      	ldr	r7, [r5, #0]
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	d032      	beq.n	8009728 <__sflush_r+0x98>
 80096c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	075a      	lsls	r2, r3, #29
 80096c8:	d505      	bpl.n	80096d6 <__sflush_r+0x46>
 80096ca:	6863      	ldr	r3, [r4, #4]
 80096cc:	1ac0      	subs	r0, r0, r3
 80096ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096d0:	b10b      	cbz	r3, 80096d6 <__sflush_r+0x46>
 80096d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096d4:	1ac0      	subs	r0, r0, r3
 80096d6:	2300      	movs	r3, #0
 80096d8:	4602      	mov	r2, r0
 80096da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096dc:	6a21      	ldr	r1, [r4, #32]
 80096de:	4628      	mov	r0, r5
 80096e0:	47b0      	blx	r6
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	d106      	bne.n	80096f6 <__sflush_r+0x66>
 80096e8:	6829      	ldr	r1, [r5, #0]
 80096ea:	291d      	cmp	r1, #29
 80096ec:	d82c      	bhi.n	8009748 <__sflush_r+0xb8>
 80096ee:	4a2a      	ldr	r2, [pc, #168]	; (8009798 <__sflush_r+0x108>)
 80096f0:	40ca      	lsrs	r2, r1
 80096f2:	07d6      	lsls	r6, r2, #31
 80096f4:	d528      	bpl.n	8009748 <__sflush_r+0xb8>
 80096f6:	2200      	movs	r2, #0
 80096f8:	6062      	str	r2, [r4, #4]
 80096fa:	04d9      	lsls	r1, r3, #19
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	6022      	str	r2, [r4, #0]
 8009700:	d504      	bpl.n	800970c <__sflush_r+0x7c>
 8009702:	1c42      	adds	r2, r0, #1
 8009704:	d101      	bne.n	800970a <__sflush_r+0x7a>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	b903      	cbnz	r3, 800970c <__sflush_r+0x7c>
 800970a:	6560      	str	r0, [r4, #84]	; 0x54
 800970c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800970e:	602f      	str	r7, [r5, #0]
 8009710:	2900      	cmp	r1, #0
 8009712:	d0ca      	beq.n	80096aa <__sflush_r+0x1a>
 8009714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009718:	4299      	cmp	r1, r3
 800971a:	d002      	beq.n	8009722 <__sflush_r+0x92>
 800971c:	4628      	mov	r0, r5
 800971e:	f7ff fd7f 	bl	8009220 <_free_r>
 8009722:	2000      	movs	r0, #0
 8009724:	6360      	str	r0, [r4, #52]	; 0x34
 8009726:	e7c1      	b.n	80096ac <__sflush_r+0x1c>
 8009728:	6a21      	ldr	r1, [r4, #32]
 800972a:	2301      	movs	r3, #1
 800972c:	4628      	mov	r0, r5
 800972e:	47b0      	blx	r6
 8009730:	1c41      	adds	r1, r0, #1
 8009732:	d1c7      	bne.n	80096c4 <__sflush_r+0x34>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0c4      	beq.n	80096c4 <__sflush_r+0x34>
 800973a:	2b1d      	cmp	r3, #29
 800973c:	d001      	beq.n	8009742 <__sflush_r+0xb2>
 800973e:	2b16      	cmp	r3, #22
 8009740:	d101      	bne.n	8009746 <__sflush_r+0xb6>
 8009742:	602f      	str	r7, [r5, #0]
 8009744:	e7b1      	b.n	80096aa <__sflush_r+0x1a>
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	e7ad      	b.n	80096ac <__sflush_r+0x1c>
 8009750:	690f      	ldr	r7, [r1, #16]
 8009752:	2f00      	cmp	r7, #0
 8009754:	d0a9      	beq.n	80096aa <__sflush_r+0x1a>
 8009756:	0793      	lsls	r3, r2, #30
 8009758:	680e      	ldr	r6, [r1, #0]
 800975a:	bf08      	it	eq
 800975c:	694b      	ldreq	r3, [r1, #20]
 800975e:	600f      	str	r7, [r1, #0]
 8009760:	bf18      	it	ne
 8009762:	2300      	movne	r3, #0
 8009764:	eba6 0807 	sub.w	r8, r6, r7
 8009768:	608b      	str	r3, [r1, #8]
 800976a:	f1b8 0f00 	cmp.w	r8, #0
 800976e:	dd9c      	ble.n	80096aa <__sflush_r+0x1a>
 8009770:	6a21      	ldr	r1, [r4, #32]
 8009772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009774:	4643      	mov	r3, r8
 8009776:	463a      	mov	r2, r7
 8009778:	4628      	mov	r0, r5
 800977a:	47b0      	blx	r6
 800977c:	2800      	cmp	r0, #0
 800977e:	dc06      	bgt.n	800978e <__sflush_r+0xfe>
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009786:	81a3      	strh	r3, [r4, #12]
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	e78e      	b.n	80096ac <__sflush_r+0x1c>
 800978e:	4407      	add	r7, r0
 8009790:	eba8 0800 	sub.w	r8, r8, r0
 8009794:	e7e9      	b.n	800976a <__sflush_r+0xda>
 8009796:	bf00      	nop
 8009798:	20400001 	.word	0x20400001

0800979c <_fflush_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	690b      	ldr	r3, [r1, #16]
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	b913      	cbnz	r3, 80097ac <_fflush_r+0x10>
 80097a6:	2500      	movs	r5, #0
 80097a8:	4628      	mov	r0, r5
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	b118      	cbz	r0, 80097b6 <_fflush_r+0x1a>
 80097ae:	6983      	ldr	r3, [r0, #24]
 80097b0:	b90b      	cbnz	r3, 80097b6 <_fflush_r+0x1a>
 80097b2:	f000 f887 	bl	80098c4 <__sinit>
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <_fflush_r+0x6c>)
 80097b8:	429c      	cmp	r4, r3
 80097ba:	d11b      	bne.n	80097f4 <_fflush_r+0x58>
 80097bc:	686c      	ldr	r4, [r5, #4]
 80097be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0ef      	beq.n	80097a6 <_fflush_r+0xa>
 80097c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097c8:	07d0      	lsls	r0, r2, #31
 80097ca:	d404      	bmi.n	80097d6 <_fflush_r+0x3a>
 80097cc:	0599      	lsls	r1, r3, #22
 80097ce:	d402      	bmi.n	80097d6 <_fflush_r+0x3a>
 80097d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097d2:	f000 f915 	bl	8009a00 <__retarget_lock_acquire_recursive>
 80097d6:	4628      	mov	r0, r5
 80097d8:	4621      	mov	r1, r4
 80097da:	f7ff ff59 	bl	8009690 <__sflush_r>
 80097de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097e0:	07da      	lsls	r2, r3, #31
 80097e2:	4605      	mov	r5, r0
 80097e4:	d4e0      	bmi.n	80097a8 <_fflush_r+0xc>
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	059b      	lsls	r3, r3, #22
 80097ea:	d4dd      	bmi.n	80097a8 <_fflush_r+0xc>
 80097ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ee:	f000 f908 	bl	8009a02 <__retarget_lock_release_recursive>
 80097f2:	e7d9      	b.n	80097a8 <_fflush_r+0xc>
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <_fflush_r+0x70>)
 80097f6:	429c      	cmp	r4, r3
 80097f8:	d101      	bne.n	80097fe <_fflush_r+0x62>
 80097fa:	68ac      	ldr	r4, [r5, #8]
 80097fc:	e7df      	b.n	80097be <_fflush_r+0x22>
 80097fe:	4b04      	ldr	r3, [pc, #16]	; (8009810 <_fflush_r+0x74>)
 8009800:	429c      	cmp	r4, r3
 8009802:	bf08      	it	eq
 8009804:	68ec      	ldreq	r4, [r5, #12]
 8009806:	e7da      	b.n	80097be <_fflush_r+0x22>
 8009808:	0800b7ac 	.word	0x0800b7ac
 800980c:	0800b7cc 	.word	0x0800b7cc
 8009810:	0800b78c 	.word	0x0800b78c

08009814 <std>:
 8009814:	2300      	movs	r3, #0
 8009816:	b510      	push	{r4, lr}
 8009818:	4604      	mov	r4, r0
 800981a:	e9c0 3300 	strd	r3, r3, [r0]
 800981e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009822:	6083      	str	r3, [r0, #8]
 8009824:	8181      	strh	r1, [r0, #12]
 8009826:	6643      	str	r3, [r0, #100]	; 0x64
 8009828:	81c2      	strh	r2, [r0, #14]
 800982a:	6183      	str	r3, [r0, #24]
 800982c:	4619      	mov	r1, r3
 800982e:	2208      	movs	r2, #8
 8009830:	305c      	adds	r0, #92	; 0x5c
 8009832:	f7ff fced 	bl	8009210 <memset>
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <std+0x38>)
 8009838:	6263      	str	r3, [r4, #36]	; 0x24
 800983a:	4b05      	ldr	r3, [pc, #20]	; (8009850 <std+0x3c>)
 800983c:	62a3      	str	r3, [r4, #40]	; 0x28
 800983e:	4b05      	ldr	r3, [pc, #20]	; (8009854 <std+0x40>)
 8009840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009842:	4b05      	ldr	r3, [pc, #20]	; (8009858 <std+0x44>)
 8009844:	6224      	str	r4, [r4, #32]
 8009846:	6323      	str	r3, [r4, #48]	; 0x30
 8009848:	bd10      	pop	{r4, pc}
 800984a:	bf00      	nop
 800984c:	0800a0c5 	.word	0x0800a0c5
 8009850:	0800a0e7 	.word	0x0800a0e7
 8009854:	0800a11f 	.word	0x0800a11f
 8009858:	0800a143 	.word	0x0800a143

0800985c <_cleanup_r>:
 800985c:	4901      	ldr	r1, [pc, #4]	; (8009864 <_cleanup_r+0x8>)
 800985e:	f000 b8af 	b.w	80099c0 <_fwalk_reent>
 8009862:	bf00      	nop
 8009864:	0800979d 	.word	0x0800979d

08009868 <__sfmoreglue>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	1e4a      	subs	r2, r1, #1
 800986c:	2568      	movs	r5, #104	; 0x68
 800986e:	4355      	muls	r5, r2
 8009870:	460e      	mov	r6, r1
 8009872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009876:	f7ff fd23 	bl	80092c0 <_malloc_r>
 800987a:	4604      	mov	r4, r0
 800987c:	b140      	cbz	r0, 8009890 <__sfmoreglue+0x28>
 800987e:	2100      	movs	r1, #0
 8009880:	e9c0 1600 	strd	r1, r6, [r0]
 8009884:	300c      	adds	r0, #12
 8009886:	60a0      	str	r0, [r4, #8]
 8009888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800988c:	f7ff fcc0 	bl	8009210 <memset>
 8009890:	4620      	mov	r0, r4
 8009892:	bd70      	pop	{r4, r5, r6, pc}

08009894 <__sfp_lock_acquire>:
 8009894:	4801      	ldr	r0, [pc, #4]	; (800989c <__sfp_lock_acquire+0x8>)
 8009896:	f000 b8b3 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 800989a:	bf00      	nop
 800989c:	20002c04 	.word	0x20002c04

080098a0 <__sfp_lock_release>:
 80098a0:	4801      	ldr	r0, [pc, #4]	; (80098a8 <__sfp_lock_release+0x8>)
 80098a2:	f000 b8ae 	b.w	8009a02 <__retarget_lock_release_recursive>
 80098a6:	bf00      	nop
 80098a8:	20002c04 	.word	0x20002c04

080098ac <__sinit_lock_acquire>:
 80098ac:	4801      	ldr	r0, [pc, #4]	; (80098b4 <__sinit_lock_acquire+0x8>)
 80098ae:	f000 b8a7 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 80098b2:	bf00      	nop
 80098b4:	20002bff 	.word	0x20002bff

080098b8 <__sinit_lock_release>:
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <__sinit_lock_release+0x8>)
 80098ba:	f000 b8a2 	b.w	8009a02 <__retarget_lock_release_recursive>
 80098be:	bf00      	nop
 80098c0:	20002bff 	.word	0x20002bff

080098c4 <__sinit>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	4604      	mov	r4, r0
 80098c8:	f7ff fff0 	bl	80098ac <__sinit_lock_acquire>
 80098cc:	69a3      	ldr	r3, [r4, #24]
 80098ce:	b11b      	cbz	r3, 80098d8 <__sinit+0x14>
 80098d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d4:	f7ff bff0 	b.w	80098b8 <__sinit_lock_release>
 80098d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098dc:	6523      	str	r3, [r4, #80]	; 0x50
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <__sinit+0x68>)
 80098e0:	4a13      	ldr	r2, [pc, #76]	; (8009930 <__sinit+0x6c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80098e6:	42a3      	cmp	r3, r4
 80098e8:	bf04      	itt	eq
 80098ea:	2301      	moveq	r3, #1
 80098ec:	61a3      	streq	r3, [r4, #24]
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 f820 	bl	8009934 <__sfp>
 80098f4:	6060      	str	r0, [r4, #4]
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f81c 	bl	8009934 <__sfp>
 80098fc:	60a0      	str	r0, [r4, #8]
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 f818 	bl	8009934 <__sfp>
 8009904:	2200      	movs	r2, #0
 8009906:	60e0      	str	r0, [r4, #12]
 8009908:	2104      	movs	r1, #4
 800990a:	6860      	ldr	r0, [r4, #4]
 800990c:	f7ff ff82 	bl	8009814 <std>
 8009910:	68a0      	ldr	r0, [r4, #8]
 8009912:	2201      	movs	r2, #1
 8009914:	2109      	movs	r1, #9
 8009916:	f7ff ff7d 	bl	8009814 <std>
 800991a:	68e0      	ldr	r0, [r4, #12]
 800991c:	2202      	movs	r2, #2
 800991e:	2112      	movs	r1, #18
 8009920:	f7ff ff78 	bl	8009814 <std>
 8009924:	2301      	movs	r3, #1
 8009926:	61a3      	str	r3, [r4, #24]
 8009928:	e7d2      	b.n	80098d0 <__sinit+0xc>
 800992a:	bf00      	nop
 800992c:	0800b788 	.word	0x0800b788
 8009930:	0800985d 	.word	0x0800985d

08009934 <__sfp>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	4607      	mov	r7, r0
 8009938:	f7ff ffac 	bl	8009894 <__sfp_lock_acquire>
 800993c:	4b1e      	ldr	r3, [pc, #120]	; (80099b8 <__sfp+0x84>)
 800993e:	681e      	ldr	r6, [r3, #0]
 8009940:	69b3      	ldr	r3, [r6, #24]
 8009942:	b913      	cbnz	r3, 800994a <__sfp+0x16>
 8009944:	4630      	mov	r0, r6
 8009946:	f7ff ffbd 	bl	80098c4 <__sinit>
 800994a:	3648      	adds	r6, #72	; 0x48
 800994c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009950:	3b01      	subs	r3, #1
 8009952:	d503      	bpl.n	800995c <__sfp+0x28>
 8009954:	6833      	ldr	r3, [r6, #0]
 8009956:	b30b      	cbz	r3, 800999c <__sfp+0x68>
 8009958:	6836      	ldr	r6, [r6, #0]
 800995a:	e7f7      	b.n	800994c <__sfp+0x18>
 800995c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009960:	b9d5      	cbnz	r5, 8009998 <__sfp+0x64>
 8009962:	4b16      	ldr	r3, [pc, #88]	; (80099bc <__sfp+0x88>)
 8009964:	60e3      	str	r3, [r4, #12]
 8009966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800996a:	6665      	str	r5, [r4, #100]	; 0x64
 800996c:	f000 f847 	bl	80099fe <__retarget_lock_init_recursive>
 8009970:	f7ff ff96 	bl	80098a0 <__sfp_lock_release>
 8009974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800997c:	6025      	str	r5, [r4, #0]
 800997e:	61a5      	str	r5, [r4, #24]
 8009980:	2208      	movs	r2, #8
 8009982:	4629      	mov	r1, r5
 8009984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009988:	f7ff fc42 	bl	8009210 <memset>
 800998c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009994:	4620      	mov	r0, r4
 8009996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009998:	3468      	adds	r4, #104	; 0x68
 800999a:	e7d9      	b.n	8009950 <__sfp+0x1c>
 800999c:	2104      	movs	r1, #4
 800999e:	4638      	mov	r0, r7
 80099a0:	f7ff ff62 	bl	8009868 <__sfmoreglue>
 80099a4:	4604      	mov	r4, r0
 80099a6:	6030      	str	r0, [r6, #0]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d1d5      	bne.n	8009958 <__sfp+0x24>
 80099ac:	f7ff ff78 	bl	80098a0 <__sfp_lock_release>
 80099b0:	230c      	movs	r3, #12
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	e7ee      	b.n	8009994 <__sfp+0x60>
 80099b6:	bf00      	nop
 80099b8:	0800b788 	.word	0x0800b788
 80099bc:	ffff0001 	.word	0xffff0001

080099c0 <_fwalk_reent>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	4606      	mov	r6, r0
 80099c6:	4688      	mov	r8, r1
 80099c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099cc:	2700      	movs	r7, #0
 80099ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099d2:	f1b9 0901 	subs.w	r9, r9, #1
 80099d6:	d505      	bpl.n	80099e4 <_fwalk_reent+0x24>
 80099d8:	6824      	ldr	r4, [r4, #0]
 80099da:	2c00      	cmp	r4, #0
 80099dc:	d1f7      	bne.n	80099ce <_fwalk_reent+0xe>
 80099de:	4638      	mov	r0, r7
 80099e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e4:	89ab      	ldrh	r3, [r5, #12]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d907      	bls.n	80099fa <_fwalk_reent+0x3a>
 80099ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099ee:	3301      	adds	r3, #1
 80099f0:	d003      	beq.n	80099fa <_fwalk_reent+0x3a>
 80099f2:	4629      	mov	r1, r5
 80099f4:	4630      	mov	r0, r6
 80099f6:	47c0      	blx	r8
 80099f8:	4307      	orrs	r7, r0
 80099fa:	3568      	adds	r5, #104	; 0x68
 80099fc:	e7e9      	b.n	80099d2 <_fwalk_reent+0x12>

080099fe <__retarget_lock_init_recursive>:
 80099fe:	4770      	bx	lr

08009a00 <__retarget_lock_acquire_recursive>:
 8009a00:	4770      	bx	lr

08009a02 <__retarget_lock_release_recursive>:
 8009a02:	4770      	bx	lr

08009a04 <__swhatbuf_r>:
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	460e      	mov	r6, r1
 8009a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	b096      	sub	sp, #88	; 0x58
 8009a10:	4614      	mov	r4, r2
 8009a12:	461d      	mov	r5, r3
 8009a14:	da07      	bge.n	8009a26 <__swhatbuf_r+0x22>
 8009a16:	2300      	movs	r3, #0
 8009a18:	602b      	str	r3, [r5, #0]
 8009a1a:	89b3      	ldrh	r3, [r6, #12]
 8009a1c:	061a      	lsls	r2, r3, #24
 8009a1e:	d410      	bmi.n	8009a42 <__swhatbuf_r+0x3e>
 8009a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a24:	e00e      	b.n	8009a44 <__swhatbuf_r+0x40>
 8009a26:	466a      	mov	r2, sp
 8009a28:	f000 fbb2 	bl	800a190 <_fstat_r>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	dbf2      	blt.n	8009a16 <__swhatbuf_r+0x12>
 8009a30:	9a01      	ldr	r2, [sp, #4]
 8009a32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a3a:	425a      	negs	r2, r3
 8009a3c:	415a      	adcs	r2, r3
 8009a3e:	602a      	str	r2, [r5, #0]
 8009a40:	e7ee      	b.n	8009a20 <__swhatbuf_r+0x1c>
 8009a42:	2340      	movs	r3, #64	; 0x40
 8009a44:	2000      	movs	r0, #0
 8009a46:	6023      	str	r3, [r4, #0]
 8009a48:	b016      	add	sp, #88	; 0x58
 8009a4a:	bd70      	pop	{r4, r5, r6, pc}

08009a4c <__smakebuf_r>:
 8009a4c:	898b      	ldrh	r3, [r1, #12]
 8009a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a50:	079d      	lsls	r5, r3, #30
 8009a52:	4606      	mov	r6, r0
 8009a54:	460c      	mov	r4, r1
 8009a56:	d507      	bpl.n	8009a68 <__smakebuf_r+0x1c>
 8009a58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	2301      	movs	r3, #1
 8009a62:	6163      	str	r3, [r4, #20]
 8009a64:	b002      	add	sp, #8
 8009a66:	bd70      	pop	{r4, r5, r6, pc}
 8009a68:	ab01      	add	r3, sp, #4
 8009a6a:	466a      	mov	r2, sp
 8009a6c:	f7ff ffca 	bl	8009a04 <__swhatbuf_r>
 8009a70:	9900      	ldr	r1, [sp, #0]
 8009a72:	4605      	mov	r5, r0
 8009a74:	4630      	mov	r0, r6
 8009a76:	f7ff fc23 	bl	80092c0 <_malloc_r>
 8009a7a:	b948      	cbnz	r0, 8009a90 <__smakebuf_r+0x44>
 8009a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a80:	059a      	lsls	r2, r3, #22
 8009a82:	d4ef      	bmi.n	8009a64 <__smakebuf_r+0x18>
 8009a84:	f023 0303 	bic.w	r3, r3, #3
 8009a88:	f043 0302 	orr.w	r3, r3, #2
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	e7e3      	b.n	8009a58 <__smakebuf_r+0xc>
 8009a90:	4b0d      	ldr	r3, [pc, #52]	; (8009ac8 <__smakebuf_r+0x7c>)
 8009a92:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	6020      	str	r0, [r4, #0]
 8009a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9c:	81a3      	strh	r3, [r4, #12]
 8009a9e:	9b00      	ldr	r3, [sp, #0]
 8009aa0:	6163      	str	r3, [r4, #20]
 8009aa2:	9b01      	ldr	r3, [sp, #4]
 8009aa4:	6120      	str	r0, [r4, #16]
 8009aa6:	b15b      	cbz	r3, 8009ac0 <__smakebuf_r+0x74>
 8009aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009aac:	4630      	mov	r0, r6
 8009aae:	f000 fb81 	bl	800a1b4 <_isatty_r>
 8009ab2:	b128      	cbz	r0, 8009ac0 <__smakebuf_r+0x74>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	f043 0301 	orr.w	r3, r3, #1
 8009abe:	81a3      	strh	r3, [r4, #12]
 8009ac0:	89a0      	ldrh	r0, [r4, #12]
 8009ac2:	4305      	orrs	r5, r0
 8009ac4:	81a5      	strh	r5, [r4, #12]
 8009ac6:	e7cd      	b.n	8009a64 <__smakebuf_r+0x18>
 8009ac8:	0800985d 	.word	0x0800985d

08009acc <__malloc_lock>:
 8009acc:	4801      	ldr	r0, [pc, #4]	; (8009ad4 <__malloc_lock+0x8>)
 8009ace:	f7ff bf97 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 8009ad2:	bf00      	nop
 8009ad4:	20002c00 	.word	0x20002c00

08009ad8 <__malloc_unlock>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	; (8009ae0 <__malloc_unlock+0x8>)
 8009ada:	f7ff bf92 	b.w	8009a02 <__retarget_lock_release_recursive>
 8009ade:	bf00      	nop
 8009ae0:	20002c00 	.word	0x20002c00

08009ae4 <__ssputs_r>:
 8009ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae8:	688e      	ldr	r6, [r1, #8]
 8009aea:	429e      	cmp	r6, r3
 8009aec:	4682      	mov	sl, r0
 8009aee:	460c      	mov	r4, r1
 8009af0:	4690      	mov	r8, r2
 8009af2:	461f      	mov	r7, r3
 8009af4:	d838      	bhi.n	8009b68 <__ssputs_r+0x84>
 8009af6:	898a      	ldrh	r2, [r1, #12]
 8009af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009afc:	d032      	beq.n	8009b64 <__ssputs_r+0x80>
 8009afe:	6825      	ldr	r5, [r4, #0]
 8009b00:	6909      	ldr	r1, [r1, #16]
 8009b02:	eba5 0901 	sub.w	r9, r5, r1
 8009b06:	6965      	ldr	r5, [r4, #20]
 8009b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b10:	3301      	adds	r3, #1
 8009b12:	444b      	add	r3, r9
 8009b14:	106d      	asrs	r5, r5, #1
 8009b16:	429d      	cmp	r5, r3
 8009b18:	bf38      	it	cc
 8009b1a:	461d      	movcc	r5, r3
 8009b1c:	0553      	lsls	r3, r2, #21
 8009b1e:	d531      	bpl.n	8009b84 <__ssputs_r+0xa0>
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7ff fbcd 	bl	80092c0 <_malloc_r>
 8009b26:	4606      	mov	r6, r0
 8009b28:	b950      	cbnz	r0, 8009b40 <__ssputs_r+0x5c>
 8009b2a:	230c      	movs	r3, #12
 8009b2c:	f8ca 3000 	str.w	r3, [sl]
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b40:	6921      	ldr	r1, [r4, #16]
 8009b42:	464a      	mov	r2, r9
 8009b44:	f000 fb58 	bl	800a1f8 <memcpy>
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b52:	81a3      	strh	r3, [r4, #12]
 8009b54:	6126      	str	r6, [r4, #16]
 8009b56:	6165      	str	r5, [r4, #20]
 8009b58:	444e      	add	r6, r9
 8009b5a:	eba5 0509 	sub.w	r5, r5, r9
 8009b5e:	6026      	str	r6, [r4, #0]
 8009b60:	60a5      	str	r5, [r4, #8]
 8009b62:	463e      	mov	r6, r7
 8009b64:	42be      	cmp	r6, r7
 8009b66:	d900      	bls.n	8009b6a <__ssputs_r+0x86>
 8009b68:	463e      	mov	r6, r7
 8009b6a:	4632      	mov	r2, r6
 8009b6c:	6820      	ldr	r0, [r4, #0]
 8009b6e:	4641      	mov	r1, r8
 8009b70:	f000 fb50 	bl	800a214 <memmove>
 8009b74:	68a3      	ldr	r3, [r4, #8]
 8009b76:	6822      	ldr	r2, [r4, #0]
 8009b78:	1b9b      	subs	r3, r3, r6
 8009b7a:	4432      	add	r2, r6
 8009b7c:	60a3      	str	r3, [r4, #8]
 8009b7e:	6022      	str	r2, [r4, #0]
 8009b80:	2000      	movs	r0, #0
 8009b82:	e7db      	b.n	8009b3c <__ssputs_r+0x58>
 8009b84:	462a      	mov	r2, r5
 8009b86:	f000 fb5f 	bl	800a248 <_realloc_r>
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d1e1      	bne.n	8009b54 <__ssputs_r+0x70>
 8009b90:	6921      	ldr	r1, [r4, #16]
 8009b92:	4650      	mov	r0, sl
 8009b94:	f7ff fb44 	bl	8009220 <_free_r>
 8009b98:	e7c7      	b.n	8009b2a <__ssputs_r+0x46>
	...

08009b9c <_svfiprintf_r>:
 8009b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	4698      	mov	r8, r3
 8009ba2:	898b      	ldrh	r3, [r1, #12]
 8009ba4:	061b      	lsls	r3, r3, #24
 8009ba6:	b09d      	sub	sp, #116	; 0x74
 8009ba8:	4607      	mov	r7, r0
 8009baa:	460d      	mov	r5, r1
 8009bac:	4614      	mov	r4, r2
 8009bae:	d50e      	bpl.n	8009bce <_svfiprintf_r+0x32>
 8009bb0:	690b      	ldr	r3, [r1, #16]
 8009bb2:	b963      	cbnz	r3, 8009bce <_svfiprintf_r+0x32>
 8009bb4:	2140      	movs	r1, #64	; 0x40
 8009bb6:	f7ff fb83 	bl	80092c0 <_malloc_r>
 8009bba:	6028      	str	r0, [r5, #0]
 8009bbc:	6128      	str	r0, [r5, #16]
 8009bbe:	b920      	cbnz	r0, 8009bca <_svfiprintf_r+0x2e>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc8:	e0d1      	b.n	8009d6e <_svfiprintf_r+0x1d2>
 8009bca:	2340      	movs	r3, #64	; 0x40
 8009bcc:	616b      	str	r3, [r5, #20]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd2:	2320      	movs	r3, #32
 8009bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bdc:	2330      	movs	r3, #48	; 0x30
 8009bde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d88 <_svfiprintf_r+0x1ec>
 8009be2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009be6:	f04f 0901 	mov.w	r9, #1
 8009bea:	4623      	mov	r3, r4
 8009bec:	469a      	mov	sl, r3
 8009bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bf2:	b10a      	cbz	r2, 8009bf8 <_svfiprintf_r+0x5c>
 8009bf4:	2a25      	cmp	r2, #37	; 0x25
 8009bf6:	d1f9      	bne.n	8009bec <_svfiprintf_r+0x50>
 8009bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8009bfc:	d00b      	beq.n	8009c16 <_svfiprintf_r+0x7a>
 8009bfe:	465b      	mov	r3, fp
 8009c00:	4622      	mov	r2, r4
 8009c02:	4629      	mov	r1, r5
 8009c04:	4638      	mov	r0, r7
 8009c06:	f7ff ff6d 	bl	8009ae4 <__ssputs_r>
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	f000 80aa 	beq.w	8009d64 <_svfiprintf_r+0x1c8>
 8009c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c12:	445a      	add	r2, fp
 8009c14:	9209      	str	r2, [sp, #36]	; 0x24
 8009c16:	f89a 3000 	ldrb.w	r3, [sl]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f000 80a2 	beq.w	8009d64 <_svfiprintf_r+0x1c8>
 8009c20:	2300      	movs	r3, #0
 8009c22:	f04f 32ff 	mov.w	r2, #4294967295
 8009c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c2a:	f10a 0a01 	add.w	sl, sl, #1
 8009c2e:	9304      	str	r3, [sp, #16]
 8009c30:	9307      	str	r3, [sp, #28]
 8009c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c36:	931a      	str	r3, [sp, #104]	; 0x68
 8009c38:	4654      	mov	r4, sl
 8009c3a:	2205      	movs	r2, #5
 8009c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c40:	4851      	ldr	r0, [pc, #324]	; (8009d88 <_svfiprintf_r+0x1ec>)
 8009c42:	f7f6 fad5 	bl	80001f0 <memchr>
 8009c46:	9a04      	ldr	r2, [sp, #16]
 8009c48:	b9d8      	cbnz	r0, 8009c82 <_svfiprintf_r+0xe6>
 8009c4a:	06d0      	lsls	r0, r2, #27
 8009c4c:	bf44      	itt	mi
 8009c4e:	2320      	movmi	r3, #32
 8009c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c54:	0711      	lsls	r1, r2, #28
 8009c56:	bf44      	itt	mi
 8009c58:	232b      	movmi	r3, #43	; 0x2b
 8009c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c62:	2b2a      	cmp	r3, #42	; 0x2a
 8009c64:	d015      	beq.n	8009c92 <_svfiprintf_r+0xf6>
 8009c66:	9a07      	ldr	r2, [sp, #28]
 8009c68:	4654      	mov	r4, sl
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f04f 0c0a 	mov.w	ip, #10
 8009c70:	4621      	mov	r1, r4
 8009c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c76:	3b30      	subs	r3, #48	; 0x30
 8009c78:	2b09      	cmp	r3, #9
 8009c7a:	d94e      	bls.n	8009d1a <_svfiprintf_r+0x17e>
 8009c7c:	b1b0      	cbz	r0, 8009cac <_svfiprintf_r+0x110>
 8009c7e:	9207      	str	r2, [sp, #28]
 8009c80:	e014      	b.n	8009cac <_svfiprintf_r+0x110>
 8009c82:	eba0 0308 	sub.w	r3, r0, r8
 8009c86:	fa09 f303 	lsl.w	r3, r9, r3
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	9304      	str	r3, [sp, #16]
 8009c8e:	46a2      	mov	sl, r4
 8009c90:	e7d2      	b.n	8009c38 <_svfiprintf_r+0x9c>
 8009c92:	9b03      	ldr	r3, [sp, #12]
 8009c94:	1d19      	adds	r1, r3, #4
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	9103      	str	r1, [sp, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	bfbb      	ittet	lt
 8009c9e:	425b      	neglt	r3, r3
 8009ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ca4:	9307      	strge	r3, [sp, #28]
 8009ca6:	9307      	strlt	r3, [sp, #28]
 8009ca8:	bfb8      	it	lt
 8009caa:	9204      	strlt	r2, [sp, #16]
 8009cac:	7823      	ldrb	r3, [r4, #0]
 8009cae:	2b2e      	cmp	r3, #46	; 0x2e
 8009cb0:	d10c      	bne.n	8009ccc <_svfiprintf_r+0x130>
 8009cb2:	7863      	ldrb	r3, [r4, #1]
 8009cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb6:	d135      	bne.n	8009d24 <_svfiprintf_r+0x188>
 8009cb8:	9b03      	ldr	r3, [sp, #12]
 8009cba:	1d1a      	adds	r2, r3, #4
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	9203      	str	r2, [sp, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bfb8      	it	lt
 8009cc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cc8:	3402      	adds	r4, #2
 8009cca:	9305      	str	r3, [sp, #20]
 8009ccc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d98 <_svfiprintf_r+0x1fc>
 8009cd0:	7821      	ldrb	r1, [r4, #0]
 8009cd2:	2203      	movs	r2, #3
 8009cd4:	4650      	mov	r0, sl
 8009cd6:	f7f6 fa8b 	bl	80001f0 <memchr>
 8009cda:	b140      	cbz	r0, 8009cee <_svfiprintf_r+0x152>
 8009cdc:	2340      	movs	r3, #64	; 0x40
 8009cde:	eba0 000a 	sub.w	r0, r0, sl
 8009ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ce6:	9b04      	ldr	r3, [sp, #16]
 8009ce8:	4303      	orrs	r3, r0
 8009cea:	3401      	adds	r4, #1
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf2:	4826      	ldr	r0, [pc, #152]	; (8009d8c <_svfiprintf_r+0x1f0>)
 8009cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cf8:	2206      	movs	r2, #6
 8009cfa:	f7f6 fa79 	bl	80001f0 <memchr>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d038      	beq.n	8009d74 <_svfiprintf_r+0x1d8>
 8009d02:	4b23      	ldr	r3, [pc, #140]	; (8009d90 <_svfiprintf_r+0x1f4>)
 8009d04:	bb1b      	cbnz	r3, 8009d4e <_svfiprintf_r+0x1b2>
 8009d06:	9b03      	ldr	r3, [sp, #12]
 8009d08:	3307      	adds	r3, #7
 8009d0a:	f023 0307 	bic.w	r3, r3, #7
 8009d0e:	3308      	adds	r3, #8
 8009d10:	9303      	str	r3, [sp, #12]
 8009d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d14:	4433      	add	r3, r6
 8009d16:	9309      	str	r3, [sp, #36]	; 0x24
 8009d18:	e767      	b.n	8009bea <_svfiprintf_r+0x4e>
 8009d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d1e:	460c      	mov	r4, r1
 8009d20:	2001      	movs	r0, #1
 8009d22:	e7a5      	b.n	8009c70 <_svfiprintf_r+0xd4>
 8009d24:	2300      	movs	r3, #0
 8009d26:	3401      	adds	r4, #1
 8009d28:	9305      	str	r3, [sp, #20]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	f04f 0c0a 	mov.w	ip, #10
 8009d30:	4620      	mov	r0, r4
 8009d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d36:	3a30      	subs	r2, #48	; 0x30
 8009d38:	2a09      	cmp	r2, #9
 8009d3a:	d903      	bls.n	8009d44 <_svfiprintf_r+0x1a8>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0c5      	beq.n	8009ccc <_svfiprintf_r+0x130>
 8009d40:	9105      	str	r1, [sp, #20]
 8009d42:	e7c3      	b.n	8009ccc <_svfiprintf_r+0x130>
 8009d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d48:	4604      	mov	r4, r0
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e7f0      	b.n	8009d30 <_svfiprintf_r+0x194>
 8009d4e:	ab03      	add	r3, sp, #12
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	462a      	mov	r2, r5
 8009d54:	4b0f      	ldr	r3, [pc, #60]	; (8009d94 <_svfiprintf_r+0x1f8>)
 8009d56:	a904      	add	r1, sp, #16
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f3af 8000 	nop.w
 8009d5e:	1c42      	adds	r2, r0, #1
 8009d60:	4606      	mov	r6, r0
 8009d62:	d1d6      	bne.n	8009d12 <_svfiprintf_r+0x176>
 8009d64:	89ab      	ldrh	r3, [r5, #12]
 8009d66:	065b      	lsls	r3, r3, #25
 8009d68:	f53f af2c 	bmi.w	8009bc4 <_svfiprintf_r+0x28>
 8009d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d6e:	b01d      	add	sp, #116	; 0x74
 8009d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d74:	ab03      	add	r3, sp, #12
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	462a      	mov	r2, r5
 8009d7a:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <_svfiprintf_r+0x1f8>)
 8009d7c:	a904      	add	r1, sp, #16
 8009d7e:	4638      	mov	r0, r7
 8009d80:	f000 f87a 	bl	8009e78 <_printf_i>
 8009d84:	e7eb      	b.n	8009d5e <_svfiprintf_r+0x1c2>
 8009d86:	bf00      	nop
 8009d88:	0800b7ec 	.word	0x0800b7ec
 8009d8c:	0800b7f6 	.word	0x0800b7f6
 8009d90:	00000000 	.word	0x00000000
 8009d94:	08009ae5 	.word	0x08009ae5
 8009d98:	0800b7f2 	.word	0x0800b7f2

08009d9c <_printf_common>:
 8009d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da0:	4616      	mov	r6, r2
 8009da2:	4699      	mov	r9, r3
 8009da4:	688a      	ldr	r2, [r1, #8]
 8009da6:	690b      	ldr	r3, [r1, #16]
 8009da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009dac:	4293      	cmp	r3, r2
 8009dae:	bfb8      	it	lt
 8009db0:	4613      	movlt	r3, r2
 8009db2:	6033      	str	r3, [r6, #0]
 8009db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009db8:	4607      	mov	r7, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	b10a      	cbz	r2, 8009dc2 <_printf_common+0x26>
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	6033      	str	r3, [r6, #0]
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	0699      	lsls	r1, r3, #26
 8009dc6:	bf42      	ittt	mi
 8009dc8:	6833      	ldrmi	r3, [r6, #0]
 8009dca:	3302      	addmi	r3, #2
 8009dcc:	6033      	strmi	r3, [r6, #0]
 8009dce:	6825      	ldr	r5, [r4, #0]
 8009dd0:	f015 0506 	ands.w	r5, r5, #6
 8009dd4:	d106      	bne.n	8009de4 <_printf_common+0x48>
 8009dd6:	f104 0a19 	add.w	sl, r4, #25
 8009dda:	68e3      	ldr	r3, [r4, #12]
 8009ddc:	6832      	ldr	r2, [r6, #0]
 8009dde:	1a9b      	subs	r3, r3, r2
 8009de0:	42ab      	cmp	r3, r5
 8009de2:	dc26      	bgt.n	8009e32 <_printf_common+0x96>
 8009de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009de8:	1e13      	subs	r3, r2, #0
 8009dea:	6822      	ldr	r2, [r4, #0]
 8009dec:	bf18      	it	ne
 8009dee:	2301      	movne	r3, #1
 8009df0:	0692      	lsls	r2, r2, #26
 8009df2:	d42b      	bmi.n	8009e4c <_printf_common+0xb0>
 8009df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009df8:	4649      	mov	r1, r9
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	47c0      	blx	r8
 8009dfe:	3001      	adds	r0, #1
 8009e00:	d01e      	beq.n	8009e40 <_printf_common+0xa4>
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	68e5      	ldr	r5, [r4, #12]
 8009e06:	6832      	ldr	r2, [r6, #0]
 8009e08:	f003 0306 	and.w	r3, r3, #6
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	bf08      	it	eq
 8009e10:	1aad      	subeq	r5, r5, r2
 8009e12:	68a3      	ldr	r3, [r4, #8]
 8009e14:	6922      	ldr	r2, [r4, #16]
 8009e16:	bf0c      	ite	eq
 8009e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e1c:	2500      	movne	r5, #0
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	bfc4      	itt	gt
 8009e22:	1a9b      	subgt	r3, r3, r2
 8009e24:	18ed      	addgt	r5, r5, r3
 8009e26:	2600      	movs	r6, #0
 8009e28:	341a      	adds	r4, #26
 8009e2a:	42b5      	cmp	r5, r6
 8009e2c:	d11a      	bne.n	8009e64 <_printf_common+0xc8>
 8009e2e:	2000      	movs	r0, #0
 8009e30:	e008      	b.n	8009e44 <_printf_common+0xa8>
 8009e32:	2301      	movs	r3, #1
 8009e34:	4652      	mov	r2, sl
 8009e36:	4649      	mov	r1, r9
 8009e38:	4638      	mov	r0, r7
 8009e3a:	47c0      	blx	r8
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	d103      	bne.n	8009e48 <_printf_common+0xac>
 8009e40:	f04f 30ff 	mov.w	r0, #4294967295
 8009e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e48:	3501      	adds	r5, #1
 8009e4a:	e7c6      	b.n	8009dda <_printf_common+0x3e>
 8009e4c:	18e1      	adds	r1, r4, r3
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	2030      	movs	r0, #48	; 0x30
 8009e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e56:	4422      	add	r2, r4
 8009e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e60:	3302      	adds	r3, #2
 8009e62:	e7c7      	b.n	8009df4 <_printf_common+0x58>
 8009e64:	2301      	movs	r3, #1
 8009e66:	4622      	mov	r2, r4
 8009e68:	4649      	mov	r1, r9
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	47c0      	blx	r8
 8009e6e:	3001      	adds	r0, #1
 8009e70:	d0e6      	beq.n	8009e40 <_printf_common+0xa4>
 8009e72:	3601      	adds	r6, #1
 8009e74:	e7d9      	b.n	8009e2a <_printf_common+0x8e>
	...

08009e78 <_printf_i>:
 8009e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	4691      	mov	r9, r2
 8009e80:	7e27      	ldrb	r7, [r4, #24]
 8009e82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e84:	2f78      	cmp	r7, #120	; 0x78
 8009e86:	4680      	mov	r8, r0
 8009e88:	469a      	mov	sl, r3
 8009e8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e8e:	d807      	bhi.n	8009ea0 <_printf_i+0x28>
 8009e90:	2f62      	cmp	r7, #98	; 0x62
 8009e92:	d80a      	bhi.n	8009eaa <_printf_i+0x32>
 8009e94:	2f00      	cmp	r7, #0
 8009e96:	f000 80d8 	beq.w	800a04a <_printf_i+0x1d2>
 8009e9a:	2f58      	cmp	r7, #88	; 0x58
 8009e9c:	f000 80a3 	beq.w	8009fe6 <_printf_i+0x16e>
 8009ea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ea8:	e03a      	b.n	8009f20 <_printf_i+0xa8>
 8009eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eae:	2b15      	cmp	r3, #21
 8009eb0:	d8f6      	bhi.n	8009ea0 <_printf_i+0x28>
 8009eb2:	a001      	add	r0, pc, #4	; (adr r0, 8009eb8 <_printf_i+0x40>)
 8009eb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009eb8:	08009f11 	.word	0x08009f11
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009ea1 	.word	0x08009ea1
 8009ec4:	08009ea1 	.word	0x08009ea1
 8009ec8:	08009ea1 	.word	0x08009ea1
 8009ecc:	08009ea1 	.word	0x08009ea1
 8009ed0:	08009f25 	.word	0x08009f25
 8009ed4:	08009ea1 	.word	0x08009ea1
 8009ed8:	08009ea1 	.word	0x08009ea1
 8009edc:	08009ea1 	.word	0x08009ea1
 8009ee0:	08009ea1 	.word	0x08009ea1
 8009ee4:	0800a031 	.word	0x0800a031
 8009ee8:	08009f55 	.word	0x08009f55
 8009eec:	0800a013 	.word	0x0800a013
 8009ef0:	08009ea1 	.word	0x08009ea1
 8009ef4:	08009ea1 	.word	0x08009ea1
 8009ef8:	0800a053 	.word	0x0800a053
 8009efc:	08009ea1 	.word	0x08009ea1
 8009f00:	08009f55 	.word	0x08009f55
 8009f04:	08009ea1 	.word	0x08009ea1
 8009f08:	08009ea1 	.word	0x08009ea1
 8009f0c:	0800a01b 	.word	0x0800a01b
 8009f10:	680b      	ldr	r3, [r1, #0]
 8009f12:	1d1a      	adds	r2, r3, #4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	600a      	str	r2, [r1, #0]
 8009f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f20:	2301      	movs	r3, #1
 8009f22:	e0a3      	b.n	800a06c <_printf_i+0x1f4>
 8009f24:	6825      	ldr	r5, [r4, #0]
 8009f26:	6808      	ldr	r0, [r1, #0]
 8009f28:	062e      	lsls	r6, r5, #24
 8009f2a:	f100 0304 	add.w	r3, r0, #4
 8009f2e:	d50a      	bpl.n	8009f46 <_printf_i+0xce>
 8009f30:	6805      	ldr	r5, [r0, #0]
 8009f32:	600b      	str	r3, [r1, #0]
 8009f34:	2d00      	cmp	r5, #0
 8009f36:	da03      	bge.n	8009f40 <_printf_i+0xc8>
 8009f38:	232d      	movs	r3, #45	; 0x2d
 8009f3a:	426d      	negs	r5, r5
 8009f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f40:	485e      	ldr	r0, [pc, #376]	; (800a0bc <_printf_i+0x244>)
 8009f42:	230a      	movs	r3, #10
 8009f44:	e019      	b.n	8009f7a <_printf_i+0x102>
 8009f46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f4a:	6805      	ldr	r5, [r0, #0]
 8009f4c:	600b      	str	r3, [r1, #0]
 8009f4e:	bf18      	it	ne
 8009f50:	b22d      	sxthne	r5, r5
 8009f52:	e7ef      	b.n	8009f34 <_printf_i+0xbc>
 8009f54:	680b      	ldr	r3, [r1, #0]
 8009f56:	6825      	ldr	r5, [r4, #0]
 8009f58:	1d18      	adds	r0, r3, #4
 8009f5a:	6008      	str	r0, [r1, #0]
 8009f5c:	0628      	lsls	r0, r5, #24
 8009f5e:	d501      	bpl.n	8009f64 <_printf_i+0xec>
 8009f60:	681d      	ldr	r5, [r3, #0]
 8009f62:	e002      	b.n	8009f6a <_printf_i+0xf2>
 8009f64:	0669      	lsls	r1, r5, #25
 8009f66:	d5fb      	bpl.n	8009f60 <_printf_i+0xe8>
 8009f68:	881d      	ldrh	r5, [r3, #0]
 8009f6a:	4854      	ldr	r0, [pc, #336]	; (800a0bc <_printf_i+0x244>)
 8009f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f6e:	bf0c      	ite	eq
 8009f70:	2308      	moveq	r3, #8
 8009f72:	230a      	movne	r3, #10
 8009f74:	2100      	movs	r1, #0
 8009f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f7a:	6866      	ldr	r6, [r4, #4]
 8009f7c:	60a6      	str	r6, [r4, #8]
 8009f7e:	2e00      	cmp	r6, #0
 8009f80:	bfa2      	ittt	ge
 8009f82:	6821      	ldrge	r1, [r4, #0]
 8009f84:	f021 0104 	bicge.w	r1, r1, #4
 8009f88:	6021      	strge	r1, [r4, #0]
 8009f8a:	b90d      	cbnz	r5, 8009f90 <_printf_i+0x118>
 8009f8c:	2e00      	cmp	r6, #0
 8009f8e:	d04d      	beq.n	800a02c <_printf_i+0x1b4>
 8009f90:	4616      	mov	r6, r2
 8009f92:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f96:	fb03 5711 	mls	r7, r3, r1, r5
 8009f9a:	5dc7      	ldrb	r7, [r0, r7]
 8009f9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fa0:	462f      	mov	r7, r5
 8009fa2:	42bb      	cmp	r3, r7
 8009fa4:	460d      	mov	r5, r1
 8009fa6:	d9f4      	bls.n	8009f92 <_printf_i+0x11a>
 8009fa8:	2b08      	cmp	r3, #8
 8009faa:	d10b      	bne.n	8009fc4 <_printf_i+0x14c>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	07df      	lsls	r7, r3, #31
 8009fb0:	d508      	bpl.n	8009fc4 <_printf_i+0x14c>
 8009fb2:	6923      	ldr	r3, [r4, #16]
 8009fb4:	6861      	ldr	r1, [r4, #4]
 8009fb6:	4299      	cmp	r1, r3
 8009fb8:	bfde      	ittt	le
 8009fba:	2330      	movle	r3, #48	; 0x30
 8009fbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fc4:	1b92      	subs	r2, r2, r6
 8009fc6:	6122      	str	r2, [r4, #16]
 8009fc8:	f8cd a000 	str.w	sl, [sp]
 8009fcc:	464b      	mov	r3, r9
 8009fce:	aa03      	add	r2, sp, #12
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	f7ff fee2 	bl	8009d9c <_printf_common>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d14c      	bne.n	800a076 <_printf_i+0x1fe>
 8009fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe0:	b004      	add	sp, #16
 8009fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe6:	4835      	ldr	r0, [pc, #212]	; (800a0bc <_printf_i+0x244>)
 8009fe8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	680e      	ldr	r6, [r1, #0]
 8009ff0:	061f      	lsls	r7, r3, #24
 8009ff2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009ff6:	600e      	str	r6, [r1, #0]
 8009ff8:	d514      	bpl.n	800a024 <_printf_i+0x1ac>
 8009ffa:	07d9      	lsls	r1, r3, #31
 8009ffc:	bf44      	itt	mi
 8009ffe:	f043 0320 	orrmi.w	r3, r3, #32
 800a002:	6023      	strmi	r3, [r4, #0]
 800a004:	b91d      	cbnz	r5, 800a00e <_printf_i+0x196>
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	f023 0320 	bic.w	r3, r3, #32
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	2310      	movs	r3, #16
 800a010:	e7b0      	b.n	8009f74 <_printf_i+0xfc>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	f043 0320 	orr.w	r3, r3, #32
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	2378      	movs	r3, #120	; 0x78
 800a01c:	4828      	ldr	r0, [pc, #160]	; (800a0c0 <_printf_i+0x248>)
 800a01e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a022:	e7e3      	b.n	8009fec <_printf_i+0x174>
 800a024:	065e      	lsls	r6, r3, #25
 800a026:	bf48      	it	mi
 800a028:	b2ad      	uxthmi	r5, r5
 800a02a:	e7e6      	b.n	8009ffa <_printf_i+0x182>
 800a02c:	4616      	mov	r6, r2
 800a02e:	e7bb      	b.n	8009fa8 <_printf_i+0x130>
 800a030:	680b      	ldr	r3, [r1, #0]
 800a032:	6826      	ldr	r6, [r4, #0]
 800a034:	6960      	ldr	r0, [r4, #20]
 800a036:	1d1d      	adds	r5, r3, #4
 800a038:	600d      	str	r5, [r1, #0]
 800a03a:	0635      	lsls	r5, r6, #24
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	d501      	bpl.n	800a044 <_printf_i+0x1cc>
 800a040:	6018      	str	r0, [r3, #0]
 800a042:	e002      	b.n	800a04a <_printf_i+0x1d2>
 800a044:	0671      	lsls	r1, r6, #25
 800a046:	d5fb      	bpl.n	800a040 <_printf_i+0x1c8>
 800a048:	8018      	strh	r0, [r3, #0]
 800a04a:	2300      	movs	r3, #0
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	4616      	mov	r6, r2
 800a050:	e7ba      	b.n	8009fc8 <_printf_i+0x150>
 800a052:	680b      	ldr	r3, [r1, #0]
 800a054:	1d1a      	adds	r2, r3, #4
 800a056:	600a      	str	r2, [r1, #0]
 800a058:	681e      	ldr	r6, [r3, #0]
 800a05a:	6862      	ldr	r2, [r4, #4]
 800a05c:	2100      	movs	r1, #0
 800a05e:	4630      	mov	r0, r6
 800a060:	f7f6 f8c6 	bl	80001f0 <memchr>
 800a064:	b108      	cbz	r0, 800a06a <_printf_i+0x1f2>
 800a066:	1b80      	subs	r0, r0, r6
 800a068:	6060      	str	r0, [r4, #4]
 800a06a:	6863      	ldr	r3, [r4, #4]
 800a06c:	6123      	str	r3, [r4, #16]
 800a06e:	2300      	movs	r3, #0
 800a070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a074:	e7a8      	b.n	8009fc8 <_printf_i+0x150>
 800a076:	6923      	ldr	r3, [r4, #16]
 800a078:	4632      	mov	r2, r6
 800a07a:	4649      	mov	r1, r9
 800a07c:	4640      	mov	r0, r8
 800a07e:	47d0      	blx	sl
 800a080:	3001      	adds	r0, #1
 800a082:	d0ab      	beq.n	8009fdc <_printf_i+0x164>
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	079b      	lsls	r3, r3, #30
 800a088:	d413      	bmi.n	800a0b2 <_printf_i+0x23a>
 800a08a:	68e0      	ldr	r0, [r4, #12]
 800a08c:	9b03      	ldr	r3, [sp, #12]
 800a08e:	4298      	cmp	r0, r3
 800a090:	bfb8      	it	lt
 800a092:	4618      	movlt	r0, r3
 800a094:	e7a4      	b.n	8009fe0 <_printf_i+0x168>
 800a096:	2301      	movs	r3, #1
 800a098:	4632      	mov	r2, r6
 800a09a:	4649      	mov	r1, r9
 800a09c:	4640      	mov	r0, r8
 800a09e:	47d0      	blx	sl
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d09b      	beq.n	8009fdc <_printf_i+0x164>
 800a0a4:	3501      	adds	r5, #1
 800a0a6:	68e3      	ldr	r3, [r4, #12]
 800a0a8:	9903      	ldr	r1, [sp, #12]
 800a0aa:	1a5b      	subs	r3, r3, r1
 800a0ac:	42ab      	cmp	r3, r5
 800a0ae:	dcf2      	bgt.n	800a096 <_printf_i+0x21e>
 800a0b0:	e7eb      	b.n	800a08a <_printf_i+0x212>
 800a0b2:	2500      	movs	r5, #0
 800a0b4:	f104 0619 	add.w	r6, r4, #25
 800a0b8:	e7f5      	b.n	800a0a6 <_printf_i+0x22e>
 800a0ba:	bf00      	nop
 800a0bc:	0800b7fd 	.word	0x0800b7fd
 800a0c0:	0800b80e 	.word	0x0800b80e

0800a0c4 <__sread>:
 800a0c4:	b510      	push	{r4, lr}
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0cc:	f000 f8e2 	bl	800a294 <_read_r>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	bfab      	itete	ge
 800a0d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0d8:	181b      	addge	r3, r3, r0
 800a0da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0de:	bfac      	ite	ge
 800a0e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0e2:	81a3      	strhlt	r3, [r4, #12]
 800a0e4:	bd10      	pop	{r4, pc}

0800a0e6 <__swrite>:
 800a0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ea:	461f      	mov	r7, r3
 800a0ec:	898b      	ldrh	r3, [r1, #12]
 800a0ee:	05db      	lsls	r3, r3, #23
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	4616      	mov	r6, r2
 800a0f6:	d505      	bpl.n	800a104 <__swrite+0x1e>
 800a0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	2200      	movs	r2, #0
 800a100:	f000 f868 	bl	800a1d4 <_lseek_r>
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a10a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	4632      	mov	r2, r6
 800a112:	463b      	mov	r3, r7
 800a114:	4628      	mov	r0, r5
 800a116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a11a:	f000 b817 	b.w	800a14c <_write_r>

0800a11e <__sseek>:
 800a11e:	b510      	push	{r4, lr}
 800a120:	460c      	mov	r4, r1
 800a122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a126:	f000 f855 	bl	800a1d4 <_lseek_r>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	89a3      	ldrh	r3, [r4, #12]
 800a12e:	bf15      	itete	ne
 800a130:	6560      	strne	r0, [r4, #84]	; 0x54
 800a132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a13a:	81a3      	strheq	r3, [r4, #12]
 800a13c:	bf18      	it	ne
 800a13e:	81a3      	strhne	r3, [r4, #12]
 800a140:	bd10      	pop	{r4, pc}

0800a142 <__sclose>:
 800a142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a146:	f000 b813 	b.w	800a170 <_close_r>
	...

0800a14c <_write_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d07      	ldr	r5, [pc, #28]	; (800a16c <_write_r+0x20>)
 800a150:	4604      	mov	r4, r0
 800a152:	4608      	mov	r0, r1
 800a154:	4611      	mov	r1, r2
 800a156:	2200      	movs	r2, #0
 800a158:	602a      	str	r2, [r5, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	f7f8 f8c9 	bl	80022f2 <_write>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d102      	bne.n	800a16a <_write_r+0x1e>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	b103      	cbz	r3, 800a16a <_write_r+0x1e>
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	20002c08 	.word	0x20002c08

0800a170 <_close_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4d06      	ldr	r5, [pc, #24]	; (800a18c <_close_r+0x1c>)
 800a174:	2300      	movs	r3, #0
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	602b      	str	r3, [r5, #0]
 800a17c:	f7f8 f8d5 	bl	800232a <_close>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_close_r+0x1a>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_close_r+0x1a>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	20002c08 	.word	0x20002c08

0800a190 <_fstat_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d07      	ldr	r5, [pc, #28]	; (800a1b0 <_fstat_r+0x20>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	4611      	mov	r1, r2
 800a19c:	602b      	str	r3, [r5, #0]
 800a19e:	f7f8 f8d0 	bl	8002342 <_fstat>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	d102      	bne.n	800a1ac <_fstat_r+0x1c>
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	b103      	cbz	r3, 800a1ac <_fstat_r+0x1c>
 800a1aa:	6023      	str	r3, [r4, #0]
 800a1ac:	bd38      	pop	{r3, r4, r5, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20002c08 	.word	0x20002c08

0800a1b4 <_isatty_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d06      	ldr	r5, [pc, #24]	; (800a1d0 <_isatty_r+0x1c>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	602b      	str	r3, [r5, #0]
 800a1c0:	f7f8 f8cf 	bl	8002362 <_isatty>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	d102      	bne.n	800a1ce <_isatty_r+0x1a>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	b103      	cbz	r3, 800a1ce <_isatty_r+0x1a>
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	bd38      	pop	{r3, r4, r5, pc}
 800a1d0:	20002c08 	.word	0x20002c08

0800a1d4 <_lseek_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4d07      	ldr	r5, [pc, #28]	; (800a1f4 <_lseek_r+0x20>)
 800a1d8:	4604      	mov	r4, r0
 800a1da:	4608      	mov	r0, r1
 800a1dc:	4611      	mov	r1, r2
 800a1de:	2200      	movs	r2, #0
 800a1e0:	602a      	str	r2, [r5, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f7f8 f8c8 	bl	8002378 <_lseek>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_lseek_r+0x1e>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_lseek_r+0x1e>
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	20002c08 	.word	0x20002c08

0800a1f8 <memcpy>:
 800a1f8:	440a      	add	r2, r1
 800a1fa:	4291      	cmp	r1, r2
 800a1fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a200:	d100      	bne.n	800a204 <memcpy+0xc>
 800a202:	4770      	bx	lr
 800a204:	b510      	push	{r4, lr}
 800a206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a20a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a20e:	4291      	cmp	r1, r2
 800a210:	d1f9      	bne.n	800a206 <memcpy+0xe>
 800a212:	bd10      	pop	{r4, pc}

0800a214 <memmove>:
 800a214:	4288      	cmp	r0, r1
 800a216:	b510      	push	{r4, lr}
 800a218:	eb01 0402 	add.w	r4, r1, r2
 800a21c:	d902      	bls.n	800a224 <memmove+0x10>
 800a21e:	4284      	cmp	r4, r0
 800a220:	4623      	mov	r3, r4
 800a222:	d807      	bhi.n	800a234 <memmove+0x20>
 800a224:	1e43      	subs	r3, r0, #1
 800a226:	42a1      	cmp	r1, r4
 800a228:	d008      	beq.n	800a23c <memmove+0x28>
 800a22a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a22e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a232:	e7f8      	b.n	800a226 <memmove+0x12>
 800a234:	4402      	add	r2, r0
 800a236:	4601      	mov	r1, r0
 800a238:	428a      	cmp	r2, r1
 800a23a:	d100      	bne.n	800a23e <memmove+0x2a>
 800a23c:	bd10      	pop	{r4, pc}
 800a23e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a246:	e7f7      	b.n	800a238 <memmove+0x24>

0800a248 <_realloc_r>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	4607      	mov	r7, r0
 800a24c:	4614      	mov	r4, r2
 800a24e:	460e      	mov	r6, r1
 800a250:	b921      	cbnz	r1, 800a25c <_realloc_r+0x14>
 800a252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a256:	4611      	mov	r1, r2
 800a258:	f7ff b832 	b.w	80092c0 <_malloc_r>
 800a25c:	b922      	cbnz	r2, 800a268 <_realloc_r+0x20>
 800a25e:	f7fe ffdf 	bl	8009220 <_free_r>
 800a262:	4625      	mov	r5, r4
 800a264:	4628      	mov	r0, r5
 800a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a268:	f000 f826 	bl	800a2b8 <_malloc_usable_size_r>
 800a26c:	42a0      	cmp	r0, r4
 800a26e:	d20f      	bcs.n	800a290 <_realloc_r+0x48>
 800a270:	4621      	mov	r1, r4
 800a272:	4638      	mov	r0, r7
 800a274:	f7ff f824 	bl	80092c0 <_malloc_r>
 800a278:	4605      	mov	r5, r0
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d0f2      	beq.n	800a264 <_realloc_r+0x1c>
 800a27e:	4631      	mov	r1, r6
 800a280:	4622      	mov	r2, r4
 800a282:	f7ff ffb9 	bl	800a1f8 <memcpy>
 800a286:	4631      	mov	r1, r6
 800a288:	4638      	mov	r0, r7
 800a28a:	f7fe ffc9 	bl	8009220 <_free_r>
 800a28e:	e7e9      	b.n	800a264 <_realloc_r+0x1c>
 800a290:	4635      	mov	r5, r6
 800a292:	e7e7      	b.n	800a264 <_realloc_r+0x1c>

0800a294 <_read_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d07      	ldr	r5, [pc, #28]	; (800a2b4 <_read_r+0x20>)
 800a298:	4604      	mov	r4, r0
 800a29a:	4608      	mov	r0, r1
 800a29c:	4611      	mov	r1, r2
 800a29e:	2200      	movs	r2, #0
 800a2a0:	602a      	str	r2, [r5, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f7f8 f808 	bl	80022b8 <_read>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_read_r+0x1e>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_read_r+0x1e>
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	20002c08 	.word	0x20002c08

0800a2b8 <_malloc_usable_size_r>:
 800a2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2bc:	1f18      	subs	r0, r3, #4
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	bfbc      	itt	lt
 800a2c2:	580b      	ldrlt	r3, [r1, r0]
 800a2c4:	18c0      	addlt	r0, r0, r3
 800a2c6:	4770      	bx	lr

0800a2c8 <_init>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr

0800a2d4 <_fini>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	bf00      	nop
 800a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2da:	bc08      	pop	{r3}
 800a2dc:	469e      	mov	lr, r3
 800a2de:	4770      	bx	lr
