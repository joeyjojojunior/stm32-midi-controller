
BPMidiCtrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001239c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dec  08012540  08012540  00022540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801432c  0801432c  0003031c  2**0
                  CONTENTS
  4 .ARM          00000008  0801432c  0801432c  0002432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014334  08014334  0003031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014334  08014334  00024334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014338  08014338  00024338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  0801433c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035a8  2000031c  08014658  0003031c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038c4  08014658  000338c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ee2a  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000611f  00000000  00000000  0005f176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d30  00000000  00000000  00065298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020b9d  00000000  00000000  00066fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00028013  00000000  00000000  00087b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a6e73  00000000  00000000  000afb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001569eb  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001b48  00000000  00000000  00156a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c18  00000000  00000000  00158588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000031c 	.word	0x2000031c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012524 	.word	0x08012524

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000320 	.word	0x20000320
 80001dc:	08012524 	.word	0x08012524

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b9a4 	b.w	8000f4c <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f83c 	bl	8000c88 <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2lz>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	460d      	mov	r5, r1
 8000c26:	f7ff ff71 	bl	8000b0c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x1c>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b80a 	b.w	8000c4c <__aeabi_d2ulz>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3e:	f000 f805 	bl	8000c4c <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2ulz>:
 8000c4c:	b5d0      	push	{r4, r6, r7, lr}
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__aeabi_d2ulz+0x34>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	f7ff fce7 	bl	8000628 <__aeabi_dmul>
 8000c5a:	f7ff ffa7 	bl	8000bac <__aeabi_d2uiz>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fc68 	bl	8000534 <__aeabi_ui2d>
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <__aeabi_d2ulz+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f7ff fcde 	bl	8000628 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fb20 	bl	80002b8 <__aeabi_dsub>
 8000c78:	f7ff ff98 	bl	8000bac <__aeabi_d2uiz>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c80:	3df00000 	.word	0x3df00000
 8000c84:	41f00000 	.word	0x41f00000

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Knob_Map>:
void Knob_Free(Knob *k) {
    free(k->sub_labels);
}

// Maps values from (0, max_values-1) to (0, m)
uint8_t Knob_Map(Knob *k, uint8_t value, uint8_t m) {
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	70bb      	strb	r3, [r7, #2]
	return value * m / (k->max_values - 1);
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	78ba      	ldrb	r2, [r7, #2]
 8000f64:	fb02 f203 	mul.w	r2, r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7f1b      	ldrb	r3, [r3, #28]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f72:	b2db      	uxtb	r3, r3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ffc2 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <LED_On>:
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
void LED_On(uint8_t i) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIO_PORT_LEDS, LEDPins[i], GPIO_PIN_SET);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <LED_On+0x24>)
 8001026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <LED_On+0x28>)
 8001030:	f002 fb2e 	bl	8003690 <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000024 	.word	0x20000024
 8001040:	40020400 	.word	0x40020400

08001044 <LED_Off>:

void LED_Off(uint8_t i) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIO_PORT_LEDS, LEDPins[i], GPIO_PIN_RESET);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <LED_Off+0x24>)
 8001052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <LED_Off+0x28>)
 800105c:	f002 fb18 	bl	8003690 <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000024 	.word	0x20000024
 800106c:	40020400 	.word	0x40020400

08001070 <LED_AllOff>:

void LED_AllOff() {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e006      	b.n	800108a <LED_AllOff+0x1a>
        LED_Off(i);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffe0 	bl	8001044 <LED_Off>
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	3301      	adds	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b05      	cmp	r3, #5
 800108e:	d9f5      	bls.n	800107c <LED_AllOff+0xc>
    }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <isButtonDown>:

void LED_Toggle(uint8_t i) {
    HAL_GPIO_TogglePin(GPIO_PORT_LEDS, LEDPins[i]);
}

bool isButtonDown(uint8_t i) {
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
    bool ret = btnDown[i];
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a08      	ldr	r2, [pc, #32]	; (80010cc <isButtonDown+0x30>)
 80010aa:	5cd3      	ldrb	r3, [r2, r3]
 80010ac:	73fb      	strb	r3, [r7, #15]
    if (ret) btnDown[i] = false;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <isButtonDown+0x20>
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <isButtonDown+0x30>)
 80010b8:	2100      	movs	r1, #0
 80010ba:	54d1      	strb	r1, [r2, r3]
    return ret;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000338 	.word	0x20000338

080010d0 <Button_Ignore>:

void Button_Ignore(uint8_t i) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
    btnDown[i] = false;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <Button_Ignore+0x20>)
 80010de:	2100      	movs	r1, #0
 80010e0:	54d1      	strb	r1, [r2, r3]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000338 	.word	0x20000338

080010f4 <Print_State>:
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
        btnDown[i] = false;
    }
}

void Print_State(State *s) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    char t[20];
    size_t tl = sizeof(t) / sizeof(t[0]);
 80010fc:	2314      	movs	r3, #20
 80010fe:	61fb      	str	r3, [r7, #28]

    switch (*s) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d835      	bhi.n	8001174 <Print_State+0x80>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <Print_State+0x1c>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001125 	.word	0x08001125
 8001114:	08001135 	.word	0x08001135
 8001118:	08001145 	.word	0x08001145
 800111c:	08001155 	.word	0x08001155
 8001120:	08001165 	.word	0x08001165
    case NORMAL:
        snprintf(t, tl, "%s", "NORMAL");
 8001124:	f107 0008 	add.w	r0, r7, #8
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <Print_State+0xa8>)
 800112a:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <Print_State+0xac>)
 800112c:	69f9      	ldr	r1, [r7, #28]
 800112e:	f00e fa79 	bl	800f624 <sniprintf>
        break;
 8001132:	e01f      	b.n	8001174 <Print_State+0x80>
    case MENU:
        snprintf(t, tl, "%s", "MENU");
 8001134:	f107 0008 	add.w	r0, r7, #8
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <Print_State+0xb0>)
 800113a:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <Print_State+0xac>)
 800113c:	69f9      	ldr	r1, [r7, #28]
 800113e:	f00e fa71 	bl	800f624 <sniprintf>
        break;
 8001142:	e017      	b.n	8001174 <Print_State+0x80>
    case LOAD_PRESET:
        snprintf(t, tl, "%s", "LOAD_PRESET");
 8001144:	f107 0008 	add.w	r0, r7, #8
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <Print_State+0xb4>)
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <Print_State+0xac>)
 800114c:	69f9      	ldr	r1, [r7, #28]
 800114e:	f00e fa69 	bl	800f624 <sniprintf>
        break;
 8001152:	e00f      	b.n	8001174 <Print_State+0x80>
    case LOAD_PATCH:
        snprintf(t, tl, "%s", "LOAD_PATCH");
 8001154:	f107 0008 	add.w	r0, r7, #8
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <Print_State+0xb8>)
 800115a:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <Print_State+0xac>)
 800115c:	69f9      	ldr	r1, [r7, #28]
 800115e:	f00e fa61 	bl	800f624 <sniprintf>
        break;
 8001162:	e007      	b.n	8001174 <Print_State+0x80>
    case SAVE_PATCH:
        snprintf(t, tl, "%s", "SAVE_PATCH");
 8001164:	f107 0008 	add.w	r0, r7, #8
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <Print_State+0xbc>)
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <Print_State+0xac>)
 800116c:	69f9      	ldr	r1, [r7, #28]
 800116e:	f00e fa59 	bl	800f624 <sniprintf>
        break;
 8001172:	bf00      	nop
    }

    ssd1306_Fill(Black);
 8001174:	2000      	movs	r0, #0
 8001176:	f000 fdb9 	bl	8001cec <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 800117a:	2100      	movs	r1, #0
 800117c:	2000      	movs	r0, #0
 800117e:	f001 f863 	bl	8002248 <ssd1306_SetCursor>
    ssd1306_WriteString(t, Font_10x18, White);
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <Print_State+0xc0>)
 8001184:	f107 0008 	add.w	r0, r7, #8
 8001188:	2301      	movs	r3, #1
 800118a:	ca06      	ldmia	r2, {r1, r2}
 800118c:	f001 f836 	bl	80021fc <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001190:	f000 fdd0 	bl	8001d34 <ssd1306_UpdateScreen>
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	08012540 	.word	0x08012540
 80011a0:	08012548 	.word	0x08012548
 80011a4:	0801254c 	.word	0x0801254c
 80011a8:	08012554 	.word	0x08012554
 80011ac:	08012560 	.word	0x08012560
 80011b0:	0801256c 	.word	0x0801256c
 80011b4:	20000008 	.word	0x20000008

080011b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80011be:	f001 fcb1 	bl	8002b24 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80011c2:	f000 f8fd 	bl	80013c0 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80011c6:	f000 fa45 	bl	8001654 <MX_GPIO_Init>
    MX_ADC1_Init();
 80011ca:	f000 f97b 	bl	80014c4 <MX_ADC1_Init>
    MX_I2C1_Init();
 80011ce:	f000 f9cd 	bl	800156c <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 80011d2:	f00c fc37 	bl	800da44 <MX_USB_DEVICE_Init>
    MX_SDIO_SD_Init();
 80011d6:	f000 fa1d 	bl	8001614 <MX_SDIO_SD_Init>
    MX_RTC_Init();
 80011da:	f000 f9f5 	bl	80015c8 <MX_RTC_Init>
    MX_FATFS_Init();
 80011de:	f008 f9fb 	bl	80095d8 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    SystemCoreClockUpdate();
 80011e2:	f001 fbf5 	bl	80029d0 <SystemCoreClockUpdate>
    SysTick_Config(SystemCoreClock / 40);
 80011e6:	4b71      	ldr	r3, [pc, #452]	; (80013ac <main+0x1f4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a71      	ldr	r2, [pc, #452]	; (80013b0 <main+0x1f8>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff feee 	bl	8000fd4 <SysTick_Config>

    SD_LoadPreset("knobs1.json");
 80011f8:	486e      	ldr	r0, [pc, #440]	; (80013b4 <main+0x1fc>)
 80011fa:	f000 fbe9 	bl	80019d0 <SD_LoadPreset>

    // Init displays
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e010      	b.n	8001226 <main+0x6e>
        ssd1306_Init(&knobs[i]);
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	4a6b      	ldr	r2, [pc, #428]	; (80013b8 <main+0x200>)
 800120a:	4413      	add	r3, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fc63 	bl	8001ad8 <ssd1306_Init>
        ssd1306_WriteKnob(&knobs[i]);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	015b      	lsls	r3, r3, #5
 8001216:	4a68      	ldr	r2, [pc, #416]	; (80013b8 <main+0x200>)
 8001218:	4413      	add	r3, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fdba 	bl	8001d94 <ssd1306_WriteKnob>
    for (uint8_t i = 0; i < NUM_KNOBS; i++) {
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	3301      	adds	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	2b03      	cmp	r3, #3
 800122a:	d9eb      	bls.n	8001204 <main+0x4c>
    }

    State state = NORMAL;
 800122c:	2300      	movs	r3, #0
 800122e:	71fb      	strb	r3, [r7, #7]
    State *s = &state;
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	60bb      	str	r3, [r7, #8]

    uint8_t temp = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	73bb      	strb	r3, [r7, #14]
         if (temp == 3) {
         btnDown[BUTTON_MENU] = true;
         }
         */

        Print_State(s);
 8001238:	68b8      	ldr	r0, [r7, #8]
 800123a:	f7ff ff5b 	bl	80010f4 <Print_State>

        switch (*s) {
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b04      	cmp	r3, #4
 8001244:	f200 80ae 	bhi.w	80013a4 <main+0x1ec>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <main+0x98>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	08001265 	.word	0x08001265
 8001254:	080012b9 	.word	0x080012b9
 8001258:	0800131f 	.word	0x0800131f
 800125c:	0800134b 	.word	0x0800134b
 8001260:	08001377 	.word	0x08001377
        case NORMAL:
            for (uint8_t i = 0; i < NUM_BUTTONS - 1; i++) {
 8001264:	2300      	movs	r3, #0
 8001266:	737b      	strb	r3, [r7, #13]
 8001268:	e012      	b.n	8001290 <main+0xd8>
                if (isButtonDown(i)) {
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff15 	bl	800109c <isButtonDown>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <main+0xd2>
                    LED_Off(page);
 8001278:	4b50      	ldr	r3, [pc, #320]	; (80013bc <main+0x204>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fee1 	bl	8001044 <LED_Off>
                    page = i;
 8001282:	4a4e      	ldr	r2, [pc, #312]	; (80013bc <main+0x204>)
 8001284:	7b7b      	ldrb	r3, [r7, #13]
 8001286:	7013      	strb	r3, [r2, #0]
                    break;
 8001288:	e005      	b.n	8001296 <main+0xde>
            for (uint8_t i = 0; i < NUM_BUTTONS - 1; i++) {
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	3301      	adds	r3, #1
 800128e:	737b      	strb	r3, [r7, #13]
 8001290:	7b7b      	ldrb	r3, [r7, #13]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d9e9      	bls.n	800126a <main+0xb2>
                }
            }
            LED_AllOff();
 8001296:	f7ff feeb 	bl	8001070 <LED_AllOff>
            LED_On(page);
 800129a:	4b48      	ldr	r3, [pc, #288]	; (80013bc <main+0x204>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff feba 	bl	8001018 <LED_On>
            if (isButtonDown(BUTTON_MENU)) {
 80012a4:	2005      	movs	r0, #5
 80012a6:	f7ff fef9 	bl	800109c <isButtonDown>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d078      	beq.n	80013a2 <main+0x1ea>
                *s = MENU;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80012b6:	e074      	b.n	80013a2 <main+0x1ea>
        case MENU:
            LED_AllOff();
 80012b8:	f7ff feda 	bl	8001070 <LED_AllOff>
            LED_On(BUTTON_MENU);
 80012bc:	2005      	movs	r0, #5
 80012be:	f7ff feab 	bl	8001018 <LED_On>

            if (isButtonDown(BUTTON_MENU)) *s = NORMAL;
 80012c2:	2005      	movs	r0, #5
 80012c4:	f7ff feea 	bl	800109c <isButtonDown>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <main+0x11e>
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e01c      	b.n	8001310 <main+0x158>
            else if (isButtonDown(BUTTON_1)) *s = LOAD_PRESET;
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fee0 	bl	800109c <isButtonDown>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <main+0x132>
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2202      	movs	r2, #2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e012      	b.n	8001310 <main+0x158>
            else if (isButtonDown(BUTTON_2)) *s = LOAD_PATCH;
 80012ea:	2001      	movs	r0, #1
 80012ec:	f7ff fed6 	bl	800109c <isButtonDown>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <main+0x146>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2203      	movs	r2, #3
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e008      	b.n	8001310 <main+0x158>
            else if (isButtonDown(BUTTON_3)) *s = SAVE_PATCH;
 80012fe:	2002      	movs	r0, #2
 8001300:	f7ff fecc 	bl	800109c <isButtonDown>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <main+0x158>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2204      	movs	r2, #4
 800130e:	701a      	strb	r2, [r3, #0]

            Button_Ignore(BUTTON_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f7ff fedd 	bl	80010d0 <Button_Ignore>
            Button_Ignore(BUTTON_5);
 8001316:	2004      	movs	r0, #4
 8001318:	f7ff feda 	bl	80010d0 <Button_Ignore>
            break;
 800131c:	e042      	b.n	80013a4 <main+0x1ec>
        case LOAD_PRESET:
            LED_On(BUTTON_1);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fe7a 	bl	8001018 <LED_On>

            if (isButtonDown(BUTTON_MENU)) *s = MENU;
 8001324:	2005      	movs	r0, #5
 8001326:	f7ff feb9 	bl	800109c <isButtonDown>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <main+0x17e>
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]

            Button_Ignore(BUTTON_1);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff feca 	bl	80010d0 <Button_Ignore>
            Button_Ignore(BUTTON_2);
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff fec7 	bl	80010d0 <Button_Ignore>
            Button_Ignore(BUTTON_3);
 8001342:	2002      	movs	r0, #2
 8001344:	f7ff fec4 	bl	80010d0 <Button_Ignore>
            /*
             * Display presets
             * Wait for knob turn to select preset
             * Load selected preset from SD card
             */
            break;
 8001348:	e02c      	b.n	80013a4 <main+0x1ec>
        case LOAD_PATCH:
            LED_On(BUTTON_2);
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff fe64 	bl	8001018 <LED_On>

            if (isButtonDown(BUTTON_MENU)) *s = MENU;
 8001350:	2005      	movs	r0, #5
 8001352:	f7ff fea3 	bl	800109c <isButtonDown>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <main+0x1aa>
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]

            Button_Ignore(BUTTON_1);
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff feb4 	bl	80010d0 <Button_Ignore>
            Button_Ignore(BUTTON_2);
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff feb1 	bl	80010d0 <Button_Ignore>
            Button_Ignore(BUTTON_3);
 800136e:	2002      	movs	r0, #2
 8001370:	f7ff feae 	bl	80010d0 <Button_Ignore>
            /*
             * Display patches
             * Wait for knob turn to select patch
             * Load selected patch from SD card
             */
            break;
 8001374:	e016      	b.n	80013a4 <main+0x1ec>
        case SAVE_PATCH:
            LED_On(BUTTON_3);
 8001376:	2002      	movs	r0, #2
 8001378:	f7ff fe4e 	bl	8001018 <LED_On>

            if (isButtonDown(BUTTON_MENU)) *s = MENU;
 800137c:	2005      	movs	r0, #5
 800137e:	f7ff fe8d 	bl	800109c <isButtonDown>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <main+0x1d6>
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]

            Button_Ignore(BUTTON_1);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fe9e 	bl	80010d0 <Button_Ignore>
            Button_Ignore(BUTTON_2);
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fe9b 	bl	80010d0 <Button_Ignore>
            Button_Ignore(BUTTON_3);
 800139a:	2002      	movs	r0, #2
 800139c:	f7ff fe98 	bl	80010d0 <Button_Ignore>
            /*
             * Export values to patch file
             */
            break;
 80013a0:	e000      	b.n	80013a4 <main+0x1ec>
            break;
 80013a2:	bf00      	nop
        }

        temp++;
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73bb      	strb	r3, [r7, #14]
        Print_State(s);
 80013aa:	e745      	b.n	8001238 <main+0x80>
 80013ac:	20000030 	.word	0x20000030
 80013b0:	cccccccd 	.word	0xcccccccd
 80013b4:	08012578 	.word	0x08012578
 80013b8:	20002a48 	.word	0x20002a48
 80013bc:	2000033e 	.word	0x2000033e

080013c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b09a      	sub	sp, #104	; 0x68
 80013c4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013ca:	2230      	movs	r2, #48	; 0x30
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00e f85e 	bl	800f490 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <SystemClock_Config+0xfc>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a2f      	ldr	r2, [pc, #188]	; (80014bc <SystemClock_Config+0xfc>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <SystemClock_Config+0xfc>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <SystemClock_Config+0x100>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <SystemClock_Config+0x100>)
 800141c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <SystemClock_Config+0x100>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800142e:	2309      	movs	r3, #9
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001440:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001444:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 25;
 8001446:	2319      	movs	r3, #25
 8001448:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 192;
 800144a:	23c0      	movs	r3, #192	; 0xc0
 800144c:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144e:	2302      	movs	r3, #2
 8001450:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001452:	2304      	movs	r3, #4
 8001454:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001456:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800145a:	4618      	mov	r0, r3
 800145c:	f004 f890 	bl	8005580 <HAL_RCC_OscConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xaa>
            {
        Error_Handler();
 8001466:	f000 f981 	bl	800176c <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800146a:	230f      	movs	r3, #15
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	2103      	movs	r1, #3
 8001486:	4618      	mov	r0, r3
 8001488:	f004 faf2 	bl	8005a70 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xd6>
            {
        Error_Handler();
 8001492:	f000 f96b 	bl	800176c <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001496:	2302      	movs	r3, #2
 8001498:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800149a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 fc9f 	bl	8005de8 <HAL_RCCEx_PeriphCLKConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <SystemClock_Config+0xf4>
            {
        Error_Handler();
 80014b0:	f000 f95c 	bl	800176c <Error_Handler>
    }
}
 80014b4:	bf00      	nop
 80014b6:	3768      	adds	r7, #104	; 0x68
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <MX_ADC1_Init+0x9c>)
 80014d8:	4a22      	ldr	r2, [pc, #136]	; (8001564 <MX_ADC1_Init+0xa0>)
 80014da:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <MX_ADC1_Init+0x9c>)
 80014de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014e2:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <MX_ADC1_Init+0x9c>)
 80014e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ea:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ENABLE;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MX_ADC1_Init+0x9c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_ADC1_Init+0x9c>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_ADC1_Init+0x9c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_ADC1_Init+0x9c>)
 8001502:	2200      	movs	r2, #0
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_ADC1_Init+0x9c>)
 8001508:	4a17      	ldr	r2, [pc, #92]	; (8001568 <MX_ADC1_Init+0xa4>)
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_ADC1_Init+0x9c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_ADC1_Init+0x9c>)
 8001514:	2201      	movs	r2, #1
 8001516:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_ADC1_Init+0x9c>)
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_ADC1_Init+0x9c>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001526:	480e      	ldr	r0, [pc, #56]	; (8001560 <MX_ADC1_Init+0x9c>)
 8001528:	f001 fb92 	bl	8002c50 <HAL_ADC_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC1_Init+0x72>
            {
        Error_Handler();
 8001532:	f000 f91b 	bl	800176c <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_ADC1_Init+0x9c>)
 8001548:	f001 fbc6 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0x92>
            {
        Error_Handler();
 8001552:	f000 f90b 	bl	800176c <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20002a00 	.word	0x20002a00
 8001564:	40012000 	.word	0x40012000
 8001568:	0f000001 	.word	0x0f000001

0800156c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_I2C1_Init+0x50>)
 8001572:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <MX_I2C1_Init+0x54>)
 8001574:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 800000;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_I2C1_Init+0x50>)
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <MX_I2C1_Init+0x58>)
 800157a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_I2C1_Init+0x50>)
 800158a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_I2C1_Init+0x50>)
 80015aa:	f002 f88b 	bl	80036c4 <HAL_I2C_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_I2C1_Init+0x4c>
            {
        Error_Handler();
 80015b4:	f000 f8da 	bl	800176c <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20002970 	.word	0x20002970
 80015c0:	40005400 	.word	0x40005400
 80015c4:	000c3500 	.word	0x000c3500

080015c8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 1 */

    /* USER CODE END RTC_Init 1 */
    /** Initialize RTC Only
     */
    hrtc.Instance = RTC;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_RTC_Init+0x44>)
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <MX_RTC_Init+0x48>)
 80015d0:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_RTC_Init+0x44>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_RTC_Init+0x44>)
 80015da:	227f      	movs	r2, #127	; 0x7f
 80015dc:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_RTC_Init+0x44>)
 80015e0:	22ff      	movs	r2, #255	; 0xff
 80015e2:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_RTC_Init+0x44>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_RTC_Init+0x44>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_RTC_Init+0x44>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_RTC_Init+0x44>)
 80015f8:	f004 fce6 	bl	8005fc8 <HAL_RTC_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_RTC_Init+0x3e>
            {
        Error_Handler();
 8001602:	f000 f8b3 	bl	800176c <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */

    /* USER CODE END RTC_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20002ac8 	.word	0x20002ac8
 8001610:	40002800 	.word	0x40002800

08001614 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
    /* USER CODE END SDIO_Init 0 */

    /* USER CODE BEGIN SDIO_Init 1 */

    /* USER CODE END SDIO_Init 1 */
    hsd.Instance = SDIO;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_SDIO_SD_Init+0x38>)
 800161a:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <MX_SDIO_SD_Init+0x3c>)
 800161c:	601a      	str	r2, [r3, #0]
    hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_SDIO_SD_Init+0x38>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
    hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_SDIO_SD_Init+0x38>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
    hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_SDIO_SD_Init+0x38>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
    hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_SDIO_SD_Init+0x38>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
    hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <MX_SDIO_SD_Init+0x38>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
    hsd.Init.ClockDiv = 12;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <MX_SDIO_SD_Init+0x38>)
 800163e:	220c      	movs	r2, #12
 8001640:	619a      	str	r2, [r3, #24]
    /* USER CODE BEGIN SDIO_Init 2 */

    /* USER CODE END SDIO_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	20002ae8 	.word	0x20002ae8
 8001650:	40012c00 	.word	0x40012c00

08001654 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <MX_GPIO_Init+0x108>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a3a      	ldr	r2, [pc, #232]	; (800175c <MX_GPIO_Init+0x108>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <MX_GPIO_Init+0x108>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <MX_GPIO_Init+0x108>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a33      	ldr	r2, [pc, #204]	; (800175c <MX_GPIO_Init+0x108>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <MX_GPIO_Init+0x108>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <MX_GPIO_Init+0x108>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a2c      	ldr	r2, [pc, #176]	; (800175c <MX_GPIO_Init+0x108>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b2a      	ldr	r3, [pc, #168]	; (800175c <MX_GPIO_Init+0x108>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <MX_GPIO_Init+0x108>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a25      	ldr	r2, [pc, #148]	; (800175c <MX_GPIO_Init+0x108>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <MX_GPIO_Init+0x108>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 80016da:	2200      	movs	r2, #0
 80016dc:	f247 710f 	movw	r1, #30479	; 0x770f
 80016e0:	481f      	ldr	r0, [pc, #124]	; (8001760 <MX_GPIO_Init+0x10c>)
 80016e2:	f001 ffd5 	bl	8003690 <HAL_GPIO_WritePin>
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : Detect_SDIO_Pin */
    GPIO_InitStruct.Pin = Detect_SDIO_Pin;
 80016e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Detect_SDIO_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	481a      	ldr	r0, [pc, #104]	; (8001764 <MX_GPIO_Init+0x110>)
 80016fc:	f001 fe2c 	bl	8003358 <HAL_GPIO_Init>

    /*Configure GPIO pin : Button_6_Pin */
    GPIO_InitStruct.Pin = Button_6_Pin;
 8001700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170a:	2301      	movs	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Button_6_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4813      	ldr	r0, [pc, #76]	; (8001764 <MX_GPIO_Init+0x110>)
 8001716:	f001 fe1f 	bl	8003358 <HAL_GPIO_Init>

    /*Configure GPIO pins : Button_1_Pin Button_2_Pin Button_3_Pin Button_4_Pin
     Button_5_Pin */
    GPIO_InitStruct.Pin = Button_1_Pin | Button_2_Pin | Button_3_Pin | Button_4_Pin
 800171a:	f248 43b0 	movw	r3, #33968	; 0x84b0
 800171e:	617b      	str	r3, [r7, #20]
            | Button_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	480e      	ldr	r0, [pc, #56]	; (8001768 <MX_GPIO_Init+0x114>)
 8001730:	f001 fe12 	bl	8003358 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
     LED_5_Pin LED_6_Pin AMUX_S1_Pin AMUX_S0_Pin
     AMUX_S2_Pin AMUX_S3_Pin */
    GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001734:	f247 730f 	movw	r3, #30479	; 0x770f
 8001738:	617b      	str	r3, [r7, #20]
            | LED_5_Pin | LED_6_Pin | AMUX_S1_Pin | AMUX_S0_Pin
            | AMUX_S2_Pin | AMUX_S3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_GPIO_Init+0x10c>)
 800174e:	f001 fe03 	bl	8003358 <HAL_GPIO_Init>

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020000 	.word	0x40020000

0800176c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    __disable_irq();
    while (1) {
 8001774:	e7fe      	b.n	8001774 <Error_Handler+0x8>
	...

08001778 <Preset_Load>:
    snprintf(name_buffer, MAX_LABEL_CHARS+1, "%s", name->valuestring);

    cJSON_Delete(preset_json);
}

void Preset_Load(char *buffer) {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b093      	sub	sp, #76	; 0x4c
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    cJSON *preset_json = cJSON_Parse(buffer);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f00d fb29 	bl	800edd8 <cJSON_Parse>
 8001786:	6378      	str	r0, [r7, #52]	; 0x34
    if (preset_json == NULL) return;
 8001788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8100 	beq.w	8001990 <Preset_Load+0x218>

    const cJSON *knobs_json = cJSON_GetObjectItemCaseSensitive(preset_json, "knobs");
 8001790:	4982      	ldr	r1, [pc, #520]	; (800199c <Preset_Load+0x224>)
 8001792:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001794:	f00d fe25 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 8001798:	6338      	str	r0, [r7, #48]	; 0x30
    const cJSON *knob_json = NULL;
 800179a:	2300      	movs	r3, #0
 800179c:	647b      	str	r3, [r7, #68]	; 0x44

    uint8_t i = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 80017a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <Preset_Load+0x38>
 80017aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	e000      	b.n	80017b2 <Preset_Load+0x3a>
 80017b0:	2300      	movs	r3, #0
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
 80017b4:	e0e4      	b.n	8001980 <Preset_Load+0x208>
    {
        if (i >= NUM_KNOBS) return;
 80017b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	f200 80ea 	bhi.w	8001994 <Preset_Load+0x21c>

        const cJSON *row = cJSON_GetObjectItemCaseSensitive(knob_json, "row");
 80017c0:	4977      	ldr	r1, [pc, #476]	; (80019a0 <Preset_Load+0x228>)
 80017c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017c4:	f00d fe0d 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 80017c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        const cJSON *col = cJSON_GetObjectItemCaseSensitive(knob_json, "col");
 80017ca:	4976      	ldr	r1, [pc, #472]	; (80019a4 <Preset_Load+0x22c>)
 80017cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017ce:	f00d fe08 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 80017d2:	62b8      	str	r0, [r7, #40]	; 0x28
        const cJSON *label = cJSON_GetObjectItemCaseSensitive(knob_json, "label");
 80017d4:	4974      	ldr	r1, [pc, #464]	; (80019a8 <Preset_Load+0x230>)
 80017d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017d8:	f00d fe03 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 80017dc:	6278      	str	r0, [r7, #36]	; 0x24
        const cJSON *channel = cJSON_GetObjectItemCaseSensitive(knob_json, "channel");
 80017de:	4973      	ldr	r1, [pc, #460]	; (80019ac <Preset_Load+0x234>)
 80017e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017e2:	f00d fdfe 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 80017e6:	6238      	str	r0, [r7, #32]
        const cJSON *cc = cJSON_GetObjectItemCaseSensitive(knob_json, "cc");
 80017e8:	4971      	ldr	r1, [pc, #452]	; (80019b0 <Preset_Load+0x238>)
 80017ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017ec:	f00d fdf9 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 80017f0:	61f8      	str	r0, [r7, #28]
        const cJSON *init_value = cJSON_GetObjectItemCaseSensitive(knob_json, "init_value");
 80017f2:	4970      	ldr	r1, [pc, #448]	; (80019b4 <Preset_Load+0x23c>)
 80017f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017f6:	f00d fdf4 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 80017fa:	61b8      	str	r0, [r7, #24]
        const cJSON *max_values = cJSON_GetObjectItemCaseSensitive(knob_json, "max_values");
 80017fc:	496e      	ldr	r1, [pc, #440]	; (80019b8 <Preset_Load+0x240>)
 80017fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001800:	f00d fdef 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 8001804:	6178      	str	r0, [r7, #20]
        const cJSON *max_range = cJSON_GetObjectItemCaseSensitive(knob_json, "max_range");
 8001806:	496d      	ldr	r1, [pc, #436]	; (80019bc <Preset_Load+0x244>)
 8001808:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800180a:	f00d fdea 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 800180e:	6138      	str	r0, [r7, #16]
        const cJSON *isLocked = cJSON_GetObjectItemCaseSensitive(knob_json, "isLocked");
 8001810:	496b      	ldr	r1, [pc, #428]	; (80019c0 <Preset_Load+0x248>)
 8001812:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001814:	f00d fde5 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 8001818:	60f8      	str	r0, [r7, #12]

        knobs[i].row = row->valueint;
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001822:	b2d1      	uxtb	r1, r2
 8001824:	4a67      	ldr	r2, [pc, #412]	; (80019c4 <Preset_Load+0x24c>)
 8001826:	015b      	lsls	r3, r3, #5
 8001828:	4413      	add	r3, r2
 800182a:	460a      	mov	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
        knobs[i].col = col->valueint;
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001836:	b2d1      	uxtb	r1, r2
 8001838:	4a62      	ldr	r2, [pc, #392]	; (80019c4 <Preset_Load+0x24c>)
 800183a:	015b      	lsls	r3, r3, #5
 800183c:	4413      	add	r3, r2
 800183e:	3301      	adds	r3, #1
 8001840:	460a      	mov	r2, r1
 8001842:	701a      	strb	r2, [r3, #0]
        snprintf(knobs[i].label, sizeof(knobs[i].label) / sizeof(knobs[i].label[0]), "%s", label->valuestring);
 8001844:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001848:	015b      	lsls	r3, r3, #5
 800184a:	4a5e      	ldr	r2, [pc, #376]	; (80019c4 <Preset_Load+0x24c>)
 800184c:	4413      	add	r3, r2
 800184e:	1c98      	adds	r0, r3, #2
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4a5c      	ldr	r2, [pc, #368]	; (80019c8 <Preset_Load+0x250>)
 8001856:	210f      	movs	r1, #15
 8001858:	f00d fee4 	bl	800f624 <sniprintf>
        knobs[i].channel = channel->valueint;
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001864:	b2d1      	uxtb	r1, r2
 8001866:	4a57      	ldr	r2, [pc, #348]	; (80019c4 <Preset_Load+0x24c>)
 8001868:	015b      	lsls	r3, r3, #5
 800186a:	4413      	add	r3, r2
 800186c:	3318      	adds	r3, #24
 800186e:	460a      	mov	r2, r1
 8001870:	701a      	strb	r2, [r3, #0]
        knobs[i].cc = cc->valueint;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800187a:	b2d1      	uxtb	r1, r2
 800187c:	4a51      	ldr	r2, [pc, #324]	; (80019c4 <Preset_Load+0x24c>)
 800187e:	015b      	lsls	r3, r3, #5
 8001880:	4413      	add	r3, r2
 8001882:	3319      	adds	r3, #25
 8001884:	460a      	mov	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
        knobs[i].init_value = init_value->valueint;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001890:	b2d1      	uxtb	r1, r2
 8001892:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <Preset_Load+0x24c>)
 8001894:	015b      	lsls	r3, r3, #5
 8001896:	4413      	add	r3, r2
 8001898:	331a      	adds	r3, #26
 800189a:	460a      	mov	r2, r1
 800189c:	701a      	strb	r2, [r3, #0]
        knobs[i].max_values = max_values->valueint;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018a6:	b2d1      	uxtb	r1, r2
 80018a8:	4a46      	ldr	r2, [pc, #280]	; (80019c4 <Preset_Load+0x24c>)
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	4413      	add	r3, r2
 80018ae:	331c      	adds	r3, #28
 80018b0:	460a      	mov	r2, r1
 80018b2:	701a      	strb	r2, [r3, #0]
        knobs[i].max_range = max_range->valueint;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018bc:	b2d1      	uxtb	r1, r2
 80018be:	4a41      	ldr	r2, [pc, #260]	; (80019c4 <Preset_Load+0x24c>)
 80018c0:	015b      	lsls	r3, r3, #5
 80018c2:	4413      	add	r3, r2
 80018c4:	331d      	adds	r3, #29
 80018c6:	460a      	mov	r2, r1
 80018c8:	701a      	strb	r2, [r3, #0]
        knobs[i].isLocked = isLocked->valueint;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018d2:	b2d1      	uxtb	r1, r2
 80018d4:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <Preset_Load+0x24c>)
 80018d6:	015b      	lsls	r3, r3, #5
 80018d8:	4413      	add	r3, r2
 80018da:	331e      	adds	r3, #30
 80018dc:	460a      	mov	r2, r1
 80018de:	701a      	strb	r2, [r3, #0]

        const cJSON *sub_labels = cJSON_GetObjectItemCaseSensitive(knob_json, "sub_labels");
 80018e0:	493a      	ldr	r1, [pc, #232]	; (80019cc <Preset_Load+0x254>)
 80018e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80018e4:	f00d fd7d 	bl	800f3e2 <cJSON_GetObjectItemCaseSensitive>
 80018e8:	60b8      	str	r0, [r7, #8]
        const cJSON *sub_label = NULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        knobs[i].sub_labels = malloc(sizeof(*knobs[i].sub_labels) * (knobs[i].max_values));
 80018ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018f2:	4a34      	ldr	r2, [pc, #208]	; (80019c4 <Preset_Load+0x24c>)
 80018f4:	015b      	lsls	r3, r3, #5
 80018f6:	4413      	add	r3, r2
 80018f8:	331c      	adds	r3, #28
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4613      	mov	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
 8001908:	4618      	mov	r0, r3
 800190a:	f00d fda3 	bl	800f454 <malloc>
 800190e:	4603      	mov	r3, r0
 8001910:	4619      	mov	r1, r3
 8001912:	4a2c      	ldr	r2, [pc, #176]	; (80019c4 <Preset_Load+0x24c>)
 8001914:	0163      	lsls	r3, r4, #5
 8001916:	4413      	add	r3, r2
 8001918:	3314      	adds	r3, #20
 800191a:	6019      	str	r1, [r3, #0]

        uint8_t label_index = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <Preset_Load+0x1b6>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	e000      	b.n	8001930 <Preset_Load+0x1b8>
 800192e:	2300      	movs	r3, #0
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001932:	e01a      	b.n	800196a <Preset_Load+0x1f2>
        {
            snprintf(knobs[i].sub_labels[label_index], sizeof(knobs[i].sub_labels[0]) / sizeof(knobs[i].sub_labels[0][0]), "%s", sub_label->valuestring);
 8001934:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001938:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <Preset_Load+0x24c>)
 800193a:	015b      	lsls	r3, r3, #5
 800193c:	4413      	add	r3, r2
 800193e:	3314      	adds	r3, #20
 8001940:	6819      	ldr	r1, [r3, #0]
 8001942:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001946:	4613      	mov	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	18c8      	adds	r0, r1, r3
 800194e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <Preset_Load+0x250>)
 8001954:	210f      	movs	r1, #15
 8001956:	f00d fe65 	bl	800f624 <sniprintf>
            label_index++;
 800195a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800195e:	3301      	adds	r3, #1
 8001960:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        cJSON_ArrayForEach(sub_label, sub_labels)
 8001964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800196a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e1      	bne.n	8001934 <Preset_Load+0x1bc>
        }
        i++;
 8001970:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001974:	3301      	adds	r3, #1
 8001976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    cJSON_ArrayForEach(knob_json, knobs_json)
 800197a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	647b      	str	r3, [r7, #68]	; 0x44
 8001980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001982:	2b00      	cmp	r3, #0
 8001984:	f47f af17 	bne.w	80017b6 <Preset_Load+0x3e>
    }

    cJSON_Delete(preset_json);
 8001988:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800198a:	f00c fd29 	bl	800e3e0 <cJSON_Delete>
 800198e:	e002      	b.n	8001996 <Preset_Load+0x21e>
    if (preset_json == NULL) return;
 8001990:	bf00      	nop
 8001992:	e000      	b.n	8001996 <Preset_Load+0x21e>
        if (i >= NUM_KNOBS) return;
 8001994:	bf00      	nop
}
 8001996:	374c      	adds	r7, #76	; 0x4c
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	08012598 	.word	0x08012598
 80019a0:	080125a0 	.word	0x080125a0
 80019a4:	080125a4 	.word	0x080125a4
 80019a8:	080125a8 	.word	0x080125a8
 80019ac:	080125b0 	.word	0x080125b0
 80019b0:	080125b8 	.word	0x080125b8
 80019b4:	080125bc 	.word	0x080125bc
 80019b8:	080125c8 	.word	0x080125c8
 80019bc:	080125d4 	.word	0x080125d4
 80019c0:	080125e0 	.word	0x080125e0
 80019c4:	20002a48 	.word	0x20002a48
 80019c8:	08012594 	.word	0x08012594
 80019cc:	080125ec 	.word	0x080125ec

080019d0 <SD_LoadPreset>:
    }

    retSD = f_mount(NULL, "", 0);
}

void SD_LoadPreset(char *filename) {
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	466b      	mov	r3, sp
 80019da:	461d      	mov	r5, r3
    retSD = f_mount(&SDFatFS, "", 1);
 80019dc:	2201      	movs	r2, #1
 80019de:	492e      	ldr	r1, [pc, #184]	; (8001a98 <SD_LoadPreset+0xc8>)
 80019e0:	482e      	ldr	r0, [pc, #184]	; (8001a9c <SD_LoadPreset+0xcc>)
 80019e2:	f00b fb21 	bl	800d028 <f_mount>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <SD_LoadPreset+0xd0>)
 80019ec:	701a      	strb	r2, [r3, #0]
    retSD = f_open(&SDFile, filename, FA_READ);
 80019ee:	2201      	movs	r2, #1
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	482c      	ldr	r0, [pc, #176]	; (8001aa4 <SD_LoadPreset+0xd4>)
 80019f4:	f00b fb5e 	bl	800d0b4 <f_open>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <SD_LoadPreset+0xd0>)
 80019fe:	701a      	strb	r2, [r3, #0]

    char presetBuffer[f_size(&SDFile) + 1];
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <SD_LoadPreset+0xd4>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	1c5c      	adds	r4, r3, #1
 8001a06:	4623      	mov	r3, r4
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	00cb      	lsls	r3, r1, #3
 8001a1c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a20:	00c2      	lsls	r2, r0, #3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	00cb      	lsls	r3, r1, #3
 8001a32:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a36:	00c2      	lsls	r2, r0, #3
 8001a38:	1de3      	adds	r3, r4, #7
 8001a3a:	08db      	lsrs	r3, r3, #3
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	ebad 0d03 	sub.w	sp, sp, r3
 8001a42:	466b      	mov	r3, sp
 8001a44:	3300      	adds	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
    unsigned int bytesRead;
    retSD = f_read(&SDFile, presetBuffer, sizeof(presetBuffer) - 1, &bytesRead);
 8001a48:	6939      	ldr	r1, [r7, #16]
 8001a4a:	1e62      	subs	r2, r4, #1
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <SD_LoadPreset+0xd4>)
 8001a52:	f00b fced 	bl	800d430 <f_read>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <SD_LoadPreset+0xd0>)
 8001a5c:	701a      	strb	r2, [r3, #0]
    presetBuffer[bytesRead] = '\0';
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	2100      	movs	r1, #0
 8001a64:	54d1      	strb	r1, [r2, r3]

    Preset_Load(presetBuffer);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fe85 	bl	8001778 <Preset_Load>

    retSD = f_close(&SDFile);
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <SD_LoadPreset+0xd4>)
 8001a70:	f00b fe9b 	bl	800d7aa <f_close>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <SD_LoadPreset+0xd0>)
 8001a7a:	701a      	strb	r2, [r3, #0]
    retSD = f_mount(NULL, "", 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4906      	ldr	r1, [pc, #24]	; (8001a98 <SD_LoadPreset+0xc8>)
 8001a80:	2000      	movs	r0, #0
 8001a82:	f00b fad1 	bl	800d028 <f_mount>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <SD_LoadPreset+0xd0>)
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	46ad      	mov	sp, r5

}
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bdb0      	pop	{r4, r5, r7, pc}
 8001a98:	080125f8 	.word	0x080125f8
 8001a9c:	20002da8 	.word	0x20002da8
 8001aa0:	20002b70 	.word	0x20002b70
 8001aa4:	20002b78 	.word	0x20002b78

08001aa8 <ssd1306_WriteCommand>:

// Screen object
static SSD1306_t SSD1306;

//  Send a byte to the command register
static uint8_t ssd1306_WriteCommand(uint8_t command) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af04      	add	r7, sp, #16
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	1dfb      	adds	r3, r7, #7
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2178      	movs	r1, #120	; 0x78
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <ssd1306_WriteCommand+0x2c>)
 8001ac6:	f002 f83f 	bl	8003b48 <HAL_I2C_Mem_Write>
 8001aca:	4603      	mov	r3, r0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20002970 	.word	0x20002970

08001ad8 <ssd1306_Init>:

//  Initialize the oled screen
uint8_t ssd1306_Init(Knob *k) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    int status = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]

    // Select the screen to init
    ssd1306_Select(k);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fbf1 	bl	80022cc <ssd1306_Select>

    // Init LCD
    status += ssd1306_WriteCommand(0xAE);   // Display off
 8001aea:	20ae      	movs	r0, #174	; 0xae
 8001aec:	f7ff ffdc 	bl	8001aa8 <ssd1306_WriteCommand>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // Set Memory Addressing Mode
 8001afa:	2020      	movs	r0, #32
 8001afc:	f7ff ffd4 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b0a:	2010      	movs	r0, #16
 8001b0c:	f7ff ffcc 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8001b1a:	20b0      	movs	r0, #176	; 0xb0
 8001b1c:	f7ff ffc4 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xC8);   // Set COM Output Scan Direction
 8001b2a:	20c8      	movs	r0, #200	; 0xc8
 8001b2c:	f7ff ffbc 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // Set low column address
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff ffb4 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x10);   // Set high column address
 8001b4a:	2010      	movs	r0, #16
 8001b4c:	f7ff ffac 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);   // Set start line address
 8001b5a:	2040      	movs	r0, #64	; 0x40
 8001b5c:	f7ff ffa4 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x81);   // set contrast control register
 8001b6a:	2081      	movs	r0, #129	; 0x81
 8001b6c:	f7ff ff9c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x40);
 8001b7a:	2040      	movs	r0, #64	; 0x40
 8001b7c:	f7ff ff94 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA1);   // Set segment re-map 0 to 127
 8001b8a:	20a1      	movs	r0, #161	; 0xa1
 8001b8c:	f7ff ff8c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xA6);   // Set normal display
 8001b9a:	20a6      	movs	r0, #166	; 0xa6
 8001b9c:	f7ff ff84 	bl	8001aa8 <ssd1306_WriteCommand>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA8);   // Set multiplex ratio(1 to 64)
 8001baa:	20a8      	movs	r0, #168	; 0xa8
 8001bac:	f7ff ff7c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(SSD1306_HEIGHT - 1);
 8001bba:	203f      	movs	r0, #63	; 0x3f
 8001bbc:	f7ff ff74 	bl	8001aa8 <ssd1306_WriteCommand>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001bca:	20a4      	movs	r0, #164	; 0xa4
 8001bcc:	f7ff ff6c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD3);   // Set display offset
 8001bda:	20d3      	movs	r0, #211	; 0xd3
 8001bdc:	f7ff ff64 	bl	8001aa8 <ssd1306_WriteCommand>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x00);   // No offset
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff ff5c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD5);   // Set display clock divide ratio/oscillator frequency
 8001bfa:	20d5      	movs	r0, #213	; 0xd5
 8001bfc:	f7ff ff54 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xF0);   // Set divide ratio
 8001c0a:	20f0      	movs	r0, #240	; 0xf0
 8001c0c:	f7ff ff4c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xD9);   // Set pre-charge period
 8001c1a:	20d9      	movs	r0, #217	; 0xd9
 8001c1c:	f7ff ff44 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x22);
 8001c2a:	2022      	movs	r0, #34	; 0x22
 8001c2c:	f7ff ff3c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(0xDA);   // Set com pins hardware configuration
 8001c3a:	20da      	movs	r0, #218	; 0xda
 8001c3c:	f7ff ff34 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(0x12);   // Do not use COM left/right remap
 8001c4a:	2012      	movs	r0, #18
 8001c4c:	f7ff ff2c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
#endif

    status += ssd1306_WriteCommand(0xDB);   // Set vcomh
 8001c5a:	20db      	movs	r0, #219	; 0xdb
 8001c5c:	f7ff ff24 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x20);   // 0x20,0.77xVcc
 8001c6a:	2020      	movs	r0, #32
 8001c6c:	f7ff ff1c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x8D);   // Set DC-DC enable
 8001c7a:	208d      	movs	r0, #141	; 0x8d
 8001c7c:	f7ff ff14 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0x14);   //
 8001c8a:	2014      	movs	r0, #20
 8001c8c:	f7ff ff0c 	bl	8001aa8 <ssd1306_WriteCommand>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(0xAF);   // Turn on SSD1306 panel
 8001c9a:	20af      	movs	r0, #175	; 0xaf
 8001c9c:	f7ff ff04 	bl	8001aa8 <ssd1306_WriteCommand>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <ssd1306_Init+0x1dc>
        return 1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e012      	b.n	8001cda <ssd1306_Init+0x202>
    }

    ssd1306_Fill(Black);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 f819 	bl	8001cec <ssd1306_Fill>
    ssd1306_AdjustBrightness(0x63);
 8001cba:	2063      	movs	r0, #99	; 0x63
 8001cbc:	f000 fadc 	bl	8002278 <ssd1306_AdjustBrightness>
    ssd1306_UpdateScreen(&hi2c1);
 8001cc0:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <ssd1306_Init+0x20c>)
 8001cc2:	f000 f837 	bl	8001d34 <ssd1306_UpdateScreen>

    SSD1306.CurrentX = 0;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <ssd1306_Init+0x210>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <ssd1306_Init+0x210>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <ssd1306_Init+0x210>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	715a      	strb	r2, [r3, #5]

    return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20002970 	.word	0x20002970
 8001ce8:	20000740 	.word	0x20000740

08001cec <ssd1306_Fill>:

//  Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e00d      	b.n	8001d18 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <ssd1306_Fill+0x1a>
 8001d02:	2100      	movs	r1, #0
 8001d04:	e000      	b.n	8001d08 <ssd1306_Fill+0x1c>
 8001d06:	21ff      	movs	r1, #255	; 0xff
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <ssd1306_Fill+0x44>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	460a      	mov	r2, r1
 8001d10:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1e:	d3ed      	bcc.n	8001cfc <ssd1306_Fill+0x10>
    }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000340 	.word	0x20000340

08001d34 <ssd1306_UpdateScreen>:
        ssd1306_UpdateScreen();
    }
}

//  Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen() {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af04      	add	r7, sp, #16
    for (uint8_t i = 0; i < 8; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	e01d      	b.n	8001d7c <ssd1306_UpdateScreen+0x48>
        ssd1306_WriteCommand(0xB0 + i);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	3b50      	subs	r3, #80	; 0x50
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff feae 	bl	8001aa8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff feab 	bl	8001aa8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001d52:	2010      	movs	r0, #16
 8001d54:	f7ff fea8 	bl	8001aa8 <ssd1306_WriteCommand>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	01db      	lsls	r3, r3, #7
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <ssd1306_UpdateScreen+0x58>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	2264      	movs	r2, #100	; 0x64
 8001d62:	9202      	str	r2, [sp, #8]
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	9201      	str	r2, [sp, #4]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	2240      	movs	r2, #64	; 0x40
 8001d6e:	2178      	movs	r1, #120	; 0x78
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <ssd1306_UpdateScreen+0x5c>)
 8001d72:	f001 fee9 	bl	8003b48 <HAL_I2C_Mem_Write>
    for (uint8_t i = 0; i < 8; i++) {
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	d9de      	bls.n	8001d40 <ssd1306_UpdateScreen+0xc>
    }
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000340 	.word	0x20000340
 8001d90:	20002970 	.word	0x20002970

08001d94 <ssd1306_WriteKnob>:
        ssd1306_WriteKnob(&knobs[i]);
    }
}

// Write a knob's values to the screen
void ssd1306_WriteKnob(Knob *k) {
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b08d      	sub	sp, #52	; 0x34
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
    ssd1306_Select(k);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fa95 	bl	80022cc <ssd1306_Select>
    ssd1306_Fill(Black);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7ff ffa2 	bl	8001cec <ssd1306_Fill>

    // Draw top line
    char channel_string[3];
    char cc_string[4];
    char init_indicator_string[16] = "       @       ";
 8001da8:	4b9d      	ldr	r3, [pc, #628]	; (8002020 <ssd1306_WriteKnob+0x28c>)
 8001daa:	f107 0410 	add.w	r4, r7, #16
 8001dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char value_string[4];

    snprintf(channel_string, sizeof(channel_string) / sizeof(channel_string[0]), "%.2d", (int) k->channel);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7e1b      	ldrb	r3, [r3, #24]
 8001db8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001dbc:	4a99      	ldr	r2, [pc, #612]	; (8002024 <ssd1306_WriteKnob+0x290>)
 8001dbe:	2103      	movs	r1, #3
 8001dc0:	f00d fc30 	bl	800f624 <sniprintf>
    snprintf(cc_string, sizeof(cc_string) / sizeof(cc_string[0]), "%.3d", (int) k->cc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7e5b      	ldrb	r3, [r3, #25]
 8001dc8:	f107 0020 	add.w	r0, r7, #32
 8001dcc:	4a96      	ldr	r2, [pc, #600]	; (8002028 <ssd1306_WriteKnob+0x294>)
 8001dce:	2104      	movs	r1, #4
 8001dd0:	f00d fc28 	bl	800f624 <sniprintf>
    snprintf(init_indicator_string, strlen(init_indicator_string), "%s", update_init_indicator(k));
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fa0b 	bl	80001f4 <strlen>
 8001dde:	4604      	mov	r4, r0
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 faa9 	bl	8002338 <update_init_indicator>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f107 0010 	add.w	r0, r7, #16
 8001dec:	4a8f      	ldr	r2, [pc, #572]	; (800202c <ssd1306_WriteKnob+0x298>)
 8001dee:	4621      	mov	r1, r4
 8001df0:	f00d fc18 	bl	800f624 <sniprintf>
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
            (int) Knob_Map(k, k->value, k->max_range));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7ed9      	ldrb	r1, [r3, #27]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7f5b      	ldrb	r3, [r3, #29]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff f8a6 	bl	8000f50 <Knob_Map>
 8001e04:	4603      	mov	r3, r0
    snprintf(value_string, sizeof(value_string) / sizeof(value_string[0]), "%.3d",
 8001e06:	f107 000c 	add.w	r0, r7, #12
 8001e0a:	4a87      	ldr	r2, [pc, #540]	; (8002028 <ssd1306_WriteKnob+0x294>)
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	f00d fc09 	bl	800f624 <sniprintf>

    ssd1306_SetCursor(0, 0);
 8001e12:	2100      	movs	r1, #0
 8001e14:	2000      	movs	r0, #0
 8001e16:	f000 fa17 	bl	8002248 <ssd1306_SetCursor>
    ssd1306_WriteString(channel_string, NumFont_5x7, White);
 8001e1a:	4a85      	ldr	r2, [pc, #532]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001e1c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001e20:	2301      	movs	r3, #1
 8001e22:	ca06      	ldmia	r2, {r1, r2}
 8001e24:	f000 f9ea 	bl	80021fc <ssd1306_WriteString>

    ssd1306_SetCursor(0, NumFont_5x7.FontHeight + 1);
 8001e28:	4b81      	ldr	r3, [pc, #516]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4619      	mov	r1, r3
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 fa08 	bl	8002248 <ssd1306_SetCursor>
    ssd1306_WriteString(cc_string, NumFont_5x7, White);
 8001e38:	4a7d      	ldr	r2, [pc, #500]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001e3a:	f107 0020 	add.w	r0, r7, #32
 8001e3e:	2301      	movs	r3, #1
 8001e40:	ca06      	ldmia	r2, {r1, r2}
 8001e42:	f000 f9db 	bl	80021fc <ssd1306_WriteString>

    ssd1306_SetCursor((SSD1306_WIDTH - strlen(init_indicator_string) * NumFont_5x7.FontWidth) / 2, (NumFont_5x7.FontHeight + 1) / 2);
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe f9d2 	bl	80001f4 <strlen>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4a77      	ldr	r2, [pc, #476]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e5e:	085b      	lsrs	r3, r3, #1
 8001e60:	b2d8      	uxtb	r0, r3
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	3301      	adds	r3, #1
 8001e68:	0fda      	lsrs	r2, r3, #31
 8001e6a:	4413      	add	r3, r2
 8001e6c:	105b      	asrs	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	f000 f9e9 	bl	8002248 <ssd1306_SetCursor>
    ssd1306_WriteString(init_indicator_string, NumFont_5x7, White);
 8001e76:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001e78:	f107 0010 	add.w	r0, r7, #16
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	ca06      	ldmia	r2, {r1, r2}
 8001e80:	f000 f9bc 	bl	80021fc <ssd1306_WriteString>

    ssd1306_SetCursor(SSD1306_WIDTH - sizeof(value_string) / sizeof(value_string[0]) * NumFont_5x7.FontWidth - 1, (NumFont_5x7.FontHeight + 1) / 2);
 8001e84:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f1c3 0320 	rsb	r3, r3, #32
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b2d8      	uxtb	r0, r3
 8001e96:	4b66      	ldr	r3, [pc, #408]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001e98:	785b      	ldrb	r3, [r3, #1]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	0fda      	lsrs	r2, r3, #31
 8001e9e:	4413      	add	r3, r2
 8001ea0:	105b      	asrs	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f000 f9cf 	bl	8002248 <ssd1306_SetCursor>
    ssd1306_WriteString(value_string, NumFont_5x7, White);
 8001eaa:	4a61      	ldr	r2, [pc, #388]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001eac:	f107 000c 	add.w	r0, r7, #12
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	ca06      	ldmia	r2, {r1, r2}
 8001eb4:	f000 f9a2 	bl	80021fc <ssd1306_WriteString>

    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001ebe:	e013      	b.n	8001ee8 <ssd1306_WriteKnob+0x154>
        ssd1306_DrawPixel(i, SSD1306.CurrentY + NumFont_5x7.FontHeight + 4, White);
 8001ec0:	4b5c      	ldr	r3, [pc, #368]	; (8002034 <ssd1306_WriteKnob+0x2a0>)
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001ec8:	785b      	ldrb	r3, [r3, #1]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	3304      	adds	r3, #4
 8001ed0:	b2d9      	uxtb	r1, r3
 8001ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f8af 	bl	800203c <ssd1306_DrawPixel>
    for (uint8_t i = 0; i < SSD1306_WIDTH; i++) {
 8001ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001ee8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	dae7      	bge.n	8001ec0 <ssd1306_WriteKnob+0x12c>
    }

    uint8_t len_label = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t x = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t y = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    uint8_t y_remaining = SSD1306_HEIGHT - 2 * NumFont_5x7.FontHeight;
 8001f02:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <ssd1306_WriteKnob+0x29c>)
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	f1c3 0320 	rsb	r3, r3, #32
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    // Draw main label
    len_label = strlen(k->label);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3302      	adds	r3, #2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe f96c 	bl	80001f4 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001f22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f26:	4a44      	ldr	r2, [pc, #272]	; (8002038 <ssd1306_WriteKnob+0x2a4>)
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001f32:	0fda      	lsrs	r2, r3, #31
 8001f34:	4413      	add	r3, r2
 8001f36:	105b      	asrs	r3, r3, #1
 8001f38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = (float) y_remaining / 3 + (Font_10x18.FontHeight / 4);
 8001f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f48:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001f4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f50:	4b39      	ldr	r3, [pc, #228]	; (8002038 <ssd1306_WriteKnob+0x2a4>)
 8001f52:	785b      	ldrb	r3, [r3, #1]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f68:	edc7 7a00 	vstr	s15, [r7]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 8001f72:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001f76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 f963 	bl	8002248 <ssd1306_SetCursor>
    ssd1306_WriteString(k->label, Font_10x18, White);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	1c98      	adds	r0, r3, #2
 8001f86:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <ssd1306_WriteKnob+0x2a4>)
 8001f88:	2301      	movs	r3, #1
 8001f8a:	ca06      	ldmia	r2, {r1, r2}
 8001f8c:	f000 f936 	bl	80021fc <ssd1306_WriteString>

    // If the max number of values is restricted, we want to use
    // sub labels for each choice (e.g. osc. wave selection)
    uint8_t sl_index = (k->max_values < MIDI_MAX + 1) ? k->value : 0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7f1b      	ldrb	r3, [r3, #28]
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db02      	blt.n	8001fa0 <ssd1306_WriteKnob+0x20c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7edb      	ldrb	r3, [r3, #27]
 8001f9e:	e000      	b.n	8001fa2 <ssd1306_WriteKnob+0x20e>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    len_label = strlen(k->sub_labels[sl_index]);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6959      	ldr	r1, [r3, #20]
 8001faa:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe f91c 	bl	80001f4 <strlen>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    x = (SSD1306_WIDTH - len_label * Font_10x18.FontWidth) / 2;
 8001fc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <ssd1306_WriteKnob+0x2a4>)
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001fd2:	0fda      	lsrs	r2, r3, #31
 8001fd4:	4413      	add	r3, r2
 8001fd6:	105b      	asrs	r3, r3, #1
 8001fd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    y = SSD1306_HEIGHT - Font_10x18.FontHeight - 1;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <ssd1306_WriteKnob+0x2a4>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001fe4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    ssd1306_SetCursor(x, y);
 8001fe8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001fec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f928 	bl	8002248 <ssd1306_SetCursor>
    ssd1306_WriteString(k->sub_labels[sl_index], Font_10x18, White);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6959      	ldr	r1, [r3, #20]
 8001ffc:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002000:	4613      	mov	r3, r2
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	18c8      	adds	r0, r1, r3
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <ssd1306_WriteKnob+0x2a4>)
 800200a:	2301      	movs	r3, #1
 800200c:	ca06      	ldmia	r2, {r1, r2}
 800200e:	f000 f8f5 	bl	80021fc <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8002012:	f7ff fe8f 	bl	8001d34 <ssd1306_UpdateScreen>
}
 8002016:	bf00      	nop
 8002018:	3734      	adds	r7, #52	; 0x34
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}
 800201e:	bf00      	nop
 8002020:	0801261c 	.word	0x0801261c
 8002024:	08012608 	.word	0x08012608
 8002028:	08012610 	.word	0x08012610
 800202c:	08012618 	.word	0x08012618
 8002030:	20000000 	.word	0x20000000
 8002034:	20000740 	.word	0x20000740
 8002038:	20000008 	.word	0x20000008

0800203c <ssd1306_DrawPixel>:

//  Draw one pixel in the screenbuffer
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	460b      	mov	r3, r1
 8002048:	71bb      	strb	r3, [r7, #6]
 800204a:	4613      	mov	r3, r2
 800204c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db48      	blt.n	80020e8 <ssd1306_DrawPixel+0xac>
 8002056:	79bb      	ldrb	r3, [r7, #6]
 8002058:	2b3f      	cmp	r3, #63	; 0x3f
 800205a:	d845      	bhi.n	80020e8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted) {
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <ssd1306_DrawPixel+0xb8>)
 800205e:	791b      	ldrb	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR) !color;
 8002064:	797b      	ldrb	r3, [r7, #5]
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White) {
 8002072:	797b      	ldrb	r3, [r7, #5]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d11a      	bne.n	80020ae <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002078:	79fa      	ldrb	r2, [r7, #7]
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	08db      	lsrs	r3, r3, #3
 800207e:	b2d8      	uxtb	r0, r3
 8002080:	4603      	mov	r3, r0
 8002082:	01db      	lsls	r3, r3, #7
 8002084:	4413      	add	r3, r2
 8002086:	4a1c      	ldr	r2, [pc, #112]	; (80020f8 <ssd1306_DrawPixel+0xbc>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	b25a      	sxtb	r2, r3
 800208c:	79bb      	ldrb	r3, [r7, #6]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	b25b      	sxtb	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b259      	sxtb	r1, r3
 800209e:	79fa      	ldrb	r2, [r7, #7]
 80020a0:	4603      	mov	r3, r0
 80020a2:	01db      	lsls	r3, r3, #7
 80020a4:	4413      	add	r3, r2
 80020a6:	b2c9      	uxtb	r1, r1
 80020a8:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <ssd1306_DrawPixel+0xbc>)
 80020aa:	54d1      	strb	r1, [r2, r3]
 80020ac:	e01d      	b.n	80020ea <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80020ae:	79fa      	ldrb	r2, [r7, #7]
 80020b0:	79bb      	ldrb	r3, [r7, #6]
 80020b2:	08db      	lsrs	r3, r3, #3
 80020b4:	b2d8      	uxtb	r0, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	01db      	lsls	r3, r3, #7
 80020ba:	4413      	add	r3, r2
 80020bc:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <ssd1306_DrawPixel+0xbc>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	b25a      	sxtb	r2, r3
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	b25b      	sxtb	r3, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	4013      	ands	r3, r2
 80020d6:	b259      	sxtb	r1, r3
 80020d8:	79fa      	ldrb	r2, [r7, #7]
 80020da:	4603      	mov	r3, r0
 80020dc:	01db      	lsls	r3, r3, #7
 80020de:	4413      	add	r3, r2
 80020e0:	b2c9      	uxtb	r1, r1
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <ssd1306_DrawPixel+0xbc>)
 80020e4:	54d1      	strb	r1, [r2, r3]
 80020e6:	e000      	b.n	80020ea <ssd1306_DrawPixel+0xae>
        return;
 80020e8:	bf00      	nop
    }
}
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	20000740 	.word	0x20000740
 80020f8:	20000340 	.word	0x20000340

080020fc <ssd1306_WriteChar>:

//  Draw 1 char to the screen buffer
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	4604      	mov	r4, r0
 8002104:	1d38      	adds	r0, r7, #4
 8002106:	e880 0006 	stmia.w	r0, {r1, r2}
 800210a:	461a      	mov	r2, r3
 800210c:	4623      	mov	r3, r4
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	4613      	mov	r3, r2
 8002112:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002114:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <ssd1306_WriteChar+0xfc>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	793b      	ldrb	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	2b7f      	cmp	r3, #127	; 0x7f
 8002120:	dc06      	bgt.n	8002130 <ssd1306_WriteChar+0x34>
    SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 8002122:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <ssd1306_WriteChar+0xfc>)
 8002124:	885b      	ldrh	r3, [r3, #2]
 8002126:	461a      	mov	r2, r3
 8002128:	797b      	ldrb	r3, [r7, #5]
 800212a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800212c:	2b3f      	cmp	r3, #63	; 0x3f
 800212e:	dd01      	ble.n	8002134 <ssd1306_WriteChar+0x38>
        // Not enough space on current line
        return 0;
 8002130:	2300      	movs	r3, #0
 8002132:	e05d      	b.n	80021f0 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++) {
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e04c      	b.n	80021d4 <ssd1306_WriteChar+0xd8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	3b20      	subs	r3, #32
 8002140:	7979      	ldrb	r1, [r7, #5]
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4619      	mov	r1, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	440b      	add	r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++) {
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	e034      	b.n	80021c4 <ssd1306_WriteChar+0xc8>
            if ((b << j) & 0x8000) {
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d012      	beq.n	8002190 <ssd1306_WriteChar+0x94>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <ssd1306_WriteChar+0xfc>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	b2d8      	uxtb	r0, r3
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <ssd1306_WriteChar+0xfc>)
 800217a:	885b      	ldrh	r3, [r3, #2]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4413      	add	r3, r2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	7bba      	ldrb	r2, [r7, #14]
 8002188:	4619      	mov	r1, r3
 800218a:	f7ff ff57 	bl	800203c <ssd1306_DrawPixel>
 800218e:	e016      	b.n	80021be <ssd1306_WriteChar+0xc2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) !color);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <ssd1306_WriteChar+0xfc>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	4413      	add	r3, r2
 800219c:	b2d8      	uxtb	r0, r3
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <ssd1306_WriteChar+0xfc>)
 80021a0:	885b      	ldrh	r3, [r3, #2]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	b2d9      	uxtb	r1, r3
 80021ac:	7bbb      	ldrb	r3, [r7, #14]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	f7ff ff3f 	bl	800203c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++) {
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	793b      	ldrb	r3, [r7, #4]
 80021c6:	461a      	mov	r2, r3
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d3c5      	bcc.n	800215a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++) {
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	797b      	ldrb	r3, [r7, #5]
 80021d6:	461a      	mov	r2, r3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4293      	cmp	r3, r2
 80021dc:	d3ad      	bcc.n	800213a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <ssd1306_WriteChar+0xfc>)
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	793b      	ldrb	r3, [r7, #4]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <ssd1306_WriteChar+0xfc>)
 80021ec:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3724      	adds	r7, #36	; 0x24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}
 80021f8:	20000740 	.word	0x20000740

080021fc <ssd1306_WriteString>:

//  Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	1d38      	adds	r0, r7, #4
 8002206:	e880 0006 	stmia.w	r0, {r1, r2}
 800220a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800220c:	e012      	b.n	8002234 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	7818      	ldrb	r0, [r3, #0]
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	1d3a      	adds	r2, r7, #4
 8002216:	ca06      	ldmia	r2, {r1, r2}
 8002218:	f7ff ff70 	bl	80020fc <ssd1306_WriteChar>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d002      	beq.n	800222e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	e008      	b.n	8002240 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e8      	bne.n	800220e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	781b      	ldrb	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <ssd1306_SetCursor>:
void ssd1306_InvertColors(void) {
    SSD1306.Inverted = !SSD1306.Inverted;
}

//  Set cursor position
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	460a      	mov	r2, r1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	b29a      	uxth	r2, r3
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <ssd1306_SetCursor+0x2c>)
 800225e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	b29a      	uxth	r2, r3
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <ssd1306_SetCursor+0x2c>)
 8002266:	805a      	strh	r2, [r3, #2]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	20000740 	.word	0x20000740

08002278 <ssd1306_AdjustBrightness>:

// Adjust brightness
void ssd1306_AdjustBrightness(uint8_t brightness) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af04      	add	r7, sp, #16
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
    uint8_t contrast_cmd = 0x81;
 8002282:	2381      	movs	r3, #129	; 0x81
 8002284:	73fb      	strb	r3, [r7, #15]
    uint8_t contrast_level = brightness;
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_cmd, 1, 10);
 800228a:	230a      	movs	r3, #10
 800228c:	9302      	str	r3, [sp, #8]
 800228e:	2301      	movs	r3, #1
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	f107 030f 	add.w	r3, r7, #15
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2301      	movs	r3, #1
 800229a:	2200      	movs	r2, #0
 800229c:	2178      	movs	r1, #120	; 0x78
 800229e:	480a      	ldr	r0, [pc, #40]	; (80022c8 <ssd1306_AdjustBrightness+0x50>)
 80022a0:	f001 fc52 	bl	8003b48 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &contrast_level, 1, 10);
 80022a4:	230a      	movs	r3, #10
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	2301      	movs	r3, #1
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	f107 030e 	add.w	r3, r7, #14
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2301      	movs	r3, #1
 80022b4:	2200      	movs	r2, #0
 80022b6:	2178      	movs	r1, #120	; 0x78
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <ssd1306_AdjustBrightness+0x50>)
 80022ba:	f001 fc45 	bl	8003b48 <HAL_I2C_Mem_Write>
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20002970 	.word	0x20002970

080022cc <ssd1306_Select>:

// Select a display
void ssd1306_Select(Knob *k) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    i2c_Select(I2C_MUX_MASTER_ADDR, k->row);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	20e2      	movs	r0, #226	; 0xe2
 80022dc:	f000 f80a 	bl	80022f4 <i2c_Select>
    i2c_Select(I2C_MUX_SLAVE_ADDR, k->col);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	785b      	ldrb	r3, [r3, #1]
 80022e4:	4619      	mov	r1, r3
 80022e6:	20e0      	movs	r0, #224	; 0xe0
 80022e8:	f000 f804 	bl	80022f4 <i2c_Select>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <i2c_Select>:

// Select an output in an i2c mux
void i2c_Select(uint8_t mux_addr, uint8_t i) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	4603      	mov	r3, r0
 80022fc:	460a      	mov	r2, r1
 80022fe:	71fb      	strb	r3, [r7, #7]
 8002300:	4613      	mov	r3, r2
 8002302:	71bb      	strb	r3, [r7, #6]
    if (i > 7) return;
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	2b07      	cmp	r3, #7
 8002308:	d810      	bhi.n	800232c <i2c_Select+0x38>
    unsigned char temp[1];
    temp[0] = 1 << i;
 800230a:	79bb      	ldrb	r3, [r7, #6]
 800230c:	2201      	movs	r2, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	733b      	strb	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, mux_addr, temp, 1, 100);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	b299      	uxth	r1, r3
 800231a:	f107 020c 	add.w	r2, r7, #12
 800231e:	2364      	movs	r3, #100	; 0x64
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2301      	movs	r3, #1
 8002324:	4803      	ldr	r0, [pc, #12]	; (8002334 <i2c_Select+0x40>)
 8002326:	f001 fb11 	bl	800394c <HAL_I2C_Master_Transmit>
 800232a:	e000      	b.n	800232e <i2c_Select+0x3a>
    if (i > 7) return;
 800232c:	bf00      	nop
}
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20002970 	.word	0x20002970

08002338 <update_init_indicator>:

// Update the init value closeness indicator
char* update_init_indicator(Knob *k) {
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    int8_t init_diff = Knob_Map(k, k->init_value, MIDI_MAX) - Knob_Map(k, k->value, MIDI_MAX);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7e9b      	ldrb	r3, [r3, #26]
 8002344:	227f      	movs	r2, #127	; 0x7f
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7fe fe01 	bl	8000f50 <Knob_Map>
 800234e:	4603      	mov	r3, r0
 8002350:	461c      	mov	r4, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7edb      	ldrb	r3, [r3, #27]
 8002356:	227f      	movs	r2, #127	; 0x7f
 8002358:	4619      	mov	r1, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fdf8 	bl	8000f50 <Knob_Map>
 8002360:	4603      	mov	r3, r0
 8002362:	1ae3      	subs	r3, r4, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	73fb      	strb	r3, [r7, #15]
    uint8_t init_pct = 1.0f * abs(init_diff) / MIDI_MAX * 100;
 8002368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236c:	2b00      	cmp	r3, #0
 800236e:	bfb8      	it	lt
 8002370:	425b      	neglt	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002468 <update_init_indicator+0x130>
 8002380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002384:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800246c <update_init_indicator+0x134>
 8002388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002390:	edc7 7a00 	vstr	s15, [r7]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	73bb      	strb	r3, [r7, #14]

    if (init_diff == 0) return "       @       ";
 8002398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <update_init_indicator+0x6c>
 80023a0:	4b33      	ldr	r3, [pc, #204]	; (8002470 <update_init_indicator+0x138>)
 80023a2:	e05c      	b.n	800245e <update_init_indicator+0x126>

    if (init_pct < 15) {
 80023a4:	7bbb      	ldrb	r3, [r7, #14]
 80023a6:	2b0e      	cmp	r3, #14
 80023a8:	d807      	bhi.n	80023ba <update_init_indicator+0x82>
        if (init_diff > 0) return "      >        ";
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	dd01      	ble.n	80023b6 <update_init_indicator+0x7e>
 80023b2:	4b30      	ldr	r3, [pc, #192]	; (8002474 <update_init_indicator+0x13c>)
 80023b4:	e053      	b.n	800245e <update_init_indicator+0x126>
        else return "        <      ";
 80023b6:	4b30      	ldr	r3, [pc, #192]	; (8002478 <update_init_indicator+0x140>)
 80023b8:	e051      	b.n	800245e <update_init_indicator+0x126>
    } else if (init_pct >= 15 && init_pct < 30) {
 80023ba:	7bbb      	ldrb	r3, [r7, #14]
 80023bc:	2b0e      	cmp	r3, #14
 80023be:	d90a      	bls.n	80023d6 <update_init_indicator+0x9e>
 80023c0:	7bbb      	ldrb	r3, [r7, #14]
 80023c2:	2b1d      	cmp	r3, #29
 80023c4:	d807      	bhi.n	80023d6 <update_init_indicator+0x9e>
        if (init_diff > 0) return "     >>        ";
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	dd01      	ble.n	80023d2 <update_init_indicator+0x9a>
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <update_init_indicator+0x144>)
 80023d0:	e045      	b.n	800245e <update_init_indicator+0x126>
        else return "        <<     ";
 80023d2:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <update_init_indicator+0x148>)
 80023d4:	e043      	b.n	800245e <update_init_indicator+0x126>
    } else if (init_pct >= 30 && init_pct < 45) {
 80023d6:	7bbb      	ldrb	r3, [r7, #14]
 80023d8:	2b1d      	cmp	r3, #29
 80023da:	d90a      	bls.n	80023f2 <update_init_indicator+0xba>
 80023dc:	7bbb      	ldrb	r3, [r7, #14]
 80023de:	2b2c      	cmp	r3, #44	; 0x2c
 80023e0:	d807      	bhi.n	80023f2 <update_init_indicator+0xba>
        if (init_diff > 0) return "    >>>        ";
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	dd01      	ble.n	80023ee <update_init_indicator+0xb6>
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <update_init_indicator+0x14c>)
 80023ec:	e037      	b.n	800245e <update_init_indicator+0x126>
        else return "        <<<    ";
 80023ee:	4b26      	ldr	r3, [pc, #152]	; (8002488 <update_init_indicator+0x150>)
 80023f0:	e035      	b.n	800245e <update_init_indicator+0x126>
    } else if (init_pct >= 45 && init_pct < 61) {
 80023f2:	7bbb      	ldrb	r3, [r7, #14]
 80023f4:	2b2c      	cmp	r3, #44	; 0x2c
 80023f6:	d90a      	bls.n	800240e <update_init_indicator+0xd6>
 80023f8:	7bbb      	ldrb	r3, [r7, #14]
 80023fa:	2b3c      	cmp	r3, #60	; 0x3c
 80023fc:	d807      	bhi.n	800240e <update_init_indicator+0xd6>
        if (init_diff > 0) return "   >>>>        ";
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	dd01      	ble.n	800240a <update_init_indicator+0xd2>
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <update_init_indicator+0x154>)
 8002408:	e029      	b.n	800245e <update_init_indicator+0x126>
        else return "        <<<<   ";
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <update_init_indicator+0x158>)
 800240c:	e027      	b.n	800245e <update_init_indicator+0x126>
    } else if (init_pct >= 61 && init_pct < 77) {
 800240e:	7bbb      	ldrb	r3, [r7, #14]
 8002410:	2b3c      	cmp	r3, #60	; 0x3c
 8002412:	d90a      	bls.n	800242a <update_init_indicator+0xf2>
 8002414:	7bbb      	ldrb	r3, [r7, #14]
 8002416:	2b4c      	cmp	r3, #76	; 0x4c
 8002418:	d807      	bhi.n	800242a <update_init_indicator+0xf2>
        if (init_diff > 0) return "  >>>>>        ";
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	2b00      	cmp	r3, #0
 8002420:	dd01      	ble.n	8002426 <update_init_indicator+0xee>
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <update_init_indicator+0x15c>)
 8002424:	e01b      	b.n	800245e <update_init_indicator+0x126>
        else return "        <<<<<  ";
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <update_init_indicator+0x160>)
 8002428:	e019      	b.n	800245e <update_init_indicator+0x126>
    } else if (init_pct >= 77 && init_pct < 93) {
 800242a:	7bbb      	ldrb	r3, [r7, #14]
 800242c:	2b4c      	cmp	r3, #76	; 0x4c
 800242e:	d90a      	bls.n	8002446 <update_init_indicator+0x10e>
 8002430:	7bbb      	ldrb	r3, [r7, #14]
 8002432:	2b5c      	cmp	r3, #92	; 0x5c
 8002434:	d807      	bhi.n	8002446 <update_init_indicator+0x10e>
        if (init_diff > 0) return " >>>>>>        ";
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	dd01      	ble.n	8002442 <update_init_indicator+0x10a>
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <update_init_indicator+0x164>)
 8002440:	e00d      	b.n	800245e <update_init_indicator+0x126>
        else return "        <<<<<< ";
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <update_init_indicator+0x168>)
 8002444:	e00b      	b.n	800245e <update_init_indicator+0x126>
    } else if (init_pct >= 93) {
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	2b5c      	cmp	r3, #92	; 0x5c
 800244a:	d907      	bls.n	800245c <update_init_indicator+0x124>
        if (init_diff > 0) return ">>>>>>>        ";
 800244c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	dd01      	ble.n	8002458 <update_init_indicator+0x120>
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <update_init_indicator+0x16c>)
 8002456:	e002      	b.n	800245e <update_init_indicator+0x126>
        else return "        <<<<<<<";
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <update_init_indicator+0x170>)
 800245a:	e000      	b.n	800245e <update_init_indicator+0x126>
    } else {
        return " ";
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <update_init_indicator+0x174>)
    }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	bf00      	nop
 8002468:	42fe0000 	.word	0x42fe0000
 800246c:	42c80000 	.word	0x42c80000
 8002470:	0801261c 	.word	0x0801261c
 8002474:	0801263c 	.word	0x0801263c
 8002478:	0801264c 	.word	0x0801264c
 800247c:	0801265c 	.word	0x0801265c
 8002480:	0801266c 	.word	0x0801266c
 8002484:	0801267c 	.word	0x0801267c
 8002488:	0801268c 	.word	0x0801268c
 800248c:	0801269c 	.word	0x0801269c
 8002490:	080126ac 	.word	0x080126ac
 8002494:	080126bc 	.word	0x080126bc
 8002498:	080126cc 	.word	0x080126cc
 800249c:	080126dc 	.word	0x080126dc
 80024a0:	080126ec 	.word	0x080126ec
 80024a4:	080126fc 	.word	0x080126fc
 80024a8:	0801270c 	.word	0x0801270c
 80024ac:	0801271c 	.word	0x0801271c

080024b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_MspInit+0x4c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <HAL_MspInit+0x4c>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_MspInit+0x4c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_MspInit+0x4c>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_MspInit+0x4c>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_MspInit+0x4c>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_ADC_MspInit+0x7c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d127      	bne.n	8002572 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_ADC_MspInit+0x80>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <HAL_ADC_MspInit+0x80>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_ADC_MspInit+0x80>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_ADC_MspInit+0x80>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_ADC_MspInit+0x80>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_ADC_MspInit+0x80>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800255a:	230f      	movs	r3, #15
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255e:	2303      	movs	r3, #3
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	; (8002584 <HAL_ADC_MspInit+0x84>)
 800256e:	f000 fef3 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002572:	bf00      	nop
 8002574:	3728      	adds	r7, #40	; 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40012000 	.word	0x40012000
 8002580:	40023800 	.word	0x40023800
 8002584:	40020000 	.word	0x40020000

08002588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a19      	ldr	r2, [pc, #100]	; (800260c <HAL_I2C_MspInit+0x84>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d12b      	bne.n	8002602 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <HAL_I2C_MspInit+0x88>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a17      	ldr	r2, [pc, #92]	; (8002610 <HAL_I2C_MspInit+0x88>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_I2C_MspInit+0x88>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c6:	23c0      	movs	r3, #192	; 0xc0
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ca:	2312      	movs	r3, #18
 80025cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025d6:	2304      	movs	r3, #4
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	480c      	ldr	r0, [pc, #48]	; (8002614 <HAL_I2C_MspInit+0x8c>)
 80025e2:	f000 feb9 	bl	8003358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_I2C_MspInit+0x88>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <HAL_I2C_MspInit+0x88>)
 80025f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025f4:	6413      	str	r3, [r2, #64]	; 0x40
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_I2C_MspInit+0x88>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	; 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40005400 	.word	0x40005400
 8002610:	40023800 	.word	0x40023800
 8002614:	40020400 	.word	0x40020400

08002618 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a05      	ldr	r2, [pc, #20]	; (800263c <HAL_RTC_MspInit+0x24>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d102      	bne.n	8002630 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RTC_MspInit+0x28>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40002800 	.word	0x40002800
 8002640:	42470e3c 	.word	0x42470e3c

08002644 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <HAL_SD_MspInit+0xc4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d14b      	bne.n	80026fe <HAL_SD_MspInit+0xba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_SD_MspInit+0xc8>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	4a27      	ldr	r2, [pc, #156]	; (800270c <HAL_SD_MspInit+0xc8>)
 8002670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	4b25      	ldr	r3, [pc, #148]	; (800270c <HAL_SD_MspInit+0xc8>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_SD_MspInit+0xc8>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a20      	ldr	r2, [pc, #128]	; (800270c <HAL_SD_MspInit+0xc8>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_SD_MspInit+0xc8>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <HAL_SD_MspInit+0xc8>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a19      	ldr	r2, [pc, #100]	; (800270c <HAL_SD_MspInit+0xc8>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_SD_MspInit+0xc8>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB4     ------> SDIO_D0
    PB5     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80026ba:	f44f 7350 	mov.w	r3, #832	; 0x340
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026cc:	230c      	movs	r3, #12
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	480e      	ldr	r0, [pc, #56]	; (8002710 <HAL_SD_MspInit+0xcc>)
 80026d8:	f000 fe3e 	bl	8003358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
 80026dc:	f248 0330 	movw	r3, #32816	; 0x8030
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ea:	2303      	movs	r3, #3
 80026ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026ee:	230c      	movs	r3, #12
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	4806      	ldr	r0, [pc, #24]	; (8002714 <HAL_SD_MspInit+0xd0>)
 80026fa:	f000 fe2d 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3728      	adds	r7, #40	; 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400

08002718 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 800271c:	e7fe      	b.n	800271c <NMI_Handler+0x4>

0800271e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8002722:	e7fe      	b.n	8002722 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 8002728:	e7fe      	b.n	8002728 <MemManage_Handler+0x4>

0800272a <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 800272e:	e7fe      	b.n	800272e <BusFault_Handler+0x4>

08002730 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8002734:	e7fe      	b.n	8002734 <UsageFault_Handler+0x4>

08002736 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */



    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e039      	b.n	80027e0 <SysTick_Handler+0x80>
        GPIO_TypeDef *t = (i == BUTTON_MENU) ? GPIO_PORT_BUTTON_6 : GPIO_PORT_BUTTONS_1TO5;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d101      	bne.n	8002776 <SysTick_Handler+0x16>
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <SysTick_Handler+0x94>)
 8002774:	e000      	b.n	8002778 <SysTick_Handler+0x18>
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <SysTick_Handler+0x98>)
 8002778:	60bb      	str	r3, [r7, #8]
        uint8_t currentState = HAL_GPIO_ReadPin(t, btnPins[i]);
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <SysTick_Handler+0x9c>)
 800277e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002782:	4619      	mov	r1, r3
 8002784:	68b8      	ldr	r0, [r7, #8]
 8002786:	f000 ff6b 	bl	8003660 <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]

        if (currentState != btnState[i]) {
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <SysTick_Handler+0xa0>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	79fa      	ldrb	r2, [r7, #7]
 8002796:	429a      	cmp	r2, r3
 8002798:	d01b      	beq.n	80027d2 <SysTick_Handler+0x72>
            btnCount[i]++;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	4a19      	ldr	r2, [pc, #100]	; (8002804 <SysTick_Handler+0xa4>)
 800279e:	5cd2      	ldrb	r2, [r2, r3]
 80027a0:	3201      	adds	r2, #1
 80027a2:	b2d1      	uxtb	r1, r2
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <SysTick_Handler+0xa4>)
 80027a6:	54d1      	strb	r1, [r2, r3]
            if (btnCount[i] >= 4) {
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	4a16      	ldr	r2, [pc, #88]	; (8002804 <SysTick_Handler+0xa4>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d913      	bls.n	80027da <SysTick_Handler+0x7a>
                btnState[i] = currentState;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	4912      	ldr	r1, [pc, #72]	; (8002800 <SysTick_Handler+0xa0>)
 80027b6:	79fa      	ldrb	r2, [r7, #7]
 80027b8:	54ca      	strb	r2, [r1, r3]

                if (currentState != GPIO_PIN_SET)
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d003      	beq.n	80027c8 <SysTick_Handler+0x68>
                    btnDown[i] = true;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	4a11      	ldr	r2, [pc, #68]	; (8002808 <SysTick_Handler+0xa8>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	54d1      	strb	r1, [r2, r3]

                btnCount[i] = 0;
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <SysTick_Handler+0xa4>)
 80027cc:	2100      	movs	r1, #0
 80027ce:	54d1      	strb	r1, [r2, r3]
 80027d0:	e003      	b.n	80027da <SysTick_Handler+0x7a>
            }
        } else {
            btnCount[i] = 0;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <SysTick_Handler+0xa4>)
 80027d6:	2100      	movs	r1, #0
 80027d8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	3301      	adds	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d9c2      	bls.n	800276c <SysTick_Handler+0xc>
        }
    }

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 80027e6:	f000 f9ef 	bl	8002bc8 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40020800 	.word	0x40020800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	20000018 	.word	0x20000018
 8002800:	20000010 	.word	0x20000010
 8002804:	20000748 	.word	0x20000748
 8002808:	20000338 	.word	0x20000338

0800280c <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN OTG_FS_IRQn 0 */

    /* USER CODE END OTG_FS_IRQn 0 */
    HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <OTG_FS_IRQHandler+0x10>)
 8002812:	f001 fe82 	bl	800451a <HAL_PCD_IRQHandler>
    /* USER CODE BEGIN OTG_FS_IRQn 1 */

    /* USER CODE END OTG_FS_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200034ac 	.word	0x200034ac

08002820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
	return 1;
 8002824:	2301      	movs	r3, #1
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <_kill>:

int _kill(int pid, int sig)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800283a:	f00c fde1 	bl	800f400 <__errno>
 800283e:	4603      	mov	r3, r0
 8002840:	2216      	movs	r2, #22
 8002842:	601a      	str	r2, [r3, #0]
	return -1;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_exit>:

void _exit (int status)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002858:	f04f 31ff 	mov.w	r1, #4294967295
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ffe7 	bl	8002830 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002862:	e7fe      	b.n	8002862 <_exit+0x12>

08002864 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e00a      	b.n	800288c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002876:	f3af 8000 	nop.w
 800287a:	4601      	mov	r1, r0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	60ba      	str	r2, [r7, #8]
 8002882:	b2ca      	uxtb	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3301      	adds	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	dbf0      	blt.n	8002876 <_read+0x12>
	}

return len;
 8002894:	687b      	ldr	r3, [r7, #4]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e009      	b.n	80028c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	60ba      	str	r2, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbf1      	blt.n	80028b0 <_write+0x12>
	}
	return len;
 80028cc:	687b      	ldr	r3, [r7, #4]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_close>:

int _close(int file)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	return -1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_isatty>:

int _isatty(int file)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
	return 1;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
	return 0;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002948:	4a14      	ldr	r2, [pc, #80]	; (800299c <_sbrk+0x5c>)
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <_sbrk+0x60>)
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <_sbrk+0x64>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <_sbrk+0x64>)
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <_sbrk+0x68>)
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	429a      	cmp	r2, r3
 800296e:	d207      	bcs.n	8002980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002970:	f00c fd46 	bl	800f400 <__errno>
 8002974:	4603      	mov	r3, r0
 8002976:	220c      	movs	r2, #12
 8002978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800297a:	f04f 33ff 	mov.w	r3, #4294967295
 800297e:	e009      	b.n	8002994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <_sbrk+0x64>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <_sbrk+0x64>)
 8002990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002992:	68fb      	ldr	r3, [r7, #12]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20020000 	.word	0x20020000
 80029a0:	00000400 	.word	0x00000400
 80029a4:	20000750 	.word	0x20000750
 80029a8:	200038c8 	.word	0x200038c8

080029ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <SystemInit+0x20>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	4a05      	ldr	r2, [pc, #20]	; (80029cc <SystemInit+0x20>)
 80029b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	2302      	movs	r3, #2
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	2302      	movs	r3, #2
 80029e8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80029ea:	4b34      	ldr	r3, [pc, #208]	; (8002abc <SystemCoreClockUpdate+0xec>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d011      	beq.n	8002a1e <SystemCoreClockUpdate+0x4e>
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d844      	bhi.n	8002a8a <SystemCoreClockUpdate+0xba>
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <SystemCoreClockUpdate+0x3e>
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d004      	beq.n	8002a16 <SystemCoreClockUpdate+0x46>
 8002a0c:	e03d      	b.n	8002a8a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002a0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ac0 <SystemCoreClockUpdate+0xf0>)
 8002a10:	4a2c      	ldr	r2, [pc, #176]	; (8002ac4 <SystemCoreClockUpdate+0xf4>)
 8002a12:	601a      	str	r2, [r3, #0]
      break;
 8002a14:	e03d      	b.n	8002a92 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <SystemCoreClockUpdate+0xf0>)
 8002a18:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <SystemCoreClockUpdate+0xf8>)
 8002a1a:	601a      	str	r2, [r3, #0]
      break;
 8002a1c:	e039      	b.n	8002a92 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002a1e:	4b27      	ldr	r3, [pc, #156]	; (8002abc <SystemCoreClockUpdate+0xec>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	0d9b      	lsrs	r3, r3, #22
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <SystemCoreClockUpdate+0xec>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a32:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002a3a:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <SystemCoreClockUpdate+0xf8>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <SystemCoreClockUpdate+0xec>)
 8002a44:	6852      	ldr	r2, [r2, #4]
 8002a46:	0992      	lsrs	r2, r2, #6
 8002a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e00b      	b.n	8002a6c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <SystemCoreClockUpdate+0xf4>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <SystemCoreClockUpdate+0xec>)
 8002a5e:	6852      	ldr	r2, [r2, #4]
 8002a60:	0992      	lsrs	r2, r2, #6
 8002a62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <SystemCoreClockUpdate+0xec>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	3301      	adds	r3, #1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <SystemCoreClockUpdate+0xf0>)
 8002a86:	6013      	str	r3, [r2, #0]
      break;
 8002a88:	e003      	b.n	8002a92 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <SystemCoreClockUpdate+0xf0>)
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <SystemCoreClockUpdate+0xf4>)
 8002a8e:	601a      	str	r2, [r3, #0]
      break;
 8002a90:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <SystemCoreClockUpdate+0xec>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <SystemCoreClockUpdate+0xfc>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <SystemCoreClockUpdate+0xf0>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <SystemCoreClockUpdate+0xf0>)
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	20000030 	.word	0x20000030
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	017d7840 	.word	0x017d7840
 8002acc:	08013a88 	.word	0x08013a88

08002ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad4:	480d      	ldr	r0, [pc, #52]	; (8002b0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ad6:	490e      	ldr	r1, [pc, #56]	; (8002b10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002adc:	e002      	b.n	8002ae4 <LoopCopyDataInit>

08002ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae2:	3304      	adds	r3, #4

08002ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae8:	d3f9      	bcc.n	8002ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aea:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002aec:	4c0b      	ldr	r4, [pc, #44]	; (8002b1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af0:	e001      	b.n	8002af6 <LoopFillZerobss>

08002af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af4:	3204      	adds	r2, #4

08002af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af8:	d3fb      	bcc.n	8002af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002afa:	f7ff ff57 	bl	80029ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002afe:	f00c fc85 	bl	800f40c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b02:	f7fe fb59 	bl	80011b8 <main>
  bx  lr    
 8002b06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b10:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8002b14:	0801433c 	.word	0x0801433c
  ldr r2, =_sbss
 8002b18:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8002b1c:	200038c4 	.word	0x200038c4

08002b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC_IRQHandler>
	...

08002b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <HAL_Init+0x40>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_Init+0x40>)
 8002b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_Init+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <HAL_Init+0x40>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	f000 fbc1 	bl	80032d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f000 f808 	bl	8002b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b58:	f7ff fcaa 	bl	80024b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00

08002b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_InitTick+0x54>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_InitTick+0x58>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fbd9 	bl	800333e <HAL_SYSTICK_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00e      	b.n	8002bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d80a      	bhi.n	8002bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f000 fba1 	bl	80032ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba8:	4a06      	ldr	r2, [pc, #24]	; (8002bc4 <HAL_InitTick+0x5c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000030 	.word	0x20000030
 8002bc0:	20000038 	.word	0x20000038
 8002bc4:	20000034 	.word	0x20000034

08002bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x20>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x24>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_IncTick+0x24>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000038 	.word	0x20000038
 8002bec:	20002b6c 	.word	0x20002b6c

08002bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <HAL_GetTick+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20002b6c 	.word	0x20002b6c

08002c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff ffee 	bl	8002bf0 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d005      	beq.n	8002c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_Delay+0x44>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c2e:	bf00      	nop
 8002c30:	f7ff ffde 	bl	8002bf0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f7      	bhi.n	8002c30 <HAL_Delay+0x28>
  {
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000038 	.word	0x20000038

08002c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e033      	b.n	8002cce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fc46 	bl	8002500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d118      	bne.n	8002cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c96:	f023 0302 	bic.w	r3, r3, #2
 8002c9a:	f043 0202 	orr.w	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f94a 	bl	8002f3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002cbe:	e001      	b.n	8002cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1c>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e113      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x244>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d925      	bls.n	8002d50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	3b1e      	subs	r3, #30
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43da      	mvns	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	400a      	ands	r2, r1
 8002d28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68d9      	ldr	r1, [r3, #12]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4403      	add	r3, r0
 8002d42:	3b1e      	subs	r3, #30
 8002d44:	409a      	lsls	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	e022      	b.n	8002d96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6919      	ldr	r1, [r3, #16]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	2207      	movs	r2, #7
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	400a      	ands	r2, r1
 8002d72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6919      	ldr	r1, [r3, #16]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4618      	mov	r0, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4403      	add	r3, r0
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d824      	bhi.n	8002de8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	3b05      	subs	r3, #5
 8002db0:	221f      	movs	r2, #31
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b05      	subs	r3, #5
 8002dda:	fa00 f203 	lsl.w	r2, r0, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	635a      	str	r2, [r3, #52]	; 0x34
 8002de6:	e04c      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d824      	bhi.n	8002e3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b23      	subs	r3, #35	; 0x23
 8002e02:	221f      	movs	r2, #31
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	400a      	ands	r2, r1
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b23      	subs	r3, #35	; 0x23
 8002e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
 8002e38:	e023      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b41      	subs	r3, #65	; 0x41
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b41      	subs	r3, #65	; 0x41
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_ADC_ConfigChannel+0x250>)
 8002e84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a28      	ldr	r2, [pc, #160]	; (8002f2c <HAL_ADC_ConfigChannel+0x254>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x1d8>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b12      	cmp	r3, #18
 8002e96:	d10b      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_ADC_ConfigChannel+0x254>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d12b      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x23a>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_ADC_ConfigChannel+0x258>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x1f4>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b11      	cmp	r3, #17
 8002eca:	d122      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <HAL_ADC_ConfigChannel+0x258>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d111      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_ADC_ConfigChannel+0x25c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_ADC_ConfigChannel+0x260>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0c9a      	lsrs	r2, r3, #18
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f04:	e002      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f9      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40012300 	.word	0x40012300
 8002f2c:	40012000 	.word	0x40012000
 8002f30:	10000012 	.word	0x10000012
 8002f34:	20000030 	.word	0x20000030
 8002f38:	431bde83 	.word	0x431bde83

08002f3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f44:	4b79      	ldr	r3, [pc, #484]	; (800312c <ADC_Init+0x1f0>)
 8002f46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	021a      	lsls	r2, r3, #8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	4a58      	ldr	r2, [pc, #352]	; (8003130 <ADC_Init+0x1f4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fe2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6899      	ldr	r1, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6899      	ldr	r1, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	e00f      	b.n	800303a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003038:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0202 	bic.w	r2, r2, #2
 8003048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7e1b      	ldrb	r3, [r3, #24]
 8003054:	005a      	lsls	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003076:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003086:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	3b01      	subs	r3, #1
 8003094:	035a      	lsls	r2, r3, #13
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	e007      	b.n	80030b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	051a      	lsls	r2, r3, #20
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030f2:	025a      	lsls	r2, r3, #9
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6899      	ldr	r1, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	029a      	lsls	r2, r3, #10
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40012300 	.word	0x40012300
 8003130:	0f000001 	.word	0x0f000001

08003134 <__NVIC_SetPriorityGrouping>:
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800315c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60d3      	str	r3, [r2, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_GetPriorityGrouping>:
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <__NVIC_GetPriorityGrouping+0x18>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 0307 	and.w	r3, r3, #7
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_EnableIRQ>:
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	db0b      	blt.n	80031c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	4907      	ldr	r1, [pc, #28]	; (80031d0 <__NVIC_EnableIRQ+0x38>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2001      	movs	r0, #1
 80031ba:	fa00 f202 	lsl.w	r2, r0, r2
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000e100 	.word	0xe000e100

080031d4 <__NVIC_SetPriority>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db0a      	blt.n	80031fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	490c      	ldr	r1, [pc, #48]	; (8003220 <__NVIC_SetPriority+0x4c>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031fc:	e00a      	b.n	8003214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <__NVIC_SetPriority+0x50>)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3b04      	subs	r3, #4
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	440b      	add	r3, r1
 8003212:	761a      	strb	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000e100 	.word	0xe000e100
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <NVIC_EncodePriority>:
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f1c3 0307 	rsb	r3, r3, #7
 8003242:	2b04      	cmp	r3, #4
 8003244:	bf28      	it	cs
 8003246:	2304      	movcs	r3, #4
 8003248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3304      	adds	r3, #4
 800324e:	2b06      	cmp	r3, #6
 8003250:	d902      	bls.n	8003258 <NVIC_EncodePriority+0x30>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3b03      	subs	r3, #3
 8003256:	e000      	b.n	800325a <NVIC_EncodePriority+0x32>
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43d9      	mvns	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	4313      	orrs	r3, r2
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <SysTick_Config>:
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a0:	d301      	bcc.n	80032a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00f      	b.n	80032c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <SysTick_Config+0x40>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ae:	210f      	movs	r1, #15
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f7ff ff8e 	bl	80031d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <SysTick_Config+0x40>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SysTick_Config+0x40>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	e000e010 	.word	0xe000e010

080032d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff29 	bl	8003134 <__NVIC_SetPriorityGrouping>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b086      	sub	sp, #24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032fc:	f7ff ff3e 	bl	800317c <__NVIC_GetPriorityGrouping>
 8003300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7ff ff8e 	bl	8003228 <NVIC_EncodePriority>
 800330c:	4602      	mov	r2, r0
 800330e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff5d 	bl	80031d4 <__NVIC_SetPriority>
}
 800331a:	bf00      	nop
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff31 	bl	8003198 <__NVIC_EnableIRQ>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffa2 	bl	8003290 <SysTick_Config>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e159      	b.n	8003628 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003374:	2201      	movs	r2, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	f040 8148 	bne.w	8003622 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d005      	beq.n	80033aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d130      	bne.n	800340c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 0201 	and.w	r2, r3, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b03      	cmp	r3, #3
 8003416:	d017      	beq.n	8003448 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d123      	bne.n	800349c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	08da      	lsrs	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3208      	adds	r2, #8
 800345c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	220f      	movs	r2, #15
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	08da      	lsrs	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3208      	adds	r2, #8
 8003496:	69b9      	ldr	r1, [r7, #24]
 8003498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a2 	beq.w	8003622 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b57      	ldr	r3, [pc, #348]	; (8003640 <HAL_GPIO_Init+0x2e8>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4a56      	ldr	r2, [pc, #344]	; (8003640 <HAL_GPIO_Init+0x2e8>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	4b54      	ldr	r3, [pc, #336]	; (8003640 <HAL_GPIO_Init+0x2e8>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fa:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_GPIO_Init+0x2ec>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a49      	ldr	r2, [pc, #292]	; (8003648 <HAL_GPIO_Init+0x2f0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_GPIO_Init+0x202>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a48      	ldr	r2, [pc, #288]	; (800364c <HAL_GPIO_Init+0x2f4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_GPIO_Init+0x1fe>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a47      	ldr	r2, [pc, #284]	; (8003650 <HAL_GPIO_Init+0x2f8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_GPIO_Init+0x1fa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a46      	ldr	r2, [pc, #280]	; (8003654 <HAL_GPIO_Init+0x2fc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x1f6>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a45      	ldr	r2, [pc, #276]	; (8003658 <HAL_GPIO_Init+0x300>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_GPIO_Init+0x1f2>
 8003546:	2304      	movs	r3, #4
 8003548:	e008      	b.n	800355c <HAL_GPIO_Init+0x204>
 800354a:	2307      	movs	r3, #7
 800354c:	e006      	b.n	800355c <HAL_GPIO_Init+0x204>
 800354e:	2303      	movs	r3, #3
 8003550:	e004      	b.n	800355c <HAL_GPIO_Init+0x204>
 8003552:	2302      	movs	r3, #2
 8003554:	e002      	b.n	800355c <HAL_GPIO_Init+0x204>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_GPIO_Init+0x204>
 800355a:	2300      	movs	r3, #0
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f002 0203 	and.w	r2, r2, #3
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	4093      	lsls	r3, r2
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800356c:	4935      	ldr	r1, [pc, #212]	; (8003644 <HAL_GPIO_Init+0x2ec>)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	3302      	adds	r3, #2
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800357a:	4b38      	ldr	r3, [pc, #224]	; (800365c <HAL_GPIO_Init+0x304>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800359e:	4a2f      	ldr	r2, [pc, #188]	; (800365c <HAL_GPIO_Init+0x304>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <HAL_GPIO_Init+0x304>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <HAL_GPIO_Init+0x304>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ce:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_GPIO_Init+0x304>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_GPIO_Init+0x304>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f8:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_GPIO_Init+0x304>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800361c:	4a0f      	ldr	r2, [pc, #60]	; (800365c <HAL_GPIO_Init+0x304>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b0f      	cmp	r3, #15
 800362c:	f67f aea2 	bls.w	8003374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	40013800 	.word	0x40013800
 8003648:	40020000 	.word	0x40020000
 800364c:	40020400 	.word	0x40020400
 8003650:	40020800 	.word	0x40020800
 8003654:	40020c00 	.word	0x40020c00
 8003658:	40021000 	.word	0x40021000
 800365c:	40013c00 	.word	0x40013c00

08003660 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	887b      	ldrh	r3, [r7, #2]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	e001      	b.n	8003682 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
 800369c:	4613      	mov	r3, r2
 800369e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a0:	787b      	ldrb	r3, [r7, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036ac:	e003      	b.n	80036b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	041a      	lsls	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	619a      	str	r2, [r3, #24]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e12b      	b.n	800392e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fe ff4c 	bl	8002588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2224      	movs	r2, #36	; 0x24
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003728:	f002 fb4a 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 800372c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4a81      	ldr	r2, [pc, #516]	; (8003938 <HAL_I2C_Init+0x274>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d807      	bhi.n	8003748 <HAL_I2C_Init+0x84>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a80      	ldr	r2, [pc, #512]	; (800393c <HAL_I2C_Init+0x278>)
 800373c:	4293      	cmp	r3, r2
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e006      	b.n	8003756 <HAL_I2C_Init+0x92>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a7d      	ldr	r2, [pc, #500]	; (8003940 <HAL_I2C_Init+0x27c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	bf94      	ite	ls
 8003750:	2301      	movls	r3, #1
 8003752:	2300      	movhi	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0e7      	b.n	800392e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a78      	ldr	r2, [pc, #480]	; (8003944 <HAL_I2C_Init+0x280>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0c9b      	lsrs	r3, r3, #18
 8003768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a6a      	ldr	r2, [pc, #424]	; (8003938 <HAL_I2C_Init+0x274>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d802      	bhi.n	8003798 <HAL_I2C_Init+0xd4>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3301      	adds	r3, #1
 8003796:	e009      	b.n	80037ac <HAL_I2C_Init+0xe8>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	4a69      	ldr	r2, [pc, #420]	; (8003948 <HAL_I2C_Init+0x284>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	3301      	adds	r3, #1
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	495c      	ldr	r1, [pc, #368]	; (8003938 <HAL_I2C_Init+0x274>)
 80037c8:	428b      	cmp	r3, r1
 80037ca:	d819      	bhi.n	8003800 <HAL_I2C_Init+0x13c>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e59      	subs	r1, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037e0:	400b      	ands	r3, r1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_I2C_Init+0x138>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e59      	subs	r1, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fa:	e051      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 80037fc:	2304      	movs	r3, #4
 80037fe:	e04f      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d111      	bne.n	800382c <HAL_I2C_Init+0x168>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1e58      	subs	r0, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	440b      	add	r3, r1
 8003816:	fbb0 f3f3 	udiv	r3, r0, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e012      	b.n	8003852 <HAL_I2C_Init+0x18e>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	0099      	lsls	r1, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Init+0x196>
 8003856:	2301      	movs	r3, #1
 8003858:	e022      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10e      	bne.n	8003880 <HAL_I2C_Init+0x1bc>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1e58      	subs	r0, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	440b      	add	r3, r1
 8003870:	fbb0 f3f3 	udiv	r3, r0, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387e:	e00f      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	0099      	lsls	r1, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	6809      	ldr	r1, [r1, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6911      	ldr	r1, [r2, #16]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68d2      	ldr	r2, [r2, #12]
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	000186a0 	.word	0x000186a0
 800393c:	001e847f 	.word	0x001e847f
 8003940:	003d08ff 	.word	0x003d08ff
 8003944:	431bde83 	.word	0x431bde83
 8003948:	10624dd3 	.word	0x10624dd3

0800394c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	461a      	mov	r2, r3
 8003958:	460b      	mov	r3, r1
 800395a:	817b      	strh	r3, [r7, #10]
 800395c:	4613      	mov	r3, r2
 800395e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003960:	f7ff f946 	bl	8002bf0 <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b20      	cmp	r3, #32
 8003970:	f040 80e0 	bne.w	8003b34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2319      	movs	r3, #25
 800397a:	2201      	movs	r2, #1
 800397c:	4970      	ldr	r1, [pc, #448]	; (8003b40 <HAL_I2C_Master_Transmit+0x1f4>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 faf4 	bl	8003f6c <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
 800398c:	e0d3      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_I2C_Master_Transmit+0x50>
 8003998:	2302      	movs	r3, #2
 800399a:	e0cc      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d007      	beq.n	80039c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2221      	movs	r2, #33	; 0x21
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2210      	movs	r2, #16
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	893a      	ldrh	r2, [r7, #8]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a50      	ldr	r2, [pc, #320]	; (8003b44 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a04:	8979      	ldrh	r1, [r7, #10]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f996 	bl	8003d3c <I2C_MasterRequestWrite>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e08d      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a30:	e066      	b.n	8003b00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	6a39      	ldr	r1, [r7, #32]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fb6e 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d107      	bne.n	8003a5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06b      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_I2C_Master_Transmit+0x188>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d017      	beq.n	8003ad4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	6a39      	ldr	r1, [r7, #32]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fb5e 	bl	800419a <I2C_WaitOnBTFFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00d      	beq.n	8003b00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d107      	bne.n	8003afc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e01a      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d194      	bne.n	8003a32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	00100002 	.word	0x00100002
 8003b44:	ffff0000 	.word	0xffff0000

08003b48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	4608      	mov	r0, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	817b      	strh	r3, [r7, #10]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	813b      	strh	r3, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b62:	f7ff f845 	bl	8002bf0 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	f040 80d9 	bne.w	8003d28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2319      	movs	r3, #25
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	496d      	ldr	r1, [pc, #436]	; (8003d34 <HAL_I2C_Mem_Write+0x1ec>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f9f3 	bl	8003f6c <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e0cc      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Mem_Write+0x56>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e0c5      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d007      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2221      	movs	r2, #33	; 0x21
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2240      	movs	r2, #64	; 0x40
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a4d      	ldr	r2, [pc, #308]	; (8003d38 <HAL_I2C_Mem_Write+0x1f0>)
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c06:	88f8      	ldrh	r0, [r7, #6]
 8003c08:	893a      	ldrh	r2, [r7, #8]
 8003c0a:	8979      	ldrh	r1, [r7, #10]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	4603      	mov	r3, r0
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f912 	bl	8003e40 <I2C_RequestMemoryWrite>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d052      	beq.n	8003cc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e081      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fa74 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d107      	bne.n	8003c4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06b      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	781a      	ldrb	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d11b      	bne.n	8003cc8 <HAL_I2C_Mem_Write+0x180>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d017      	beq.n	8003cc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1aa      	bne.n	8003c26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fa60 	bl	800419a <I2C_WaitOnBTFFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00d      	beq.n	8003cfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d107      	bne.n	8003cf8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e016      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	00100002 	.word	0x00100002
 8003d38:	ffff0000 	.word	0xffff0000

08003d3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d006      	beq.n	8003d66 <I2C_MasterRequestWrite+0x2a>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d003      	beq.n	8003d66 <I2C_MasterRequestWrite+0x2a>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d64:	d108      	bne.n	8003d78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e00b      	b.n	8003d90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	2b12      	cmp	r3, #18
 8003d7e:	d107      	bne.n	8003d90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f8e5 	bl	8003f6c <I2C_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db6:	d103      	bne.n	8003dc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e035      	b.n	8003e30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dcc:	d108      	bne.n	8003de0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dce:	897b      	ldrh	r3, [r7, #10]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	e01b      	b.n	8003e18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003de0:	897b      	ldrh	r3, [r7, #10]
 8003de2:	11db      	asrs	r3, r3, #7
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f003 0306 	and.w	r3, r3, #6
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f063 030f 	orn	r3, r3, #15
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <I2C_MasterRequestWrite+0xfc>)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f90b 	bl	800401a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e010      	b.n	8003e30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4907      	ldr	r1, [pc, #28]	; (8003e3c <I2C_MasterRequestWrite+0x100>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f8fb 	bl	800401a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	00010008 	.word	0x00010008
 8003e3c:	00010002 	.word	0x00010002

08003e40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	4608      	mov	r0, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	817b      	strh	r3, [r7, #10]
 8003e52:	460b      	mov	r3, r1
 8003e54:	813b      	strh	r3, [r7, #8]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f878 	bl	8003f6c <I2C_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e90:	d103      	bne.n	8003e9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e05f      	b.n	8003f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e9e:	897b      	ldrh	r3, [r7, #10]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	492d      	ldr	r1, [pc, #180]	; (8003f68 <I2C_RequestMemoryWrite+0x128>)
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f8b0 	bl	800401a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e04c      	b.n	8003f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003edc:	6a39      	ldr	r1, [r7, #32]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f91a 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00d      	beq.n	8003f06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d107      	bne.n	8003f02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e02b      	b.n	8003f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f0c:	893b      	ldrh	r3, [r7, #8]
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]
 8003f16:	e021      	b.n	8003f5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f18:	893b      	ldrh	r3, [r7, #8]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	6a39      	ldr	r1, [r7, #32]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f8f4 	bl	8004118 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d107      	bne.n	8003f4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e005      	b.n	8003f5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f52:	893b      	ldrh	r3, [r7, #8]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	00010002 	.word	0x00010002

08003f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f7c:	e025      	b.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d021      	beq.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fe fe33 	bl	8002bf0 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d116      	bne.n	8003fca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e023      	b.n	8004012 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d10d      	bne.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	e00c      	b.n	800400a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf0c      	ite	eq
 8004002:	2301      	moveq	r3, #1
 8004004:	2300      	movne	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	429a      	cmp	r2, r3
 800400e:	d0b6      	beq.n	8003f7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004028:	e051      	b.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004038:	d123      	bne.n	8004082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004048:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004052:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f043 0204 	orr.w	r2, r3, #4
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e046      	b.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d021      	beq.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7fe fdb1 	bl	8002bf0 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d116      	bne.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f043 0220 	orr.w	r2, r3, #32
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e020      	b.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d10c      	bne.n	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	43da      	mvns	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4013      	ands	r3, r2
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf14      	ite	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	2300      	moveq	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	e00b      	b.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	43da      	mvns	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d18d      	bne.n	800402a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004124:	e02d      	b.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f878 	bl	800421c <I2C_IsAcknowledgeFailed>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e02d      	b.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d021      	beq.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fe fd57 	bl	8002bf0 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d116      	bne.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e007      	b.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d1ca      	bne.n	8004126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041a6:	e02d      	b.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f837 	bl	800421c <I2C_IsAcknowledgeFailed>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e02d      	b.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d021      	beq.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c0:	f7fe fd16 	bl	8002bf0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d302      	bcc.n	80041d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d116      	bne.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e007      	b.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b04      	cmp	r3, #4
 8004210:	d1ca      	bne.n	80041a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004232:	d11b      	bne.n	800426c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800423c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f043 0204 	orr.w	r2, r3, #4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800427a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427c:	b08f      	sub	sp, #60	; 0x3c
 800427e:	af0a      	add	r7, sp, #40	; 0x28
 8004280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e10f      	b.n	80044ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f009 fd18 	bl	800dcdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2203      	movs	r2, #3
 80042b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f003 ff73 	bl	80081b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	687e      	ldr	r6, [r7, #4]
 80042d8:	466d      	mov	r5, sp
 80042da:	f106 0410 	add.w	r4, r6, #16
 80042de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ee:	1d33      	adds	r3, r6, #4
 80042f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042f2:	6838      	ldr	r0, [r7, #0]
 80042f4:	f003 fe4a 	bl	8007f8c <USB_CoreInit>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0d0      	b.n	80044ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f003 ff61 	bl	80081d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
 800431a:	e04a      	b.n	80043b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	333d      	adds	r3, #61	; 0x3d
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004330:	7bfa      	ldrb	r2, [r7, #15]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	333c      	adds	r3, #60	; 0x3c
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	b298      	uxth	r0, r3
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	3342      	adds	r3, #66	; 0x42
 8004358:	4602      	mov	r2, r0
 800435a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800435c:	7bfa      	ldrb	r2, [r7, #15]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	333f      	adds	r3, #63	; 0x3f
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	3344      	adds	r3, #68	; 0x44
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	3348      	adds	r3, #72	; 0x48
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	3350      	adds	r3, #80	; 0x50
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	3301      	adds	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d3af      	bcc.n	800431c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]
 80043c0:	e044      	b.n	800444c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004430:	7bfa      	ldrb	r2, [r7, #15]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	3301      	adds	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	7bfa      	ldrb	r2, [r7, #15]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d3b5      	bcc.n	80043c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	687e      	ldr	r6, [r7, #4]
 800445e:	466d      	mov	r5, sp
 8004460:	f106 0410 	add.w	r4, r6, #16
 8004464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800446a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800446c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004470:	e885 0003 	stmia.w	r5, {r0, r1}
 8004474:	1d33      	adds	r3, r6, #4
 8004476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004478:	6838      	ldr	r0, [r7, #0]
 800447a:	f003 fed7 	bl	800822c <USB_DevInit>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e00d      	b.n	80044ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f004 ff1f 	bl	80092e8 <USB_DevDisconnect>

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_PCD_Start+0x1c>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e020      	b.n	8004512 <HAL_PCD_Start+0x5e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d109      	bne.n	80044f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d005      	beq.n	80044f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f003 fe4b 	bl	8008194 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f004 fecf 	bl	80092a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800451a:	b590      	push	{r4, r7, lr}
 800451c:	b08d      	sub	sp, #52	; 0x34
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f004 ff8d 	bl	8009450 <USB_GetMode>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 839d 	bne.w	8004c78 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f004 fef1 	bl	800932a <USB_ReadInterrupts>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8393 	beq.w	8004c76 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f004 fee8 	bl	800932a <USB_ReadInterrupts>
 800455a:	4603      	mov	r3, r0
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b02      	cmp	r3, #2
 8004562:	d107      	bne.n	8004574 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f002 0202 	and.w	r2, r2, #2
 8004572:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f004 fed6 	bl	800932a <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b10      	cmp	r3, #16
 8004586:	d161      	bne.n	800464c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0210 	bic.w	r2, r2, #16
 8004596:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f003 020f 	and.w	r2, r3, #15
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	3304      	adds	r3, #4
 80045b6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	0c5b      	lsrs	r3, r3, #17
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d124      	bne.n	800460e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d035      	beq.n	800463c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	6a38      	ldr	r0, [r7, #32]
 80045e4:	f004 fd3c 	bl	8009060 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f4:	441a      	add	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004606:	441a      	add	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	619a      	str	r2, [r3, #24]
 800460c:	e016      	b.n	800463c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	0c5b      	lsrs	r3, r3, #17
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	2b06      	cmp	r3, #6
 8004618:	d110      	bne.n	800463c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004620:	2208      	movs	r2, #8
 8004622:	4619      	mov	r1, r3
 8004624:	6a38      	ldr	r0, [r7, #32]
 8004626:	f004 fd1b 	bl	8009060 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004636:	441a      	add	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0210 	orr.w	r2, r2, #16
 800464a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f004 fe6a 	bl	800932a <USB_ReadInterrupts>
 8004656:	4603      	mov	r3, r0
 8004658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800465c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004660:	d16e      	bne.n	8004740 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f004 fe70 	bl	8009350 <USB_ReadDevAllOutEpInterrupt>
 8004670:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004672:	e062      	b.n	800473a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d057      	beq.n	800472e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f004 fe95 	bl	80093b8 <USB_ReadDevOutEPInterrupt>
 800468e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00c      	beq.n	80046b4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	2301      	movs	r3, #1
 80046aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80046ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fdb0 	bl	8005214 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00c      	beq.n	80046d8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	461a      	mov	r2, r3
 80046cc:	2308      	movs	r3, #8
 80046ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80046d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 feaa 	bl	800542c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	2310      	movs	r3, #16
 80046f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470a:	461a      	mov	r2, r3
 800470c:	2320      	movs	r3, #32
 800470e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004726:	461a      	mov	r2, r3
 8004728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800472c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	3301      	adds	r3, #1
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d199      	bne.n	8004674 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f004 fdf0 	bl	800932a <USB_ReadInterrupts>
 800474a:	4603      	mov	r3, r0
 800474c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004750:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004754:	f040 80c0 	bne.w	80048d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f004 fe11 	bl	8009384 <USB_ReadDevAllInEpInterrupt>
 8004762:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004768:	e0b2      	b.n	80048d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80a7 	beq.w	80048c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f004 fe37 	bl	80093f4 <USB_ReadDevInEPInterrupt>
 8004786:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d057      	beq.n	8004842 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69f9      	ldr	r1, [r7, #28]
 80047ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b2:	4013      	ands	r3, r2
 80047b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	461a      	mov	r2, r3
 80047c4:	2301      	movs	r3, #1
 80047c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d132      	bne.n	8004836 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	3348      	adds	r3, #72	; 0x48
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e6:	4613      	mov	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4403      	add	r3, r0
 80047f0:	3344      	adds	r3, #68	; 0x44
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4419      	add	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4403      	add	r3, r0
 8004804:	3348      	adds	r3, #72	; 0x48
 8004806:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d113      	bne.n	8004836 <HAL_PCD_IRQHandler+0x31c>
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	3350      	adds	r3, #80	; 0x50
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d108      	bne.n	8004836 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800482e:	461a      	mov	r2, r3
 8004830:	2101      	movs	r1, #1
 8004832:	f004 fe3f 	bl	80094b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	b2db      	uxtb	r3, r3
 800483a:	4619      	mov	r1, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f009 face 	bl	800ddde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	461a      	mov	r2, r3
 800485a:	2308      	movs	r3, #8
 800485c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004874:	461a      	mov	r2, r3
 8004876:	2310      	movs	r3, #16
 8004878:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	461a      	mov	r2, r3
 8004892:	2340      	movs	r3, #64	; 0x40
 8004894:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d008      	beq.n	80048b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	461a      	mov	r2, r3
 80048ae:	2302      	movs	r3, #2
 80048b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80048bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fc1b 	bl	80050fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f47f af49 	bne.w	800476a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 fd24 	bl	800932a <USB_ReadInterrupts>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ec:	d122      	bne.n	8004934 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004908:	2b01      	cmp	r3, #1
 800490a:	d108      	bne.n	800491e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004914:	2100      	movs	r1, #0
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fe26 	bl	8005568 <HAL_PCDEx_LPM_Callback>
 800491c:	e002      	b.n	8004924 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f009 faca 	bl	800deb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f004 fcf6 	bl	800932a <USB_ReadInterrupts>
 800493e:	4603      	mov	r3, r0
 8004940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004948:	d112      	bne.n	8004970 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b01      	cmp	r3, #1
 8004958:	d102      	bne.n	8004960 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f009 fa86 	bl	800de6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800496e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f004 fcd8 	bl	800932a <USB_ReadInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004984:	f040 80c7 	bne.w	8004b16 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	69fa      	ldr	r2, [r7, #28]
 8004992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2110      	movs	r1, #16
 80049a2:	4618      	mov	r0, r3
 80049a4:	f003 fda6 	bl	80084f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a8:	2300      	movs	r3, #0
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ac:	e056      	b.n	8004a5c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ba:	461a      	mov	r2, r3
 80049bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049e0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	3301      	adds	r3, #1
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3a3      	bcc.n	80049ae <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004a78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d016      	beq.n	8004ab0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a92:	f043 030b 	orr.w	r3, r3, #11
 8004a96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa8:	f043 030b 	orr.w	r3, r3, #11
 8004aac:	6453      	str	r3, [r2, #68]	; 0x44
 8004aae:	e015      	b.n	8004adc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ac2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004ac6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad6:	f043 030b 	orr.w	r3, r3, #11
 8004ada:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004aee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b00:	461a      	mov	r2, r3
 8004b02:	f004 fcd7 	bl	80094b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f004 fc05 	bl	800932a <USB_ReadInterrupts>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2a:	d124      	bne.n	8004b76 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f004 fc9b 	bl	800946c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f003 fd3b 	bl	80085b6 <USB_GetDevSpeed>
 8004b40:	4603      	mov	r3, r0
 8004b42:	461a      	mov	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681c      	ldr	r4, [r3, #0]
 8004b4c:	f001 f92c 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8004b50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f003 fa78 	bl	8008050 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f009 f964 	bl	800de2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f004 fbd5 	bl	800932a <USB_ReadInterrupts>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b08      	cmp	r3, #8
 8004b88:	d10a      	bne.n	8004ba0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f009 f941 	bl	800de12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f002 0208 	and.w	r2, r2, #8
 8004b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f004 fbc0 	bl	800932a <USB_ReadInterrupts>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb4:	d10f      	bne.n	8004bd6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f009 f999 	bl	800def8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f004 fba5 	bl	800932a <USB_ReadInterrupts>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bea:	d10f      	bne.n	8004c0c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f009 f96c 	bl	800ded4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f004 fb8a 	bl	800932a <USB_ReadInterrupts>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c20:	d10a      	bne.n	8004c38 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f009 f97a 	bl	800df1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f004 fb74 	bl	800932a <USB_ReadInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d115      	bne.n	8004c78 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f009 f96a 	bl	800df38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	e000      	b.n	8004c78 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004c76:	bf00      	nop
    }
  }
}
 8004c78:	3734      	adds	r7, #52	; 0x34
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd90      	pop	{r4, r7, pc}

08004c7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	460b      	mov	r3, r1
 8004c88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_PCD_SetAddress+0x1a>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e013      	b.n	8004cc0 <HAL_PCD_SetAddress+0x42>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f004 fad2 	bl	800925a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	70fb      	strb	r3, [r7, #3]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	803b      	strh	r3, [r7, #0]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da0f      	bge.n	8004d0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	f003 020f 	and.w	r2, r3, #15
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	3338      	adds	r3, #56	; 0x38
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	3304      	adds	r3, #4
 8004d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	705a      	strb	r2, [r3, #1]
 8004d0c:	e00f      	b.n	8004d2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 020f 	and.w	r2, r3, #15
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4413      	add	r3, r2
 8004d24:	3304      	adds	r3, #4
 8004d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d3a:	883a      	ldrh	r2, [r7, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	78ba      	ldrb	r2, [r7, #2]
 8004d44:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d58:	78bb      	ldrb	r3, [r7, #2]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d102      	bne.n	8004d64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_PCD_EP_Open+0xaa>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e00e      	b.n	8004d90 <HAL_PCD_EP_Open+0xc8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f003 fc3d 	bl	8008600 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da0f      	bge.n	8004dcc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	f003 020f 	and.w	r2, r3, #15
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	3338      	adds	r3, #56	; 0x38
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	705a      	strb	r2, [r3, #1]
 8004dca:	e00f      	b.n	8004dec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	f003 020f 	and.w	r2, r3, #15
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	3304      	adds	r3, #4
 8004de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_PCD_EP_Close+0x6e>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e00e      	b.n	8004e24 <HAL_PCD_EP_Close+0x8c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fc7b 	bl	8008710 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e3c:	7afb      	ldrb	r3, [r7, #11]
 8004e3e:	f003 020f 	and.w	r2, r3, #15
 8004e42:	4613      	mov	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	3304      	adds	r3, #4
 8004e54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2200      	movs	r2, #0
 8004e66:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e6e:	7afb      	ldrb	r3, [r7, #11]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d102      	bne.n	8004e88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e88:	7afb      	ldrb	r3, [r7, #11]
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6979      	ldr	r1, [r7, #20]
 8004ea0:	f003 ff56 	bl	8008d50 <USB_EP0StartXfer>
 8004ea4:	e008      	b.n	8004eb8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	f003 fd08 	bl	80088c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004ee4:	681b      	ldr	r3, [r3, #0]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	460b      	mov	r3, r1
 8004f00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	3338      	adds	r3, #56	; 0x38
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4413      	add	r3, r2
 8004f16:	3304      	adds	r3, #4
 8004f18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f32:	7afb      	ldrb	r3, [r7, #11]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d102      	bne.n	8004f4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f4c:	7afb      	ldrb	r3, [r7, #11]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	6979      	ldr	r1, [r7, #20]
 8004f64:	f003 fef4 	bl	8008d50 <USB_EP0StartXfer>
 8004f68:	e008      	b.n	8004f7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	6979      	ldr	r1, [r7, #20]
 8004f78:	f003 fca6 	bl	80088c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	f003 020f 	and.w	r2, r3, #15
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d901      	bls.n	8004fa4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e050      	b.n	8005046 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	da0f      	bge.n	8004fcc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	f003 020f 	and.w	r2, r3, #15
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	3338      	adds	r3, #56	; 0x38
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	705a      	strb	r2, [r3, #1]
 8004fca:	e00d      	b.n	8004fe8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	3304      	adds	r3, #4
 8004fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_PCD_EP_SetStall+0x82>
 8005004:	2302      	movs	r3, #2
 8005006:	e01e      	b.n	8005046 <HAL_PCD_EP_SetStall+0xc0>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68f9      	ldr	r1, [r7, #12]
 8005016:	4618      	mov	r0, r3
 8005018:	f004 f84b 	bl	80090b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	b2d9      	uxtb	r1, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005036:	461a      	mov	r2, r3
 8005038:	f004 fa3c 	bl	80094b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	f003 020f 	and.w	r2, r3, #15
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	d901      	bls.n	800506c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e042      	b.n	80050f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800506c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005070:	2b00      	cmp	r3, #0
 8005072:	da0f      	bge.n	8005094 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	4613      	mov	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	3338      	adds	r3, #56	; 0x38
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	4413      	add	r3, r2
 8005088:	3304      	adds	r3, #4
 800508a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	705a      	strb	r2, [r3, #1]
 8005092:	e00f      	b.n	80050b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	f003 020f 	and.w	r2, r3, #15
 800509a:	4613      	mov	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	3304      	adds	r3, #4
 80050ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_PCD_EP_ClrStall+0x86>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e00e      	b.n	80050f2 <HAL_PCD_EP_ClrStall+0xa4>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68f9      	ldr	r1, [r7, #12]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f004 f853 	bl	800918e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b08a      	sub	sp, #40	; 0x28
 80050fe:	af02      	add	r7, sp, #8
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	3338      	adds	r3, #56	; 0x38
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	3304      	adds	r3, #4
 8005120:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	429a      	cmp	r2, r3
 800512c:	d901      	bls.n	8005132 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e06c      	b.n	800520c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	429a      	cmp	r2, r3
 8005146:	d902      	bls.n	800514e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3303      	adds	r3, #3
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005156:	e02b      	b.n	80051b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	429a      	cmp	r2, r3
 800516c:	d902      	bls.n	8005174 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	3303      	adds	r3, #3
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	68d9      	ldr	r1, [r3, #12]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800518c:	b2db      	uxtb	r3, r3
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	4603      	mov	r3, r0
 8005192:	6978      	ldr	r0, [r7, #20]
 8005194:	f003 ff2f 	bl	8008ff6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	441a      	add	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	699a      	ldr	r2, [r3, #24]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	441a      	add	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d809      	bhi.n	80051da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d203      	bcs.n	80051da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1be      	bne.n	8005158 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d811      	bhi.n	800520a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	2201      	movs	r2, #1
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	43db      	mvns	r3, r3
 8005200:	6939      	ldr	r1, [r7, #16]
 8005202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005206:	4013      	ands	r3, r2
 8005208:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	333c      	adds	r3, #60	; 0x3c
 800522c:	3304      	adds	r3, #4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b01      	cmp	r3, #1
 8005248:	f040 80a0 	bne.w	800538c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d015      	beq.n	8005282 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a72      	ldr	r2, [pc, #456]	; (8005424 <PCD_EP_OutXfrComplete_int+0x210>)
 800525a:	4293      	cmp	r3, r2
 800525c:	f240 80dd 	bls.w	800541a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 80d7 	beq.w	800541a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005278:	461a      	mov	r2, r3
 800527a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527e:	6093      	str	r3, [r2, #8]
 8005280:	e0cb      	b.n	800541a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	461a      	mov	r2, r3
 800529a:	2320      	movs	r3, #32
 800529c:	6093      	str	r3, [r2, #8]
 800529e:	e0bc      	b.n	800541a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 80b7 	bne.w	800541a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4a5d      	ldr	r2, [pc, #372]	; (8005424 <PCD_EP_OutXfrComplete_int+0x210>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d90f      	bls.n	80052d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	461a      	mov	r2, r3
 80052cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d0:	6093      	str	r3, [r2, #8]
 80052d2:	e0a2      	b.n	800541a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80052e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	0159      	lsls	r1, r3, #5
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	440b      	add	r3, r1
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80052fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4403      	add	r3, r0
 800530a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800530e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4403      	add	r3, r0
 8005332:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4419      	add	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	4613      	mov	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4403      	add	r3, r0
 8005348:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800534c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d114      	bne.n	800537e <PCD_EP_OutXfrComplete_int+0x16a>
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d108      	bne.n	800537e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005376:	461a      	mov	r2, r3
 8005378:	2101      	movs	r1, #1
 800537a:	f004 f89b 	bl	80094b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f008 fd0f 	bl	800dda8 <HAL_PCD_DataOutStageCallback>
 800538a:	e046      	b.n	800541a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4a26      	ldr	r2, [pc, #152]	; (8005428 <PCD_EP_OutXfrComplete_int+0x214>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d124      	bne.n	80053de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	461a      	mov	r2, r3
 80053ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b0:	6093      	str	r3, [r2, #8]
 80053b2:	e032      	b.n	800541a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	461a      	mov	r2, r3
 80053cc:	2320      	movs	r3, #32
 80053ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f008 fce6 	bl	800dda8 <HAL_PCD_DataOutStageCallback>
 80053dc:	e01d      	b.n	800541a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d114      	bne.n	800540e <PCD_EP_OutXfrComplete_int+0x1fa>
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	1a9b      	subs	r3, r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d108      	bne.n	800540e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005406:	461a      	mov	r2, r3
 8005408:	2100      	movs	r1, #0
 800540a:	f004 f853 	bl	80094b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f008 fcc7 	bl	800dda8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	4f54300a 	.word	0x4f54300a
 8005428:	4f54310a 	.word	0x4f54310a

0800542c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	333c      	adds	r3, #60	; 0x3c
 8005444:	3304      	adds	r3, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d90e      	bls.n	8005480 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	461a      	mov	r2, r3
 800547a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f008 fc7f 	bl	800dd84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d90c      	bls.n	80054a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d108      	bne.n	80054a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054a0:	461a      	mov	r2, r3
 80054a2:	2101      	movs	r1, #1
 80054a4:	f004 f806 	bl	80094b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	4f54300a 	.word	0x4f54300a

080054b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
 80054c4:	4613      	mov	r3, r2
 80054c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054d6:	883b      	ldrh	r3, [r7, #0]
 80054d8:	0419      	lsls	r1, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28
 80054e4:	e028      	b.n	8005538 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4413      	add	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]
 80054f8:	e00d      	b.n	8005516 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	3340      	adds	r3, #64	; 0x40
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	0c1b      	lsrs	r3, r3, #16
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4413      	add	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	3301      	adds	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
 8005516:	7bfa      	ldrb	r2, [r7, #15]
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	3b01      	subs	r3, #1
 800551c:	429a      	cmp	r2, r3
 800551e:	d3ec      	bcc.n	80054fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005520:	883b      	ldrh	r3, [r7, #0]
 8005522:	0418      	lsls	r0, r3, #16
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	3b01      	subs	r3, #1
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	4302      	orrs	r2, r0
 8005530:	3340      	adds	r3, #64	; 0x40
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	887a      	ldrh	r2, [r7, #2]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e264      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d075      	beq.n	800568a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800559e:	4ba3      	ldr	r3, [pc, #652]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d00c      	beq.n	80055c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055aa:	4ba0      	ldr	r3, [pc, #640]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d112      	bne.n	80055dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055b6:	4b9d      	ldr	r3, [pc, #628]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c2:	d10b      	bne.n	80055dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c4:	4b99      	ldr	r3, [pc, #612]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d05b      	beq.n	8005688 <HAL_RCC_OscConfig+0x108>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d157      	bne.n	8005688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e23f      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e4:	d106      	bne.n	80055f4 <HAL_RCC_OscConfig+0x74>
 80055e6:	4b91      	ldr	r3, [pc, #580]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a90      	ldr	r2, [pc, #576]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e01d      	b.n	8005630 <HAL_RCC_OscConfig+0xb0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055fc:	d10c      	bne.n	8005618 <HAL_RCC_OscConfig+0x98>
 80055fe:	4b8b      	ldr	r3, [pc, #556]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a8a      	ldr	r2, [pc, #552]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	4b88      	ldr	r3, [pc, #544]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a87      	ldr	r2, [pc, #540]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e00b      	b.n	8005630 <HAL_RCC_OscConfig+0xb0>
 8005618:	4b84      	ldr	r3, [pc, #528]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a83      	ldr	r2, [pc, #524]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800561e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	4b81      	ldr	r3, [pc, #516]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a80      	ldr	r2, [pc, #512]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800562a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d013      	beq.n	8005660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005638:	f7fd fada 	bl	8002bf0 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005640:	f7fd fad6 	bl	8002bf0 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e204      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005652:	4b76      	ldr	r3, [pc, #472]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCC_OscConfig+0xc0>
 800565e:	e014      	b.n	800568a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005660:	f7fd fac6 	bl	8002bf0 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005668:	f7fd fac2 	bl	8002bf0 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e1f0      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800567a:	4b6c      	ldr	r3, [pc, #432]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0xe8>
 8005686:	e000      	b.n	800568a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d063      	beq.n	800575e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005696:	4b65      	ldr	r3, [pc, #404]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00b      	beq.n	80056ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056a2:	4b62      	ldr	r3, [pc, #392]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d11c      	bne.n	80056e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ae:	4b5f      	ldr	r3, [pc, #380]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d116      	bne.n	80056e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ba:	4b5c      	ldr	r3, [pc, #368]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_RCC_OscConfig+0x152>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d001      	beq.n	80056d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e1c4      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d2:	4b56      	ldr	r3, [pc, #344]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4952      	ldr	r1, [pc, #328]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e6:	e03a      	b.n	800575e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d020      	beq.n	8005732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056f0:	4b4f      	ldr	r3, [pc, #316]	; (8005830 <HAL_RCC_OscConfig+0x2b0>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f6:	f7fd fa7b 	bl	8002bf0 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056fe:	f7fd fa77 	bl	8002bf0 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e1a5      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005710:	4b46      	ldr	r3, [pc, #280]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571c:	4b43      	ldr	r3, [pc, #268]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	4940      	ldr	r1, [pc, #256]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800572c:	4313      	orrs	r3, r2
 800572e:	600b      	str	r3, [r1, #0]
 8005730:	e015      	b.n	800575e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005732:	4b3f      	ldr	r3, [pc, #252]	; (8005830 <HAL_RCC_OscConfig+0x2b0>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fd fa5a 	bl	8002bf0 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005740:	f7fd fa56 	bl	8002bf0 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e184      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005752:	4b36      	ldr	r3, [pc, #216]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d030      	beq.n	80057cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d016      	beq.n	80057a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005772:	4b30      	ldr	r3, [pc, #192]	; (8005834 <HAL_RCC_OscConfig+0x2b4>)
 8005774:	2201      	movs	r2, #1
 8005776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fd fa3a 	bl	8002bf0 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005780:	f7fd fa36 	bl	8002bf0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e164      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005792:	4b26      	ldr	r3, [pc, #152]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x200>
 800579e:	e015      	b.n	80057cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057a0:	4b24      	ldr	r3, [pc, #144]	; (8005834 <HAL_RCC_OscConfig+0x2b4>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a6:	f7fd fa23 	bl	8002bf0 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ae:	f7fd fa1f 	bl	8002bf0 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e14d      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f0      	bne.n	80057ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a0 	beq.w	800591a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057da:	2300      	movs	r3, #0
 80057dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10f      	bne.n	800580a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	4a0e      	ldr	r2, [pc, #56]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f8:	6413      	str	r3, [r2, #64]	; 0x40
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005802:	60bb      	str	r3, [r7, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005806:	2301      	movs	r3, #1
 8005808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <HAL_RCC_OscConfig+0x2b8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d121      	bne.n	800585a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005816:	4b08      	ldr	r3, [pc, #32]	; (8005838 <HAL_RCC_OscConfig+0x2b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a07      	ldr	r2, [pc, #28]	; (8005838 <HAL_RCC_OscConfig+0x2b8>)
 800581c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005822:	f7fd f9e5 	bl	8002bf0 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005828:	e011      	b.n	800584e <HAL_RCC_OscConfig+0x2ce>
 800582a:	bf00      	nop
 800582c:	40023800 	.word	0x40023800
 8005830:	42470000 	.word	0x42470000
 8005834:	42470e80 	.word	0x42470e80
 8005838:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583c:	f7fd f9d8 	bl	8002bf0 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e106      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584e:	4b85      	ldr	r3, [pc, #532]	; (8005a64 <HAL_RCC_OscConfig+0x4e4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d106      	bne.n	8005870 <HAL_RCC_OscConfig+0x2f0>
 8005862:	4b81      	ldr	r3, [pc, #516]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	4a80      	ldr	r2, [pc, #512]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	6713      	str	r3, [r2, #112]	; 0x70
 800586e:	e01c      	b.n	80058aa <HAL_RCC_OscConfig+0x32a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0x312>
 8005878:	4b7b      	ldr	r3, [pc, #492]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	4a7a      	ldr	r2, [pc, #488]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800587e:	f043 0304 	orr.w	r3, r3, #4
 8005882:	6713      	str	r3, [r2, #112]	; 0x70
 8005884:	4b78      	ldr	r3, [pc, #480]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	4a77      	ldr	r2, [pc, #476]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6713      	str	r3, [r2, #112]	; 0x70
 8005890:	e00b      	b.n	80058aa <HAL_RCC_OscConfig+0x32a>
 8005892:	4b75      	ldr	r3, [pc, #468]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	4a74      	ldr	r2, [pc, #464]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	6713      	str	r3, [r2, #112]	; 0x70
 800589e:	4b72      	ldr	r3, [pc, #456]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	4a71      	ldr	r2, [pc, #452]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fd f99d 	bl	8002bf0 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fd f999 	bl	8002bf0 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0c5      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d0:	4b65      	ldr	r3, [pc, #404]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ee      	beq.n	80058ba <HAL_RCC_OscConfig+0x33a>
 80058dc:	e014      	b.n	8005908 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058de:	f7fd f987 	bl	8002bf0 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fd f983 	bl	8002bf0 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e0af      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fc:	4b5a      	ldr	r3, [pc, #360]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ee      	bne.n	80058e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590e:	4b56      	ldr	r3, [pc, #344]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	4a55      	ldr	r2, [pc, #340]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005918:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 809b 	beq.w	8005a5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005924:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d05c      	beq.n	80059ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d141      	bne.n	80059bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b4c      	ldr	r3, [pc, #304]	; (8005a6c <HAL_RCC_OscConfig+0x4ec>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fd f957 	bl	8002bf0 <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005946:	f7fd f953 	bl	8002bf0 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e081      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005958:	4b43      	ldr	r3, [pc, #268]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f0      	bne.n	8005946 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	019b      	lsls	r3, r3, #6
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	085b      	lsrs	r3, r3, #1
 800597c:	3b01      	subs	r3, #1
 800597e:	041b      	lsls	r3, r3, #16
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	061b      	lsls	r3, r3, #24
 8005988:	4937      	ldr	r1, [pc, #220]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800598a:	4313      	orrs	r3, r2
 800598c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598e:	4b37      	ldr	r3, [pc, #220]	; (8005a6c <HAL_RCC_OscConfig+0x4ec>)
 8005990:	2201      	movs	r2, #1
 8005992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005994:	f7fd f92c 	bl	8002bf0 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800599c:	f7fd f928 	bl	8002bf0 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e056      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ae:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0x41c>
 80059ba:	e04e      	b.n	8005a5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059bc:	4b2b      	ldr	r3, [pc, #172]	; (8005a6c <HAL_RCC_OscConfig+0x4ec>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fd f915 	bl	8002bf0 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fd f911 	bl	8002bf0 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e03f      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059dc:	4b22      	ldr	r3, [pc, #136]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f0      	bne.n	80059ca <HAL_RCC_OscConfig+0x44a>
 80059e8:	e037      	b.n	8005a5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e032      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059f6:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d028      	beq.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d121      	bne.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d11a      	bne.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a26:	4013      	ands	r3, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d111      	bne.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d107      	bne.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40007000 	.word	0x40007000
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	42470060 	.word	0x42470060

08005a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0cc      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a84:	4b68      	ldr	r3, [pc, #416]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d90c      	bls.n	8005aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b65      	ldr	r3, [pc, #404]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9a:	4b63      	ldr	r3, [pc, #396]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d001      	beq.n	8005aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0b8      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d020      	beq.n	8005afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ac4:	4b59      	ldr	r3, [pc, #356]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4a58      	ldr	r2, [pc, #352]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005adc:	4b53      	ldr	r3, [pc, #332]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a52      	ldr	r2, [pc, #328]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae8:	4b50      	ldr	r3, [pc, #320]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	494d      	ldr	r1, [pc, #308]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d044      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d107      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0e:	4b47      	ldr	r3, [pc, #284]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d119      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e07f      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d003      	beq.n	8005b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b2e:	4b3f      	ldr	r3, [pc, #252]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d109      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e06f      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b3e:	4b3b      	ldr	r3, [pc, #236]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e067      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f023 0203 	bic.w	r2, r3, #3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	4934      	ldr	r1, [pc, #208]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b60:	f7fd f846 	bl	8002bf0 <HAL_GetTick>
 8005b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b66:	e00a      	b.n	8005b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b68:	f7fd f842 	bl	8002bf0 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e04f      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	4b2b      	ldr	r3, [pc, #172]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 020c 	and.w	r2, r3, #12
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d1eb      	bne.n	8005b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b90:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d20c      	bcs.n	8005bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba6:	4b20      	ldr	r3, [pc, #128]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d001      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e032      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bc4:	4b19      	ldr	r3, [pc, #100]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4916      	ldr	r1, [pc, #88]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005be2:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	490e      	ldr	r1, [pc, #56]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bf6:	f000 f821 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	091b      	lsrs	r3, r3, #4
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	490a      	ldr	r1, [pc, #40]	; (8005c30 <HAL_RCC_ClockConfig+0x1c0>)
 8005c08:	5ccb      	ldrb	r3, [r1, r3]
 8005c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_RCC_ClockConfig+0x1c8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fc ffa6 	bl	8002b68 <HAL_InitTick>

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40023c00 	.word	0x40023c00
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	08013a88 	.word	0x08013a88
 8005c34:	20000030 	.word	0x20000030
 8005c38:	20000034 	.word	0x20000034

08005c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c3c:	b5b0      	push	{r4, r5, r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c42:	2100      	movs	r1, #0
 8005c44:	6079      	str	r1, [r7, #4]
 8005c46:	2100      	movs	r1, #0
 8005c48:	60f9      	str	r1, [r7, #12]
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c4e:	2100      	movs	r1, #0
 8005c50:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c52:	4952      	ldr	r1, [pc, #328]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c54:	6889      	ldr	r1, [r1, #8]
 8005c56:	f001 010c 	and.w	r1, r1, #12
 8005c5a:	2908      	cmp	r1, #8
 8005c5c:	d00d      	beq.n	8005c7a <HAL_RCC_GetSysClockFreq+0x3e>
 8005c5e:	2908      	cmp	r1, #8
 8005c60:	f200 8094 	bhi.w	8005d8c <HAL_RCC_GetSysClockFreq+0x150>
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_RCC_GetSysClockFreq+0x32>
 8005c68:	2904      	cmp	r1, #4
 8005c6a:	d003      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0x38>
 8005c6c:	e08e      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c6e:	4b4c      	ldr	r3, [pc, #304]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005c70:	60bb      	str	r3, [r7, #8]
       break;
 8005c72:	e08e      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c74:	4b4b      	ldr	r3, [pc, #300]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005c76:	60bb      	str	r3, [r7, #8]
      break;
 8005c78:	e08b      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c7a:	4948      	ldr	r1, [pc, #288]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c7c:	6849      	ldr	r1, [r1, #4]
 8005c7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005c82:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c84:	4945      	ldr	r1, [pc, #276]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c86:	6849      	ldr	r1, [r1, #4]
 8005c88:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005c8c:	2900      	cmp	r1, #0
 8005c8e:	d024      	beq.n	8005cda <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c90:	4942      	ldr	r1, [pc, #264]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c92:	6849      	ldr	r1, [r1, #4]
 8005c94:	0989      	lsrs	r1, r1, #6
 8005c96:	4608      	mov	r0, r1
 8005c98:	f04f 0100 	mov.w	r1, #0
 8005c9c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ca0:	f04f 0500 	mov.w	r5, #0
 8005ca4:	ea00 0204 	and.w	r2, r0, r4
 8005ca8:	ea01 0305 	and.w	r3, r1, r5
 8005cac:	493d      	ldr	r1, [pc, #244]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005cae:	fb01 f003 	mul.w	r0, r1, r3
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	fb01 f102 	mul.w	r1, r1, r2
 8005cb8:	1844      	adds	r4, r0, r1
 8005cba:	493a      	ldr	r1, [pc, #232]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005cbc:	fba2 0101 	umull	r0, r1, r2, r1
 8005cc0:	1863      	adds	r3, r4, r1
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	f7fa ff8e 	bl	8000bec <__aeabi_uldivmod>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	e04a      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cda:	4b30      	ldr	r3, [pc, #192]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	099b      	lsrs	r3, r3, #6
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	ea02 0400 	and.w	r4, r2, r0
 8005cf2:	ea03 0501 	and.w	r5, r3, r1
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	014b      	lsls	r3, r1, #5
 8005d04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d08:	0142      	lsls	r2, r0, #5
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	1b00      	subs	r0, r0, r4
 8005d10:	eb61 0105 	sbc.w	r1, r1, r5
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	f04f 0300 	mov.w	r3, #0
 8005d1c:	018b      	lsls	r3, r1, #6
 8005d1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d22:	0182      	lsls	r2, r0, #6
 8005d24:	1a12      	subs	r2, r2, r0
 8005d26:	eb63 0301 	sbc.w	r3, r3, r1
 8005d2a:	f04f 0000 	mov.w	r0, #0
 8005d2e:	f04f 0100 	mov.w	r1, #0
 8005d32:	00d9      	lsls	r1, r3, #3
 8005d34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d38:	00d0      	lsls	r0, r2, #3
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	1912      	adds	r2, r2, r4
 8005d40:	eb45 0303 	adc.w	r3, r5, r3
 8005d44:	f04f 0000 	mov.w	r0, #0
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	0299      	lsls	r1, r3, #10
 8005d4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d52:	0290      	lsls	r0, r2, #10
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	f7fa ff42 	bl	8000bec <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	60bb      	str	r3, [r7, #8]
      break;
 8005d8a:	e002      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d8c:	4b04      	ldr	r3, [pc, #16]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005d8e:	60bb      	str	r3, [r7, #8]
      break;
 8005d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d92:	68bb      	ldr	r3, [r7, #8]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	00f42400 	.word	0x00f42400
 8005da4:	017d7840 	.word	0x017d7840

08005da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dac:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dae:	681b      	ldr	r3, [r3, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000030 	.word	0x20000030

08005dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dc4:	f7ff fff0 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	0a9b      	lsrs	r3, r3, #10
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	4903      	ldr	r1, [pc, #12]	; (8005de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40023800 	.word	0x40023800
 8005de4:	08013a98 	.word	0x08013a98

08005de8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d105      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d038      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e10:	4b68      	ldr	r3, [pc, #416]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e16:	f7fc feeb 	bl	8002bf0 <HAL_GetTick>
 8005e1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e1e:	f7fc fee7 	bl	8002bf0 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e0bd      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e30:	4b61      	ldr	r3, [pc, #388]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f0      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	019b      	lsls	r3, r3, #6
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	071b      	lsls	r3, r3, #28
 8005e4e:	495a      	ldr	r1, [pc, #360]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e56:	4b57      	ldr	r3, [pc, #348]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e5c:	f7fc fec8 	bl	8002bf0 <HAL_GetTick>
 8005e60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e64:	f7fc fec4 	bl	8002bf0 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e09a      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e76:	4b50      	ldr	r3, [pc, #320]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 8083 	beq.w	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	4b48      	ldr	r3, [pc, #288]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	4a47      	ldr	r2, [pc, #284]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea0:	4b45      	ldr	r3, [pc, #276]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005eac:	4b43      	ldr	r3, [pc, #268]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a42      	ldr	r2, [pc, #264]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb8:	f7fc fe9a 	bl	8002bf0 <HAL_GetTick>
 8005ebc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ec0:	f7fc fe96 	bl	8002bf0 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e06c      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ed2:	4b3a      	ldr	r3, [pc, #232]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ede:	4b36      	ldr	r3, [pc, #216]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d02f      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d028      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005efc:	4b2e      	ldr	r3, [pc, #184]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f04:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f06:	4b2e      	ldr	r3, [pc, #184]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f0c:	4b2c      	ldr	r3, [pc, #176]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f12:	4a29      	ldr	r2, [pc, #164]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f18:	4b27      	ldr	r3, [pc, #156]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d114      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f24:	f7fc fe64 	bl	8002bf0 <HAL_GetTick>
 8005f28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2a:	e00a      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f2c:	f7fc fe60 	bl	8002bf0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e034      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f42:	4b1d      	ldr	r3, [pc, #116]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0ee      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f5a:	d10d      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f70:	4911      	ldr	r1, [pc, #68]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	608b      	str	r3, [r1, #8]
 8005f76:	e005      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005f78:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a0e      	ldr	r2, [pc, #56]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f82:	6093      	str	r3, [r2, #8]
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f90:	4909      	ldr	r1, [pc, #36]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	7d1a      	ldrb	r2, [r3, #20]
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005fa8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	42470068 	.word	0x42470068
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	40007000 	.word	0x40007000
 8005fc0:	42470e40 	.word	0x42470e40
 8005fc4:	424711e0 	.word	0x424711e0

08005fc8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e083      	b.n	80060e2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	7f5b      	ldrb	r3, [r3, #29]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fc fb14 	bl	8002618 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	22ca      	movs	r2, #202	; 0xca
 8005ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2253      	movs	r2, #83	; 0x53
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f897 	bl	800613a <RTC_EnterInitMode>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2204      	movs	r2, #4
 800601e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e05e      	b.n	80060e2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006036:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6899      	ldr	r1, [r3, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68d2      	ldr	r2, [r2, #12]
 800605e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6919      	ldr	r1, [r3, #16]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	041a      	lsls	r2, r3, #16
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006082:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10e      	bne.n	80060b0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f829 	bl	80060ea <HAL_RTC_WaitForSynchro>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	22ff      	movs	r2, #255	; 0xff
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e018      	b.n	80060e2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060be:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	22ff      	movs	r2, #255	; 0xff
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80060e0:	2300      	movs	r3, #0
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006104:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006106:	f7fc fd73 	bl	8002bf0 <HAL_GetTick>
 800610a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800610c:	e009      	b.n	8006122 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800610e:	f7fc fd6f 	bl	8002bf0 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800611c:	d901      	bls.n	8006122 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e007      	b.n	8006132 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0ee      	beq.n	800610e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d119      	bne.n	8006188 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800615e:	f7fc fd47 	bl	8002bf0 <HAL_GetTick>
 8006162:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006164:	e009      	b.n	800617a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006166:	f7fc fd43 	bl	8002bf0 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006174:	d901      	bls.n	800617a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e007      	b.n	800618a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0ee      	beq.n	8006166 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e022      	b.n	80061ea <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fc fa44 	bl	8002644 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2203      	movs	r2, #3
 80061c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f815 	bl	80061f4 <HAL_SD_InitCard>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e00a      	b.n	80061ea <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061f4:	b5b0      	push	{r4, r5, r7, lr}
 80061f6:	b08e      	sub	sp, #56	; 0x38
 80061f8:	af04      	add	r7, sp, #16
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006204:	2300      	movs	r3, #0
 8006206:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800620c:	2300      	movs	r3, #0
 800620e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006210:	2376      	movs	r3, #118	; 0x76
 8006212:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681d      	ldr	r5, [r3, #0]
 8006218:	466c      	mov	r4, sp
 800621a:	f107 0314 	add.w	r3, r7, #20
 800621e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800622c:	4628      	mov	r0, r5
 800622e:	f001 f938 	bl	80074a2 <SDIO_Init>
 8006232:	4603      	mov	r3, r0
 8006234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e04c      	b.n	80062de <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006244:	4b28      	ldr	r3, [pc, #160]	; (80062e8 <HAL_SD_InitCard+0xf4>)
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f001 f970 	bl	8007534 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006254:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <HAL_SD_InitCard+0xf4>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 ff02 	bl	8007064 <SD_PowerON>
 8006260:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e02e      	b.n	80062de <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fe23 	bl	8006ecc <SD_InitCard>
 8006286:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e01b      	b.n	80062de <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 f9d3 	bl	800765a <SDMMC_CmdBlockLength>
 80062b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00f      	beq.n	80062dc <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <HAL_SD_InitCard+0xf8>)
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3728      	adds	r7, #40	; 0x28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bdb0      	pop	{r4, r5, r7, pc}
 80062e6:	bf00      	nop
 80062e8:	422580a0 	.word	0x422580a0
 80062ec:	004005ff 	.word	0x004005ff

080062f0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b092      	sub	sp, #72	; 0x48
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80062fe:	f7fc fc77 	bl	8002bf0 <HAL_GetTick>
 8006302:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d107      	bne.n	8006322 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e1bd      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b01      	cmp	r3, #1
 800632c:	f040 81b0 	bne.w	8006690 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	441a      	add	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006340:	429a      	cmp	r2, r3
 8006342:	d907      	bls.n	8006354 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e1a4      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2203      	movs	r2, #3
 8006358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2200      	movs	r2, #0
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006368:	2b01      	cmp	r3, #1
 800636a:	d002      	beq.n	8006372 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	025b      	lsls	r3, r3, #9
 8006370:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006372:	f04f 33ff 	mov.w	r3, #4294967295
 8006376:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	025b      	lsls	r3, r3, #9
 800637c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800637e:	2390      	movs	r3, #144	; 0x90
 8006380:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006382:	2302      	movs	r3, #2
 8006384:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006386:	2300      	movs	r3, #0
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800638a:	2301      	movs	r3, #1
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f107 0214 	add.w	r2, r7, #20
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f001 f932 	bl	8007602 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d90a      	bls.n	80063ba <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2202      	movs	r2, #2
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 f996 	bl	80076e2 <SDMMC_CmdReadMultiBlock>
 80063b6:	6478      	str	r0, [r7, #68]	; 0x44
 80063b8:	e009      	b.n	80063ce <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f969 	bl	800769e <SDMMC_CmdReadSingleBlock>
 80063cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d012      	beq.n	80063fa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a7a      	ldr	r2, [pc, #488]	; (80065c4 <HAL_SD_ReadBlocks+0x2d4>)
 80063da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e2:	431a      	orrs	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e151      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80063fe:	e061      	b.n	80064c4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d03c      	beq.n	8006488 <HAL_SD_ReadBlocks+0x198>
 800640e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d039      	beq.n	8006488 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006414:	2300      	movs	r3, #0
 8006416:	643b      	str	r3, [r7, #64]	; 0x40
 8006418:	e033      	b.n	8006482 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f001 f86a 	bl	80074f8 <SDIO_ReadFIFO>
 8006424:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	b2da      	uxtb	r2, r3
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800642e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006430:	3301      	adds	r3, #1
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006436:	3b01      	subs	r3, #1
 8006438:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	0a1b      	lsrs	r3, r3, #8
 800643e:	b2da      	uxtb	r2, r3
 8006440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006442:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	3301      	adds	r3, #1
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	3b01      	subs	r3, #1
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	0c1b      	lsrs	r3, r3, #16
 8006454:	b2da      	uxtb	r2, r3
 8006456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006458:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800645a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645c:	3301      	adds	r3, #1
 800645e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006462:	3b01      	subs	r3, #1
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	0e1b      	lsrs	r3, r3, #24
 800646a:	b2da      	uxtb	r2, r3
 800646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	3301      	adds	r3, #1
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006478:	3b01      	subs	r3, #1
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800647c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647e:	3301      	adds	r3, #1
 8006480:	643b      	str	r3, [r7, #64]	; 0x40
 8006482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006484:	2b07      	cmp	r3, #7
 8006486:	d9c8      	bls.n	800641a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006488:	f7fc fbb2 	bl	8002bf0 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006494:	429a      	cmp	r2, r3
 8006496:	d902      	bls.n	800649e <HAL_SD_ReadBlocks+0x1ae>
 8006498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800649a:	2b00      	cmp	r3, #0
 800649c:	d112      	bne.n	80064c4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a48      	ldr	r2, [pc, #288]	; (80065c4 <HAL_SD_ReadBlocks+0x2d4>)
 80064a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e0ec      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ca:	f240 332a 	movw	r3, #810	; 0x32a
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d095      	beq.n	8006400 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d022      	beq.n	8006528 <HAL_SD_ReadBlocks+0x238>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d91f      	bls.n	8006528 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d01b      	beq.n	8006528 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 f95b 	bl	80077b0 <SDMMC_CmdStopTransfer>
 80064fa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80064fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d012      	beq.n	8006528 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2f      	ldr	r2, [pc, #188]	; (80065c4 <HAL_SD_ReadBlocks+0x2d4>)
 8006508:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800650e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006510:	431a      	orrs	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0ba      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d012      	beq.n	800655c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <HAL_SD_ReadBlocks+0x2d4>)
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	f043 0208 	orr.w	r2, r3, #8
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0a0      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d012      	beq.n	8006590 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a15      	ldr	r2, [pc, #84]	; (80065c4 <HAL_SD_ReadBlocks+0x2d4>)
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	f043 0202 	orr.w	r2, r3, #2
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e086      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d063      	beq.n	8006666 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a08      	ldr	r2, [pc, #32]	; (80065c4 <HAL_SD_ReadBlocks+0x2d4>)
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	f043 0220 	orr.w	r2, r3, #32
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e06c      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
 80065c4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 ff93 	bl	80074f8 <SDIO_ReadFIFO>
 80065d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80065d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80065dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065de:	3301      	adds	r3, #1
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80065e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e4:	3b01      	subs	r3, #1
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	0a1b      	lsrs	r3, r3, #8
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	3301      	adds	r3, #1
 80065f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80065f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fa:	3b01      	subs	r3, #1
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	b2da      	uxtb	r2, r3
 8006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006606:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660a:	3301      	adds	r3, #1
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800660e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006610:	3b01      	subs	r3, #1
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	0e1b      	lsrs	r3, r3, #24
 8006618:	b2da      	uxtb	r2, r3
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	3301      	adds	r3, #1
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8006624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006626:	3b01      	subs	r3, #1
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800662a:	f7fc fae1 	bl	8002bf0 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006636:	429a      	cmp	r2, r3
 8006638:	d902      	bls.n	8006640 <HAL_SD_ReadBlocks+0x350>
 800663a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663c:	2b00      	cmp	r3, #0
 800663e:	d112      	bne.n	8006666 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_SD_ReadBlocks+0x3b8>)
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e01b      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_SD_ReadBlocks+0x38a>
 8006674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1a6      	bne.n	80065c8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006682:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e006      	b.n	800669e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
  }
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3748      	adds	r7, #72	; 0x48
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	004005ff 	.word	0x004005ff

080066ac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b092      	sub	sp, #72	; 0x48
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80066ba:	f7fc fa99 	bl	8002bf0 <HAL_GetTick>
 80066be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d107      	bne.n	80066de <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e166      	b.n	80069ac <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	f040 8159 	bne.w	800699e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80066f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	441a      	add	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d907      	bls.n	8006710 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e14d      	b.n	80069ac <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2203      	movs	r2, #3
 8006714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006724:	2b01      	cmp	r3, #1
 8006726:	d002      	beq.n	800672e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	025b      	lsls	r3, r3, #9
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800672e:	f04f 33ff 	mov.w	r3, #4294967295
 8006732:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	025b      	lsls	r3, r3, #9
 8006738:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800673a:	2390      	movs	r3, #144	; 0x90
 800673c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800673e:	2300      	movs	r3, #0
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006742:	2300      	movs	r3, #0
 8006744:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006746:	2301      	movs	r3, #1
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f107 0218 	add.w	r2, r7, #24
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f000 ff54 	bl	8007602 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d90a      	bls.n	8006776 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fffc 	bl	800776a <SDMMC_CmdWriteMultiBlock>
 8006772:	6478      	str	r0, [r7, #68]	; 0x44
 8006774:	e009      	b.n	800678a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2210      	movs	r2, #16
 800677a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006782:	4618      	mov	r0, r3
 8006784:	f000 ffcf 	bl	8007726 <SDMMC_CmdWriteSingleBlock>
 8006788:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800678a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800678c:	2b00      	cmp	r3, #0
 800678e:	d012      	beq.n	80067b6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a87      	ldr	r2, [pc, #540]	; (80069b4 <HAL_SD_WriteBlocks+0x308>)
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800679e:	431a      	orrs	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e0fa      	b.n	80069ac <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80067ba:	e065      	b.n	8006888 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d040      	beq.n	800684c <HAL_SD_WriteBlocks+0x1a0>
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d03d      	beq.n	800684c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	643b      	str	r3, [r7, #64]	; 0x40
 80067d4:	e037      	b.n	8006846 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80067dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067de:	3301      	adds	r3, #1
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80067e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e4:	3b01      	subs	r3, #1
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80067e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	021a      	lsls	r2, r3, #8
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80067f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f6:	3301      	adds	r3, #1
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80067fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fc:	3b01      	subs	r3, #1
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	041a      	lsls	r2, r3, #16
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800680c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680e:	3301      	adds	r3, #1
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	3b01      	subs	r3, #1
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	061a      	lsls	r2, r3, #24
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006826:	3301      	adds	r3, #1
 8006828:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	3b01      	subs	r3, #1
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f107 0214 	add.w	r2, r7, #20
 8006838:	4611      	mov	r1, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fe69 	bl	8007512 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006842:	3301      	adds	r3, #1
 8006844:	643b      	str	r3, [r7, #64]	; 0x40
 8006846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006848:	2b07      	cmp	r3, #7
 800684a:	d9c4      	bls.n	80067d6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800684c:	f7fc f9d0 	bl	8002bf0 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006858:	429a      	cmp	r2, r3
 800685a:	d902      	bls.n	8006862 <HAL_SD_WriteBlocks+0x1b6>
 800685c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800685e:	2b00      	cmp	r3, #0
 8006860:	d112      	bne.n	8006888 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a53      	ldr	r2, [pc, #332]	; (80069b4 <HAL_SD_WriteBlocks+0x308>)
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800686e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006870:	431a      	orrs	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e091      	b.n	80069ac <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688e:	f240 331a 	movw	r3, #794	; 0x31a
 8006892:	4013      	ands	r3, r2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d091      	beq.n	80067bc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d022      	beq.n	80068ec <HAL_SD_WriteBlocks+0x240>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d91f      	bls.n	80068ec <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d01b      	beq.n	80068ec <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 ff79 	bl	80077b0 <SDMMC_CmdStopTransfer>
 80068be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80068c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d012      	beq.n	80068ec <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3a      	ldr	r2, [pc, #232]	; (80069b4 <HAL_SD_WriteBlocks+0x308>)
 80068cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d4:	431a      	orrs	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e05f      	b.n	80069ac <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d012      	beq.n	8006920 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a2d      	ldr	r2, [pc, #180]	; (80069b4 <HAL_SD_WriteBlocks+0x308>)
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	f043 0208 	orr.w	r2, r3, #8
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e045      	b.n	80069ac <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d012      	beq.n	8006954 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a20      	ldr	r2, [pc, #128]	; (80069b4 <HAL_SD_WriteBlocks+0x308>)
 8006934:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	f043 0202 	orr.w	r2, r3, #2
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e02b      	b.n	80069ac <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	f003 0310 	and.w	r3, r3, #16
 800695e:	2b00      	cmp	r3, #0
 8006960:	d012      	beq.n	8006988 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a13      	ldr	r2, [pc, #76]	; (80069b4 <HAL_SD_WriteBlocks+0x308>)
 8006968:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	f043 0210 	orr.w	r2, r3, #16
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e011      	b.n	80069ac <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006990:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e006      	b.n	80069ac <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
  }
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3748      	adds	r7, #72	; 0x48
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	004005ff 	.word	0x004005ff

080069b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c6:	0f9b      	lsrs	r3, r3, #30
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d2:	0e9b      	lsrs	r3, r3, #26
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e4:	0e1b      	lsrs	r3, r3, #24
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f6:	0c1b      	lsrs	r3, r3, #16
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a18:	0d1b      	lsrs	r3, r3, #20
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 030f 	and.w	r3, r3, #15
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a36:	0bdb      	lsrs	r3, r3, #15
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a48:	0b9b      	lsrs	r3, r3, #14
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a5a:	0b5b      	lsrs	r3, r3, #13
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a6c:	0b1b      	lsrs	r3, r3, #12
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d163      	bne.n	8006b50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8c:	009a      	lsls	r2, r3, #2
 8006a8e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a92:	4013      	ands	r3, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006a98:	0f92      	lsrs	r2, r2, #30
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa4:	0edb      	lsrs	r3, r3, #27
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab6:	0e1b      	lsrs	r3, r3, #24
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac8:	0d5b      	lsrs	r3, r3, #21
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ada:	0c9b      	lsrs	r3, r3, #18
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aec:	0bdb      	lsrs	r3, r3, #15
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	7e1b      	ldrb	r3, [r3, #24]
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	3302      	adds	r3, #2
 8006b10:	2201      	movs	r2, #1
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b1a:	fb02 f203 	mul.w	r2, r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	7a1b      	ldrb	r3, [r3, #8]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	409a      	lsls	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006b3c:	0a52      	lsrs	r2, r2, #9
 8006b3e:	fb02 f203 	mul.w	r2, r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b4c:	661a      	str	r2, [r3, #96]	; 0x60
 8006b4e:	e031      	b.n	8006bb4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d11d      	bne.n	8006b94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b5c:	041b      	lsls	r3, r3, #16
 8006b5e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b66:	0c1b      	lsrs	r3, r3, #16
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	3301      	adds	r3, #1
 8006b74:	029a      	lsls	r2, r3, #10
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b88:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	661a      	str	r2, [r3, #96]	; 0x60
 8006b92:	e00f      	b.n	8006bb4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a58      	ldr	r2, [pc, #352]	; (8006cfc <HAL_SD_GetCardCSD+0x344>)
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e09d      	b.n	8006cf0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb8:	0b9b      	lsrs	r3, r3, #14
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bca:	09db      	lsrs	r3, r3, #7
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bec:	0fdb      	lsrs	r3, r3, #31
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf8:	0f5b      	lsrs	r3, r3, #29
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0a:	0e9b      	lsrs	r3, r3, #26
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1c:	0d9b      	lsrs	r3, r3, #22
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f003 030f 	and.w	r3, r3, #15
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	0d5b      	lsrs	r3, r3, #21
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	0c1b      	lsrs	r3, r3, #16
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	0bdb      	lsrs	r3, r3, #15
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	0b9b      	lsrs	r3, r3, #14
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	0b5b      	lsrs	r3, r3, #13
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	0b1b      	lsrs	r3, r3, #12
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cae:	0a9b      	lsrs	r3, r3, #10
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	0a1b      	lsrs	r3, r3, #8
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	004005ff 	.word	0x004005ff

08006d00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006d58:	b5b0      	push	{r4, r5, r7, lr}
 8006d5a:	b08e      	sub	sp, #56	; 0x38
 8006d5c:	af04      	add	r7, sp, #16
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d02e      	beq.n	8006dd6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7e:	d106      	bne.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	639a      	str	r2, [r3, #56]	; 0x38
 8006d8c:	e029      	b.n	8006de2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d94:	d10a      	bne.n	8006dac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa1a 	bl	80071d0 <SD_WideBus_Enable>
 8006d9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38
 8006daa:	e01a      	b.n	8006de2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fa57 	bl	8007266 <SD_WideBus_Disable>
 8006db8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8006dc6:	e00c      	b.n	8006de2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8006dd4:	e005      	b.n	8006de2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a26      	ldr	r2, [pc, #152]	; (8006e88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e00:	e01f      	b.n	8006e42 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681d      	ldr	r5, [r3, #0]
 8006e28:	466c      	mov	r4, sp
 8006e2a:	f107 0314 	add.w	r3, r7, #20
 8006e2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e36:	f107 0308 	add.w	r3, r7, #8
 8006e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f000 fb30 	bl	80074a2 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fc05 	bl	800765a <SDMMC_CmdBlockLength>
 8006e50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00c      	beq.n	8006e72 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3728      	adds	r7, #40	; 0x28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bdb0      	pop	{r4, r5, r7, pc}
 8006e86:	bf00      	nop
 8006e88:	004005ff 	.word	0x004005ff

08006e8c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f96e 	bl	8007180 <SD_SendStatus>
 8006ea4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	0a5b      	lsrs	r3, r3, #9
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006ec2:	693b      	ldr	r3, [r7, #16]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ecc:	b5b0      	push	{r4, r5, r7, lr}
 8006ece:	b094      	sub	sp, #80	; 0x50
 8006ed0:	af04      	add	r7, sp, #16
 8006ed2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fb38 	bl	8007552 <SDIO_GetPowerState>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ee8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006eec:	e0b6      	b.n	800705c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d02f      	beq.n	8006f56 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fd62 	bl	80079c4 <SDMMC_CmdSendCID>
 8006f00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <SD_InitCard+0x40>
    {
      return errorstate;
 8006f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0a:	e0a7      	b.n	800705c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fb62 	bl	80075dc <SDIO_GetResponse>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2104      	movs	r1, #4
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fb59 	bl	80075dc <SDIO_GetResponse>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2108      	movs	r1, #8
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fb50 	bl	80075dc <SDIO_GetResponse>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	210c      	movs	r1, #12
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fb47 	bl	80075dc <SDIO_GetResponse>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d00d      	beq.n	8006f7a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f107 020e 	add.w	r2, r7, #14
 8006f66:	4611      	mov	r1, r2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fd68 	bl	8007a3e <SDMMC_CmdSetRelAdd>
 8006f6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <SD_InitCard+0xae>
    {
      return errorstate;
 8006f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f78:	e070      	b.n	800705c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d036      	beq.n	8006ff0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f82:	89fb      	ldrh	r3, [r7, #14]
 8006f84:	461a      	mov	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f92:	041b      	lsls	r3, r3, #16
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f000 fd32 	bl	8007a00 <SDMMC_CmdSendCSD>
 8006f9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa6:	e059      	b.n	800705c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fb14 	bl	80075dc <SDIO_GetResponse>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2104      	movs	r1, #4
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fb0b 	bl	80075dc <SDIO_GetResponse>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2108      	movs	r1, #8
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fb02 	bl	80075dc <SDIO_GetResponse>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	210c      	movs	r1, #12
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 faf9 	bl	80075dc <SDIO_GetResponse>
 8006fea:	4602      	mov	r2, r0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2104      	movs	r1, #4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 faf0 	bl	80075dc <SDIO_GetResponse>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	0d1a      	lsrs	r2, r3, #20
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007004:	f107 0310 	add.w	r3, r7, #16
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fcd4 	bl	80069b8 <HAL_SD_GetCardCSD>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007016:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800701a:	e01f      	b.n	800705c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6819      	ldr	r1, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007024:	041b      	lsls	r3, r3, #16
 8007026:	461a      	mov	r2, r3
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	4608      	mov	r0, r1
 800702e:	f000 fbe1 	bl	80077f4 <SDMMC_CmdSelDesel>
 8007032:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <SD_InitCard+0x172>
  {
    return errorstate;
 800703a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703c:	e00e      	b.n	800705c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681d      	ldr	r5, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	466c      	mov	r4, sp
 8007046:	f103 0210 	add.w	r2, r3, #16
 800704a:	ca07      	ldmia	r2, {r0, r1, r2}
 800704c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007050:	3304      	adds	r3, #4
 8007052:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007054:	4628      	mov	r0, r5
 8007056:	f000 fa24 	bl	80074a2 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3740      	adds	r7, #64	; 0x40
 8007060:	46bd      	mov	sp, r7
 8007062:	bdb0      	pop	{r4, r5, r7, pc}

08007064 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fbdc 	bl	800783a <SDMMC_CmdGoIdleState>
 8007082:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <SD_PowerON+0x2a>
  {
    return errorstate;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	e072      	b.n	8007174 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fbef 	bl	8007876 <SDMMC_CmdOperCond>
 8007098:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fbc5 	bl	800783a <SDMMC_CmdGoIdleState>
 80070b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	e05b      	b.n	8007174 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d137      	bne.n	800713a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fbef 	bl	80078b4 <SDMMC_CmdAppCommand>
 80070d6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d02d      	beq.n	800713a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80070e2:	e047      	b.n	8007174 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fbe2 	bl	80078b4 <SDMMC_CmdAppCommand>
 80070f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <SD_PowerON+0x98>
    {
      return errorstate;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	e03b      	b.n	8007174 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	491e      	ldr	r1, [pc, #120]	; (800717c <SD_PowerON+0x118>)
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fbf8 	bl	80078f8 <SDMMC_CmdAppOperCommand>
 8007108:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007110:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007114:	e02e      	b.n	8007174 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2100      	movs	r1, #0
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fa5d 	bl	80075dc <SDIO_GetResponse>
 8007122:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	0fdb      	lsrs	r3, r3, #31
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <SD_PowerON+0xcc>
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <SD_PowerON+0xce>
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]

    count++;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	3301      	adds	r3, #1
 8007138:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007140:	4293      	cmp	r3, r2
 8007142:	d802      	bhi.n	800714a <SD_PowerON+0xe6>
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0cc      	beq.n	80070e4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007150:	4293      	cmp	r3, r2
 8007152:	d902      	bls.n	800715a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007158:	e00c      	b.n	8007174 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	645a      	str	r2, [r3, #68]	; 0x44
 800716a:	e002      	b.n	8007172 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	c1100000 	.word	0xc1100000

08007180 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007194:	e018      	b.n	80071c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f000 fc6c 	bl	8007a80 <SDMMC_CmdSendStatus>
 80071a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e009      	b.n	80071c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fa0e 	bl	80075dc <SDIO_GetResponse>
 80071c0:	4602      	mov	r2, r0
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 f9f8 	bl	80075dc <SDIO_GetResponse>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071f6:	d102      	bne.n	80071fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80071f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071fc:	e02f      	b.n	800725e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80071fe:	f107 030c 	add.w	r3, r7, #12
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f879 	bl	80072fc <SD_FindSCR>
 800720a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	e023      	b.n	800725e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01c      	beq.n	800725a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	4619      	mov	r1, r3
 800722c:	4610      	mov	r0, r2
 800722e:	f000 fb41 	bl	80078b4 <SDMMC_CmdAppCommand>
 8007232:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	e00f      	b.n	800725e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2102      	movs	r1, #2
 8007244:	4618      	mov	r0, r3
 8007246:	f000 fb7a 	bl	800793e <SDMMC_CmdBusWidth>
 800724a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	e003      	b.n	800725e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007256:	2300      	movs	r3, #0
 8007258:	e001      	b.n	800725e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800725a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b086      	sub	sp, #24
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800726e:	2300      	movs	r3, #0
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	2300      	movs	r3, #0
 8007274:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f000 f9ad 	bl	80075dc <SDIO_GetResponse>
 8007282:	4603      	mov	r3, r0
 8007284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800728c:	d102      	bne.n	8007294 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800728e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007292:	e02f      	b.n	80072f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007294:	f107 030c 	add.w	r3, r7, #12
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f82e 	bl	80072fc <SD_FindSCR>
 80072a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	e023      	b.n	80072f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d01c      	beq.n	80072f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f000 faf6 	bl	80078b4 <SDMMC_CmdAppCommand>
 80072c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	e00f      	b.n	80072f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fb2f 	bl	800793e <SDMMC_CmdBusWidth>
 80072e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	e003      	b.n	80072f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	e001      	b.n	80072f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80072fc:	b590      	push	{r4, r7, lr}
 80072fe:	b08f      	sub	sp, #60	; 0x3c
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007306:	f7fb fc73 	bl	8002bf0 <HAL_GetTick>
 800730a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007310:	2300      	movs	r3, #0
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2108      	movs	r1, #8
 8007322:	4618      	mov	r0, r3
 8007324:	f000 f999 	bl	800765a <SDMMC_CmdBlockLength>
 8007328:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	e0b2      	b.n	800749a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	4619      	mov	r1, r3
 8007340:	4610      	mov	r0, r2
 8007342:	f000 fab7 	bl	80078b4 <SDMMC_CmdAppCommand>
 8007346:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <SD_FindSCR+0x56>
  {
    return errorstate;
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	e0a3      	b.n	800749a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007352:	f04f 33ff 	mov.w	r3, #4294967295
 8007356:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007358:	2308      	movs	r3, #8
 800735a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800735c:	2330      	movs	r3, #48	; 0x30
 800735e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007360:	2302      	movs	r3, #2
 8007362:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007364:	2300      	movs	r3, #0
 8007366:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007368:	2301      	movs	r3, #1
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f107 0210 	add.w	r2, r7, #16
 8007374:	4611      	mov	r1, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f000 f943 	bl	8007602 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 fafe 	bl	8007982 <SDMMC_CmdSendSCR>
 8007386:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	d02a      	beq.n	80073e4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	e083      	b.n	800749a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00f      	beq.n	80073c0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	f107 0208 	add.w	r2, r7, #8
 80073ac:	18d4      	adds	r4, r2, r3
 80073ae:	4608      	mov	r0, r1
 80073b0:	f000 f8a2 	bl	80074f8 <SDIO_ReadFIFO>
 80073b4:	4603      	mov	r3, r0
 80073b6:	6023      	str	r3, [r4, #0]
      index++;
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	3301      	adds	r3, #1
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
 80073be:	e006      	b.n	80073ce <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d012      	beq.n	80073f4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80073ce:	f7fb fc0f 	bl	8002bf0 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d102      	bne.n	80073e4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80073de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073e2:	e05a      	b.n	800749a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ea:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0cf      	beq.n	8007392 <SD_FindSCR+0x96>
 80073f2:	e000      	b.n	80073f6 <SD_FindSCR+0xfa>
      break;
 80073f4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2208      	movs	r2, #8
 800740a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800740c:	2308      	movs	r3, #8
 800740e:	e044      	b.n	800749a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2202      	movs	r2, #2
 8007424:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007426:	2302      	movs	r3, #2
 8007428:	e037      	b.n	800749a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d005      	beq.n	8007444 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2220      	movs	r2, #32
 800743e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007440:	2320      	movs	r3, #32
 8007442:	e02a      	b.n	800749a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f240 523a 	movw	r2, #1338	; 0x53a
 800744c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	061a      	lsls	r2, r3, #24
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	021b      	lsls	r3, r3, #8
 8007456:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800745a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	0a1b      	lsrs	r3, r3, #8
 8007460:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007464:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	0e1b      	lsrs	r3, r3, #24
 800746a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	601a      	str	r2, [r3, #0]
    scr++;
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	3304      	adds	r3, #4
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	061a      	lsls	r2, r3, #24
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	021b      	lsls	r3, r3, #8
 800747e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007482:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800748c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	0e1b      	lsrs	r3, r3, #24
 8007492:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	373c      	adds	r7, #60	; 0x3c
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd90      	pop	{r4, r7, pc}

080074a2 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80074a2:	b084      	sub	sp, #16
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	f107 001c 	add.w	r0, r7, #28
 80074b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80074b8:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80074ba:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80074bc:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80074c0:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80074c4:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80074c8:	431a      	orrs	r2, r3
             Init.ClockDiv
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80074cc:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80074dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	b004      	add	sp, #16
 80074f6:	4770      	bx	lr

080074f8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2203      	movs	r2, #3
 8007540:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007542:	2002      	movs	r0, #2
 8007544:	f7fb fb60 	bl	8002c08 <HAL_Delay>
  
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0303 	and.w	r3, r3, #3
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800758c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007592:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007598:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4313      	orrs	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80075a8:	f023 030f 	bic.w	r3, r3, #15
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	b2db      	uxtb	r3, r3
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3314      	adds	r3, #20
 80075ea:	461a      	mov	r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	4413      	add	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
}  
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007628:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800762e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007634:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800764c:	2300      	movs	r3, #0

}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b088      	sub	sp, #32
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007668:	2310      	movs	r3, #16
 800766a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007678:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800767a:	f107 0308 	add.w	r3, r7, #8
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff ff74 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007686:	f241 3288 	movw	r2, #5000	; 0x1388
 800768a:	2110      	movs	r1, #16
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fa45 	bl	8007b1c <SDMMC_GetCmdResp1>
 8007692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007694:	69fb      	ldr	r3, [r7, #28]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b088      	sub	sp, #32
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80076ac:	2311      	movs	r3, #17
 80076ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076b0:	2340      	movs	r3, #64	; 0x40
 80076b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076be:	f107 0308 	add.w	r3, r7, #8
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff ff52 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80076ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ce:	2111      	movs	r1, #17
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fa23 	bl	8007b1c <SDMMC_GetCmdResp1>
 80076d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076d8:	69fb      	ldr	r3, [r7, #28]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3720      	adds	r7, #32
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b088      	sub	sp, #32
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80076f0:	2312      	movs	r3, #18
 80076f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076f4:	2340      	movs	r3, #64	; 0x40
 80076f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007700:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007702:	f107 0308 	add.w	r3, r7, #8
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff ff30 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800770e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007712:	2112      	movs	r1, #18
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa01 	bl	8007b1c <SDMMC_GetCmdResp1>
 800771a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800771c:	69fb      	ldr	r3, [r7, #28]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3720      	adds	r7, #32
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b088      	sub	sp, #32
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007734:	2318      	movs	r3, #24
 8007736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007738:	2340      	movs	r3, #64	; 0x40
 800773a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007744:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007746:	f107 0308 	add.w	r3, r7, #8
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff ff0e 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007752:	f241 3288 	movw	r2, #5000	; 0x1388
 8007756:	2118      	movs	r1, #24
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9df 	bl	8007b1c <SDMMC_GetCmdResp1>
 800775e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007760:	69fb      	ldr	r3, [r7, #28]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b088      	sub	sp, #32
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007778:	2319      	movs	r3, #25
 800777a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007788:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800778a:	f107 0308 	add.w	r3, r7, #8
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff feec 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007796:	f241 3288 	movw	r2, #5000	; 0x1388
 800779a:	2119      	movs	r1, #25
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f9bd 	bl	8007b1c <SDMMC_GetCmdResp1>
 80077a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077a4:	69fb      	ldr	r3, [r7, #28]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80077bc:	230c      	movs	r3, #12
 80077be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077c4:	2300      	movs	r3, #0
 80077c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077ce:	f107 0308 	add.w	r3, r7, #8
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff feca 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80077da:	4a05      	ldr	r2, [pc, #20]	; (80077f0 <SDMMC_CmdStopTransfer+0x40>)
 80077dc:	210c      	movs	r1, #12
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f99c 	bl	8007b1c <SDMMC_GetCmdResp1>
 80077e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077e6:	69fb      	ldr	r3, [r7, #28]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3720      	adds	r7, #32
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	05f5e100 	.word	0x05f5e100

080077f4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007804:	2307      	movs	r3, #7
 8007806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007808:	2340      	movs	r3, #64	; 0x40
 800780a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007814:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007816:	f107 0310 	add.w	r3, r7, #16
 800781a:	4619      	mov	r1, r3
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f7ff fea6 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007822:	f241 3288 	movw	r2, #5000	; 0x1388
 8007826:	2107      	movs	r1, #7
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f977 	bl	8007b1c <SDMMC_GetCmdResp1>
 800782e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007832:	4618      	mov	r0, r3
 8007834:	3728      	adds	r7, #40	; 0x28
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b088      	sub	sp, #32
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800784a:	2300      	movs	r3, #0
 800784c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007856:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007858:	f107 0308 	add.w	r3, r7, #8
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fe85 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f92d 	bl	8007ac4 <SDMMC_GetCmdError>
 800786a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800786c:	69fb      	ldr	r3, [r7, #28]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b088      	sub	sp, #32
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800787e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007882:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007884:	2308      	movs	r3, #8
 8007886:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007888:	2340      	movs	r3, #64	; 0x40
 800788a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800788c:	2300      	movs	r3, #0
 800788e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007894:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fe66 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb24 	bl	8007ef0 <SDMMC_GetCmdResp7>
 80078a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078aa:	69fb      	ldr	r3, [r7, #28]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3720      	adds	r7, #32
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80078c2:	2337      	movs	r3, #55	; 0x37
 80078c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078c6:	2340      	movs	r3, #64	; 0x40
 80078c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078ca:	2300      	movs	r3, #0
 80078cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078d4:	f107 0308 	add.w	r3, r7, #8
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff fe47 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80078e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e4:	2137      	movs	r1, #55	; 0x37
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f918 	bl	8007b1c <SDMMC_GetCmdResp1>
 80078ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078ee:	69fb      	ldr	r3, [r7, #28]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3720      	adds	r7, #32
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800790c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800790e:	2329      	movs	r3, #41	; 0x29
 8007910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007912:	2340      	movs	r3, #64	; 0x40
 8007914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800791a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007920:	f107 0308 	add.w	r3, r7, #8
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff fe21 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fa2b 	bl	8007d88 <SDMMC_GetCmdResp3>
 8007932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007934:	69fb      	ldr	r3, [r7, #28]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b088      	sub	sp, #32
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800794c:	2306      	movs	r3, #6
 800794e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800795e:	f107 0308 	add.w	r3, r7, #8
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff fe02 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800796a:	f241 3288 	movw	r2, #5000	; 0x1388
 800796e:	2106      	movs	r1, #6
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f8d3 	bl	8007b1c <SDMMC_GetCmdResp1>
 8007976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007978:	69fb      	ldr	r3, [r7, #28]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3720      	adds	r7, #32
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b088      	sub	sp, #32
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800798e:	2333      	movs	r3, #51	; 0x33
 8007990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007992:	2340      	movs	r3, #64	; 0x40
 8007994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800799a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800799e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079a0:	f107 0308 	add.w	r3, r7, #8
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff fde1 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80079ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b0:	2133      	movs	r1, #51	; 0x33
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f8b2 	bl	8007b1c <SDMMC_GetCmdResp1>
 80079b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079ba:	69fb      	ldr	r3, [r7, #28]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80079d0:	2302      	movs	r3, #2
 80079d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80079d4:	23c0      	movs	r3, #192	; 0xc0
 80079d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fdc0 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f982 	bl	8007cf8 <SDMMC_GetCmdResp2>
 80079f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079f6:	69fb      	ldr	r3, [r7, #28]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007a0e:	2309      	movs	r3, #9
 8007a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007a12:	23c0      	movs	r3, #192	; 0xc0
 8007a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a20:	f107 0308 	add.w	r3, r7, #8
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff fda1 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f963 	bl	8007cf8 <SDMMC_GetCmdResp2>
 8007a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a34:	69fb      	ldr	r3, [r7, #28]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b088      	sub	sp, #32
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff fd82 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	2103      	movs	r1, #3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9c8 	bl	8007e04 <SDMMC_GetCmdResp6>
 8007a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a76:	69fb      	ldr	r3, [r7, #28]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3720      	adds	r7, #32
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007a8e:	230d      	movs	r3, #13
 8007a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a92:	2340      	movs	r3, #64	; 0x40
 8007a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007aa0:	f107 0308 	add.w	r3, r7, #8
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff fd61 	bl	800756e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab0:	210d      	movs	r1, #13
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f832 	bl	8007b1c <SDMMC_GetCmdResp1>
 8007ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aba:	69fb      	ldr	r3, [r7, #28]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007acc:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <SDMMC_GetCmdError+0x50>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a11      	ldr	r2, [pc, #68]	; (8007b18 <SDMMC_GetCmdError+0x54>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	0a5b      	lsrs	r3, r3, #9
 8007ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007adc:	fb02 f303 	mul.w	r3, r2, r3
 8007ae0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	60fa      	str	r2, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d102      	bne.n	8007af2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007aec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007af0:	e009      	b.n	8007b06 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f1      	beq.n	8007ae2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	22c5      	movs	r2, #197	; 0xc5
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	20000030 	.word	0x20000030
 8007b18:	10624dd3 	.word	0x10624dd3

08007b1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	460b      	mov	r3, r1
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007b2a:	4b70      	ldr	r3, [pc, #448]	; (8007cec <SDMMC_GetCmdResp1+0x1d0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a70      	ldr	r2, [pc, #448]	; (8007cf0 <SDMMC_GetCmdResp1+0x1d4>)
 8007b30:	fba2 2303 	umull	r2, r3, r2, r3
 8007b34:	0a5a      	lsrs	r2, r3, #9
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	fb02 f303 	mul.w	r3, r2, r3
 8007b3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	1e5a      	subs	r2, r3, #1
 8007b42:	61fa      	str	r2, [r7, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b4c:	e0c9      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0ef      	beq.n	8007b3e <SDMMC_GetCmdResp1+0x22>
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1ea      	bne.n	8007b3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2204      	movs	r2, #4
 8007b78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b7a:	2304      	movs	r3, #4
 8007b7c:	e0b1      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d004      	beq.n	8007b94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b90:	2301      	movs	r3, #1
 8007b92:	e0a6      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	22c5      	movs	r2, #197	; 0xc5
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff fd11 	bl	80075c2 <SDIO_GetCommandResponse>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d001      	beq.n	8007bae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e099      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007bae:	2100      	movs	r1, #0
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f7ff fd13 	bl	80075dc <SDIO_GetResponse>
 8007bb6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	4b4e      	ldr	r3, [pc, #312]	; (8007cf4 <SDMMC_GetCmdResp1+0x1d8>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e08d      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	da02      	bge.n	8007bd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bd0:	e087      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007bdc:	2340      	movs	r3, #64	; 0x40
 8007bde:	e080      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007bea:	2380      	movs	r3, #128	; 0x80
 8007bec:	e079      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bfc:	e071      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c0c:	e069      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c1c:	e061      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007c28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c2c:	e059      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c3c:	e051      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c4c:	e049      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c5c:	e041      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c6c:	e039      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c7c:	e031      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007c88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c8c:	e029      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007c98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c9c:	e021      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007ca8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007cac:	e019      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007cb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007cbc:	e011      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007cc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ccc:	e009      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007cd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007cdc:	e001      	b.n	8007ce2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3720      	adds	r7, #32
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000030 	.word	0x20000030
 8007cf0:	10624dd3 	.word	0x10624dd3
 8007cf4:	fdffe008 	.word	0xfdffe008

08007cf8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d00:	4b1f      	ldr	r3, [pc, #124]	; (8007d80 <SDMMC_GetCmdResp2+0x88>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1f      	ldr	r2, [pc, #124]	; (8007d84 <SDMMC_GetCmdResp2+0x8c>)
 8007d06:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0a:	0a5b      	lsrs	r3, r3, #9
 8007d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d10:	fb02 f303 	mul.w	r3, r2, r3
 8007d14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1e5a      	subs	r2, r3, #1
 8007d1a:	60fa      	str	r2, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d102      	bne.n	8007d26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d24:	e026      	b.n	8007d74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0ef      	beq.n	8007d16 <SDMMC_GetCmdResp2+0x1e>
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1ea      	bne.n	8007d16 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d52:	2304      	movs	r3, #4
 8007d54:	e00e      	b.n	8007d74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e003      	b.n	8007d74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	22c5      	movs	r2, #197	; 0xc5
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	20000030 	.word	0x20000030
 8007d84:	10624dd3 	.word	0x10624dd3

08007d88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d90:	4b1a      	ldr	r3, [pc, #104]	; (8007dfc <SDMMC_GetCmdResp3+0x74>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a1a      	ldr	r2, [pc, #104]	; (8007e00 <SDMMC_GetCmdResp3+0x78>)
 8007d96:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9a:	0a5b      	lsrs	r3, r3, #9
 8007d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da0:	fb02 f303 	mul.w	r3, r2, r3
 8007da4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	1e5a      	subs	r2, r3, #1
 8007daa:	60fa      	str	r2, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007db0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007db4:	e01b      	b.n	8007dee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d0ef      	beq.n	8007da6 <SDMMC_GetCmdResp3+0x1e>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1ea      	bne.n	8007da6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2204      	movs	r2, #4
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007de2:	2304      	movs	r3, #4
 8007de4:	e003      	b.n	8007dee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	22c5      	movs	r2, #197	; 0xc5
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20000030 	.word	0x20000030
 8007e00:	10624dd3 	.word	0x10624dd3

08007e04 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e12:	4b35      	ldr	r3, [pc, #212]	; (8007ee8 <SDMMC_GetCmdResp6+0xe4>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a35      	ldr	r2, [pc, #212]	; (8007eec <SDMMC_GetCmdResp6+0xe8>)
 8007e18:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1c:	0a5b      	lsrs	r3, r3, #9
 8007e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e22:	fb02 f303 	mul.w	r3, r2, r3
 8007e26:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	1e5a      	subs	r2, r3, #1
 8007e2c:	61fa      	str	r2, [r7, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d102      	bne.n	8007e38 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e36:	e052      	b.n	8007ede <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0ef      	beq.n	8007e28 <SDMMC_GetCmdResp6+0x24>
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1ea      	bne.n	8007e28 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2204      	movs	r2, #4
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e64:	2304      	movs	r3, #4
 8007e66:	e03a      	b.n	8007ede <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e02f      	b.n	8007ede <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff fb9f 	bl	80075c2 <SDIO_GetCommandResponse>
 8007e84:	4603      	mov	r3, r0
 8007e86:	461a      	mov	r2, r3
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d001      	beq.n	8007e92 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e025      	b.n	8007ede <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	22c5      	movs	r2, #197	; 0xc5
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007e98:	2100      	movs	r1, #0
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff fb9e 	bl	80075dc <SDIO_GetResponse>
 8007ea0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d106      	bne.n	8007eba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	0c1b      	lsrs	r3, r3, #16
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e011      	b.n	8007ede <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ec8:	e009      	b.n	8007ede <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ed8:	e001      	b.n	8007ede <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007eda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000030 	.word	0x20000030
 8007eec:	10624dd3 	.word	0x10624dd3

08007ef0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ef8:	4b22      	ldr	r3, [pc, #136]	; (8007f84 <SDMMC_GetCmdResp7+0x94>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a22      	ldr	r2, [pc, #136]	; (8007f88 <SDMMC_GetCmdResp7+0x98>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	0a5b      	lsrs	r3, r3, #9
 8007f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
 8007f0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1e5a      	subs	r2, r3, #1
 8007f12:	60fa      	str	r2, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d102      	bne.n	8007f1e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f1c:	e02c      	b.n	8007f78 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f22:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0ef      	beq.n	8007f0e <SDMMC_GetCmdResp7+0x1e>
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1ea      	bne.n	8007f0e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d004      	beq.n	8007f4e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2204      	movs	r2, #4
 8007f48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f4a:	2304      	movs	r3, #4
 8007f4c:	e014      	b.n	8007f78 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e009      	b.n	8007f78 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2240      	movs	r2, #64	; 0x40
 8007f74:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f76:	2300      	movs	r3, #0
  
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	20000030 	.word	0x20000030
 8007f88:	10624dd3 	.word	0x10624dd3

08007f8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	f107 001c 	add.w	r0, r7, #28
 8007f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d122      	bne.n	8007fea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d105      	bne.n	8007fde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fac6 	bl	8009570 <USB_CoreReset>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]
 8007fe8:	e01a      	b.n	8008020 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 faba 	bl	8009570 <USB_CoreReset>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	639a      	str	r2, [r3, #56]	; 0x38
 8008012:	e005      	b.n	8008020 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008018:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	2b01      	cmp	r3, #1
 8008024:	d10b      	bne.n	800803e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f043 0206 	orr.w	r2, r3, #6
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f043 0220 	orr.w	r2, r3, #32
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800803e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800804a:	b004      	add	sp, #16
 800804c:	4770      	bx	lr
	...

08008050 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800805e:	79fb      	ldrb	r3, [r7, #7]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d165      	bne.n	8008130 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4a41      	ldr	r2, [pc, #260]	; (800816c <USB_SetTurnaroundTime+0x11c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d906      	bls.n	800807a <USB_SetTurnaroundTime+0x2a>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4a40      	ldr	r2, [pc, #256]	; (8008170 <USB_SetTurnaroundTime+0x120>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d202      	bcs.n	800807a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008074:	230f      	movs	r3, #15
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	e062      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	4a3c      	ldr	r2, [pc, #240]	; (8008170 <USB_SetTurnaroundTime+0x120>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d306      	bcc.n	8008090 <USB_SetTurnaroundTime+0x40>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4a3b      	ldr	r2, [pc, #236]	; (8008174 <USB_SetTurnaroundTime+0x124>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d202      	bcs.n	8008090 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800808a:	230e      	movs	r3, #14
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	e057      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4a38      	ldr	r2, [pc, #224]	; (8008174 <USB_SetTurnaroundTime+0x124>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d306      	bcc.n	80080a6 <USB_SetTurnaroundTime+0x56>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4a37      	ldr	r2, [pc, #220]	; (8008178 <USB_SetTurnaroundTime+0x128>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d202      	bcs.n	80080a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080a0:	230d      	movs	r3, #13
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	e04c      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	4a33      	ldr	r2, [pc, #204]	; (8008178 <USB_SetTurnaroundTime+0x128>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d306      	bcc.n	80080bc <USB_SetTurnaroundTime+0x6c>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	4a32      	ldr	r2, [pc, #200]	; (800817c <USB_SetTurnaroundTime+0x12c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d802      	bhi.n	80080bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080b6:	230c      	movs	r3, #12
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e041      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4a2f      	ldr	r2, [pc, #188]	; (800817c <USB_SetTurnaroundTime+0x12c>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d906      	bls.n	80080d2 <USB_SetTurnaroundTime+0x82>
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4a2e      	ldr	r2, [pc, #184]	; (8008180 <USB_SetTurnaroundTime+0x130>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d802      	bhi.n	80080d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080cc:	230b      	movs	r3, #11
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	e036      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	4a2a      	ldr	r2, [pc, #168]	; (8008180 <USB_SetTurnaroundTime+0x130>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d906      	bls.n	80080e8 <USB_SetTurnaroundTime+0x98>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4a29      	ldr	r2, [pc, #164]	; (8008184 <USB_SetTurnaroundTime+0x134>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d802      	bhi.n	80080e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80080e2:	230a      	movs	r3, #10
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	e02b      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4a26      	ldr	r2, [pc, #152]	; (8008184 <USB_SetTurnaroundTime+0x134>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d906      	bls.n	80080fe <USB_SetTurnaroundTime+0xae>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4a25      	ldr	r2, [pc, #148]	; (8008188 <USB_SetTurnaroundTime+0x138>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d202      	bcs.n	80080fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80080f8:	2309      	movs	r3, #9
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	e020      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	4a21      	ldr	r2, [pc, #132]	; (8008188 <USB_SetTurnaroundTime+0x138>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d306      	bcc.n	8008114 <USB_SetTurnaroundTime+0xc4>
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4a20      	ldr	r2, [pc, #128]	; (800818c <USB_SetTurnaroundTime+0x13c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d802      	bhi.n	8008114 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800810e:	2308      	movs	r3, #8
 8008110:	617b      	str	r3, [r7, #20]
 8008112:	e015      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4a1d      	ldr	r2, [pc, #116]	; (800818c <USB_SetTurnaroundTime+0x13c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d906      	bls.n	800812a <USB_SetTurnaroundTime+0xda>
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4a1c      	ldr	r2, [pc, #112]	; (8008190 <USB_SetTurnaroundTime+0x140>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d202      	bcs.n	800812a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008124:	2307      	movs	r3, #7
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	e00a      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800812a:	2306      	movs	r3, #6
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	e007      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d102      	bne.n	800813c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008136:	2309      	movs	r3, #9
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	e001      	b.n	8008140 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800813c:	2309      	movs	r3, #9
 800813e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	029b      	lsls	r3, r3, #10
 8008154:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008158:	431a      	orrs	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	00d8acbf 	.word	0x00d8acbf
 8008170:	00e4e1c0 	.word	0x00e4e1c0
 8008174:	00f42400 	.word	0x00f42400
 8008178:	01067380 	.word	0x01067380
 800817c:	011a499f 	.word	0x011a499f
 8008180:	01312cff 	.word	0x01312cff
 8008184:	014ca43f 	.word	0x014ca43f
 8008188:	016e3600 	.word	0x016e3600
 800818c:	01a6ab1f 	.word	0x01a6ab1f
 8008190:	01e84800 	.word	0x01e84800

08008194 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f043 0201 	orr.w	r2, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f023 0201 	bic.w	r2, r3, #1
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d106      	bne.n	8008204 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	e00b      	b.n	800821c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d106      	bne.n	8008218 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60da      	str	r2, [r3, #12]
 8008216:	e001      	b.n	800821c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e003      	b.n	8008224 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800821c:	2032      	movs	r0, #50	; 0x32
 800821e:	f7fa fcf3 	bl	8002c08 <HAL_Delay>

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800822c:	b084      	sub	sp, #16
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800823a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008246:	2300      	movs	r3, #0
 8008248:	613b      	str	r3, [r7, #16]
 800824a:	e009      	b.n	8008260 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	3340      	adds	r3, #64	; 0x40
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	2200      	movs	r2, #0
 8008258:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3301      	adds	r3, #1
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	2b0e      	cmp	r3, #14
 8008264:	d9f2      	bls.n	800824c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d11c      	bne.n	80082a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800827a:	f043 0302 	orr.w	r3, r3, #2
 800827e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008284:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38
 80082a4:	e00b      	b.n	80082be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082c4:	461a      	mov	r2, r3
 80082c6:	2300      	movs	r3, #0
 80082c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d0:	4619      	mov	r1, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d8:	461a      	mov	r2, r3
 80082da:	680b      	ldr	r3, [r1, #0]
 80082dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d10c      	bne.n	80082fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d104      	bne.n	80082f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80082ea:	2100      	movs	r1, #0
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f949 	bl	8008584 <USB_SetDevSpeed>
 80082f2:	e008      	b.n	8008306 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80082f4:	2101      	movs	r1, #1
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f944 	bl	8008584 <USB_SetDevSpeed>
 80082fc:	e003      	b.n	8008306 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80082fe:	2103      	movs	r1, #3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f93f 	bl	8008584 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008306:	2110      	movs	r1, #16
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f8f3 	bl	80084f4 <USB_FlushTxFifo>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f911 	bl	8008540 <USB_FlushRxFifo>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832e:	461a      	mov	r2, r3
 8008330:	2300      	movs	r3, #0
 8008332:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	461a      	mov	r2, r3
 800833c:	2300      	movs	r3, #0
 800833e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008346:	461a      	mov	r2, r3
 8008348:	2300      	movs	r3, #0
 800834a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800834c:	2300      	movs	r3, #0
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	e043      	b.n	80083da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008368:	d118      	bne.n	800839c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837c:	461a      	mov	r2, r3
 800837e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008382:	6013      	str	r3, [r2, #0]
 8008384:	e013      	b.n	80083ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	4413      	add	r3, r2
 800838e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008392:	461a      	mov	r2, r3
 8008394:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	e008      	b.n	80083ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a8:	461a      	mov	r2, r3
 80083aa:	2300      	movs	r3, #0
 80083ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ba:	461a      	mov	r2, r3
 80083bc:	2300      	movs	r3, #0
 80083be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083cc:	461a      	mov	r2, r3
 80083ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	3301      	adds	r3, #1
 80083d8:	613b      	str	r3, [r7, #16]
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d3b7      	bcc.n	8008352 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083e2:	2300      	movs	r3, #0
 80083e4:	613b      	str	r3, [r7, #16]
 80083e6:	e043      	b.n	8008470 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083fe:	d118      	bne.n	8008432 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	461a      	mov	r2, r3
 8008414:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	e013      	b.n	8008444 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008428:	461a      	mov	r2, r3
 800842a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	e008      	b.n	8008444 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	461a      	mov	r2, r3
 8008440:	2300      	movs	r3, #0
 8008442:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008450:	461a      	mov	r2, r3
 8008452:	2300      	movs	r3, #0
 8008454:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008462:	461a      	mov	r2, r3
 8008464:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008468:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	3301      	adds	r3, #1
 800846e:	613b      	str	r3, [r7, #16]
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	429a      	cmp	r2, r3
 8008476:	d3b7      	bcc.n	80083e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008486:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800848a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008498:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	2b00      	cmp	r3, #0
 800849e:	d105      	bne.n	80084ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	f043 0210 	orr.w	r2, r3, #16
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	699a      	ldr	r2, [r3, #24]
 80084b0:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <USB_DevInit+0x2c4>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	f043 0208 	orr.w	r2, r3, #8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80084ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d107      	bne.n	80084e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084d8:	f043 0304 	orr.w	r3, r3, #4
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084ec:	b004      	add	sp, #16
 80084ee:	4770      	bx	lr
 80084f0:	803c3800 	.word	0x803c3800

080084f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	019b      	lsls	r3, r3, #6
 8008506:	f043 0220 	orr.w	r2, r3, #32
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4a09      	ldr	r2, [pc, #36]	; (800853c <USB_FlushTxFifo+0x48>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d901      	bls.n	8008520 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e006      	b.n	800852e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f003 0320 	and.w	r3, r3, #32
 8008528:	2b20      	cmp	r3, #32
 800852a:	d0f0      	beq.n	800850e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	00030d40 	.word	0x00030d40

08008540 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2210      	movs	r2, #16
 8008550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3301      	adds	r3, #1
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4a09      	ldr	r2, [pc, #36]	; (8008580 <USB_FlushRxFifo+0x40>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d901      	bls.n	8008564 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e006      	b.n	8008572 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f003 0310 	and.w	r3, r3, #16
 800856c:	2b10      	cmp	r3, #16
 800856e:	d0f0      	beq.n	8008552 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	00030d40 	.word	0x00030d40

08008584 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	68f9      	ldr	r1, [r7, #12]
 80085a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085a4:	4313      	orrs	r3, r2
 80085a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b087      	sub	sp, #28
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f003 0306 	and.w	r3, r3, #6
 80085ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d102      	bne.n	80085dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
 80085da:	e00a      	b.n	80085f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d002      	beq.n	80085e8 <USB_GetDevSpeed+0x32>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b06      	cmp	r3, #6
 80085e6:	d102      	bne.n	80085ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80085e8:	2302      	movs	r3, #2
 80085ea:	75fb      	strb	r3, [r7, #23]
 80085ec:	e001      	b.n	80085f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80085ee:	230f      	movs	r3, #15
 80085f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d13a      	bne.n	8008692 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008622:	69da      	ldr	r2, [r3, #28]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 030f 	and.w	r3, r3, #15
 800862c:	2101      	movs	r1, #1
 800862e:	fa01 f303 	lsl.w	r3, r1, r3
 8008632:	b29b      	uxth	r3, r3
 8008634:	68f9      	ldr	r1, [r7, #12]
 8008636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800863a:	4313      	orrs	r3, r2
 800863c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d155      	bne.n	8008700 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	78db      	ldrb	r3, [r3, #3]
 800866e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008670:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	059b      	lsls	r3, r3, #22
 8008676:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008678:	4313      	orrs	r3, r2
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	440a      	add	r2, r1
 8008682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800868a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	e036      	b.n	8008700 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008698:	69da      	ldr	r2, [r3, #28]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	f003 030f 	and.w	r3, r3, #15
 80086a2:	2101      	movs	r1, #1
 80086a4:	fa01 f303 	lsl.w	r3, r1, r3
 80086a8:	041b      	lsls	r3, r3, #16
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086b0:	4313      	orrs	r3, r2
 80086b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d11a      	bne.n	8008700 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	78db      	ldrb	r3, [r3, #3]
 80086e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086e6:	430b      	orrs	r3, r1
 80086e8:	4313      	orrs	r3, r2
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
	...

08008710 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d161      	bne.n	80087f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800873e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008742:	d11f      	bne.n	8008784 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	0151      	lsls	r1, r2, #5
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	440a      	add	r2, r1
 800875a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800875e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008762:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	0151      	lsls	r1, r2, #5
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	440a      	add	r2, r1
 800877a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800877e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008782:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800878a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	f003 030f 	and.w	r3, r3, #15
 8008794:	2101      	movs	r1, #1
 8008796:	fa01 f303 	lsl.w	r3, r1, r3
 800879a:	b29b      	uxth	r3, r3
 800879c:	43db      	mvns	r3, r3
 800879e:	68f9      	ldr	r1, [r7, #12]
 80087a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087a4:	4013      	ands	r3, r2
 80087a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ae:	69da      	ldr	r2, [r3, #28]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f003 030f 	and.w	r3, r3, #15
 80087b8:	2101      	movs	r1, #1
 80087ba:	fa01 f303 	lsl.w	r3, r1, r3
 80087be:	b29b      	uxth	r3, r3
 80087c0:	43db      	mvns	r3, r3
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087c8:	4013      	ands	r3, r2
 80087ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	0159      	lsls	r1, r3, #5
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	440b      	add	r3, r1
 80087e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e6:	4619      	mov	r1, r3
 80087e8:	4b35      	ldr	r3, [pc, #212]	; (80088c0 <USB_DeactivateEndpoint+0x1b0>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	600b      	str	r3, [r1, #0]
 80087ee:	e060      	b.n	80088b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008806:	d11f      	bne.n	8008848 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	440a      	add	r2, r1
 800881e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008822:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008826:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008846:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	f003 030f 	and.w	r3, r3, #15
 8008858:	2101      	movs	r1, #1
 800885a:	fa01 f303 	lsl.w	r3, r1, r3
 800885e:	041b      	lsls	r3, r3, #16
 8008860:	43db      	mvns	r3, r3
 8008862:	68f9      	ldr	r1, [r7, #12]
 8008864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008868:	4013      	ands	r3, r2
 800886a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	2101      	movs	r1, #1
 800887e:	fa01 f303 	lsl.w	r3, r1, r3
 8008882:	041b      	lsls	r3, r3, #16
 8008884:	43db      	mvns	r3, r3
 8008886:	68f9      	ldr	r1, [r7, #12]
 8008888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800888c:	4013      	ands	r3, r2
 800888e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	0159      	lsls	r1, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	440b      	add	r3, r1
 80088a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088aa:	4619      	mov	r1, r3
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <USB_DeactivateEndpoint+0x1b4>)
 80088ae:	4013      	ands	r3, r2
 80088b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	ec337800 	.word	0xec337800
 80088c4:	eff37800 	.word	0xeff37800

080088c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08a      	sub	sp, #40	; 0x28
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	4613      	mov	r3, r2
 80088d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	785b      	ldrb	r3, [r3, #1]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	f040 815c 	bne.w	8008ba2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d132      	bne.n	8008958 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	0151      	lsls	r1, r2, #5
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	440a      	add	r2, r1
 8008908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800890c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008910:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008914:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	0151      	lsls	r1, r2, #5
 8008928:	69fa      	ldr	r2, [r7, #28]
 800892a:	440a      	add	r2, r1
 800892c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008930:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008934:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4413      	add	r3, r2
 800893e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	0151      	lsls	r1, r2, #5
 8008948:	69fa      	ldr	r2, [r7, #28]
 800894a:	440a      	add	r2, r1
 800894c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008950:	0cdb      	lsrs	r3, r3, #19
 8008952:	04db      	lsls	r3, r3, #19
 8008954:	6113      	str	r3, [r2, #16]
 8008956:	e074      	b.n	8008a42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	0151      	lsls	r1, r2, #5
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	440a      	add	r2, r1
 800896e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008972:	0cdb      	lsrs	r3, r3, #19
 8008974:	04db      	lsls	r3, r3, #19
 8008976:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	0151      	lsls	r1, r2, #5
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	440a      	add	r2, r1
 800898e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008992:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008996:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800899a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a8:	691a      	ldr	r2, [r3, #16]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	6959      	ldr	r1, [r3, #20]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	440b      	add	r3, r1
 80089b4:	1e59      	subs	r1, r3, #1
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80089be:	04d9      	lsls	r1, r3, #19
 80089c0:	4b9d      	ldr	r3, [pc, #628]	; (8008c38 <USB_EPStartXfer+0x370>)
 80089c2:	400b      	ands	r3, r1
 80089c4:	69b9      	ldr	r1, [r7, #24]
 80089c6:	0148      	lsls	r0, r1, #5
 80089c8:	69f9      	ldr	r1, [r7, #28]
 80089ca:	4401      	add	r1, r0
 80089cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089d0:	4313      	orrs	r3, r2
 80089d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e0:	691a      	ldr	r2, [r3, #16]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ea:	69b9      	ldr	r1, [r7, #24]
 80089ec:	0148      	lsls	r0, r1, #5
 80089ee:	69f9      	ldr	r1, [r7, #28]
 80089f0:	4401      	add	r1, r0
 80089f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80089f6:	4313      	orrs	r3, r2
 80089f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	78db      	ldrb	r3, [r3, #3]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d11f      	bne.n	8008a42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	0151      	lsls	r1, r2, #5
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	440a      	add	r2, r1
 8008a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	0151      	lsls	r1, r2, #5
 8008a34:	69fa      	ldr	r2, [r7, #28]
 8008a36:	440a      	add	r2, r1
 8008a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d14b      	bne.n	8008ae0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d009      	beq.n	8008a64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	78db      	ldrb	r3, [r3, #3]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d128      	bne.n	8008abe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d110      	bne.n	8008a9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	0151      	lsls	r1, r2, #5
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	440a      	add	r2, r1
 8008a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	e00f      	b.n	8008abe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	0151      	lsls	r1, r2, #5
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	440a      	add	r2, r1
 8008ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008abc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	e12f      	b.n	8008d40 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	0151      	lsls	r1, r2, #5
 8008af2:	69fa      	ldr	r2, [r7, #28]
 8008af4:	440a      	add	r2, r1
 8008af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008afa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008afe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	78db      	ldrb	r3, [r3, #3]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d015      	beq.n	8008b34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 8117 	beq.w	8008d40 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	f003 030f 	and.w	r3, r3, #15
 8008b22:	2101      	movs	r1, #1
 8008b24:	fa01 f303 	lsl.w	r3, r1, r3
 8008b28:	69f9      	ldr	r1, [r7, #28]
 8008b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	634b      	str	r3, [r1, #52]	; 0x34
 8008b32:	e105      	b.n	8008d40 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d110      	bne.n	8008b66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	0151      	lsls	r1, r2, #5
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	440a      	add	r2, r1
 8008b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	e00f      	b.n	8008b86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	0151      	lsls	r1, r2, #5
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	440a      	add	r2, r1
 8008b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	68d9      	ldr	r1, [r3, #12]
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	781a      	ldrb	r2, [r3, #0]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	b298      	uxth	r0, r3
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	4603      	mov	r3, r0
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 fa2b 	bl	8008ff6 <USB_WritePacket>
 8008ba0:	e0ce      	b.n	8008d40 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	69fa      	ldr	r2, [r7, #28]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bbc:	0cdb      	lsrs	r3, r3, #19
 8008bbe:	04db      	lsls	r3, r3, #19
 8008bc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	0151      	lsls	r1, r2, #5
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008be0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008be4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d126      	bne.n	8008c3c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c04:	69b9      	ldr	r1, [r7, #24]
 8008c06:	0148      	lsls	r0, r1, #5
 8008c08:	69f9      	ldr	r1, [r7, #28]
 8008c0a:	4401      	add	r1, r0
 8008c0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c10:	4313      	orrs	r3, r2
 8008c12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	0151      	lsls	r1, r2, #5
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	440a      	add	r2, r1
 8008c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c32:	6113      	str	r3, [r2, #16]
 8008c34:	e036      	b.n	8008ca4 <USB_EPStartXfer+0x3dc>
 8008c36:	bf00      	nop
 8008c38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	695a      	ldr	r2, [r3, #20]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	4413      	add	r3, r2
 8008c46:	1e5a      	subs	r2, r3, #1
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c50:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5e:	691a      	ldr	r2, [r3, #16]
 8008c60:	8afb      	ldrh	r3, [r7, #22]
 8008c62:	04d9      	lsls	r1, r3, #19
 8008c64:	4b39      	ldr	r3, [pc, #228]	; (8008d4c <USB_EPStartXfer+0x484>)
 8008c66:	400b      	ands	r3, r1
 8008c68:	69b9      	ldr	r1, [r7, #24]
 8008c6a:	0148      	lsls	r0, r1, #5
 8008c6c:	69f9      	ldr	r1, [r7, #28]
 8008c6e:	4401      	add	r1, r0
 8008c70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c74:	4313      	orrs	r3, r2
 8008c76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	8af9      	ldrh	r1, [r7, #22]
 8008c8c:	fb01 f303 	mul.w	r3, r1, r3
 8008c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c94:	69b9      	ldr	r1, [r7, #24]
 8008c96:	0148      	lsls	r0, r1, #5
 8008c98:	69f9      	ldr	r1, [r7, #28]
 8008c9a:	4401      	add	r1, r0
 8008c9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d10d      	bne.n	8008cc6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d009      	beq.n	8008cc6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	68d9      	ldr	r1, [r3, #12]
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc2:	460a      	mov	r2, r1
 8008cc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	78db      	ldrb	r3, [r3, #3]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d128      	bne.n	8008d20 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d110      	bne.n	8008d00 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	e00f      	b.n	8008d20 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	69fa      	ldr	r2, [r7, #28]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	0151      	lsls	r1, r2, #5
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	440a      	add	r2, r1
 8008d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3720      	adds	r7, #32
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	1ff80000 	.word	0x1ff80000

08008d50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	f040 80cd 	bne.w	8008f0c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d132      	bne.n	8008de0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	0151      	lsls	r1, r2, #5
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	440a      	add	r2, r1
 8008d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	0151      	lsls	r1, r2, #5
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	440a      	add	r2, r1
 8008db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	0151      	lsls	r1, r2, #5
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	440a      	add	r2, r1
 8008dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd8:	0cdb      	lsrs	r3, r3, #19
 8008dda:	04db      	lsls	r3, r3, #19
 8008ddc:	6113      	str	r3, [r2, #16]
 8008dde:	e04e      	b.n	8008e7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	0151      	lsls	r1, r2, #5
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	440a      	add	r2, r1
 8008df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dfa:	0cdb      	lsrs	r3, r3, #19
 8008dfc:	04db      	lsls	r3, r3, #19
 8008dfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e22:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	695a      	ldr	r2, [r3, #20]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d903      	bls.n	8008e38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	0151      	lsls	r1, r2, #5
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e64:	691a      	ldr	r2, [r3, #16]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e6e:	6939      	ldr	r1, [r7, #16]
 8008e70:	0148      	lsls	r0, r1, #5
 8008e72:	6979      	ldr	r1, [r7, #20]
 8008e74:	4401      	add	r1, r0
 8008e76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d11e      	bne.n	8008ec2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d009      	beq.n	8008ea0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e98:	461a      	mov	r2, r3
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	0151      	lsls	r1, r2, #5
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	440a      	add	r2, r1
 8008eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	e092      	b.n	8008fe8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	0151      	lsls	r1, r2, #5
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008edc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ee0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d07e      	beq.n	8008fe8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	f003 030f 	and.w	r3, r3, #15
 8008efa:	2101      	movs	r1, #1
 8008efc:	fa01 f303 	lsl.w	r3, r1, r3
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f06:	4313      	orrs	r3, r2
 8008f08:	634b      	str	r3, [r1, #52]	; 0x34
 8008f0a:	e06d      	b.n	8008fe8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	0151      	lsls	r1, r2, #5
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	440a      	add	r2, r1
 8008f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f26:	0cdb      	lsrs	r3, r3, #19
 8008f28:	04db      	lsls	r3, r3, #19
 8008f2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f4e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	0151      	lsls	r1, r2, #5
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	440a      	add	r2, r1
 8008f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8c:	691a      	ldr	r2, [r3, #16]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f96:	6939      	ldr	r1, [r7, #16]
 8008f98:	0148      	lsls	r0, r1, #5
 8008f9a:	6979      	ldr	r1, [r7, #20]
 8008f9c:	4401      	add	r1, r0
 8008f9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d10d      	bne.n	8008fc8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d009      	beq.n	8008fc8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	68d9      	ldr	r1, [r3, #12]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc4:	460a      	mov	r2, r1
 8008fc6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b089      	sub	sp, #36	; 0x24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	4611      	mov	r1, r2
 8009002:	461a      	mov	r2, r3
 8009004:	460b      	mov	r3, r1
 8009006:	71fb      	strb	r3, [r7, #7]
 8009008:	4613      	mov	r3, r2
 800900a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009014:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009018:	2b00      	cmp	r3, #0
 800901a:	d11a      	bne.n	8009052 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800901c:	88bb      	ldrh	r3, [r7, #4]
 800901e:	3303      	adds	r3, #3
 8009020:	089b      	lsrs	r3, r3, #2
 8009022:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009024:	2300      	movs	r3, #0
 8009026:	61bb      	str	r3, [r7, #24]
 8009028:	e00f      	b.n	800904a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	031a      	lsls	r2, r3, #12
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	4413      	add	r3, r2
 8009032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009036:	461a      	mov	r2, r3
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	3304      	adds	r3, #4
 8009042:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	3301      	adds	r3, #1
 8009048:	61bb      	str	r3, [r7, #24]
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	429a      	cmp	r2, r3
 8009050:	d3eb      	bcc.n	800902a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3724      	adds	r7, #36	; 0x24
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009060:	b480      	push	{r7}
 8009062:	b089      	sub	sp, #36	; 0x24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	4613      	mov	r3, r2
 800906c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009076:	88fb      	ldrh	r3, [r7, #6]
 8009078:	3303      	adds	r3, #3
 800907a:	089b      	lsrs	r3, r3, #2
 800907c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800907e:	2300      	movs	r3, #0
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	e00b      	b.n	800909c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3304      	adds	r3, #4
 8009094:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	3301      	adds	r3, #1
 800909a:	61bb      	str	r3, [r7, #24]
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d3ef      	bcc.n	8009084 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80090a4:	69fb      	ldr	r3, [r7, #28]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3724      	adds	r7, #36	; 0x24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d12c      	bne.n	8009128 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	db12      	blt.n	8009106 <USB_EPSetStall+0x54>
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00f      	beq.n	8009106 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	0151      	lsls	r1, r2, #5
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	440a      	add	r2, r1
 80090fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009100:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009104:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	0151      	lsls	r1, r2, #5
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	440a      	add	r2, r1
 800911c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009124:	6013      	str	r3, [r2, #0]
 8009126:	e02b      	b.n	8009180 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	db12      	blt.n	8009160 <USB_EPSetStall+0xae>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00f      	beq.n	8009160 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	0151      	lsls	r1, r2, #5
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	440a      	add	r2, r1
 8009156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800915a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800915e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	0151      	lsls	r1, r2, #5
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	440a      	add	r2, r1
 8009176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800917a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800917e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d128      	bne.n	80091fc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	0151      	lsls	r1, r2, #5
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	440a      	add	r2, r1
 80091c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	78db      	ldrb	r3, [r3, #3]
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d003      	beq.n	80091da <USB_EPClearStall+0x4c>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	78db      	ldrb	r3, [r3, #3]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d138      	bne.n	800924c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	0151      	lsls	r1, r2, #5
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	440a      	add	r2, r1
 80091f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	e027      	b.n	800924c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	440a      	add	r2, r1
 8009212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009216:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800921a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	78db      	ldrb	r3, [r3, #3]
 8009220:	2b03      	cmp	r3, #3
 8009222:	d003      	beq.n	800922c <USB_EPClearStall+0x9e>
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	78db      	ldrb	r3, [r3, #3]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d10f      	bne.n	800924c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800925a:	b480      	push	{r7}
 800925c:	b085      	sub	sp, #20
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009278:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800927c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009294:	4313      	orrs	r3, r2
 8009296:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b085      	sub	sp, #20
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092c0:	f023 0303 	bic.w	r3, r3, #3
 80092c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092d4:	f023 0302 	bic.w	r3, r3, #2
 80092d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009302:	f023 0303 	bic.w	r3, r3, #3
 8009306:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009316:	f043 0302 	orr.w	r3, r3, #2
 800931a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800932a:	b480      	push	{r7}
 800932c:	b085      	sub	sp, #20
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4013      	ands	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009342:	68fb      	ldr	r3, [r7, #12]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009350:	b480      	push	{r7}
 8009352:	b085      	sub	sp, #20
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	4013      	ands	r3, r2
 8009372:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	0c1b      	lsrs	r3, r3, #16
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4013      	ands	r3, r2
 80093a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	b29b      	uxth	r3, r3
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	4013      	ands	r3, r2
 80093e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093e6:	68bb      	ldr	r3, [r7, #8]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009416:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	f003 030f 	and.w	r3, r3, #15
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	fa22 f303 	lsr.w	r3, r2, r3
 8009424:	01db      	lsls	r3, r3, #7
 8009426:	b2db      	uxtb	r3, r3
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	4313      	orrs	r3, r2
 800942c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800942e:	78fb      	ldrb	r3, [r7, #3]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4013      	ands	r3, r2
 8009440:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009442:	68bb      	ldr	r3, [r7, #8]
}
 8009444:	4618      	mov	r0, r3
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	f003 0301 	and.w	r3, r3, #1
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009486:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800948a:	f023 0307 	bic.w	r3, r3, #7
 800948e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
	...

080094b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	460b      	mov	r3, r1
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	333c      	adds	r3, #60	; 0x3c
 80094ca:	3304      	adds	r3, #4
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	4a26      	ldr	r2, [pc, #152]	; (800956c <USB_EP0_OutStart+0xb8>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d90a      	bls.n	80094ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094e8:	d101      	bne.n	80094ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e037      	b.n	800955e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f4:	461a      	mov	r2, r3
 80094f6:	2300      	movs	r3, #0
 80094f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800950c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800951c:	f043 0318 	orr.w	r3, r3, #24
 8009520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009530:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009534:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009536:	7afb      	ldrb	r3, [r7, #11]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d10f      	bne.n	800955c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009556:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800955a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	4f54300a 	.word	0x4f54300a

08009570 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4a13      	ldr	r2, [pc, #76]	; (80095d4 <USB_CoreReset+0x64>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d901      	bls.n	800958e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e01b      	b.n	80095c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	daf2      	bge.n	800957c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f043 0201 	orr.w	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <USB_CoreReset+0x64>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d901      	bls.n	80095b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e006      	b.n	80095c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d0f0      	beq.n	80095a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	00030d40 	.word	0x00030d40

080095d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80095dc:	4904      	ldr	r1, [pc, #16]	; (80095f0 <MX_FATFS_Init+0x18>)
 80095de:	4805      	ldr	r0, [pc, #20]	; (80095f4 <MX_FATFS_Init+0x1c>)
 80095e0:	f004 f95a 	bl	800d898 <FATFS_LinkDriver>
 80095e4:	4603      	mov	r3, r0
 80095e6:	461a      	mov	r2, r3
 80095e8:	4b03      	ldr	r3, [pc, #12]	; (80095f8 <MX_FATFS_Init+0x20>)
 80095ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80095ec:	bf00      	nop
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20002b74 	.word	0x20002b74
 80095f4:	08013aa0 	.word	0x08013aa0
 80095f8:	20002b70 	.word	0x20002b70

080095fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80095fc:	b480      	push	{r7}
 80095fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009600:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009602:	4618      	mov	r0, r3
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009616:	f000 f879 	bl	800970c <BSP_SD_IsDetected>
 800961a:	4603      	mov	r3, r0
 800961c:	2b01      	cmp	r3, #1
 800961e:	d001      	beq.n	8009624 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e012      	b.n	800964a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009624:	480b      	ldr	r0, [pc, #44]	; (8009654 <BSP_SD_Init+0x48>)
 8009626:	f7fc fdb4 	bl	8006192 <HAL_SD_Init>
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800962e:	79fb      	ldrb	r3, [r7, #7]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d109      	bne.n	8009648 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009638:	4806      	ldr	r0, [pc, #24]	; (8009654 <BSP_SD_Init+0x48>)
 800963a:	f7fd fb8d 	bl	8006d58 <HAL_SD_ConfigWideBusOperation>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009648:	79fb      	ldrb	r3, [r7, #7]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20002ae8 	.word	0x20002ae8

08009658 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af02      	add	r7, sp, #8
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	9300      	str	r3, [sp, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	68f9      	ldr	r1, [r7, #12]
 8009674:	4806      	ldr	r0, [pc, #24]	; (8009690 <BSP_SD_ReadBlocks+0x38>)
 8009676:	f7fc fe3b 	bl	80062f0 <HAL_SD_ReadBlocks>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009684:	7dfb      	ldrb	r3, [r7, #23]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20002ae8 	.word	0x20002ae8

08009694 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af02      	add	r7, sp, #8
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	68f9      	ldr	r1, [r7, #12]
 80096b0:	4806      	ldr	r0, [pc, #24]	; (80096cc <BSP_SD_WriteBlocks+0x38>)
 80096b2:	f7fc fffb 	bl	80066ac <HAL_SD_WriteBlocks>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20002ae8 	.word	0x20002ae8

080096d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80096d4:	4805      	ldr	r0, [pc, #20]	; (80096ec <BSP_SD_GetCardState+0x1c>)
 80096d6:	f7fd fbd9 	bl	8006e8c <HAL_SD_GetCardState>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b04      	cmp	r3, #4
 80096de:	bf14      	ite	ne
 80096e0:	2301      	movne	r3, #1
 80096e2:	2300      	moveq	r3, #0
 80096e4:	b2db      	uxtb	r3, r3
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20002ae8 	.word	0x20002ae8

080096f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	4803      	ldr	r0, [pc, #12]	; (8009708 <BSP_SD_GetCardInfo+0x18>)
 80096fc:	f7fd fb00 	bl	8006d00 <HAL_SD_GetCardInfo>
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	20002ae8 	.word	0x20002ae8

0800970c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009712:	2301      	movs	r3, #1
 8009714:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009716:	f000 f80b 	bl	8009730 <BSP_PlatformIsDetected>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009720:	2300      	movs	r3, #0
 8009722:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	b2db      	uxtb	r3, r3
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009736:	2301      	movs	r3, #1
 8009738:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800973a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800973e:	4807      	ldr	r0, [pc, #28]	; (800975c <BSP_PlatformIsDetected+0x2c>)
 8009740:	f7f9 ff8e 	bl	8003660 <HAL_GPIO_ReadPin>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800974a:	2300      	movs	r3, #0
 800974c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
 800974e:	2301      	movs	r3, #1
 8009750:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */
    return status;
 8009752:	79fb      	ldrb	r3, [r7, #7]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	40020800 	.word	0x40020800

08009760 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800976a:	4b0b      	ldr	r3, [pc, #44]	; (8009798 <SD_CheckStatus+0x38>)
 800976c:	2201      	movs	r2, #1
 800976e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009770:	f7ff ffae 	bl	80096d0 <BSP_SD_GetCardState>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d107      	bne.n	800978a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800977a:	4b07      	ldr	r3, [pc, #28]	; (8009798 <SD_CheckStatus+0x38>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	b2db      	uxtb	r3, r3
 8009780:	f023 0301 	bic.w	r3, r3, #1
 8009784:	b2da      	uxtb	r2, r3
 8009786:	4b04      	ldr	r3, [pc, #16]	; (8009798 <SD_CheckStatus+0x38>)
 8009788:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800978a:	4b03      	ldr	r3, [pc, #12]	; (8009798 <SD_CheckStatus+0x38>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	b2db      	uxtb	r3, r3
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20000039 	.word	0x20000039

0800979c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80097a6:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <SD_initialize+0x38>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80097ac:	f7ff ff2e 	bl	800960c <BSP_SD_Init>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d107      	bne.n	80097c6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80097b6:	79fb      	ldrb	r3, [r7, #7]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff ffd1 	bl	8009760 <SD_CheckStatus>
 80097be:	4603      	mov	r3, r0
 80097c0:	461a      	mov	r2, r3
 80097c2:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <SD_initialize+0x38>)
 80097c4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80097c6:	4b03      	ldr	r3, [pc, #12]	; (80097d4 <SD_initialize+0x38>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	b2db      	uxtb	r3, r3
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20000039 	.word	0x20000039

080097d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff ffbb 	bl	8009760 <SD_CheckStatus>
 80097ea:	4603      	mov	r3, r0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	607a      	str	r2, [r7, #4]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009808:	f04f 33ff 	mov.w	r3, #4294967295
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	68b8      	ldr	r0, [r7, #8]
 8009812:	f7ff ff21 	bl	8009658 <BSP_SD_ReadBlocks>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d107      	bne.n	800982c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800981c:	bf00      	nop
 800981e:	f7ff ff57 	bl	80096d0 <BSP_SD_GetCardState>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1fa      	bne.n	800981e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800982c:	7dfb      	ldrb	r3, [r7, #23]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b086      	sub	sp, #24
 800983a:	af00      	add	r7, sp, #0
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	603b      	str	r3, [r7, #0]
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800984a:	f04f 33ff 	mov.w	r3, #4294967295
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	68b8      	ldr	r0, [r7, #8]
 8009854:	f7ff ff1e 	bl	8009694 <BSP_SD_WriteBlocks>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d107      	bne.n	800986e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800985e:	bf00      	nop
 8009860:	f7ff ff36 	bl	80096d0 <BSP_SD_GetCardState>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1fa      	bne.n	8009860 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08c      	sub	sp, #48	; 0x30
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	603a      	str	r2, [r7, #0]
 8009882:	71fb      	strb	r3, [r7, #7]
 8009884:	460b      	mov	r3, r1
 8009886:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800988e:	4b25      	ldr	r3, [pc, #148]	; (8009924 <SD_ioctl+0xac>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <SD_ioctl+0x28>
 800989c:	2303      	movs	r3, #3
 800989e:	e03c      	b.n	800991a <SD_ioctl+0xa2>

  switch (cmd)
 80098a0:	79bb      	ldrb	r3, [r7, #6]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d834      	bhi.n	8009910 <SD_ioctl+0x98>
 80098a6:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <SD_ioctl+0x34>)
 80098a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ac:	080098bd 	.word	0x080098bd
 80098b0:	080098c5 	.word	0x080098c5
 80098b4:	080098dd 	.word	0x080098dd
 80098b8:	080098f7 	.word	0x080098f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098c2:	e028      	b.n	8009916 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098c4:	f107 030c 	add.w	r3, r7, #12
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff ff11 	bl	80096f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098da:	e01c      	b.n	8009916 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7ff ff05 	bl	80096f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098f4:	e00f      	b.n	8009916 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098f6:	f107 030c 	add.w	r3, r7, #12
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff fef8 	bl	80096f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009902:	0a5a      	lsrs	r2, r3, #9
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800990e:	e002      	b.n	8009916 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009910:	2304      	movs	r3, #4
 8009912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800991a:	4618      	mov	r0, r3
 800991c:	3730      	adds	r7, #48	; 0x30
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20000039 	.word	0x20000039

08009928 <USBD_Midi_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]

  pdev->pClassData = USBD_malloc(sizeof (USBD_Midi_HandleTypeDef));
 8009934:	2044      	movs	r0, #68	; 0x44
 8009936:	f004 fc97 	bl	800e268 <USBD_static_malloc>
 800993a:	4602      	mov	r2, r0
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <USBD_Midi_Init+0x28>
  {
    return USBD_FAIL;
 800994c:	2303      	movs	r3, #3
 800994e:	e016      	b.n	800997e <USBD_Midi_Init+0x56>
  }
  else
  {
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009956:	60fb      	str	r3, [r7, #12]

  /* Open the in EP */
  USBD_LL_OpenEP(pdev,
 8009958:	2340      	movs	r3, #64	; 0x40
 800995a:	2202      	movs	r2, #2
 800995c:	2181      	movs	r1, #129	; 0x81
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f004 fb5f 	bl	800e022 <USBD_LL_OpenEP>
                USBD_EP_TYPE_BULK,
                MIDI_DATA_IN_PACKET_SIZE
                );

  /* Open the out EP */
  USBD_LL_OpenEP(pdev,
 8009964:	2340      	movs	r3, #64	; 0x40
 8009966:	2202      	movs	r2, #2
 8009968:	2101      	movs	r1, #1
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f004 fb59 	bl	800e022 <USBD_LL_OpenEP>
          );

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
                     MIDI_OUT_EP,
                     hmidi->rxBuffer,
 8009970:	68fa      	ldr	r2, [r7, #12]
  USBD_LL_PrepareReceive(pdev,
 8009972:	2340      	movs	r3, #64	; 0x40
 8009974:	2101      	movs	r1, #1
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f004 fc42 	bl	800e200 <USBD_LL_PrepareReceive>
                     MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 800997c:	2300      	movs	r3, #0
  }
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_Midi_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Midi_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b082      	sub	sp, #8
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	70fb      	strb	r3, [r7, #3]
  USBD_LL_CloseEP(pdev,
 8009992:	2181      	movs	r1, #129	; 0x81
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f004 fb6a 	bl	800e06e <USBD_LL_CloseEP>
      MIDI_IN_EP);
  USBD_LL_CloseEP(pdev,
 800999a:	2101      	movs	r1, #1
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f004 fb66 	bl	800e06e <USBD_LL_CloseEP>
      MIDI_OUT_EP);
  return USBD_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_Midi_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Midi_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d007      	beq.n	80099d2 <USBD_Midi_Setup+0x26>
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d10b      	bne.n	80099de <USBD_Midi_Setup+0x32>
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 f937 	bl	800ac3c <USBD_CtlError>
      return USBD_FAIL;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e006      	b.n	80099e0 <USBD_Midi_Setup+0x34>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {

    default:
      USBD_CtlError (pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 f931 	bl	800ac3c <USBD_CtlError>
      return USBD_FAIL;
 80099da:	2303      	movs	r3, #3
 80099dc:	e000      	b.n	80099e0 <USBD_Midi_Setup+0x34>
    }
  }
  return USBD_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_Midi_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Midi_GetCfgDesc (uint16_t *length)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_CfgDesc);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2265      	movs	r2, #101	; 0x65
 80099f4:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_CfgDesc;
 80099f6:	4b03      	ldr	r3, [pc, #12]	; (8009a04 <USBD_Midi_GetCfgDesc+0x1c>)
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	20000074 	.word	0x20000074

08009a08 <USBD_Midi_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <USBD_Midi_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <USBD_Midi_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <USBD_Midi_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_Midi_SOF (USBD_HandleTypeDef *pdev)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USBD_Midi_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <USBD_Midi_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USBD_Midi_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_Midi_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
   USBD_Midi_HandleTypeDef *hmidi = (USBD_Midi_HandleTypeDef*) pdev->pClassData;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aaa:	613b      	str	r3, [r7, #16]

  /* Get the received data buffer and update the counter */

//  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
   hmidi->rxLen = USBD_LL_GetRxDataSize (pdev, epnum);
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f004 fbc6 	bl	800e242 <USBD_LL_GetRxDataSize>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	641a      	str	r2, [r3, #64]	; 0x40
      ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer, hmidi->rxLen);
      break;
  }
  */

uint8_t *buf = hmidi->rxBuffer;
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	60fb      	str	r3, [r7, #12]

for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	e00c      	b.n	8009ae0 <USBD_Midi_DataOut+0x48>
  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(buf+i, 4);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68f9      	ldr	r1, [r7, #12]
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	440a      	add	r2, r1
 8009ad4:	2104      	movs	r1, #4
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	4798      	blx	r3
for (uint32_t i=0; i<hmidi->rxLen; i+=4) {
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	3304      	adds	r3, #4
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d3ed      	bcc.n	8009ac6 <USBD_Midi_DataOut+0x2e>

//  ((USBD_Midi_ItfTypeDef *)pdev->pUserData)->Receive(hmidi->rxBuffer,hmidi->rxLen);

  USBD_LL_PrepareReceive(pdev,
                       MIDI_OUT_EP,
                       hmidi->rxBuffer,
 8009aea:	693a      	ldr	r2, [r7, #16]
  USBD_LL_PrepareReceive(pdev,
 8009aec:	2340      	movs	r3, #64	; 0x40
 8009aee:	2101      	movs	r1, #1
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f004 fb85 	bl	800e200 <USBD_LL_PrepareReceive>
                       MIDI_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_Midi_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Midi_GetDeviceQualifierDesc (uint16_t *length)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Midi_DeviceQualifierDesc);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	220a      	movs	r2, #10
 8009b0c:	801a      	strh	r2, [r3, #0]
  return USBD_Midi_DeviceQualifierDesc;
 8009b0e:	4b03      	ldr	r3, [pc, #12]	; (8009b1c <USBD_Midi_GetDeviceQualifierDesc+0x1c>)
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	200000dc 	.word	0x200000dc

08009b20 <USBD_Midi_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_Midi_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_Midi_ItfTypeDef *fops)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <USBD_Midi_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b086      	sub	sp, #24
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e01f      	b.n	8009ba6 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	79fa      	ldrb	r2, [r7, #7]
 8009b98:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f004 f9da 	bl	800df54 <USBD_LL_Init>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e016      	b.n	8009bf4 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	f107 020e 	add.w	r2, r7, #14
 8009be6:	4610      	mov	r0, r2
 8009be8:	4798      	blx	r3
 8009bea:	4602      	mov	r2, r0
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f004 f9f1 	bl	800dfec <USBD_LL_Start>
 8009c0a:	4603      	mov	r3, r0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009c36:	2303      	movs	r3, #3
 8009c38:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d009      	beq.n	8009c58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	78fa      	ldrb	r2, [r7, #3]
 8009c4e:	4611      	mov	r1, r2
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4798      	blx	r3
 8009c54:	4603      	mov	r3, r0
 8009c56:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b082      	sub	sp, #8
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d007      	beq.n	8009c88 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	78fa      	ldrb	r2, [r7, #3]
 8009c82:	4611      	mov	r1, r2
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	4798      	blx	r3
  }

  return USBD_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 ff8f 	bl	800abc8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009cb8:	461a      	mov	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009cc6:	f003 031f 	and.w	r3, r3, #31
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d01a      	beq.n	8009d04 <USBD_LL_SetupStage+0x72>
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d822      	bhi.n	8009d18 <USBD_LL_SetupStage+0x86>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <USBD_LL_SetupStage+0x4a>
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d00a      	beq.n	8009cf0 <USBD_LL_SetupStage+0x5e>
 8009cda:	e01d      	b.n	8009d18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fa61 	bl	800a1ac <USBD_StdDevReq>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]
      break;
 8009cee:	e020      	b.n	8009d32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fac5 	bl	800a288 <USBD_StdItfReq>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73fb      	strb	r3, [r7, #15]
      break;
 8009d02:	e016      	b.n	8009d32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fb04 	bl	800a31a <USBD_StdEPReq>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]
      break;
 8009d16:	e00c      	b.n	8009d32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f004 f9c0 	bl	800e0ac <USBD_LL_StallEP>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d30:	bf00      	nop
  }

  return ret;
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	460b      	mov	r3, r1
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009d4a:	7afb      	ldrb	r3, [r7, #11]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d138      	bne.n	8009dc2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d14a      	bne.n	8009df8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	689a      	ldr	r2, [r3, #8]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d913      	bls.n	8009d96 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	1ad2      	subs	r2, r2, r3
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	68da      	ldr	r2, [r3, #12]
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	4293      	cmp	r3, r2
 8009d86:	bf28      	it	cs
 8009d88:	4613      	movcs	r3, r2
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	6879      	ldr	r1, [r7, #4]
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fff1 	bl	800ad76 <USBD_CtlContinueRx>
 8009d94:	e030      	b.n	8009df8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d10b      	bne.n	8009dba <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d005      	beq.n	8009dba <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 ffec 	bl	800ad98 <USBD_CtlSendStatus>
 8009dc0:	e01a      	b.n	8009df8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d114      	bne.n	8009df8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00e      	beq.n	8009df8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	7afa      	ldrb	r2, [r7, #11]
 8009de4:	4611      	mov	r1, r2
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	4798      	blx	r3
 8009dea:	4603      	mov	r3, r0
 8009dec:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d001      	beq.n	8009df8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	e000      	b.n	8009dfa <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b086      	sub	sp, #24
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	607a      	str	r2, [r7, #4]
 8009e0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d16b      	bne.n	8009eee <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3314      	adds	r3, #20
 8009e1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d156      	bne.n	8009ed4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d914      	bls.n	8009e5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	1ad2      	subs	r2, r2, r3
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	461a      	mov	r2, r3
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 ff83 	bl	800ad54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e4e:	2300      	movs	r3, #0
 8009e50:	2200      	movs	r2, #0
 8009e52:	2100      	movs	r1, #0
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f004 f9d3 	bl	800e200 <USBD_LL_PrepareReceive>
 8009e5a:	e03b      	b.n	8009ed4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	68da      	ldr	r2, [r3, #12]
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d11c      	bne.n	8009ea2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d316      	bcc.n	8009ea2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d20f      	bcs.n	8009ea2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e82:	2200      	movs	r2, #0
 8009e84:	2100      	movs	r1, #0
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 ff64 	bl	800ad54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e94:	2300      	movs	r3, #0
 8009e96:	2200      	movs	r2, #0
 8009e98:	2100      	movs	r1, #0
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f004 f9b0 	bl	800e200 <USBD_LL_PrepareReceive>
 8009ea0:	e018      	b.n	8009ed4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d10b      	bne.n	8009ec6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d005      	beq.n	8009ec6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ec6:	2180      	movs	r1, #128	; 0x80
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f004 f8ef 	bl	800e0ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 ff75 	bl	800adbe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d122      	bne.n	8009f24 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff fe98 	bl	8009c14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009eec:	e01a      	b.n	8009f24 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b03      	cmp	r3, #3
 8009ef8:	d114      	bne.n	8009f24 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f00:	695b      	ldr	r3, [r3, #20]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00e      	beq.n	8009f24 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	7afa      	ldrb	r2, [r7, #11]
 8009f10:	4611      	mov	r1, r2
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	4798      	blx	r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
 8009f22:	e000      	b.n	8009f26 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e02f      	b.n	8009fc2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00f      	beq.n	8009f8c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d009      	beq.n	8009f8c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	6852      	ldr	r2, [r2, #4]
 8009f84:	b2d2      	uxtb	r2, r2
 8009f86:	4611      	mov	r1, r2
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f8c:	2340      	movs	r3, #64	; 0x40
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2100      	movs	r1, #0
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f004 f845 	bl	800e022 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2240      	movs	r2, #64	; 0x40
 8009fa4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fa8:	2340      	movs	r3, #64	; 0x40
 8009faa:	2200      	movs	r2, #0
 8009fac:	2180      	movs	r1, #128	; 0x80
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f004 f837 	bl	800e022 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2240      	movs	r2, #64	; 0x40
 8009fbe:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	78fa      	ldrb	r2, [r7, #3]
 8009fda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	370c      	adds	r7, #12
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2204      	movs	r2, #4
 800a004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b04      	cmp	r3, #4
 800a028:	d106      	bne.n	800a038 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a030:	b2da      	uxtb	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a058:	2303      	movs	r3, #3
 800a05a:	e012      	b.n	800a082 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b03      	cmp	r3, #3
 800a066:	d10b      	bne.n	800a080 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06e:	69db      	ldr	r3, [r3, #28]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e014      	b.n	800a0ce <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d10d      	bne.n	800a0cc <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b6:	6a1b      	ldr	r3, [r3, #32]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d007      	beq.n	800a0cc <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c2:	6a1b      	ldr	r3, [r3, #32]
 800a0c4:	78fa      	ldrb	r2, [r7, #3]
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e014      	b.n	800a11a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	d10d      	bne.n	800a118 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	2b00      	cmp	r3, #0
 800a106:	d007      	beq.n	800a118 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	4611      	mov	r1, r2
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	6852      	ldr	r2, [r2, #4]
 800a15e:	b2d2      	uxtb	r2, r2
 800a160:	4611      	mov	r1, r2
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	4798      	blx	r3
  }

  return USBD_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	3301      	adds	r3, #1
 800a186:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a18e:	8a3b      	ldrh	r3, [r7, #16]
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	b21a      	sxth	r2, r3
 800a194:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a198:	4313      	orrs	r3, r2
 800a19a:	b21b      	sxth	r3, r3
 800a19c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a19e:	89fb      	ldrh	r3, [r7, #14]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	371c      	adds	r7, #28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1c2:	2b40      	cmp	r3, #64	; 0x40
 800a1c4:	d005      	beq.n	800a1d2 <USBD_StdDevReq+0x26>
 800a1c6:	2b40      	cmp	r3, #64	; 0x40
 800a1c8:	d853      	bhi.n	800a272 <USBD_StdDevReq+0xc6>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00b      	beq.n	800a1e6 <USBD_StdDevReq+0x3a>
 800a1ce:	2b20      	cmp	r3, #32
 800a1d0:	d14f      	bne.n	800a272 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	4798      	blx	r3
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1e4:	e04a      	b.n	800a27c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	2b09      	cmp	r3, #9
 800a1ec:	d83b      	bhi.n	800a266 <USBD_StdDevReq+0xba>
 800a1ee:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <USBD_StdDevReq+0x48>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	0800a249 	.word	0x0800a249
 800a1f8:	0800a25d 	.word	0x0800a25d
 800a1fc:	0800a267 	.word	0x0800a267
 800a200:	0800a253 	.word	0x0800a253
 800a204:	0800a267 	.word	0x0800a267
 800a208:	0800a227 	.word	0x0800a227
 800a20c:	0800a21d 	.word	0x0800a21d
 800a210:	0800a267 	.word	0x0800a267
 800a214:	0800a23f 	.word	0x0800a23f
 800a218:	0800a231 	.word	0x0800a231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f9de 	bl	800a5e0 <USBD_GetDescriptor>
          break;
 800a224:	e024      	b.n	800a270 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fb43 	bl	800a8b4 <USBD_SetAddress>
          break;
 800a22e:	e01f      	b.n	800a270 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fb82 	bl	800a93c <USBD_SetConfig>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]
          break;
 800a23c:	e018      	b.n	800a270 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fc21 	bl	800aa88 <USBD_GetConfig>
          break;
 800a246:	e013      	b.n	800a270 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fc52 	bl	800aaf4 <USBD_GetStatus>
          break;
 800a250:	e00e      	b.n	800a270 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fc81 	bl	800ab5c <USBD_SetFeature>
          break;
 800a25a:	e009      	b.n	800a270 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fc90 	bl	800ab84 <USBD_ClrFeature>
          break;
 800a264:	e004      	b.n	800a270 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fce7 	bl	800ac3c <USBD_CtlError>
          break;
 800a26e:	bf00      	nop
      }
      break;
 800a270:	e004      	b.n	800a27c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fce1 	bl	800ac3c <USBD_CtlError>
      break;
 800a27a:	bf00      	nop
  }

  return ret;
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop

0800a288 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a29e:	2b40      	cmp	r3, #64	; 0x40
 800a2a0:	d005      	beq.n	800a2ae <USBD_StdItfReq+0x26>
 800a2a2:	2b40      	cmp	r3, #64	; 0x40
 800a2a4:	d82f      	bhi.n	800a306 <USBD_StdItfReq+0x7e>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <USBD_StdItfReq+0x26>
 800a2aa:	2b20      	cmp	r3, #32
 800a2ac:	d12b      	bne.n	800a306 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d81d      	bhi.n	800a2f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	889b      	ldrh	r3, [r3, #4]
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d813      	bhi.n	800a2ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	4798      	blx	r3
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	88db      	ldrh	r3, [r3, #6]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d110      	bne.n	800a302 <USBD_StdItfReq+0x7a>
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10d      	bne.n	800a302 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fd56 	bl	800ad98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a2ec:	e009      	b.n	800a302 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fca3 	bl	800ac3c <USBD_CtlError>
          break;
 800a2f6:	e004      	b.n	800a302 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fc9e 	bl	800ac3c <USBD_CtlError>
          break;
 800a300:	e000      	b.n	800a304 <USBD_StdItfReq+0x7c>
          break;
 800a302:	bf00      	nop
      }
      break;
 800a304:	e004      	b.n	800a310 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fc97 	bl	800ac3c <USBD_CtlError>
      break;
 800a30e:	bf00      	nop
  }

  return ret;
 800a310:	7bfb      	ldrb	r3, [r7, #15]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	889b      	ldrh	r3, [r3, #4]
 800a32c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a336:	2b40      	cmp	r3, #64	; 0x40
 800a338:	d007      	beq.n	800a34a <USBD_StdEPReq+0x30>
 800a33a:	2b40      	cmp	r3, #64	; 0x40
 800a33c:	f200 8145 	bhi.w	800a5ca <USBD_StdEPReq+0x2b0>
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00c      	beq.n	800a35e <USBD_StdEPReq+0x44>
 800a344:	2b20      	cmp	r3, #32
 800a346:	f040 8140 	bne.w	800a5ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]
      break;
 800a35c:	e13a      	b.n	800a5d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	785b      	ldrb	r3, [r3, #1]
 800a362:	2b03      	cmp	r3, #3
 800a364:	d007      	beq.n	800a376 <USBD_StdEPReq+0x5c>
 800a366:	2b03      	cmp	r3, #3
 800a368:	f300 8129 	bgt.w	800a5be <USBD_StdEPReq+0x2a4>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d07f      	beq.n	800a470 <USBD_StdEPReq+0x156>
 800a370:	2b01      	cmp	r3, #1
 800a372:	d03c      	beq.n	800a3ee <USBD_StdEPReq+0xd4>
 800a374:	e123      	b.n	800a5be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d002      	beq.n	800a388 <USBD_StdEPReq+0x6e>
 800a382:	2b03      	cmp	r3, #3
 800a384:	d016      	beq.n	800a3b4 <USBD_StdEPReq+0x9a>
 800a386:	e02c      	b.n	800a3e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00d      	beq.n	800a3aa <USBD_StdEPReq+0x90>
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	2b80      	cmp	r3, #128	; 0x80
 800a392:	d00a      	beq.n	800a3aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f003 fe87 	bl	800e0ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a39e:	2180      	movs	r1, #128	; 0x80
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f003 fe83 	bl	800e0ac <USBD_LL_StallEP>
 800a3a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3a8:	e020      	b.n	800a3ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fc45 	bl	800ac3c <USBD_CtlError>
              break;
 800a3b2:	e01b      	b.n	800a3ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	885b      	ldrh	r3, [r3, #2]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10e      	bne.n	800a3da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00b      	beq.n	800a3da <USBD_StdEPReq+0xc0>
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	2b80      	cmp	r3, #128	; 0x80
 800a3c6:	d008      	beq.n	800a3da <USBD_StdEPReq+0xc0>
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	88db      	ldrh	r3, [r3, #6]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d104      	bne.n	800a3da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3d0:	7bbb      	ldrb	r3, [r7, #14]
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f003 fe69 	bl	800e0ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fcdc 	bl	800ad98 <USBD_CtlSendStatus>

              break;
 800a3e0:	e004      	b.n	800a3ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fc29 	bl	800ac3c <USBD_CtlError>
              break;
 800a3ea:	bf00      	nop
          }
          break;
 800a3ec:	e0ec      	b.n	800a5c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d002      	beq.n	800a400 <USBD_StdEPReq+0xe6>
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d016      	beq.n	800a42c <USBD_StdEPReq+0x112>
 800a3fe:	e030      	b.n	800a462 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a400:	7bbb      	ldrb	r3, [r7, #14]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00d      	beq.n	800a422 <USBD_StdEPReq+0x108>
 800a406:	7bbb      	ldrb	r3, [r7, #14]
 800a408:	2b80      	cmp	r3, #128	; 0x80
 800a40a:	d00a      	beq.n	800a422 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a40c:	7bbb      	ldrb	r3, [r7, #14]
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f003 fe4b 	bl	800e0ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a416:	2180      	movs	r1, #128	; 0x80
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f003 fe47 	bl	800e0ac <USBD_LL_StallEP>
 800a41e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a420:	e025      	b.n	800a46e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fc09 	bl	800ac3c <USBD_CtlError>
              break;
 800a42a:	e020      	b.n	800a46e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	885b      	ldrh	r3, [r3, #2]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d11b      	bne.n	800a46c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a434:	7bbb      	ldrb	r3, [r7, #14]
 800a436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d004      	beq.n	800a448 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f003 fe51 	bl	800e0ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fca5 	bl	800ad98 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	4798      	blx	r3
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a460:	e004      	b.n	800a46c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fbe9 	bl	800ac3c <USBD_CtlError>
              break;
 800a46a:	e000      	b.n	800a46e <USBD_StdEPReq+0x154>
              break;
 800a46c:	bf00      	nop
          }
          break;
 800a46e:	e0ab      	b.n	800a5c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d002      	beq.n	800a482 <USBD_StdEPReq+0x168>
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d032      	beq.n	800a4e6 <USBD_StdEPReq+0x1cc>
 800a480:	e097      	b.n	800a5b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d007      	beq.n	800a498 <USBD_StdEPReq+0x17e>
 800a488:	7bbb      	ldrb	r3, [r7, #14]
 800a48a:	2b80      	cmp	r3, #128	; 0x80
 800a48c:	d004      	beq.n	800a498 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fbd3 	bl	800ac3c <USBD_CtlError>
                break;
 800a496:	e091      	b.n	800a5bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a498:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	da0b      	bge.n	800a4b8 <USBD_StdEPReq+0x19e>
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	3310      	adds	r3, #16
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	e00b      	b.n	800a4d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4be:	4613      	mov	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fc1d 	bl	800ad1e <USBD_CtlSendData>
              break;
 800a4e4:	e06a      	b.n	800a5bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	da11      	bge.n	800a512 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4ee:	7bbb      	ldrb	r3, [r7, #14]
 800a4f0:	f003 020f 	and.w	r2, r3, #15
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	440b      	add	r3, r1
 800a500:	3324      	adds	r3, #36	; 0x24
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d117      	bne.n	800a538 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a508:	6839      	ldr	r1, [r7, #0]
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fb96 	bl	800ac3c <USBD_CtlError>
                  break;
 800a510:	e054      	b.n	800a5bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a512:	7bbb      	ldrb	r3, [r7, #14]
 800a514:	f003 020f 	and.w	r2, r3, #15
 800a518:	6879      	ldr	r1, [r7, #4]
 800a51a:	4613      	mov	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	440b      	add	r3, r1
 800a524:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d104      	bne.n	800a538 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fb83 	bl	800ac3c <USBD_CtlError>
                  break;
 800a536:	e041      	b.n	800a5bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	da0b      	bge.n	800a558 <USBD_StdEPReq+0x23e>
 800a540:	7bbb      	ldrb	r3, [r7, #14]
 800a542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a546:	4613      	mov	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	3310      	adds	r3, #16
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	4413      	add	r3, r2
 800a554:	3304      	adds	r3, #4
 800a556:	e00b      	b.n	800a570 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a55e:	4613      	mov	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	4413      	add	r3, r2
 800a56e:	3304      	adds	r3, #4
 800a570:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a572:	7bbb      	ldrb	r3, [r7, #14]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <USBD_StdEPReq+0x264>
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b80      	cmp	r3, #128	; 0x80
 800a57c:	d103      	bne.n	800a586 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	2200      	movs	r2, #0
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	e00e      	b.n	800a5a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f003 fdcc 	bl	800e128 <USBD_LL_IsStallEP>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2201      	movs	r2, #1
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	e002      	b.n	800a5a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fbb7 	bl	800ad1e <USBD_CtlSendData>
              break;
 800a5b0:	e004      	b.n	800a5bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fb41 	bl	800ac3c <USBD_CtlError>
              break;
 800a5ba:	bf00      	nop
          }
          break;
 800a5bc:	e004      	b.n	800a5c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fb3b 	bl	800ac3c <USBD_CtlError>
          break;
 800a5c6:	bf00      	nop
      }
      break;
 800a5c8:	e004      	b.n	800a5d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fb35 	bl	800ac3c <USBD_CtlError>
      break;
 800a5d2:	bf00      	nop
  }

  return ret;
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	885b      	ldrh	r3, [r3, #2]
 800a5fa:	0a1b      	lsrs	r3, r3, #8
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	3b01      	subs	r3, #1
 800a600:	2b06      	cmp	r3, #6
 800a602:	f200 8128 	bhi.w	800a856 <USBD_GetDescriptor+0x276>
 800a606:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <USBD_GetDescriptor+0x2c>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a629 	.word	0x0800a629
 800a610:	0800a641 	.word	0x0800a641
 800a614:	0800a681 	.word	0x0800a681
 800a618:	0800a857 	.word	0x0800a857
 800a61c:	0800a857 	.word	0x0800a857
 800a620:	0800a7f7 	.word	0x0800a7f7
 800a624:	0800a823 	.word	0x0800a823
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	7c12      	ldrb	r2, [r2, #16]
 800a634:	f107 0108 	add.w	r1, r7, #8
 800a638:	4610      	mov	r0, r2
 800a63a:	4798      	blx	r3
 800a63c:	60f8      	str	r0, [r7, #12]
      break;
 800a63e:	e112      	b.n	800a866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7c1b      	ldrb	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10d      	bne.n	800a664 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a650:	f107 0208 	add.w	r2, r7, #8
 800a654:	4610      	mov	r0, r2
 800a656:	4798      	blx	r3
 800a658:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3301      	adds	r3, #1
 800a65e:	2202      	movs	r2, #2
 800a660:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a662:	e100      	b.n	800a866 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66c:	f107 0208 	add.w	r2, r7, #8
 800a670:	4610      	mov	r0, r2
 800a672:	4798      	blx	r3
 800a674:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	3301      	adds	r3, #1
 800a67a:	2202      	movs	r2, #2
 800a67c:	701a      	strb	r2, [r3, #0]
      break;
 800a67e:	e0f2      	b.n	800a866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	885b      	ldrh	r3, [r3, #2]
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b05      	cmp	r3, #5
 800a688:	f200 80ac 	bhi.w	800a7e4 <USBD_GetDescriptor+0x204>
 800a68c:	a201      	add	r2, pc, #4	; (adr r2, 800a694 <USBD_GetDescriptor+0xb4>)
 800a68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a692:	bf00      	nop
 800a694:	0800a6ad 	.word	0x0800a6ad
 800a698:	0800a6e1 	.word	0x0800a6e1
 800a69c:	0800a715 	.word	0x0800a715
 800a6a0:	0800a749 	.word	0x0800a749
 800a6a4:	0800a77d 	.word	0x0800a77d
 800a6a8:	0800a7b1 	.word	0x0800a7b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00b      	beq.n	800a6d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	7c12      	ldrb	r2, [r2, #16]
 800a6c4:	f107 0108 	add.w	r1, r7, #8
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	4798      	blx	r3
 800a6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ce:	e091      	b.n	800a7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fab2 	bl	800ac3c <USBD_CtlError>
            err++;
 800a6d8:	7afb      	ldrb	r3, [r7, #11]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a6de:	e089      	b.n	800a7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00b      	beq.n	800a704 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	7c12      	ldrb	r2, [r2, #16]
 800a6f8:	f107 0108 	add.w	r1, r7, #8
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	4798      	blx	r3
 800a700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a702:	e077      	b.n	800a7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fa98 	bl	800ac3c <USBD_CtlError>
            err++;
 800a70c:	7afb      	ldrb	r3, [r7, #11]
 800a70e:	3301      	adds	r3, #1
 800a710:	72fb      	strb	r3, [r7, #11]
          break;
 800a712:	e06f      	b.n	800a7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00b      	beq.n	800a738 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	7c12      	ldrb	r2, [r2, #16]
 800a72c:	f107 0108 	add.w	r1, r7, #8
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
 800a734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a736:	e05d      	b.n	800a7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a738:	6839      	ldr	r1, [r7, #0]
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fa7e 	bl	800ac3c <USBD_CtlError>
            err++;
 800a740:	7afb      	ldrb	r3, [r7, #11]
 800a742:	3301      	adds	r3, #1
 800a744:	72fb      	strb	r3, [r7, #11]
          break;
 800a746:	e055      	b.n	800a7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00b      	beq.n	800a76c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	7c12      	ldrb	r2, [r2, #16]
 800a760:	f107 0108 	add.w	r1, r7, #8
 800a764:	4610      	mov	r0, r2
 800a766:	4798      	blx	r3
 800a768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a76a:	e043      	b.n	800a7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa64 	bl	800ac3c <USBD_CtlError>
            err++;
 800a774:	7afb      	ldrb	r3, [r7, #11]
 800a776:	3301      	adds	r3, #1
 800a778:	72fb      	strb	r3, [r7, #11]
          break;
 800a77a:	e03b      	b.n	800a7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00b      	beq.n	800a7a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	7c12      	ldrb	r2, [r2, #16]
 800a794:	f107 0108 	add.w	r1, r7, #8
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a79e:	e029      	b.n	800a7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fa4a 	bl	800ac3c <USBD_CtlError>
            err++;
 800a7a8:	7afb      	ldrb	r3, [r7, #11]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ae:	e021      	b.n	800a7f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00b      	beq.n	800a7d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	7c12      	ldrb	r2, [r2, #16]
 800a7c8:	f107 0108 	add.w	r1, r7, #8
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	4798      	blx	r3
 800a7d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7d2:	e00f      	b.n	800a7f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fa30 	bl	800ac3c <USBD_CtlError>
            err++;
 800a7dc:	7afb      	ldrb	r3, [r7, #11]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7e2:	e007      	b.n	800a7f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fa28 	bl	800ac3c <USBD_CtlError>
          err++;
 800a7ec:	7afb      	ldrb	r3, [r7, #11]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a7f2:	bf00      	nop
      }
      break;
 800a7f4:	e037      	b.n	800a866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	7c1b      	ldrb	r3, [r3, #16]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d109      	bne.n	800a812 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a806:	f107 0208 	add.w	r2, r7, #8
 800a80a:	4610      	mov	r0, r2
 800a80c:	4798      	blx	r3
 800a80e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a810:	e029      	b.n	800a866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fa11 	bl	800ac3c <USBD_CtlError>
        err++;
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	3301      	adds	r3, #1
 800a81e:	72fb      	strb	r3, [r7, #11]
      break;
 800a820:	e021      	b.n	800a866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	7c1b      	ldrb	r3, [r3, #16]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10d      	bne.n	800a846 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	f107 0208 	add.w	r2, r7, #8
 800a836:	4610      	mov	r0, r2
 800a838:	4798      	blx	r3
 800a83a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3301      	adds	r3, #1
 800a840:	2207      	movs	r2, #7
 800a842:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a844:	e00f      	b.n	800a866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f9f7 	bl	800ac3c <USBD_CtlError>
        err++;
 800a84e:	7afb      	ldrb	r3, [r7, #11]
 800a850:	3301      	adds	r3, #1
 800a852:	72fb      	strb	r3, [r7, #11]
      break;
 800a854:	e007      	b.n	800a866 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f9ef 	bl	800ac3c <USBD_CtlError>
      err++;
 800a85e:	7afb      	ldrb	r3, [r7, #11]
 800a860:	3301      	adds	r3, #1
 800a862:	72fb      	strb	r3, [r7, #11]
      break;
 800a864:	bf00      	nop
  }

  if (err != 0U)
 800a866:	7afb      	ldrb	r3, [r7, #11]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d11e      	bne.n	800a8aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	88db      	ldrh	r3, [r3, #6]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d016      	beq.n	800a8a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a874:	893b      	ldrh	r3, [r7, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00e      	beq.n	800a898 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	88da      	ldrh	r2, [r3, #6]
 800a87e:	893b      	ldrh	r3, [r7, #8]
 800a880:	4293      	cmp	r3, r2
 800a882:	bf28      	it	cs
 800a884:	4613      	movcs	r3, r2
 800a886:	b29b      	uxth	r3, r3
 800a888:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a88a:	893b      	ldrh	r3, [r7, #8]
 800a88c:	461a      	mov	r2, r3
 800a88e:	68f9      	ldr	r1, [r7, #12]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fa44 	bl	800ad1e <USBD_CtlSendData>
 800a896:	e009      	b.n	800a8ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f9ce 	bl	800ac3c <USBD_CtlError>
 800a8a0:	e004      	b.n	800a8ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fa78 	bl	800ad98 <USBD_CtlSendStatus>
 800a8a8:	e000      	b.n	800a8ac <USBD_GetDescriptor+0x2cc>
    return;
 800a8aa:	bf00      	nop
  }
}
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop

0800a8b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	889b      	ldrh	r3, [r3, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d131      	bne.n	800a92a <USBD_SetAddress+0x76>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	88db      	ldrh	r3, [r3, #6]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d12d      	bne.n	800a92a <USBD_SetAddress+0x76>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	885b      	ldrh	r3, [r3, #2]
 800a8d2:	2b7f      	cmp	r3, #127	; 0x7f
 800a8d4:	d829      	bhi.n	800a92a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	885b      	ldrh	r3, [r3, #2]
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d104      	bne.n	800a8f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f9a3 	bl	800ac3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f6:	e01d      	b.n	800a934 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	7bfa      	ldrb	r2, [r7, #15]
 800a8fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f003 fc3b 	bl	800e180 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fa44 	bl	800ad98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d004      	beq.n	800a920 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2202      	movs	r2, #2
 800a91a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91e:	e009      	b.n	800a934 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a928:	e004      	b.n	800a934 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f985 	bl	800ac3c <USBD_CtlError>
  }
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	885b      	ldrh	r3, [r3, #2]
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	4b4c      	ldr	r3, [pc, #304]	; (800aa84 <USBD_SetConfig+0x148>)
 800a952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a954:	4b4b      	ldr	r3, [pc, #300]	; (800aa84 <USBD_SetConfig+0x148>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d905      	bls.n	800a968 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f96c 	bl	800ac3c <USBD_CtlError>
    return USBD_FAIL;
 800a964:	2303      	movs	r3, #3
 800a966:	e088      	b.n	800aa7a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b02      	cmp	r3, #2
 800a972:	d002      	beq.n	800a97a <USBD_SetConfig+0x3e>
 800a974:	2b03      	cmp	r3, #3
 800a976:	d025      	beq.n	800a9c4 <USBD_SetConfig+0x88>
 800a978:	e071      	b.n	800aa5e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a97a:	4b42      	ldr	r3, [pc, #264]	; (800aa84 <USBD_SetConfig+0x148>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d01c      	beq.n	800a9bc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a982:	4b40      	ldr	r3, [pc, #256]	; (800aa84 <USBD_SetConfig+0x148>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a98c:	4b3d      	ldr	r3, [pc, #244]	; (800aa84 <USBD_SetConfig+0x148>)
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	4619      	mov	r1, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7ff f949 	bl	8009c2a <USBD_SetClassConfig>
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d004      	beq.n	800a9ac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f949 	bl	800ac3c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9aa:	e065      	b.n	800aa78 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f9f3 	bl	800ad98 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2203      	movs	r2, #3
 800a9b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a9ba:	e05d      	b.n	800aa78 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f9eb 	bl	800ad98 <USBD_CtlSendStatus>
      break;
 800a9c2:	e059      	b.n	800aa78 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a9c4:	4b2f      	ldr	r3, [pc, #188]	; (800aa84 <USBD_SetConfig+0x148>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d112      	bne.n	800a9f2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a9d4:	4b2b      	ldr	r3, [pc, #172]	; (800aa84 <USBD_SetConfig+0x148>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9de:	4b29      	ldr	r3, [pc, #164]	; (800aa84 <USBD_SetConfig+0x148>)
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff f93c 	bl	8009c62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f9d4 	bl	800ad98 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a9f0:	e042      	b.n	800aa78 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a9f2:	4b24      	ldr	r3, [pc, #144]	; (800aa84 <USBD_SetConfig+0x148>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d02a      	beq.n	800aa56 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7ff f92a 	bl	8009c62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa0e:	4b1d      	ldr	r3, [pc, #116]	; (800aa84 <USBD_SetConfig+0x148>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa18:	4b1a      	ldr	r3, [pc, #104]	; (800aa84 <USBD_SetConfig+0x148>)
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff f903 	bl	8009c2a <USBD_SetClassConfig>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00f      	beq.n	800aa4e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f903 	bl	800ac3c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7ff f90f 	bl	8009c62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa4c:	e014      	b.n	800aa78 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f9a2 	bl	800ad98 <USBD_CtlSendStatus>
      break;
 800aa54:	e010      	b.n	800aa78 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f99e 	bl	800ad98 <USBD_CtlSendStatus>
      break;
 800aa5c:	e00c      	b.n	800aa78 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f8eb 	bl	800ac3c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa66:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <USBD_SetConfig+0x148>)
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7ff f8f8 	bl	8009c62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aa72:	2303      	movs	r3, #3
 800aa74:	73fb      	strb	r3, [r7, #15]
      break;
 800aa76:	bf00      	nop
  }

  return ret;
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20000754 	.word	0x20000754

0800aa88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	88db      	ldrh	r3, [r3, #6]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d004      	beq.n	800aaa4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f8cd 	bl	800ac3c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aaa2:	e023      	b.n	800aaec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	dc02      	bgt.n	800aab6 <USBD_GetConfig+0x2e>
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dc03      	bgt.n	800aabc <USBD_GetConfig+0x34>
 800aab4:	e015      	b.n	800aae2 <USBD_GetConfig+0x5a>
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d00b      	beq.n	800aad2 <USBD_GetConfig+0x4a>
 800aaba:	e012      	b.n	800aae2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	3308      	adds	r3, #8
 800aac6:	2201      	movs	r2, #1
 800aac8:	4619      	mov	r1, r3
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f927 	bl	800ad1e <USBD_CtlSendData>
        break;
 800aad0:	e00c      	b.n	800aaec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3304      	adds	r3, #4
 800aad6:	2201      	movs	r2, #1
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f91f 	bl	800ad1e <USBD_CtlSendData>
        break;
 800aae0:	e004      	b.n	800aaec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f8a9 	bl	800ac3c <USBD_CtlError>
        break;
 800aaea:	bf00      	nop
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	3b01      	subs	r3, #1
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d81e      	bhi.n	800ab4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	88db      	ldrh	r3, [r3, #6]
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d004      	beq.n	800ab1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f890 	bl	800ac3c <USBD_CtlError>
        break;
 800ab1c:	e01a      	b.n	800ab54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d005      	beq.n	800ab3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	f043 0202 	orr.w	r2, r3, #2
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	330c      	adds	r3, #12
 800ab3e:	2202      	movs	r2, #2
 800ab40:	4619      	mov	r1, r3
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f8eb 	bl	800ad1e <USBD_CtlSendData>
      break;
 800ab48:	e004      	b.n	800ab54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f875 	bl	800ac3c <USBD_CtlError>
      break;
 800ab52:	bf00      	nop
  }
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	885b      	ldrh	r3, [r3, #2]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d106      	bne.n	800ab7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f90e 	bl	800ad98 <USBD_CtlSendStatus>
  }
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	3b01      	subs	r3, #1
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d80b      	bhi.n	800abb4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	885b      	ldrh	r3, [r3, #2]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d10c      	bne.n	800abbe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f8f3 	bl	800ad98 <USBD_CtlSendStatus>
      }
      break;
 800abb2:	e004      	b.n	800abbe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f840 	bl	800ac3c <USBD_CtlError>
      break;
 800abbc:	e000      	b.n	800abc0 <USBD_ClrFeature+0x3c>
      break;
 800abbe:	bf00      	nop
  }
}
 800abc0:	bf00      	nop
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	781a      	ldrb	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3301      	adds	r3, #1
 800abe2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	781a      	ldrb	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3301      	adds	r3, #1
 800abf0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7ff fabc 	bl	800a170 <SWAPBYTE>
 800abf8:	4603      	mov	r3, r0
 800abfa:	461a      	mov	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3301      	adds	r3, #1
 800ac04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f7ff faaf 	bl	800a170 <SWAPBYTE>
 800ac12:	4603      	mov	r3, r0
 800ac14:	461a      	mov	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3301      	adds	r3, #1
 800ac24:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ac26:	68f8      	ldr	r0, [r7, #12]
 800ac28:	f7ff faa2 	bl	800a170 <SWAPBYTE>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	461a      	mov	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	80da      	strh	r2, [r3, #6]
}
 800ac34:	bf00      	nop
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac46:	2180      	movs	r1, #128	; 0x80
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f003 fa2f 	bl	800e0ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ac4e:	2100      	movs	r1, #0
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f003 fa2b 	bl	800e0ac <USBD_LL_StallEP>
}
 800ac56:	bf00      	nop
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b086      	sub	sp, #24
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d036      	beq.n	800ace2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ac78:	6938      	ldr	r0, [r7, #16]
 800ac7a:	f000 f836 	bl	800acea <USBD_GetLen>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	3301      	adds	r3, #1
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	4413      	add	r3, r2
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	7812      	ldrb	r2, [r2, #0]
 800ac96:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	4413      	add	r3, r2
 800aca4:	2203      	movs	r2, #3
 800aca6:	701a      	strb	r2, [r3, #0]
  idx++;
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	3301      	adds	r3, #1
 800acac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800acae:	e013      	b.n	800acd8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800acb0:	7dfb      	ldrb	r3, [r7, #23]
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	4413      	add	r3, r2
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	7812      	ldrb	r2, [r2, #0]
 800acba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	3301      	adds	r3, #1
 800acc0:	613b      	str	r3, [r7, #16]
    idx++;
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	3301      	adds	r3, #1
 800acc6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800acc8:	7dfb      	ldrb	r3, [r7, #23]
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	4413      	add	r3, r2
 800acce:	2200      	movs	r2, #0
 800acd0:	701a      	strb	r2, [r3, #0]
    idx++;
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	3301      	adds	r3, #1
 800acd6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1e7      	bne.n	800acb0 <USBD_GetString+0x52>
 800ace0:	e000      	b.n	800ace4 <USBD_GetString+0x86>
    return;
 800ace2:	bf00      	nop
  }
}
 800ace4:	3718      	adds	r7, #24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800acea:	b480      	push	{r7}
 800acec:	b085      	sub	sp, #20
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800acf2:	2300      	movs	r3, #0
 800acf4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800acfa:	e005      	b.n	800ad08 <USBD_GetLen+0x1e>
  {
    len++;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	3301      	adds	r3, #1
 800ad00:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	3301      	adds	r3, #1
 800ad06:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1f5      	bne.n	800acfc <USBD_GetLen+0x12>
  }

  return len;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b084      	sub	sp, #16
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	60f8      	str	r0, [r7, #12]
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	2100      	movs	r1, #0
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f003 fa3a 	bl	800e1be <USBD_LL_Transmit>

  return USBD_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	2100      	movs	r1, #0
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f003 fa29 	bl	800e1be <USBD_LL_Transmit>

  return USBD_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	60f8      	str	r0, [r7, #12]
 800ad7e:	60b9      	str	r1, [r7, #8]
 800ad80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	2100      	movs	r1, #0
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f003 fa39 	bl	800e200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2204      	movs	r2, #4
 800ada4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ada8:	2300      	movs	r3, #0
 800adaa:	2200      	movs	r2, #0
 800adac:	2100      	movs	r1, #0
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f003 fa05 	bl	800e1be <USBD_LL_Transmit>

  return USBD_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b082      	sub	sp, #8
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2205      	movs	r2, #5
 800adca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adce:	2300      	movs	r3, #0
 800add0:	2200      	movs	r2, #0
 800add2:	2100      	movs	r1, #0
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f003 fa13 	bl	800e200 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800adee:	79fb      	ldrb	r3, [r7, #7]
 800adf0:	4a08      	ldr	r2, [pc, #32]	; (800ae14 <disk_status+0x30>)
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	79fa      	ldrb	r2, [r7, #7]
 800adfc:	4905      	ldr	r1, [pc, #20]	; (800ae14 <disk_status+0x30>)
 800adfe:	440a      	add	r2, r1
 800ae00:	7a12      	ldrb	r2, [r2, #8]
 800ae02:	4610      	mov	r0, r2
 800ae04:	4798      	blx	r3
 800ae06:	4603      	mov	r3, r0
 800ae08:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	20000980 	.word	0x20000980

0800ae18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ae26:	79fb      	ldrb	r3, [r7, #7]
 800ae28:	4a0d      	ldr	r2, [pc, #52]	; (800ae60 <disk_initialize+0x48>)
 800ae2a:	5cd3      	ldrb	r3, [r2, r3]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d111      	bne.n	800ae54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	4a0b      	ldr	r2, [pc, #44]	; (800ae60 <disk_initialize+0x48>)
 800ae34:	2101      	movs	r1, #1
 800ae36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ae38:	79fb      	ldrb	r3, [r7, #7]
 800ae3a:	4a09      	ldr	r2, [pc, #36]	; (800ae60 <disk_initialize+0x48>)
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	79fa      	ldrb	r2, [r7, #7]
 800ae46:	4906      	ldr	r1, [pc, #24]	; (800ae60 <disk_initialize+0x48>)
 800ae48:	440a      	add	r2, r1
 800ae4a:	7a12      	ldrb	r2, [r2, #8]
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	4798      	blx	r3
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000980 	.word	0x20000980

0800ae64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ae64:	b590      	push	{r4, r7, lr}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60b9      	str	r1, [r7, #8]
 800ae6c:	607a      	str	r2, [r7, #4]
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	4603      	mov	r3, r0
 800ae72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	4a0a      	ldr	r2, [pc, #40]	; (800aea0 <disk_read+0x3c>)
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	689c      	ldr	r4, [r3, #8]
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
 800ae82:	4a07      	ldr	r2, [pc, #28]	; (800aea0 <disk_read+0x3c>)
 800ae84:	4413      	add	r3, r2
 800ae86:	7a18      	ldrb	r0, [r3, #8]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	68b9      	ldr	r1, [r7, #8]
 800ae8e:	47a0      	blx	r4
 800ae90:	4603      	mov	r3, r0
 800ae92:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	371c      	adds	r7, #28
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd90      	pop	{r4, r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20000980 	.word	0x20000980

0800aea4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aea4:	b590      	push	{r4, r7, lr}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	607a      	str	r2, [r7, #4]
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
 800aeb6:	4a0a      	ldr	r2, [pc, #40]	; (800aee0 <disk_write+0x3c>)
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	68dc      	ldr	r4, [r3, #12]
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	4a07      	ldr	r2, [pc, #28]	; (800aee0 <disk_write+0x3c>)
 800aec4:	4413      	add	r3, r2
 800aec6:	7a18      	ldrb	r0, [r3, #8]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	68b9      	ldr	r1, [r7, #8]
 800aece:	47a0      	blx	r4
 800aed0:	4603      	mov	r3, r0
 800aed2:	75fb      	strb	r3, [r7, #23]
  return res;
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	371c      	adds	r7, #28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd90      	pop	{r4, r7, pc}
 800aede:	bf00      	nop
 800aee0:	20000980 	.word	0x20000980

0800aee4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	4603      	mov	r3, r0
 800aeec:	603a      	str	r2, [r7, #0]
 800aeee:	71fb      	strb	r3, [r7, #7]
 800aef0:	460b      	mov	r3, r1
 800aef2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aef4:	79fb      	ldrb	r3, [r7, #7]
 800aef6:	4a09      	ldr	r2, [pc, #36]	; (800af1c <disk_ioctl+0x38>)
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	79fa      	ldrb	r2, [r7, #7]
 800af02:	4906      	ldr	r1, [pc, #24]	; (800af1c <disk_ioctl+0x38>)
 800af04:	440a      	add	r2, r1
 800af06:	7a10      	ldrb	r0, [r2, #8]
 800af08:	79b9      	ldrb	r1, [r7, #6]
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	4798      	blx	r3
 800af0e:	4603      	mov	r3, r0
 800af10:	73fb      	strb	r3, [r7, #15]
  return res;
 800af12:	7bfb      	ldrb	r3, [r7, #15]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	20000980 	.word	0x20000980

0800af20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3301      	adds	r3, #1
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800af30:	89fb      	ldrh	r3, [r7, #14]
 800af32:	021b      	lsls	r3, r3, #8
 800af34:	b21a      	sxth	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	b21b      	sxth	r3, r3
 800af3c:	4313      	orrs	r3, r2
 800af3e:	b21b      	sxth	r3, r3
 800af40:	81fb      	strh	r3, [r7, #14]
	return rv;
 800af42:	89fb      	ldrh	r3, [r7, #14]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3714      	adds	r7, #20
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	3303      	adds	r3, #3
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	021b      	lsls	r3, r3, #8
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	3202      	adds	r2, #2
 800af68:	7812      	ldrb	r2, [r2, #0]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	021b      	lsls	r3, r3, #8
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	3201      	adds	r2, #1
 800af76:	7812      	ldrb	r2, [r2, #0]
 800af78:	4313      	orrs	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	7812      	ldrb	r2, [r2, #0]
 800af84:	4313      	orrs	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]
	return rv;
 800af88:	68fb      	ldr	r3, [r7, #12]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800af96:	b480      	push	{r7}
 800af98:	b083      	sub	sp, #12
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	460b      	mov	r3, r1
 800afa0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	887a      	ldrh	r2, [r7, #2]
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	701a      	strb	r2, [r3, #0]
 800afae:	887b      	ldrh	r3, [r7, #2]
 800afb0:	0a1b      	lsrs	r3, r3, #8
 800afb2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	607a      	str	r2, [r7, #4]
 800afba:	887a      	ldrh	r2, [r7, #2]
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	701a      	strb	r2, [r3, #0]
}
 800afc0:	bf00      	nop
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	0a1b      	lsrs	r3, r3, #8
 800afe6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	607a      	str	r2, [r7, #4]
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	b2d2      	uxtb	r2, r2
 800aff2:	701a      	strb	r2, [r3, #0]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	0a1b      	lsrs	r3, r3, #8
 800aff8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	1c5a      	adds	r2, r3, #1
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	b2d2      	uxtb	r2, r2
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	0a1b      	lsrs	r3, r3, #8
 800b00a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	1c5a      	adds	r2, r3, #1
 800b010:	607a      	str	r2, [r7, #4]
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	b2d2      	uxtb	r2, r2
 800b016:	701a      	strb	r2, [r3, #0]
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b024:	b480      	push	{r7}
 800b026:	b087      	sub	sp, #28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00d      	beq.n	800b05a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	1c53      	adds	r3, r2, #1
 800b042:	613b      	str	r3, [r7, #16]
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	1c59      	adds	r1, r3, #1
 800b048:	6179      	str	r1, [r7, #20]
 800b04a:	7812      	ldrb	r2, [r2, #0]
 800b04c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3b01      	subs	r3, #1
 800b052:	607b      	str	r3, [r7, #4]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1f1      	bne.n	800b03e <mem_cpy+0x1a>
	}
}
 800b05a:	bf00      	nop
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b066:	b480      	push	{r7}
 800b068:	b087      	sub	sp, #28
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	60f8      	str	r0, [r7, #12]
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	1c5a      	adds	r2, r3, #1
 800b07a:	617a      	str	r2, [r7, #20]
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	b2d2      	uxtb	r2, r2
 800b080:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3b01      	subs	r3, #1
 800b086:	607b      	str	r3, [r7, #4]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1f3      	bne.n	800b076 <mem_set+0x10>
}
 800b08e:	bf00      	nop
 800b090:	bf00      	nop
 800b092:	371c      	adds	r7, #28
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b09c:	b480      	push	{r7}
 800b09e:	b089      	sub	sp, #36	; 0x24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	61fb      	str	r3, [r7, #28]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	61fa      	str	r2, [r7, #28]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	4619      	mov	r1, r3
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	61ba      	str	r2, [r7, #24]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	1acb      	subs	r3, r1, r3
 800b0c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	607b      	str	r3, [r7, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <mem_cmp+0x40>
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d0eb      	beq.n	800b0b4 <mem_cmp+0x18>

	return r;
 800b0dc:	697b      	ldr	r3, [r7, #20]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3724      	adds	r7, #36	; 0x24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b0ea:	b480      	push	{r7}
 800b0ec:	b083      	sub	sp, #12
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b0f4:	e002      	b.n	800b0fc <chk_chr+0x12>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	607b      	str	r3, [r7, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d005      	beq.n	800b110 <chk_chr+0x26>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	461a      	mov	r2, r3
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d1f2      	bne.n	800b0f6 <chk_chr+0xc>
	return *str;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	781b      	ldrb	r3, [r3, #0]
}
 800b114:	4618      	mov	r0, r3
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b12a:	2300      	movs	r3, #0
 800b12c:	60bb      	str	r3, [r7, #8]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	60fb      	str	r3, [r7, #12]
 800b132:	e029      	b.n	800b188 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b134:	4a27      	ldr	r2, [pc, #156]	; (800b1d4 <chk_lock+0xb4>)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	011b      	lsls	r3, r3, #4
 800b13a:	4413      	add	r3, r2
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d01d      	beq.n	800b17e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b142:	4a24      	ldr	r2, [pc, #144]	; (800b1d4 <chk_lock+0xb4>)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	011b      	lsls	r3, r3, #4
 800b148:	4413      	add	r3, r2
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d116      	bne.n	800b182 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b154:	4a1f      	ldr	r2, [pc, #124]	; (800b1d4 <chk_lock+0xb4>)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	011b      	lsls	r3, r3, #4
 800b15a:	4413      	add	r3, r2
 800b15c:	3304      	adds	r3, #4
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b164:	429a      	cmp	r2, r3
 800b166:	d10c      	bne.n	800b182 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b168:	4a1a      	ldr	r2, [pc, #104]	; (800b1d4 <chk_lock+0xb4>)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	011b      	lsls	r3, r3, #4
 800b16e:	4413      	add	r3, r2
 800b170:	3308      	adds	r3, #8
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b178:	429a      	cmp	r2, r3
 800b17a:	d102      	bne.n	800b182 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b17c:	e007      	b.n	800b18e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b17e:	2301      	movs	r3, #1
 800b180:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d9d2      	bls.n	800b134 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b02      	cmp	r3, #2
 800b192:	d109      	bne.n	800b1a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d102      	bne.n	800b1a0 <chk_lock+0x80>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d101      	bne.n	800b1a4 <chk_lock+0x84>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	e010      	b.n	800b1c6 <chk_lock+0xa6>
 800b1a4:	2312      	movs	r3, #18
 800b1a6:	e00e      	b.n	800b1c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d108      	bne.n	800b1c0 <chk_lock+0xa0>
 800b1ae:	4a09      	ldr	r2, [pc, #36]	; (800b1d4 <chk_lock+0xb4>)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	011b      	lsls	r3, r3, #4
 800b1b4:	4413      	add	r3, r2
 800b1b6:	330c      	adds	r3, #12
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1be:	d101      	bne.n	800b1c4 <chk_lock+0xa4>
 800b1c0:	2310      	movs	r3, #16
 800b1c2:	e000      	b.n	800b1c6 <chk_lock+0xa6>
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20000760 	.word	0x20000760

0800b1d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	607b      	str	r3, [r7, #4]
 800b1e2:	e002      	b.n	800b1ea <enq_lock+0x12>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	607b      	str	r3, [r7, #4]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d806      	bhi.n	800b1fe <enq_lock+0x26>
 800b1f0:	4a09      	ldr	r2, [pc, #36]	; (800b218 <enq_lock+0x40>)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	011b      	lsls	r3, r3, #4
 800b1f6:	4413      	add	r3, r2
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1f2      	bne.n	800b1e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b02      	cmp	r3, #2
 800b202:	bf14      	ite	ne
 800b204:	2301      	movne	r3, #1
 800b206:	2300      	moveq	r3, #0
 800b208:	b2db      	uxtb	r3, r3
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	370c      	adds	r7, #12
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	20000760 	.word	0x20000760

0800b21c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	e01f      	b.n	800b26c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b22c:	4a41      	ldr	r2, [pc, #260]	; (800b334 <inc_lock+0x118>)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	011b      	lsls	r3, r3, #4
 800b232:	4413      	add	r3, r2
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d113      	bne.n	800b266 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b23e:	4a3d      	ldr	r2, [pc, #244]	; (800b334 <inc_lock+0x118>)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	011b      	lsls	r3, r3, #4
 800b244:	4413      	add	r3, r2
 800b246:	3304      	adds	r3, #4
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b24e:	429a      	cmp	r2, r3
 800b250:	d109      	bne.n	800b266 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b252:	4a38      	ldr	r2, [pc, #224]	; (800b334 <inc_lock+0x118>)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	011b      	lsls	r3, r3, #4
 800b258:	4413      	add	r3, r2
 800b25a:	3308      	adds	r3, #8
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b262:	429a      	cmp	r2, r3
 800b264:	d006      	beq.n	800b274 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	3301      	adds	r3, #1
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d9dc      	bls.n	800b22c <inc_lock+0x10>
 800b272:	e000      	b.n	800b276 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b274:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d132      	bne.n	800b2e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b27c:	2300      	movs	r3, #0
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	e002      	b.n	800b288 <inc_lock+0x6c>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3301      	adds	r3, #1
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d806      	bhi.n	800b29c <inc_lock+0x80>
 800b28e:	4a29      	ldr	r2, [pc, #164]	; (800b334 <inc_lock+0x118>)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	011b      	lsls	r3, r3, #4
 800b294:	4413      	add	r3, r2
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1f2      	bne.n	800b282 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d101      	bne.n	800b2a6 <inc_lock+0x8a>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e040      	b.n	800b328 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	4922      	ldr	r1, [pc, #136]	; (800b334 <inc_lock+0x118>)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	011b      	lsls	r3, r3, #4
 800b2b0:	440b      	add	r3, r1
 800b2b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	491e      	ldr	r1, [pc, #120]	; (800b334 <inc_lock+0x118>)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	011b      	lsls	r3, r3, #4
 800b2be:	440b      	add	r3, r1
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	695a      	ldr	r2, [r3, #20]
 800b2c8:	491a      	ldr	r1, [pc, #104]	; (800b334 <inc_lock+0x118>)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	011b      	lsls	r3, r3, #4
 800b2ce:	440b      	add	r3, r1
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b2d4:	4a17      	ldr	r2, [pc, #92]	; (800b334 <inc_lock+0x118>)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	011b      	lsls	r3, r3, #4
 800b2da:	4413      	add	r3, r2
 800b2dc:	330c      	adds	r3, #12
 800b2de:	2200      	movs	r2, #0
 800b2e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d009      	beq.n	800b2fc <inc_lock+0xe0>
 800b2e8:	4a12      	ldr	r2, [pc, #72]	; (800b334 <inc_lock+0x118>)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	011b      	lsls	r3, r3, #4
 800b2ee:	4413      	add	r3, r2
 800b2f0:	330c      	adds	r3, #12
 800b2f2:	881b      	ldrh	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d001      	beq.n	800b2fc <inc_lock+0xe0>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	e015      	b.n	800b328 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d108      	bne.n	800b314 <inc_lock+0xf8>
 800b302:	4a0c      	ldr	r2, [pc, #48]	; (800b334 <inc_lock+0x118>)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	4413      	add	r3, r2
 800b30a:	330c      	adds	r3, #12
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	3301      	adds	r3, #1
 800b310:	b29a      	uxth	r2, r3
 800b312:	e001      	b.n	800b318 <inc_lock+0xfc>
 800b314:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b318:	4906      	ldr	r1, [pc, #24]	; (800b334 <inc_lock+0x118>)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	011b      	lsls	r3, r3, #4
 800b31e:	440b      	add	r3, r1
 800b320:	330c      	adds	r3, #12
 800b322:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3301      	adds	r3, #1
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	20000760 	.word	0x20000760

0800b338 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	3b01      	subs	r3, #1
 800b344:	607b      	str	r3, [r7, #4]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d825      	bhi.n	800b398 <dec_lock+0x60>
		n = Files[i].ctr;
 800b34c:	4a17      	ldr	r2, [pc, #92]	; (800b3ac <dec_lock+0x74>)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	011b      	lsls	r3, r3, #4
 800b352:	4413      	add	r3, r2
 800b354:	330c      	adds	r3, #12
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b35a:	89fb      	ldrh	r3, [r7, #14]
 800b35c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b360:	d101      	bne.n	800b366 <dec_lock+0x2e>
 800b362:	2300      	movs	r3, #0
 800b364:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b366:	89fb      	ldrh	r3, [r7, #14]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <dec_lock+0x3a>
 800b36c:	89fb      	ldrh	r3, [r7, #14]
 800b36e:	3b01      	subs	r3, #1
 800b370:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b372:	4a0e      	ldr	r2, [pc, #56]	; (800b3ac <dec_lock+0x74>)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	011b      	lsls	r3, r3, #4
 800b378:	4413      	add	r3, r2
 800b37a:	330c      	adds	r3, #12
 800b37c:	89fa      	ldrh	r2, [r7, #14]
 800b37e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b380:	89fb      	ldrh	r3, [r7, #14]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d105      	bne.n	800b392 <dec_lock+0x5a>
 800b386:	4a09      	ldr	r2, [pc, #36]	; (800b3ac <dec_lock+0x74>)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	011b      	lsls	r3, r3, #4
 800b38c:	4413      	add	r3, r2
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	737b      	strb	r3, [r7, #13]
 800b396:	e001      	b.n	800b39c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b398:	2302      	movs	r3, #2
 800b39a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b39c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	20000760 	.word	0x20000760

0800b3b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	e010      	b.n	800b3e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b3be:	4a0d      	ldr	r2, [pc, #52]	; (800b3f4 <clear_lock+0x44>)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	011b      	lsls	r3, r3, #4
 800b3c4:	4413      	add	r3, r2
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d105      	bne.n	800b3da <clear_lock+0x2a>
 800b3ce:	4a09      	ldr	r2, [pc, #36]	; (800b3f4 <clear_lock+0x44>)
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	011b      	lsls	r3, r3, #4
 800b3d4:	4413      	add	r3, r2
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	60fb      	str	r3, [r7, #12]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d9eb      	bls.n	800b3be <clear_lock+0xe>
	}
}
 800b3e6:	bf00      	nop
 800b3e8:	bf00      	nop
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	20000760 	.word	0x20000760

0800b3f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	78db      	ldrb	r3, [r3, #3]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d034      	beq.n	800b476 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b410:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	7858      	ldrb	r0, [r3, #1]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b41c:	2301      	movs	r3, #1
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	f7ff fd40 	bl	800aea4 <disk_write>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d002      	beq.n	800b430 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	73fb      	strb	r3, [r7, #15]
 800b42e:	e022      	b.n	800b476 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	1ad2      	subs	r2, r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	429a      	cmp	r2, r3
 800b444:	d217      	bcs.n	800b476 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	789b      	ldrb	r3, [r3, #2]
 800b44a:	613b      	str	r3, [r7, #16]
 800b44c:	e010      	b.n	800b470 <sync_window+0x78>
					wsect += fs->fsize;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	4413      	add	r3, r2
 800b456:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	7858      	ldrb	r0, [r3, #1]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b462:	2301      	movs	r3, #1
 800b464:	697a      	ldr	r2, [r7, #20]
 800b466:	f7ff fd1d 	bl	800aea4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	613b      	str	r3, [r7, #16]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d8eb      	bhi.n	800b44e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b476:	7bfb      	ldrb	r3, [r7, #15]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	429a      	cmp	r2, r3
 800b496:	d01b      	beq.n	800b4d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7ff ffad 	bl	800b3f8 <sync_window>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d113      	bne.n	800b4d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	7858      	ldrb	r0, [r3, #1]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	f7ff fcd5 	bl	800ae64 <disk_read>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d004      	beq.n	800b4ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7ff ff87 	bl	800b3f8 <sync_window>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d158      	bne.n	800b5a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d148      	bne.n	800b58e <sync_fs+0xb2>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	791b      	ldrb	r3, [r3, #4]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d144      	bne.n	800b58e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	3334      	adds	r3, #52	; 0x34
 800b508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b50c:	2100      	movs	r1, #0
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff fda9 	bl	800b066 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3334      	adds	r3, #52	; 0x34
 800b518:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b51c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff fd38 	bl	800af96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	3334      	adds	r3, #52	; 0x34
 800b52a:	4921      	ldr	r1, [pc, #132]	; (800b5b0 <sync_fs+0xd4>)
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff fd4d 	bl	800afcc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	3334      	adds	r3, #52	; 0x34
 800b536:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b53a:	491e      	ldr	r1, [pc, #120]	; (800b5b4 <sync_fs+0xd8>)
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff fd45 	bl	800afcc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	3334      	adds	r3, #52	; 0x34
 800b546:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	695b      	ldr	r3, [r3, #20]
 800b54e:	4619      	mov	r1, r3
 800b550:	4610      	mov	r0, r2
 800b552:	f7ff fd3b 	bl	800afcc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3334      	adds	r3, #52	; 0x34
 800b55a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	4619      	mov	r1, r3
 800b564:	4610      	mov	r0, r2
 800b566:	f7ff fd31 	bl	800afcc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	7858      	ldrb	r0, [r3, #1]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b582:	2301      	movs	r3, #1
 800b584:	f7ff fc8e 	bl	800aea4 <disk_write>
			fs->fsi_flag = 0;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	2200      	movs	r2, #0
 800b594:	2100      	movs	r1, #0
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff fca4 	bl	800aee4 <disk_ioctl>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <sync_fs+0xca>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	41615252 	.word	0x41615252
 800b5b4:	61417272 	.word	0x61417272

0800b5b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	3b02      	subs	r3, #2
 800b5c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	3b02      	subs	r3, #2
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d301      	bcc.n	800b5d8 <clust2sect+0x20>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	e008      	b.n	800b5ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	895b      	ldrh	r3, [r3, #10]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	fb03 f202 	mul.w	r2, r3, r2
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	4413      	add	r3, r2
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b086      	sub	sp, #24
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d904      	bls.n	800b616 <get_fat+0x20>
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d302      	bcc.n	800b61c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b616:	2301      	movs	r3, #1
 800b618:	617b      	str	r3, [r7, #20]
 800b61a:	e08f      	b.n	800b73c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b61c:	f04f 33ff 	mov.w	r3, #4294967295
 800b620:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	2b03      	cmp	r3, #3
 800b628:	d062      	beq.n	800b6f0 <get_fat+0xfa>
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	dc7c      	bgt.n	800b728 <get_fat+0x132>
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d002      	beq.n	800b638 <get_fat+0x42>
 800b632:	2b02      	cmp	r3, #2
 800b634:	d042      	beq.n	800b6bc <get_fat+0xc6>
 800b636:	e077      	b.n	800b728 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	60fb      	str	r3, [r7, #12]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	085b      	lsrs	r3, r3, #1
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	4413      	add	r3, r2
 800b644:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	0a5b      	lsrs	r3, r3, #9
 800b64e:	4413      	add	r3, r2
 800b650:	4619      	mov	r1, r3
 800b652:	6938      	ldr	r0, [r7, #16]
 800b654:	f7ff ff14 	bl	800b480 <move_window>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d167      	bne.n	800b72e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	1c5a      	adds	r2, r3, #1
 800b662:	60fa      	str	r2, [r7, #12]
 800b664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	4413      	add	r3, r2
 800b66c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b670:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	0a5b      	lsrs	r3, r3, #9
 800b67a:	4413      	add	r3, r2
 800b67c:	4619      	mov	r1, r3
 800b67e:	6938      	ldr	r0, [r7, #16]
 800b680:	f7ff fefe 	bl	800b480 <move_window>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d153      	bne.n	800b732 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	4413      	add	r3, r2
 800b694:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b698:	021b      	lsls	r3, r3, #8
 800b69a:	461a      	mov	r2, r3
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <get_fat+0xbc>
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	091b      	lsrs	r3, r3, #4
 800b6b0:	e002      	b.n	800b6b8 <get_fat+0xc2>
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6b8:	617b      	str	r3, [r7, #20]
			break;
 800b6ba:	e03f      	b.n	800b73c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	0a1b      	lsrs	r3, r3, #8
 800b6c4:	4413      	add	r3, r2
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6938      	ldr	r0, [r7, #16]
 800b6ca:	f7ff fed9 	bl	800b480 <move_window>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d130      	bne.n	800b736 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b6e2:	4413      	add	r3, r2
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7ff fc1b 	bl	800af20 <ld_word>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	617b      	str	r3, [r7, #20]
			break;
 800b6ee:	e025      	b.n	800b73c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	09db      	lsrs	r3, r3, #7
 800b6f8:	4413      	add	r3, r2
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6938      	ldr	r0, [r7, #16]
 800b6fe:	f7ff febf 	bl	800b480 <move_window>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d118      	bne.n	800b73a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b716:	4413      	add	r3, r2
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff fc19 	bl	800af50 <ld_dword>
 800b71e:	4603      	mov	r3, r0
 800b720:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b724:	617b      	str	r3, [r7, #20]
			break;
 800b726:	e009      	b.n	800b73c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b728:	2301      	movs	r3, #1
 800b72a:	617b      	str	r3, [r7, #20]
 800b72c:	e006      	b.n	800b73c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b72e:	bf00      	nop
 800b730:	e004      	b.n	800b73c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b732:	bf00      	nop
 800b734:	e002      	b.n	800b73c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b736:	bf00      	nop
 800b738:	e000      	b.n	800b73c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b73a:	bf00      	nop
		}
	}

	return val;
 800b73c:	697b      	ldr	r3, [r7, #20]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3718      	adds	r7, #24
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b746:	b590      	push	{r4, r7, lr}
 800b748:	b089      	sub	sp, #36	; 0x24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b752:	2302      	movs	r3, #2
 800b754:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	f240 80d2 	bls.w	800b902 <put_fat+0x1bc>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	429a      	cmp	r2, r3
 800b766:	f080 80cc 	bcs.w	800b902 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b03      	cmp	r3, #3
 800b770:	f000 8096 	beq.w	800b8a0 <put_fat+0x15a>
 800b774:	2b03      	cmp	r3, #3
 800b776:	f300 80cd 	bgt.w	800b914 <put_fat+0x1ce>
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d002      	beq.n	800b784 <put_fat+0x3e>
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d06e      	beq.n	800b860 <put_fat+0x11a>
 800b782:	e0c7      	b.n	800b914 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	61bb      	str	r3, [r7, #24]
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	085b      	lsrs	r3, r3, #1
 800b78c:	69ba      	ldr	r2, [r7, #24]
 800b78e:	4413      	add	r3, r2
 800b790:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	0a5b      	lsrs	r3, r3, #9
 800b79a:	4413      	add	r3, r2
 800b79c:	4619      	mov	r1, r3
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f7ff fe6e 	bl	800b480 <move_window>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7a8:	7ffb      	ldrb	r3, [r7, #31]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f040 80ab 	bne.w	800b906 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	1c59      	adds	r1, r3, #1
 800b7ba:	61b9      	str	r1, [r7, #24]
 800b7bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7c0:	4413      	add	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00d      	beq.n	800b7ea <put_fat+0xa4>
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	b25b      	sxtb	r3, r3
 800b7d4:	f003 030f 	and.w	r3, r3, #15
 800b7d8:	b25a      	sxtb	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	b25b      	sxtb	r3, r3
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	b25b      	sxtb	r3, r3
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	e001      	b.n	800b7ee <put_fat+0xa8>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	0a5b      	lsrs	r3, r3, #9
 800b800:	4413      	add	r3, r2
 800b802:	4619      	mov	r1, r3
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f7ff fe3b 	bl	800b480 <move_window>
 800b80a:	4603      	mov	r3, r0
 800b80c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b80e:	7ffb      	ldrb	r3, [r7, #31]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d17a      	bne.n	800b90a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b820:	4413      	add	r3, r2
 800b822:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <put_fat+0xf0>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	091b      	lsrs	r3, r3, #4
 800b832:	b2db      	uxtb	r3, r3
 800b834:	e00e      	b.n	800b854 <put_fat+0x10e>
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	b25b      	sxtb	r3, r3
 800b83c:	f023 030f 	bic.w	r3, r3, #15
 800b840:	b25a      	sxtb	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	0a1b      	lsrs	r3, r3, #8
 800b846:	b25b      	sxtb	r3, r3
 800b848:	f003 030f 	and.w	r3, r3, #15
 800b84c:	b25b      	sxtb	r3, r3
 800b84e:	4313      	orrs	r3, r2
 800b850:	b25b      	sxtb	r3, r3
 800b852:	b2db      	uxtb	r3, r3
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2201      	movs	r2, #1
 800b85c:	70da      	strb	r2, [r3, #3]
			break;
 800b85e:	e059      	b.n	800b914 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	0a1b      	lsrs	r3, r3, #8
 800b868:	4413      	add	r3, r2
 800b86a:	4619      	mov	r1, r3
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff fe07 	bl	800b480 <move_window>
 800b872:	4603      	mov	r3, r0
 800b874:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b876:	7ffb      	ldrb	r3, [r7, #31]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d148      	bne.n	800b90e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b88a:	4413      	add	r3, r2
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	b292      	uxth	r2, r2
 800b890:	4611      	mov	r1, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f7ff fb7f 	bl	800af96 <st_word>
			fs->wflag = 1;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2201      	movs	r2, #1
 800b89c:	70da      	strb	r2, [r3, #3]
			break;
 800b89e:	e039      	b.n	800b914 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	09db      	lsrs	r3, r3, #7
 800b8a8:	4413      	add	r3, r2
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f7ff fde7 	bl	800b480 <move_window>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8b6:	7ffb      	ldrb	r3, [r7, #31]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d12a      	bne.n	800b912 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b8d0:	4413      	add	r3, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff fb3c 	bl	800af50 <ld_dword>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b8de:	4323      	orrs	r3, r4
 800b8e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b8f0:	4413      	add	r3, r2
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff fb69 	bl	800afcc <st_dword>
			fs->wflag = 1;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	70da      	strb	r2, [r3, #3]
			break;
 800b900:	e008      	b.n	800b914 <put_fat+0x1ce>
		}
	}
 800b902:	bf00      	nop
 800b904:	e006      	b.n	800b914 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b906:	bf00      	nop
 800b908:	e004      	b.n	800b914 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b90a:	bf00      	nop
 800b90c:	e002      	b.n	800b914 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b90e:	bf00      	nop
 800b910:	e000      	b.n	800b914 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b912:	bf00      	nop
	return res;
 800b914:	7ffb      	ldrb	r3, [r7, #31]
}
 800b916:	4618      	mov	r0, r3
 800b918:	3724      	adds	r7, #36	; 0x24
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd90      	pop	{r4, r7, pc}

0800b91e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b088      	sub	sp, #32
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d904      	bls.n	800b944 <remove_chain+0x26>
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	429a      	cmp	r2, r3
 800b942:	d301      	bcc.n	800b948 <remove_chain+0x2a>
 800b944:	2302      	movs	r3, #2
 800b946:	e04b      	b.n	800b9e0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00c      	beq.n	800b968 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b94e:	f04f 32ff 	mov.w	r2, #4294967295
 800b952:	6879      	ldr	r1, [r7, #4]
 800b954:	69b8      	ldr	r0, [r7, #24]
 800b956:	f7ff fef6 	bl	800b746 <put_fat>
 800b95a:	4603      	mov	r3, r0
 800b95c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b95e:	7ffb      	ldrb	r3, [r7, #31]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <remove_chain+0x4a>
 800b964:	7ffb      	ldrb	r3, [r7, #31]
 800b966:	e03b      	b.n	800b9e0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b968:	68b9      	ldr	r1, [r7, #8]
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f7ff fe43 	bl	800b5f6 <get_fat>
 800b970:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d031      	beq.n	800b9dc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d101      	bne.n	800b982 <remove_chain+0x64>
 800b97e:	2302      	movs	r3, #2
 800b980:	e02e      	b.n	800b9e0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b988:	d101      	bne.n	800b98e <remove_chain+0x70>
 800b98a:	2301      	movs	r3, #1
 800b98c:	e028      	b.n	800b9e0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b98e:	2200      	movs	r2, #0
 800b990:	68b9      	ldr	r1, [r7, #8]
 800b992:	69b8      	ldr	r0, [r7, #24]
 800b994:	f7ff fed7 	bl	800b746 <put_fat>
 800b998:	4603      	mov	r3, r0
 800b99a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b99c:	7ffb      	ldrb	r3, [r7, #31]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d001      	beq.n	800b9a6 <remove_chain+0x88>
 800b9a2:	7ffb      	ldrb	r3, [r7, #31]
 800b9a4:	e01c      	b.n	800b9e0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	695a      	ldr	r2, [r3, #20]
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	3b02      	subs	r3, #2
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d20b      	bcs.n	800b9cc <remove_chain+0xae>
			fs->free_clst++;
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	1c5a      	adds	r2, r3, #1
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	791b      	ldrb	r3, [r3, #4]
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d3c6      	bcc.n	800b968 <remove_chain+0x4a>
 800b9da:	e000      	b.n	800b9de <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b9dc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3720      	adds	r7, #32
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10d      	bne.n	800ba1a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d004      	beq.n	800ba14 <create_chain+0x2c>
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	69ba      	ldr	r2, [r7, #24]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d31b      	bcc.n	800ba4c <create_chain+0x64>
 800ba14:	2301      	movs	r3, #1
 800ba16:	61bb      	str	r3, [r7, #24]
 800ba18:	e018      	b.n	800ba4c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff fdea 	bl	800b5f6 <get_fat>
 800ba22:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d801      	bhi.n	800ba2e <create_chain+0x46>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e070      	b.n	800bb10 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba34:	d101      	bne.n	800ba3a <create_chain+0x52>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	e06a      	b.n	800bb10 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d201      	bcs.n	800ba48 <create_chain+0x60>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	e063      	b.n	800bb10 <create_chain+0x128>
		scl = clst;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	3301      	adds	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	69fa      	ldr	r2, [r7, #28]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d307      	bcc.n	800ba70 <create_chain+0x88>
				ncl = 2;
 800ba60:	2302      	movs	r3, #2
 800ba62:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ba64:	69fa      	ldr	r2, [r7, #28]
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d901      	bls.n	800ba70 <create_chain+0x88>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	e04f      	b.n	800bb10 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ba70:	69f9      	ldr	r1, [r7, #28]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7ff fdbf 	bl	800b5f6 <get_fat>
 800ba78:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00e      	beq.n	800ba9e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d003      	beq.n	800ba8e <create_chain+0xa6>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8c:	d101      	bne.n	800ba92 <create_chain+0xaa>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	e03e      	b.n	800bb10 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ba92:	69fa      	ldr	r2, [r7, #28]
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d1da      	bne.n	800ba50 <create_chain+0x68>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e038      	b.n	800bb10 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ba9e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800baa0:	f04f 32ff 	mov.w	r2, #4294967295
 800baa4:	69f9      	ldr	r1, [r7, #28]
 800baa6:	6938      	ldr	r0, [r7, #16]
 800baa8:	f7ff fe4d 	bl	800b746 <put_fat>
 800baac:	4603      	mov	r3, r0
 800baae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bab0:	7dfb      	ldrb	r3, [r7, #23]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d109      	bne.n	800baca <create_chain+0xe2>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d006      	beq.n	800baca <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800babc:	69fa      	ldr	r2, [r7, #28]
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6938      	ldr	r0, [r7, #16]
 800bac2:	f7ff fe40 	bl	800b746 <put_fat>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d116      	bne.n	800bafe <create_chain+0x116>
		fs->last_clst = ncl;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	69fa      	ldr	r2, [r7, #28]
 800bad4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	695a      	ldr	r2, [r3, #20]
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	3b02      	subs	r3, #2
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d804      	bhi.n	800baee <create_chain+0x106>
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	1e5a      	subs	r2, r3, #1
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	791b      	ldrb	r3, [r3, #4]
 800baf2:	f043 0301 	orr.w	r3, r3, #1
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	711a      	strb	r2, [r3, #4]
 800bafc:	e007      	b.n	800bb0e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bafe:	7dfb      	ldrb	r3, [r7, #23]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d102      	bne.n	800bb0a <create_chain+0x122>
 800bb04:	f04f 33ff 	mov.w	r3, #4294967295
 800bb08:	e000      	b.n	800bb0c <create_chain+0x124>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bb0e:	69fb      	ldr	r3, [r7, #28]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3720      	adds	r7, #32
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	0a5b      	lsrs	r3, r3, #9
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	8952      	ldrh	r2, [r2, #10]
 800bb38:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	1d1a      	adds	r2, r3, #4
 800bb42:	613a      	str	r2, [r7, #16]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d101      	bne.n	800bb52 <clmt_clust+0x3a>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	e010      	b.n	800bb74 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d307      	bcc.n	800bb6a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bb5a:	697a      	ldr	r2, [r7, #20]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	617b      	str	r3, [r7, #20]
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	3304      	adds	r3, #4
 800bb66:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bb68:	e7e9      	b.n	800bb3e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bb6a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	4413      	add	r3, r2
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	371c      	adds	r7, #28
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb96:	d204      	bcs.n	800bba2 <dir_sdi+0x22>
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	f003 031f 	and.w	r3, r3, #31
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bba2:	2302      	movs	r3, #2
 800bba4:	e063      	b.n	800bc6e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d106      	bne.n	800bbc6 <dir_sdi+0x46>
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d902      	bls.n	800bbc6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10c      	bne.n	800bbe6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	095b      	lsrs	r3, r3, #5
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	8912      	ldrh	r2, [r2, #8]
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d301      	bcc.n	800bbdc <dir_sdi+0x5c>
 800bbd8:	2302      	movs	r3, #2
 800bbda:	e048      	b.n	800bc6e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	61da      	str	r2, [r3, #28]
 800bbe4:	e029      	b.n	800bc3a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	895b      	ldrh	r3, [r3, #10]
 800bbea:	025b      	lsls	r3, r3, #9
 800bbec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bbee:	e019      	b.n	800bc24 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6979      	ldr	r1, [r7, #20]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7ff fcfe 	bl	800b5f6 <get_fat>
 800bbfa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc02:	d101      	bne.n	800bc08 <dir_sdi+0x88>
 800bc04:	2301      	movs	r3, #1
 800bc06:	e032      	b.n	800bc6e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d904      	bls.n	800bc18 <dir_sdi+0x98>
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d301      	bcc.n	800bc1c <dir_sdi+0x9c>
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e028      	b.n	800bc6e <dir_sdi+0xee>
			ofs -= csz;
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bc24:	683a      	ldr	r2, [r7, #0]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d2e1      	bcs.n	800bbf0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bc2c:	6979      	ldr	r1, [r7, #20]
 800bc2e:	6938      	ldr	r0, [r7, #16]
 800bc30:	f7ff fcc2 	bl	800b5b8 <clust2sect>
 800bc34:	4602      	mov	r2, r0
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	697a      	ldr	r2, [r7, #20]
 800bc3e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <dir_sdi+0xcc>
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e010      	b.n	800bc6e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	69da      	ldr	r2, [r3, #28]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	0a5b      	lsrs	r3, r3, #9
 800bc54:	441a      	add	r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc66:	441a      	add	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b086      	sub	sp, #24
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	3320      	adds	r3, #32
 800bc8c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <dir_next+0x28>
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc9c:	d301      	bcc.n	800bca2 <dir_next+0x2c>
 800bc9e:	2304      	movs	r3, #4
 800bca0:	e0aa      	b.n	800bdf8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f040 8098 	bne.w	800bdde <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	1c5a      	adds	r2, r3, #1
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10b      	bne.n	800bcd8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	095b      	lsrs	r3, r3, #5
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	8912      	ldrh	r2, [r2, #8]
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	f0c0 8088 	bcc.w	800bdde <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	61da      	str	r2, [r3, #28]
 800bcd4:	2304      	movs	r3, #4
 800bcd6:	e08f      	b.n	800bdf8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	0a5b      	lsrs	r3, r3, #9
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	8952      	ldrh	r2, [r2, #10]
 800bce0:	3a01      	subs	r2, #1
 800bce2:	4013      	ands	r3, r2
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d17a      	bne.n	800bdde <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	4619      	mov	r1, r3
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	f7ff fc80 	bl	800b5f6 <get_fat>
 800bcf6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d801      	bhi.n	800bd02 <dir_next+0x8c>
 800bcfe:	2302      	movs	r3, #2
 800bd00:	e07a      	b.n	800bdf8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd08:	d101      	bne.n	800bd0e <dir_next+0x98>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e074      	b.n	800bdf8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	697a      	ldr	r2, [r7, #20]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d358      	bcc.n	800bdca <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d104      	bne.n	800bd28 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	61da      	str	r2, [r3, #28]
 800bd24:	2304      	movs	r3, #4
 800bd26:	e067      	b.n	800bdf8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	4619      	mov	r1, r3
 800bd30:	4610      	mov	r0, r2
 800bd32:	f7ff fe59 	bl	800b9e8 <create_chain>
 800bd36:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <dir_next+0xcc>
 800bd3e:	2307      	movs	r3, #7
 800bd40:	e05a      	b.n	800bdf8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d101      	bne.n	800bd4c <dir_next+0xd6>
 800bd48:	2302      	movs	r3, #2
 800bd4a:	e055      	b.n	800bdf8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd52:	d101      	bne.n	800bd58 <dir_next+0xe2>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e04f      	b.n	800bdf8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f7ff fb4d 	bl	800b3f8 <sync_window>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <dir_next+0xf2>
 800bd64:	2301      	movs	r3, #1
 800bd66:	e047      	b.n	800bdf8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3334      	adds	r3, #52	; 0x34
 800bd6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd70:	2100      	movs	r1, #0
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff f977 	bl	800b066 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bd78:	2300      	movs	r3, #0
 800bd7a:	613b      	str	r3, [r7, #16]
 800bd7c:	6979      	ldr	r1, [r7, #20]
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7ff fc1a 	bl	800b5b8 <clust2sect>
 800bd84:	4602      	mov	r2, r0
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	631a      	str	r2, [r3, #48]	; 0x30
 800bd8a:	e012      	b.n	800bdb2 <dir_next+0x13c>
						fs->wflag = 1;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f7ff fb30 	bl	800b3f8 <sync_window>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <dir_next+0x12c>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e02a      	b.n	800bdf8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	3301      	adds	r3, #1
 800bda6:	613b      	str	r3, [r7, #16]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdac:	1c5a      	adds	r2, r3, #1
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	631a      	str	r2, [r3, #48]	; 0x30
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	895b      	ldrh	r3, [r3, #10]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d3e6      	bcc.n	800bd8c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	1ad2      	subs	r2, r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	697a      	ldr	r2, [r7, #20]
 800bdce:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bdd0:	6979      	ldr	r1, [r7, #20]
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f7ff fbf0 	bl	800b5b8 <clust2sect>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf0:	441a      	add	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800be10:	2100      	movs	r1, #0
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff feb4 	bl	800bb80 <dir_sdi>
 800be18:	4603      	mov	r3, r0
 800be1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800be1c:	7dfb      	ldrb	r3, [r7, #23]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d12b      	bne.n	800be7a <dir_alloc+0x7a>
		n = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	4619      	mov	r1, r3
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f7ff fb27 	bl	800b480 <move_window>
 800be32:	4603      	mov	r3, r0
 800be34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800be36:	7dfb      	ldrb	r3, [r7, #23]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d11d      	bne.n	800be78 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	2be5      	cmp	r3, #229	; 0xe5
 800be44:	d004      	beq.n	800be50 <dir_alloc+0x50>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d107      	bne.n	800be60 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	3301      	adds	r3, #1
 800be54:	613b      	str	r3, [r7, #16]
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d102      	bne.n	800be64 <dir_alloc+0x64>
 800be5e:	e00c      	b.n	800be7a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800be60:	2300      	movs	r3, #0
 800be62:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800be64:	2101      	movs	r1, #1
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff ff05 	bl	800bc76 <dir_next>
 800be6c:	4603      	mov	r3, r0
 800be6e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d0d7      	beq.n	800be26 <dir_alloc+0x26>
 800be76:	e000      	b.n	800be7a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800be78:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	d101      	bne.n	800be84 <dir_alloc+0x84>
 800be80:	2307      	movs	r3, #7
 800be82:	75fb      	strb	r3, [r7, #23]
	return res;
 800be84:	7dfb      	ldrb	r3, [r7, #23]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b084      	sub	sp, #16
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	331a      	adds	r3, #26
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff f83f 	bl	800af20 <ld_word>
 800bea2:	4603      	mov	r3, r0
 800bea4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b03      	cmp	r3, #3
 800beac:	d109      	bne.n	800bec2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	3314      	adds	r3, #20
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff f834 	bl	800af20 <ld_word>
 800beb8:	4603      	mov	r3, r0
 800beba:	041b      	lsls	r3, r3, #16
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bec2:	68fb      	ldr	r3, [r7, #12]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	331a      	adds	r3, #26
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	b292      	uxth	r2, r2
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7ff f857 	bl	800af96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b03      	cmp	r3, #3
 800beee:	d109      	bne.n	800bf04 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f103 0214 	add.w	r2, r3, #20
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	0c1b      	lsrs	r3, r3, #16
 800befa:	b29b      	uxth	r3, r3
 800befc:	4619      	mov	r1, r3
 800befe:	4610      	mov	r0, r2
 800bf00:	f7ff f849 	bl	800af96 <st_word>
	}
}
 800bf04:	bf00      	nop
 800bf06:	3710      	adds	r7, #16
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bf0c:	b590      	push	{r4, r7, lr}
 800bf0e:	b087      	sub	sp, #28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	331a      	adds	r3, #26
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff f800 	bl	800af20 <ld_word>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <cmp_lfn+0x1e>
 800bf26:	2300      	movs	r3, #0
 800bf28:	e059      	b.n	800bfde <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf32:	1e5a      	subs	r2, r3, #1
 800bf34:	4613      	mov	r3, r2
 800bf36:	005b      	lsls	r3, r3, #1
 800bf38:	4413      	add	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bf40:	2301      	movs	r3, #1
 800bf42:	81fb      	strh	r3, [r7, #14]
 800bf44:	2300      	movs	r3, #0
 800bf46:	613b      	str	r3, [r7, #16]
 800bf48:	e033      	b.n	800bfb2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bf4a:	4a27      	ldr	r2, [pc, #156]	; (800bfe8 <cmp_lfn+0xdc>)
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	4413      	add	r3, r2
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	461a      	mov	r2, r3
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	4413      	add	r3, r2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fe ffe1 	bl	800af20 <ld_word>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bf62:	89fb      	ldrh	r3, [r7, #14]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d01a      	beq.n	800bf9e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2bfe      	cmp	r3, #254	; 0xfe
 800bf6c:	d812      	bhi.n	800bf94 <cmp_lfn+0x88>
 800bf6e:	89bb      	ldrh	r3, [r7, #12]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f001 fcdd 	bl	800d930 <ff_wtoupper>
 800bf76:	4603      	mov	r3, r0
 800bf78:	461c      	mov	r4, r3
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	1c5a      	adds	r2, r3, #1
 800bf7e:	617a      	str	r2, [r7, #20]
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	4413      	add	r3, r2
 800bf86:	881b      	ldrh	r3, [r3, #0]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f001 fcd1 	bl	800d930 <ff_wtoupper>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	429c      	cmp	r4, r3
 800bf92:	d001      	beq.n	800bf98 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bf94:	2300      	movs	r3, #0
 800bf96:	e022      	b.n	800bfde <cmp_lfn+0xd2>
			}
			wc = uc;
 800bf98:	89bb      	ldrh	r3, [r7, #12]
 800bf9a:	81fb      	strh	r3, [r7, #14]
 800bf9c:	e006      	b.n	800bfac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bf9e:	89bb      	ldrh	r3, [r7, #12]
 800bfa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d001      	beq.n	800bfac <cmp_lfn+0xa0>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	e018      	b.n	800bfde <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	613b      	str	r3, [r7, #16]
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	2b0c      	cmp	r3, #12
 800bfb6:	d9c8      	bls.n	800bf4a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00b      	beq.n	800bfdc <cmp_lfn+0xd0>
 800bfc4:	89fb      	ldrh	r3, [r7, #14]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d008      	beq.n	800bfdc <cmp_lfn+0xd0>
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d001      	beq.n	800bfdc <cmp_lfn+0xd0>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	e000      	b.n	800bfde <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bfdc:	2301      	movs	r3, #1
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	371c      	adds	r7, #28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd90      	pop	{r4, r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	08013b34 	.word	0x08013b34

0800bfec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	4611      	mov	r1, r2
 800bff8:	461a      	mov	r2, r3
 800bffa:	460b      	mov	r3, r1
 800bffc:	71fb      	strb	r3, [r7, #7]
 800bffe:	4613      	mov	r3, r2
 800c000:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	330d      	adds	r3, #13
 800c006:	79ba      	ldrb	r2, [r7, #6]
 800c008:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	330b      	adds	r3, #11
 800c00e:	220f      	movs	r2, #15
 800c010:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	330c      	adds	r3, #12
 800c016:	2200      	movs	r2, #0
 800c018:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	331a      	adds	r3, #26
 800c01e:	2100      	movs	r1, #0
 800c020:	4618      	mov	r0, r3
 800c022:	f7fe ffb8 	bl	800af96 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	1e5a      	subs	r2, r3, #1
 800c02a:	4613      	mov	r3, r2
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	82fb      	strh	r3, [r7, #22]
 800c03a:	2300      	movs	r3, #0
 800c03c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c03e:	8afb      	ldrh	r3, [r7, #22]
 800c040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c044:	4293      	cmp	r3, r2
 800c046:	d007      	beq.n	800c058 <put_lfn+0x6c>
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	1c5a      	adds	r2, r3, #1
 800c04c:	61fa      	str	r2, [r7, #28]
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	4413      	add	r3, r2
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c058:	4a17      	ldr	r2, [pc, #92]	; (800c0b8 <put_lfn+0xcc>)
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	4413      	add	r3, r2
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	461a      	mov	r2, r3
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	4413      	add	r3, r2
 800c066:	8afa      	ldrh	r2, [r7, #22]
 800c068:	4611      	mov	r1, r2
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fe ff93 	bl	800af96 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c070:	8afb      	ldrh	r3, [r7, #22]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d102      	bne.n	800c07c <put_lfn+0x90>
 800c076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c07a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	3301      	adds	r3, #1
 800c080:	61bb      	str	r3, [r7, #24]
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	2b0c      	cmp	r3, #12
 800c086:	d9da      	bls.n	800c03e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c088:	8afb      	ldrh	r3, [r7, #22]
 800c08a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c08e:	4293      	cmp	r3, r2
 800c090:	d006      	beq.n	800c0a0 <put_lfn+0xb4>
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	4413      	add	r3, r2
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d103      	bne.n	800c0a8 <put_lfn+0xbc>
 800c0a0:	79fb      	ldrb	r3, [r7, #7]
 800c0a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	79fa      	ldrb	r2, [r7, #7]
 800c0ac:	701a      	strb	r2, [r3, #0]
}
 800c0ae:	bf00      	nop
 800c0b0:	3720      	adds	r7, #32
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	08013b34 	.word	0x08013b34

0800c0bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08c      	sub	sp, #48	; 0x30
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c0ca:	220b      	movs	r2, #11
 800c0cc:	68b9      	ldr	r1, [r7, #8]
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f7fe ffa8 	bl	800b024 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2b05      	cmp	r3, #5
 800c0d8:	d92b      	bls.n	800c132 <gen_numname+0x76>
		sr = seq;
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c0de:	e022      	b.n	800c126 <gen_numname+0x6a>
			wc = *lfn++;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	1c9a      	adds	r2, r3, #2
 800c0e4:	607a      	str	r2, [r7, #4]
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0ee:	e017      	b.n	800c120 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	005a      	lsls	r2, r3, #1
 800c0f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0f6:	f003 0301 	and.w	r3, r3, #1
 800c0fa:	4413      	add	r3, r2
 800c0fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c0fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c100:	085b      	lsrs	r3, r3, #1
 800c102:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d005      	beq.n	800c11a <gen_numname+0x5e>
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c114:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c118:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	3301      	adds	r3, #1
 800c11e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c122:	2b0f      	cmp	r3, #15
 800c124:	d9e4      	bls.n	800c0f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	881b      	ldrh	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1d8      	bne.n	800c0e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c132:	2307      	movs	r3, #7
 800c134:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	f003 030f 	and.w	r3, r3, #15
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	3330      	adds	r3, #48	; 0x30
 800c142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c14a:	2b39      	cmp	r3, #57	; 0x39
 800c14c:	d904      	bls.n	800c158 <gen_numname+0x9c>
 800c14e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c152:	3307      	adds	r3, #7
 800c154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15a:	1e5a      	subs	r2, r3, #1
 800c15c:	62ba      	str	r2, [r7, #40]	; 0x28
 800c15e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c162:	4413      	add	r3, r2
 800c164:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c168:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	091b      	lsrs	r3, r3, #4
 800c170:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1de      	bne.n	800c136 <gen_numname+0x7a>
	ns[i] = '~';
 800c178:	f107 0214 	add.w	r2, r7, #20
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	4413      	add	r3, r2
 800c180:	227e      	movs	r2, #126	; 0x7e
 800c182:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c184:	2300      	movs	r3, #0
 800c186:	627b      	str	r3, [r7, #36]	; 0x24
 800c188:	e002      	b.n	800c190 <gen_numname+0xd4>
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	3301      	adds	r3, #1
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
 800c190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	429a      	cmp	r2, r3
 800c196:	d205      	bcs.n	800c1a4 <gen_numname+0xe8>
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	4413      	add	r3, r2
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b20      	cmp	r3, #32
 800c1a2:	d1f2      	bne.n	800c18a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	2b07      	cmp	r3, #7
 800c1a8:	d808      	bhi.n	800c1bc <gen_numname+0x100>
 800c1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ac:	1c5a      	adds	r2, r3, #1
 800c1ae:	62ba      	str	r2, [r7, #40]	; 0x28
 800c1b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c1ba:	e000      	b.n	800c1be <gen_numname+0x102>
 800c1bc:	2120      	movs	r1, #32
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	1c5a      	adds	r2, r3, #1
 800c1c2:	627a      	str	r2, [r7, #36]	; 0x24
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	460a      	mov	r2, r1
 800c1ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	2b07      	cmp	r3, #7
 800c1d0:	d9e8      	bls.n	800c1a4 <gen_numname+0xe8>
}
 800c1d2:	bf00      	nop
 800c1d4:	bf00      	nop
 800c1d6:	3730      	adds	r7, #48	; 0x30
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c1e8:	230b      	movs	r3, #11
 800c1ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	b2da      	uxtb	r2, r3
 800c1f0:	0852      	lsrs	r2, r2, #1
 800c1f2:	01db      	lsls	r3, r3, #7
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	1c59      	adds	r1, r3, #1
 800c1fc:	6079      	str	r1, [r7, #4]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	4413      	add	r3, r2
 800c202:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	3b01      	subs	r3, #1
 800c208:	60bb      	str	r3, [r7, #8]
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1ed      	bne.n	800c1ec <sum_sfn+0x10>
	return sum;
 800c210:	7bfb      	ldrb	r3, [r7, #15]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b086      	sub	sp, #24
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c22c:	2100      	movs	r1, #0
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff fca6 	bl	800bb80 <dir_sdi>
 800c234:	4603      	mov	r3, r0
 800c236:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <dir_find+0x24>
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	e0a9      	b.n	800c396 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c242:	23ff      	movs	r3, #255	; 0xff
 800c244:	753b      	strb	r3, [r7, #20]
 800c246:	7d3b      	ldrb	r3, [r7, #20]
 800c248:	757b      	strb	r3, [r7, #21]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f04f 32ff 	mov.w	r2, #4294967295
 800c250:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	69db      	ldr	r3, [r3, #28]
 800c256:	4619      	mov	r1, r3
 800c258:	6938      	ldr	r0, [r7, #16]
 800c25a:	f7ff f911 	bl	800b480 <move_window>
 800c25e:	4603      	mov	r3, r0
 800c260:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c262:	7dfb      	ldrb	r3, [r7, #23]
 800c264:	2b00      	cmp	r3, #0
 800c266:	f040 8090 	bne.w	800c38a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c272:	7dbb      	ldrb	r3, [r7, #22]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d102      	bne.n	800c27e <dir_find+0x60>
 800c278:	2304      	movs	r3, #4
 800c27a:	75fb      	strb	r3, [r7, #23]
 800c27c:	e08a      	b.n	800c394 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	330b      	adds	r3, #11
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c28a:	73fb      	strb	r3, [r7, #15]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	7bfa      	ldrb	r2, [r7, #15]
 800c290:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c292:	7dbb      	ldrb	r3, [r7, #22]
 800c294:	2be5      	cmp	r3, #229	; 0xe5
 800c296:	d007      	beq.n	800c2a8 <dir_find+0x8a>
 800c298:	7bfb      	ldrb	r3, [r7, #15]
 800c29a:	f003 0308 	and.w	r3, r3, #8
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d009      	beq.n	800c2b6 <dir_find+0x98>
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
 800c2a4:	2b0f      	cmp	r3, #15
 800c2a6:	d006      	beq.n	800c2b6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c2a8:	23ff      	movs	r3, #255	; 0xff
 800c2aa:	757b      	strb	r3, [r7, #21]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b2:	631a      	str	r2, [r3, #48]	; 0x30
 800c2b4:	e05e      	b.n	800c374 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c2b6:	7bfb      	ldrb	r3, [r7, #15]
 800c2b8:	2b0f      	cmp	r3, #15
 800c2ba:	d136      	bne.n	800c32a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d154      	bne.n	800c374 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c2ca:	7dbb      	ldrb	r3, [r7, #22]
 800c2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00d      	beq.n	800c2f0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a1b      	ldr	r3, [r3, #32]
 800c2d8:	7b5b      	ldrb	r3, [r3, #13]
 800c2da:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c2dc:	7dbb      	ldrb	r3, [r7, #22]
 800c2de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2e2:	75bb      	strb	r3, [r7, #22]
 800c2e4:	7dbb      	ldrb	r3, [r7, #22]
 800c2e6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	695a      	ldr	r2, [r3, #20]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c2f0:	7dba      	ldrb	r2, [r7, #22]
 800c2f2:	7d7b      	ldrb	r3, [r7, #21]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d115      	bne.n	800c324 <dir_find+0x106>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a1b      	ldr	r3, [r3, #32]
 800c2fc:	330d      	adds	r3, #13
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	7d3a      	ldrb	r2, [r7, #20]
 800c302:	429a      	cmp	r2, r3
 800c304:	d10e      	bne.n	800c324 <dir_find+0x106>
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	68da      	ldr	r2, [r3, #12]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	4619      	mov	r1, r3
 800c310:	4610      	mov	r0, r2
 800c312:	f7ff fdfb 	bl	800bf0c <cmp_lfn>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <dir_find+0x106>
 800c31c:	7d7b      	ldrb	r3, [r7, #21]
 800c31e:	3b01      	subs	r3, #1
 800c320:	b2db      	uxtb	r3, r3
 800c322:	e000      	b.n	800c326 <dir_find+0x108>
 800c324:	23ff      	movs	r3, #255	; 0xff
 800c326:	757b      	strb	r3, [r7, #21]
 800c328:	e024      	b.n	800c374 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c32a:	7d7b      	ldrb	r3, [r7, #21]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d109      	bne.n	800c344 <dir_find+0x126>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6a1b      	ldr	r3, [r3, #32]
 800c334:	4618      	mov	r0, r3
 800c336:	f7ff ff51 	bl	800c1dc <sum_sfn>
 800c33a:	4603      	mov	r3, r0
 800c33c:	461a      	mov	r2, r3
 800c33e:	7d3b      	ldrb	r3, [r7, #20]
 800c340:	4293      	cmp	r3, r2
 800c342:	d024      	beq.n	800c38e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c34a:	f003 0301 	and.w	r3, r3, #1
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10a      	bne.n	800c368 <dir_find+0x14a>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a18      	ldr	r0, [r3, #32]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3324      	adds	r3, #36	; 0x24
 800c35a:	220b      	movs	r2, #11
 800c35c:	4619      	mov	r1, r3
 800c35e:	f7fe fe9d 	bl	800b09c <mem_cmp>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d014      	beq.n	800c392 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c368:	23ff      	movs	r3, #255	; 0xff
 800c36a:	757b      	strb	r3, [r7, #21]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f04f 32ff 	mov.w	r2, #4294967295
 800c372:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c374:	2100      	movs	r1, #0
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff fc7d 	bl	800bc76 <dir_next>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c380:	7dfb      	ldrb	r3, [r7, #23]
 800c382:	2b00      	cmp	r3, #0
 800c384:	f43f af65 	beq.w	800c252 <dir_find+0x34>
 800c388:	e004      	b.n	800c394 <dir_find+0x176>
		if (res != FR_OK) break;
 800c38a:	bf00      	nop
 800c38c:	e002      	b.n	800c394 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c38e:	bf00      	nop
 800c390:	e000      	b.n	800c394 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c392:	bf00      	nop

	return res;
 800c394:	7dfb      	ldrb	r3, [r7, #23]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
	...

0800c3a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08c      	sub	sp, #48	; 0x30
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c3b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d001      	beq.n	800c3c0 <dir_register+0x20>
 800c3bc:	2306      	movs	r3, #6
 800c3be:	e0e0      	b.n	800c582 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c3c4:	e002      	b.n	800c3cc <dir_register+0x2c>
 800c3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	68da      	ldr	r2, [r3, #12]
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	4413      	add	r3, r2
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1f4      	bne.n	800c3c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c3e2:	f107 030c 	add.w	r3, r7, #12
 800c3e6:	220c      	movs	r2, #12
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fe fe1b 	bl	800b024 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d032      	beq.n	800c45e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2240      	movs	r2, #64	; 0x40
 800c3fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c400:	2301      	movs	r3, #1
 800c402:	62bb      	str	r3, [r7, #40]	; 0x28
 800c404:	e016      	b.n	800c434 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	68da      	ldr	r2, [r3, #12]
 800c410:	f107 010c 	add.w	r1, r7, #12
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	f7ff fe51 	bl	800c0bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7ff feff 	bl	800c21e <dir_find>
 800c420:	4603      	mov	r3, r0
 800c422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d106      	bne.n	800c43c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c430:	3301      	adds	r3, #1
 800c432:	62bb      	str	r3, [r7, #40]	; 0x28
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	2b63      	cmp	r3, #99	; 0x63
 800c438:	d9e5      	bls.n	800c406 <dir_register+0x66>
 800c43a:	e000      	b.n	800c43e <dir_register+0x9e>
			if (res != FR_OK) break;
 800c43c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c440:	2b64      	cmp	r3, #100	; 0x64
 800c442:	d101      	bne.n	800c448 <dir_register+0xa8>
 800c444:	2307      	movs	r3, #7
 800c446:	e09c      	b.n	800c582 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c44c:	2b04      	cmp	r3, #4
 800c44e:	d002      	beq.n	800c456 <dir_register+0xb6>
 800c450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c454:	e095      	b.n	800c582 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c456:	7dfa      	ldrb	r2, [r7, #23]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
 800c460:	f003 0302 	and.w	r3, r3, #2
 800c464:	2b00      	cmp	r3, #0
 800c466:	d007      	beq.n	800c478 <dir_register+0xd8>
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46a:	330c      	adds	r3, #12
 800c46c:	4a47      	ldr	r2, [pc, #284]	; (800c58c <dir_register+0x1ec>)
 800c46e:	fba2 2303 	umull	r2, r3, r2, r3
 800c472:	089b      	lsrs	r3, r3, #2
 800c474:	3301      	adds	r3, #1
 800c476:	e000      	b.n	800c47a <dir_register+0xda>
 800c478:	2301      	movs	r3, #1
 800c47a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c47c:	6a39      	ldr	r1, [r7, #32]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7ff fcbe 	bl	800be00 <dir_alloc>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c48a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d148      	bne.n	800c524 <dir_register+0x184>
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	3b01      	subs	r3, #1
 800c496:	623b      	str	r3, [r7, #32]
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d042      	beq.n	800c524 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	695a      	ldr	r2, [r3, #20]
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	015b      	lsls	r3, r3, #5
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff fb68 	bl	800bb80 <dir_sdi>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c4b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d132      	bne.n	800c524 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	3324      	adds	r3, #36	; 0x24
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7ff fe8a 	bl	800c1dc <sum_sfn>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	69db      	ldr	r3, [r3, #28]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	69f8      	ldr	r0, [r7, #28]
 800c4d4:	f7fe ffd4 	bl	800b480 <move_window>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c4de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d11d      	bne.n	800c522 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	68d8      	ldr	r0, [r3, #12]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a19      	ldr	r1, [r3, #32]
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	7efb      	ldrb	r3, [r7, #27]
 800c4f4:	f7ff fd7a 	bl	800bfec <put_lfn>
				fs->wflag = 1;
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c4fe:	2100      	movs	r1, #0
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7ff fbb8 	bl	800bc76 <dir_next>
 800c506:	4603      	mov	r3, r0
 800c508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c50c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c510:	2b00      	cmp	r3, #0
 800c512:	d107      	bne.n	800c524 <dir_register+0x184>
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	3b01      	subs	r3, #1
 800c518:	623b      	str	r3, [r7, #32]
 800c51a:	6a3b      	ldr	r3, [r7, #32]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1d5      	bne.n	800c4cc <dir_register+0x12c>
 800c520:	e000      	b.n	800c524 <dir_register+0x184>
				if (res != FR_OK) break;
 800c522:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d128      	bne.n	800c57e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	69db      	ldr	r3, [r3, #28]
 800c530:	4619      	mov	r1, r3
 800c532:	69f8      	ldr	r0, [r7, #28]
 800c534:	f7fe ffa4 	bl	800b480 <move_window>
 800c538:	4603      	mov	r3, r0
 800c53a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c53e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c542:	2b00      	cmp	r3, #0
 800c544:	d11b      	bne.n	800c57e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	2220      	movs	r2, #32
 800c54c:	2100      	movs	r1, #0
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe fd89 	bl	800b066 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a18      	ldr	r0, [r3, #32]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	3324      	adds	r3, #36	; 0x24
 800c55c:	220b      	movs	r2, #11
 800c55e:	4619      	mov	r1, r3
 800c560:	f7fe fd60 	bl	800b024 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	330c      	adds	r3, #12
 800c570:	f002 0218 	and.w	r2, r2, #24
 800c574:	b2d2      	uxtb	r2, r2
 800c576:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	2201      	movs	r2, #1
 800c57c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c57e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c582:	4618      	mov	r0, r3
 800c584:	3730      	adds	r7, #48	; 0x30
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	4ec4ec4f 	.word	0x4ec4ec4f

0800c590 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b08a      	sub	sp, #40	; 0x28
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	613b      	str	r3, [r7, #16]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	60fb      	str	r3, [r7, #12]
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	1c5a      	adds	r2, r3, #1
 800c5b4:	61ba      	str	r2, [r7, #24]
 800c5b6:	693a      	ldr	r2, [r7, #16]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c5be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5c0:	2b1f      	cmp	r3, #31
 800c5c2:	d940      	bls.n	800c646 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c5c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5c6:	2b2f      	cmp	r3, #47	; 0x2f
 800c5c8:	d006      	beq.n	800c5d8 <create_name+0x48>
 800c5ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5cc:	2b5c      	cmp	r3, #92	; 0x5c
 800c5ce:	d110      	bne.n	800c5f2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c5d0:	e002      	b.n	800c5d8 <create_name+0x48>
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	61bb      	str	r3, [r7, #24]
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	4413      	add	r3, r2
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	2b2f      	cmp	r3, #47	; 0x2f
 800c5e2:	d0f6      	beq.n	800c5d2 <create_name+0x42>
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	2b5c      	cmp	r3, #92	; 0x5c
 800c5ee:	d0f0      	beq.n	800c5d2 <create_name+0x42>
			break;
 800c5f0:	e02a      	b.n	800c648 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2bfe      	cmp	r3, #254	; 0xfe
 800c5f6:	d901      	bls.n	800c5fc <create_name+0x6c>
 800c5f8:	2306      	movs	r3, #6
 800c5fa:	e177      	b.n	800c8ec <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c5fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c604:	2101      	movs	r1, #1
 800c606:	4618      	mov	r0, r3
 800c608:	f001 f956 	bl	800d8b8 <ff_convert>
 800c60c:	4603      	mov	r3, r0
 800c60e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <create_name+0x8a>
 800c616:	2306      	movs	r3, #6
 800c618:	e168      	b.n	800c8ec <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c61a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c61c:	2b7f      	cmp	r3, #127	; 0x7f
 800c61e:	d809      	bhi.n	800c634 <create_name+0xa4>
 800c620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c622:	4619      	mov	r1, r3
 800c624:	48b3      	ldr	r0, [pc, #716]	; (800c8f4 <create_name+0x364>)
 800c626:	f7fe fd60 	bl	800b0ea <chk_chr>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <create_name+0xa4>
 800c630:	2306      	movs	r3, #6
 800c632:	e15b      	b.n	800c8ec <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	617a      	str	r2, [r7, #20]
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4413      	add	r3, r2
 800c640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c642:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c644:	e7b4      	b.n	800c5b0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c646:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	441a      	add	r2, r3
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c654:	2b1f      	cmp	r3, #31
 800c656:	d801      	bhi.n	800c65c <create_name+0xcc>
 800c658:	2304      	movs	r3, #4
 800c65a:	e000      	b.n	800c65e <create_name+0xce>
 800c65c:	2300      	movs	r3, #0
 800c65e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c662:	e011      	b.n	800c688 <create_name+0xf8>
		w = lfn[di - 1];
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c66a:	3b01      	subs	r3, #1
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	4413      	add	r3, r2
 800c672:	881b      	ldrh	r3, [r3, #0]
 800c674:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c678:	2b20      	cmp	r3, #32
 800c67a:	d002      	beq.n	800c682 <create_name+0xf2>
 800c67c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c67e:	2b2e      	cmp	r3, #46	; 0x2e
 800c680:	d106      	bne.n	800c690 <create_name+0x100>
		di--;
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	3b01      	subs	r3, #1
 800c686:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1ea      	bne.n	800c664 <create_name+0xd4>
 800c68e:	e000      	b.n	800c692 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c690:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	4413      	add	r3, r2
 800c69a:	2200      	movs	r2, #0
 800c69c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <create_name+0x118>
 800c6a4:	2306      	movs	r3, #6
 800c6a6:	e121      	b.n	800c8ec <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3324      	adds	r3, #36	; 0x24
 800c6ac:	220b      	movs	r2, #11
 800c6ae:	2120      	movs	r1, #32
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fe fcd8 	bl	800b066 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	61bb      	str	r3, [r7, #24]
 800c6ba:	e002      	b.n	800c6c2 <create_name+0x132>
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	61bb      	str	r3, [r7, #24]
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	881b      	ldrh	r3, [r3, #0]
 800c6cc:	2b20      	cmp	r3, #32
 800c6ce:	d0f5      	beq.n	800c6bc <create_name+0x12c>
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	2b2e      	cmp	r3, #46	; 0x2e
 800c6dc:	d0ee      	beq.n	800c6bc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d009      	beq.n	800c6f8 <create_name+0x168>
 800c6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6e8:	f043 0303 	orr.w	r3, r3, #3
 800c6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c6f0:	e002      	b.n	800c6f8 <create_name+0x168>
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	617b      	str	r3, [r7, #20]
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d009      	beq.n	800c712 <create_name+0x182>
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c704:	3b01      	subs	r3, #1
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	4413      	add	r3, r2
 800c70c:	881b      	ldrh	r3, [r3, #0]
 800c70e:	2b2e      	cmp	r3, #46	; 0x2e
 800c710:	d1ef      	bne.n	800c6f2 <create_name+0x162>

	i = b = 0; ni = 8;
 800c712:	2300      	movs	r3, #0
 800c714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c718:	2300      	movs	r3, #0
 800c71a:	623b      	str	r3, [r7, #32]
 800c71c:	2308      	movs	r3, #8
 800c71e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	61ba      	str	r2, [r7, #24]
 800c726:	005b      	lsls	r3, r3, #1
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	4413      	add	r3, r2
 800c72c:	881b      	ldrh	r3, [r3, #0]
 800c72e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c732:	2b00      	cmp	r3, #0
 800c734:	f000 8090 	beq.w	800c858 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c73a:	2b20      	cmp	r3, #32
 800c73c:	d006      	beq.n	800c74c <create_name+0x1bc>
 800c73e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c740:	2b2e      	cmp	r3, #46	; 0x2e
 800c742:	d10a      	bne.n	800c75a <create_name+0x1ca>
 800c744:	69ba      	ldr	r2, [r7, #24]
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d006      	beq.n	800c75a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c750:	f043 0303 	orr.w	r3, r3, #3
 800c754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c758:	e07d      	b.n	800c856 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c75a:	6a3a      	ldr	r2, [r7, #32]
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d203      	bcs.n	800c76a <create_name+0x1da>
 800c762:	69ba      	ldr	r2, [r7, #24]
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	429a      	cmp	r2, r3
 800c768:	d123      	bne.n	800c7b2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	2b0b      	cmp	r3, #11
 800c76e:	d106      	bne.n	800c77e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c774:	f043 0303 	orr.w	r3, r3, #3
 800c778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c77c:	e06f      	b.n	800c85e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c77e:	69ba      	ldr	r2, [r7, #24]
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	429a      	cmp	r2, r3
 800c784:	d005      	beq.n	800c792 <create_name+0x202>
 800c786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c78a:	f043 0303 	orr.w	r3, r3, #3
 800c78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c792:	69ba      	ldr	r2, [r7, #24]
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	429a      	cmp	r2, r3
 800c798:	d860      	bhi.n	800c85c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	61bb      	str	r3, [r7, #24]
 800c79e:	2308      	movs	r3, #8
 800c7a0:	623b      	str	r3, [r7, #32]
 800c7a2:	230b      	movs	r3, #11
 800c7a4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c7a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c7b0:	e051      	b.n	800c856 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c7b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7b4:	2b7f      	cmp	r3, #127	; 0x7f
 800c7b6:	d914      	bls.n	800c7e2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c7b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f001 f87b 	bl	800d8b8 <ff_convert>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c7c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d004      	beq.n	800c7d6 <create_name+0x246>
 800c7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7ce:	3b80      	subs	r3, #128	; 0x80
 800c7d0:	4a49      	ldr	r2, [pc, #292]	; (800c8f8 <create_name+0x368>)
 800c7d2:	5cd3      	ldrb	r3, [r2, r3]
 800c7d4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c7d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7da:	f043 0302 	orr.w	r3, r3, #2
 800c7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c7e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d007      	beq.n	800c7f8 <create_name+0x268>
 800c7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	4843      	ldr	r0, [pc, #268]	; (800c8fc <create_name+0x36c>)
 800c7ee:	f7fe fc7c 	bl	800b0ea <chk_chr>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d008      	beq.n	800c80a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c7f8:	235f      	movs	r3, #95	; 0x5f
 800c7fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c800:	f043 0303 	orr.w	r3, r3, #3
 800c804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c808:	e01b      	b.n	800c842 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c80c:	2b40      	cmp	r3, #64	; 0x40
 800c80e:	d909      	bls.n	800c824 <create_name+0x294>
 800c810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c812:	2b5a      	cmp	r3, #90	; 0x5a
 800c814:	d806      	bhi.n	800c824 <create_name+0x294>
					b |= 2;
 800c816:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c81a:	f043 0302 	orr.w	r3, r3, #2
 800c81e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c822:	e00e      	b.n	800c842 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c826:	2b60      	cmp	r3, #96	; 0x60
 800c828:	d90b      	bls.n	800c842 <create_name+0x2b2>
 800c82a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c82c:	2b7a      	cmp	r3, #122	; 0x7a
 800c82e:	d808      	bhi.n	800c842 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c834:	f043 0301 	orr.w	r3, r3, #1
 800c838:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c83c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c83e:	3b20      	subs	r3, #32
 800c840:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	623a      	str	r2, [r7, #32]
 800c848:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c84a:	b2d1      	uxtb	r1, r2
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	4413      	add	r3, r2
 800c850:	460a      	mov	r2, r1
 800c852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c856:	e763      	b.n	800c720 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c858:	bf00      	nop
 800c85a:	e000      	b.n	800c85e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800c85c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c864:	2be5      	cmp	r3, #229	; 0xe5
 800c866:	d103      	bne.n	800c870 <create_name+0x2e0>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2205      	movs	r2, #5
 800c86c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	2b08      	cmp	r3, #8
 800c874:	d104      	bne.n	800c880 <create_name+0x2f0>
 800c876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c884:	f003 030c 	and.w	r3, r3, #12
 800c888:	2b0c      	cmp	r3, #12
 800c88a:	d005      	beq.n	800c898 <create_name+0x308>
 800c88c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c890:	f003 0303 	and.w	r3, r3, #3
 800c894:	2b03      	cmp	r3, #3
 800c896:	d105      	bne.n	800c8a4 <create_name+0x314>
 800c898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c89c:	f043 0302 	orr.w	r3, r3, #2
 800c8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8a8:	f003 0302 	and.w	r3, r3, #2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d117      	bne.n	800c8e0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c8b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8b4:	f003 0303 	and.w	r3, r3, #3
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d105      	bne.n	800c8c8 <create_name+0x338>
 800c8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8c0:	f043 0310 	orr.w	r3, r3, #16
 800c8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8cc:	f003 030c 	and.w	r3, r3, #12
 800c8d0:	2b04      	cmp	r3, #4
 800c8d2:	d105      	bne.n	800c8e0 <create_name+0x350>
 800c8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8d8:	f043 0308 	orr.w	r3, r3, #8
 800c8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c8e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c8ea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3728      	adds	r7, #40	; 0x28
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	08012720 	.word	0x08012720
 800c8f8:	08013ab4 	.word	0x08013ab4
 800c8fc:	0801272c 	.word	0x0801272c

0800c900 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c914:	e002      	b.n	800c91c <follow_path+0x1c>
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	3301      	adds	r3, #1
 800c91a:	603b      	str	r3, [r7, #0]
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	2b2f      	cmp	r3, #47	; 0x2f
 800c922:	d0f8      	beq.n	800c916 <follow_path+0x16>
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	2b5c      	cmp	r3, #92	; 0x5c
 800c92a:	d0f4      	beq.n	800c916 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	2200      	movs	r2, #0
 800c930:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b1f      	cmp	r3, #31
 800c938:	d80a      	bhi.n	800c950 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2280      	movs	r2, #128	; 0x80
 800c93e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c942:	2100      	movs	r1, #0
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7ff f91b 	bl	800bb80 <dir_sdi>
 800c94a:	4603      	mov	r3, r0
 800c94c:	75fb      	strb	r3, [r7, #23]
 800c94e:	e043      	b.n	800c9d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c950:	463b      	mov	r3, r7
 800c952:	4619      	mov	r1, r3
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7ff fe1b 	bl	800c590 <create_name>
 800c95a:	4603      	mov	r3, r0
 800c95c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d134      	bne.n	800c9ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f7ff fc5a 	bl	800c21e <dir_find>
 800c96a:	4603      	mov	r3, r0
 800c96c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c974:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c976:	7dfb      	ldrb	r3, [r7, #23]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00a      	beq.n	800c992 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c97c:	7dfb      	ldrb	r3, [r7, #23]
 800c97e:	2b04      	cmp	r3, #4
 800c980:	d127      	bne.n	800c9d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c982:	7afb      	ldrb	r3, [r7, #11]
 800c984:	f003 0304 	and.w	r3, r3, #4
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d122      	bne.n	800c9d2 <follow_path+0xd2>
 800c98c:	2305      	movs	r3, #5
 800c98e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c990:	e01f      	b.n	800c9d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c992:	7afb      	ldrb	r3, [r7, #11]
 800c994:	f003 0304 	and.w	r3, r3, #4
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d11c      	bne.n	800c9d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	799b      	ldrb	r3, [r3, #6]
 800c9a0:	f003 0310 	and.w	r3, r3, #16
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d102      	bne.n	800c9ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c9a8:	2305      	movs	r3, #5
 800c9aa:	75fb      	strb	r3, [r7, #23]
 800c9ac:	e014      	b.n	800c9d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	695b      	ldr	r3, [r3, #20]
 800c9b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9bc:	4413      	add	r3, r2
 800c9be:	4619      	mov	r1, r3
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f7ff fa64 	bl	800be8e <ld_clust>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c9cc:	e7c0      	b.n	800c950 <follow_path+0x50>
			if (res != FR_OK) break;
 800c9ce:	bf00      	nop
 800c9d0:	e002      	b.n	800c9d8 <follow_path+0xd8>
				break;
 800c9d2:	bf00      	nop
 800c9d4:	e000      	b.n	800c9d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9d6:	bf00      	nop
			}
		}
	}

	return res;
 800c9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b087      	sub	sp, #28
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d031      	beq.n	800ca5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	617b      	str	r3, [r7, #20]
 800c9fe:	e002      	b.n	800ca06 <get_ldnumber+0x24>
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	3301      	adds	r3, #1
 800ca04:	617b      	str	r3, [r7, #20]
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	2b1f      	cmp	r3, #31
 800ca0c:	d903      	bls.n	800ca16 <get_ldnumber+0x34>
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2b3a      	cmp	r3, #58	; 0x3a
 800ca14:	d1f4      	bne.n	800ca00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2b3a      	cmp	r3, #58	; 0x3a
 800ca1c:	d11c      	bne.n	800ca58 <get_ldnumber+0x76>
			tp = *path;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	60fa      	str	r2, [r7, #12]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	3b30      	subs	r3, #48	; 0x30
 800ca2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b09      	cmp	r3, #9
 800ca34:	d80e      	bhi.n	800ca54 <get_ldnumber+0x72>
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d10a      	bne.n	800ca54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d107      	bne.n	800ca54 <get_ldnumber+0x72>
					vol = (int)i;
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	617b      	str	r3, [r7, #20]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	697a      	ldr	r2, [r7, #20]
 800ca52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	e002      	b.n	800ca5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca58:	2300      	movs	r3, #0
 800ca5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca5c:	693b      	ldr	r3, [r7, #16]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	371c      	adds	r7, #28
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
	...

0800ca6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	70da      	strb	r2, [r3, #3]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca82:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca84:	6839      	ldr	r1, [r7, #0]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7fe fcfa 	bl	800b480 <move_window>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d001      	beq.n	800ca96 <check_fs+0x2a>
 800ca92:	2304      	movs	r3, #4
 800ca94:	e038      	b.n	800cb08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3334      	adds	r3, #52	; 0x34
 800ca9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fe fa3e 	bl	800af20 <ld_word>
 800caa4:	4603      	mov	r3, r0
 800caa6:	461a      	mov	r2, r3
 800caa8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800caac:	429a      	cmp	r2, r3
 800caae:	d001      	beq.n	800cab4 <check_fs+0x48>
 800cab0:	2303      	movs	r3, #3
 800cab2:	e029      	b.n	800cb08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800caba:	2be9      	cmp	r3, #233	; 0xe9
 800cabc:	d009      	beq.n	800cad2 <check_fs+0x66>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cac4:	2beb      	cmp	r3, #235	; 0xeb
 800cac6:	d11e      	bne.n	800cb06 <check_fs+0x9a>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cace:	2b90      	cmp	r3, #144	; 0x90
 800cad0:	d119      	bne.n	800cb06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	3334      	adds	r3, #52	; 0x34
 800cad6:	3336      	adds	r3, #54	; 0x36
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fe fa39 	bl	800af50 <ld_dword>
 800cade:	4603      	mov	r3, r0
 800cae0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cae4:	4a0a      	ldr	r2, [pc, #40]	; (800cb10 <check_fs+0xa4>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d101      	bne.n	800caee <check_fs+0x82>
 800caea:	2300      	movs	r3, #0
 800caec:	e00c      	b.n	800cb08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3334      	adds	r3, #52	; 0x34
 800caf2:	3352      	adds	r3, #82	; 0x52
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fe fa2b 	bl	800af50 <ld_dword>
 800cafa:	4603      	mov	r3, r0
 800cafc:	4a05      	ldr	r2, [pc, #20]	; (800cb14 <check_fs+0xa8>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d101      	bne.n	800cb06 <check_fs+0x9a>
 800cb02:	2300      	movs	r3, #0
 800cb04:	e000      	b.n	800cb08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cb06:	2302      	movs	r3, #2
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	00544146 	.word	0x00544146
 800cb14:	33544146 	.word	0x33544146

0800cb18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b096      	sub	sp, #88	; 0x58
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	4613      	mov	r3, r2
 800cb24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7ff ff58 	bl	800c9e2 <get_ldnumber>
 800cb32:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	da01      	bge.n	800cb3e <find_volume+0x26>
 800cb3a:	230b      	movs	r3, #11
 800cb3c:	e231      	b.n	800cfa2 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb3e:	4aa8      	ldr	r2, [pc, #672]	; (800cde0 <find_volume+0x2c8>)
 800cb40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d101      	bne.n	800cb52 <find_volume+0x3a>
 800cb4e:	230c      	movs	r3, #12
 800cb50:	e227      	b.n	800cfa2 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	f023 0301 	bic.w	r3, r3, #1
 800cb5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d01a      	beq.n	800cb9e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	785b      	ldrb	r3, [r3, #1]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe f939 	bl	800ade4 <disk_status>
 800cb72:	4603      	mov	r3, r0
 800cb74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb7c:	f003 0301 	and.w	r3, r3, #1
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10c      	bne.n	800cb9e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb84:	79fb      	ldrb	r3, [r7, #7]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d007      	beq.n	800cb9a <find_volume+0x82>
 800cb8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb8e:	f003 0304 	and.w	r3, r3, #4
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cb96:	230a      	movs	r3, #10
 800cb98:	e203      	b.n	800cfa2 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	e201      	b.n	800cfa2 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba0:	2200      	movs	r2, #0
 800cba2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbae:	785b      	ldrb	r3, [r3, #1]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe f931 	bl	800ae18 <disk_initialize>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cbbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbc0:	f003 0301 	and.w	r3, r3, #1
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cbc8:	2303      	movs	r3, #3
 800cbca:	e1ea      	b.n	800cfa2 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d007      	beq.n	800cbe2 <find_volume+0xca>
 800cbd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbd6:	f003 0304 	and.w	r3, r3, #4
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cbde:	230a      	movs	r3, #10
 800cbe0:	e1df      	b.n	800cfa2 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cbe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cbe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbea:	f7ff ff3f 	bl	800ca6c <check_fs>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cbf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d14b      	bne.n	800cc94 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	643b      	str	r3, [r7, #64]	; 0x40
 800cc00:	e01f      	b.n	800cc42 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc0a:	011b      	lsls	r3, r3, #4
 800cc0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cc10:	4413      	add	r3, r2
 800cc12:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc16:	3304      	adds	r3, #4
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d006      	beq.n	800cc2c <find_volume+0x114>
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	3308      	adds	r3, #8
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe f994 	bl	800af50 <ld_dword>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	e000      	b.n	800cc2e <find_volume+0x116>
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cc36:	440b      	add	r3, r1
 800cc38:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc3e:	3301      	adds	r3, #1
 800cc40:	643b      	str	r3, [r7, #64]	; 0x40
 800cc42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc44:	2b03      	cmp	r3, #3
 800cc46:	d9dc      	bls.n	800cc02 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cc48:	2300      	movs	r3, #0
 800cc4a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cc4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d002      	beq.n	800cc58 <find_volume+0x140>
 800cc52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc54:	3b01      	subs	r3, #1
 800cc56:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cc58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cc60:	4413      	add	r3, r2
 800cc62:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cc66:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cc68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d005      	beq.n	800cc7a <find_volume+0x162>
 800cc6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc72:	f7ff fefb 	bl	800ca6c <check_fs>
 800cc76:	4603      	mov	r3, r0
 800cc78:	e000      	b.n	800cc7c <find_volume+0x164>
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cc80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d905      	bls.n	800cc94 <find_volume+0x17c>
 800cc88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	643b      	str	r3, [r7, #64]	; 0x40
 800cc8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d9e1      	bls.n	800cc58 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cc94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc98:	2b04      	cmp	r3, #4
 800cc9a:	d101      	bne.n	800cca0 <find_volume+0x188>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e180      	b.n	800cfa2 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cca0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d901      	bls.n	800ccac <find_volume+0x194>
 800cca8:	230d      	movs	r3, #13
 800ccaa:	e17a      	b.n	800cfa2 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	3334      	adds	r3, #52	; 0x34
 800ccb0:	330b      	adds	r3, #11
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe f934 	bl	800af20 <ld_word>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccbe:	d001      	beq.n	800ccc4 <find_volume+0x1ac>
 800ccc0:	230d      	movs	r3, #13
 800ccc2:	e16e      	b.n	800cfa2 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	3334      	adds	r3, #52	; 0x34
 800ccc8:	3316      	adds	r3, #22
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fe f928 	bl	800af20 <ld_word>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ccd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d106      	bne.n	800cce8 <find_volume+0x1d0>
 800ccda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccdc:	3334      	adds	r3, #52	; 0x34
 800ccde:	3324      	adds	r3, #36	; 0x24
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fe f935 	bl	800af50 <ld_dword>
 800cce6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ccee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfa:	789b      	ldrb	r3, [r3, #2]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d005      	beq.n	800cd0c <find_volume+0x1f4>
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	789b      	ldrb	r3, [r3, #2]
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d001      	beq.n	800cd0c <find_volume+0x1f4>
 800cd08:	230d      	movs	r3, #13
 800cd0a:	e14a      	b.n	800cfa2 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	789b      	ldrb	r3, [r3, #2]
 800cd10:	461a      	mov	r2, r3
 800cd12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd14:	fb02 f303 	mul.w	r3, r2, r3
 800cd18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	895b      	ldrh	r3, [r3, #10]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d008      	beq.n	800cd40 <find_volume+0x228>
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd30:	895b      	ldrh	r3, [r3, #10]
 800cd32:	461a      	mov	r2, r3
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	895b      	ldrh	r3, [r3, #10]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d001      	beq.n	800cd44 <find_volume+0x22c>
 800cd40:	230d      	movs	r3, #13
 800cd42:	e12e      	b.n	800cfa2 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd46:	3334      	adds	r3, #52	; 0x34
 800cd48:	3311      	adds	r3, #17
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe f8e8 	bl	800af20 <ld_word>
 800cd50:	4603      	mov	r3, r0
 800cd52:	461a      	mov	r2, r3
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5a:	891b      	ldrh	r3, [r3, #8]
 800cd5c:	f003 030f 	and.w	r3, r3, #15
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <find_volume+0x252>
 800cd66:	230d      	movs	r3, #13
 800cd68:	e11b      	b.n	800cfa2 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6c:	3334      	adds	r3, #52	; 0x34
 800cd6e:	3313      	adds	r3, #19
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe f8d5 	bl	800af20 <ld_word>
 800cd76:	4603      	mov	r3, r0
 800cd78:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cd7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d106      	bne.n	800cd8e <find_volume+0x276>
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	3334      	adds	r3, #52	; 0x34
 800cd84:	3320      	adds	r3, #32
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe f8e2 	bl	800af50 <ld_dword>
 800cd8c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd90:	3334      	adds	r3, #52	; 0x34
 800cd92:	330e      	adds	r3, #14
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7fe f8c3 	bl	800af20 <ld_word>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cd9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <find_volume+0x290>
 800cda4:	230d      	movs	r3, #13
 800cda6:	e0fc      	b.n	800cfa2 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cda8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cdaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdac:	4413      	add	r3, r2
 800cdae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdb0:	8912      	ldrh	r2, [r2, #8]
 800cdb2:	0912      	lsrs	r2, r2, #4
 800cdb4:	b292      	uxth	r2, r2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cdba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d201      	bcs.n	800cdc6 <find_volume+0x2ae>
 800cdc2:	230d      	movs	r3, #13
 800cdc4:	e0ed      	b.n	800cfa2 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cdc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdce:	8952      	ldrh	r2, [r2, #10]
 800cdd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d103      	bne.n	800cde4 <find_volume+0x2cc>
 800cddc:	230d      	movs	r3, #13
 800cdde:	e0e0      	b.n	800cfa2 <find_volume+0x48a>
 800cde0:	20000758 	.word	0x20000758
		fmt = FS_FAT32;
 800cde4:	2303      	movs	r3, #3
 800cde6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d802      	bhi.n	800cdfa <find_volume+0x2e2>
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d802      	bhi.n	800ce0a <find_volume+0x2f2>
 800ce04:	2301      	movs	r3, #1
 800ce06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0c:	1c9a      	adds	r2, r3, #2
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ce12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce16:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce1c:	441a      	add	r2, r3
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce20:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ce22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	441a      	add	r2, r3
 800ce28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ce2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce30:	2b03      	cmp	r3, #3
 800ce32:	d11e      	bne.n	800ce72 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	3334      	adds	r3, #52	; 0x34
 800ce38:	332a      	adds	r3, #42	; 0x2a
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7fe f870 	bl	800af20 <ld_word>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d001      	beq.n	800ce4a <find_volume+0x332>
 800ce46:	230d      	movs	r3, #13
 800ce48:	e0ab      	b.n	800cfa2 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4c:	891b      	ldrh	r3, [r3, #8]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <find_volume+0x33e>
 800ce52:	230d      	movs	r3, #13
 800ce54:	e0a5      	b.n	800cfa2 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	3334      	adds	r3, #52	; 0x34
 800ce5a:	332c      	adds	r3, #44	; 0x2c
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe f877 	bl	800af50 <ld_dword>
 800ce62:	4602      	mov	r2, r0
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ce68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ce70:	e01f      	b.n	800ceb2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	891b      	ldrh	r3, [r3, #8]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <find_volume+0x366>
 800ce7a:	230d      	movs	r3, #13
 800ce7c:	e091      	b.n	800cfa2 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce84:	441a      	add	r2, r3
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ce8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d103      	bne.n	800ce9a <find_volume+0x382>
 800ce92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce94:	699b      	ldr	r3, [r3, #24]
 800ce96:	005b      	lsls	r3, r3, #1
 800ce98:	e00a      	b.n	800ceb0 <find_volume+0x398>
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9c:	699a      	ldr	r2, [r3, #24]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	4413      	add	r3, r2
 800cea4:	085a      	lsrs	r2, r3, #1
 800cea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	f003 0301 	and.w	r3, r3, #1
 800ceae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ceb0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb4:	69da      	ldr	r2, [r3, #28]
 800ceb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cebc:	0a5b      	lsrs	r3, r3, #9
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d201      	bcs.n	800cec6 <find_volume+0x3ae>
 800cec2:	230d      	movs	r3, #13
 800cec4:	e06d      	b.n	800cfa2 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec8:	f04f 32ff 	mov.w	r2, #4294967295
 800cecc:	615a      	str	r2, [r3, #20]
 800cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced0:	695a      	ldr	r2, [r3, #20]
 800ced2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ced6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced8:	2280      	movs	r2, #128	; 0x80
 800ceda:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cedc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cee0:	2b03      	cmp	r3, #3
 800cee2:	d149      	bne.n	800cf78 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee6:	3334      	adds	r3, #52	; 0x34
 800cee8:	3330      	adds	r3, #48	; 0x30
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fe f818 	bl	800af20 <ld_word>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d140      	bne.n	800cf78 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cef8:	3301      	adds	r3, #1
 800cefa:	4619      	mov	r1, r3
 800cefc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cefe:	f7fe fabf 	bl	800b480 <move_window>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d137      	bne.n	800cf78 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800cf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf10:	3334      	adds	r3, #52	; 0x34
 800cf12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fe f802 	bl	800af20 <ld_word>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	461a      	mov	r2, r3
 800cf20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d127      	bne.n	800cf78 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2a:	3334      	adds	r3, #52	; 0x34
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fe f80f 	bl	800af50 <ld_dword>
 800cf32:	4603      	mov	r3, r0
 800cf34:	4a1d      	ldr	r2, [pc, #116]	; (800cfac <find_volume+0x494>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d11e      	bne.n	800cf78 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3c:	3334      	adds	r3, #52	; 0x34
 800cf3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe f804 	bl	800af50 <ld_dword>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	4a19      	ldr	r2, [pc, #100]	; (800cfb0 <find_volume+0x498>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d113      	bne.n	800cf78 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	3334      	adds	r3, #52	; 0x34
 800cf54:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7fd fff9 	bl	800af50 <ld_dword>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	3334      	adds	r3, #52	; 0x34
 800cf68:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fd ffef 	bl	800af50 <ld_dword>
 800cf72:	4602      	mov	r2, r0
 800cf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf76:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cf7e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cf80:	4b0c      	ldr	r3, [pc, #48]	; (800cfb4 <find_volume+0x49c>)
 800cf82:	881b      	ldrh	r3, [r3, #0]
 800cf84:	3301      	adds	r3, #1
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	4b0a      	ldr	r3, [pc, #40]	; (800cfb4 <find_volume+0x49c>)
 800cf8a:	801a      	strh	r2, [r3, #0]
 800cf8c:	4b09      	ldr	r3, [pc, #36]	; (800cfb4 <find_volume+0x49c>)
 800cf8e:	881a      	ldrh	r2, [r3, #0]
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf96:	4a08      	ldr	r2, [pc, #32]	; (800cfb8 <find_volume+0x4a0>)
 800cf98:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cf9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf9c:	f7fe fa08 	bl	800b3b0 <clear_lock>
#endif
	return FR_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3758      	adds	r7, #88	; 0x58
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	41615252 	.word	0x41615252
 800cfb0:	61417272 	.word	0x61417272
 800cfb4:	2000075c 	.word	0x2000075c
 800cfb8:	20000780 	.word	0x20000780

0800cfbc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cfc6:	2309      	movs	r3, #9
 800cfc8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d01c      	beq.n	800d00a <validate+0x4e>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d018      	beq.n	800d00a <validate+0x4e>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d013      	beq.n	800d00a <validate+0x4e>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	889a      	ldrh	r2, [r3, #4]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	88db      	ldrh	r3, [r3, #6]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d10c      	bne.n	800d00a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	785b      	ldrb	r3, [r3, #1]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fd fef4 	bl	800ade4 <disk_status>
 800cffc:	4603      	mov	r3, r0
 800cffe:	f003 0301 	and.w	r3, r3, #1
 800d002:	2b00      	cmp	r3, #0
 800d004:	d101      	bne.n	800d00a <validate+0x4e>
			res = FR_OK;
 800d006:	2300      	movs	r3, #0
 800d008:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d102      	bne.n	800d016 <validate+0x5a>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	e000      	b.n	800d018 <validate+0x5c>
 800d016:	2300      	movs	r3, #0
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	6013      	str	r3, [r2, #0]
	return res;
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
	...

0800d028 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b088      	sub	sp, #32
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	4613      	mov	r3, r2
 800d034:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d03a:	f107 0310 	add.w	r3, r7, #16
 800d03e:	4618      	mov	r0, r3
 800d040:	f7ff fccf 	bl	800c9e2 <get_ldnumber>
 800d044:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	da01      	bge.n	800d050 <f_mount+0x28>
 800d04c:	230b      	movs	r3, #11
 800d04e:	e02b      	b.n	800d0a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d050:	4a17      	ldr	r2, [pc, #92]	; (800d0b0 <f_mount+0x88>)
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d058:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d005      	beq.n	800d06c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d060:	69b8      	ldr	r0, [r7, #24]
 800d062:	f7fe f9a5 	bl	800b3b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	2200      	movs	r2, #0
 800d06a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	2200      	movs	r2, #0
 800d076:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	490d      	ldr	r1, [pc, #52]	; (800d0b0 <f_mount+0x88>)
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d002      	beq.n	800d08e <f_mount+0x66>
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d001      	beq.n	800d092 <f_mount+0x6a>
 800d08e:	2300      	movs	r3, #0
 800d090:	e00a      	b.n	800d0a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d092:	f107 010c 	add.w	r1, r7, #12
 800d096:	f107 0308 	add.w	r3, r7, #8
 800d09a:	2200      	movs	r2, #0
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff fd3b 	bl	800cb18 <find_volume>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d0a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3720      	adds	r7, #32
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	20000758 	.word	0x20000758

0800d0b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b09a      	sub	sp, #104	; 0x68
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	4613      	mov	r3, r2
 800d0c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <f_open+0x18>
 800d0c8:	2309      	movs	r3, #9
 800d0ca:	e1ad      	b.n	800d428 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d0d4:	79fa      	ldrb	r2, [r7, #7]
 800d0d6:	f107 0110 	add.w	r1, r7, #16
 800d0da:	f107 0308 	add.w	r3, r7, #8
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7ff fd1a 	bl	800cb18 <find_volume>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d0ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f040 8191 	bne.w	800d416 <f_open+0x362>
		dj.obj.fs = fs;
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	f107 0314 	add.w	r3, r7, #20
 800d0fe:	4611      	mov	r1, r2
 800d100:	4618      	mov	r0, r3
 800d102:	f7ff fbfd 	bl	800c900 <follow_path>
 800d106:	4603      	mov	r3, r0
 800d108:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d10c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d110:	2b00      	cmp	r3, #0
 800d112:	d11a      	bne.n	800d14a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d114:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d118:	b25b      	sxtb	r3, r3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	da03      	bge.n	800d126 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d11e:	2306      	movs	r3, #6
 800d120:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d124:	e011      	b.n	800d14a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	f023 0301 	bic.w	r3, r3, #1
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	bf14      	ite	ne
 800d130:	2301      	movne	r3, #1
 800d132:	2300      	moveq	r3, #0
 800d134:	b2db      	uxtb	r3, r3
 800d136:	461a      	mov	r2, r3
 800d138:	f107 0314 	add.w	r3, r7, #20
 800d13c:	4611      	mov	r1, r2
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fd ffee 	bl	800b120 <chk_lock>
 800d144:	4603      	mov	r3, r0
 800d146:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d14a:	79fb      	ldrb	r3, [r7, #7]
 800d14c:	f003 031c 	and.w	r3, r3, #28
 800d150:	2b00      	cmp	r3, #0
 800d152:	d07f      	beq.n	800d254 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d154:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d017      	beq.n	800d18c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d15c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d160:	2b04      	cmp	r3, #4
 800d162:	d10e      	bne.n	800d182 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d164:	f7fe f838 	bl	800b1d8 <enq_lock>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d006      	beq.n	800d17c <f_open+0xc8>
 800d16e:	f107 0314 	add.w	r3, r7, #20
 800d172:	4618      	mov	r0, r3
 800d174:	f7ff f914 	bl	800c3a0 <dir_register>
 800d178:	4603      	mov	r3, r0
 800d17a:	e000      	b.n	800d17e <f_open+0xca>
 800d17c:	2312      	movs	r3, #18
 800d17e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d182:	79fb      	ldrb	r3, [r7, #7]
 800d184:	f043 0308 	orr.w	r3, r3, #8
 800d188:	71fb      	strb	r3, [r7, #7]
 800d18a:	e010      	b.n	800d1ae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d18c:	7ebb      	ldrb	r3, [r7, #26]
 800d18e:	f003 0311 	and.w	r3, r3, #17
 800d192:	2b00      	cmp	r3, #0
 800d194:	d003      	beq.n	800d19e <f_open+0xea>
					res = FR_DENIED;
 800d196:	2307      	movs	r3, #7
 800d198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d19c:	e007      	b.n	800d1ae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d19e:	79fb      	ldrb	r3, [r7, #7]
 800d1a0:	f003 0304 	and.w	r3, r3, #4
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <f_open+0xfa>
 800d1a8:	2308      	movs	r3, #8
 800d1aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d1ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d168      	bne.n	800d288 <f_open+0x1d4>
 800d1b6:	79fb      	ldrb	r3, [r7, #7]
 800d1b8:	f003 0308 	and.w	r3, r3, #8
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d063      	beq.n	800d288 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d1c0:	f7fc fa1c 	bl	80095fc <get_fattime>
 800d1c4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c8:	330e      	adds	r3, #14
 800d1ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fd fefd 	bl	800afcc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d4:	3316      	adds	r3, #22
 800d1d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fd fef7 	bl	800afcc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e0:	330b      	adds	r3, #11
 800d1e2:	2220      	movs	r2, #32
 800d1e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fe fe4e 	bl	800be8e <ld_clust>
 800d1f2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe fe66 	bl	800becc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d202:	331c      	adds	r3, #28
 800d204:	2100      	movs	r1, #0
 800d206:	4618      	mov	r0, r3
 800d208:	f7fd fee0 	bl	800afcc <st_dword>
					fs->wflag = 1;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	2201      	movs	r2, #1
 800d210:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d214:	2b00      	cmp	r3, #0
 800d216:	d037      	beq.n	800d288 <f_open+0x1d4>
						dw = fs->winsect;
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d21c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d21e:	f107 0314 	add.w	r3, r7, #20
 800d222:	2200      	movs	r2, #0
 800d224:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d226:	4618      	mov	r0, r3
 800d228:	f7fe fb79 	bl	800b91e <remove_chain>
 800d22c:	4603      	mov	r3, r0
 800d22e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d232:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d236:	2b00      	cmp	r3, #0
 800d238:	d126      	bne.n	800d288 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fe f91e 	bl	800b480 <move_window>
 800d244:	4603      	mov	r3, r0
 800d246:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d24e:	3a01      	subs	r2, #1
 800d250:	611a      	str	r2, [r3, #16]
 800d252:	e019      	b.n	800d288 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d254:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d115      	bne.n	800d288 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d25c:	7ebb      	ldrb	r3, [r7, #26]
 800d25e:	f003 0310 	and.w	r3, r3, #16
 800d262:	2b00      	cmp	r3, #0
 800d264:	d003      	beq.n	800d26e <f_open+0x1ba>
					res = FR_NO_FILE;
 800d266:	2304      	movs	r3, #4
 800d268:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d26c:	e00c      	b.n	800d288 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d26e:	79fb      	ldrb	r3, [r7, #7]
 800d270:	f003 0302 	and.w	r3, r3, #2
 800d274:	2b00      	cmp	r3, #0
 800d276:	d007      	beq.n	800d288 <f_open+0x1d4>
 800d278:	7ebb      	ldrb	r3, [r7, #26]
 800d27a:	f003 0301 	and.w	r3, r3, #1
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d002      	beq.n	800d288 <f_open+0x1d4>
						res = FR_DENIED;
 800d282:	2307      	movs	r3, #7
 800d284:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d288:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d128      	bne.n	800d2e2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d290:	79fb      	ldrb	r3, [r7, #7]
 800d292:	f003 0308 	and.w	r3, r3, #8
 800d296:	2b00      	cmp	r3, #0
 800d298:	d003      	beq.n	800d2a2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d29a:	79fb      	ldrb	r3, [r7, #7]
 800d29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d2aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d2b0:	79fb      	ldrb	r3, [r7, #7]
 800d2b2:	f023 0301 	bic.w	r3, r3, #1
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bf14      	ite	ne
 800d2ba:	2301      	movne	r3, #1
 800d2bc:	2300      	moveq	r3, #0
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	f107 0314 	add.w	r3, r7, #20
 800d2c6:	4611      	mov	r1, r2
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7fd ffa7 	bl	800b21c <inc_lock>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d102      	bne.n	800d2e2 <f_open+0x22e>
 800d2dc:	2302      	movs	r3, #2
 800d2de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d2e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f040 8095 	bne.w	800d416 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe fdcb 	bl	800be8e <ld_clust>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d300:	331c      	adds	r3, #28
 800d302:	4618      	mov	r0, r3
 800d304:	f7fd fe24 	bl	800af50 <ld_dword>
 800d308:	4602      	mov	r2, r0
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2200      	movs	r2, #0
 800d312:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d314:	693a      	ldr	r2, [r7, #16]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	88da      	ldrh	r2, [r3, #6]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	79fa      	ldrb	r2, [r7, #7]
 800d326:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2200      	movs	r2, #0
 800d332:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	3330      	adds	r3, #48	; 0x30
 800d33e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d342:	2100      	movs	r1, #0
 800d344:	4618      	mov	r0, r3
 800d346:	f7fd fe8e 	bl	800b066 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d34a:	79fb      	ldrb	r3, [r7, #7]
 800d34c:	f003 0320 	and.w	r3, r3, #32
 800d350:	2b00      	cmp	r3, #0
 800d352:	d060      	beq.n	800d416 <f_open+0x362>
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d05c      	beq.n	800d416 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	68da      	ldr	r2, [r3, #12]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	895b      	ldrh	r3, [r3, #10]
 800d368:	025b      	lsls	r3, r3, #9
 800d36a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d378:	e016      	b.n	800d3a8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe f939 	bl	800b5f6 <get_fat>
 800d384:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d802      	bhi.n	800d392 <f_open+0x2de>
 800d38c:	2302      	movs	r3, #2
 800d38e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d398:	d102      	bne.n	800d3a0 <f_open+0x2ec>
 800d39a:	2301      	movs	r3, #1
 800d39c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d3a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d103      	bne.n	800d3b8 <f_open+0x304>
 800d3b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d8e0      	bhi.n	800d37a <f_open+0x2c6>
				}
				fp->clust = clst;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d3bc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d3be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d127      	bne.n	800d416 <f_open+0x362>
 800d3c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d022      	beq.n	800d416 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fe f8ef 	bl	800b5b8 <clust2sect>
 800d3da:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d103      	bne.n	800d3ea <f_open+0x336>
						res = FR_INT_ERR;
 800d3e2:	2302      	movs	r3, #2
 800d3e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d3e8:	e015      	b.n	800d416 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d3ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3ec:	0a5a      	lsrs	r2, r3, #9
 800d3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3f0:	441a      	add	r2, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	7858      	ldrb	r0, [r3, #1]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6a1a      	ldr	r2, [r3, #32]
 800d404:	2301      	movs	r3, #1
 800d406:	f7fd fd2d 	bl	800ae64 <disk_read>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <f_open+0x362>
 800d410:	2301      	movs	r3, #1
 800d412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d416:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <f_open+0x370>
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2200      	movs	r2, #0
 800d422:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d424:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3768      	adds	r7, #104	; 0x68
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b08e      	sub	sp, #56	; 0x38
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
 800d43c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	2200      	movs	r2, #0
 800d446:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f107 0214 	add.w	r2, r7, #20
 800d44e:	4611      	mov	r1, r2
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff fdb3 	bl	800cfbc <validate>
 800d456:	4603      	mov	r3, r0
 800d458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d45c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d460:	2b00      	cmp	r3, #0
 800d462:	d107      	bne.n	800d474 <f_read+0x44>
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	7d5b      	ldrb	r3, [r3, #21]
 800d468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d46c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d470:	2b00      	cmp	r3, #0
 800d472:	d002      	beq.n	800d47a <f_read+0x4a>
 800d474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d478:	e115      	b.n	800d6a6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	7d1b      	ldrb	r3, [r3, #20]
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <f_read+0x5a>
 800d486:	2307      	movs	r3, #7
 800d488:	e10d      	b.n	800d6a6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	68da      	ldr	r2, [r3, #12]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	699b      	ldr	r3, [r3, #24]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	f240 80fe 	bls.w	800d69c <f_read+0x26c>
 800d4a0:	6a3b      	ldr	r3, [r7, #32]
 800d4a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d4a4:	e0fa      	b.n	800d69c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	699b      	ldr	r3, [r3, #24]
 800d4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f040 80c6 	bne.w	800d640 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	699b      	ldr	r3, [r3, #24]
 800d4b8:	0a5b      	lsrs	r3, r3, #9
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	8952      	ldrh	r2, [r2, #10]
 800d4be:	3a01      	subs	r2, #1
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d12f      	bne.n	800d52a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	699b      	ldr	r3, [r3, #24]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d103      	bne.n	800d4da <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	633b      	str	r3, [r7, #48]	; 0x30
 800d4d8:	e013      	b.n	800d502 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d007      	beq.n	800d4f2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	699b      	ldr	r3, [r3, #24]
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f7fe fb15 	bl	800bb18 <clmt_clust>
 800d4ee:	6338      	str	r0, [r7, #48]	; 0x30
 800d4f0:	e007      	b.n	800d502 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	69db      	ldr	r3, [r3, #28]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	f7fe f87b 	bl	800b5f6 <get_fat>
 800d500:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	2b01      	cmp	r3, #1
 800d506:	d804      	bhi.n	800d512 <f_read+0xe2>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2202      	movs	r2, #2
 800d50c:	755a      	strb	r2, [r3, #21]
 800d50e:	2302      	movs	r3, #2
 800d510:	e0c9      	b.n	800d6a6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d518:	d104      	bne.n	800d524 <f_read+0xf4>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2201      	movs	r2, #1
 800d51e:	755a      	strb	r2, [r3, #21]
 800d520:	2301      	movs	r3, #1
 800d522:	e0c0      	b.n	800d6a6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d528:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d52a:	697a      	ldr	r2, [r7, #20]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	69db      	ldr	r3, [r3, #28]
 800d530:	4619      	mov	r1, r3
 800d532:	4610      	mov	r0, r2
 800d534:	f7fe f840 	bl	800b5b8 <clust2sect>
 800d538:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d104      	bne.n	800d54a <f_read+0x11a>
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2202      	movs	r2, #2
 800d544:	755a      	strb	r2, [r3, #21]
 800d546:	2302      	movs	r3, #2
 800d548:	e0ad      	b.n	800d6a6 <f_read+0x276>
			sect += csect;
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	4413      	add	r3, r2
 800d550:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	0a5b      	lsrs	r3, r3, #9
 800d556:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d039      	beq.n	800d5d2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d55e:	69fa      	ldr	r2, [r7, #28]
 800d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d562:	4413      	add	r3, r2
 800d564:	697a      	ldr	r2, [r7, #20]
 800d566:	8952      	ldrh	r2, [r2, #10]
 800d568:	4293      	cmp	r3, r2
 800d56a:	d905      	bls.n	800d578 <f_read+0x148>
					cc = fs->csize - csect;
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	895b      	ldrh	r3, [r3, #10]
 800d570:	461a      	mov	r2, r3
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	7858      	ldrb	r0, [r3, #1]
 800d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57e:	69ba      	ldr	r2, [r7, #24]
 800d580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d582:	f7fd fc6f 	bl	800ae64 <disk_read>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d004      	beq.n	800d596 <f_read+0x166>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2201      	movs	r2, #1
 800d590:	755a      	strb	r2, [r3, #21]
 800d592:	2301      	movs	r3, #1
 800d594:	e087      	b.n	800d6a6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	7d1b      	ldrb	r3, [r3, #20]
 800d59a:	b25b      	sxtb	r3, r3
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	da14      	bge.n	800d5ca <f_read+0x19a>
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	6a1a      	ldr	r2, [r3, #32]
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d90d      	bls.n	800d5ca <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6a1a      	ldr	r2, [r3, #32]
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	025b      	lsls	r3, r3, #9
 800d5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ba:	18d0      	adds	r0, r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	3330      	adds	r3, #48	; 0x30
 800d5c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	f7fd fd2d 	bl	800b024 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5cc:	025b      	lsls	r3, r3, #9
 800d5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d5d0:	e050      	b.n	800d674 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	6a1b      	ldr	r3, [r3, #32]
 800d5d6:	69ba      	ldr	r2, [r7, #24]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d02e      	beq.n	800d63a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	7d1b      	ldrb	r3, [r3, #20]
 800d5e0:	b25b      	sxtb	r3, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	da18      	bge.n	800d618 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	7858      	ldrb	r0, [r3, #1]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6a1a      	ldr	r2, [r3, #32]
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	f7fd fc55 	bl	800aea4 <disk_write>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d004      	beq.n	800d60a <f_read+0x1da>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2201      	movs	r2, #1
 800d604:	755a      	strb	r2, [r3, #21]
 800d606:	2301      	movs	r3, #1
 800d608:	e04d      	b.n	800d6a6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	7d1b      	ldrb	r3, [r3, #20]
 800d60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d612:	b2da      	uxtb	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	7858      	ldrb	r0, [r3, #1]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d622:	2301      	movs	r3, #1
 800d624:	69ba      	ldr	r2, [r7, #24]
 800d626:	f7fd fc1d 	bl	800ae64 <disk_read>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d004      	beq.n	800d63a <f_read+0x20a>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2201      	movs	r2, #1
 800d634:	755a      	strb	r2, [r3, #21]
 800d636:	2301      	movs	r3, #1
 800d638:	e035      	b.n	800d6a6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	69ba      	ldr	r2, [r7, #24]
 800d63e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	699b      	ldr	r3, [r3, #24]
 800d644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d648:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d64c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d64e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	429a      	cmp	r2, r3
 800d654:	d901      	bls.n	800d65a <f_read+0x22a>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	699b      	ldr	r3, [r3, #24]
 800d664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d668:	4413      	add	r3, r2
 800d66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d66c:	4619      	mov	r1, r3
 800d66e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d670:	f7fd fcd8 	bl	800b024 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d678:	4413      	add	r3, r2
 800d67a:	627b      	str	r3, [r7, #36]	; 0x24
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	699a      	ldr	r2, [r3, #24]
 800d680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d682:	441a      	add	r2, r3
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	619a      	str	r2, [r3, #24]
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	441a      	add	r2, r3
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d698:	1ad3      	subs	r3, r2, r3
 800d69a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f47f af01 	bne.w	800d4a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3738      	adds	r7, #56	; 0x38
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b086      	sub	sp, #24
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f107 0208 	add.w	r2, r7, #8
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7ff fc7c 	bl	800cfbc <validate>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6c8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d168      	bne.n	800d7a0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	7d1b      	ldrb	r3, [r3, #20]
 800d6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d062      	beq.n	800d7a0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7d1b      	ldrb	r3, [r3, #20]
 800d6de:	b25b      	sxtb	r3, r3
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	da15      	bge.n	800d710 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	7858      	ldrb	r0, [r3, #1]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6a1a      	ldr	r2, [r3, #32]
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	f7fd fbd6 	bl	800aea4 <disk_write>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <f_sync+0x54>
 800d6fe:	2301      	movs	r3, #1
 800d700:	e04f      	b.n	800d7a2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	7d1b      	ldrb	r3, [r3, #20]
 800d706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d710:	f7fb ff74 	bl	80095fc <get_fattime>
 800d714:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71c:	4619      	mov	r1, r3
 800d71e:	4610      	mov	r0, r2
 800d720:	f7fd feae 	bl	800b480 <move_window>
 800d724:	4603      	mov	r3, r0
 800d726:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d728:	7dfb      	ldrb	r3, [r7, #23]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d138      	bne.n	800d7a0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d732:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	330b      	adds	r3, #11
 800d738:	781a      	ldrb	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	330b      	adds	r3, #11
 800d73e:	f042 0220 	orr.w	r2, r2, #32
 800d742:	b2d2      	uxtb	r2, r2
 800d744:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6818      	ldr	r0, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	461a      	mov	r2, r3
 800d750:	68f9      	ldr	r1, [r7, #12]
 800d752:	f7fe fbbb 	bl	800becc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f103 021c 	add.w	r2, r3, #28
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	4619      	mov	r1, r3
 800d762:	4610      	mov	r0, r2
 800d764:	f7fd fc32 	bl	800afcc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	3316      	adds	r3, #22
 800d76c:	6939      	ldr	r1, [r7, #16]
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fd fc2c 	bl	800afcc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3312      	adds	r3, #18
 800d778:	2100      	movs	r1, #0
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fd fc0b 	bl	800af96 <st_word>
					fs->wflag = 1;
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2201      	movs	r2, #1
 800d784:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	4618      	mov	r0, r3
 800d78a:	f7fd fea7 	bl	800b4dc <sync_fs>
 800d78e:	4603      	mov	r3, r0
 800d790:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	7d1b      	ldrb	r3, [r3, #20]
 800d796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3718      	adds	r7, #24
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b084      	sub	sp, #16
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff ff7b 	bl	800d6ae <f_sync>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d118      	bne.n	800d7f4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f107 0208 	add.w	r2, r7, #8
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff fbf6 	bl	800cfbc <validate>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d7d4:	7bfb      	ldrb	r3, [r7, #15]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10c      	bne.n	800d7f4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fd fdaa 	bl	800b338 <dec_lock>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d102      	bne.n	800d7f4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
	...

0800d800 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d800:	b480      	push	{r7}
 800d802:	b087      	sub	sp, #28
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	4613      	mov	r3, r2
 800d80c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d80e:	2301      	movs	r3, #1
 800d810:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d812:	2300      	movs	r3, #0
 800d814:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d816:	4b1f      	ldr	r3, [pc, #124]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d818:	7a5b      	ldrb	r3, [r3, #9]
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d131      	bne.n	800d884 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d820:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d822:	7a5b      	ldrb	r3, [r3, #9]
 800d824:	b2db      	uxtb	r3, r3
 800d826:	461a      	mov	r2, r3
 800d828:	4b1a      	ldr	r3, [pc, #104]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d82a:	2100      	movs	r1, #0
 800d82c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d82e:	4b19      	ldr	r3, [pc, #100]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d830:	7a5b      	ldrb	r3, [r3, #9]
 800d832:	b2db      	uxtb	r3, r3
 800d834:	4a17      	ldr	r2, [pc, #92]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	4413      	add	r3, r2
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d83e:	4b15      	ldr	r3, [pc, #84]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d840:	7a5b      	ldrb	r3, [r3, #9]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	461a      	mov	r2, r3
 800d846:	4b13      	ldr	r3, [pc, #76]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d848:	4413      	add	r3, r2
 800d84a:	79fa      	ldrb	r2, [r7, #7]
 800d84c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d84e:	4b11      	ldr	r3, [pc, #68]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d850:	7a5b      	ldrb	r3, [r3, #9]
 800d852:	b2db      	uxtb	r3, r3
 800d854:	1c5a      	adds	r2, r3, #1
 800d856:	b2d1      	uxtb	r1, r2
 800d858:	4a0e      	ldr	r2, [pc, #56]	; (800d894 <FATFS_LinkDriverEx+0x94>)
 800d85a:	7251      	strb	r1, [r2, #9]
 800d85c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d85e:	7dbb      	ldrb	r3, [r7, #22]
 800d860:	3330      	adds	r3, #48	; 0x30
 800d862:	b2da      	uxtb	r2, r3
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	3301      	adds	r3, #1
 800d86c:	223a      	movs	r2, #58	; 0x3a
 800d86e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	3302      	adds	r3, #2
 800d874:	222f      	movs	r2, #47	; 0x2f
 800d876:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	3303      	adds	r3, #3
 800d87c:	2200      	movs	r2, #0
 800d87e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d880:	2300      	movs	r3, #0
 800d882:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d884:	7dfb      	ldrb	r3, [r7, #23]
}
 800d886:	4618      	mov	r0, r3
 800d888:	371c      	adds	r7, #28
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	20000980 	.word	0x20000980

0800d898 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	6839      	ldr	r1, [r7, #0]
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff ffaa 	bl	800d800 <FATFS_LinkDriverEx>
 800d8ac:	4603      	mov	r3, r0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
	...

0800d8b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	6039      	str	r1, [r7, #0]
 800d8c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d8c4:	88fb      	ldrh	r3, [r7, #6]
 800d8c6:	2b7f      	cmp	r3, #127	; 0x7f
 800d8c8:	d802      	bhi.n	800d8d0 <ff_convert+0x18>
		c = chr;
 800d8ca:	88fb      	ldrh	r3, [r7, #6]
 800d8cc:	81fb      	strh	r3, [r7, #14]
 800d8ce:	e025      	b.n	800d91c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00b      	beq.n	800d8ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d8d6:	88fb      	ldrh	r3, [r7, #6]
 800d8d8:	2bff      	cmp	r3, #255	; 0xff
 800d8da:	d805      	bhi.n	800d8e8 <ff_convert+0x30>
 800d8dc:	88fb      	ldrh	r3, [r7, #6]
 800d8de:	3b80      	subs	r3, #128	; 0x80
 800d8e0:	4a12      	ldr	r2, [pc, #72]	; (800d92c <ff_convert+0x74>)
 800d8e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8e6:	e000      	b.n	800d8ea <ff_convert+0x32>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	81fb      	strh	r3, [r7, #14]
 800d8ec:	e016      	b.n	800d91c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	81fb      	strh	r3, [r7, #14]
 800d8f2:	e009      	b.n	800d908 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d8f4:	89fb      	ldrh	r3, [r7, #14]
 800d8f6:	4a0d      	ldr	r2, [pc, #52]	; (800d92c <ff_convert+0x74>)
 800d8f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8fc:	88fa      	ldrh	r2, [r7, #6]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d006      	beq.n	800d910 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d902:	89fb      	ldrh	r3, [r7, #14]
 800d904:	3301      	adds	r3, #1
 800d906:	81fb      	strh	r3, [r7, #14]
 800d908:	89fb      	ldrh	r3, [r7, #14]
 800d90a:	2b7f      	cmp	r3, #127	; 0x7f
 800d90c:	d9f2      	bls.n	800d8f4 <ff_convert+0x3c>
 800d90e:	e000      	b.n	800d912 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d910:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d912:	89fb      	ldrh	r3, [r7, #14]
 800d914:	3380      	adds	r3, #128	; 0x80
 800d916:	b29b      	uxth	r3, r3
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d91c:	89fb      	ldrh	r3, [r7, #14]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3714      	adds	r7, #20
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	08013b44 	.word	0x08013b44

0800d930 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d930:	b480      	push	{r7}
 800d932:	b087      	sub	sp, #28
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d93a:	88fb      	ldrh	r3, [r7, #6]
 800d93c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d940:	d201      	bcs.n	800d946 <ff_wtoupper+0x16>
 800d942:	4b3e      	ldr	r3, [pc, #248]	; (800da3c <ff_wtoupper+0x10c>)
 800d944:	e000      	b.n	800d948 <ff_wtoupper+0x18>
 800d946:	4b3e      	ldr	r3, [pc, #248]	; (800da40 <ff_wtoupper+0x110>)
 800d948:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	1c9a      	adds	r2, r3, #2
 800d94e:	617a      	str	r2, [r7, #20]
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d954:	8a7b      	ldrh	r3, [r7, #18]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d068      	beq.n	800da2c <ff_wtoupper+0xfc>
 800d95a:	88fa      	ldrh	r2, [r7, #6]
 800d95c:	8a7b      	ldrh	r3, [r7, #18]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d364      	bcc.n	800da2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	1c9a      	adds	r2, r3, #2
 800d966:	617a      	str	r2, [r7, #20]
 800d968:	881b      	ldrh	r3, [r3, #0]
 800d96a:	823b      	strh	r3, [r7, #16]
 800d96c:	8a3b      	ldrh	r3, [r7, #16]
 800d96e:	0a1b      	lsrs	r3, r3, #8
 800d970:	81fb      	strh	r3, [r7, #14]
 800d972:	8a3b      	ldrh	r3, [r7, #16]
 800d974:	b2db      	uxtb	r3, r3
 800d976:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d978:	88fa      	ldrh	r2, [r7, #6]
 800d97a:	8a79      	ldrh	r1, [r7, #18]
 800d97c:	8a3b      	ldrh	r3, [r7, #16]
 800d97e:	440b      	add	r3, r1
 800d980:	429a      	cmp	r2, r3
 800d982:	da49      	bge.n	800da18 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d984:	89fb      	ldrh	r3, [r7, #14]
 800d986:	2b08      	cmp	r3, #8
 800d988:	d84f      	bhi.n	800da2a <ff_wtoupper+0xfa>
 800d98a:	a201      	add	r2, pc, #4	; (adr r2, 800d990 <ff_wtoupper+0x60>)
 800d98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d990:	0800d9b5 	.word	0x0800d9b5
 800d994:	0800d9c7 	.word	0x0800d9c7
 800d998:	0800d9dd 	.word	0x0800d9dd
 800d99c:	0800d9e5 	.word	0x0800d9e5
 800d9a0:	0800d9ed 	.word	0x0800d9ed
 800d9a4:	0800d9f5 	.word	0x0800d9f5
 800d9a8:	0800d9fd 	.word	0x0800d9fd
 800d9ac:	0800da05 	.word	0x0800da05
 800d9b0:	0800da0d 	.word	0x0800da0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d9b4:	88fa      	ldrh	r2, [r7, #6]
 800d9b6:	8a7b      	ldrh	r3, [r7, #18]
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	005b      	lsls	r3, r3, #1
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	4413      	add	r3, r2
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	80fb      	strh	r3, [r7, #6]
 800d9c4:	e027      	b.n	800da16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d9c6:	88fa      	ldrh	r2, [r7, #6]
 800d9c8:	8a7b      	ldrh	r3, [r7, #18]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	88fa      	ldrh	r2, [r7, #6]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	80fb      	strh	r3, [r7, #6]
 800d9da:	e01c      	b.n	800da16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d9dc:	88fb      	ldrh	r3, [r7, #6]
 800d9de:	3b10      	subs	r3, #16
 800d9e0:	80fb      	strh	r3, [r7, #6]
 800d9e2:	e018      	b.n	800da16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d9e4:	88fb      	ldrh	r3, [r7, #6]
 800d9e6:	3b20      	subs	r3, #32
 800d9e8:	80fb      	strh	r3, [r7, #6]
 800d9ea:	e014      	b.n	800da16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d9ec:	88fb      	ldrh	r3, [r7, #6]
 800d9ee:	3b30      	subs	r3, #48	; 0x30
 800d9f0:	80fb      	strh	r3, [r7, #6]
 800d9f2:	e010      	b.n	800da16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d9f4:	88fb      	ldrh	r3, [r7, #6]
 800d9f6:	3b1a      	subs	r3, #26
 800d9f8:	80fb      	strh	r3, [r7, #6]
 800d9fa:	e00c      	b.n	800da16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d9fc:	88fb      	ldrh	r3, [r7, #6]
 800d9fe:	3308      	adds	r3, #8
 800da00:	80fb      	strh	r3, [r7, #6]
 800da02:	e008      	b.n	800da16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800da04:	88fb      	ldrh	r3, [r7, #6]
 800da06:	3b50      	subs	r3, #80	; 0x50
 800da08:	80fb      	strh	r3, [r7, #6]
 800da0a:	e004      	b.n	800da16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800da0c:	88fb      	ldrh	r3, [r7, #6]
 800da0e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800da12:	80fb      	strh	r3, [r7, #6]
 800da14:	bf00      	nop
			}
			break;
 800da16:	e008      	b.n	800da2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800da18:	89fb      	ldrh	r3, [r7, #14]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d195      	bne.n	800d94a <ff_wtoupper+0x1a>
 800da1e:	8a3b      	ldrh	r3, [r7, #16]
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	697a      	ldr	r2, [r7, #20]
 800da24:	4413      	add	r3, r2
 800da26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800da28:	e78f      	b.n	800d94a <ff_wtoupper+0x1a>
			break;
 800da2a:	bf00      	nop
	}

	return chr;
 800da2c:	88fb      	ldrh	r3, [r7, #6]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	371c      	adds	r7, #28
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	08013c44 	.word	0x08013c44
 800da40:	08013e38 	.word	0x08013e38

0800da44 <MX_USB_DEVICE_Init>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_Init(void) {
 800da44:	b580      	push	{r7, lr}
 800da46:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    /* USER CODE END USB_DEVICE_Init_PreTreatment */

    /* Init Device Library, add supported class and start the library. */
    if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800da48:	2200      	movs	r2, #0
 800da4a:	4912      	ldr	r1, [pc, #72]	; (800da94 <MX_USB_DEVICE_Init+0x50>)
 800da4c:	4812      	ldr	r0, [pc, #72]	; (800da98 <MX_USB_DEVICE_Init+0x54>)
 800da4e:	f7fc f87e 	bl	8009b4e <USBD_Init>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <MX_USB_DEVICE_Init+0x18>
        Error_Handler();
 800da58:	f7f3 fe88 	bl	800176c <Error_Handler>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_Midi_ClassDriver) != USBD_OK) {
 800da5c:	490f      	ldr	r1, [pc, #60]	; (800da9c <MX_USB_DEVICE_Init+0x58>)
 800da5e:	480e      	ldr	r0, [pc, #56]	; (800da98 <MX_USB_DEVICE_Init+0x54>)
 800da60:	f7fc f8a5 	bl	8009bae <USBD_RegisterClass>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <MX_USB_DEVICE_Init+0x2a>
        Error_Handler();
 800da6a:	f7f3 fe7f 	bl	800176c <Error_Handler>
    }
    if (USBD_Midi_RegisterInterface(&hUsbDeviceFS, &USBD_Midi_fops) != USBD_OK) {
 800da6e:	490c      	ldr	r1, [pc, #48]	; (800daa0 <MX_USB_DEVICE_Init+0x5c>)
 800da70:	4809      	ldr	r0, [pc, #36]	; (800da98 <MX_USB_DEVICE_Init+0x54>)
 800da72:	f7fc f855 	bl	8009b20 <USBD_Midi_RegisterInterface>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d001      	beq.n	800da80 <MX_USB_DEVICE_Init+0x3c>
        Error_Handler();
 800da7c:	f7f3 fe76 	bl	800176c <Error_Handler>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800da80:	4805      	ldr	r0, [pc, #20]	; (800da98 <MX_USB_DEVICE_Init+0x54>)
 800da82:	f7fc f8bb 	bl	8009bfc <USBD_Start>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <MX_USB_DEVICE_Init+0x4c>
        Error_Handler();
 800da8c:	f7f3 fe6e 	bl	800176c <Error_Handler>
    }

    /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

    /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800da90:	bf00      	nop
 800da92:	bd80      	pop	{r7, pc}
 800da94:	200000e8 	.word	0x200000e8
 800da98:	20002fdc 	.word	0x20002fdc
 800da9c:	2000003c 	.word	0x2000003c
 800daa0:	20000138 	.word	0x20000138

0800daa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	4603      	mov	r3, r0
 800daac:	6039      	str	r1, [r7, #0]
 800daae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	2212      	movs	r2, #18
 800dab4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dab6:	4b03      	ldr	r3, [pc, #12]	; (800dac4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dab8:	4618      	mov	r0, r3
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr
 800dac4:	20000104 	.word	0x20000104

0800dac8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	4603      	mov	r3, r0
 800dad0:	6039      	str	r1, [r7, #0]
 800dad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	2204      	movs	r2, #4
 800dad8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dada:	4b03      	ldr	r3, [pc, #12]	; (800dae8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dadc:	4618      	mov	r0, r3
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	20000118 	.word	0x20000118

0800daec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	4603      	mov	r3, r0
 800daf4:	6039      	str	r1, [r7, #0]
 800daf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d105      	bne.n	800db0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dafe:	683a      	ldr	r2, [r7, #0]
 800db00:	4907      	ldr	r1, [pc, #28]	; (800db20 <USBD_FS_ProductStrDescriptor+0x34>)
 800db02:	4808      	ldr	r0, [pc, #32]	; (800db24 <USBD_FS_ProductStrDescriptor+0x38>)
 800db04:	f7fd f8ab 	bl	800ac5e <USBD_GetString>
 800db08:	e004      	b.n	800db14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800db0a:	683a      	ldr	r2, [r7, #0]
 800db0c:	4904      	ldr	r1, [pc, #16]	; (800db20 <USBD_FS_ProductStrDescriptor+0x34>)
 800db0e:	4805      	ldr	r0, [pc, #20]	; (800db24 <USBD_FS_ProductStrDescriptor+0x38>)
 800db10:	f7fd f8a5 	bl	800ac5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800db14:	4b02      	ldr	r3, [pc, #8]	; (800db20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	200032ac 	.word	0x200032ac
 800db24:	08012768 	.word	0x08012768

0800db28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	4603      	mov	r3, r0
 800db30:	6039      	str	r1, [r7, #0]
 800db32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	4904      	ldr	r1, [pc, #16]	; (800db48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800db38:	4804      	ldr	r0, [pc, #16]	; (800db4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800db3a:	f7fd f890 	bl	800ac5e <USBD_GetString>
  return USBD_StrDesc;
 800db3e:	4b02      	ldr	r3, [pc, #8]	; (800db48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800db40:	4618      	mov	r0, r3
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	200032ac 	.word	0x200032ac
 800db4c:	0801277c 	.word	0x0801277c

0800db50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	4603      	mov	r3, r0
 800db58:	6039      	str	r1, [r7, #0]
 800db5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	221a      	movs	r2, #26
 800db60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800db62:	f000 f843 	bl	800dbec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800db66:	4b02      	ldr	r3, [pc, #8]	; (800db70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	2000011c 	.word	0x2000011c

0800db74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	4603      	mov	r3, r0
 800db7c:	6039      	str	r1, [r7, #0]
 800db7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800db80:	79fb      	ldrb	r3, [r7, #7]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d105      	bne.n	800db92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	4907      	ldr	r1, [pc, #28]	; (800dba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800db8a:	4808      	ldr	r0, [pc, #32]	; (800dbac <USBD_FS_ConfigStrDescriptor+0x38>)
 800db8c:	f7fd f867 	bl	800ac5e <USBD_GetString>
 800db90:	e004      	b.n	800db9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	4904      	ldr	r1, [pc, #16]	; (800dba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800db96:	4805      	ldr	r0, [pc, #20]	; (800dbac <USBD_FS_ConfigStrDescriptor+0x38>)
 800db98:	f7fd f861 	bl	800ac5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800db9c:	4b02      	ldr	r3, [pc, #8]	; (800dba8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	200032ac 	.word	0x200032ac
 800dbac:	08012790 	.word	0x08012790

0800dbb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	6039      	str	r1, [r7, #0]
 800dbba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbbc:	79fb      	ldrb	r3, [r7, #7]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d105      	bne.n	800dbce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	4907      	ldr	r1, [pc, #28]	; (800dbe4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dbc6:	4808      	ldr	r0, [pc, #32]	; (800dbe8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dbc8:	f7fd f849 	bl	800ac5e <USBD_GetString>
 800dbcc:	e004      	b.n	800dbd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dbce:	683a      	ldr	r2, [r7, #0]
 800dbd0:	4904      	ldr	r1, [pc, #16]	; (800dbe4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dbd2:	4805      	ldr	r0, [pc, #20]	; (800dbe8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dbd4:	f7fd f843 	bl	800ac5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbd8:	4b02      	ldr	r3, [pc, #8]	; (800dbe4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	200032ac 	.word	0x200032ac
 800dbe8:	080127a0 	.word	0x080127a0

0800dbec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dbf2:	4b0f      	ldr	r3, [pc, #60]	; (800dc30 <Get_SerialNum+0x44>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dbf8:	4b0e      	ldr	r3, [pc, #56]	; (800dc34 <Get_SerialNum+0x48>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dbfe:	4b0e      	ldr	r3, [pc, #56]	; (800dc38 <Get_SerialNum+0x4c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc04:	68fa      	ldr	r2, [r7, #12]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4413      	add	r3, r2
 800dc0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d009      	beq.n	800dc26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc12:	2208      	movs	r2, #8
 800dc14:	4909      	ldr	r1, [pc, #36]	; (800dc3c <Get_SerialNum+0x50>)
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f000 f814 	bl	800dc44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc1c:	2204      	movs	r2, #4
 800dc1e:	4908      	ldr	r1, [pc, #32]	; (800dc40 <Get_SerialNum+0x54>)
 800dc20:	68b8      	ldr	r0, [r7, #8]
 800dc22:	f000 f80f 	bl	800dc44 <IntToUnicode>
  }
}
 800dc26:	bf00      	nop
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	1fff7a10 	.word	0x1fff7a10
 800dc34:	1fff7a14 	.word	0x1fff7a14
 800dc38:	1fff7a18 	.word	0x1fff7a18
 800dc3c:	2000011e 	.word	0x2000011e
 800dc40:	2000012e 	.word	0x2000012e

0800dc44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b087      	sub	sp, #28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dc52:	2300      	movs	r3, #0
 800dc54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dc56:	2300      	movs	r3, #0
 800dc58:	75fb      	strb	r3, [r7, #23]
 800dc5a:	e027      	b.n	800dcac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	0f1b      	lsrs	r3, r3, #28
 800dc60:	2b09      	cmp	r3, #9
 800dc62:	d80b      	bhi.n	800dc7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	0f1b      	lsrs	r3, r3, #28
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
 800dc6c:	005b      	lsls	r3, r3, #1
 800dc6e:	4619      	mov	r1, r3
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	440b      	add	r3, r1
 800dc74:	3230      	adds	r2, #48	; 0x30
 800dc76:	b2d2      	uxtb	r2, r2
 800dc78:	701a      	strb	r2, [r3, #0]
 800dc7a:	e00a      	b.n	800dc92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	0f1b      	lsrs	r3, r3, #28
 800dc80:	b2da      	uxtb	r2, r3
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
 800dc84:	005b      	lsls	r3, r3, #1
 800dc86:	4619      	mov	r1, r3
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	440b      	add	r3, r1
 800dc8c:	3237      	adds	r2, #55	; 0x37
 800dc8e:	b2d2      	uxtb	r2, r2
 800dc90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	011b      	lsls	r3, r3, #4
 800dc96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc98:	7dfb      	ldrb	r3, [r7, #23]
 800dc9a:	005b      	lsls	r3, r3, #1
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	4413      	add	r3, r2
 800dca2:	2200      	movs	r2, #0
 800dca4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dca6:	7dfb      	ldrb	r3, [r7, #23]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	75fb      	strb	r3, [r7, #23]
 800dcac:	7dfa      	ldrb	r2, [r7, #23]
 800dcae:	79fb      	ldrb	r3, [r7, #7]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d3d3      	bcc.n	800dc5c <IntToUnicode+0x18>
  }
}
 800dcb4:	bf00      	nop
 800dcb6:	bf00      	nop
 800dcb8:	371c      	adds	r7, #28
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr

0800dcc2 <Midi_Receive>:
extern USBD_HandleTypeDef USBD_Device;
USBD_Midi_ItfTypeDef USBD_Midi_fops = {
	Midi_Receive,
};

static int8_t Midi_Receive(uint8_t *msg, uint32_t len) {
 800dcc2:	b480      	push	{r7}
 800dcc4:	b083      	sub	sp, #12
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
 800dcca:	6039      	str	r1, [r7, #0]
		break;
	default:
		break;
	}
*/
	return 0;
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	370c      	adds	r7, #12
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
	...

0800dcdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b08a      	sub	sp, #40	; 0x28
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dce4:	f107 0314 	add.w	r3, r7, #20
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	605a      	str	r2, [r3, #4]
 800dcee:	609a      	str	r2, [r3, #8]
 800dcf0:	60da      	str	r2, [r3, #12]
 800dcf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dcfc:	d13a      	bne.n	800dd74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dcfe:	2300      	movs	r3, #0
 800dd00:	613b      	str	r3, [r7, #16]
 800dd02:	4b1e      	ldr	r3, [pc, #120]	; (800dd7c <HAL_PCD_MspInit+0xa0>)
 800dd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd06:	4a1d      	ldr	r2, [pc, #116]	; (800dd7c <HAL_PCD_MspInit+0xa0>)
 800dd08:	f043 0301 	orr.w	r3, r3, #1
 800dd0c:	6313      	str	r3, [r2, #48]	; 0x30
 800dd0e:	4b1b      	ldr	r3, [pc, #108]	; (800dd7c <HAL_PCD_MspInit+0xa0>)
 800dd10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd12:	f003 0301 	and.w	r3, r3, #1
 800dd16:	613b      	str	r3, [r7, #16]
 800dd18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800dd1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dd1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd20:	2302      	movs	r3, #2
 800dd22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd24:	2300      	movs	r3, #0
 800dd26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dd2c:	230a      	movs	r3, #10
 800dd2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd30:	f107 0314 	add.w	r3, r7, #20
 800dd34:	4619      	mov	r1, r3
 800dd36:	4812      	ldr	r0, [pc, #72]	; (800dd80 <HAL_PCD_MspInit+0xa4>)
 800dd38:	f7f5 fb0e 	bl	8003358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dd3c:	4b0f      	ldr	r3, [pc, #60]	; (800dd7c <HAL_PCD_MspInit+0xa0>)
 800dd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd40:	4a0e      	ldr	r2, [pc, #56]	; (800dd7c <HAL_PCD_MspInit+0xa0>)
 800dd42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd46:	6353      	str	r3, [r2, #52]	; 0x34
 800dd48:	2300      	movs	r3, #0
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	4b0b      	ldr	r3, [pc, #44]	; (800dd7c <HAL_PCD_MspInit+0xa0>)
 800dd4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd50:	4a0a      	ldr	r2, [pc, #40]	; (800dd7c <HAL_PCD_MspInit+0xa0>)
 800dd52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd56:	6453      	str	r3, [r2, #68]	; 0x44
 800dd58:	4b08      	ldr	r3, [pc, #32]	; (800dd7c <HAL_PCD_MspInit+0xa0>)
 800dd5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd60:	60fb      	str	r3, [r7, #12]
 800dd62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dd64:	2200      	movs	r2, #0
 800dd66:	2100      	movs	r1, #0
 800dd68:	2043      	movs	r0, #67	; 0x43
 800dd6a:	f7f5 fabe 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dd6e:	2043      	movs	r0, #67	; 0x43
 800dd70:	f7f5 fad7 	bl	8003322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dd74:	bf00      	nop
 800dd76:	3728      	adds	r7, #40	; 0x28
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	40023800 	.word	0x40023800
 800dd80:	40020000 	.word	0x40020000

0800dd84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dd98:	4619      	mov	r1, r3
 800dd9a:	4610      	mov	r0, r2
 800dd9c:	f7fb ff79 	bl	8009c92 <USBD_LL_SetupStage>
}
 800dda0:	bf00      	nop
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ddba:	78fa      	ldrb	r2, [r7, #3]
 800ddbc:	6879      	ldr	r1, [r7, #4]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	00db      	lsls	r3, r3, #3
 800ddc2:	1a9b      	subs	r3, r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	440b      	add	r3, r1
 800ddc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	78fb      	ldrb	r3, [r7, #3]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	f7fb ffb3 	bl	8009d3c <USBD_LL_DataOutStage>
}
 800ddd6:	bf00      	nop
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	460b      	mov	r3, r1
 800dde8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ddf0:	78fa      	ldrb	r2, [r7, #3]
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	00db      	lsls	r3, r3, #3
 800ddf8:	1a9b      	subs	r3, r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	440b      	add	r3, r1
 800ddfe:	3348      	adds	r3, #72	; 0x48
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	78fb      	ldrb	r3, [r7, #3]
 800de04:	4619      	mov	r1, r3
 800de06:	f7fb fffc 	bl	8009e02 <USBD_LL_DataInStage>
}
 800de0a:	bf00      	nop
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}

0800de12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de12:	b580      	push	{r7, lr}
 800de14:	b082      	sub	sp, #8
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de20:	4618      	mov	r0, r3
 800de22:	f7fc f910 	bl	800a046 <USBD_LL_SOF>
}
 800de26:	bf00      	nop
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b084      	sub	sp, #16
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de36:	2301      	movs	r3, #1
 800de38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d001      	beq.n	800de46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800de42:	f7f3 fc93 	bl	800176c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de4c:	7bfa      	ldrb	r2, [r7, #15]
 800de4e:	4611      	mov	r1, r2
 800de50:	4618      	mov	r0, r3
 800de52:	f7fc f8ba 	bl	8009fca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fc f866 	bl	8009f2e <USBD_LL_Reset>
}
 800de62:	bf00      	nop
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
	...

0800de6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fc f8b5 	bl	8009fea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	6812      	ldr	r2, [r2, #0]
 800de8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de92:	f043 0301 	orr.w	r3, r3, #1
 800de96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d005      	beq.n	800deac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dea0:	4b04      	ldr	r3, [pc, #16]	; (800deb4 <HAL_PCD_SuspendCallback+0x48>)
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	4a03      	ldr	r2, [pc, #12]	; (800deb4 <HAL_PCD_SuspendCallback+0x48>)
 800dea6:	f043 0306 	orr.w	r3, r3, #6
 800deaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	e000ed00 	.word	0xe000ed00

0800deb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fc f8a5 	bl	800a016 <USBD_LL_Resume>
}
 800decc:	bf00      	nop
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	460b      	mov	r3, r1
 800dede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dee6:	78fa      	ldrb	r2, [r7, #3]
 800dee8:	4611      	mov	r1, r2
 800deea:	4618      	mov	r0, r3
 800deec:	f7fc f8f3 	bl	800a0d6 <USBD_LL_IsoOUTIncomplete>
}
 800def0:	bf00      	nop
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	460b      	mov	r3, r1
 800df02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df0a:	78fa      	ldrb	r2, [r7, #3]
 800df0c:	4611      	mov	r1, r2
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fc f8bb 	bl	800a08a <USBD_LL_IsoINIncomplete>
}
 800df14:	bf00      	nop
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fc f8f9 	bl	800a122 <USBD_LL_DevConnected>
}
 800df30:	bf00      	nop
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800df46:	4618      	mov	r0, r3
 800df48:	f7fc f8f6 	bl	800a138 <USBD_LL_DevDisconnected>
}
 800df4c:	bf00      	nop
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d13c      	bne.n	800dfde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800df64:	4a20      	ldr	r2, [pc, #128]	; (800dfe8 <USBD_LL_Init+0x94>)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a1e      	ldr	r2, [pc, #120]	; (800dfe8 <USBD_LL_Init+0x94>)
 800df70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800df74:	4b1c      	ldr	r3, [pc, #112]	; (800dfe8 <USBD_LL_Init+0x94>)
 800df76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800df7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800df7c:	4b1a      	ldr	r3, [pc, #104]	; (800dfe8 <USBD_LL_Init+0x94>)
 800df7e:	2204      	movs	r2, #4
 800df80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800df82:	4b19      	ldr	r3, [pc, #100]	; (800dfe8 <USBD_LL_Init+0x94>)
 800df84:	2202      	movs	r2, #2
 800df86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800df88:	4b17      	ldr	r3, [pc, #92]	; (800dfe8 <USBD_LL_Init+0x94>)
 800df8a:	2200      	movs	r2, #0
 800df8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800df8e:	4b16      	ldr	r3, [pc, #88]	; (800dfe8 <USBD_LL_Init+0x94>)
 800df90:	2202      	movs	r2, #2
 800df92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800df94:	4b14      	ldr	r3, [pc, #80]	; (800dfe8 <USBD_LL_Init+0x94>)
 800df96:	2200      	movs	r2, #0
 800df98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800df9a:	4b13      	ldr	r3, [pc, #76]	; (800dfe8 <USBD_LL_Init+0x94>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dfa0:	4b11      	ldr	r3, [pc, #68]	; (800dfe8 <USBD_LL_Init+0x94>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800dfa6:	4b10      	ldr	r3, [pc, #64]	; (800dfe8 <USBD_LL_Init+0x94>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dfac:	4b0e      	ldr	r3, [pc, #56]	; (800dfe8 <USBD_LL_Init+0x94>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dfb2:	480d      	ldr	r0, [pc, #52]	; (800dfe8 <USBD_LL_Init+0x94>)
 800dfb4:	f7f6 f961 	bl	800427a <HAL_PCD_Init>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d001      	beq.n	800dfc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dfbe:	f7f3 fbd5 	bl	800176c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dfc2:	2180      	movs	r1, #128	; 0x80
 800dfc4:	4808      	ldr	r0, [pc, #32]	; (800dfe8 <USBD_LL_Init+0x94>)
 800dfc6:	f7f7 fabe 	bl	8005546 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dfca:	2240      	movs	r2, #64	; 0x40
 800dfcc:	2100      	movs	r1, #0
 800dfce:	4806      	ldr	r0, [pc, #24]	; (800dfe8 <USBD_LL_Init+0x94>)
 800dfd0:	f7f7 fa72 	bl	80054b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dfd4:	2280      	movs	r2, #128	; 0x80
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	4803      	ldr	r0, [pc, #12]	; (800dfe8 <USBD_LL_Init+0x94>)
 800dfda:	f7f7 fa6d 	bl	80054b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	200034ac 	.word	0x200034ac

0800dfec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dff4:	2300      	movs	r3, #0
 800dff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e002:	4618      	mov	r0, r3
 800e004:	f7f6 fa56 	bl	80044b4 <HAL_PCD_Start>
 800e008:	4603      	mov	r3, r0
 800e00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
 800e00e:	4618      	mov	r0, r3
 800e010:	f000 f938 	bl	800e284 <USBD_Get_USB_Status>
 800e014:	4603      	mov	r3, r0
 800e016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e018:	7bbb      	ldrb	r3, [r7, #14]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b084      	sub	sp, #16
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
 800e02a:	4608      	mov	r0, r1
 800e02c:	4611      	mov	r1, r2
 800e02e:	461a      	mov	r2, r3
 800e030:	4603      	mov	r3, r0
 800e032:	70fb      	strb	r3, [r7, #3]
 800e034:	460b      	mov	r3, r1
 800e036:	70bb      	strb	r3, [r7, #2]
 800e038:	4613      	mov	r3, r2
 800e03a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e03c:	2300      	movs	r3, #0
 800e03e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e040:	2300      	movs	r3, #0
 800e042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e04a:	78bb      	ldrb	r3, [r7, #2]
 800e04c:	883a      	ldrh	r2, [r7, #0]
 800e04e:	78f9      	ldrb	r1, [r7, #3]
 800e050:	f7f6 fe3a 	bl	8004cc8 <HAL_PCD_EP_Open>
 800e054:	4603      	mov	r3, r0
 800e056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e058:	7bfb      	ldrb	r3, [r7, #15]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f000 f912 	bl	800e284 <USBD_Get_USB_Status>
 800e060:	4603      	mov	r3, r0
 800e062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e064:	7bbb      	ldrb	r3, [r7, #14]
}
 800e066:	4618      	mov	r0, r3
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b084      	sub	sp, #16
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
 800e076:	460b      	mov	r3, r1
 800e078:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e07a:	2300      	movs	r3, #0
 800e07c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e07e:	2300      	movs	r3, #0
 800e080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e088:	78fa      	ldrb	r2, [r7, #3]
 800e08a:	4611      	mov	r1, r2
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7f6 fe83 	bl	8004d98 <HAL_PCD_EP_Close>
 800e092:	4603      	mov	r3, r0
 800e094:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e096:	7bfb      	ldrb	r3, [r7, #15]
 800e098:	4618      	mov	r0, r3
 800e09a:	f000 f8f3 	bl	800e284 <USBD_Get_USB_Status>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0c6:	78fa      	ldrb	r2, [r7, #3]
 800e0c8:	4611      	mov	r1, r2
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7f6 ff5b 	bl	8004f86 <HAL_PCD_EP_SetStall>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0d4:	7bfb      	ldrb	r3, [r7, #15]
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 f8d4 	bl	800e284 <USBD_Get_USB_Status>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e104:	78fa      	ldrb	r2, [r7, #3]
 800e106:	4611      	mov	r1, r2
 800e108:	4618      	mov	r0, r3
 800e10a:	f7f6 ffa0 	bl	800504e <HAL_PCD_EP_ClrStall>
 800e10e:	4603      	mov	r3, r0
 800e110:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e112:	7bfb      	ldrb	r3, [r7, #15]
 800e114:	4618      	mov	r0, r3
 800e116:	f000 f8b5 	bl	800e284 <USBD_Get_USB_Status>
 800e11a:	4603      	mov	r3, r0
 800e11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e11e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e120:	4618      	mov	r0, r3
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e128:	b480      	push	{r7}
 800e12a:	b085      	sub	sp, #20
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	460b      	mov	r3, r1
 800e132:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e13a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e13c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e140:	2b00      	cmp	r3, #0
 800e142:	da0b      	bge.n	800e15c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e144:	78fb      	ldrb	r3, [r7, #3]
 800e146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e14a:	68f9      	ldr	r1, [r7, #12]
 800e14c:	4613      	mov	r3, r2
 800e14e:	00db      	lsls	r3, r3, #3
 800e150:	1a9b      	subs	r3, r3, r2
 800e152:	009b      	lsls	r3, r3, #2
 800e154:	440b      	add	r3, r1
 800e156:	333e      	adds	r3, #62	; 0x3e
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	e00b      	b.n	800e174 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e15c:	78fb      	ldrb	r3, [r7, #3]
 800e15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e162:	68f9      	ldr	r1, [r7, #12]
 800e164:	4613      	mov	r3, r2
 800e166:	00db      	lsls	r3, r3, #3
 800e168:	1a9b      	subs	r3, r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	440b      	add	r3, r1
 800e16e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e172:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e174:	4618      	mov	r0, r3
 800e176:	3714      	adds	r7, #20
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e18c:	2300      	movs	r3, #0
 800e18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e190:	2300      	movs	r3, #0
 800e192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e19a:	78fa      	ldrb	r2, [r7, #3]
 800e19c:	4611      	mov	r1, r2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7f6 fd6d 	bl	8004c7e <HAL_PCD_SetAddress>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1a8:	7bfb      	ldrb	r3, [r7, #15]
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f000 f86a 	bl	800e284 <USBD_Get_USB_Status>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b086      	sub	sp, #24
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	60f8      	str	r0, [r7, #12]
 800e1c6:	607a      	str	r2, [r7, #4]
 800e1c8:	603b      	str	r3, [r7, #0]
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e1dc:	7af9      	ldrb	r1, [r7, #11]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	f7f6 fe86 	bl	8004ef2 <HAL_PCD_EP_Transmit>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1ea:	7dfb      	ldrb	r3, [r7, #23]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f000 f849 	bl	800e284 <USBD_Get_USB_Status>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e1f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3718      	adds	r7, #24
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	607a      	str	r2, [r7, #4]
 800e20a:	603b      	str	r3, [r7, #0]
 800e20c:	460b      	mov	r3, r1
 800e20e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e210:	2300      	movs	r3, #0
 800e212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e214:	2300      	movs	r3, #0
 800e216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e21e:	7af9      	ldrb	r1, [r7, #11]
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	f7f6 fe02 	bl	8004e2c <HAL_PCD_EP_Receive>
 800e228:	4603      	mov	r3, r0
 800e22a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e22c:	7dfb      	ldrb	r3, [r7, #23]
 800e22e:	4618      	mov	r0, r3
 800e230:	f000 f828 	bl	800e284 <USBD_Get_USB_Status>
 800e234:	4603      	mov	r3, r0
 800e236:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e238:	7dbb      	ldrb	r3, [r7, #22]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3718      	adds	r7, #24
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}

0800e242 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e242:	b580      	push	{r7, lr}
 800e244:	b082      	sub	sp, #8
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
 800e24a:	460b      	mov	r3, r1
 800e24c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e254:	78fa      	ldrb	r2, [r7, #3]
 800e256:	4611      	mov	r1, r2
 800e258:	4618      	mov	r0, r3
 800e25a:	f7f6 fe32 	bl	8004ec2 <HAL_PCD_EP_GetRxCount>
 800e25e:	4603      	mov	r3, r0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3708      	adds	r7, #8
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e270:	4b03      	ldr	r3, [pc, #12]	; (800e280 <USBD_static_malloc+0x18>)
}
 800e272:	4618      	mov	r0, r3
 800e274:	370c      	adds	r7, #12
 800e276:	46bd      	mov	sp, r7
 800e278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27c:	4770      	bx	lr
 800e27e:	bf00      	nop
 800e280:	2000098c 	.word	0x2000098c

0800e284 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	4603      	mov	r3, r0
 800e28c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e28e:	2300      	movs	r3, #0
 800e290:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	2b03      	cmp	r3, #3
 800e296:	d817      	bhi.n	800e2c8 <USBD_Get_USB_Status+0x44>
 800e298:	a201      	add	r2, pc, #4	; (adr r2, 800e2a0 <USBD_Get_USB_Status+0x1c>)
 800e29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29e:	bf00      	nop
 800e2a0:	0800e2b1 	.word	0x0800e2b1
 800e2a4:	0800e2b7 	.word	0x0800e2b7
 800e2a8:	0800e2bd 	.word	0x0800e2bd
 800e2ac:	0800e2c3 	.word	0x0800e2c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e2b4:	e00b      	b.n	800e2ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e2ba:	e008      	b.n	800e2ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	73fb      	strb	r3, [r7, #15]
    break;
 800e2c0:	e005      	b.n	800e2ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e2c2:	2303      	movs	r3, #3
 800e2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e2c6:	e002      	b.n	800e2ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e2cc:	bf00      	nop
  }
  return usb_status;
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3714      	adds	r7, #20
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d002      	beq.n	800e2f2 <case_insensitive_strcmp+0x16>
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d101      	bne.n	800e2f6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e056      	b.n	800e3a4 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d10d      	bne.n	800e31a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800e2fe:	2300      	movs	r3, #0
 800e300:	e050      	b.n	800e3a4 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d101      	bne.n	800e30e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800e30a:	2300      	movs	r3, #0
 800e30c:	e04a      	b.n	800e3a4 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	3301      	adds	r3, #1
 800e312:	607b      	str	r3, [r7, #4]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	3301      	adds	r3, #1
 800e318:	603b      	str	r3, [r7, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	73fb      	strb	r3, [r7, #15]
 800e320:	7bfb      	ldrb	r3, [r7, #15]
 800e322:	3301      	adds	r3, #1
 800e324:	4a22      	ldr	r2, [pc, #136]	; (800e3b0 <case_insensitive_strcmp+0xd4>)
 800e326:	4413      	add	r3, r2
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	f003 0303 	and.w	r3, r3, #3
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d103      	bne.n	800e33a <case_insensitive_strcmp+0x5e>
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	f103 0220 	add.w	r2, r3, #32
 800e338:	e000      	b.n	800e33c <case_insensitive_strcmp+0x60>
 800e33a:	7bfa      	ldrb	r2, [r7, #15]
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	73bb      	strb	r3, [r7, #14]
 800e342:	7bbb      	ldrb	r3, [r7, #14]
 800e344:	3301      	adds	r3, #1
 800e346:	491a      	ldr	r1, [pc, #104]	; (800e3b0 <case_insensitive_strcmp+0xd4>)
 800e348:	440b      	add	r3, r1
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	f003 0303 	and.w	r3, r3, #3
 800e350:	2b01      	cmp	r3, #1
 800e352:	d102      	bne.n	800e35a <case_insensitive_strcmp+0x7e>
 800e354:	7bbb      	ldrb	r3, [r7, #14]
 800e356:	3320      	adds	r3, #32
 800e358:	e000      	b.n	800e35c <case_insensitive_strcmp+0x80>
 800e35a:	7bbb      	ldrb	r3, [r7, #14]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d0d0      	beq.n	800e302 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	737b      	strb	r3, [r7, #13]
 800e366:	7b7b      	ldrb	r3, [r7, #13]
 800e368:	3301      	adds	r3, #1
 800e36a:	4a11      	ldr	r2, [pc, #68]	; (800e3b0 <case_insensitive_strcmp+0xd4>)
 800e36c:	4413      	add	r3, r2
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	f003 0303 	and.w	r3, r3, #3
 800e374:	2b01      	cmp	r3, #1
 800e376:	d103      	bne.n	800e380 <case_insensitive_strcmp+0xa4>
 800e378:	7b7b      	ldrb	r3, [r7, #13]
 800e37a:	f103 0220 	add.w	r2, r3, #32
 800e37e:	e000      	b.n	800e382 <case_insensitive_strcmp+0xa6>
 800e380:	7b7a      	ldrb	r2, [r7, #13]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	733b      	strb	r3, [r7, #12]
 800e388:	7b3b      	ldrb	r3, [r7, #12]
 800e38a:	3301      	adds	r3, #1
 800e38c:	4908      	ldr	r1, [pc, #32]	; (800e3b0 <case_insensitive_strcmp+0xd4>)
 800e38e:	440b      	add	r3, r1
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	f003 0303 	and.w	r3, r3, #3
 800e396:	2b01      	cmp	r3, #1
 800e398:	d102      	bne.n	800e3a0 <case_insensitive_strcmp+0xc4>
 800e39a:	7b3b      	ldrb	r3, [r7, #12]
 800e39c:	3320      	adds	r3, #32
 800e39e:	e000      	b.n	800e3a2 <case_insensitive_strcmp+0xc6>
 800e3a0:	7b3b      	ldrb	r3, [r7, #12]
 800e3a2:	1ad3      	subs	r3, r2, r3
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	08013ef4 	.word	0x08013ef4

0800e3b4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2028      	movs	r0, #40	; 0x28
 800e3c2:	4798      	blx	r3
 800e3c4:	60f8      	str	r0, [r7, #12]
    if (node)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d004      	beq.n	800e3d6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800e3cc:	2228      	movs	r2, #40	; 0x28
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f001 f85d 	bl	800f490 <memset>
    }

    return node;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800e3ec:	e037      	b.n	800e45e <cJSON_Delete+0x7e>
    {
        next = item->next;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d108      	bne.n	800e412 <cJSON_Delete+0x32>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d004      	beq.n	800e412 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7ff ffe7 	bl	800e3e0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d109      	bne.n	800e432 <cJSON_Delete+0x52>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d005      	beq.n	800e432 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800e426:	4b12      	ldr	r3, [pc, #72]	; (800e470 <cJSON_Delete+0x90>)
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	6912      	ldr	r2, [r2, #16]
 800e42e:	4610      	mov	r0, r2
 800e430:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d109      	bne.n	800e452 <cJSON_Delete+0x72>
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6a1b      	ldr	r3, [r3, #32]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d005      	beq.n	800e452 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800e446:	4b0a      	ldr	r3, [pc, #40]	; (800e470 <cJSON_Delete+0x90>)
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	6a12      	ldr	r2, [r2, #32]
 800e44e:	4610      	mov	r0, r2
 800e450:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800e452:	4b07      	ldr	r3, [pc, #28]	; (800e470 <cJSON_Delete+0x90>)
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	4798      	blx	r3
        item = next;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1c4      	bne.n	800e3ee <cJSON_Delete+0xe>
    }
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	2000013c 	.word	0x2000013c

0800e474 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800e474:	b480      	push	{r7}
 800e476:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800e478:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	0000      	movs	r0, r0
	...

0800e488 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b098      	sub	sp, #96	; 0x60
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
    double number = 0;
 800e492:	f04f 0200 	mov.w	r2, #0
 800e496:	f04f 0300 	mov.w	r3, #0
 800e49a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800e4a2:	f7ff ffe7 	bl	800e474 <get_decimal_point>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d003      	beq.n	800e4be <parse_number+0x36>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d101      	bne.n	800e4c2 <parse_number+0x3a>
    {
        return false;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	e0c6      	b.n	800e650 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4c6:	e063      	b.n	800e590 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	6899      	ldr	r1, [r3, #8]
 800e4d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4d2:	440b      	add	r3, r1
 800e4d4:	4413      	add	r3, r2
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	2b45      	cmp	r3, #69	; 0x45
 800e4da:	dc3d      	bgt.n	800e558 <parse_number+0xd0>
 800e4dc:	2b2b      	cmp	r3, #43	; 0x2b
 800e4de:	db66      	blt.n	800e5ae <parse_number+0x126>
 800e4e0:	3b2b      	subs	r3, #43	; 0x2b
 800e4e2:	2b1a      	cmp	r3, #26
 800e4e4:	d863      	bhi.n	800e5ae <parse_number+0x126>
 800e4e6:	a201      	add	r2, pc, #4	; (adr r2, 800e4ec <parse_number+0x64>)
 800e4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ec:	0800e55d 	.word	0x0800e55d
 800e4f0:	0800e5af 	.word	0x0800e5af
 800e4f4:	0800e55d 	.word	0x0800e55d
 800e4f8:	0800e57b 	.word	0x0800e57b
 800e4fc:	0800e5af 	.word	0x0800e5af
 800e500:	0800e55d 	.word	0x0800e55d
 800e504:	0800e55d 	.word	0x0800e55d
 800e508:	0800e55d 	.word	0x0800e55d
 800e50c:	0800e55d 	.word	0x0800e55d
 800e510:	0800e55d 	.word	0x0800e55d
 800e514:	0800e55d 	.word	0x0800e55d
 800e518:	0800e55d 	.word	0x0800e55d
 800e51c:	0800e55d 	.word	0x0800e55d
 800e520:	0800e55d 	.word	0x0800e55d
 800e524:	0800e55d 	.word	0x0800e55d
 800e528:	0800e5af 	.word	0x0800e5af
 800e52c:	0800e5af 	.word	0x0800e5af
 800e530:	0800e5af 	.word	0x0800e5af
 800e534:	0800e5af 	.word	0x0800e5af
 800e538:	0800e5af 	.word	0x0800e5af
 800e53c:	0800e5af 	.word	0x0800e5af
 800e540:	0800e5af 	.word	0x0800e5af
 800e544:	0800e5af 	.word	0x0800e5af
 800e548:	0800e5af 	.word	0x0800e5af
 800e54c:	0800e5af 	.word	0x0800e5af
 800e550:	0800e5af 	.word	0x0800e5af
 800e554:	0800e55d 	.word	0x0800e55d
 800e558:	2b65      	cmp	r3, #101	; 0x65
 800e55a:	d128      	bne.n	800e5ae <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	6899      	ldr	r1, [r3, #8]
 800e564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e566:	440b      	add	r3, r1
 800e568:	4413      	add	r3, r2
 800e56a:	7819      	ldrb	r1, [r3, #0]
 800e56c:	f107 0208 	add.w	r2, r7, #8
 800e570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e572:	4413      	add	r3, r2
 800e574:	460a      	mov	r2, r1
 800e576:	701a      	strb	r2, [r3, #0]
                break;
 800e578:	e007      	b.n	800e58a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800e57a:	f107 0208 	add.w	r2, r7, #8
 800e57e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e580:	4413      	add	r3, r2
 800e582:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800e586:	701a      	strb	r2, [r3, #0]
                break;
 800e588:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800e58a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e58c:	3301      	adds	r3, #1
 800e58e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e592:	2b3e      	cmp	r3, #62	; 0x3e
 800e594:	d80d      	bhi.n	800e5b2 <parse_number+0x12a>
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00a      	beq.n	800e5b2 <parse_number+0x12a>
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	689a      	ldr	r2, [r3, #8]
 800e5a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5a2:	441a      	add	r2, r3
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d38d      	bcc.n	800e4c8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800e5ac:	e001      	b.n	800e5b2 <parse_number+0x12a>
                goto loop_end;
 800e5ae:	bf00      	nop
 800e5b0:	e000      	b.n	800e5b4 <parse_number+0x12c>
loop_end:
 800e5b2:	bf00      	nop
    number_c_string[i] = '\0';
 800e5b4:	f107 0208 	add.w	r2, r7, #8
 800e5b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5ba:	4413      	add	r3, r2
 800e5bc:	2200      	movs	r2, #0
 800e5be:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800e5c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e5c4:	f107 0308 	add.w	r3, r7, #8
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f001 feda 	bl	8010384 <strtod>
 800e5d0:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800e5d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5d6:	f107 0308 	add.w	r3, r7, #8
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d101      	bne.n	800e5e2 <parse_number+0x15a>
    {
        return false; /* parse_error */
 800e5de:	2300      	movs	r3, #0
 800e5e0:	e036      	b.n	800e650 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 800e5e2:	6879      	ldr	r1, [r7, #4]
 800e5e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e5e8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800e5ec:	a31b      	add	r3, pc, #108	; (adr r3, 800e65c <parse_number+0x1d4>)
 800e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e5f6:	f7f2 fa9d 	bl	8000b34 <__aeabi_dcmpge>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d004      	beq.n	800e60a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e606:	615a      	str	r2, [r3, #20]
 800e608:	e015      	b.n	800e636 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 800e60a:	f04f 0200 	mov.w	r2, #0
 800e60e:	4b12      	ldr	r3, [pc, #72]	; (800e658 <parse_number+0x1d0>)
 800e610:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e614:	f7f2 fa84 	bl	8000b20 <__aeabi_dcmple>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d004      	beq.n	800e628 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e624:	615a      	str	r2, [r3, #20]
 800e626:	e006      	b.n	800e636 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 800e628:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e62c:	f7f2 fa96 	bl	8000b5c <__aeabi_d2iz>
 800e630:	4602      	mov	r2, r0
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2208      	movs	r2, #8
 800e63a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e642:	f107 0208 	add.w	r2, r7, #8
 800e646:	1a8a      	subs	r2, r1, r2
 800e648:	441a      	add	r2, r3
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	609a      	str	r2, [r3, #8]
    return true;
 800e64e:	2301      	movs	r3, #1
}
 800e650:	4618      	mov	r0, r3
 800e652:	3760      	adds	r7, #96	; 0x60
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	c1e00000 	.word	0xc1e00000
 800e65c:	ffc00000 	.word	0xffc00000
 800e660:	41dfffff 	.word	0x41dfffff

0800e664 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800e670:	2300      	movs	r3, #0
 800e672:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800e674:	2300      	movs	r3, #0
 800e676:	60bb      	str	r3, [r7, #8]
 800e678:	e04c      	b.n	800e714 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	4413      	add	r3, r2
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	2b2f      	cmp	r3, #47	; 0x2f
 800e684:	d90f      	bls.n	800e6a6 <parse_hex4+0x42>
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	4413      	add	r3, r2
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	2b39      	cmp	r3, #57	; 0x39
 800e690:	d809      	bhi.n	800e6a6 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	4413      	add	r3, r2
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	461a      	mov	r2, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	4413      	add	r3, r2
 800e6a0:	3b30      	subs	r3, #48	; 0x30
 800e6a2:	60fb      	str	r3, [r7, #12]
 800e6a4:	e02d      	b.n	800e702 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	2b40      	cmp	r3, #64	; 0x40
 800e6b0:	d90f      	bls.n	800e6d2 <parse_hex4+0x6e>
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2b46      	cmp	r3, #70	; 0x46
 800e6bc:	d809      	bhi.n	800e6d2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	4413      	add	r3, r2
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	3b37      	subs	r3, #55	; 0x37
 800e6ce:	60fb      	str	r3, [r7, #12]
 800e6d0:	e017      	b.n	800e702 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b60      	cmp	r3, #96	; 0x60
 800e6dc:	d90f      	bls.n	800e6fe <parse_hex4+0x9a>
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	2b66      	cmp	r3, #102	; 0x66
 800e6e8:	d809      	bhi.n	800e6fe <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	3b57      	subs	r3, #87	; 0x57
 800e6fa:	60fb      	str	r3, [r7, #12]
 800e6fc:	e001      	b.n	800e702 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800e6fe:	2300      	movs	r3, #0
 800e700:	e00c      	b.n	800e71c <parse_hex4+0xb8>
        }

        if (i < 3)
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	2b02      	cmp	r3, #2
 800e706:	d802      	bhi.n	800e70e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	011b      	lsls	r3, r3, #4
 800e70c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	3301      	adds	r3, #1
 800e712:	60bb      	str	r3, [r7, #8]
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	2b03      	cmp	r3, #3
 800e718:	d9af      	bls.n	800e67a <parse_hex4+0x16>
        }
    }

    return h;
 800e71a:	68fb      	ldr	r3, [r7, #12]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3714      	adds	r7, #20
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08a      	sub	sp, #40	; 0x28
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800e734:	2300      	movs	r3, #0
 800e736:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800e738:	2300      	movs	r3, #0
 800e73a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800e740:	2300      	movs	r3, #0
 800e742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800e746:	2300      	movs	r3, #0
 800e748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800e74c:	2300      	movs	r3, #0
 800e74e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 800e752:	2300      	movs	r3, #0
 800e754:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800e758:	68ba      	ldr	r2, [r7, #8]
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	2b05      	cmp	r3, #5
 800e760:	f340 80b7 	ble.w	800e8d2 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	3302      	adds	r3, #2
 800e768:	4618      	mov	r0, r3
 800e76a:	f7ff ff7b 	bl	800e664 <parse_hex4>
 800e76e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800e776:	d304      	bcc.n	800e782 <utf16_literal_to_utf8+0x5a>
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800e77e:	f0c0 80aa 	bcc.w	800e8d6 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800e782:	69fb      	ldr	r3, [r7, #28]
 800e784:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800e788:	d337      	bcc.n	800e7fa <utf16_literal_to_utf8+0xd2>
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800e790:	d233      	bcs.n	800e7fa <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	3306      	adds	r3, #6
 800e796:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800e798:	2300      	movs	r3, #0
 800e79a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800e79c:	230c      	movs	r3, #12
 800e79e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	2b05      	cmp	r3, #5
 800e7aa:	f340 8096 	ble.w	800e8da <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2b5c      	cmp	r3, #92	; 0x5c
 800e7b4:	f040 8093 	bne.w	800e8de <utf16_literal_to_utf8+0x1b6>
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	2b75      	cmp	r3, #117	; 0x75
 800e7c0:	f040 808d 	bne.w	800e8de <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	3302      	adds	r3, #2
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7ff ff4b 	bl	800e664 <parse_hex4>
 800e7ce:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800e7d6:	f0c0 8084 	bcc.w	800e8e2 <utf16_literal_to_utf8+0x1ba>
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800e7e0:	d27f      	bcs.n	800e8e2 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	029a      	lsls	r2, r3, #10
 800e7e6:	4b43      	ldr	r3, [pc, #268]	; (800e8f4 <utf16_literal_to_utf8+0x1cc>)
 800e7e8:	4013      	ands	r3, r2
 800e7ea:	693a      	ldr	r2, [r7, #16]
 800e7ec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800e7f6:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800e7f8:	e004      	b.n	800e804 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800e7fa:	2306      	movs	r3, #6
 800e7fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	2b7f      	cmp	r3, #127	; 0x7f
 800e808:	d803      	bhi.n	800e812 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800e80a:	2301      	movs	r3, #1
 800e80c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e810:	e01f      	b.n	800e852 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800e812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e818:	d206      	bcs.n	800e828 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800e81a:	2302      	movs	r3, #2
 800e81c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800e820:	23c0      	movs	r3, #192	; 0xc0
 800e822:	f887 3020 	strb.w	r3, [r7, #32]
 800e826:	e014      	b.n	800e852 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e82e:	d206      	bcs.n	800e83e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800e830:	2303      	movs	r3, #3
 800e832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800e836:	23e0      	movs	r3, #224	; 0xe0
 800e838:	f887 3020 	strb.w	r3, [r7, #32]
 800e83c:	e009      	b.n	800e852 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800e83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e840:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800e844:	d24f      	bcs.n	800e8e6 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800e846:	2304      	movs	r3, #4
 800e848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800e84c:	23f0      	movs	r3, #240	; 0xf0
 800e84e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800e852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e856:	3b01      	subs	r3, #1
 800e858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e85c:	e015      	b.n	800e88a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e860:	b2db      	uxtb	r3, r3
 800e862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e866:	b2da      	uxtb	r2, r3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6819      	ldr	r1, [r3, #0]
 800e86c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e870:	440b      	add	r3, r1
 800e872:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e876:	b2d2      	uxtb	r2, r2
 800e878:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800e87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87c:	099b      	lsrs	r3, r3, #6
 800e87e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800e880:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e884:	3b01      	subs	r3, #1
 800e886:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e88a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1e5      	bne.n	800e85e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800e892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e896:	2b01      	cmp	r3, #1
 800e898:	d909      	bls.n	800e8ae <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	b2d9      	uxtb	r1, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	b2d2      	uxtb	r2, r2
 800e8aa:	701a      	strb	r2, [r3, #0]
 800e8ac:	e007      	b.n	800e8be <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b0:	b2da      	uxtb	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e8ba:	b2d2      	uxtb	r2, r2
 800e8bc:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e8c6:	441a      	add	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800e8cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e8d0:	e00b      	b.n	800e8ea <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800e8d2:	bf00      	nop
 800e8d4:	e008      	b.n	800e8e8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800e8d6:	bf00      	nop
 800e8d8:	e006      	b.n	800e8e8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e8da:	bf00      	nop
 800e8dc:	e004      	b.n	800e8e8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e8de:	bf00      	nop
 800e8e0:	e002      	b.n	800e8e8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800e8e2:	bf00      	nop
 800e8e4:	e000      	b.n	800e8e8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800e8e6:	bf00      	nop

fail:
    return 0;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3728      	adds	r7, #40	; 0x28
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	000ffc00 	.word	0x000ffc00

0800e8f8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b08a      	sub	sp, #40	; 0x28
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	3301      	adds	r3, #1
 800e90c:	4413      	add	r3, r2
 800e90e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	3301      	adds	r3, #1
 800e91a:	4413      	add	r3, r2
 800e91c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800e91e:	2300      	movs	r3, #0
 800e920:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800e922:	2300      	movs	r3, #0
 800e924:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	4413      	add	r3, r2
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	2b22      	cmp	r3, #34	; 0x22
 800e934:	f040 8102 	bne.w	800eb3c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800e93c:	2300      	movs	r3, #0
 800e93e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800e940:	e017      	b.n	800e972 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800e942:	6a3b      	ldr	r3, [r7, #32]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	2b5c      	cmp	r3, #92	; 0x5c
 800e948:	d110      	bne.n	800e96c <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800e94a:	6a3b      	ldr	r3, [r7, #32]
 800e94c:	1c5a      	adds	r2, r3, #1
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	461a      	mov	r2, r3
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	f080 80f0 	bcs.w	800eb40 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	3301      	adds	r3, #1
 800e964:	61bb      	str	r3, [r7, #24]
                input_end++;
 800e966:	6a3b      	ldr	r3, [r7, #32]
 800e968:	3301      	adds	r3, #1
 800e96a:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	3301      	adds	r3, #1
 800e970:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	6a3a      	ldr	r2, [r7, #32]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	461a      	mov	r2, r3
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	429a      	cmp	r2, r3
 800e982:	d203      	bcs.n	800e98c <parse_string+0x94>
 800e984:	6a3b      	ldr	r3, [r7, #32]
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	2b22      	cmp	r3, #34	; 0x22
 800e98a:	d1da      	bne.n	800e942 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6a3a      	ldr	r2, [r7, #32]
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	461a      	mov	r2, r3
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	f080 80d2 	bcs.w	800eb44 <parse_string+0x24c>
 800e9a0:	6a3b      	ldr	r3, [r7, #32]
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	2b22      	cmp	r3, #34	; 0x22
 800e9a6:	f040 80cd 	bne.w	800eb44 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	6a3a      	ldr	r2, [r7, #32]
 800e9b6:	1ad3      	subs	r3, r2, r3
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	1ad3      	subs	r3, r2, r3
 800e9be:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	693a      	ldr	r2, [r7, #16]
 800e9c6:	3201      	adds	r2, #1
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	4798      	blx	r3
 800e9cc:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f000 80b9 	beq.w	800eb48 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800e9da:	e093      	b.n	800eb04 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	2b5c      	cmp	r3, #92	; 0x5c
 800e9e2:	d008      	beq.n	800e9f6 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800e9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e6:	1c53      	adds	r3, r2, #1
 800e9e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	1c59      	adds	r1, r3, #1
 800e9ee:	60f9      	str	r1, [r7, #12]
 800e9f0:	7812      	ldrb	r2, [r2, #0]
 800e9f2:	701a      	strb	r2, [r3, #0]
 800e9f4:	e086      	b.n	800eb04 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800e9fa:	6a3a      	ldr	r2, [r7, #32]
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fe:	1ad3      	subs	r3, r2, r3
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f340 80a3 	ble.w	800eb4c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800ea06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea08:	3301      	adds	r3, #1
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	2b75      	cmp	r3, #117	; 0x75
 800ea0e:	f300 809f 	bgt.w	800eb50 <parse_string+0x258>
 800ea12:	2b5c      	cmp	r3, #92	; 0x5c
 800ea14:	da04      	bge.n	800ea20 <parse_string+0x128>
 800ea16:	2b22      	cmp	r3, #34	; 0x22
 800ea18:	d05c      	beq.n	800ead4 <parse_string+0x1dc>
 800ea1a:	2b2f      	cmp	r3, #47	; 0x2f
 800ea1c:	d05a      	beq.n	800ead4 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800ea1e:	e097      	b.n	800eb50 <parse_string+0x258>
 800ea20:	3b5c      	subs	r3, #92	; 0x5c
 800ea22:	2b19      	cmp	r3, #25
 800ea24:	f200 8094 	bhi.w	800eb50 <parse_string+0x258>
 800ea28:	a201      	add	r2, pc, #4	; (adr r2, 800ea30 <parse_string+0x138>)
 800ea2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2e:	bf00      	nop
 800ea30:	0800ead5 	.word	0x0800ead5
 800ea34:	0800eb51 	.word	0x0800eb51
 800ea38:	0800eb51 	.word	0x0800eb51
 800ea3c:	0800eb51 	.word	0x0800eb51
 800ea40:	0800eb51 	.word	0x0800eb51
 800ea44:	0800eb51 	.word	0x0800eb51
 800ea48:	0800ea99 	.word	0x0800ea99
 800ea4c:	0800eb51 	.word	0x0800eb51
 800ea50:	0800eb51 	.word	0x0800eb51
 800ea54:	0800eb51 	.word	0x0800eb51
 800ea58:	0800eaa5 	.word	0x0800eaa5
 800ea5c:	0800eb51 	.word	0x0800eb51
 800ea60:	0800eb51 	.word	0x0800eb51
 800ea64:	0800eb51 	.word	0x0800eb51
 800ea68:	0800eb51 	.word	0x0800eb51
 800ea6c:	0800eb51 	.word	0x0800eb51
 800ea70:	0800eb51 	.word	0x0800eb51
 800ea74:	0800eb51 	.word	0x0800eb51
 800ea78:	0800eab1 	.word	0x0800eab1
 800ea7c:	0800eb51 	.word	0x0800eb51
 800ea80:	0800eb51 	.word	0x0800eb51
 800ea84:	0800eb51 	.word	0x0800eb51
 800ea88:	0800eabd 	.word	0x0800eabd
 800ea8c:	0800eb51 	.word	0x0800eb51
 800ea90:	0800eac9 	.word	0x0800eac9
 800ea94:	0800eae3 	.word	0x0800eae3
                    *output_pointer++ = '\b';
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	1c5a      	adds	r2, r3, #1
 800ea9c:	60fa      	str	r2, [r7, #12]
 800ea9e:	2208      	movs	r2, #8
 800eaa0:	701a      	strb	r2, [r3, #0]
                    break;
 800eaa2:	e02b      	b.n	800eafc <parse_string+0x204>
                    *output_pointer++ = '\f';
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	1c5a      	adds	r2, r3, #1
 800eaa8:	60fa      	str	r2, [r7, #12]
 800eaaa:	220c      	movs	r2, #12
 800eaac:	701a      	strb	r2, [r3, #0]
                    break;
 800eaae:	e025      	b.n	800eafc <parse_string+0x204>
                    *output_pointer++ = '\n';
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	1c5a      	adds	r2, r3, #1
 800eab4:	60fa      	str	r2, [r7, #12]
 800eab6:	220a      	movs	r2, #10
 800eab8:	701a      	strb	r2, [r3, #0]
                    break;
 800eaba:	e01f      	b.n	800eafc <parse_string+0x204>
                    *output_pointer++ = '\r';
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	1c5a      	adds	r2, r3, #1
 800eac0:	60fa      	str	r2, [r7, #12]
 800eac2:	220d      	movs	r2, #13
 800eac4:	701a      	strb	r2, [r3, #0]
                    break;
 800eac6:	e019      	b.n	800eafc <parse_string+0x204>
                    *output_pointer++ = '\t';
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	60fa      	str	r2, [r7, #12]
 800eace:	2209      	movs	r2, #9
 800ead0:	701a      	strb	r2, [r3, #0]
                    break;
 800ead2:	e013      	b.n	800eafc <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	1c5a      	adds	r2, r3, #1
 800ead8:	60fa      	str	r2, [r7, #12]
 800eada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eadc:	7852      	ldrb	r2, [r2, #1]
 800eade:	701a      	strb	r2, [r3, #0]
                    break;
 800eae0:	e00c      	b.n	800eafc <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800eae2:	f107 030c 	add.w	r3, r7, #12
 800eae6:	461a      	mov	r2, r3
 800eae8:	6a39      	ldr	r1, [r7, #32]
 800eaea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaec:	f7ff fe1c 	bl	800e728 <utf16_literal_to_utf8>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800eaf4:	7dfb      	ldrb	r3, [r7, #23]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d02c      	beq.n	800eb54 <parse_string+0x25c>
                    break;
 800eafa:	bf00      	nop
            }
            input_pointer += sequence_length;
 800eafc:	7dfb      	ldrb	r3, [r7, #23]
 800eafe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb00:	4413      	add	r3, r2
 800eb02:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800eb04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb06:	6a3b      	ldr	r3, [r7, #32]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	f4ff af67 	bcc.w	800e9dc <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2210      	movs	r2, #16
 800eb18:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	69fa      	ldr	r2, [r7, #28]
 800eb1e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	6a3a      	ldr	r2, [r7, #32]
 800eb26:	1ad3      	subs	r3, r2, r3
 800eb28:	461a      	mov	r2, r3
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	1c5a      	adds	r2, r3, #1
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	609a      	str	r2, [r3, #8]

    return true;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e01e      	b.n	800eb7a <parse_string+0x282>
        goto fail;
 800eb3c:	bf00      	nop
 800eb3e:	e00a      	b.n	800eb56 <parse_string+0x25e>
                    goto fail;
 800eb40:	bf00      	nop
 800eb42:	e008      	b.n	800eb56 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 800eb44:	bf00      	nop
 800eb46:	e006      	b.n	800eb56 <parse_string+0x25e>
            goto fail; /* allocation failure */
 800eb48:	bf00      	nop
 800eb4a:	e004      	b.n	800eb56 <parse_string+0x25e>
                goto fail;
 800eb4c:	bf00      	nop
 800eb4e:	e002      	b.n	800eb56 <parse_string+0x25e>
                    goto fail;
 800eb50:	bf00      	nop
 800eb52:	e000      	b.n	800eb56 <parse_string+0x25e>
                        goto fail;
 800eb54:	bf00      	nop

fail:
    if (output != NULL)
 800eb56:	69fb      	ldr	r3, [r7, #28]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d003      	beq.n	800eb64 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	695b      	ldr	r3, [r3, #20]
 800eb60:	69f8      	ldr	r0, [r7, #28]
 800eb62:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d006      	beq.n	800eb78 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	461a      	mov	r2, r3
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	609a      	str	r2, [r3, #8]
    }

    return false;
 800eb78:	2300      	movs	r3, #0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3728      	adds	r7, #40	; 0x28
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop

0800eb84 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d003      	beq.n	800eb9a <buffer_skip_whitespace+0x16>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d101      	bne.n	800eb9e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	e02c      	b.n	800ebf8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d005      	beq.n	800ebb0 <buffer_skip_whitespace+0x2c>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	689a      	ldr	r2, [r3, #8]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d306      	bcc.n	800ebbe <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	e021      	b.n	800ebf8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	689b      	ldr	r3, [r3, #8]
 800ebb8:	1c5a      	adds	r2, r3, #1
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d00d      	beq.n	800ebe0 <buffer_skip_whitespace+0x5c>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	689a      	ldr	r2, [r3, #8]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d207      	bcs.n	800ebe0 <buffer_skip_whitespace+0x5c>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	4413      	add	r3, r2
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	2b20      	cmp	r3, #32
 800ebde:	d9e9      	bls.n	800ebb4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	689a      	ldr	r2, [r3, #8]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d104      	bne.n	800ebf6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	1e5a      	subs	r2, r3, #1
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800ebf6:	687b      	ldr	r3, [r7, #4]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d007      	beq.n	800ec22 <skip_utf8_bom+0x1e>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d003      	beq.n	800ec22 <skip_utf8_bom+0x1e>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d001      	beq.n	800ec26 <skip_utf8_bom+0x22>
    {
        return NULL;
 800ec22:	2300      	movs	r3, #0
 800ec24:	e01c      	b.n	800ec60 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d018      	beq.n	800ec5e <skip_utf8_bom+0x5a>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	1d1a      	adds	r2, r3, #4
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d211      	bcs.n	800ec5e <skip_utf8_bom+0x5a>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	4413      	add	r3, r2
 800ec44:	2203      	movs	r2, #3
 800ec46:	4908      	ldr	r1, [pc, #32]	; (800ec68 <skip_utf8_bom+0x64>)
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f000 fd62 	bl	800f712 <strncmp>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d104      	bne.n	800ec5e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	1cda      	adds	r2, r3, #3
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800ec5e:	687b      	ldr	r3, [r7, #4]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	080127e4 	.word	0x080127e4

0800ec6c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	60f8      	str	r0, [r7, #12]
 800ec74:	60b9      	str	r1, [r7, #8]
 800ec76:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d101      	bne.n	800ec82 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e00c      	b.n	800ec9c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f7f1 fab6 	bl	80001f4 <strlen>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	68ba      	ldr	r2, [r7, #8]
 800ec92:	6979      	ldr	r1, [r7, #20]
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f000 f805 	bl	800eca4 <cJSON_ParseWithLengthOpts>
 800ec9a:	4603      	mov	r3, r0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b08e      	sub	sp, #56	; 0x38
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
 800ecb0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800ecb2:	f107 0318 	add.w	r3, r7, #24
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	601a      	str	r2, [r3, #0]
 800ecba:	605a      	str	r2, [r3, #4]
 800ecbc:	609a      	str	r2, [r3, #8]
 800ecbe:	60da      	str	r2, [r3, #12]
 800ecc0:	611a      	str	r2, [r3, #16]
 800ecc2:	615a      	str	r2, [r3, #20]
 800ecc4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800ecca:	4b41      	ldr	r3, [pc, #260]	; (800edd0 <cJSON_ParseWithLengthOpts+0x12c>)
 800eccc:	2200      	movs	r2, #0
 800ecce:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800ecd0:	4b3f      	ldr	r3, [pc, #252]	; (800edd0 <cJSON_ParseWithLengthOpts+0x12c>)
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d042      	beq.n	800ed62 <cJSON_ParseWithLengthOpts+0xbe>
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d03f      	beq.n	800ed62 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800ecea:	2300      	movs	r3, #0
 800ecec:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800ecee:	4a39      	ldr	r2, [pc, #228]	; (800edd4 <cJSON_ParseWithLengthOpts+0x130>)
 800ecf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ecf4:	ca07      	ldmia	r2, {r0, r1, r2}
 800ecf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800ecfa:	4836      	ldr	r0, [pc, #216]	; (800edd4 <cJSON_ParseWithLengthOpts+0x130>)
 800ecfc:	f7ff fb5a 	bl	800e3b4 <cJSON_New_Item>
 800ed00:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800ed02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d02e      	beq.n	800ed66 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800ed08:	f107 0318 	add.w	r3, r7, #24
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7ff ff79 	bl	800ec04 <skip_utf8_bom>
 800ed12:	4603      	mov	r3, r0
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7ff ff35 	bl	800eb84 <buffer_skip_whitespace>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed20:	f000 f868 	bl	800edf4 <parse_value>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d01f      	beq.n	800ed6a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d00e      	beq.n	800ed4e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800ed30:	f107 0318 	add.w	r3, r7, #24
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7ff ff25 	bl	800eb84 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800ed3a:	6a3a      	ldr	r2, [r7, #32]
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d215      	bcs.n	800ed6e <cJSON_ParseWithLengthOpts+0xca>
 800ed42:	69ba      	ldr	r2, [r7, #24]
 800ed44:	6a3b      	ldr	r3, [r7, #32]
 800ed46:	4413      	add	r3, r2
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d10f      	bne.n	800ed6e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d004      	beq.n	800ed5e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800ed54:	69ba      	ldr	r2, [r7, #24]
 800ed56:	6a3b      	ldr	r3, [r7, #32]
 800ed58:	441a      	add	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800ed5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed60:	e031      	b.n	800edc6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800ed62:	bf00      	nop
 800ed64:	e004      	b.n	800ed70 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800ed66:	bf00      	nop
 800ed68:	e002      	b.n	800ed70 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800ed6a:	bf00      	nop
 800ed6c:	e000      	b.n	800ed70 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800ed6e:	bf00      	nop

fail:
    if (item != NULL)
 800ed70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d002      	beq.n	800ed7c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800ed76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed78:	f7ff fb32 	bl	800e3e0 <cJSON_Delete>
    }

    if (value != NULL)
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d020      	beq.n	800edc4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800ed86:	2300      	movs	r3, #0
 800ed88:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800ed8a:	6a3a      	ldr	r2, [r7, #32]
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d202      	bcs.n	800ed98 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800ed92:	6a3b      	ldr	r3, [r7, #32]
 800ed94:	617b      	str	r3, [r7, #20]
 800ed96:	e005      	b.n	800eda4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d002      	beq.n	800eda4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	3b01      	subs	r3, #1
 800eda2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d004      	beq.n	800edb4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800edaa:	693a      	ldr	r2, [r7, #16]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	441a      	add	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800edb4:	4b06      	ldr	r3, [pc, #24]	; (800edd0 <cJSON_ParseWithLengthOpts+0x12c>)
 800edb6:	461a      	mov	r2, r3
 800edb8:	f107 0310 	add.w	r3, r7, #16
 800edbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800edc0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3738      	adds	r7, #56	; 0x38
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20002560 	.word	0x20002560
 800edd4:	2000013c 	.word	0x2000013c

0800edd8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800ede0:	2200      	movs	r2, #0
 800ede2:	2100      	movs	r1, #0
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7ff ff41 	bl	800ec6c <cJSON_ParseWithOpts>
 800edea:	4603      	mov	r3, r0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3708      	adds	r7, #8
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d003      	beq.n	800ee0c <parse_value+0x18>
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d101      	bne.n	800ee10 <parse_value+0x1c>
    {
        return false; /* no input */
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	e0d2      	b.n	800efb6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d01d      	beq.n	800ee52 <parse_value+0x5e>
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	1d1a      	adds	r2, r3, #4
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d816      	bhi.n	800ee52 <parse_value+0x5e>
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	2204      	movs	r2, #4
 800ee30:	4963      	ldr	r1, [pc, #396]	; (800efc0 <parse_value+0x1cc>)
 800ee32:	4618      	mov	r0, r3
 800ee34:	f000 fc6d 	bl	800f712 <strncmp>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d109      	bne.n	800ee52 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2204      	movs	r2, #4
 800ee42:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	1d1a      	adds	r2, r3, #4
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	609a      	str	r2, [r3, #8]
        return true;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e0b1      	b.n	800efb6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d01d      	beq.n	800ee94 <parse_value+0xa0>
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	1d5a      	adds	r2, r3, #5
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d816      	bhi.n	800ee94 <parse_value+0xa0>
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	689b      	ldr	r3, [r3, #8]
 800ee6e:	4413      	add	r3, r2
 800ee70:	2205      	movs	r2, #5
 800ee72:	4954      	ldr	r1, [pc, #336]	; (800efc4 <parse_value+0x1d0>)
 800ee74:	4618      	mov	r0, r3
 800ee76:	f000 fc4c 	bl	800f712 <strncmp>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d109      	bne.n	800ee94 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2201      	movs	r2, #1
 800ee84:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	1d5a      	adds	r2, r3, #5
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	609a      	str	r2, [r3, #8]
        return true;
 800ee90:	2301      	movs	r3, #1
 800ee92:	e090      	b.n	800efb6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d020      	beq.n	800eedc <parse_value+0xe8>
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	689b      	ldr	r3, [r3, #8]
 800ee9e:	1d1a      	adds	r2, r3, #4
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d819      	bhi.n	800eedc <parse_value+0xe8>
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	2204      	movs	r2, #4
 800eeb4:	4944      	ldr	r1, [pc, #272]	; (800efc8 <parse_value+0x1d4>)
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f000 fc2b 	bl	800f712 <strncmp>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10c      	bne.n	800eedc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2202      	movs	r2, #2
 800eec6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	1d1a      	adds	r2, r3, #4
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	609a      	str	r2, [r3, #8]
        return true;
 800eed8:	2301      	movs	r3, #1
 800eeda:	e06c      	b.n	800efb6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d013      	beq.n	800ef0a <parse_value+0x116>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	689a      	ldr	r2, [r3, #8]
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d20d      	bcs.n	800ef0a <parse_value+0x116>
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	4413      	add	r3, r2
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	2b22      	cmp	r3, #34	; 0x22
 800eefc:	d105      	bne.n	800ef0a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800eefe:	6839      	ldr	r1, [r7, #0]
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f7ff fcf9 	bl	800e8f8 <parse_string>
 800ef06:	4603      	mov	r3, r0
 800ef08:	e055      	b.n	800efb6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d023      	beq.n	800ef58 <parse_value+0x164>
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	689a      	ldr	r2, [r3, #8]
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d21d      	bcs.n	800ef58 <parse_value+0x164>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	4413      	add	r3, r2
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	2b2d      	cmp	r3, #45	; 0x2d
 800ef2a:	d00f      	beq.n	800ef4c <parse_value+0x158>
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	4413      	add	r3, r2
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	2b2f      	cmp	r3, #47	; 0x2f
 800ef3a:	d90d      	bls.n	800ef58 <parse_value+0x164>
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	4413      	add	r3, r2
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	2b39      	cmp	r3, #57	; 0x39
 800ef4a:	d805      	bhi.n	800ef58 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800ef4c:	6839      	ldr	r1, [r7, #0]
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7ff fa9a 	bl	800e488 <parse_number>
 800ef54:	4603      	mov	r3, r0
 800ef56:	e02e      	b.n	800efb6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d013      	beq.n	800ef86 <parse_value+0x192>
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	689a      	ldr	r2, [r3, #8]
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d20d      	bcs.n	800ef86 <parse_value+0x192>
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	4413      	add	r3, r2
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	2b5b      	cmp	r3, #91	; 0x5b
 800ef78:	d105      	bne.n	800ef86 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800ef7a:	6839      	ldr	r1, [r7, #0]
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 f825 	bl	800efcc <parse_array>
 800ef82:	4603      	mov	r3, r0
 800ef84:	e017      	b.n	800efb6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d013      	beq.n	800efb4 <parse_value+0x1c0>
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	689a      	ldr	r2, [r3, #8]
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d20d      	bcs.n	800efb4 <parse_value+0x1c0>
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	681a      	ldr	r2, [r3, #0]
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	4413      	add	r3, r2
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2b7b      	cmp	r3, #123	; 0x7b
 800efa6:	d105      	bne.n	800efb4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 f8d2 	bl	800f154 <parse_object>
 800efb0:	4603      	mov	r3, r0
 800efb2:	e000      	b.n	800efb6 <parse_value+0x1c2>
    }

    return false;
 800efb4:	2300      	movs	r3, #0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3708      	adds	r7, #8
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	080127bc 	.word	0x080127bc
 800efc4:	080127e8 	.word	0x080127e8
 800efc8:	080127f0 	.word	0x080127f0

0800efcc <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b086      	sub	sp, #24
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800efd6:	2300      	movs	r3, #0
 800efd8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800efda:	2300      	movs	r3, #0
 800efdc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800efe6:	d301      	bcc.n	800efec <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800efe8:	2300      	movs	r3, #0
 800efea:	e0af      	b.n	800f14c <parse_array+0x180>
    }
    input_buffer->depth++;
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	1c5a      	adds	r2, r3, #1
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	689b      	ldr	r3, [r3, #8]
 800effe:	4413      	add	r3, r2
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	2b5b      	cmp	r3, #91	; 0x5b
 800f004:	f040 8094 	bne.w	800f130 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	689b      	ldr	r3, [r3, #8]
 800f00c:	1c5a      	adds	r2, r3, #1
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f012:	6838      	ldr	r0, [r7, #0]
 800f014:	f7ff fdb6 	bl	800eb84 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00d      	beq.n	800f03a <parse_array+0x6e>
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	689a      	ldr	r2, [r3, #8]
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	429a      	cmp	r2, r3
 800f028:	d207      	bcs.n	800f03a <parse_array+0x6e>
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	4413      	add	r3, r2
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	2b5d      	cmp	r3, #93	; 0x5d
 800f038:	d061      	beq.n	800f0fe <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d005      	beq.n	800f04c <parse_array+0x80>
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	689a      	ldr	r2, [r3, #8]
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d305      	bcc.n	800f058 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	1e5a      	subs	r2, r3, #1
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	609a      	str	r2, [r3, #8]
        goto fail;
 800f056:	e072      	b.n	800f13e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	1e5a      	subs	r2, r3, #1
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	3310      	adds	r3, #16
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff f9a4 	bl	800e3b4 <cJSON_New_Item>
 800f06c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d05f      	beq.n	800f134 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d104      	bne.n	800f084 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	613b      	str	r3, [r7, #16]
 800f082:	e007      	b.n	800f094 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	68fa      	ldr	r2, [r7, #12]
 800f088:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	693a      	ldr	r2, [r7, #16]
 800f08e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	1c5a      	adds	r2, r3, #1
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f09e:	6838      	ldr	r0, [r7, #0]
 800f0a0:	f7ff fd70 	bl	800eb84 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f0a4:	6839      	ldr	r1, [r7, #0]
 800f0a6:	6938      	ldr	r0, [r7, #16]
 800f0a8:	f7ff fea4 	bl	800edf4 <parse_value>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d042      	beq.n	800f138 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f0b2:	6838      	ldr	r0, [r7, #0]
 800f0b4:	f7ff fd66 	bl	800eb84 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00d      	beq.n	800f0da <parse_array+0x10e>
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	689a      	ldr	r2, [r3, #8]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d207      	bcs.n	800f0da <parse_array+0x10e>
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	2b2c      	cmp	r3, #44	; 0x2c
 800f0d8:	d0c3      	beq.n	800f062 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d02d      	beq.n	800f13c <parse_array+0x170>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	689a      	ldr	r2, [r3, #8]
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d227      	bcs.n	800f13c <parse_array+0x170>
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	2b5d      	cmp	r3, #93	; 0x5d
 800f0fa:	d11f      	bne.n	800f13c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800f0fc:	e000      	b.n	800f100 <parse_array+0x134>
        goto success;
 800f0fe:	bf00      	nop
    input_buffer->depth--;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	1e5a      	subs	r2, r3, #1
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d002      	beq.n	800f116 <parse_array+0x14a>
        head->prev = current_item;
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2220      	movs	r2, #32
 800f11a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	697a      	ldr	r2, [r7, #20]
 800f120:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	689b      	ldr	r3, [r3, #8]
 800f126:	1c5a      	adds	r2, r3, #1
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	609a      	str	r2, [r3, #8]

    return true;
 800f12c:	2301      	movs	r3, #1
 800f12e:	e00d      	b.n	800f14c <parse_array+0x180>
        goto fail;
 800f130:	bf00      	nop
 800f132:	e004      	b.n	800f13e <parse_array+0x172>
            goto fail; /* allocation failure */
 800f134:	bf00      	nop
 800f136:	e002      	b.n	800f13e <parse_array+0x172>
            goto fail; /* failed to parse value */
 800f138:	bf00      	nop
 800f13a:	e000      	b.n	800f13e <parse_array+0x172>
        goto fail; /* expected end of array */
 800f13c:	bf00      	nop

fail:
    if (head != NULL)
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d002      	beq.n	800f14a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800f144:	6978      	ldr	r0, [r7, #20]
 800f146:	f7ff f94b 	bl	800e3e0 <cJSON_Delete>
    }

    return false;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3718      	adds	r7, #24
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b086      	sub	sp, #24
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800f15e:	2300      	movs	r3, #0
 800f160:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800f162:	2300      	movs	r3, #0
 800f164:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f16e:	d301      	bcc.n	800f174 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800f170:	2300      	movs	r3, #0
 800f172:	e0ea      	b.n	800f34a <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	1c5a      	adds	r2, r3, #1
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	f000 80d0 	beq.w	800f326 <parse_object+0x1d2>
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	689a      	ldr	r2, [r3, #8]
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	429a      	cmp	r2, r3
 800f190:	f080 80c9 	bcs.w	800f326 <parse_object+0x1d2>
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	4413      	add	r3, r2
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	2b7b      	cmp	r3, #123	; 0x7b
 800f1a2:	f040 80c0 	bne.w	800f326 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	689b      	ldr	r3, [r3, #8]
 800f1aa:	1c5a      	adds	r2, r3, #1
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800f1b0:	6838      	ldr	r0, [r7, #0]
 800f1b2:	f7ff fce7 	bl	800eb84 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00e      	beq.n	800f1da <parse_object+0x86>
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	689a      	ldr	r2, [r3, #8]
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d208      	bcs.n	800f1da <parse_object+0x86>
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	2b7d      	cmp	r3, #125	; 0x7d
 800f1d6:	f000 808d 	beq.w	800f2f4 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d005      	beq.n	800f1ec <parse_object+0x98>
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	689a      	ldr	r2, [r3, #8]
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d305      	bcc.n	800f1f8 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	689b      	ldr	r3, [r3, #8]
 800f1f0:	1e5a      	subs	r2, r3, #1
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	609a      	str	r2, [r3, #8]
        goto fail;
 800f1f6:	e0a1      	b.n	800f33c <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	689b      	ldr	r3, [r3, #8]
 800f1fc:	1e5a      	subs	r2, r3, #1
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	3310      	adds	r3, #16
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff f8d4 	bl	800e3b4 <cJSON_New_Item>
 800f20c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	f000 808a 	beq.w	800f32a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d104      	bne.n	800f226 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	617b      	str	r3, [r7, #20]
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	613b      	str	r3, [r7, #16]
 800f224:	e007      	b.n	800f236 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	693a      	ldr	r2, [r7, #16]
 800f230:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	1c5a      	adds	r2, r3, #1
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f240:	6838      	ldr	r0, [r7, #0]
 800f242:	f7ff fc9f 	bl	800eb84 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6938      	ldr	r0, [r7, #16]
 800f24a:	f7ff fb55 	bl	800e8f8 <parse_string>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d06c      	beq.n	800f32e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800f254:	6838      	ldr	r0, [r7, #0]
 800f256:	f7ff fc95 	bl	800eb84 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	691a      	ldr	r2, [r3, #16]
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	2200      	movs	r2, #0
 800f266:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d061      	beq.n	800f332 <parse_object+0x1de>
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	689a      	ldr	r2, [r3, #8]
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	429a      	cmp	r2, r3
 800f278:	d25b      	bcs.n	800f332 <parse_object+0x1de>
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	4413      	add	r3, r2
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	2b3a      	cmp	r3, #58	; 0x3a
 800f288:	d153      	bne.n	800f332 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	1c5a      	adds	r2, r3, #1
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800f294:	6838      	ldr	r0, [r7, #0]
 800f296:	f7ff fc75 	bl	800eb84 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800f29a:	6839      	ldr	r1, [r7, #0]
 800f29c:	6938      	ldr	r0, [r7, #16]
 800f29e:	f7ff fda9 	bl	800edf4 <parse_value>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d046      	beq.n	800f336 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800f2a8:	6838      	ldr	r0, [r7, #0]
 800f2aa:	f7ff fc6b 	bl	800eb84 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d00d      	beq.n	800f2d0 <parse_object+0x17c>
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	689a      	ldr	r2, [r3, #8]
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d207      	bcs.n	800f2d0 <parse_object+0x17c>
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	2b2c      	cmp	r3, #44	; 0x2c
 800f2ce:	d098      	beq.n	800f202 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d031      	beq.n	800f33a <parse_object+0x1e6>
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	689a      	ldr	r2, [r3, #8]
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d22b      	bcs.n	800f33a <parse_object+0x1e6>
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	2b7d      	cmp	r3, #125	; 0x7d
 800f2f0:	d123      	bne.n	800f33a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800f2f2:	e000      	b.n	800f2f6 <parse_object+0x1a2>
        goto success; /* empty object */
 800f2f4:	bf00      	nop
    input_buffer->depth--;
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	1e5a      	subs	r2, r3, #1
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d002      	beq.n	800f30c <parse_object+0x1b8>
        head->prev = current_item;
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	693a      	ldr	r2, [r7, #16]
 800f30a:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2240      	movs	r2, #64	; 0x40
 800f310:	60da      	str	r2, [r3, #12]
    item->child = head;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	697a      	ldr	r2, [r7, #20]
 800f316:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	1c5a      	adds	r2, r3, #1
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	609a      	str	r2, [r3, #8]
    return true;
 800f322:	2301      	movs	r3, #1
 800f324:	e011      	b.n	800f34a <parse_object+0x1f6>
        goto fail; /* not an object */
 800f326:	bf00      	nop
 800f328:	e008      	b.n	800f33c <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800f32a:	bf00      	nop
 800f32c:	e006      	b.n	800f33c <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800f32e:	bf00      	nop
 800f330:	e004      	b.n	800f33c <parse_object+0x1e8>
            goto fail; /* invalid object */
 800f332:	bf00      	nop
 800f334:	e002      	b.n	800f33c <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800f336:	bf00      	nop
 800f338:	e000      	b.n	800f33c <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800f33a:	bf00      	nop

fail:
    if (head != NULL)
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d002      	beq.n	800f348 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800f342:	6978      	ldr	r0, [r7, #20]
 800f344:	f7ff f84c 	bl	800e3e0 <cJSON_Delete>
    }

    return false;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3718      	adds	r7, #24
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800f352:	b580      	push	{r7, lr}
 800f354:	b086      	sub	sp, #24
 800f356:	af00      	add	r7, sp, #0
 800f358:	60f8      	str	r0, [r7, #12]
 800f35a:	60b9      	str	r1, [r7, #8]
 800f35c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800f35e:	2300      	movs	r3, #0
 800f360:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <get_object_item+0x1c>
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d101      	bne.n	800f372 <get_object_item+0x20>
    {
        return NULL;
 800f36e:	2300      	movs	r3, #0
 800f370:	e033      	b.n	800f3da <get_object_item+0x88>
    }

    current_element = object->child;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d017      	beq.n	800f3ae <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800f37e:	e002      	b.n	800f386 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d01c      	beq.n	800f3c6 <get_object_item+0x74>
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	6a1b      	ldr	r3, [r3, #32]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d018      	beq.n	800f3c6 <get_object_item+0x74>
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	6a1b      	ldr	r3, [r3, #32]
 800f398:	4619      	mov	r1, r3
 800f39a:	68b8      	ldr	r0, [r7, #8]
 800f39c:	f7f0 ff20 	bl	80001e0 <strcmp>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1ec      	bne.n	800f380 <get_object_item+0x2e>
 800f3a6:	e00e      	b.n	800f3c6 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d008      	beq.n	800f3c6 <get_object_item+0x74>
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	6a1b      	ldr	r3, [r3, #32]
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	68b8      	ldr	r0, [r7, #8]
 800f3bc:	f7fe ff8e 	bl	800e2dc <case_insensitive_strcmp>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d1f0      	bne.n	800f3a8 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d003      	beq.n	800f3d4 <get_object_item+0x82>
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	6a1b      	ldr	r3, [r3, #32]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d101      	bne.n	800f3d8 <get_object_item+0x86>
        return NULL;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	e000      	b.n	800f3da <get_object_item+0x88>
    }

    return current_element;
 800f3d8:	697b      	ldr	r3, [r7, #20]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3718      	adds	r7, #24
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b082      	sub	sp, #8
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
 800f3ea:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	6839      	ldr	r1, [r7, #0]
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7ff ffae 	bl	800f352 <get_object_item>
 800f3f6:	4603      	mov	r3, r0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <__errno>:
 800f400:	4b01      	ldr	r3, [pc, #4]	; (800f408 <__errno+0x8>)
 800f402:	6818      	ldr	r0, [r3, #0]
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	20000148 	.word	0x20000148

0800f40c <__libc_init_array>:
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	4d0d      	ldr	r5, [pc, #52]	; (800f444 <__libc_init_array+0x38>)
 800f410:	4c0d      	ldr	r4, [pc, #52]	; (800f448 <__libc_init_array+0x3c>)
 800f412:	1b64      	subs	r4, r4, r5
 800f414:	10a4      	asrs	r4, r4, #2
 800f416:	2600      	movs	r6, #0
 800f418:	42a6      	cmp	r6, r4
 800f41a:	d109      	bne.n	800f430 <__libc_init_array+0x24>
 800f41c:	4d0b      	ldr	r5, [pc, #44]	; (800f44c <__libc_init_array+0x40>)
 800f41e:	4c0c      	ldr	r4, [pc, #48]	; (800f450 <__libc_init_array+0x44>)
 800f420:	f003 f880 	bl	8012524 <_init>
 800f424:	1b64      	subs	r4, r4, r5
 800f426:	10a4      	asrs	r4, r4, #2
 800f428:	2600      	movs	r6, #0
 800f42a:	42a6      	cmp	r6, r4
 800f42c:	d105      	bne.n	800f43a <__libc_init_array+0x2e>
 800f42e:	bd70      	pop	{r4, r5, r6, pc}
 800f430:	f855 3b04 	ldr.w	r3, [r5], #4
 800f434:	4798      	blx	r3
 800f436:	3601      	adds	r6, #1
 800f438:	e7ee      	b.n	800f418 <__libc_init_array+0xc>
 800f43a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f43e:	4798      	blx	r3
 800f440:	3601      	adds	r6, #1
 800f442:	e7f2      	b.n	800f42a <__libc_init_array+0x1e>
 800f444:	08014334 	.word	0x08014334
 800f448:	08014334 	.word	0x08014334
 800f44c:	08014334 	.word	0x08014334
 800f450:	08014338 	.word	0x08014338

0800f454 <malloc>:
 800f454:	4b02      	ldr	r3, [pc, #8]	; (800f460 <malloc+0xc>)
 800f456:	4601      	mov	r1, r0
 800f458:	6818      	ldr	r0, [r3, #0]
 800f45a:	f000 b871 	b.w	800f540 <_malloc_r>
 800f45e:	bf00      	nop
 800f460:	20000148 	.word	0x20000148

0800f464 <free>:
 800f464:	4b02      	ldr	r3, [pc, #8]	; (800f470 <free+0xc>)
 800f466:	4601      	mov	r1, r0
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	f000 b819 	b.w	800f4a0 <_free_r>
 800f46e:	bf00      	nop
 800f470:	20000148 	.word	0x20000148

0800f474 <memcpy>:
 800f474:	440a      	add	r2, r1
 800f476:	4291      	cmp	r1, r2
 800f478:	f100 33ff 	add.w	r3, r0, #4294967295
 800f47c:	d100      	bne.n	800f480 <memcpy+0xc>
 800f47e:	4770      	bx	lr
 800f480:	b510      	push	{r4, lr}
 800f482:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f48a:	4291      	cmp	r1, r2
 800f48c:	d1f9      	bne.n	800f482 <memcpy+0xe>
 800f48e:	bd10      	pop	{r4, pc}

0800f490 <memset>:
 800f490:	4402      	add	r2, r0
 800f492:	4603      	mov	r3, r0
 800f494:	4293      	cmp	r3, r2
 800f496:	d100      	bne.n	800f49a <memset+0xa>
 800f498:	4770      	bx	lr
 800f49a:	f803 1b01 	strb.w	r1, [r3], #1
 800f49e:	e7f9      	b.n	800f494 <memset+0x4>

0800f4a0 <_free_r>:
 800f4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4a2:	2900      	cmp	r1, #0
 800f4a4:	d048      	beq.n	800f538 <_free_r+0x98>
 800f4a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4aa:	9001      	str	r0, [sp, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f1a1 0404 	sub.w	r4, r1, #4
 800f4b2:	bfb8      	it	lt
 800f4b4:	18e4      	addlt	r4, r4, r3
 800f4b6:	f001 fe05 	bl	80110c4 <__malloc_lock>
 800f4ba:	4a20      	ldr	r2, [pc, #128]	; (800f53c <_free_r+0x9c>)
 800f4bc:	9801      	ldr	r0, [sp, #4]
 800f4be:	6813      	ldr	r3, [r2, #0]
 800f4c0:	4615      	mov	r5, r2
 800f4c2:	b933      	cbnz	r3, 800f4d2 <_free_r+0x32>
 800f4c4:	6063      	str	r3, [r4, #4]
 800f4c6:	6014      	str	r4, [r2, #0]
 800f4c8:	b003      	add	sp, #12
 800f4ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4ce:	f001 bdff 	b.w	80110d0 <__malloc_unlock>
 800f4d2:	42a3      	cmp	r3, r4
 800f4d4:	d90b      	bls.n	800f4ee <_free_r+0x4e>
 800f4d6:	6821      	ldr	r1, [r4, #0]
 800f4d8:	1862      	adds	r2, r4, r1
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	bf04      	itt	eq
 800f4de:	681a      	ldreq	r2, [r3, #0]
 800f4e0:	685b      	ldreq	r3, [r3, #4]
 800f4e2:	6063      	str	r3, [r4, #4]
 800f4e4:	bf04      	itt	eq
 800f4e6:	1852      	addeq	r2, r2, r1
 800f4e8:	6022      	streq	r2, [r4, #0]
 800f4ea:	602c      	str	r4, [r5, #0]
 800f4ec:	e7ec      	b.n	800f4c8 <_free_r+0x28>
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	b10b      	cbz	r3, 800f4f8 <_free_r+0x58>
 800f4f4:	42a3      	cmp	r3, r4
 800f4f6:	d9fa      	bls.n	800f4ee <_free_r+0x4e>
 800f4f8:	6811      	ldr	r1, [r2, #0]
 800f4fa:	1855      	adds	r5, r2, r1
 800f4fc:	42a5      	cmp	r5, r4
 800f4fe:	d10b      	bne.n	800f518 <_free_r+0x78>
 800f500:	6824      	ldr	r4, [r4, #0]
 800f502:	4421      	add	r1, r4
 800f504:	1854      	adds	r4, r2, r1
 800f506:	42a3      	cmp	r3, r4
 800f508:	6011      	str	r1, [r2, #0]
 800f50a:	d1dd      	bne.n	800f4c8 <_free_r+0x28>
 800f50c:	681c      	ldr	r4, [r3, #0]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	6053      	str	r3, [r2, #4]
 800f512:	4421      	add	r1, r4
 800f514:	6011      	str	r1, [r2, #0]
 800f516:	e7d7      	b.n	800f4c8 <_free_r+0x28>
 800f518:	d902      	bls.n	800f520 <_free_r+0x80>
 800f51a:	230c      	movs	r3, #12
 800f51c:	6003      	str	r3, [r0, #0]
 800f51e:	e7d3      	b.n	800f4c8 <_free_r+0x28>
 800f520:	6825      	ldr	r5, [r4, #0]
 800f522:	1961      	adds	r1, r4, r5
 800f524:	428b      	cmp	r3, r1
 800f526:	bf04      	itt	eq
 800f528:	6819      	ldreq	r1, [r3, #0]
 800f52a:	685b      	ldreq	r3, [r3, #4]
 800f52c:	6063      	str	r3, [r4, #4]
 800f52e:	bf04      	itt	eq
 800f530:	1949      	addeq	r1, r1, r5
 800f532:	6021      	streq	r1, [r4, #0]
 800f534:	6054      	str	r4, [r2, #4]
 800f536:	e7c7      	b.n	800f4c8 <_free_r+0x28>
 800f538:	b003      	add	sp, #12
 800f53a:	bd30      	pop	{r4, r5, pc}
 800f53c:	20002568 	.word	0x20002568

0800f540 <_malloc_r>:
 800f540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f542:	1ccd      	adds	r5, r1, #3
 800f544:	f025 0503 	bic.w	r5, r5, #3
 800f548:	3508      	adds	r5, #8
 800f54a:	2d0c      	cmp	r5, #12
 800f54c:	bf38      	it	cc
 800f54e:	250c      	movcc	r5, #12
 800f550:	2d00      	cmp	r5, #0
 800f552:	4606      	mov	r6, r0
 800f554:	db01      	blt.n	800f55a <_malloc_r+0x1a>
 800f556:	42a9      	cmp	r1, r5
 800f558:	d903      	bls.n	800f562 <_malloc_r+0x22>
 800f55a:	230c      	movs	r3, #12
 800f55c:	6033      	str	r3, [r6, #0]
 800f55e:	2000      	movs	r0, #0
 800f560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f562:	f001 fdaf 	bl	80110c4 <__malloc_lock>
 800f566:	4921      	ldr	r1, [pc, #132]	; (800f5ec <_malloc_r+0xac>)
 800f568:	680a      	ldr	r2, [r1, #0]
 800f56a:	4614      	mov	r4, r2
 800f56c:	b99c      	cbnz	r4, 800f596 <_malloc_r+0x56>
 800f56e:	4f20      	ldr	r7, [pc, #128]	; (800f5f0 <_malloc_r+0xb0>)
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	b923      	cbnz	r3, 800f57e <_malloc_r+0x3e>
 800f574:	4621      	mov	r1, r4
 800f576:	4630      	mov	r0, r6
 800f578:	f000 f844 	bl	800f604 <_sbrk_r>
 800f57c:	6038      	str	r0, [r7, #0]
 800f57e:	4629      	mov	r1, r5
 800f580:	4630      	mov	r0, r6
 800f582:	f000 f83f 	bl	800f604 <_sbrk_r>
 800f586:	1c43      	adds	r3, r0, #1
 800f588:	d123      	bne.n	800f5d2 <_malloc_r+0x92>
 800f58a:	230c      	movs	r3, #12
 800f58c:	6033      	str	r3, [r6, #0]
 800f58e:	4630      	mov	r0, r6
 800f590:	f001 fd9e 	bl	80110d0 <__malloc_unlock>
 800f594:	e7e3      	b.n	800f55e <_malloc_r+0x1e>
 800f596:	6823      	ldr	r3, [r4, #0]
 800f598:	1b5b      	subs	r3, r3, r5
 800f59a:	d417      	bmi.n	800f5cc <_malloc_r+0x8c>
 800f59c:	2b0b      	cmp	r3, #11
 800f59e:	d903      	bls.n	800f5a8 <_malloc_r+0x68>
 800f5a0:	6023      	str	r3, [r4, #0]
 800f5a2:	441c      	add	r4, r3
 800f5a4:	6025      	str	r5, [r4, #0]
 800f5a6:	e004      	b.n	800f5b2 <_malloc_r+0x72>
 800f5a8:	6863      	ldr	r3, [r4, #4]
 800f5aa:	42a2      	cmp	r2, r4
 800f5ac:	bf0c      	ite	eq
 800f5ae:	600b      	streq	r3, [r1, #0]
 800f5b0:	6053      	strne	r3, [r2, #4]
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	f001 fd8c 	bl	80110d0 <__malloc_unlock>
 800f5b8:	f104 000b 	add.w	r0, r4, #11
 800f5bc:	1d23      	adds	r3, r4, #4
 800f5be:	f020 0007 	bic.w	r0, r0, #7
 800f5c2:	1ac2      	subs	r2, r0, r3
 800f5c4:	d0cc      	beq.n	800f560 <_malloc_r+0x20>
 800f5c6:	1a1b      	subs	r3, r3, r0
 800f5c8:	50a3      	str	r3, [r4, r2]
 800f5ca:	e7c9      	b.n	800f560 <_malloc_r+0x20>
 800f5cc:	4622      	mov	r2, r4
 800f5ce:	6864      	ldr	r4, [r4, #4]
 800f5d0:	e7cc      	b.n	800f56c <_malloc_r+0x2c>
 800f5d2:	1cc4      	adds	r4, r0, #3
 800f5d4:	f024 0403 	bic.w	r4, r4, #3
 800f5d8:	42a0      	cmp	r0, r4
 800f5da:	d0e3      	beq.n	800f5a4 <_malloc_r+0x64>
 800f5dc:	1a21      	subs	r1, r4, r0
 800f5de:	4630      	mov	r0, r6
 800f5e0:	f000 f810 	bl	800f604 <_sbrk_r>
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	d1dd      	bne.n	800f5a4 <_malloc_r+0x64>
 800f5e8:	e7cf      	b.n	800f58a <_malloc_r+0x4a>
 800f5ea:	bf00      	nop
 800f5ec:	20002568 	.word	0x20002568
 800f5f0:	2000256c 	.word	0x2000256c

0800f5f4 <realloc>:
 800f5f4:	4b02      	ldr	r3, [pc, #8]	; (800f600 <realloc+0xc>)
 800f5f6:	460a      	mov	r2, r1
 800f5f8:	4601      	mov	r1, r0
 800f5fa:	6818      	ldr	r0, [r3, #0]
 800f5fc:	f002 ba38 	b.w	8011a70 <_realloc_r>
 800f600:	20000148 	.word	0x20000148

0800f604 <_sbrk_r>:
 800f604:	b538      	push	{r3, r4, r5, lr}
 800f606:	4d06      	ldr	r5, [pc, #24]	; (800f620 <_sbrk_r+0x1c>)
 800f608:	2300      	movs	r3, #0
 800f60a:	4604      	mov	r4, r0
 800f60c:	4608      	mov	r0, r1
 800f60e:	602b      	str	r3, [r5, #0]
 800f610:	f7f3 f996 	bl	8002940 <_sbrk>
 800f614:	1c43      	adds	r3, r0, #1
 800f616:	d102      	bne.n	800f61e <_sbrk_r+0x1a>
 800f618:	682b      	ldr	r3, [r5, #0]
 800f61a:	b103      	cbz	r3, 800f61e <_sbrk_r+0x1a>
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	bd38      	pop	{r3, r4, r5, pc}
 800f620:	200038c0 	.word	0x200038c0

0800f624 <sniprintf>:
 800f624:	b40c      	push	{r2, r3}
 800f626:	b530      	push	{r4, r5, lr}
 800f628:	4b17      	ldr	r3, [pc, #92]	; (800f688 <sniprintf+0x64>)
 800f62a:	1e0c      	subs	r4, r1, #0
 800f62c:	681d      	ldr	r5, [r3, #0]
 800f62e:	b09d      	sub	sp, #116	; 0x74
 800f630:	da08      	bge.n	800f644 <sniprintf+0x20>
 800f632:	238b      	movs	r3, #139	; 0x8b
 800f634:	602b      	str	r3, [r5, #0]
 800f636:	f04f 30ff 	mov.w	r0, #4294967295
 800f63a:	b01d      	add	sp, #116	; 0x74
 800f63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f640:	b002      	add	sp, #8
 800f642:	4770      	bx	lr
 800f644:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f648:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f64c:	bf14      	ite	ne
 800f64e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f652:	4623      	moveq	r3, r4
 800f654:	9304      	str	r3, [sp, #16]
 800f656:	9307      	str	r3, [sp, #28]
 800f658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f65c:	9002      	str	r0, [sp, #8]
 800f65e:	9006      	str	r0, [sp, #24]
 800f660:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f664:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f666:	ab21      	add	r3, sp, #132	; 0x84
 800f668:	a902      	add	r1, sp, #8
 800f66a:	4628      	mov	r0, r5
 800f66c:	9301      	str	r3, [sp, #4]
 800f66e:	f002 fa81 	bl	8011b74 <_svfiprintf_r>
 800f672:	1c43      	adds	r3, r0, #1
 800f674:	bfbc      	itt	lt
 800f676:	238b      	movlt	r3, #139	; 0x8b
 800f678:	602b      	strlt	r3, [r5, #0]
 800f67a:	2c00      	cmp	r4, #0
 800f67c:	d0dd      	beq.n	800f63a <sniprintf+0x16>
 800f67e:	9b02      	ldr	r3, [sp, #8]
 800f680:	2200      	movs	r2, #0
 800f682:	701a      	strb	r2, [r3, #0]
 800f684:	e7d9      	b.n	800f63a <sniprintf+0x16>
 800f686:	bf00      	nop
 800f688:	20000148 	.word	0x20000148

0800f68c <__sread>:
 800f68c:	b510      	push	{r4, lr}
 800f68e:	460c      	mov	r4, r1
 800f690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f694:	f002 fe5c 	bl	8012350 <_read_r>
 800f698:	2800      	cmp	r0, #0
 800f69a:	bfab      	itete	ge
 800f69c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f69e:	89a3      	ldrhlt	r3, [r4, #12]
 800f6a0:	181b      	addge	r3, r3, r0
 800f6a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6a6:	bfac      	ite	ge
 800f6a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6aa:	81a3      	strhlt	r3, [r4, #12]
 800f6ac:	bd10      	pop	{r4, pc}

0800f6ae <__swrite>:
 800f6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b2:	461f      	mov	r7, r3
 800f6b4:	898b      	ldrh	r3, [r1, #12]
 800f6b6:	05db      	lsls	r3, r3, #23
 800f6b8:	4605      	mov	r5, r0
 800f6ba:	460c      	mov	r4, r1
 800f6bc:	4616      	mov	r6, r2
 800f6be:	d505      	bpl.n	800f6cc <__swrite+0x1e>
 800f6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c4:	2302      	movs	r3, #2
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f001 fc74 	bl	8010fb4 <_lseek_r>
 800f6cc:	89a3      	ldrh	r3, [r4, #12]
 800f6ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6d6:	81a3      	strh	r3, [r4, #12]
 800f6d8:	4632      	mov	r2, r6
 800f6da:	463b      	mov	r3, r7
 800f6dc:	4628      	mov	r0, r5
 800f6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e2:	f000 bead 	b.w	8010440 <_write_r>

0800f6e6 <__sseek>:
 800f6e6:	b510      	push	{r4, lr}
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ee:	f001 fc61 	bl	8010fb4 <_lseek_r>
 800f6f2:	1c43      	adds	r3, r0, #1
 800f6f4:	89a3      	ldrh	r3, [r4, #12]
 800f6f6:	bf15      	itete	ne
 800f6f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f702:	81a3      	strheq	r3, [r4, #12]
 800f704:	bf18      	it	ne
 800f706:	81a3      	strhne	r3, [r4, #12]
 800f708:	bd10      	pop	{r4, pc}

0800f70a <__sclose>:
 800f70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f70e:	f000 bf17 	b.w	8010540 <_close_r>

0800f712 <strncmp>:
 800f712:	b510      	push	{r4, lr}
 800f714:	b16a      	cbz	r2, 800f732 <strncmp+0x20>
 800f716:	3901      	subs	r1, #1
 800f718:	1884      	adds	r4, r0, r2
 800f71a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f71e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f722:	4293      	cmp	r3, r2
 800f724:	d103      	bne.n	800f72e <strncmp+0x1c>
 800f726:	42a0      	cmp	r0, r4
 800f728:	d001      	beq.n	800f72e <strncmp+0x1c>
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1f5      	bne.n	800f71a <strncmp+0x8>
 800f72e:	1a98      	subs	r0, r3, r2
 800f730:	bd10      	pop	{r4, pc}
 800f732:	4610      	mov	r0, r2
 800f734:	e7fc      	b.n	800f730 <strncmp+0x1e>

0800f736 <sulp>:
 800f736:	b570      	push	{r4, r5, r6, lr}
 800f738:	4604      	mov	r4, r0
 800f73a:	460d      	mov	r5, r1
 800f73c:	ec45 4b10 	vmov	d0, r4, r5
 800f740:	4616      	mov	r6, r2
 800f742:	f002 f837 	bl	80117b4 <__ulp>
 800f746:	ec51 0b10 	vmov	r0, r1, d0
 800f74a:	b17e      	cbz	r6, 800f76c <sulp+0x36>
 800f74c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f750:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f754:	2b00      	cmp	r3, #0
 800f756:	dd09      	ble.n	800f76c <sulp+0x36>
 800f758:	051b      	lsls	r3, r3, #20
 800f75a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f75e:	2400      	movs	r4, #0
 800f760:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f764:	4622      	mov	r2, r4
 800f766:	462b      	mov	r3, r5
 800f768:	f7f0 ff5e 	bl	8000628 <__aeabi_dmul>
 800f76c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f770 <_strtod_l>:
 800f770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f774:	b0a3      	sub	sp, #140	; 0x8c
 800f776:	461f      	mov	r7, r3
 800f778:	2300      	movs	r3, #0
 800f77a:	931e      	str	r3, [sp, #120]	; 0x78
 800f77c:	4ba4      	ldr	r3, [pc, #656]	; (800fa10 <_strtod_l+0x2a0>)
 800f77e:	9219      	str	r2, [sp, #100]	; 0x64
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	9307      	str	r3, [sp, #28]
 800f784:	4604      	mov	r4, r0
 800f786:	4618      	mov	r0, r3
 800f788:	4688      	mov	r8, r1
 800f78a:	f7f0 fd33 	bl	80001f4 <strlen>
 800f78e:	f04f 0a00 	mov.w	sl, #0
 800f792:	4605      	mov	r5, r0
 800f794:	f04f 0b00 	mov.w	fp, #0
 800f798:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f79c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f79e:	781a      	ldrb	r2, [r3, #0]
 800f7a0:	2a2b      	cmp	r2, #43	; 0x2b
 800f7a2:	d04c      	beq.n	800f83e <_strtod_l+0xce>
 800f7a4:	d839      	bhi.n	800f81a <_strtod_l+0xaa>
 800f7a6:	2a0d      	cmp	r2, #13
 800f7a8:	d832      	bhi.n	800f810 <_strtod_l+0xa0>
 800f7aa:	2a08      	cmp	r2, #8
 800f7ac:	d832      	bhi.n	800f814 <_strtod_l+0xa4>
 800f7ae:	2a00      	cmp	r2, #0
 800f7b0:	d03c      	beq.n	800f82c <_strtod_l+0xbc>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	930e      	str	r3, [sp, #56]	; 0x38
 800f7b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f7b8:	7833      	ldrb	r3, [r6, #0]
 800f7ba:	2b30      	cmp	r3, #48	; 0x30
 800f7bc:	f040 80b4 	bne.w	800f928 <_strtod_l+0x1b8>
 800f7c0:	7873      	ldrb	r3, [r6, #1]
 800f7c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f7c6:	2b58      	cmp	r3, #88	; 0x58
 800f7c8:	d16c      	bne.n	800f8a4 <_strtod_l+0x134>
 800f7ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7cc:	9301      	str	r3, [sp, #4]
 800f7ce:	ab1e      	add	r3, sp, #120	; 0x78
 800f7d0:	9702      	str	r7, [sp, #8]
 800f7d2:	9300      	str	r3, [sp, #0]
 800f7d4:	4a8f      	ldr	r2, [pc, #572]	; (800fa14 <_strtod_l+0x2a4>)
 800f7d6:	ab1f      	add	r3, sp, #124	; 0x7c
 800f7d8:	a91d      	add	r1, sp, #116	; 0x74
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f001 f8de 	bl	801099c <__gethex>
 800f7e0:	f010 0707 	ands.w	r7, r0, #7
 800f7e4:	4605      	mov	r5, r0
 800f7e6:	d005      	beq.n	800f7f4 <_strtod_l+0x84>
 800f7e8:	2f06      	cmp	r7, #6
 800f7ea:	d12a      	bne.n	800f842 <_strtod_l+0xd2>
 800f7ec:	3601      	adds	r6, #1
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	961d      	str	r6, [sp, #116]	; 0x74
 800f7f2:	930e      	str	r3, [sp, #56]	; 0x38
 800f7f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f040 8596 	bne.w	8010328 <_strtod_l+0xbb8>
 800f7fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7fe:	b1db      	cbz	r3, 800f838 <_strtod_l+0xc8>
 800f800:	4652      	mov	r2, sl
 800f802:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f806:	ec43 2b10 	vmov	d0, r2, r3
 800f80a:	b023      	add	sp, #140	; 0x8c
 800f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f810:	2a20      	cmp	r2, #32
 800f812:	d1ce      	bne.n	800f7b2 <_strtod_l+0x42>
 800f814:	3301      	adds	r3, #1
 800f816:	931d      	str	r3, [sp, #116]	; 0x74
 800f818:	e7c0      	b.n	800f79c <_strtod_l+0x2c>
 800f81a:	2a2d      	cmp	r2, #45	; 0x2d
 800f81c:	d1c9      	bne.n	800f7b2 <_strtod_l+0x42>
 800f81e:	2201      	movs	r2, #1
 800f820:	920e      	str	r2, [sp, #56]	; 0x38
 800f822:	1c5a      	adds	r2, r3, #1
 800f824:	921d      	str	r2, [sp, #116]	; 0x74
 800f826:	785b      	ldrb	r3, [r3, #1]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d1c4      	bne.n	800f7b6 <_strtod_l+0x46>
 800f82c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f82e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f832:	2b00      	cmp	r3, #0
 800f834:	f040 8576 	bne.w	8010324 <_strtod_l+0xbb4>
 800f838:	4652      	mov	r2, sl
 800f83a:	465b      	mov	r3, fp
 800f83c:	e7e3      	b.n	800f806 <_strtod_l+0x96>
 800f83e:	2200      	movs	r2, #0
 800f840:	e7ee      	b.n	800f820 <_strtod_l+0xb0>
 800f842:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f844:	b13a      	cbz	r2, 800f856 <_strtod_l+0xe6>
 800f846:	2135      	movs	r1, #53	; 0x35
 800f848:	a820      	add	r0, sp, #128	; 0x80
 800f84a:	f002 f8be 	bl	80119ca <__copybits>
 800f84e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f850:	4620      	mov	r0, r4
 800f852:	f001 fc83 	bl	801115c <_Bfree>
 800f856:	3f01      	subs	r7, #1
 800f858:	2f05      	cmp	r7, #5
 800f85a:	d807      	bhi.n	800f86c <_strtod_l+0xfc>
 800f85c:	e8df f007 	tbb	[pc, r7]
 800f860:	1d180b0e 	.word	0x1d180b0e
 800f864:	030e      	.short	0x030e
 800f866:	f04f 0b00 	mov.w	fp, #0
 800f86a:	46da      	mov	sl, fp
 800f86c:	0728      	lsls	r0, r5, #28
 800f86e:	d5c1      	bpl.n	800f7f4 <_strtod_l+0x84>
 800f870:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f874:	e7be      	b.n	800f7f4 <_strtod_l+0x84>
 800f876:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f87a:	e7f7      	b.n	800f86c <_strtod_l+0xfc>
 800f87c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f880:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f882:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f886:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f88a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f88e:	e7ed      	b.n	800f86c <_strtod_l+0xfc>
 800f890:	f8df b184 	ldr.w	fp, [pc, #388]	; 800fa18 <_strtod_l+0x2a8>
 800f894:	f04f 0a00 	mov.w	sl, #0
 800f898:	e7e8      	b.n	800f86c <_strtod_l+0xfc>
 800f89a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f89e:	f04f 3aff 	mov.w	sl, #4294967295
 800f8a2:	e7e3      	b.n	800f86c <_strtod_l+0xfc>
 800f8a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8a6:	1c5a      	adds	r2, r3, #1
 800f8a8:	921d      	str	r2, [sp, #116]	; 0x74
 800f8aa:	785b      	ldrb	r3, [r3, #1]
 800f8ac:	2b30      	cmp	r3, #48	; 0x30
 800f8ae:	d0f9      	beq.n	800f8a4 <_strtod_l+0x134>
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d09f      	beq.n	800f7f4 <_strtod_l+0x84>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	f04f 0900 	mov.w	r9, #0
 800f8ba:	9304      	str	r3, [sp, #16]
 800f8bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8be:	930a      	str	r3, [sp, #40]	; 0x28
 800f8c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f8c4:	464f      	mov	r7, r9
 800f8c6:	220a      	movs	r2, #10
 800f8c8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f8ca:	7806      	ldrb	r6, [r0, #0]
 800f8cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f8d0:	b2d9      	uxtb	r1, r3
 800f8d2:	2909      	cmp	r1, #9
 800f8d4:	d92a      	bls.n	800f92c <_strtod_l+0x1bc>
 800f8d6:	9907      	ldr	r1, [sp, #28]
 800f8d8:	462a      	mov	r2, r5
 800f8da:	f7ff ff1a 	bl	800f712 <strncmp>
 800f8de:	b398      	cbz	r0, 800f948 <_strtod_l+0x1d8>
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	4633      	mov	r3, r6
 800f8e4:	463d      	mov	r5, r7
 800f8e6:	9007      	str	r0, [sp, #28]
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	2b65      	cmp	r3, #101	; 0x65
 800f8ec:	d001      	beq.n	800f8f2 <_strtod_l+0x182>
 800f8ee:	2b45      	cmp	r3, #69	; 0x45
 800f8f0:	d118      	bne.n	800f924 <_strtod_l+0x1b4>
 800f8f2:	b91d      	cbnz	r5, 800f8fc <_strtod_l+0x18c>
 800f8f4:	9b04      	ldr	r3, [sp, #16]
 800f8f6:	4303      	orrs	r3, r0
 800f8f8:	d098      	beq.n	800f82c <_strtod_l+0xbc>
 800f8fa:	2500      	movs	r5, #0
 800f8fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f900:	f108 0301 	add.w	r3, r8, #1
 800f904:	931d      	str	r3, [sp, #116]	; 0x74
 800f906:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f90a:	2b2b      	cmp	r3, #43	; 0x2b
 800f90c:	d075      	beq.n	800f9fa <_strtod_l+0x28a>
 800f90e:	2b2d      	cmp	r3, #45	; 0x2d
 800f910:	d07b      	beq.n	800fa0a <_strtod_l+0x29a>
 800f912:	f04f 0c00 	mov.w	ip, #0
 800f916:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f91a:	2909      	cmp	r1, #9
 800f91c:	f240 8082 	bls.w	800fa24 <_strtod_l+0x2b4>
 800f920:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f924:	2600      	movs	r6, #0
 800f926:	e09d      	b.n	800fa64 <_strtod_l+0x2f4>
 800f928:	2300      	movs	r3, #0
 800f92a:	e7c4      	b.n	800f8b6 <_strtod_l+0x146>
 800f92c:	2f08      	cmp	r7, #8
 800f92e:	bfd8      	it	le
 800f930:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f932:	f100 0001 	add.w	r0, r0, #1
 800f936:	bfda      	itte	le
 800f938:	fb02 3301 	mlale	r3, r2, r1, r3
 800f93c:	9309      	strle	r3, [sp, #36]	; 0x24
 800f93e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f942:	3701      	adds	r7, #1
 800f944:	901d      	str	r0, [sp, #116]	; 0x74
 800f946:	e7bf      	b.n	800f8c8 <_strtod_l+0x158>
 800f948:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f94a:	195a      	adds	r2, r3, r5
 800f94c:	921d      	str	r2, [sp, #116]	; 0x74
 800f94e:	5d5b      	ldrb	r3, [r3, r5]
 800f950:	2f00      	cmp	r7, #0
 800f952:	d037      	beq.n	800f9c4 <_strtod_l+0x254>
 800f954:	9007      	str	r0, [sp, #28]
 800f956:	463d      	mov	r5, r7
 800f958:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f95c:	2a09      	cmp	r2, #9
 800f95e:	d912      	bls.n	800f986 <_strtod_l+0x216>
 800f960:	2201      	movs	r2, #1
 800f962:	e7c2      	b.n	800f8ea <_strtod_l+0x17a>
 800f964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f966:	1c5a      	adds	r2, r3, #1
 800f968:	921d      	str	r2, [sp, #116]	; 0x74
 800f96a:	785b      	ldrb	r3, [r3, #1]
 800f96c:	3001      	adds	r0, #1
 800f96e:	2b30      	cmp	r3, #48	; 0x30
 800f970:	d0f8      	beq.n	800f964 <_strtod_l+0x1f4>
 800f972:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f976:	2a08      	cmp	r2, #8
 800f978:	f200 84db 	bhi.w	8010332 <_strtod_l+0xbc2>
 800f97c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f97e:	9007      	str	r0, [sp, #28]
 800f980:	2000      	movs	r0, #0
 800f982:	920a      	str	r2, [sp, #40]	; 0x28
 800f984:	4605      	mov	r5, r0
 800f986:	3b30      	subs	r3, #48	; 0x30
 800f988:	f100 0201 	add.w	r2, r0, #1
 800f98c:	d014      	beq.n	800f9b8 <_strtod_l+0x248>
 800f98e:	9907      	ldr	r1, [sp, #28]
 800f990:	4411      	add	r1, r2
 800f992:	9107      	str	r1, [sp, #28]
 800f994:	462a      	mov	r2, r5
 800f996:	eb00 0e05 	add.w	lr, r0, r5
 800f99a:	210a      	movs	r1, #10
 800f99c:	4572      	cmp	r2, lr
 800f99e:	d113      	bne.n	800f9c8 <_strtod_l+0x258>
 800f9a0:	182a      	adds	r2, r5, r0
 800f9a2:	2a08      	cmp	r2, #8
 800f9a4:	f105 0501 	add.w	r5, r5, #1
 800f9a8:	4405      	add	r5, r0
 800f9aa:	dc1c      	bgt.n	800f9e6 <_strtod_l+0x276>
 800f9ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f9ae:	220a      	movs	r2, #10
 800f9b0:	fb02 3301 	mla	r3, r2, r1, r3
 800f9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9ba:	1c59      	adds	r1, r3, #1
 800f9bc:	911d      	str	r1, [sp, #116]	; 0x74
 800f9be:	785b      	ldrb	r3, [r3, #1]
 800f9c0:	4610      	mov	r0, r2
 800f9c2:	e7c9      	b.n	800f958 <_strtod_l+0x1e8>
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	e7d2      	b.n	800f96e <_strtod_l+0x1fe>
 800f9c8:	2a08      	cmp	r2, #8
 800f9ca:	dc04      	bgt.n	800f9d6 <_strtod_l+0x266>
 800f9cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f9ce:	434e      	muls	r6, r1
 800f9d0:	9609      	str	r6, [sp, #36]	; 0x24
 800f9d2:	3201      	adds	r2, #1
 800f9d4:	e7e2      	b.n	800f99c <_strtod_l+0x22c>
 800f9d6:	f102 0c01 	add.w	ip, r2, #1
 800f9da:	f1bc 0f10 	cmp.w	ip, #16
 800f9de:	bfd8      	it	le
 800f9e0:	fb01 f909 	mulle.w	r9, r1, r9
 800f9e4:	e7f5      	b.n	800f9d2 <_strtod_l+0x262>
 800f9e6:	2d10      	cmp	r5, #16
 800f9e8:	bfdc      	itt	le
 800f9ea:	220a      	movle	r2, #10
 800f9ec:	fb02 3909 	mlale	r9, r2, r9, r3
 800f9f0:	e7e1      	b.n	800f9b6 <_strtod_l+0x246>
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	9307      	str	r3, [sp, #28]
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	e77c      	b.n	800f8f4 <_strtod_l+0x184>
 800f9fa:	f04f 0c00 	mov.w	ip, #0
 800f9fe:	f108 0302 	add.w	r3, r8, #2
 800fa02:	931d      	str	r3, [sp, #116]	; 0x74
 800fa04:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fa08:	e785      	b.n	800f916 <_strtod_l+0x1a6>
 800fa0a:	f04f 0c01 	mov.w	ip, #1
 800fa0e:	e7f6      	b.n	800f9fe <_strtod_l+0x28e>
 800fa10:	08014134 	.word	0x08014134
 800fa14:	08014008 	.word	0x08014008
 800fa18:	7ff00000 	.word	0x7ff00000
 800fa1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa1e:	1c59      	adds	r1, r3, #1
 800fa20:	911d      	str	r1, [sp, #116]	; 0x74
 800fa22:	785b      	ldrb	r3, [r3, #1]
 800fa24:	2b30      	cmp	r3, #48	; 0x30
 800fa26:	d0f9      	beq.n	800fa1c <_strtod_l+0x2ac>
 800fa28:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800fa2c:	2908      	cmp	r1, #8
 800fa2e:	f63f af79 	bhi.w	800f924 <_strtod_l+0x1b4>
 800fa32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fa36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa38:	9308      	str	r3, [sp, #32]
 800fa3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa3c:	1c59      	adds	r1, r3, #1
 800fa3e:	911d      	str	r1, [sp, #116]	; 0x74
 800fa40:	785b      	ldrb	r3, [r3, #1]
 800fa42:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800fa46:	2e09      	cmp	r6, #9
 800fa48:	d937      	bls.n	800faba <_strtod_l+0x34a>
 800fa4a:	9e08      	ldr	r6, [sp, #32]
 800fa4c:	1b89      	subs	r1, r1, r6
 800fa4e:	2908      	cmp	r1, #8
 800fa50:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fa54:	dc02      	bgt.n	800fa5c <_strtod_l+0x2ec>
 800fa56:	4576      	cmp	r6, lr
 800fa58:	bfa8      	it	ge
 800fa5a:	4676      	movge	r6, lr
 800fa5c:	f1bc 0f00 	cmp.w	ip, #0
 800fa60:	d000      	beq.n	800fa64 <_strtod_l+0x2f4>
 800fa62:	4276      	negs	r6, r6
 800fa64:	2d00      	cmp	r5, #0
 800fa66:	d14f      	bne.n	800fb08 <_strtod_l+0x398>
 800fa68:	9904      	ldr	r1, [sp, #16]
 800fa6a:	4301      	orrs	r1, r0
 800fa6c:	f47f aec2 	bne.w	800f7f4 <_strtod_l+0x84>
 800fa70:	2a00      	cmp	r2, #0
 800fa72:	f47f aedb 	bne.w	800f82c <_strtod_l+0xbc>
 800fa76:	2b69      	cmp	r3, #105	; 0x69
 800fa78:	d027      	beq.n	800faca <_strtod_l+0x35a>
 800fa7a:	dc24      	bgt.n	800fac6 <_strtod_l+0x356>
 800fa7c:	2b49      	cmp	r3, #73	; 0x49
 800fa7e:	d024      	beq.n	800faca <_strtod_l+0x35a>
 800fa80:	2b4e      	cmp	r3, #78	; 0x4e
 800fa82:	f47f aed3 	bne.w	800f82c <_strtod_l+0xbc>
 800fa86:	499e      	ldr	r1, [pc, #632]	; (800fd00 <_strtod_l+0x590>)
 800fa88:	a81d      	add	r0, sp, #116	; 0x74
 800fa8a:	f001 f9df 	bl	8010e4c <__match>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	f43f aecc 	beq.w	800f82c <_strtod_l+0xbc>
 800fa94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	2b28      	cmp	r3, #40	; 0x28
 800fa9a:	d12d      	bne.n	800faf8 <_strtod_l+0x388>
 800fa9c:	4999      	ldr	r1, [pc, #612]	; (800fd04 <_strtod_l+0x594>)
 800fa9e:	aa20      	add	r2, sp, #128	; 0x80
 800faa0:	a81d      	add	r0, sp, #116	; 0x74
 800faa2:	f001 f9e7 	bl	8010e74 <__hexnan>
 800faa6:	2805      	cmp	r0, #5
 800faa8:	d126      	bne.n	800faf8 <_strtod_l+0x388>
 800faaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800faac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800fab0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fab4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fab8:	e69c      	b.n	800f7f4 <_strtod_l+0x84>
 800faba:	210a      	movs	r1, #10
 800fabc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fac0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fac4:	e7b9      	b.n	800fa3a <_strtod_l+0x2ca>
 800fac6:	2b6e      	cmp	r3, #110	; 0x6e
 800fac8:	e7db      	b.n	800fa82 <_strtod_l+0x312>
 800faca:	498f      	ldr	r1, [pc, #572]	; (800fd08 <_strtod_l+0x598>)
 800facc:	a81d      	add	r0, sp, #116	; 0x74
 800face:	f001 f9bd 	bl	8010e4c <__match>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	f43f aeaa 	beq.w	800f82c <_strtod_l+0xbc>
 800fad8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fada:	498c      	ldr	r1, [pc, #560]	; (800fd0c <_strtod_l+0x59c>)
 800fadc:	3b01      	subs	r3, #1
 800fade:	a81d      	add	r0, sp, #116	; 0x74
 800fae0:	931d      	str	r3, [sp, #116]	; 0x74
 800fae2:	f001 f9b3 	bl	8010e4c <__match>
 800fae6:	b910      	cbnz	r0, 800faee <_strtod_l+0x37e>
 800fae8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800faea:	3301      	adds	r3, #1
 800faec:	931d      	str	r3, [sp, #116]	; 0x74
 800faee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800fd1c <_strtod_l+0x5ac>
 800faf2:	f04f 0a00 	mov.w	sl, #0
 800faf6:	e67d      	b.n	800f7f4 <_strtod_l+0x84>
 800faf8:	4885      	ldr	r0, [pc, #532]	; (800fd10 <_strtod_l+0x5a0>)
 800fafa:	f002 fc3d 	bl	8012378 <nan>
 800fafe:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fb02:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fb06:	e675      	b.n	800f7f4 <_strtod_l+0x84>
 800fb08:	9b07      	ldr	r3, [sp, #28]
 800fb0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb0c:	1af3      	subs	r3, r6, r3
 800fb0e:	2f00      	cmp	r7, #0
 800fb10:	bf08      	it	eq
 800fb12:	462f      	moveq	r7, r5
 800fb14:	2d10      	cmp	r5, #16
 800fb16:	9308      	str	r3, [sp, #32]
 800fb18:	46a8      	mov	r8, r5
 800fb1a:	bfa8      	it	ge
 800fb1c:	f04f 0810 	movge.w	r8, #16
 800fb20:	f7f0 fd08 	bl	8000534 <__aeabi_ui2d>
 800fb24:	2d09      	cmp	r5, #9
 800fb26:	4682      	mov	sl, r0
 800fb28:	468b      	mov	fp, r1
 800fb2a:	dd13      	ble.n	800fb54 <_strtod_l+0x3e4>
 800fb2c:	4b79      	ldr	r3, [pc, #484]	; (800fd14 <_strtod_l+0x5a4>)
 800fb2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fb32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fb36:	f7f0 fd77 	bl	8000628 <__aeabi_dmul>
 800fb3a:	4682      	mov	sl, r0
 800fb3c:	4648      	mov	r0, r9
 800fb3e:	468b      	mov	fp, r1
 800fb40:	f7f0 fcf8 	bl	8000534 <__aeabi_ui2d>
 800fb44:	4602      	mov	r2, r0
 800fb46:	460b      	mov	r3, r1
 800fb48:	4650      	mov	r0, sl
 800fb4a:	4659      	mov	r1, fp
 800fb4c:	f7f0 fbb6 	bl	80002bc <__adddf3>
 800fb50:	4682      	mov	sl, r0
 800fb52:	468b      	mov	fp, r1
 800fb54:	2d0f      	cmp	r5, #15
 800fb56:	dc38      	bgt.n	800fbca <_strtod_l+0x45a>
 800fb58:	9b08      	ldr	r3, [sp, #32]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f43f ae4a 	beq.w	800f7f4 <_strtod_l+0x84>
 800fb60:	dd24      	ble.n	800fbac <_strtod_l+0x43c>
 800fb62:	2b16      	cmp	r3, #22
 800fb64:	dc0b      	bgt.n	800fb7e <_strtod_l+0x40e>
 800fb66:	4d6b      	ldr	r5, [pc, #428]	; (800fd14 <_strtod_l+0x5a4>)
 800fb68:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fb6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fb70:	4652      	mov	r2, sl
 800fb72:	465b      	mov	r3, fp
 800fb74:	f7f0 fd58 	bl	8000628 <__aeabi_dmul>
 800fb78:	4682      	mov	sl, r0
 800fb7a:	468b      	mov	fp, r1
 800fb7c:	e63a      	b.n	800f7f4 <_strtod_l+0x84>
 800fb7e:	9a08      	ldr	r2, [sp, #32]
 800fb80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fb84:	4293      	cmp	r3, r2
 800fb86:	db20      	blt.n	800fbca <_strtod_l+0x45a>
 800fb88:	4c62      	ldr	r4, [pc, #392]	; (800fd14 <_strtod_l+0x5a4>)
 800fb8a:	f1c5 050f 	rsb	r5, r5, #15
 800fb8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fb92:	4652      	mov	r2, sl
 800fb94:	465b      	mov	r3, fp
 800fb96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb9a:	f7f0 fd45 	bl	8000628 <__aeabi_dmul>
 800fb9e:	9b08      	ldr	r3, [sp, #32]
 800fba0:	1b5d      	subs	r5, r3, r5
 800fba2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fba6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fbaa:	e7e3      	b.n	800fb74 <_strtod_l+0x404>
 800fbac:	9b08      	ldr	r3, [sp, #32]
 800fbae:	3316      	adds	r3, #22
 800fbb0:	db0b      	blt.n	800fbca <_strtod_l+0x45a>
 800fbb2:	9b07      	ldr	r3, [sp, #28]
 800fbb4:	4a57      	ldr	r2, [pc, #348]	; (800fd14 <_strtod_l+0x5a4>)
 800fbb6:	1b9e      	subs	r6, r3, r6
 800fbb8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800fbbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fbc0:	4650      	mov	r0, sl
 800fbc2:	4659      	mov	r1, fp
 800fbc4:	f7f0 fe5a 	bl	800087c <__aeabi_ddiv>
 800fbc8:	e7d6      	b.n	800fb78 <_strtod_l+0x408>
 800fbca:	9b08      	ldr	r3, [sp, #32]
 800fbcc:	eba5 0808 	sub.w	r8, r5, r8
 800fbd0:	4498      	add	r8, r3
 800fbd2:	f1b8 0f00 	cmp.w	r8, #0
 800fbd6:	dd71      	ble.n	800fcbc <_strtod_l+0x54c>
 800fbd8:	f018 030f 	ands.w	r3, r8, #15
 800fbdc:	d00a      	beq.n	800fbf4 <_strtod_l+0x484>
 800fbde:	494d      	ldr	r1, [pc, #308]	; (800fd14 <_strtod_l+0x5a4>)
 800fbe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fbe4:	4652      	mov	r2, sl
 800fbe6:	465b      	mov	r3, fp
 800fbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbec:	f7f0 fd1c 	bl	8000628 <__aeabi_dmul>
 800fbf0:	4682      	mov	sl, r0
 800fbf2:	468b      	mov	fp, r1
 800fbf4:	f038 080f 	bics.w	r8, r8, #15
 800fbf8:	d04d      	beq.n	800fc96 <_strtod_l+0x526>
 800fbfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fbfe:	dd22      	ble.n	800fc46 <_strtod_l+0x4d6>
 800fc00:	2500      	movs	r5, #0
 800fc02:	462e      	mov	r6, r5
 800fc04:	9509      	str	r5, [sp, #36]	; 0x24
 800fc06:	9507      	str	r5, [sp, #28]
 800fc08:	2322      	movs	r3, #34	; 0x22
 800fc0a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800fd1c <_strtod_l+0x5ac>
 800fc0e:	6023      	str	r3, [r4, #0]
 800fc10:	f04f 0a00 	mov.w	sl, #0
 800fc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f43f adec 	beq.w	800f7f4 <_strtod_l+0x84>
 800fc1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f001 fa9c 	bl	801115c <_Bfree>
 800fc24:	9907      	ldr	r1, [sp, #28]
 800fc26:	4620      	mov	r0, r4
 800fc28:	f001 fa98 	bl	801115c <_Bfree>
 800fc2c:	4631      	mov	r1, r6
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f001 fa94 	bl	801115c <_Bfree>
 800fc34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc36:	4620      	mov	r0, r4
 800fc38:	f001 fa90 	bl	801115c <_Bfree>
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	4620      	mov	r0, r4
 800fc40:	f001 fa8c 	bl	801115c <_Bfree>
 800fc44:	e5d6      	b.n	800f7f4 <_strtod_l+0x84>
 800fc46:	2300      	movs	r3, #0
 800fc48:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fc4c:	4650      	mov	r0, sl
 800fc4e:	4659      	mov	r1, fp
 800fc50:	4699      	mov	r9, r3
 800fc52:	f1b8 0f01 	cmp.w	r8, #1
 800fc56:	dc21      	bgt.n	800fc9c <_strtod_l+0x52c>
 800fc58:	b10b      	cbz	r3, 800fc5e <_strtod_l+0x4ee>
 800fc5a:	4682      	mov	sl, r0
 800fc5c:	468b      	mov	fp, r1
 800fc5e:	4b2e      	ldr	r3, [pc, #184]	; (800fd18 <_strtod_l+0x5a8>)
 800fc60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fc64:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fc68:	4652      	mov	r2, sl
 800fc6a:	465b      	mov	r3, fp
 800fc6c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fc70:	f7f0 fcda 	bl	8000628 <__aeabi_dmul>
 800fc74:	4b29      	ldr	r3, [pc, #164]	; (800fd1c <_strtod_l+0x5ac>)
 800fc76:	460a      	mov	r2, r1
 800fc78:	400b      	ands	r3, r1
 800fc7a:	4929      	ldr	r1, [pc, #164]	; (800fd20 <_strtod_l+0x5b0>)
 800fc7c:	428b      	cmp	r3, r1
 800fc7e:	4682      	mov	sl, r0
 800fc80:	d8be      	bhi.n	800fc00 <_strtod_l+0x490>
 800fc82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fc86:	428b      	cmp	r3, r1
 800fc88:	bf86      	itte	hi
 800fc8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800fd24 <_strtod_l+0x5b4>
 800fc8e:	f04f 3aff 	movhi.w	sl, #4294967295
 800fc92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fc96:	2300      	movs	r3, #0
 800fc98:	9304      	str	r3, [sp, #16]
 800fc9a:	e081      	b.n	800fda0 <_strtod_l+0x630>
 800fc9c:	f018 0f01 	tst.w	r8, #1
 800fca0:	d007      	beq.n	800fcb2 <_strtod_l+0x542>
 800fca2:	4b1d      	ldr	r3, [pc, #116]	; (800fd18 <_strtod_l+0x5a8>)
 800fca4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcac:	f7f0 fcbc 	bl	8000628 <__aeabi_dmul>
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	f109 0901 	add.w	r9, r9, #1
 800fcb6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fcba:	e7ca      	b.n	800fc52 <_strtod_l+0x4e2>
 800fcbc:	d0eb      	beq.n	800fc96 <_strtod_l+0x526>
 800fcbe:	f1c8 0800 	rsb	r8, r8, #0
 800fcc2:	f018 020f 	ands.w	r2, r8, #15
 800fcc6:	d00a      	beq.n	800fcde <_strtod_l+0x56e>
 800fcc8:	4b12      	ldr	r3, [pc, #72]	; (800fd14 <_strtod_l+0x5a4>)
 800fcca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcce:	4650      	mov	r0, sl
 800fcd0:	4659      	mov	r1, fp
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	f7f0 fdd1 	bl	800087c <__aeabi_ddiv>
 800fcda:	4682      	mov	sl, r0
 800fcdc:	468b      	mov	fp, r1
 800fcde:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fce2:	d0d8      	beq.n	800fc96 <_strtod_l+0x526>
 800fce4:	f1b8 0f1f 	cmp.w	r8, #31
 800fce8:	dd1e      	ble.n	800fd28 <_strtod_l+0x5b8>
 800fcea:	2500      	movs	r5, #0
 800fcec:	462e      	mov	r6, r5
 800fcee:	9509      	str	r5, [sp, #36]	; 0x24
 800fcf0:	9507      	str	r5, [sp, #28]
 800fcf2:	2322      	movs	r3, #34	; 0x22
 800fcf4:	f04f 0a00 	mov.w	sl, #0
 800fcf8:	f04f 0b00 	mov.w	fp, #0
 800fcfc:	6023      	str	r3, [r4, #0]
 800fcfe:	e789      	b.n	800fc14 <_strtod_l+0x4a4>
 800fd00:	08014005 	.word	0x08014005
 800fd04:	0801401c 	.word	0x0801401c
 800fd08:	08013ffc 	.word	0x08013ffc
 800fd0c:	08013fff 	.word	0x08013fff
 800fd10:	0801432a 	.word	0x0801432a
 800fd14:	080141e8 	.word	0x080141e8
 800fd18:	080141c0 	.word	0x080141c0
 800fd1c:	7ff00000 	.word	0x7ff00000
 800fd20:	7ca00000 	.word	0x7ca00000
 800fd24:	7fefffff 	.word	0x7fefffff
 800fd28:	f018 0310 	ands.w	r3, r8, #16
 800fd2c:	bf18      	it	ne
 800fd2e:	236a      	movne	r3, #106	; 0x6a
 800fd30:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80100e8 <_strtod_l+0x978>
 800fd34:	9304      	str	r3, [sp, #16]
 800fd36:	4650      	mov	r0, sl
 800fd38:	4659      	mov	r1, fp
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	f018 0f01 	tst.w	r8, #1
 800fd40:	d004      	beq.n	800fd4c <_strtod_l+0x5dc>
 800fd42:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fd46:	f7f0 fc6f 	bl	8000628 <__aeabi_dmul>
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fd50:	f109 0908 	add.w	r9, r9, #8
 800fd54:	d1f2      	bne.n	800fd3c <_strtod_l+0x5cc>
 800fd56:	b10b      	cbz	r3, 800fd5c <_strtod_l+0x5ec>
 800fd58:	4682      	mov	sl, r0
 800fd5a:	468b      	mov	fp, r1
 800fd5c:	9b04      	ldr	r3, [sp, #16]
 800fd5e:	b1bb      	cbz	r3, 800fd90 <_strtod_l+0x620>
 800fd60:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800fd64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	4659      	mov	r1, fp
 800fd6c:	dd10      	ble.n	800fd90 <_strtod_l+0x620>
 800fd6e:	2b1f      	cmp	r3, #31
 800fd70:	f340 8128 	ble.w	800ffc4 <_strtod_l+0x854>
 800fd74:	2b34      	cmp	r3, #52	; 0x34
 800fd76:	bfde      	ittt	le
 800fd78:	3b20      	suble	r3, #32
 800fd7a:	f04f 32ff 	movle.w	r2, #4294967295
 800fd7e:	fa02 f303 	lslle.w	r3, r2, r3
 800fd82:	f04f 0a00 	mov.w	sl, #0
 800fd86:	bfcc      	ite	gt
 800fd88:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fd8c:	ea03 0b01 	andle.w	fp, r3, r1
 800fd90:	2200      	movs	r2, #0
 800fd92:	2300      	movs	r3, #0
 800fd94:	4650      	mov	r0, sl
 800fd96:	4659      	mov	r1, fp
 800fd98:	f7f0 feae 	bl	8000af8 <__aeabi_dcmpeq>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	d1a4      	bne.n	800fcea <_strtod_l+0x57a>
 800fda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fda6:	462b      	mov	r3, r5
 800fda8:	463a      	mov	r2, r7
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f001 fa42 	bl	8011234 <__s2b>
 800fdb0:	9009      	str	r0, [sp, #36]	; 0x24
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	f43f af24 	beq.w	800fc00 <_strtod_l+0x490>
 800fdb8:	9b07      	ldr	r3, [sp, #28]
 800fdba:	1b9e      	subs	r6, r3, r6
 800fdbc:	9b08      	ldr	r3, [sp, #32]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	bfb4      	ite	lt
 800fdc2:	4633      	movlt	r3, r6
 800fdc4:	2300      	movge	r3, #0
 800fdc6:	9310      	str	r3, [sp, #64]	; 0x40
 800fdc8:	9b08      	ldr	r3, [sp, #32]
 800fdca:	2500      	movs	r5, #0
 800fdcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fdd0:	9318      	str	r3, [sp, #96]	; 0x60
 800fdd2:	462e      	mov	r6, r5
 800fdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	6859      	ldr	r1, [r3, #4]
 800fdda:	f001 f97f 	bl	80110dc <_Balloc>
 800fdde:	9007      	str	r0, [sp, #28]
 800fde0:	2800      	cmp	r0, #0
 800fde2:	f43f af11 	beq.w	800fc08 <_strtod_l+0x498>
 800fde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fde8:	691a      	ldr	r2, [r3, #16]
 800fdea:	3202      	adds	r2, #2
 800fdec:	f103 010c 	add.w	r1, r3, #12
 800fdf0:	0092      	lsls	r2, r2, #2
 800fdf2:	300c      	adds	r0, #12
 800fdf4:	f7ff fb3e 	bl	800f474 <memcpy>
 800fdf8:	ec4b ab10 	vmov	d0, sl, fp
 800fdfc:	aa20      	add	r2, sp, #128	; 0x80
 800fdfe:	a91f      	add	r1, sp, #124	; 0x7c
 800fe00:	4620      	mov	r0, r4
 800fe02:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800fe06:	f001 fd51 	bl	80118ac <__d2b>
 800fe0a:	901e      	str	r0, [sp, #120]	; 0x78
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	f43f aefb 	beq.w	800fc08 <_strtod_l+0x498>
 800fe12:	2101      	movs	r1, #1
 800fe14:	4620      	mov	r0, r4
 800fe16:	f001 faa7 	bl	8011368 <__i2b>
 800fe1a:	4606      	mov	r6, r0
 800fe1c:	2800      	cmp	r0, #0
 800fe1e:	f43f aef3 	beq.w	800fc08 <_strtod_l+0x498>
 800fe22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fe24:	9904      	ldr	r1, [sp, #16]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	bfab      	itete	ge
 800fe2a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800fe2c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800fe2e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800fe30:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800fe34:	bfac      	ite	ge
 800fe36:	eb03 0902 	addge.w	r9, r3, r2
 800fe3a:	1ad7      	sublt	r7, r2, r3
 800fe3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe3e:	eba3 0801 	sub.w	r8, r3, r1
 800fe42:	4490      	add	r8, r2
 800fe44:	4ba3      	ldr	r3, [pc, #652]	; (80100d4 <_strtod_l+0x964>)
 800fe46:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe4a:	4598      	cmp	r8, r3
 800fe4c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fe50:	f280 80cc 	bge.w	800ffec <_strtod_l+0x87c>
 800fe54:	eba3 0308 	sub.w	r3, r3, r8
 800fe58:	2b1f      	cmp	r3, #31
 800fe5a:	eba2 0203 	sub.w	r2, r2, r3
 800fe5e:	f04f 0101 	mov.w	r1, #1
 800fe62:	f300 80b6 	bgt.w	800ffd2 <_strtod_l+0x862>
 800fe66:	fa01 f303 	lsl.w	r3, r1, r3
 800fe6a:	9311      	str	r3, [sp, #68]	; 0x44
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	930c      	str	r3, [sp, #48]	; 0x30
 800fe70:	eb09 0802 	add.w	r8, r9, r2
 800fe74:	9b04      	ldr	r3, [sp, #16]
 800fe76:	45c1      	cmp	r9, r8
 800fe78:	4417      	add	r7, r2
 800fe7a:	441f      	add	r7, r3
 800fe7c:	464b      	mov	r3, r9
 800fe7e:	bfa8      	it	ge
 800fe80:	4643      	movge	r3, r8
 800fe82:	42bb      	cmp	r3, r7
 800fe84:	bfa8      	it	ge
 800fe86:	463b      	movge	r3, r7
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	bfc2      	ittt	gt
 800fe8c:	eba8 0803 	subgt.w	r8, r8, r3
 800fe90:	1aff      	subgt	r7, r7, r3
 800fe92:	eba9 0903 	subgt.w	r9, r9, r3
 800fe96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	dd17      	ble.n	800fecc <_strtod_l+0x75c>
 800fe9c:	4631      	mov	r1, r6
 800fe9e:	461a      	mov	r2, r3
 800fea0:	4620      	mov	r0, r4
 800fea2:	f001 fb1d 	bl	80114e0 <__pow5mult>
 800fea6:	4606      	mov	r6, r0
 800fea8:	2800      	cmp	r0, #0
 800feaa:	f43f aead 	beq.w	800fc08 <_strtod_l+0x498>
 800feae:	4601      	mov	r1, r0
 800feb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800feb2:	4620      	mov	r0, r4
 800feb4:	f001 fa6e 	bl	8011394 <__multiply>
 800feb8:	900f      	str	r0, [sp, #60]	; 0x3c
 800feba:	2800      	cmp	r0, #0
 800febc:	f43f aea4 	beq.w	800fc08 <_strtod_l+0x498>
 800fec0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fec2:	4620      	mov	r0, r4
 800fec4:	f001 f94a 	bl	801115c <_Bfree>
 800fec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800feca:	931e      	str	r3, [sp, #120]	; 0x78
 800fecc:	f1b8 0f00 	cmp.w	r8, #0
 800fed0:	f300 8091 	bgt.w	800fff6 <_strtod_l+0x886>
 800fed4:	9b08      	ldr	r3, [sp, #32]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	dd08      	ble.n	800feec <_strtod_l+0x77c>
 800feda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fedc:	9907      	ldr	r1, [sp, #28]
 800fede:	4620      	mov	r0, r4
 800fee0:	f001 fafe 	bl	80114e0 <__pow5mult>
 800fee4:	9007      	str	r0, [sp, #28]
 800fee6:	2800      	cmp	r0, #0
 800fee8:	f43f ae8e 	beq.w	800fc08 <_strtod_l+0x498>
 800feec:	2f00      	cmp	r7, #0
 800feee:	dd08      	ble.n	800ff02 <_strtod_l+0x792>
 800fef0:	9907      	ldr	r1, [sp, #28]
 800fef2:	463a      	mov	r2, r7
 800fef4:	4620      	mov	r0, r4
 800fef6:	f001 fb4d 	bl	8011594 <__lshift>
 800fefa:	9007      	str	r0, [sp, #28]
 800fefc:	2800      	cmp	r0, #0
 800fefe:	f43f ae83 	beq.w	800fc08 <_strtod_l+0x498>
 800ff02:	f1b9 0f00 	cmp.w	r9, #0
 800ff06:	dd08      	ble.n	800ff1a <_strtod_l+0x7aa>
 800ff08:	4631      	mov	r1, r6
 800ff0a:	464a      	mov	r2, r9
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f001 fb41 	bl	8011594 <__lshift>
 800ff12:	4606      	mov	r6, r0
 800ff14:	2800      	cmp	r0, #0
 800ff16:	f43f ae77 	beq.w	800fc08 <_strtod_l+0x498>
 800ff1a:	9a07      	ldr	r2, [sp, #28]
 800ff1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ff1e:	4620      	mov	r0, r4
 800ff20:	f001 fbc0 	bl	80116a4 <__mdiff>
 800ff24:	4605      	mov	r5, r0
 800ff26:	2800      	cmp	r0, #0
 800ff28:	f43f ae6e 	beq.w	800fc08 <_strtod_l+0x498>
 800ff2c:	68c3      	ldr	r3, [r0, #12]
 800ff2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff30:	2300      	movs	r3, #0
 800ff32:	60c3      	str	r3, [r0, #12]
 800ff34:	4631      	mov	r1, r6
 800ff36:	f001 fb99 	bl	801166c <__mcmp>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	da65      	bge.n	801000a <_strtod_l+0x89a>
 800ff3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff40:	ea53 030a 	orrs.w	r3, r3, sl
 800ff44:	f040 8087 	bne.w	8010056 <_strtod_l+0x8e6>
 800ff48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f040 8082 	bne.w	8010056 <_strtod_l+0x8e6>
 800ff52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ff56:	0d1b      	lsrs	r3, r3, #20
 800ff58:	051b      	lsls	r3, r3, #20
 800ff5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ff5e:	d97a      	bls.n	8010056 <_strtod_l+0x8e6>
 800ff60:	696b      	ldr	r3, [r5, #20]
 800ff62:	b913      	cbnz	r3, 800ff6a <_strtod_l+0x7fa>
 800ff64:	692b      	ldr	r3, [r5, #16]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	dd75      	ble.n	8010056 <_strtod_l+0x8e6>
 800ff6a:	4629      	mov	r1, r5
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f001 fb10 	bl	8011594 <__lshift>
 800ff74:	4631      	mov	r1, r6
 800ff76:	4605      	mov	r5, r0
 800ff78:	f001 fb78 	bl	801166c <__mcmp>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	dd6a      	ble.n	8010056 <_strtod_l+0x8e6>
 800ff80:	9904      	ldr	r1, [sp, #16]
 800ff82:	4a55      	ldr	r2, [pc, #340]	; (80100d8 <_strtod_l+0x968>)
 800ff84:	465b      	mov	r3, fp
 800ff86:	2900      	cmp	r1, #0
 800ff88:	f000 8085 	beq.w	8010096 <_strtod_l+0x926>
 800ff8c:	ea02 010b 	and.w	r1, r2, fp
 800ff90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ff94:	dc7f      	bgt.n	8010096 <_strtod_l+0x926>
 800ff96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ff9a:	f77f aeaa 	ble.w	800fcf2 <_strtod_l+0x582>
 800ff9e:	4a4f      	ldr	r2, [pc, #316]	; (80100dc <_strtod_l+0x96c>)
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ffa6:	4650      	mov	r0, sl
 800ffa8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ffac:	4659      	mov	r1, fp
 800ffae:	f7f0 fb3b 	bl	8000628 <__aeabi_dmul>
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	4303      	orrs	r3, r0
 800ffb6:	bf08      	it	eq
 800ffb8:	2322      	moveq	r3, #34	; 0x22
 800ffba:	4682      	mov	sl, r0
 800ffbc:	468b      	mov	fp, r1
 800ffbe:	bf08      	it	eq
 800ffc0:	6023      	streq	r3, [r4, #0]
 800ffc2:	e62b      	b.n	800fc1c <_strtod_l+0x4ac>
 800ffc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ffc8:	fa02 f303 	lsl.w	r3, r2, r3
 800ffcc:	ea03 0a0a 	and.w	sl, r3, sl
 800ffd0:	e6de      	b.n	800fd90 <_strtod_l+0x620>
 800ffd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ffd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ffda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ffde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ffe2:	fa01 f308 	lsl.w	r3, r1, r8
 800ffe6:	930c      	str	r3, [sp, #48]	; 0x30
 800ffe8:	9111      	str	r1, [sp, #68]	; 0x44
 800ffea:	e741      	b.n	800fe70 <_strtod_l+0x700>
 800ffec:	2300      	movs	r3, #0
 800ffee:	930c      	str	r3, [sp, #48]	; 0x30
 800fff0:	2301      	movs	r3, #1
 800fff2:	9311      	str	r3, [sp, #68]	; 0x44
 800fff4:	e73c      	b.n	800fe70 <_strtod_l+0x700>
 800fff6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fff8:	4642      	mov	r2, r8
 800fffa:	4620      	mov	r0, r4
 800fffc:	f001 faca 	bl	8011594 <__lshift>
 8010000:	901e      	str	r0, [sp, #120]	; 0x78
 8010002:	2800      	cmp	r0, #0
 8010004:	f47f af66 	bne.w	800fed4 <_strtod_l+0x764>
 8010008:	e5fe      	b.n	800fc08 <_strtod_l+0x498>
 801000a:	465f      	mov	r7, fp
 801000c:	d16e      	bne.n	80100ec <_strtod_l+0x97c>
 801000e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010014:	b342      	cbz	r2, 8010068 <_strtod_l+0x8f8>
 8010016:	4a32      	ldr	r2, [pc, #200]	; (80100e0 <_strtod_l+0x970>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d128      	bne.n	801006e <_strtod_l+0x8fe>
 801001c:	9b04      	ldr	r3, [sp, #16]
 801001e:	4650      	mov	r0, sl
 8010020:	b1eb      	cbz	r3, 801005e <_strtod_l+0x8ee>
 8010022:	4a2d      	ldr	r2, [pc, #180]	; (80100d8 <_strtod_l+0x968>)
 8010024:	403a      	ands	r2, r7
 8010026:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801002a:	f04f 31ff 	mov.w	r1, #4294967295
 801002e:	d819      	bhi.n	8010064 <_strtod_l+0x8f4>
 8010030:	0d12      	lsrs	r2, r2, #20
 8010032:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010036:	fa01 f303 	lsl.w	r3, r1, r3
 801003a:	4298      	cmp	r0, r3
 801003c:	d117      	bne.n	801006e <_strtod_l+0x8fe>
 801003e:	4b29      	ldr	r3, [pc, #164]	; (80100e4 <_strtod_l+0x974>)
 8010040:	429f      	cmp	r7, r3
 8010042:	d102      	bne.n	801004a <_strtod_l+0x8da>
 8010044:	3001      	adds	r0, #1
 8010046:	f43f addf 	beq.w	800fc08 <_strtod_l+0x498>
 801004a:	4b23      	ldr	r3, [pc, #140]	; (80100d8 <_strtod_l+0x968>)
 801004c:	403b      	ands	r3, r7
 801004e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010052:	f04f 0a00 	mov.w	sl, #0
 8010056:	9b04      	ldr	r3, [sp, #16]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1a0      	bne.n	800ff9e <_strtod_l+0x82e>
 801005c:	e5de      	b.n	800fc1c <_strtod_l+0x4ac>
 801005e:	f04f 33ff 	mov.w	r3, #4294967295
 8010062:	e7ea      	b.n	801003a <_strtod_l+0x8ca>
 8010064:	460b      	mov	r3, r1
 8010066:	e7e8      	b.n	801003a <_strtod_l+0x8ca>
 8010068:	ea53 030a 	orrs.w	r3, r3, sl
 801006c:	d088      	beq.n	800ff80 <_strtod_l+0x810>
 801006e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010070:	b1db      	cbz	r3, 80100aa <_strtod_l+0x93a>
 8010072:	423b      	tst	r3, r7
 8010074:	d0ef      	beq.n	8010056 <_strtod_l+0x8e6>
 8010076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010078:	9a04      	ldr	r2, [sp, #16]
 801007a:	4650      	mov	r0, sl
 801007c:	4659      	mov	r1, fp
 801007e:	b1c3      	cbz	r3, 80100b2 <_strtod_l+0x942>
 8010080:	f7ff fb59 	bl	800f736 <sulp>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801008c:	f7f0 f916 	bl	80002bc <__adddf3>
 8010090:	4682      	mov	sl, r0
 8010092:	468b      	mov	fp, r1
 8010094:	e7df      	b.n	8010056 <_strtod_l+0x8e6>
 8010096:	4013      	ands	r3, r2
 8010098:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801009c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80100a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80100a4:	f04f 3aff 	mov.w	sl, #4294967295
 80100a8:	e7d5      	b.n	8010056 <_strtod_l+0x8e6>
 80100aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100ac:	ea13 0f0a 	tst.w	r3, sl
 80100b0:	e7e0      	b.n	8010074 <_strtod_l+0x904>
 80100b2:	f7ff fb40 	bl	800f736 <sulp>
 80100b6:	4602      	mov	r2, r0
 80100b8:	460b      	mov	r3, r1
 80100ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80100be:	f7f0 f8fb 	bl	80002b8 <__aeabi_dsub>
 80100c2:	2200      	movs	r2, #0
 80100c4:	2300      	movs	r3, #0
 80100c6:	4682      	mov	sl, r0
 80100c8:	468b      	mov	fp, r1
 80100ca:	f7f0 fd15 	bl	8000af8 <__aeabi_dcmpeq>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	d0c1      	beq.n	8010056 <_strtod_l+0x8e6>
 80100d2:	e60e      	b.n	800fcf2 <_strtod_l+0x582>
 80100d4:	fffffc02 	.word	0xfffffc02
 80100d8:	7ff00000 	.word	0x7ff00000
 80100dc:	39500000 	.word	0x39500000
 80100e0:	000fffff 	.word	0x000fffff
 80100e4:	7fefffff 	.word	0x7fefffff
 80100e8:	08014030 	.word	0x08014030
 80100ec:	4631      	mov	r1, r6
 80100ee:	4628      	mov	r0, r5
 80100f0:	f001 fc38 	bl	8011964 <__ratio>
 80100f4:	ec59 8b10 	vmov	r8, r9, d0
 80100f8:	ee10 0a10 	vmov	r0, s0
 80100fc:	2200      	movs	r2, #0
 80100fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010102:	4649      	mov	r1, r9
 8010104:	f7f0 fd0c 	bl	8000b20 <__aeabi_dcmple>
 8010108:	2800      	cmp	r0, #0
 801010a:	d07c      	beq.n	8010206 <_strtod_l+0xa96>
 801010c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801010e:	2b00      	cmp	r3, #0
 8010110:	d04c      	beq.n	80101ac <_strtod_l+0xa3c>
 8010112:	4b95      	ldr	r3, [pc, #596]	; (8010368 <_strtod_l+0xbf8>)
 8010114:	2200      	movs	r2, #0
 8010116:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801011a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010368 <_strtod_l+0xbf8>
 801011e:	f04f 0800 	mov.w	r8, #0
 8010122:	4b92      	ldr	r3, [pc, #584]	; (801036c <_strtod_l+0xbfc>)
 8010124:	403b      	ands	r3, r7
 8010126:	9311      	str	r3, [sp, #68]	; 0x44
 8010128:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801012a:	4b91      	ldr	r3, [pc, #580]	; (8010370 <_strtod_l+0xc00>)
 801012c:	429a      	cmp	r2, r3
 801012e:	f040 80b2 	bne.w	8010296 <_strtod_l+0xb26>
 8010132:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801013a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801013e:	ec4b ab10 	vmov	d0, sl, fp
 8010142:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010146:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801014a:	f001 fb33 	bl	80117b4 <__ulp>
 801014e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010152:	ec53 2b10 	vmov	r2, r3, d0
 8010156:	f7f0 fa67 	bl	8000628 <__aeabi_dmul>
 801015a:	4652      	mov	r2, sl
 801015c:	465b      	mov	r3, fp
 801015e:	f7f0 f8ad 	bl	80002bc <__adddf3>
 8010162:	460b      	mov	r3, r1
 8010164:	4981      	ldr	r1, [pc, #516]	; (801036c <_strtod_l+0xbfc>)
 8010166:	4a83      	ldr	r2, [pc, #524]	; (8010374 <_strtod_l+0xc04>)
 8010168:	4019      	ands	r1, r3
 801016a:	4291      	cmp	r1, r2
 801016c:	4682      	mov	sl, r0
 801016e:	d95e      	bls.n	801022e <_strtod_l+0xabe>
 8010170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010172:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010176:	4293      	cmp	r3, r2
 8010178:	d103      	bne.n	8010182 <_strtod_l+0xa12>
 801017a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801017c:	3301      	adds	r3, #1
 801017e:	f43f ad43 	beq.w	800fc08 <_strtod_l+0x498>
 8010182:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010380 <_strtod_l+0xc10>
 8010186:	f04f 3aff 	mov.w	sl, #4294967295
 801018a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801018c:	4620      	mov	r0, r4
 801018e:	f000 ffe5 	bl	801115c <_Bfree>
 8010192:	9907      	ldr	r1, [sp, #28]
 8010194:	4620      	mov	r0, r4
 8010196:	f000 ffe1 	bl	801115c <_Bfree>
 801019a:	4631      	mov	r1, r6
 801019c:	4620      	mov	r0, r4
 801019e:	f000 ffdd 	bl	801115c <_Bfree>
 80101a2:	4629      	mov	r1, r5
 80101a4:	4620      	mov	r0, r4
 80101a6:	f000 ffd9 	bl	801115c <_Bfree>
 80101aa:	e613      	b.n	800fdd4 <_strtod_l+0x664>
 80101ac:	f1ba 0f00 	cmp.w	sl, #0
 80101b0:	d11b      	bne.n	80101ea <_strtod_l+0xa7a>
 80101b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101b6:	b9f3      	cbnz	r3, 80101f6 <_strtod_l+0xa86>
 80101b8:	4b6b      	ldr	r3, [pc, #428]	; (8010368 <_strtod_l+0xbf8>)
 80101ba:	2200      	movs	r2, #0
 80101bc:	4640      	mov	r0, r8
 80101be:	4649      	mov	r1, r9
 80101c0:	f7f0 fca4 	bl	8000b0c <__aeabi_dcmplt>
 80101c4:	b9d0      	cbnz	r0, 80101fc <_strtod_l+0xa8c>
 80101c6:	4640      	mov	r0, r8
 80101c8:	4649      	mov	r1, r9
 80101ca:	4b6b      	ldr	r3, [pc, #428]	; (8010378 <_strtod_l+0xc08>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	f7f0 fa2b 	bl	8000628 <__aeabi_dmul>
 80101d2:	4680      	mov	r8, r0
 80101d4:	4689      	mov	r9, r1
 80101d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80101da:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80101de:	931b      	str	r3, [sp, #108]	; 0x6c
 80101e0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80101e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80101e8:	e79b      	b.n	8010122 <_strtod_l+0x9b2>
 80101ea:	f1ba 0f01 	cmp.w	sl, #1
 80101ee:	d102      	bne.n	80101f6 <_strtod_l+0xa86>
 80101f0:	2f00      	cmp	r7, #0
 80101f2:	f43f ad7e 	beq.w	800fcf2 <_strtod_l+0x582>
 80101f6:	4b61      	ldr	r3, [pc, #388]	; (801037c <_strtod_l+0xc0c>)
 80101f8:	2200      	movs	r2, #0
 80101fa:	e78c      	b.n	8010116 <_strtod_l+0x9a6>
 80101fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010378 <_strtod_l+0xc08>
 8010200:	f04f 0800 	mov.w	r8, #0
 8010204:	e7e7      	b.n	80101d6 <_strtod_l+0xa66>
 8010206:	4b5c      	ldr	r3, [pc, #368]	; (8010378 <_strtod_l+0xc08>)
 8010208:	4640      	mov	r0, r8
 801020a:	4649      	mov	r1, r9
 801020c:	2200      	movs	r2, #0
 801020e:	f7f0 fa0b 	bl	8000628 <__aeabi_dmul>
 8010212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010214:	4680      	mov	r8, r0
 8010216:	4689      	mov	r9, r1
 8010218:	b933      	cbnz	r3, 8010228 <_strtod_l+0xab8>
 801021a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801021e:	9012      	str	r0, [sp, #72]	; 0x48
 8010220:	9313      	str	r3, [sp, #76]	; 0x4c
 8010222:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010226:	e7dd      	b.n	80101e4 <_strtod_l+0xa74>
 8010228:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801022c:	e7f9      	b.n	8010222 <_strtod_l+0xab2>
 801022e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010232:	9b04      	ldr	r3, [sp, #16]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1a8      	bne.n	801018a <_strtod_l+0xa1a>
 8010238:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801023c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801023e:	0d1b      	lsrs	r3, r3, #20
 8010240:	051b      	lsls	r3, r3, #20
 8010242:	429a      	cmp	r2, r3
 8010244:	d1a1      	bne.n	801018a <_strtod_l+0xa1a>
 8010246:	4640      	mov	r0, r8
 8010248:	4649      	mov	r1, r9
 801024a:	f7f0 fce7 	bl	8000c1c <__aeabi_d2lz>
 801024e:	f7f0 f9bd 	bl	80005cc <__aeabi_l2d>
 8010252:	4602      	mov	r2, r0
 8010254:	460b      	mov	r3, r1
 8010256:	4640      	mov	r0, r8
 8010258:	4649      	mov	r1, r9
 801025a:	f7f0 f82d 	bl	80002b8 <__aeabi_dsub>
 801025e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010264:	ea43 030a 	orr.w	r3, r3, sl
 8010268:	4313      	orrs	r3, r2
 801026a:	4680      	mov	r8, r0
 801026c:	4689      	mov	r9, r1
 801026e:	d053      	beq.n	8010318 <_strtod_l+0xba8>
 8010270:	a335      	add	r3, pc, #212	; (adr r3, 8010348 <_strtod_l+0xbd8>)
 8010272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010276:	f7f0 fc49 	bl	8000b0c <__aeabi_dcmplt>
 801027a:	2800      	cmp	r0, #0
 801027c:	f47f acce 	bne.w	800fc1c <_strtod_l+0x4ac>
 8010280:	a333      	add	r3, pc, #204	; (adr r3, 8010350 <_strtod_l+0xbe0>)
 8010282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010286:	4640      	mov	r0, r8
 8010288:	4649      	mov	r1, r9
 801028a:	f7f0 fc5d 	bl	8000b48 <__aeabi_dcmpgt>
 801028e:	2800      	cmp	r0, #0
 8010290:	f43f af7b 	beq.w	801018a <_strtod_l+0xa1a>
 8010294:	e4c2      	b.n	800fc1c <_strtod_l+0x4ac>
 8010296:	9b04      	ldr	r3, [sp, #16]
 8010298:	b333      	cbz	r3, 80102e8 <_strtod_l+0xb78>
 801029a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801029c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80102a0:	d822      	bhi.n	80102e8 <_strtod_l+0xb78>
 80102a2:	a32d      	add	r3, pc, #180	; (adr r3, 8010358 <_strtod_l+0xbe8>)
 80102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a8:	4640      	mov	r0, r8
 80102aa:	4649      	mov	r1, r9
 80102ac:	f7f0 fc38 	bl	8000b20 <__aeabi_dcmple>
 80102b0:	b1a0      	cbz	r0, 80102dc <_strtod_l+0xb6c>
 80102b2:	4649      	mov	r1, r9
 80102b4:	4640      	mov	r0, r8
 80102b6:	f7f0 fc79 	bl	8000bac <__aeabi_d2uiz>
 80102ba:	2801      	cmp	r0, #1
 80102bc:	bf38      	it	cc
 80102be:	2001      	movcc	r0, #1
 80102c0:	f7f0 f938 	bl	8000534 <__aeabi_ui2d>
 80102c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102c6:	4680      	mov	r8, r0
 80102c8:	4689      	mov	r9, r1
 80102ca:	bb13      	cbnz	r3, 8010312 <_strtod_l+0xba2>
 80102cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102d0:	9014      	str	r0, [sp, #80]	; 0x50
 80102d2:	9315      	str	r3, [sp, #84]	; 0x54
 80102d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80102d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80102dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80102e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80102e4:	1a9b      	subs	r3, r3, r2
 80102e6:	930d      	str	r3, [sp, #52]	; 0x34
 80102e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80102ec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80102f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80102f4:	f001 fa5e 	bl	80117b4 <__ulp>
 80102f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80102fc:	ec53 2b10 	vmov	r2, r3, d0
 8010300:	f7f0 f992 	bl	8000628 <__aeabi_dmul>
 8010304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010308:	f7ef ffd8 	bl	80002bc <__adddf3>
 801030c:	4682      	mov	sl, r0
 801030e:	468b      	mov	fp, r1
 8010310:	e78f      	b.n	8010232 <_strtod_l+0xac2>
 8010312:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8010316:	e7dd      	b.n	80102d4 <_strtod_l+0xb64>
 8010318:	a311      	add	r3, pc, #68	; (adr r3, 8010360 <_strtod_l+0xbf0>)
 801031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031e:	f7f0 fbf5 	bl	8000b0c <__aeabi_dcmplt>
 8010322:	e7b4      	b.n	801028e <_strtod_l+0xb1e>
 8010324:	2300      	movs	r3, #0
 8010326:	930e      	str	r3, [sp, #56]	; 0x38
 8010328:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801032a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801032c:	6013      	str	r3, [r2, #0]
 801032e:	f7ff ba65 	b.w	800f7fc <_strtod_l+0x8c>
 8010332:	2b65      	cmp	r3, #101	; 0x65
 8010334:	f43f ab5d 	beq.w	800f9f2 <_strtod_l+0x282>
 8010338:	2b45      	cmp	r3, #69	; 0x45
 801033a:	f43f ab5a 	beq.w	800f9f2 <_strtod_l+0x282>
 801033e:	2201      	movs	r2, #1
 8010340:	f7ff bb92 	b.w	800fa68 <_strtod_l+0x2f8>
 8010344:	f3af 8000 	nop.w
 8010348:	94a03595 	.word	0x94a03595
 801034c:	3fdfffff 	.word	0x3fdfffff
 8010350:	35afe535 	.word	0x35afe535
 8010354:	3fe00000 	.word	0x3fe00000
 8010358:	ffc00000 	.word	0xffc00000
 801035c:	41dfffff 	.word	0x41dfffff
 8010360:	94a03595 	.word	0x94a03595
 8010364:	3fcfffff 	.word	0x3fcfffff
 8010368:	3ff00000 	.word	0x3ff00000
 801036c:	7ff00000 	.word	0x7ff00000
 8010370:	7fe00000 	.word	0x7fe00000
 8010374:	7c9fffff 	.word	0x7c9fffff
 8010378:	3fe00000 	.word	0x3fe00000
 801037c:	bff00000 	.word	0xbff00000
 8010380:	7fefffff 	.word	0x7fefffff

08010384 <strtod>:
 8010384:	460a      	mov	r2, r1
 8010386:	4601      	mov	r1, r0
 8010388:	4802      	ldr	r0, [pc, #8]	; (8010394 <strtod+0x10>)
 801038a:	4b03      	ldr	r3, [pc, #12]	; (8010398 <strtod+0x14>)
 801038c:	6800      	ldr	r0, [r0, #0]
 801038e:	f7ff b9ef 	b.w	800f770 <_strtod_l>
 8010392:	bf00      	nop
 8010394:	20000148 	.word	0x20000148
 8010398:	200001b0 	.word	0x200001b0

0801039c <__swbuf_r>:
 801039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801039e:	460e      	mov	r6, r1
 80103a0:	4614      	mov	r4, r2
 80103a2:	4605      	mov	r5, r0
 80103a4:	b118      	cbz	r0, 80103ae <__swbuf_r+0x12>
 80103a6:	6983      	ldr	r3, [r0, #24]
 80103a8:	b90b      	cbnz	r3, 80103ae <__swbuf_r+0x12>
 80103aa:	f000 f9f3 	bl	8010794 <__sinit>
 80103ae:	4b21      	ldr	r3, [pc, #132]	; (8010434 <__swbuf_r+0x98>)
 80103b0:	429c      	cmp	r4, r3
 80103b2:	d12b      	bne.n	801040c <__swbuf_r+0x70>
 80103b4:	686c      	ldr	r4, [r5, #4]
 80103b6:	69a3      	ldr	r3, [r4, #24]
 80103b8:	60a3      	str	r3, [r4, #8]
 80103ba:	89a3      	ldrh	r3, [r4, #12]
 80103bc:	071a      	lsls	r2, r3, #28
 80103be:	d52f      	bpl.n	8010420 <__swbuf_r+0x84>
 80103c0:	6923      	ldr	r3, [r4, #16]
 80103c2:	b36b      	cbz	r3, 8010420 <__swbuf_r+0x84>
 80103c4:	6923      	ldr	r3, [r4, #16]
 80103c6:	6820      	ldr	r0, [r4, #0]
 80103c8:	1ac0      	subs	r0, r0, r3
 80103ca:	6963      	ldr	r3, [r4, #20]
 80103cc:	b2f6      	uxtb	r6, r6
 80103ce:	4283      	cmp	r3, r0
 80103d0:	4637      	mov	r7, r6
 80103d2:	dc04      	bgt.n	80103de <__swbuf_r+0x42>
 80103d4:	4621      	mov	r1, r4
 80103d6:	4628      	mov	r0, r5
 80103d8:	f000 f948 	bl	801066c <_fflush_r>
 80103dc:	bb30      	cbnz	r0, 801042c <__swbuf_r+0x90>
 80103de:	68a3      	ldr	r3, [r4, #8]
 80103e0:	3b01      	subs	r3, #1
 80103e2:	60a3      	str	r3, [r4, #8]
 80103e4:	6823      	ldr	r3, [r4, #0]
 80103e6:	1c5a      	adds	r2, r3, #1
 80103e8:	6022      	str	r2, [r4, #0]
 80103ea:	701e      	strb	r6, [r3, #0]
 80103ec:	6963      	ldr	r3, [r4, #20]
 80103ee:	3001      	adds	r0, #1
 80103f0:	4283      	cmp	r3, r0
 80103f2:	d004      	beq.n	80103fe <__swbuf_r+0x62>
 80103f4:	89a3      	ldrh	r3, [r4, #12]
 80103f6:	07db      	lsls	r3, r3, #31
 80103f8:	d506      	bpl.n	8010408 <__swbuf_r+0x6c>
 80103fa:	2e0a      	cmp	r6, #10
 80103fc:	d104      	bne.n	8010408 <__swbuf_r+0x6c>
 80103fe:	4621      	mov	r1, r4
 8010400:	4628      	mov	r0, r5
 8010402:	f000 f933 	bl	801066c <_fflush_r>
 8010406:	b988      	cbnz	r0, 801042c <__swbuf_r+0x90>
 8010408:	4638      	mov	r0, r7
 801040a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801040c:	4b0a      	ldr	r3, [pc, #40]	; (8010438 <__swbuf_r+0x9c>)
 801040e:	429c      	cmp	r4, r3
 8010410:	d101      	bne.n	8010416 <__swbuf_r+0x7a>
 8010412:	68ac      	ldr	r4, [r5, #8]
 8010414:	e7cf      	b.n	80103b6 <__swbuf_r+0x1a>
 8010416:	4b09      	ldr	r3, [pc, #36]	; (801043c <__swbuf_r+0xa0>)
 8010418:	429c      	cmp	r4, r3
 801041a:	bf08      	it	eq
 801041c:	68ec      	ldreq	r4, [r5, #12]
 801041e:	e7ca      	b.n	80103b6 <__swbuf_r+0x1a>
 8010420:	4621      	mov	r1, r4
 8010422:	4628      	mov	r0, r5
 8010424:	f000 f81e 	bl	8010464 <__swsetup_r>
 8010428:	2800      	cmp	r0, #0
 801042a:	d0cb      	beq.n	80103c4 <__swbuf_r+0x28>
 801042c:	f04f 37ff 	mov.w	r7, #4294967295
 8010430:	e7ea      	b.n	8010408 <__swbuf_r+0x6c>
 8010432:	bf00      	nop
 8010434:	08014078 	.word	0x08014078
 8010438:	08014098 	.word	0x08014098
 801043c:	08014058 	.word	0x08014058

08010440 <_write_r>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4d07      	ldr	r5, [pc, #28]	; (8010460 <_write_r+0x20>)
 8010444:	4604      	mov	r4, r0
 8010446:	4608      	mov	r0, r1
 8010448:	4611      	mov	r1, r2
 801044a:	2200      	movs	r2, #0
 801044c:	602a      	str	r2, [r5, #0]
 801044e:	461a      	mov	r2, r3
 8010450:	f7f2 fa25 	bl	800289e <_write>
 8010454:	1c43      	adds	r3, r0, #1
 8010456:	d102      	bne.n	801045e <_write_r+0x1e>
 8010458:	682b      	ldr	r3, [r5, #0]
 801045a:	b103      	cbz	r3, 801045e <_write_r+0x1e>
 801045c:	6023      	str	r3, [r4, #0]
 801045e:	bd38      	pop	{r3, r4, r5, pc}
 8010460:	200038c0 	.word	0x200038c0

08010464 <__swsetup_r>:
 8010464:	4b32      	ldr	r3, [pc, #200]	; (8010530 <__swsetup_r+0xcc>)
 8010466:	b570      	push	{r4, r5, r6, lr}
 8010468:	681d      	ldr	r5, [r3, #0]
 801046a:	4606      	mov	r6, r0
 801046c:	460c      	mov	r4, r1
 801046e:	b125      	cbz	r5, 801047a <__swsetup_r+0x16>
 8010470:	69ab      	ldr	r3, [r5, #24]
 8010472:	b913      	cbnz	r3, 801047a <__swsetup_r+0x16>
 8010474:	4628      	mov	r0, r5
 8010476:	f000 f98d 	bl	8010794 <__sinit>
 801047a:	4b2e      	ldr	r3, [pc, #184]	; (8010534 <__swsetup_r+0xd0>)
 801047c:	429c      	cmp	r4, r3
 801047e:	d10f      	bne.n	80104a0 <__swsetup_r+0x3c>
 8010480:	686c      	ldr	r4, [r5, #4]
 8010482:	89a3      	ldrh	r3, [r4, #12]
 8010484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010488:	0719      	lsls	r1, r3, #28
 801048a:	d42c      	bmi.n	80104e6 <__swsetup_r+0x82>
 801048c:	06dd      	lsls	r5, r3, #27
 801048e:	d411      	bmi.n	80104b4 <__swsetup_r+0x50>
 8010490:	2309      	movs	r3, #9
 8010492:	6033      	str	r3, [r6, #0]
 8010494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010498:	81a3      	strh	r3, [r4, #12]
 801049a:	f04f 30ff 	mov.w	r0, #4294967295
 801049e:	e03e      	b.n	801051e <__swsetup_r+0xba>
 80104a0:	4b25      	ldr	r3, [pc, #148]	; (8010538 <__swsetup_r+0xd4>)
 80104a2:	429c      	cmp	r4, r3
 80104a4:	d101      	bne.n	80104aa <__swsetup_r+0x46>
 80104a6:	68ac      	ldr	r4, [r5, #8]
 80104a8:	e7eb      	b.n	8010482 <__swsetup_r+0x1e>
 80104aa:	4b24      	ldr	r3, [pc, #144]	; (801053c <__swsetup_r+0xd8>)
 80104ac:	429c      	cmp	r4, r3
 80104ae:	bf08      	it	eq
 80104b0:	68ec      	ldreq	r4, [r5, #12]
 80104b2:	e7e6      	b.n	8010482 <__swsetup_r+0x1e>
 80104b4:	0758      	lsls	r0, r3, #29
 80104b6:	d512      	bpl.n	80104de <__swsetup_r+0x7a>
 80104b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104ba:	b141      	cbz	r1, 80104ce <__swsetup_r+0x6a>
 80104bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80104c0:	4299      	cmp	r1, r3
 80104c2:	d002      	beq.n	80104ca <__swsetup_r+0x66>
 80104c4:	4630      	mov	r0, r6
 80104c6:	f7fe ffeb 	bl	800f4a0 <_free_r>
 80104ca:	2300      	movs	r3, #0
 80104cc:	6363      	str	r3, [r4, #52]	; 0x34
 80104ce:	89a3      	ldrh	r3, [r4, #12]
 80104d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80104d4:	81a3      	strh	r3, [r4, #12]
 80104d6:	2300      	movs	r3, #0
 80104d8:	6063      	str	r3, [r4, #4]
 80104da:	6923      	ldr	r3, [r4, #16]
 80104dc:	6023      	str	r3, [r4, #0]
 80104de:	89a3      	ldrh	r3, [r4, #12]
 80104e0:	f043 0308 	orr.w	r3, r3, #8
 80104e4:	81a3      	strh	r3, [r4, #12]
 80104e6:	6923      	ldr	r3, [r4, #16]
 80104e8:	b94b      	cbnz	r3, 80104fe <__swsetup_r+0x9a>
 80104ea:	89a3      	ldrh	r3, [r4, #12]
 80104ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80104f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104f4:	d003      	beq.n	80104fe <__swsetup_r+0x9a>
 80104f6:	4621      	mov	r1, r4
 80104f8:	4630      	mov	r0, r6
 80104fa:	f000 fd91 	bl	8011020 <__smakebuf_r>
 80104fe:	89a0      	ldrh	r0, [r4, #12]
 8010500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010504:	f010 0301 	ands.w	r3, r0, #1
 8010508:	d00a      	beq.n	8010520 <__swsetup_r+0xbc>
 801050a:	2300      	movs	r3, #0
 801050c:	60a3      	str	r3, [r4, #8]
 801050e:	6963      	ldr	r3, [r4, #20]
 8010510:	425b      	negs	r3, r3
 8010512:	61a3      	str	r3, [r4, #24]
 8010514:	6923      	ldr	r3, [r4, #16]
 8010516:	b943      	cbnz	r3, 801052a <__swsetup_r+0xc6>
 8010518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801051c:	d1ba      	bne.n	8010494 <__swsetup_r+0x30>
 801051e:	bd70      	pop	{r4, r5, r6, pc}
 8010520:	0781      	lsls	r1, r0, #30
 8010522:	bf58      	it	pl
 8010524:	6963      	ldrpl	r3, [r4, #20]
 8010526:	60a3      	str	r3, [r4, #8]
 8010528:	e7f4      	b.n	8010514 <__swsetup_r+0xb0>
 801052a:	2000      	movs	r0, #0
 801052c:	e7f7      	b.n	801051e <__swsetup_r+0xba>
 801052e:	bf00      	nop
 8010530:	20000148 	.word	0x20000148
 8010534:	08014078 	.word	0x08014078
 8010538:	08014098 	.word	0x08014098
 801053c:	08014058 	.word	0x08014058

08010540 <_close_r>:
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	4d06      	ldr	r5, [pc, #24]	; (801055c <_close_r+0x1c>)
 8010544:	2300      	movs	r3, #0
 8010546:	4604      	mov	r4, r0
 8010548:	4608      	mov	r0, r1
 801054a:	602b      	str	r3, [r5, #0]
 801054c:	f7f2 f9c3 	bl	80028d6 <_close>
 8010550:	1c43      	adds	r3, r0, #1
 8010552:	d102      	bne.n	801055a <_close_r+0x1a>
 8010554:	682b      	ldr	r3, [r5, #0]
 8010556:	b103      	cbz	r3, 801055a <_close_r+0x1a>
 8010558:	6023      	str	r3, [r4, #0]
 801055a:	bd38      	pop	{r3, r4, r5, pc}
 801055c:	200038c0 	.word	0x200038c0

08010560 <__sflush_r>:
 8010560:	898a      	ldrh	r2, [r1, #12]
 8010562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010566:	4605      	mov	r5, r0
 8010568:	0710      	lsls	r0, r2, #28
 801056a:	460c      	mov	r4, r1
 801056c:	d458      	bmi.n	8010620 <__sflush_r+0xc0>
 801056e:	684b      	ldr	r3, [r1, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	dc05      	bgt.n	8010580 <__sflush_r+0x20>
 8010574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010576:	2b00      	cmp	r3, #0
 8010578:	dc02      	bgt.n	8010580 <__sflush_r+0x20>
 801057a:	2000      	movs	r0, #0
 801057c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010582:	2e00      	cmp	r6, #0
 8010584:	d0f9      	beq.n	801057a <__sflush_r+0x1a>
 8010586:	2300      	movs	r3, #0
 8010588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801058c:	682f      	ldr	r7, [r5, #0]
 801058e:	602b      	str	r3, [r5, #0]
 8010590:	d032      	beq.n	80105f8 <__sflush_r+0x98>
 8010592:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010594:	89a3      	ldrh	r3, [r4, #12]
 8010596:	075a      	lsls	r2, r3, #29
 8010598:	d505      	bpl.n	80105a6 <__sflush_r+0x46>
 801059a:	6863      	ldr	r3, [r4, #4]
 801059c:	1ac0      	subs	r0, r0, r3
 801059e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105a0:	b10b      	cbz	r3, 80105a6 <__sflush_r+0x46>
 80105a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105a4:	1ac0      	subs	r0, r0, r3
 80105a6:	2300      	movs	r3, #0
 80105a8:	4602      	mov	r2, r0
 80105aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105ac:	6a21      	ldr	r1, [r4, #32]
 80105ae:	4628      	mov	r0, r5
 80105b0:	47b0      	blx	r6
 80105b2:	1c43      	adds	r3, r0, #1
 80105b4:	89a3      	ldrh	r3, [r4, #12]
 80105b6:	d106      	bne.n	80105c6 <__sflush_r+0x66>
 80105b8:	6829      	ldr	r1, [r5, #0]
 80105ba:	291d      	cmp	r1, #29
 80105bc:	d82c      	bhi.n	8010618 <__sflush_r+0xb8>
 80105be:	4a2a      	ldr	r2, [pc, #168]	; (8010668 <__sflush_r+0x108>)
 80105c0:	40ca      	lsrs	r2, r1
 80105c2:	07d6      	lsls	r6, r2, #31
 80105c4:	d528      	bpl.n	8010618 <__sflush_r+0xb8>
 80105c6:	2200      	movs	r2, #0
 80105c8:	6062      	str	r2, [r4, #4]
 80105ca:	04d9      	lsls	r1, r3, #19
 80105cc:	6922      	ldr	r2, [r4, #16]
 80105ce:	6022      	str	r2, [r4, #0]
 80105d0:	d504      	bpl.n	80105dc <__sflush_r+0x7c>
 80105d2:	1c42      	adds	r2, r0, #1
 80105d4:	d101      	bne.n	80105da <__sflush_r+0x7a>
 80105d6:	682b      	ldr	r3, [r5, #0]
 80105d8:	b903      	cbnz	r3, 80105dc <__sflush_r+0x7c>
 80105da:	6560      	str	r0, [r4, #84]	; 0x54
 80105dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105de:	602f      	str	r7, [r5, #0]
 80105e0:	2900      	cmp	r1, #0
 80105e2:	d0ca      	beq.n	801057a <__sflush_r+0x1a>
 80105e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105e8:	4299      	cmp	r1, r3
 80105ea:	d002      	beq.n	80105f2 <__sflush_r+0x92>
 80105ec:	4628      	mov	r0, r5
 80105ee:	f7fe ff57 	bl	800f4a0 <_free_r>
 80105f2:	2000      	movs	r0, #0
 80105f4:	6360      	str	r0, [r4, #52]	; 0x34
 80105f6:	e7c1      	b.n	801057c <__sflush_r+0x1c>
 80105f8:	6a21      	ldr	r1, [r4, #32]
 80105fa:	2301      	movs	r3, #1
 80105fc:	4628      	mov	r0, r5
 80105fe:	47b0      	blx	r6
 8010600:	1c41      	adds	r1, r0, #1
 8010602:	d1c7      	bne.n	8010594 <__sflush_r+0x34>
 8010604:	682b      	ldr	r3, [r5, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d0c4      	beq.n	8010594 <__sflush_r+0x34>
 801060a:	2b1d      	cmp	r3, #29
 801060c:	d001      	beq.n	8010612 <__sflush_r+0xb2>
 801060e:	2b16      	cmp	r3, #22
 8010610:	d101      	bne.n	8010616 <__sflush_r+0xb6>
 8010612:	602f      	str	r7, [r5, #0]
 8010614:	e7b1      	b.n	801057a <__sflush_r+0x1a>
 8010616:	89a3      	ldrh	r3, [r4, #12]
 8010618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801061c:	81a3      	strh	r3, [r4, #12]
 801061e:	e7ad      	b.n	801057c <__sflush_r+0x1c>
 8010620:	690f      	ldr	r7, [r1, #16]
 8010622:	2f00      	cmp	r7, #0
 8010624:	d0a9      	beq.n	801057a <__sflush_r+0x1a>
 8010626:	0793      	lsls	r3, r2, #30
 8010628:	680e      	ldr	r6, [r1, #0]
 801062a:	bf08      	it	eq
 801062c:	694b      	ldreq	r3, [r1, #20]
 801062e:	600f      	str	r7, [r1, #0]
 8010630:	bf18      	it	ne
 8010632:	2300      	movne	r3, #0
 8010634:	eba6 0807 	sub.w	r8, r6, r7
 8010638:	608b      	str	r3, [r1, #8]
 801063a:	f1b8 0f00 	cmp.w	r8, #0
 801063e:	dd9c      	ble.n	801057a <__sflush_r+0x1a>
 8010640:	6a21      	ldr	r1, [r4, #32]
 8010642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010644:	4643      	mov	r3, r8
 8010646:	463a      	mov	r2, r7
 8010648:	4628      	mov	r0, r5
 801064a:	47b0      	blx	r6
 801064c:	2800      	cmp	r0, #0
 801064e:	dc06      	bgt.n	801065e <__sflush_r+0xfe>
 8010650:	89a3      	ldrh	r3, [r4, #12]
 8010652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010656:	81a3      	strh	r3, [r4, #12]
 8010658:	f04f 30ff 	mov.w	r0, #4294967295
 801065c:	e78e      	b.n	801057c <__sflush_r+0x1c>
 801065e:	4407      	add	r7, r0
 8010660:	eba8 0800 	sub.w	r8, r8, r0
 8010664:	e7e9      	b.n	801063a <__sflush_r+0xda>
 8010666:	bf00      	nop
 8010668:	20400001 	.word	0x20400001

0801066c <_fflush_r>:
 801066c:	b538      	push	{r3, r4, r5, lr}
 801066e:	690b      	ldr	r3, [r1, #16]
 8010670:	4605      	mov	r5, r0
 8010672:	460c      	mov	r4, r1
 8010674:	b913      	cbnz	r3, 801067c <_fflush_r+0x10>
 8010676:	2500      	movs	r5, #0
 8010678:	4628      	mov	r0, r5
 801067a:	bd38      	pop	{r3, r4, r5, pc}
 801067c:	b118      	cbz	r0, 8010686 <_fflush_r+0x1a>
 801067e:	6983      	ldr	r3, [r0, #24]
 8010680:	b90b      	cbnz	r3, 8010686 <_fflush_r+0x1a>
 8010682:	f000 f887 	bl	8010794 <__sinit>
 8010686:	4b14      	ldr	r3, [pc, #80]	; (80106d8 <_fflush_r+0x6c>)
 8010688:	429c      	cmp	r4, r3
 801068a:	d11b      	bne.n	80106c4 <_fflush_r+0x58>
 801068c:	686c      	ldr	r4, [r5, #4]
 801068e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d0ef      	beq.n	8010676 <_fflush_r+0xa>
 8010696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010698:	07d0      	lsls	r0, r2, #31
 801069a:	d404      	bmi.n	80106a6 <_fflush_r+0x3a>
 801069c:	0599      	lsls	r1, r3, #22
 801069e:	d402      	bmi.n	80106a6 <_fflush_r+0x3a>
 80106a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106a2:	f000 fc84 	bl	8010fae <__retarget_lock_acquire_recursive>
 80106a6:	4628      	mov	r0, r5
 80106a8:	4621      	mov	r1, r4
 80106aa:	f7ff ff59 	bl	8010560 <__sflush_r>
 80106ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106b0:	07da      	lsls	r2, r3, #31
 80106b2:	4605      	mov	r5, r0
 80106b4:	d4e0      	bmi.n	8010678 <_fflush_r+0xc>
 80106b6:	89a3      	ldrh	r3, [r4, #12]
 80106b8:	059b      	lsls	r3, r3, #22
 80106ba:	d4dd      	bmi.n	8010678 <_fflush_r+0xc>
 80106bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106be:	f000 fc77 	bl	8010fb0 <__retarget_lock_release_recursive>
 80106c2:	e7d9      	b.n	8010678 <_fflush_r+0xc>
 80106c4:	4b05      	ldr	r3, [pc, #20]	; (80106dc <_fflush_r+0x70>)
 80106c6:	429c      	cmp	r4, r3
 80106c8:	d101      	bne.n	80106ce <_fflush_r+0x62>
 80106ca:	68ac      	ldr	r4, [r5, #8]
 80106cc:	e7df      	b.n	801068e <_fflush_r+0x22>
 80106ce:	4b04      	ldr	r3, [pc, #16]	; (80106e0 <_fflush_r+0x74>)
 80106d0:	429c      	cmp	r4, r3
 80106d2:	bf08      	it	eq
 80106d4:	68ec      	ldreq	r4, [r5, #12]
 80106d6:	e7da      	b.n	801068e <_fflush_r+0x22>
 80106d8:	08014078 	.word	0x08014078
 80106dc:	08014098 	.word	0x08014098
 80106e0:	08014058 	.word	0x08014058

080106e4 <std>:
 80106e4:	2300      	movs	r3, #0
 80106e6:	b510      	push	{r4, lr}
 80106e8:	4604      	mov	r4, r0
 80106ea:	e9c0 3300 	strd	r3, r3, [r0]
 80106ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106f2:	6083      	str	r3, [r0, #8]
 80106f4:	8181      	strh	r1, [r0, #12]
 80106f6:	6643      	str	r3, [r0, #100]	; 0x64
 80106f8:	81c2      	strh	r2, [r0, #14]
 80106fa:	6183      	str	r3, [r0, #24]
 80106fc:	4619      	mov	r1, r3
 80106fe:	2208      	movs	r2, #8
 8010700:	305c      	adds	r0, #92	; 0x5c
 8010702:	f7fe fec5 	bl	800f490 <memset>
 8010706:	4b05      	ldr	r3, [pc, #20]	; (801071c <std+0x38>)
 8010708:	6263      	str	r3, [r4, #36]	; 0x24
 801070a:	4b05      	ldr	r3, [pc, #20]	; (8010720 <std+0x3c>)
 801070c:	62a3      	str	r3, [r4, #40]	; 0x28
 801070e:	4b05      	ldr	r3, [pc, #20]	; (8010724 <std+0x40>)
 8010710:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010712:	4b05      	ldr	r3, [pc, #20]	; (8010728 <std+0x44>)
 8010714:	6224      	str	r4, [r4, #32]
 8010716:	6323      	str	r3, [r4, #48]	; 0x30
 8010718:	bd10      	pop	{r4, pc}
 801071a:	bf00      	nop
 801071c:	0800f68d 	.word	0x0800f68d
 8010720:	0800f6af 	.word	0x0800f6af
 8010724:	0800f6e7 	.word	0x0800f6e7
 8010728:	0800f70b 	.word	0x0800f70b

0801072c <_cleanup_r>:
 801072c:	4901      	ldr	r1, [pc, #4]	; (8010734 <_cleanup_r+0x8>)
 801072e:	f000 b8af 	b.w	8010890 <_fwalk_reent>
 8010732:	bf00      	nop
 8010734:	0801066d 	.word	0x0801066d

08010738 <__sfmoreglue>:
 8010738:	b570      	push	{r4, r5, r6, lr}
 801073a:	1e4a      	subs	r2, r1, #1
 801073c:	2568      	movs	r5, #104	; 0x68
 801073e:	4355      	muls	r5, r2
 8010740:	460e      	mov	r6, r1
 8010742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010746:	f7fe fefb 	bl	800f540 <_malloc_r>
 801074a:	4604      	mov	r4, r0
 801074c:	b140      	cbz	r0, 8010760 <__sfmoreglue+0x28>
 801074e:	2100      	movs	r1, #0
 8010750:	e9c0 1600 	strd	r1, r6, [r0]
 8010754:	300c      	adds	r0, #12
 8010756:	60a0      	str	r0, [r4, #8]
 8010758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801075c:	f7fe fe98 	bl	800f490 <memset>
 8010760:	4620      	mov	r0, r4
 8010762:	bd70      	pop	{r4, r5, r6, pc}

08010764 <__sfp_lock_acquire>:
 8010764:	4801      	ldr	r0, [pc, #4]	; (801076c <__sfp_lock_acquire+0x8>)
 8010766:	f000 bc22 	b.w	8010fae <__retarget_lock_acquire_recursive>
 801076a:	bf00      	nop
 801076c:	200038bc 	.word	0x200038bc

08010770 <__sfp_lock_release>:
 8010770:	4801      	ldr	r0, [pc, #4]	; (8010778 <__sfp_lock_release+0x8>)
 8010772:	f000 bc1d 	b.w	8010fb0 <__retarget_lock_release_recursive>
 8010776:	bf00      	nop
 8010778:	200038bc 	.word	0x200038bc

0801077c <__sinit_lock_acquire>:
 801077c:	4801      	ldr	r0, [pc, #4]	; (8010784 <__sinit_lock_acquire+0x8>)
 801077e:	f000 bc16 	b.w	8010fae <__retarget_lock_acquire_recursive>
 8010782:	bf00      	nop
 8010784:	200038b7 	.word	0x200038b7

08010788 <__sinit_lock_release>:
 8010788:	4801      	ldr	r0, [pc, #4]	; (8010790 <__sinit_lock_release+0x8>)
 801078a:	f000 bc11 	b.w	8010fb0 <__retarget_lock_release_recursive>
 801078e:	bf00      	nop
 8010790:	200038b7 	.word	0x200038b7

08010794 <__sinit>:
 8010794:	b510      	push	{r4, lr}
 8010796:	4604      	mov	r4, r0
 8010798:	f7ff fff0 	bl	801077c <__sinit_lock_acquire>
 801079c:	69a3      	ldr	r3, [r4, #24]
 801079e:	b11b      	cbz	r3, 80107a8 <__sinit+0x14>
 80107a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107a4:	f7ff bff0 	b.w	8010788 <__sinit_lock_release>
 80107a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80107ac:	6523      	str	r3, [r4, #80]	; 0x50
 80107ae:	4b13      	ldr	r3, [pc, #76]	; (80107fc <__sinit+0x68>)
 80107b0:	4a13      	ldr	r2, [pc, #76]	; (8010800 <__sinit+0x6c>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80107b6:	42a3      	cmp	r3, r4
 80107b8:	bf04      	itt	eq
 80107ba:	2301      	moveq	r3, #1
 80107bc:	61a3      	streq	r3, [r4, #24]
 80107be:	4620      	mov	r0, r4
 80107c0:	f000 f820 	bl	8010804 <__sfp>
 80107c4:	6060      	str	r0, [r4, #4]
 80107c6:	4620      	mov	r0, r4
 80107c8:	f000 f81c 	bl	8010804 <__sfp>
 80107cc:	60a0      	str	r0, [r4, #8]
 80107ce:	4620      	mov	r0, r4
 80107d0:	f000 f818 	bl	8010804 <__sfp>
 80107d4:	2200      	movs	r2, #0
 80107d6:	60e0      	str	r0, [r4, #12]
 80107d8:	2104      	movs	r1, #4
 80107da:	6860      	ldr	r0, [r4, #4]
 80107dc:	f7ff ff82 	bl	80106e4 <std>
 80107e0:	68a0      	ldr	r0, [r4, #8]
 80107e2:	2201      	movs	r2, #1
 80107e4:	2109      	movs	r1, #9
 80107e6:	f7ff ff7d 	bl	80106e4 <std>
 80107ea:	68e0      	ldr	r0, [r4, #12]
 80107ec:	2202      	movs	r2, #2
 80107ee:	2112      	movs	r1, #18
 80107f0:	f7ff ff78 	bl	80106e4 <std>
 80107f4:	2301      	movs	r3, #1
 80107f6:	61a3      	str	r3, [r4, #24]
 80107f8:	e7d2      	b.n	80107a0 <__sinit+0xc>
 80107fa:	bf00      	nop
 80107fc:	08013ff8 	.word	0x08013ff8
 8010800:	0801072d 	.word	0x0801072d

08010804 <__sfp>:
 8010804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010806:	4607      	mov	r7, r0
 8010808:	f7ff ffac 	bl	8010764 <__sfp_lock_acquire>
 801080c:	4b1e      	ldr	r3, [pc, #120]	; (8010888 <__sfp+0x84>)
 801080e:	681e      	ldr	r6, [r3, #0]
 8010810:	69b3      	ldr	r3, [r6, #24]
 8010812:	b913      	cbnz	r3, 801081a <__sfp+0x16>
 8010814:	4630      	mov	r0, r6
 8010816:	f7ff ffbd 	bl	8010794 <__sinit>
 801081a:	3648      	adds	r6, #72	; 0x48
 801081c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010820:	3b01      	subs	r3, #1
 8010822:	d503      	bpl.n	801082c <__sfp+0x28>
 8010824:	6833      	ldr	r3, [r6, #0]
 8010826:	b30b      	cbz	r3, 801086c <__sfp+0x68>
 8010828:	6836      	ldr	r6, [r6, #0]
 801082a:	e7f7      	b.n	801081c <__sfp+0x18>
 801082c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010830:	b9d5      	cbnz	r5, 8010868 <__sfp+0x64>
 8010832:	4b16      	ldr	r3, [pc, #88]	; (801088c <__sfp+0x88>)
 8010834:	60e3      	str	r3, [r4, #12]
 8010836:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801083a:	6665      	str	r5, [r4, #100]	; 0x64
 801083c:	f000 fbb6 	bl	8010fac <__retarget_lock_init_recursive>
 8010840:	f7ff ff96 	bl	8010770 <__sfp_lock_release>
 8010844:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010848:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801084c:	6025      	str	r5, [r4, #0]
 801084e:	61a5      	str	r5, [r4, #24]
 8010850:	2208      	movs	r2, #8
 8010852:	4629      	mov	r1, r5
 8010854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010858:	f7fe fe1a 	bl	800f490 <memset>
 801085c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010864:	4620      	mov	r0, r4
 8010866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010868:	3468      	adds	r4, #104	; 0x68
 801086a:	e7d9      	b.n	8010820 <__sfp+0x1c>
 801086c:	2104      	movs	r1, #4
 801086e:	4638      	mov	r0, r7
 8010870:	f7ff ff62 	bl	8010738 <__sfmoreglue>
 8010874:	4604      	mov	r4, r0
 8010876:	6030      	str	r0, [r6, #0]
 8010878:	2800      	cmp	r0, #0
 801087a:	d1d5      	bne.n	8010828 <__sfp+0x24>
 801087c:	f7ff ff78 	bl	8010770 <__sfp_lock_release>
 8010880:	230c      	movs	r3, #12
 8010882:	603b      	str	r3, [r7, #0]
 8010884:	e7ee      	b.n	8010864 <__sfp+0x60>
 8010886:	bf00      	nop
 8010888:	08013ff8 	.word	0x08013ff8
 801088c:	ffff0001 	.word	0xffff0001

08010890 <_fwalk_reent>:
 8010890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010894:	4606      	mov	r6, r0
 8010896:	4688      	mov	r8, r1
 8010898:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801089c:	2700      	movs	r7, #0
 801089e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80108a2:	f1b9 0901 	subs.w	r9, r9, #1
 80108a6:	d505      	bpl.n	80108b4 <_fwalk_reent+0x24>
 80108a8:	6824      	ldr	r4, [r4, #0]
 80108aa:	2c00      	cmp	r4, #0
 80108ac:	d1f7      	bne.n	801089e <_fwalk_reent+0xe>
 80108ae:	4638      	mov	r0, r7
 80108b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108b4:	89ab      	ldrh	r3, [r5, #12]
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d907      	bls.n	80108ca <_fwalk_reent+0x3a>
 80108ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108be:	3301      	adds	r3, #1
 80108c0:	d003      	beq.n	80108ca <_fwalk_reent+0x3a>
 80108c2:	4629      	mov	r1, r5
 80108c4:	4630      	mov	r0, r6
 80108c6:	47c0      	blx	r8
 80108c8:	4307      	orrs	r7, r0
 80108ca:	3568      	adds	r5, #104	; 0x68
 80108cc:	e7e9      	b.n	80108a2 <_fwalk_reent+0x12>

080108ce <rshift>:
 80108ce:	6903      	ldr	r3, [r0, #16]
 80108d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80108d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80108dc:	f100 0414 	add.w	r4, r0, #20
 80108e0:	dd45      	ble.n	801096e <rshift+0xa0>
 80108e2:	f011 011f 	ands.w	r1, r1, #31
 80108e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80108ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80108ee:	d10c      	bne.n	801090a <rshift+0x3c>
 80108f0:	f100 0710 	add.w	r7, r0, #16
 80108f4:	4629      	mov	r1, r5
 80108f6:	42b1      	cmp	r1, r6
 80108f8:	d334      	bcc.n	8010964 <rshift+0x96>
 80108fa:	1a9b      	subs	r3, r3, r2
 80108fc:	009b      	lsls	r3, r3, #2
 80108fe:	1eea      	subs	r2, r5, #3
 8010900:	4296      	cmp	r6, r2
 8010902:	bf38      	it	cc
 8010904:	2300      	movcc	r3, #0
 8010906:	4423      	add	r3, r4
 8010908:	e015      	b.n	8010936 <rshift+0x68>
 801090a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801090e:	f1c1 0820 	rsb	r8, r1, #32
 8010912:	40cf      	lsrs	r7, r1
 8010914:	f105 0e04 	add.w	lr, r5, #4
 8010918:	46a1      	mov	r9, r4
 801091a:	4576      	cmp	r6, lr
 801091c:	46f4      	mov	ip, lr
 801091e:	d815      	bhi.n	801094c <rshift+0x7e>
 8010920:	1a9b      	subs	r3, r3, r2
 8010922:	009a      	lsls	r2, r3, #2
 8010924:	3a04      	subs	r2, #4
 8010926:	3501      	adds	r5, #1
 8010928:	42ae      	cmp	r6, r5
 801092a:	bf38      	it	cc
 801092c:	2200      	movcc	r2, #0
 801092e:	18a3      	adds	r3, r4, r2
 8010930:	50a7      	str	r7, [r4, r2]
 8010932:	b107      	cbz	r7, 8010936 <rshift+0x68>
 8010934:	3304      	adds	r3, #4
 8010936:	1b1a      	subs	r2, r3, r4
 8010938:	42a3      	cmp	r3, r4
 801093a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801093e:	bf08      	it	eq
 8010940:	2300      	moveq	r3, #0
 8010942:	6102      	str	r2, [r0, #16]
 8010944:	bf08      	it	eq
 8010946:	6143      	streq	r3, [r0, #20]
 8010948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801094c:	f8dc c000 	ldr.w	ip, [ip]
 8010950:	fa0c fc08 	lsl.w	ip, ip, r8
 8010954:	ea4c 0707 	orr.w	r7, ip, r7
 8010958:	f849 7b04 	str.w	r7, [r9], #4
 801095c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010960:	40cf      	lsrs	r7, r1
 8010962:	e7da      	b.n	801091a <rshift+0x4c>
 8010964:	f851 cb04 	ldr.w	ip, [r1], #4
 8010968:	f847 cf04 	str.w	ip, [r7, #4]!
 801096c:	e7c3      	b.n	80108f6 <rshift+0x28>
 801096e:	4623      	mov	r3, r4
 8010970:	e7e1      	b.n	8010936 <rshift+0x68>

08010972 <__hexdig_fun>:
 8010972:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010976:	2b09      	cmp	r3, #9
 8010978:	d802      	bhi.n	8010980 <__hexdig_fun+0xe>
 801097a:	3820      	subs	r0, #32
 801097c:	b2c0      	uxtb	r0, r0
 801097e:	4770      	bx	lr
 8010980:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010984:	2b05      	cmp	r3, #5
 8010986:	d801      	bhi.n	801098c <__hexdig_fun+0x1a>
 8010988:	3847      	subs	r0, #71	; 0x47
 801098a:	e7f7      	b.n	801097c <__hexdig_fun+0xa>
 801098c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010990:	2b05      	cmp	r3, #5
 8010992:	d801      	bhi.n	8010998 <__hexdig_fun+0x26>
 8010994:	3827      	subs	r0, #39	; 0x27
 8010996:	e7f1      	b.n	801097c <__hexdig_fun+0xa>
 8010998:	2000      	movs	r0, #0
 801099a:	4770      	bx	lr

0801099c <__gethex>:
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a0:	ed2d 8b02 	vpush	{d8}
 80109a4:	b089      	sub	sp, #36	; 0x24
 80109a6:	ee08 0a10 	vmov	s16, r0
 80109aa:	9304      	str	r3, [sp, #16]
 80109ac:	4bbc      	ldr	r3, [pc, #752]	; (8010ca0 <__gethex+0x304>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	9301      	str	r3, [sp, #4]
 80109b2:	4618      	mov	r0, r3
 80109b4:	468b      	mov	fp, r1
 80109b6:	4690      	mov	r8, r2
 80109b8:	f7ef fc1c 	bl	80001f4 <strlen>
 80109bc:	9b01      	ldr	r3, [sp, #4]
 80109be:	f8db 2000 	ldr.w	r2, [fp]
 80109c2:	4403      	add	r3, r0
 80109c4:	4682      	mov	sl, r0
 80109c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80109ca:	9305      	str	r3, [sp, #20]
 80109cc:	1c93      	adds	r3, r2, #2
 80109ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80109d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80109d6:	32fe      	adds	r2, #254	; 0xfe
 80109d8:	18d1      	adds	r1, r2, r3
 80109da:	461f      	mov	r7, r3
 80109dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80109e0:	9100      	str	r1, [sp, #0]
 80109e2:	2830      	cmp	r0, #48	; 0x30
 80109e4:	d0f8      	beq.n	80109d8 <__gethex+0x3c>
 80109e6:	f7ff ffc4 	bl	8010972 <__hexdig_fun>
 80109ea:	4604      	mov	r4, r0
 80109ec:	2800      	cmp	r0, #0
 80109ee:	d13a      	bne.n	8010a66 <__gethex+0xca>
 80109f0:	9901      	ldr	r1, [sp, #4]
 80109f2:	4652      	mov	r2, sl
 80109f4:	4638      	mov	r0, r7
 80109f6:	f7fe fe8c 	bl	800f712 <strncmp>
 80109fa:	4605      	mov	r5, r0
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d168      	bne.n	8010ad2 <__gethex+0x136>
 8010a00:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010a04:	eb07 060a 	add.w	r6, r7, sl
 8010a08:	f7ff ffb3 	bl	8010972 <__hexdig_fun>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d062      	beq.n	8010ad6 <__gethex+0x13a>
 8010a10:	4633      	mov	r3, r6
 8010a12:	7818      	ldrb	r0, [r3, #0]
 8010a14:	2830      	cmp	r0, #48	; 0x30
 8010a16:	461f      	mov	r7, r3
 8010a18:	f103 0301 	add.w	r3, r3, #1
 8010a1c:	d0f9      	beq.n	8010a12 <__gethex+0x76>
 8010a1e:	f7ff ffa8 	bl	8010972 <__hexdig_fun>
 8010a22:	2301      	movs	r3, #1
 8010a24:	fab0 f480 	clz	r4, r0
 8010a28:	0964      	lsrs	r4, r4, #5
 8010a2a:	4635      	mov	r5, r6
 8010a2c:	9300      	str	r3, [sp, #0]
 8010a2e:	463a      	mov	r2, r7
 8010a30:	4616      	mov	r6, r2
 8010a32:	3201      	adds	r2, #1
 8010a34:	7830      	ldrb	r0, [r6, #0]
 8010a36:	f7ff ff9c 	bl	8010972 <__hexdig_fun>
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d1f8      	bne.n	8010a30 <__gethex+0x94>
 8010a3e:	9901      	ldr	r1, [sp, #4]
 8010a40:	4652      	mov	r2, sl
 8010a42:	4630      	mov	r0, r6
 8010a44:	f7fe fe65 	bl	800f712 <strncmp>
 8010a48:	b980      	cbnz	r0, 8010a6c <__gethex+0xd0>
 8010a4a:	b94d      	cbnz	r5, 8010a60 <__gethex+0xc4>
 8010a4c:	eb06 050a 	add.w	r5, r6, sl
 8010a50:	462a      	mov	r2, r5
 8010a52:	4616      	mov	r6, r2
 8010a54:	3201      	adds	r2, #1
 8010a56:	7830      	ldrb	r0, [r6, #0]
 8010a58:	f7ff ff8b 	bl	8010972 <__hexdig_fun>
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d1f8      	bne.n	8010a52 <__gethex+0xb6>
 8010a60:	1bad      	subs	r5, r5, r6
 8010a62:	00ad      	lsls	r5, r5, #2
 8010a64:	e004      	b.n	8010a70 <__gethex+0xd4>
 8010a66:	2400      	movs	r4, #0
 8010a68:	4625      	mov	r5, r4
 8010a6a:	e7e0      	b.n	8010a2e <__gethex+0x92>
 8010a6c:	2d00      	cmp	r5, #0
 8010a6e:	d1f7      	bne.n	8010a60 <__gethex+0xc4>
 8010a70:	7833      	ldrb	r3, [r6, #0]
 8010a72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010a76:	2b50      	cmp	r3, #80	; 0x50
 8010a78:	d13b      	bne.n	8010af2 <__gethex+0x156>
 8010a7a:	7873      	ldrb	r3, [r6, #1]
 8010a7c:	2b2b      	cmp	r3, #43	; 0x2b
 8010a7e:	d02c      	beq.n	8010ada <__gethex+0x13e>
 8010a80:	2b2d      	cmp	r3, #45	; 0x2d
 8010a82:	d02e      	beq.n	8010ae2 <__gethex+0x146>
 8010a84:	1c71      	adds	r1, r6, #1
 8010a86:	f04f 0900 	mov.w	r9, #0
 8010a8a:	7808      	ldrb	r0, [r1, #0]
 8010a8c:	f7ff ff71 	bl	8010972 <__hexdig_fun>
 8010a90:	1e43      	subs	r3, r0, #1
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	2b18      	cmp	r3, #24
 8010a96:	d82c      	bhi.n	8010af2 <__gethex+0x156>
 8010a98:	f1a0 0210 	sub.w	r2, r0, #16
 8010a9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010aa0:	f7ff ff67 	bl	8010972 <__hexdig_fun>
 8010aa4:	1e43      	subs	r3, r0, #1
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	2b18      	cmp	r3, #24
 8010aaa:	d91d      	bls.n	8010ae8 <__gethex+0x14c>
 8010aac:	f1b9 0f00 	cmp.w	r9, #0
 8010ab0:	d000      	beq.n	8010ab4 <__gethex+0x118>
 8010ab2:	4252      	negs	r2, r2
 8010ab4:	4415      	add	r5, r2
 8010ab6:	f8cb 1000 	str.w	r1, [fp]
 8010aba:	b1e4      	cbz	r4, 8010af6 <__gethex+0x15a>
 8010abc:	9b00      	ldr	r3, [sp, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	bf14      	ite	ne
 8010ac2:	2700      	movne	r7, #0
 8010ac4:	2706      	moveq	r7, #6
 8010ac6:	4638      	mov	r0, r7
 8010ac8:	b009      	add	sp, #36	; 0x24
 8010aca:	ecbd 8b02 	vpop	{d8}
 8010ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad2:	463e      	mov	r6, r7
 8010ad4:	4625      	mov	r5, r4
 8010ad6:	2401      	movs	r4, #1
 8010ad8:	e7ca      	b.n	8010a70 <__gethex+0xd4>
 8010ada:	f04f 0900 	mov.w	r9, #0
 8010ade:	1cb1      	adds	r1, r6, #2
 8010ae0:	e7d3      	b.n	8010a8a <__gethex+0xee>
 8010ae2:	f04f 0901 	mov.w	r9, #1
 8010ae6:	e7fa      	b.n	8010ade <__gethex+0x142>
 8010ae8:	230a      	movs	r3, #10
 8010aea:	fb03 0202 	mla	r2, r3, r2, r0
 8010aee:	3a10      	subs	r2, #16
 8010af0:	e7d4      	b.n	8010a9c <__gethex+0x100>
 8010af2:	4631      	mov	r1, r6
 8010af4:	e7df      	b.n	8010ab6 <__gethex+0x11a>
 8010af6:	1bf3      	subs	r3, r6, r7
 8010af8:	3b01      	subs	r3, #1
 8010afa:	4621      	mov	r1, r4
 8010afc:	2b07      	cmp	r3, #7
 8010afe:	dc0b      	bgt.n	8010b18 <__gethex+0x17c>
 8010b00:	ee18 0a10 	vmov	r0, s16
 8010b04:	f000 faea 	bl	80110dc <_Balloc>
 8010b08:	4604      	mov	r4, r0
 8010b0a:	b940      	cbnz	r0, 8010b1e <__gethex+0x182>
 8010b0c:	4b65      	ldr	r3, [pc, #404]	; (8010ca4 <__gethex+0x308>)
 8010b0e:	4602      	mov	r2, r0
 8010b10:	21de      	movs	r1, #222	; 0xde
 8010b12:	4865      	ldr	r0, [pc, #404]	; (8010ca8 <__gethex+0x30c>)
 8010b14:	f001 fc46 	bl	80123a4 <__assert_func>
 8010b18:	3101      	adds	r1, #1
 8010b1a:	105b      	asrs	r3, r3, #1
 8010b1c:	e7ee      	b.n	8010afc <__gethex+0x160>
 8010b1e:	f100 0914 	add.w	r9, r0, #20
 8010b22:	f04f 0b00 	mov.w	fp, #0
 8010b26:	f1ca 0301 	rsb	r3, sl, #1
 8010b2a:	f8cd 9008 	str.w	r9, [sp, #8]
 8010b2e:	f8cd b000 	str.w	fp, [sp]
 8010b32:	9306      	str	r3, [sp, #24]
 8010b34:	42b7      	cmp	r7, r6
 8010b36:	d340      	bcc.n	8010bba <__gethex+0x21e>
 8010b38:	9802      	ldr	r0, [sp, #8]
 8010b3a:	9b00      	ldr	r3, [sp, #0]
 8010b3c:	f840 3b04 	str.w	r3, [r0], #4
 8010b40:	eba0 0009 	sub.w	r0, r0, r9
 8010b44:	1080      	asrs	r0, r0, #2
 8010b46:	0146      	lsls	r6, r0, #5
 8010b48:	6120      	str	r0, [r4, #16]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f000 fbbc 	bl	80112c8 <__hi0bits>
 8010b50:	1a30      	subs	r0, r6, r0
 8010b52:	f8d8 6000 	ldr.w	r6, [r8]
 8010b56:	42b0      	cmp	r0, r6
 8010b58:	dd63      	ble.n	8010c22 <__gethex+0x286>
 8010b5a:	1b87      	subs	r7, r0, r6
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f000 ff56 	bl	8011a10 <__any_on>
 8010b64:	4682      	mov	sl, r0
 8010b66:	b1a8      	cbz	r0, 8010b94 <__gethex+0x1f8>
 8010b68:	1e7b      	subs	r3, r7, #1
 8010b6a:	1159      	asrs	r1, r3, #5
 8010b6c:	f003 021f 	and.w	r2, r3, #31
 8010b70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010b74:	f04f 0a01 	mov.w	sl, #1
 8010b78:	fa0a f202 	lsl.w	r2, sl, r2
 8010b7c:	420a      	tst	r2, r1
 8010b7e:	d009      	beq.n	8010b94 <__gethex+0x1f8>
 8010b80:	4553      	cmp	r3, sl
 8010b82:	dd05      	ble.n	8010b90 <__gethex+0x1f4>
 8010b84:	1eb9      	subs	r1, r7, #2
 8010b86:	4620      	mov	r0, r4
 8010b88:	f000 ff42 	bl	8011a10 <__any_on>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d145      	bne.n	8010c1c <__gethex+0x280>
 8010b90:	f04f 0a02 	mov.w	sl, #2
 8010b94:	4639      	mov	r1, r7
 8010b96:	4620      	mov	r0, r4
 8010b98:	f7ff fe99 	bl	80108ce <rshift>
 8010b9c:	443d      	add	r5, r7
 8010b9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ba2:	42ab      	cmp	r3, r5
 8010ba4:	da4c      	bge.n	8010c40 <__gethex+0x2a4>
 8010ba6:	ee18 0a10 	vmov	r0, s16
 8010baa:	4621      	mov	r1, r4
 8010bac:	f000 fad6 	bl	801115c <_Bfree>
 8010bb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	6013      	str	r3, [r2, #0]
 8010bb6:	27a3      	movs	r7, #163	; 0xa3
 8010bb8:	e785      	b.n	8010ac6 <__gethex+0x12a>
 8010bba:	1e73      	subs	r3, r6, #1
 8010bbc:	9a05      	ldr	r2, [sp, #20]
 8010bbe:	9303      	str	r3, [sp, #12]
 8010bc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d019      	beq.n	8010bfc <__gethex+0x260>
 8010bc8:	f1bb 0f20 	cmp.w	fp, #32
 8010bcc:	d107      	bne.n	8010bde <__gethex+0x242>
 8010bce:	9b02      	ldr	r3, [sp, #8]
 8010bd0:	9a00      	ldr	r2, [sp, #0]
 8010bd2:	f843 2b04 	str.w	r2, [r3], #4
 8010bd6:	9302      	str	r3, [sp, #8]
 8010bd8:	2300      	movs	r3, #0
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	469b      	mov	fp, r3
 8010bde:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010be2:	f7ff fec6 	bl	8010972 <__hexdig_fun>
 8010be6:	9b00      	ldr	r3, [sp, #0]
 8010be8:	f000 000f 	and.w	r0, r0, #15
 8010bec:	fa00 f00b 	lsl.w	r0, r0, fp
 8010bf0:	4303      	orrs	r3, r0
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	f10b 0b04 	add.w	fp, fp, #4
 8010bf8:	9b03      	ldr	r3, [sp, #12]
 8010bfa:	e00d      	b.n	8010c18 <__gethex+0x27c>
 8010bfc:	9b03      	ldr	r3, [sp, #12]
 8010bfe:	9a06      	ldr	r2, [sp, #24]
 8010c00:	4413      	add	r3, r2
 8010c02:	42bb      	cmp	r3, r7
 8010c04:	d3e0      	bcc.n	8010bc8 <__gethex+0x22c>
 8010c06:	4618      	mov	r0, r3
 8010c08:	9901      	ldr	r1, [sp, #4]
 8010c0a:	9307      	str	r3, [sp, #28]
 8010c0c:	4652      	mov	r2, sl
 8010c0e:	f7fe fd80 	bl	800f712 <strncmp>
 8010c12:	9b07      	ldr	r3, [sp, #28]
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d1d7      	bne.n	8010bc8 <__gethex+0x22c>
 8010c18:	461e      	mov	r6, r3
 8010c1a:	e78b      	b.n	8010b34 <__gethex+0x198>
 8010c1c:	f04f 0a03 	mov.w	sl, #3
 8010c20:	e7b8      	b.n	8010b94 <__gethex+0x1f8>
 8010c22:	da0a      	bge.n	8010c3a <__gethex+0x29e>
 8010c24:	1a37      	subs	r7, r6, r0
 8010c26:	4621      	mov	r1, r4
 8010c28:	ee18 0a10 	vmov	r0, s16
 8010c2c:	463a      	mov	r2, r7
 8010c2e:	f000 fcb1 	bl	8011594 <__lshift>
 8010c32:	1bed      	subs	r5, r5, r7
 8010c34:	4604      	mov	r4, r0
 8010c36:	f100 0914 	add.w	r9, r0, #20
 8010c3a:	f04f 0a00 	mov.w	sl, #0
 8010c3e:	e7ae      	b.n	8010b9e <__gethex+0x202>
 8010c40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010c44:	42a8      	cmp	r0, r5
 8010c46:	dd72      	ble.n	8010d2e <__gethex+0x392>
 8010c48:	1b45      	subs	r5, r0, r5
 8010c4a:	42ae      	cmp	r6, r5
 8010c4c:	dc36      	bgt.n	8010cbc <__gethex+0x320>
 8010c4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c52:	2b02      	cmp	r3, #2
 8010c54:	d02a      	beq.n	8010cac <__gethex+0x310>
 8010c56:	2b03      	cmp	r3, #3
 8010c58:	d02c      	beq.n	8010cb4 <__gethex+0x318>
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d115      	bne.n	8010c8a <__gethex+0x2ee>
 8010c5e:	42ae      	cmp	r6, r5
 8010c60:	d113      	bne.n	8010c8a <__gethex+0x2ee>
 8010c62:	2e01      	cmp	r6, #1
 8010c64:	d10b      	bne.n	8010c7e <__gethex+0x2e2>
 8010c66:	9a04      	ldr	r2, [sp, #16]
 8010c68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c6c:	6013      	str	r3, [r2, #0]
 8010c6e:	2301      	movs	r3, #1
 8010c70:	6123      	str	r3, [r4, #16]
 8010c72:	f8c9 3000 	str.w	r3, [r9]
 8010c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c78:	2762      	movs	r7, #98	; 0x62
 8010c7a:	601c      	str	r4, [r3, #0]
 8010c7c:	e723      	b.n	8010ac6 <__gethex+0x12a>
 8010c7e:	1e71      	subs	r1, r6, #1
 8010c80:	4620      	mov	r0, r4
 8010c82:	f000 fec5 	bl	8011a10 <__any_on>
 8010c86:	2800      	cmp	r0, #0
 8010c88:	d1ed      	bne.n	8010c66 <__gethex+0x2ca>
 8010c8a:	ee18 0a10 	vmov	r0, s16
 8010c8e:	4621      	mov	r1, r4
 8010c90:	f000 fa64 	bl	801115c <_Bfree>
 8010c94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c96:	2300      	movs	r3, #0
 8010c98:	6013      	str	r3, [r2, #0]
 8010c9a:	2750      	movs	r7, #80	; 0x50
 8010c9c:	e713      	b.n	8010ac6 <__gethex+0x12a>
 8010c9e:	bf00      	nop
 8010ca0:	08014134 	.word	0x08014134
 8010ca4:	080140b8 	.word	0x080140b8
 8010ca8:	080140c9 	.word	0x080140c9
 8010cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1eb      	bne.n	8010c8a <__gethex+0x2ee>
 8010cb2:	e7d8      	b.n	8010c66 <__gethex+0x2ca>
 8010cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d1d5      	bne.n	8010c66 <__gethex+0x2ca>
 8010cba:	e7e6      	b.n	8010c8a <__gethex+0x2ee>
 8010cbc:	1e6f      	subs	r7, r5, #1
 8010cbe:	f1ba 0f00 	cmp.w	sl, #0
 8010cc2:	d131      	bne.n	8010d28 <__gethex+0x38c>
 8010cc4:	b127      	cbz	r7, 8010cd0 <__gethex+0x334>
 8010cc6:	4639      	mov	r1, r7
 8010cc8:	4620      	mov	r0, r4
 8010cca:	f000 fea1 	bl	8011a10 <__any_on>
 8010cce:	4682      	mov	sl, r0
 8010cd0:	117b      	asrs	r3, r7, #5
 8010cd2:	2101      	movs	r1, #1
 8010cd4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010cd8:	f007 071f 	and.w	r7, r7, #31
 8010cdc:	fa01 f707 	lsl.w	r7, r1, r7
 8010ce0:	421f      	tst	r7, r3
 8010ce2:	4629      	mov	r1, r5
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	bf18      	it	ne
 8010ce8:	f04a 0a02 	orrne.w	sl, sl, #2
 8010cec:	1b76      	subs	r6, r6, r5
 8010cee:	f7ff fdee 	bl	80108ce <rshift>
 8010cf2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010cf6:	2702      	movs	r7, #2
 8010cf8:	f1ba 0f00 	cmp.w	sl, #0
 8010cfc:	d048      	beq.n	8010d90 <__gethex+0x3f4>
 8010cfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d02:	2b02      	cmp	r3, #2
 8010d04:	d015      	beq.n	8010d32 <__gethex+0x396>
 8010d06:	2b03      	cmp	r3, #3
 8010d08:	d017      	beq.n	8010d3a <__gethex+0x39e>
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d109      	bne.n	8010d22 <__gethex+0x386>
 8010d0e:	f01a 0f02 	tst.w	sl, #2
 8010d12:	d006      	beq.n	8010d22 <__gethex+0x386>
 8010d14:	f8d9 0000 	ldr.w	r0, [r9]
 8010d18:	ea4a 0a00 	orr.w	sl, sl, r0
 8010d1c:	f01a 0f01 	tst.w	sl, #1
 8010d20:	d10e      	bne.n	8010d40 <__gethex+0x3a4>
 8010d22:	f047 0710 	orr.w	r7, r7, #16
 8010d26:	e033      	b.n	8010d90 <__gethex+0x3f4>
 8010d28:	f04f 0a01 	mov.w	sl, #1
 8010d2c:	e7d0      	b.n	8010cd0 <__gethex+0x334>
 8010d2e:	2701      	movs	r7, #1
 8010d30:	e7e2      	b.n	8010cf8 <__gethex+0x35c>
 8010d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d34:	f1c3 0301 	rsb	r3, r3, #1
 8010d38:	9315      	str	r3, [sp, #84]	; 0x54
 8010d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d0f0      	beq.n	8010d22 <__gethex+0x386>
 8010d40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010d44:	f104 0314 	add.w	r3, r4, #20
 8010d48:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010d4c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010d50:	f04f 0c00 	mov.w	ip, #0
 8010d54:	4618      	mov	r0, r3
 8010d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d5a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010d5e:	d01c      	beq.n	8010d9a <__gethex+0x3fe>
 8010d60:	3201      	adds	r2, #1
 8010d62:	6002      	str	r2, [r0, #0]
 8010d64:	2f02      	cmp	r7, #2
 8010d66:	f104 0314 	add.w	r3, r4, #20
 8010d6a:	d13f      	bne.n	8010dec <__gethex+0x450>
 8010d6c:	f8d8 2000 	ldr.w	r2, [r8]
 8010d70:	3a01      	subs	r2, #1
 8010d72:	42b2      	cmp	r2, r6
 8010d74:	d10a      	bne.n	8010d8c <__gethex+0x3f0>
 8010d76:	1171      	asrs	r1, r6, #5
 8010d78:	2201      	movs	r2, #1
 8010d7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d7e:	f006 061f 	and.w	r6, r6, #31
 8010d82:	fa02 f606 	lsl.w	r6, r2, r6
 8010d86:	421e      	tst	r6, r3
 8010d88:	bf18      	it	ne
 8010d8a:	4617      	movne	r7, r2
 8010d8c:	f047 0720 	orr.w	r7, r7, #32
 8010d90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d92:	601c      	str	r4, [r3, #0]
 8010d94:	9b04      	ldr	r3, [sp, #16]
 8010d96:	601d      	str	r5, [r3, #0]
 8010d98:	e695      	b.n	8010ac6 <__gethex+0x12a>
 8010d9a:	4299      	cmp	r1, r3
 8010d9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010da0:	d8d8      	bhi.n	8010d54 <__gethex+0x3b8>
 8010da2:	68a3      	ldr	r3, [r4, #8]
 8010da4:	459b      	cmp	fp, r3
 8010da6:	db19      	blt.n	8010ddc <__gethex+0x440>
 8010da8:	6861      	ldr	r1, [r4, #4]
 8010daa:	ee18 0a10 	vmov	r0, s16
 8010dae:	3101      	adds	r1, #1
 8010db0:	f000 f994 	bl	80110dc <_Balloc>
 8010db4:	4681      	mov	r9, r0
 8010db6:	b918      	cbnz	r0, 8010dc0 <__gethex+0x424>
 8010db8:	4b1a      	ldr	r3, [pc, #104]	; (8010e24 <__gethex+0x488>)
 8010dba:	4602      	mov	r2, r0
 8010dbc:	2184      	movs	r1, #132	; 0x84
 8010dbe:	e6a8      	b.n	8010b12 <__gethex+0x176>
 8010dc0:	6922      	ldr	r2, [r4, #16]
 8010dc2:	3202      	adds	r2, #2
 8010dc4:	f104 010c 	add.w	r1, r4, #12
 8010dc8:	0092      	lsls	r2, r2, #2
 8010dca:	300c      	adds	r0, #12
 8010dcc:	f7fe fb52 	bl	800f474 <memcpy>
 8010dd0:	4621      	mov	r1, r4
 8010dd2:	ee18 0a10 	vmov	r0, s16
 8010dd6:	f000 f9c1 	bl	801115c <_Bfree>
 8010dda:	464c      	mov	r4, r9
 8010ddc:	6923      	ldr	r3, [r4, #16]
 8010dde:	1c5a      	adds	r2, r3, #1
 8010de0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010de4:	6122      	str	r2, [r4, #16]
 8010de6:	2201      	movs	r2, #1
 8010de8:	615a      	str	r2, [r3, #20]
 8010dea:	e7bb      	b.n	8010d64 <__gethex+0x3c8>
 8010dec:	6922      	ldr	r2, [r4, #16]
 8010dee:	455a      	cmp	r2, fp
 8010df0:	dd0b      	ble.n	8010e0a <__gethex+0x46e>
 8010df2:	2101      	movs	r1, #1
 8010df4:	4620      	mov	r0, r4
 8010df6:	f7ff fd6a 	bl	80108ce <rshift>
 8010dfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010dfe:	3501      	adds	r5, #1
 8010e00:	42ab      	cmp	r3, r5
 8010e02:	f6ff aed0 	blt.w	8010ba6 <__gethex+0x20a>
 8010e06:	2701      	movs	r7, #1
 8010e08:	e7c0      	b.n	8010d8c <__gethex+0x3f0>
 8010e0a:	f016 061f 	ands.w	r6, r6, #31
 8010e0e:	d0fa      	beq.n	8010e06 <__gethex+0x46a>
 8010e10:	449a      	add	sl, r3
 8010e12:	f1c6 0620 	rsb	r6, r6, #32
 8010e16:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010e1a:	f000 fa55 	bl	80112c8 <__hi0bits>
 8010e1e:	42b0      	cmp	r0, r6
 8010e20:	dbe7      	blt.n	8010df2 <__gethex+0x456>
 8010e22:	e7f0      	b.n	8010e06 <__gethex+0x46a>
 8010e24:	080140b8 	.word	0x080140b8

08010e28 <L_shift>:
 8010e28:	f1c2 0208 	rsb	r2, r2, #8
 8010e2c:	0092      	lsls	r2, r2, #2
 8010e2e:	b570      	push	{r4, r5, r6, lr}
 8010e30:	f1c2 0620 	rsb	r6, r2, #32
 8010e34:	6843      	ldr	r3, [r0, #4]
 8010e36:	6804      	ldr	r4, [r0, #0]
 8010e38:	fa03 f506 	lsl.w	r5, r3, r6
 8010e3c:	432c      	orrs	r4, r5
 8010e3e:	40d3      	lsrs	r3, r2
 8010e40:	6004      	str	r4, [r0, #0]
 8010e42:	f840 3f04 	str.w	r3, [r0, #4]!
 8010e46:	4288      	cmp	r0, r1
 8010e48:	d3f4      	bcc.n	8010e34 <L_shift+0xc>
 8010e4a:	bd70      	pop	{r4, r5, r6, pc}

08010e4c <__match>:
 8010e4c:	b530      	push	{r4, r5, lr}
 8010e4e:	6803      	ldr	r3, [r0, #0]
 8010e50:	3301      	adds	r3, #1
 8010e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e56:	b914      	cbnz	r4, 8010e5e <__match+0x12>
 8010e58:	6003      	str	r3, [r0, #0]
 8010e5a:	2001      	movs	r0, #1
 8010e5c:	bd30      	pop	{r4, r5, pc}
 8010e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010e66:	2d19      	cmp	r5, #25
 8010e68:	bf98      	it	ls
 8010e6a:	3220      	addls	r2, #32
 8010e6c:	42a2      	cmp	r2, r4
 8010e6e:	d0f0      	beq.n	8010e52 <__match+0x6>
 8010e70:	2000      	movs	r0, #0
 8010e72:	e7f3      	b.n	8010e5c <__match+0x10>

08010e74 <__hexnan>:
 8010e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e78:	680b      	ldr	r3, [r1, #0]
 8010e7a:	6801      	ldr	r1, [r0, #0]
 8010e7c:	115e      	asrs	r6, r3, #5
 8010e7e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010e82:	f013 031f 	ands.w	r3, r3, #31
 8010e86:	b087      	sub	sp, #28
 8010e88:	bf18      	it	ne
 8010e8a:	3604      	addne	r6, #4
 8010e8c:	2500      	movs	r5, #0
 8010e8e:	1f37      	subs	r7, r6, #4
 8010e90:	4682      	mov	sl, r0
 8010e92:	4690      	mov	r8, r2
 8010e94:	9301      	str	r3, [sp, #4]
 8010e96:	f846 5c04 	str.w	r5, [r6, #-4]
 8010e9a:	46b9      	mov	r9, r7
 8010e9c:	463c      	mov	r4, r7
 8010e9e:	9502      	str	r5, [sp, #8]
 8010ea0:	46ab      	mov	fp, r5
 8010ea2:	784a      	ldrb	r2, [r1, #1]
 8010ea4:	1c4b      	adds	r3, r1, #1
 8010ea6:	9303      	str	r3, [sp, #12]
 8010ea8:	b342      	cbz	r2, 8010efc <__hexnan+0x88>
 8010eaa:	4610      	mov	r0, r2
 8010eac:	9105      	str	r1, [sp, #20]
 8010eae:	9204      	str	r2, [sp, #16]
 8010eb0:	f7ff fd5f 	bl	8010972 <__hexdig_fun>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d14f      	bne.n	8010f58 <__hexnan+0xe4>
 8010eb8:	9a04      	ldr	r2, [sp, #16]
 8010eba:	9905      	ldr	r1, [sp, #20]
 8010ebc:	2a20      	cmp	r2, #32
 8010ebe:	d818      	bhi.n	8010ef2 <__hexnan+0x7e>
 8010ec0:	9b02      	ldr	r3, [sp, #8]
 8010ec2:	459b      	cmp	fp, r3
 8010ec4:	dd13      	ble.n	8010eee <__hexnan+0x7a>
 8010ec6:	454c      	cmp	r4, r9
 8010ec8:	d206      	bcs.n	8010ed8 <__hexnan+0x64>
 8010eca:	2d07      	cmp	r5, #7
 8010ecc:	dc04      	bgt.n	8010ed8 <__hexnan+0x64>
 8010ece:	462a      	mov	r2, r5
 8010ed0:	4649      	mov	r1, r9
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f7ff ffa8 	bl	8010e28 <L_shift>
 8010ed8:	4544      	cmp	r4, r8
 8010eda:	d950      	bls.n	8010f7e <__hexnan+0x10a>
 8010edc:	2300      	movs	r3, #0
 8010ede:	f1a4 0904 	sub.w	r9, r4, #4
 8010ee2:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ee6:	f8cd b008 	str.w	fp, [sp, #8]
 8010eea:	464c      	mov	r4, r9
 8010eec:	461d      	mov	r5, r3
 8010eee:	9903      	ldr	r1, [sp, #12]
 8010ef0:	e7d7      	b.n	8010ea2 <__hexnan+0x2e>
 8010ef2:	2a29      	cmp	r2, #41	; 0x29
 8010ef4:	d156      	bne.n	8010fa4 <__hexnan+0x130>
 8010ef6:	3102      	adds	r1, #2
 8010ef8:	f8ca 1000 	str.w	r1, [sl]
 8010efc:	f1bb 0f00 	cmp.w	fp, #0
 8010f00:	d050      	beq.n	8010fa4 <__hexnan+0x130>
 8010f02:	454c      	cmp	r4, r9
 8010f04:	d206      	bcs.n	8010f14 <__hexnan+0xa0>
 8010f06:	2d07      	cmp	r5, #7
 8010f08:	dc04      	bgt.n	8010f14 <__hexnan+0xa0>
 8010f0a:	462a      	mov	r2, r5
 8010f0c:	4649      	mov	r1, r9
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f7ff ff8a 	bl	8010e28 <L_shift>
 8010f14:	4544      	cmp	r4, r8
 8010f16:	d934      	bls.n	8010f82 <__hexnan+0x10e>
 8010f18:	f1a8 0204 	sub.w	r2, r8, #4
 8010f1c:	4623      	mov	r3, r4
 8010f1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010f22:	f842 1f04 	str.w	r1, [r2, #4]!
 8010f26:	429f      	cmp	r7, r3
 8010f28:	d2f9      	bcs.n	8010f1e <__hexnan+0xaa>
 8010f2a:	1b3b      	subs	r3, r7, r4
 8010f2c:	f023 0303 	bic.w	r3, r3, #3
 8010f30:	3304      	adds	r3, #4
 8010f32:	3401      	adds	r4, #1
 8010f34:	3e03      	subs	r6, #3
 8010f36:	42b4      	cmp	r4, r6
 8010f38:	bf88      	it	hi
 8010f3a:	2304      	movhi	r3, #4
 8010f3c:	4443      	add	r3, r8
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f843 2b04 	str.w	r2, [r3], #4
 8010f44:	429f      	cmp	r7, r3
 8010f46:	d2fb      	bcs.n	8010f40 <__hexnan+0xcc>
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	b91b      	cbnz	r3, 8010f54 <__hexnan+0xe0>
 8010f4c:	4547      	cmp	r7, r8
 8010f4e:	d127      	bne.n	8010fa0 <__hexnan+0x12c>
 8010f50:	2301      	movs	r3, #1
 8010f52:	603b      	str	r3, [r7, #0]
 8010f54:	2005      	movs	r0, #5
 8010f56:	e026      	b.n	8010fa6 <__hexnan+0x132>
 8010f58:	3501      	adds	r5, #1
 8010f5a:	2d08      	cmp	r5, #8
 8010f5c:	f10b 0b01 	add.w	fp, fp, #1
 8010f60:	dd06      	ble.n	8010f70 <__hexnan+0xfc>
 8010f62:	4544      	cmp	r4, r8
 8010f64:	d9c3      	bls.n	8010eee <__hexnan+0x7a>
 8010f66:	2300      	movs	r3, #0
 8010f68:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f6c:	2501      	movs	r5, #1
 8010f6e:	3c04      	subs	r4, #4
 8010f70:	6822      	ldr	r2, [r4, #0]
 8010f72:	f000 000f 	and.w	r0, r0, #15
 8010f76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010f7a:	6022      	str	r2, [r4, #0]
 8010f7c:	e7b7      	b.n	8010eee <__hexnan+0x7a>
 8010f7e:	2508      	movs	r5, #8
 8010f80:	e7b5      	b.n	8010eee <__hexnan+0x7a>
 8010f82:	9b01      	ldr	r3, [sp, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d0df      	beq.n	8010f48 <__hexnan+0xd4>
 8010f88:	f04f 32ff 	mov.w	r2, #4294967295
 8010f8c:	f1c3 0320 	rsb	r3, r3, #32
 8010f90:	fa22 f303 	lsr.w	r3, r2, r3
 8010f94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010f98:	401a      	ands	r2, r3
 8010f9a:	f846 2c04 	str.w	r2, [r6, #-4]
 8010f9e:	e7d3      	b.n	8010f48 <__hexnan+0xd4>
 8010fa0:	3f04      	subs	r7, #4
 8010fa2:	e7d1      	b.n	8010f48 <__hexnan+0xd4>
 8010fa4:	2004      	movs	r0, #4
 8010fa6:	b007      	add	sp, #28
 8010fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fac <__retarget_lock_init_recursive>:
 8010fac:	4770      	bx	lr

08010fae <__retarget_lock_acquire_recursive>:
 8010fae:	4770      	bx	lr

08010fb0 <__retarget_lock_release_recursive>:
 8010fb0:	4770      	bx	lr
	...

08010fb4 <_lseek_r>:
 8010fb4:	b538      	push	{r3, r4, r5, lr}
 8010fb6:	4d07      	ldr	r5, [pc, #28]	; (8010fd4 <_lseek_r+0x20>)
 8010fb8:	4604      	mov	r4, r0
 8010fba:	4608      	mov	r0, r1
 8010fbc:	4611      	mov	r1, r2
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	602a      	str	r2, [r5, #0]
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	f7f1 fcae 	bl	8002924 <_lseek>
 8010fc8:	1c43      	adds	r3, r0, #1
 8010fca:	d102      	bne.n	8010fd2 <_lseek_r+0x1e>
 8010fcc:	682b      	ldr	r3, [r5, #0]
 8010fce:	b103      	cbz	r3, 8010fd2 <_lseek_r+0x1e>
 8010fd0:	6023      	str	r3, [r4, #0]
 8010fd2:	bd38      	pop	{r3, r4, r5, pc}
 8010fd4:	200038c0 	.word	0x200038c0

08010fd8 <__swhatbuf_r>:
 8010fd8:	b570      	push	{r4, r5, r6, lr}
 8010fda:	460e      	mov	r6, r1
 8010fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fe0:	2900      	cmp	r1, #0
 8010fe2:	b096      	sub	sp, #88	; 0x58
 8010fe4:	4614      	mov	r4, r2
 8010fe6:	461d      	mov	r5, r3
 8010fe8:	da07      	bge.n	8010ffa <__swhatbuf_r+0x22>
 8010fea:	2300      	movs	r3, #0
 8010fec:	602b      	str	r3, [r5, #0]
 8010fee:	89b3      	ldrh	r3, [r6, #12]
 8010ff0:	061a      	lsls	r2, r3, #24
 8010ff2:	d410      	bmi.n	8011016 <__swhatbuf_r+0x3e>
 8010ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ff8:	e00e      	b.n	8011018 <__swhatbuf_r+0x40>
 8010ffa:	466a      	mov	r2, sp
 8010ffc:	f001 fa02 	bl	8012404 <_fstat_r>
 8011000:	2800      	cmp	r0, #0
 8011002:	dbf2      	blt.n	8010fea <__swhatbuf_r+0x12>
 8011004:	9a01      	ldr	r2, [sp, #4]
 8011006:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801100a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801100e:	425a      	negs	r2, r3
 8011010:	415a      	adcs	r2, r3
 8011012:	602a      	str	r2, [r5, #0]
 8011014:	e7ee      	b.n	8010ff4 <__swhatbuf_r+0x1c>
 8011016:	2340      	movs	r3, #64	; 0x40
 8011018:	2000      	movs	r0, #0
 801101a:	6023      	str	r3, [r4, #0]
 801101c:	b016      	add	sp, #88	; 0x58
 801101e:	bd70      	pop	{r4, r5, r6, pc}

08011020 <__smakebuf_r>:
 8011020:	898b      	ldrh	r3, [r1, #12]
 8011022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011024:	079d      	lsls	r5, r3, #30
 8011026:	4606      	mov	r6, r0
 8011028:	460c      	mov	r4, r1
 801102a:	d507      	bpl.n	801103c <__smakebuf_r+0x1c>
 801102c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011030:	6023      	str	r3, [r4, #0]
 8011032:	6123      	str	r3, [r4, #16]
 8011034:	2301      	movs	r3, #1
 8011036:	6163      	str	r3, [r4, #20]
 8011038:	b002      	add	sp, #8
 801103a:	bd70      	pop	{r4, r5, r6, pc}
 801103c:	ab01      	add	r3, sp, #4
 801103e:	466a      	mov	r2, sp
 8011040:	f7ff ffca 	bl	8010fd8 <__swhatbuf_r>
 8011044:	9900      	ldr	r1, [sp, #0]
 8011046:	4605      	mov	r5, r0
 8011048:	4630      	mov	r0, r6
 801104a:	f7fe fa79 	bl	800f540 <_malloc_r>
 801104e:	b948      	cbnz	r0, 8011064 <__smakebuf_r+0x44>
 8011050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011054:	059a      	lsls	r2, r3, #22
 8011056:	d4ef      	bmi.n	8011038 <__smakebuf_r+0x18>
 8011058:	f023 0303 	bic.w	r3, r3, #3
 801105c:	f043 0302 	orr.w	r3, r3, #2
 8011060:	81a3      	strh	r3, [r4, #12]
 8011062:	e7e3      	b.n	801102c <__smakebuf_r+0xc>
 8011064:	4b0d      	ldr	r3, [pc, #52]	; (801109c <__smakebuf_r+0x7c>)
 8011066:	62b3      	str	r3, [r6, #40]	; 0x28
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	6020      	str	r0, [r4, #0]
 801106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011070:	81a3      	strh	r3, [r4, #12]
 8011072:	9b00      	ldr	r3, [sp, #0]
 8011074:	6163      	str	r3, [r4, #20]
 8011076:	9b01      	ldr	r3, [sp, #4]
 8011078:	6120      	str	r0, [r4, #16]
 801107a:	b15b      	cbz	r3, 8011094 <__smakebuf_r+0x74>
 801107c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011080:	4630      	mov	r0, r6
 8011082:	f001 f9d1 	bl	8012428 <_isatty_r>
 8011086:	b128      	cbz	r0, 8011094 <__smakebuf_r+0x74>
 8011088:	89a3      	ldrh	r3, [r4, #12]
 801108a:	f023 0303 	bic.w	r3, r3, #3
 801108e:	f043 0301 	orr.w	r3, r3, #1
 8011092:	81a3      	strh	r3, [r4, #12]
 8011094:	89a0      	ldrh	r0, [r4, #12]
 8011096:	4305      	orrs	r5, r0
 8011098:	81a5      	strh	r5, [r4, #12]
 801109a:	e7cd      	b.n	8011038 <__smakebuf_r+0x18>
 801109c:	0801072d 	.word	0x0801072d

080110a0 <__ascii_mbtowc>:
 80110a0:	b082      	sub	sp, #8
 80110a2:	b901      	cbnz	r1, 80110a6 <__ascii_mbtowc+0x6>
 80110a4:	a901      	add	r1, sp, #4
 80110a6:	b142      	cbz	r2, 80110ba <__ascii_mbtowc+0x1a>
 80110a8:	b14b      	cbz	r3, 80110be <__ascii_mbtowc+0x1e>
 80110aa:	7813      	ldrb	r3, [r2, #0]
 80110ac:	600b      	str	r3, [r1, #0]
 80110ae:	7812      	ldrb	r2, [r2, #0]
 80110b0:	1e10      	subs	r0, r2, #0
 80110b2:	bf18      	it	ne
 80110b4:	2001      	movne	r0, #1
 80110b6:	b002      	add	sp, #8
 80110b8:	4770      	bx	lr
 80110ba:	4610      	mov	r0, r2
 80110bc:	e7fb      	b.n	80110b6 <__ascii_mbtowc+0x16>
 80110be:	f06f 0001 	mvn.w	r0, #1
 80110c2:	e7f8      	b.n	80110b6 <__ascii_mbtowc+0x16>

080110c4 <__malloc_lock>:
 80110c4:	4801      	ldr	r0, [pc, #4]	; (80110cc <__malloc_lock+0x8>)
 80110c6:	f7ff bf72 	b.w	8010fae <__retarget_lock_acquire_recursive>
 80110ca:	bf00      	nop
 80110cc:	200038b8 	.word	0x200038b8

080110d0 <__malloc_unlock>:
 80110d0:	4801      	ldr	r0, [pc, #4]	; (80110d8 <__malloc_unlock+0x8>)
 80110d2:	f7ff bf6d 	b.w	8010fb0 <__retarget_lock_release_recursive>
 80110d6:	bf00      	nop
 80110d8:	200038b8 	.word	0x200038b8

080110dc <_Balloc>:
 80110dc:	b570      	push	{r4, r5, r6, lr}
 80110de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80110e0:	4604      	mov	r4, r0
 80110e2:	460d      	mov	r5, r1
 80110e4:	b976      	cbnz	r6, 8011104 <_Balloc+0x28>
 80110e6:	2010      	movs	r0, #16
 80110e8:	f7fe f9b4 	bl	800f454 <malloc>
 80110ec:	4602      	mov	r2, r0
 80110ee:	6260      	str	r0, [r4, #36]	; 0x24
 80110f0:	b920      	cbnz	r0, 80110fc <_Balloc+0x20>
 80110f2:	4b18      	ldr	r3, [pc, #96]	; (8011154 <_Balloc+0x78>)
 80110f4:	4818      	ldr	r0, [pc, #96]	; (8011158 <_Balloc+0x7c>)
 80110f6:	2166      	movs	r1, #102	; 0x66
 80110f8:	f001 f954 	bl	80123a4 <__assert_func>
 80110fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011100:	6006      	str	r6, [r0, #0]
 8011102:	60c6      	str	r6, [r0, #12]
 8011104:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011106:	68f3      	ldr	r3, [r6, #12]
 8011108:	b183      	cbz	r3, 801112c <_Balloc+0x50>
 801110a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011112:	b9b8      	cbnz	r0, 8011144 <_Balloc+0x68>
 8011114:	2101      	movs	r1, #1
 8011116:	fa01 f605 	lsl.w	r6, r1, r5
 801111a:	1d72      	adds	r2, r6, #5
 801111c:	0092      	lsls	r2, r2, #2
 801111e:	4620      	mov	r0, r4
 8011120:	f000 fc97 	bl	8011a52 <_calloc_r>
 8011124:	b160      	cbz	r0, 8011140 <_Balloc+0x64>
 8011126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801112a:	e00e      	b.n	801114a <_Balloc+0x6e>
 801112c:	2221      	movs	r2, #33	; 0x21
 801112e:	2104      	movs	r1, #4
 8011130:	4620      	mov	r0, r4
 8011132:	f000 fc8e 	bl	8011a52 <_calloc_r>
 8011136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011138:	60f0      	str	r0, [r6, #12]
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d1e4      	bne.n	801110a <_Balloc+0x2e>
 8011140:	2000      	movs	r0, #0
 8011142:	bd70      	pop	{r4, r5, r6, pc}
 8011144:	6802      	ldr	r2, [r0, #0]
 8011146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801114a:	2300      	movs	r3, #0
 801114c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011150:	e7f7      	b.n	8011142 <_Balloc+0x66>
 8011152:	bf00      	nop
 8011154:	08014148 	.word	0x08014148
 8011158:	0801415f 	.word	0x0801415f

0801115c <_Bfree>:
 801115c:	b570      	push	{r4, r5, r6, lr}
 801115e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011160:	4605      	mov	r5, r0
 8011162:	460c      	mov	r4, r1
 8011164:	b976      	cbnz	r6, 8011184 <_Bfree+0x28>
 8011166:	2010      	movs	r0, #16
 8011168:	f7fe f974 	bl	800f454 <malloc>
 801116c:	4602      	mov	r2, r0
 801116e:	6268      	str	r0, [r5, #36]	; 0x24
 8011170:	b920      	cbnz	r0, 801117c <_Bfree+0x20>
 8011172:	4b09      	ldr	r3, [pc, #36]	; (8011198 <_Bfree+0x3c>)
 8011174:	4809      	ldr	r0, [pc, #36]	; (801119c <_Bfree+0x40>)
 8011176:	218a      	movs	r1, #138	; 0x8a
 8011178:	f001 f914 	bl	80123a4 <__assert_func>
 801117c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011180:	6006      	str	r6, [r0, #0]
 8011182:	60c6      	str	r6, [r0, #12]
 8011184:	b13c      	cbz	r4, 8011196 <_Bfree+0x3a>
 8011186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011188:	6862      	ldr	r2, [r4, #4]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011190:	6021      	str	r1, [r4, #0]
 8011192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011196:	bd70      	pop	{r4, r5, r6, pc}
 8011198:	08014148 	.word	0x08014148
 801119c:	0801415f 	.word	0x0801415f

080111a0 <__multadd>:
 80111a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a4:	690e      	ldr	r6, [r1, #16]
 80111a6:	4607      	mov	r7, r0
 80111a8:	4698      	mov	r8, r3
 80111aa:	460c      	mov	r4, r1
 80111ac:	f101 0014 	add.w	r0, r1, #20
 80111b0:	2300      	movs	r3, #0
 80111b2:	6805      	ldr	r5, [r0, #0]
 80111b4:	b2a9      	uxth	r1, r5
 80111b6:	fb02 8101 	mla	r1, r2, r1, r8
 80111ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80111be:	0c2d      	lsrs	r5, r5, #16
 80111c0:	fb02 c505 	mla	r5, r2, r5, ip
 80111c4:	b289      	uxth	r1, r1
 80111c6:	3301      	adds	r3, #1
 80111c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80111cc:	429e      	cmp	r6, r3
 80111ce:	f840 1b04 	str.w	r1, [r0], #4
 80111d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80111d6:	dcec      	bgt.n	80111b2 <__multadd+0x12>
 80111d8:	f1b8 0f00 	cmp.w	r8, #0
 80111dc:	d022      	beq.n	8011224 <__multadd+0x84>
 80111de:	68a3      	ldr	r3, [r4, #8]
 80111e0:	42b3      	cmp	r3, r6
 80111e2:	dc19      	bgt.n	8011218 <__multadd+0x78>
 80111e4:	6861      	ldr	r1, [r4, #4]
 80111e6:	4638      	mov	r0, r7
 80111e8:	3101      	adds	r1, #1
 80111ea:	f7ff ff77 	bl	80110dc <_Balloc>
 80111ee:	4605      	mov	r5, r0
 80111f0:	b928      	cbnz	r0, 80111fe <__multadd+0x5e>
 80111f2:	4602      	mov	r2, r0
 80111f4:	4b0d      	ldr	r3, [pc, #52]	; (801122c <__multadd+0x8c>)
 80111f6:	480e      	ldr	r0, [pc, #56]	; (8011230 <__multadd+0x90>)
 80111f8:	21b5      	movs	r1, #181	; 0xb5
 80111fa:	f001 f8d3 	bl	80123a4 <__assert_func>
 80111fe:	6922      	ldr	r2, [r4, #16]
 8011200:	3202      	adds	r2, #2
 8011202:	f104 010c 	add.w	r1, r4, #12
 8011206:	0092      	lsls	r2, r2, #2
 8011208:	300c      	adds	r0, #12
 801120a:	f7fe f933 	bl	800f474 <memcpy>
 801120e:	4621      	mov	r1, r4
 8011210:	4638      	mov	r0, r7
 8011212:	f7ff ffa3 	bl	801115c <_Bfree>
 8011216:	462c      	mov	r4, r5
 8011218:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801121c:	3601      	adds	r6, #1
 801121e:	f8c3 8014 	str.w	r8, [r3, #20]
 8011222:	6126      	str	r6, [r4, #16]
 8011224:	4620      	mov	r0, r4
 8011226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801122a:	bf00      	nop
 801122c:	080140b8 	.word	0x080140b8
 8011230:	0801415f 	.word	0x0801415f

08011234 <__s2b>:
 8011234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011238:	460c      	mov	r4, r1
 801123a:	4615      	mov	r5, r2
 801123c:	461f      	mov	r7, r3
 801123e:	2209      	movs	r2, #9
 8011240:	3308      	adds	r3, #8
 8011242:	4606      	mov	r6, r0
 8011244:	fb93 f3f2 	sdiv	r3, r3, r2
 8011248:	2100      	movs	r1, #0
 801124a:	2201      	movs	r2, #1
 801124c:	429a      	cmp	r2, r3
 801124e:	db09      	blt.n	8011264 <__s2b+0x30>
 8011250:	4630      	mov	r0, r6
 8011252:	f7ff ff43 	bl	80110dc <_Balloc>
 8011256:	b940      	cbnz	r0, 801126a <__s2b+0x36>
 8011258:	4602      	mov	r2, r0
 801125a:	4b19      	ldr	r3, [pc, #100]	; (80112c0 <__s2b+0x8c>)
 801125c:	4819      	ldr	r0, [pc, #100]	; (80112c4 <__s2b+0x90>)
 801125e:	21ce      	movs	r1, #206	; 0xce
 8011260:	f001 f8a0 	bl	80123a4 <__assert_func>
 8011264:	0052      	lsls	r2, r2, #1
 8011266:	3101      	adds	r1, #1
 8011268:	e7f0      	b.n	801124c <__s2b+0x18>
 801126a:	9b08      	ldr	r3, [sp, #32]
 801126c:	6143      	str	r3, [r0, #20]
 801126e:	2d09      	cmp	r5, #9
 8011270:	f04f 0301 	mov.w	r3, #1
 8011274:	6103      	str	r3, [r0, #16]
 8011276:	dd16      	ble.n	80112a6 <__s2b+0x72>
 8011278:	f104 0909 	add.w	r9, r4, #9
 801127c:	46c8      	mov	r8, r9
 801127e:	442c      	add	r4, r5
 8011280:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011284:	4601      	mov	r1, r0
 8011286:	3b30      	subs	r3, #48	; 0x30
 8011288:	220a      	movs	r2, #10
 801128a:	4630      	mov	r0, r6
 801128c:	f7ff ff88 	bl	80111a0 <__multadd>
 8011290:	45a0      	cmp	r8, r4
 8011292:	d1f5      	bne.n	8011280 <__s2b+0x4c>
 8011294:	f1a5 0408 	sub.w	r4, r5, #8
 8011298:	444c      	add	r4, r9
 801129a:	1b2d      	subs	r5, r5, r4
 801129c:	1963      	adds	r3, r4, r5
 801129e:	42bb      	cmp	r3, r7
 80112a0:	db04      	blt.n	80112ac <__s2b+0x78>
 80112a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112a6:	340a      	adds	r4, #10
 80112a8:	2509      	movs	r5, #9
 80112aa:	e7f6      	b.n	801129a <__s2b+0x66>
 80112ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80112b0:	4601      	mov	r1, r0
 80112b2:	3b30      	subs	r3, #48	; 0x30
 80112b4:	220a      	movs	r2, #10
 80112b6:	4630      	mov	r0, r6
 80112b8:	f7ff ff72 	bl	80111a0 <__multadd>
 80112bc:	e7ee      	b.n	801129c <__s2b+0x68>
 80112be:	bf00      	nop
 80112c0:	080140b8 	.word	0x080140b8
 80112c4:	0801415f 	.word	0x0801415f

080112c8 <__hi0bits>:
 80112c8:	0c03      	lsrs	r3, r0, #16
 80112ca:	041b      	lsls	r3, r3, #16
 80112cc:	b9d3      	cbnz	r3, 8011304 <__hi0bits+0x3c>
 80112ce:	0400      	lsls	r0, r0, #16
 80112d0:	2310      	movs	r3, #16
 80112d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80112d6:	bf04      	itt	eq
 80112d8:	0200      	lsleq	r0, r0, #8
 80112da:	3308      	addeq	r3, #8
 80112dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80112e0:	bf04      	itt	eq
 80112e2:	0100      	lsleq	r0, r0, #4
 80112e4:	3304      	addeq	r3, #4
 80112e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80112ea:	bf04      	itt	eq
 80112ec:	0080      	lsleq	r0, r0, #2
 80112ee:	3302      	addeq	r3, #2
 80112f0:	2800      	cmp	r0, #0
 80112f2:	db05      	blt.n	8011300 <__hi0bits+0x38>
 80112f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80112f8:	f103 0301 	add.w	r3, r3, #1
 80112fc:	bf08      	it	eq
 80112fe:	2320      	moveq	r3, #32
 8011300:	4618      	mov	r0, r3
 8011302:	4770      	bx	lr
 8011304:	2300      	movs	r3, #0
 8011306:	e7e4      	b.n	80112d2 <__hi0bits+0xa>

08011308 <__lo0bits>:
 8011308:	6803      	ldr	r3, [r0, #0]
 801130a:	f013 0207 	ands.w	r2, r3, #7
 801130e:	4601      	mov	r1, r0
 8011310:	d00b      	beq.n	801132a <__lo0bits+0x22>
 8011312:	07da      	lsls	r2, r3, #31
 8011314:	d424      	bmi.n	8011360 <__lo0bits+0x58>
 8011316:	0798      	lsls	r0, r3, #30
 8011318:	bf49      	itett	mi
 801131a:	085b      	lsrmi	r3, r3, #1
 801131c:	089b      	lsrpl	r3, r3, #2
 801131e:	2001      	movmi	r0, #1
 8011320:	600b      	strmi	r3, [r1, #0]
 8011322:	bf5c      	itt	pl
 8011324:	600b      	strpl	r3, [r1, #0]
 8011326:	2002      	movpl	r0, #2
 8011328:	4770      	bx	lr
 801132a:	b298      	uxth	r0, r3
 801132c:	b9b0      	cbnz	r0, 801135c <__lo0bits+0x54>
 801132e:	0c1b      	lsrs	r3, r3, #16
 8011330:	2010      	movs	r0, #16
 8011332:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011336:	bf04      	itt	eq
 8011338:	0a1b      	lsreq	r3, r3, #8
 801133a:	3008      	addeq	r0, #8
 801133c:	071a      	lsls	r2, r3, #28
 801133e:	bf04      	itt	eq
 8011340:	091b      	lsreq	r3, r3, #4
 8011342:	3004      	addeq	r0, #4
 8011344:	079a      	lsls	r2, r3, #30
 8011346:	bf04      	itt	eq
 8011348:	089b      	lsreq	r3, r3, #2
 801134a:	3002      	addeq	r0, #2
 801134c:	07da      	lsls	r2, r3, #31
 801134e:	d403      	bmi.n	8011358 <__lo0bits+0x50>
 8011350:	085b      	lsrs	r3, r3, #1
 8011352:	f100 0001 	add.w	r0, r0, #1
 8011356:	d005      	beq.n	8011364 <__lo0bits+0x5c>
 8011358:	600b      	str	r3, [r1, #0]
 801135a:	4770      	bx	lr
 801135c:	4610      	mov	r0, r2
 801135e:	e7e8      	b.n	8011332 <__lo0bits+0x2a>
 8011360:	2000      	movs	r0, #0
 8011362:	4770      	bx	lr
 8011364:	2020      	movs	r0, #32
 8011366:	4770      	bx	lr

08011368 <__i2b>:
 8011368:	b510      	push	{r4, lr}
 801136a:	460c      	mov	r4, r1
 801136c:	2101      	movs	r1, #1
 801136e:	f7ff feb5 	bl	80110dc <_Balloc>
 8011372:	4602      	mov	r2, r0
 8011374:	b928      	cbnz	r0, 8011382 <__i2b+0x1a>
 8011376:	4b05      	ldr	r3, [pc, #20]	; (801138c <__i2b+0x24>)
 8011378:	4805      	ldr	r0, [pc, #20]	; (8011390 <__i2b+0x28>)
 801137a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801137e:	f001 f811 	bl	80123a4 <__assert_func>
 8011382:	2301      	movs	r3, #1
 8011384:	6144      	str	r4, [r0, #20]
 8011386:	6103      	str	r3, [r0, #16]
 8011388:	bd10      	pop	{r4, pc}
 801138a:	bf00      	nop
 801138c:	080140b8 	.word	0x080140b8
 8011390:	0801415f 	.word	0x0801415f

08011394 <__multiply>:
 8011394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011398:	4614      	mov	r4, r2
 801139a:	690a      	ldr	r2, [r1, #16]
 801139c:	6923      	ldr	r3, [r4, #16]
 801139e:	429a      	cmp	r2, r3
 80113a0:	bfb8      	it	lt
 80113a2:	460b      	movlt	r3, r1
 80113a4:	460d      	mov	r5, r1
 80113a6:	bfbc      	itt	lt
 80113a8:	4625      	movlt	r5, r4
 80113aa:	461c      	movlt	r4, r3
 80113ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80113b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80113b4:	68ab      	ldr	r3, [r5, #8]
 80113b6:	6869      	ldr	r1, [r5, #4]
 80113b8:	eb0a 0709 	add.w	r7, sl, r9
 80113bc:	42bb      	cmp	r3, r7
 80113be:	b085      	sub	sp, #20
 80113c0:	bfb8      	it	lt
 80113c2:	3101      	addlt	r1, #1
 80113c4:	f7ff fe8a 	bl	80110dc <_Balloc>
 80113c8:	b930      	cbnz	r0, 80113d8 <__multiply+0x44>
 80113ca:	4602      	mov	r2, r0
 80113cc:	4b42      	ldr	r3, [pc, #264]	; (80114d8 <__multiply+0x144>)
 80113ce:	4843      	ldr	r0, [pc, #268]	; (80114dc <__multiply+0x148>)
 80113d0:	f240 115d 	movw	r1, #349	; 0x15d
 80113d4:	f000 ffe6 	bl	80123a4 <__assert_func>
 80113d8:	f100 0614 	add.w	r6, r0, #20
 80113dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80113e0:	4633      	mov	r3, r6
 80113e2:	2200      	movs	r2, #0
 80113e4:	4543      	cmp	r3, r8
 80113e6:	d31e      	bcc.n	8011426 <__multiply+0x92>
 80113e8:	f105 0c14 	add.w	ip, r5, #20
 80113ec:	f104 0314 	add.w	r3, r4, #20
 80113f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80113f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80113f8:	9202      	str	r2, [sp, #8]
 80113fa:	ebac 0205 	sub.w	r2, ip, r5
 80113fe:	3a15      	subs	r2, #21
 8011400:	f022 0203 	bic.w	r2, r2, #3
 8011404:	3204      	adds	r2, #4
 8011406:	f105 0115 	add.w	r1, r5, #21
 801140a:	458c      	cmp	ip, r1
 801140c:	bf38      	it	cc
 801140e:	2204      	movcc	r2, #4
 8011410:	9201      	str	r2, [sp, #4]
 8011412:	9a02      	ldr	r2, [sp, #8]
 8011414:	9303      	str	r3, [sp, #12]
 8011416:	429a      	cmp	r2, r3
 8011418:	d808      	bhi.n	801142c <__multiply+0x98>
 801141a:	2f00      	cmp	r7, #0
 801141c:	dc55      	bgt.n	80114ca <__multiply+0x136>
 801141e:	6107      	str	r7, [r0, #16]
 8011420:	b005      	add	sp, #20
 8011422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011426:	f843 2b04 	str.w	r2, [r3], #4
 801142a:	e7db      	b.n	80113e4 <__multiply+0x50>
 801142c:	f8b3 a000 	ldrh.w	sl, [r3]
 8011430:	f1ba 0f00 	cmp.w	sl, #0
 8011434:	d020      	beq.n	8011478 <__multiply+0xe4>
 8011436:	f105 0e14 	add.w	lr, r5, #20
 801143a:	46b1      	mov	r9, r6
 801143c:	2200      	movs	r2, #0
 801143e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011442:	f8d9 b000 	ldr.w	fp, [r9]
 8011446:	b2a1      	uxth	r1, r4
 8011448:	fa1f fb8b 	uxth.w	fp, fp
 801144c:	fb0a b101 	mla	r1, sl, r1, fp
 8011450:	4411      	add	r1, r2
 8011452:	f8d9 2000 	ldr.w	r2, [r9]
 8011456:	0c24      	lsrs	r4, r4, #16
 8011458:	0c12      	lsrs	r2, r2, #16
 801145a:	fb0a 2404 	mla	r4, sl, r4, r2
 801145e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011462:	b289      	uxth	r1, r1
 8011464:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011468:	45f4      	cmp	ip, lr
 801146a:	f849 1b04 	str.w	r1, [r9], #4
 801146e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011472:	d8e4      	bhi.n	801143e <__multiply+0xaa>
 8011474:	9901      	ldr	r1, [sp, #4]
 8011476:	5072      	str	r2, [r6, r1]
 8011478:	9a03      	ldr	r2, [sp, #12]
 801147a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801147e:	3304      	adds	r3, #4
 8011480:	f1b9 0f00 	cmp.w	r9, #0
 8011484:	d01f      	beq.n	80114c6 <__multiply+0x132>
 8011486:	6834      	ldr	r4, [r6, #0]
 8011488:	f105 0114 	add.w	r1, r5, #20
 801148c:	46b6      	mov	lr, r6
 801148e:	f04f 0a00 	mov.w	sl, #0
 8011492:	880a      	ldrh	r2, [r1, #0]
 8011494:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011498:	fb09 b202 	mla	r2, r9, r2, fp
 801149c:	4492      	add	sl, r2
 801149e:	b2a4      	uxth	r4, r4
 80114a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80114a4:	f84e 4b04 	str.w	r4, [lr], #4
 80114a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80114ac:	f8be 2000 	ldrh.w	r2, [lr]
 80114b0:	0c24      	lsrs	r4, r4, #16
 80114b2:	fb09 2404 	mla	r4, r9, r4, r2
 80114b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80114ba:	458c      	cmp	ip, r1
 80114bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80114c0:	d8e7      	bhi.n	8011492 <__multiply+0xfe>
 80114c2:	9a01      	ldr	r2, [sp, #4]
 80114c4:	50b4      	str	r4, [r6, r2]
 80114c6:	3604      	adds	r6, #4
 80114c8:	e7a3      	b.n	8011412 <__multiply+0x7e>
 80114ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d1a5      	bne.n	801141e <__multiply+0x8a>
 80114d2:	3f01      	subs	r7, #1
 80114d4:	e7a1      	b.n	801141a <__multiply+0x86>
 80114d6:	bf00      	nop
 80114d8:	080140b8 	.word	0x080140b8
 80114dc:	0801415f 	.word	0x0801415f

080114e0 <__pow5mult>:
 80114e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e4:	4615      	mov	r5, r2
 80114e6:	f012 0203 	ands.w	r2, r2, #3
 80114ea:	4606      	mov	r6, r0
 80114ec:	460f      	mov	r7, r1
 80114ee:	d007      	beq.n	8011500 <__pow5mult+0x20>
 80114f0:	4c25      	ldr	r4, [pc, #148]	; (8011588 <__pow5mult+0xa8>)
 80114f2:	3a01      	subs	r2, #1
 80114f4:	2300      	movs	r3, #0
 80114f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114fa:	f7ff fe51 	bl	80111a0 <__multadd>
 80114fe:	4607      	mov	r7, r0
 8011500:	10ad      	asrs	r5, r5, #2
 8011502:	d03d      	beq.n	8011580 <__pow5mult+0xa0>
 8011504:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011506:	b97c      	cbnz	r4, 8011528 <__pow5mult+0x48>
 8011508:	2010      	movs	r0, #16
 801150a:	f7fd ffa3 	bl	800f454 <malloc>
 801150e:	4602      	mov	r2, r0
 8011510:	6270      	str	r0, [r6, #36]	; 0x24
 8011512:	b928      	cbnz	r0, 8011520 <__pow5mult+0x40>
 8011514:	4b1d      	ldr	r3, [pc, #116]	; (801158c <__pow5mult+0xac>)
 8011516:	481e      	ldr	r0, [pc, #120]	; (8011590 <__pow5mult+0xb0>)
 8011518:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801151c:	f000 ff42 	bl	80123a4 <__assert_func>
 8011520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011524:	6004      	str	r4, [r0, #0]
 8011526:	60c4      	str	r4, [r0, #12]
 8011528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801152c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011530:	b94c      	cbnz	r4, 8011546 <__pow5mult+0x66>
 8011532:	f240 2171 	movw	r1, #625	; 0x271
 8011536:	4630      	mov	r0, r6
 8011538:	f7ff ff16 	bl	8011368 <__i2b>
 801153c:	2300      	movs	r3, #0
 801153e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011542:	4604      	mov	r4, r0
 8011544:	6003      	str	r3, [r0, #0]
 8011546:	f04f 0900 	mov.w	r9, #0
 801154a:	07eb      	lsls	r3, r5, #31
 801154c:	d50a      	bpl.n	8011564 <__pow5mult+0x84>
 801154e:	4639      	mov	r1, r7
 8011550:	4622      	mov	r2, r4
 8011552:	4630      	mov	r0, r6
 8011554:	f7ff ff1e 	bl	8011394 <__multiply>
 8011558:	4639      	mov	r1, r7
 801155a:	4680      	mov	r8, r0
 801155c:	4630      	mov	r0, r6
 801155e:	f7ff fdfd 	bl	801115c <_Bfree>
 8011562:	4647      	mov	r7, r8
 8011564:	106d      	asrs	r5, r5, #1
 8011566:	d00b      	beq.n	8011580 <__pow5mult+0xa0>
 8011568:	6820      	ldr	r0, [r4, #0]
 801156a:	b938      	cbnz	r0, 801157c <__pow5mult+0x9c>
 801156c:	4622      	mov	r2, r4
 801156e:	4621      	mov	r1, r4
 8011570:	4630      	mov	r0, r6
 8011572:	f7ff ff0f 	bl	8011394 <__multiply>
 8011576:	6020      	str	r0, [r4, #0]
 8011578:	f8c0 9000 	str.w	r9, [r0]
 801157c:	4604      	mov	r4, r0
 801157e:	e7e4      	b.n	801154a <__pow5mult+0x6a>
 8011580:	4638      	mov	r0, r7
 8011582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011586:	bf00      	nop
 8011588:	080142b0 	.word	0x080142b0
 801158c:	08014148 	.word	0x08014148
 8011590:	0801415f 	.word	0x0801415f

08011594 <__lshift>:
 8011594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011598:	460c      	mov	r4, r1
 801159a:	6849      	ldr	r1, [r1, #4]
 801159c:	6923      	ldr	r3, [r4, #16]
 801159e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80115a2:	68a3      	ldr	r3, [r4, #8]
 80115a4:	4607      	mov	r7, r0
 80115a6:	4691      	mov	r9, r2
 80115a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80115ac:	f108 0601 	add.w	r6, r8, #1
 80115b0:	42b3      	cmp	r3, r6
 80115b2:	db0b      	blt.n	80115cc <__lshift+0x38>
 80115b4:	4638      	mov	r0, r7
 80115b6:	f7ff fd91 	bl	80110dc <_Balloc>
 80115ba:	4605      	mov	r5, r0
 80115bc:	b948      	cbnz	r0, 80115d2 <__lshift+0x3e>
 80115be:	4602      	mov	r2, r0
 80115c0:	4b28      	ldr	r3, [pc, #160]	; (8011664 <__lshift+0xd0>)
 80115c2:	4829      	ldr	r0, [pc, #164]	; (8011668 <__lshift+0xd4>)
 80115c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80115c8:	f000 feec 	bl	80123a4 <__assert_func>
 80115cc:	3101      	adds	r1, #1
 80115ce:	005b      	lsls	r3, r3, #1
 80115d0:	e7ee      	b.n	80115b0 <__lshift+0x1c>
 80115d2:	2300      	movs	r3, #0
 80115d4:	f100 0114 	add.w	r1, r0, #20
 80115d8:	f100 0210 	add.w	r2, r0, #16
 80115dc:	4618      	mov	r0, r3
 80115de:	4553      	cmp	r3, sl
 80115e0:	db33      	blt.n	801164a <__lshift+0xb6>
 80115e2:	6920      	ldr	r0, [r4, #16]
 80115e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115e8:	f104 0314 	add.w	r3, r4, #20
 80115ec:	f019 091f 	ands.w	r9, r9, #31
 80115f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80115f8:	d02b      	beq.n	8011652 <__lshift+0xbe>
 80115fa:	f1c9 0e20 	rsb	lr, r9, #32
 80115fe:	468a      	mov	sl, r1
 8011600:	2200      	movs	r2, #0
 8011602:	6818      	ldr	r0, [r3, #0]
 8011604:	fa00 f009 	lsl.w	r0, r0, r9
 8011608:	4302      	orrs	r2, r0
 801160a:	f84a 2b04 	str.w	r2, [sl], #4
 801160e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011612:	459c      	cmp	ip, r3
 8011614:	fa22 f20e 	lsr.w	r2, r2, lr
 8011618:	d8f3      	bhi.n	8011602 <__lshift+0x6e>
 801161a:	ebac 0304 	sub.w	r3, ip, r4
 801161e:	3b15      	subs	r3, #21
 8011620:	f023 0303 	bic.w	r3, r3, #3
 8011624:	3304      	adds	r3, #4
 8011626:	f104 0015 	add.w	r0, r4, #21
 801162a:	4584      	cmp	ip, r0
 801162c:	bf38      	it	cc
 801162e:	2304      	movcc	r3, #4
 8011630:	50ca      	str	r2, [r1, r3]
 8011632:	b10a      	cbz	r2, 8011638 <__lshift+0xa4>
 8011634:	f108 0602 	add.w	r6, r8, #2
 8011638:	3e01      	subs	r6, #1
 801163a:	4638      	mov	r0, r7
 801163c:	612e      	str	r6, [r5, #16]
 801163e:	4621      	mov	r1, r4
 8011640:	f7ff fd8c 	bl	801115c <_Bfree>
 8011644:	4628      	mov	r0, r5
 8011646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801164a:	f842 0f04 	str.w	r0, [r2, #4]!
 801164e:	3301      	adds	r3, #1
 8011650:	e7c5      	b.n	80115de <__lshift+0x4a>
 8011652:	3904      	subs	r1, #4
 8011654:	f853 2b04 	ldr.w	r2, [r3], #4
 8011658:	f841 2f04 	str.w	r2, [r1, #4]!
 801165c:	459c      	cmp	ip, r3
 801165e:	d8f9      	bhi.n	8011654 <__lshift+0xc0>
 8011660:	e7ea      	b.n	8011638 <__lshift+0xa4>
 8011662:	bf00      	nop
 8011664:	080140b8 	.word	0x080140b8
 8011668:	0801415f 	.word	0x0801415f

0801166c <__mcmp>:
 801166c:	b530      	push	{r4, r5, lr}
 801166e:	6902      	ldr	r2, [r0, #16]
 8011670:	690c      	ldr	r4, [r1, #16]
 8011672:	1b12      	subs	r2, r2, r4
 8011674:	d10e      	bne.n	8011694 <__mcmp+0x28>
 8011676:	f100 0314 	add.w	r3, r0, #20
 801167a:	3114      	adds	r1, #20
 801167c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011680:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011684:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011688:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801168c:	42a5      	cmp	r5, r4
 801168e:	d003      	beq.n	8011698 <__mcmp+0x2c>
 8011690:	d305      	bcc.n	801169e <__mcmp+0x32>
 8011692:	2201      	movs	r2, #1
 8011694:	4610      	mov	r0, r2
 8011696:	bd30      	pop	{r4, r5, pc}
 8011698:	4283      	cmp	r3, r0
 801169a:	d3f3      	bcc.n	8011684 <__mcmp+0x18>
 801169c:	e7fa      	b.n	8011694 <__mcmp+0x28>
 801169e:	f04f 32ff 	mov.w	r2, #4294967295
 80116a2:	e7f7      	b.n	8011694 <__mcmp+0x28>

080116a4 <__mdiff>:
 80116a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a8:	460c      	mov	r4, r1
 80116aa:	4606      	mov	r6, r0
 80116ac:	4611      	mov	r1, r2
 80116ae:	4620      	mov	r0, r4
 80116b0:	4617      	mov	r7, r2
 80116b2:	f7ff ffdb 	bl	801166c <__mcmp>
 80116b6:	1e05      	subs	r5, r0, #0
 80116b8:	d110      	bne.n	80116dc <__mdiff+0x38>
 80116ba:	4629      	mov	r1, r5
 80116bc:	4630      	mov	r0, r6
 80116be:	f7ff fd0d 	bl	80110dc <_Balloc>
 80116c2:	b930      	cbnz	r0, 80116d2 <__mdiff+0x2e>
 80116c4:	4b39      	ldr	r3, [pc, #228]	; (80117ac <__mdiff+0x108>)
 80116c6:	4602      	mov	r2, r0
 80116c8:	f240 2132 	movw	r1, #562	; 0x232
 80116cc:	4838      	ldr	r0, [pc, #224]	; (80117b0 <__mdiff+0x10c>)
 80116ce:	f000 fe69 	bl	80123a4 <__assert_func>
 80116d2:	2301      	movs	r3, #1
 80116d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116dc:	bfa4      	itt	ge
 80116de:	463b      	movge	r3, r7
 80116e0:	4627      	movge	r7, r4
 80116e2:	4630      	mov	r0, r6
 80116e4:	6879      	ldr	r1, [r7, #4]
 80116e6:	bfa6      	itte	ge
 80116e8:	461c      	movge	r4, r3
 80116ea:	2500      	movge	r5, #0
 80116ec:	2501      	movlt	r5, #1
 80116ee:	f7ff fcf5 	bl	80110dc <_Balloc>
 80116f2:	b920      	cbnz	r0, 80116fe <__mdiff+0x5a>
 80116f4:	4b2d      	ldr	r3, [pc, #180]	; (80117ac <__mdiff+0x108>)
 80116f6:	4602      	mov	r2, r0
 80116f8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80116fc:	e7e6      	b.n	80116cc <__mdiff+0x28>
 80116fe:	693e      	ldr	r6, [r7, #16]
 8011700:	60c5      	str	r5, [r0, #12]
 8011702:	6925      	ldr	r5, [r4, #16]
 8011704:	f107 0114 	add.w	r1, r7, #20
 8011708:	f104 0914 	add.w	r9, r4, #20
 801170c:	f100 0e14 	add.w	lr, r0, #20
 8011710:	f107 0210 	add.w	r2, r7, #16
 8011714:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011718:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801171c:	46f2      	mov	sl, lr
 801171e:	2700      	movs	r7, #0
 8011720:	f859 3b04 	ldr.w	r3, [r9], #4
 8011724:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011728:	fa1f f883 	uxth.w	r8, r3
 801172c:	fa17 f78b 	uxtah	r7, r7, fp
 8011730:	0c1b      	lsrs	r3, r3, #16
 8011732:	eba7 0808 	sub.w	r8, r7, r8
 8011736:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801173a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801173e:	fa1f f888 	uxth.w	r8, r8
 8011742:	141f      	asrs	r7, r3, #16
 8011744:	454d      	cmp	r5, r9
 8011746:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801174a:	f84a 3b04 	str.w	r3, [sl], #4
 801174e:	d8e7      	bhi.n	8011720 <__mdiff+0x7c>
 8011750:	1b2b      	subs	r3, r5, r4
 8011752:	3b15      	subs	r3, #21
 8011754:	f023 0303 	bic.w	r3, r3, #3
 8011758:	3304      	adds	r3, #4
 801175a:	3415      	adds	r4, #21
 801175c:	42a5      	cmp	r5, r4
 801175e:	bf38      	it	cc
 8011760:	2304      	movcc	r3, #4
 8011762:	4419      	add	r1, r3
 8011764:	4473      	add	r3, lr
 8011766:	469e      	mov	lr, r3
 8011768:	460d      	mov	r5, r1
 801176a:	4565      	cmp	r5, ip
 801176c:	d30e      	bcc.n	801178c <__mdiff+0xe8>
 801176e:	f10c 0203 	add.w	r2, ip, #3
 8011772:	1a52      	subs	r2, r2, r1
 8011774:	f022 0203 	bic.w	r2, r2, #3
 8011778:	3903      	subs	r1, #3
 801177a:	458c      	cmp	ip, r1
 801177c:	bf38      	it	cc
 801177e:	2200      	movcc	r2, #0
 8011780:	441a      	add	r2, r3
 8011782:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011786:	b17b      	cbz	r3, 80117a8 <__mdiff+0x104>
 8011788:	6106      	str	r6, [r0, #16]
 801178a:	e7a5      	b.n	80116d8 <__mdiff+0x34>
 801178c:	f855 8b04 	ldr.w	r8, [r5], #4
 8011790:	fa17 f488 	uxtah	r4, r7, r8
 8011794:	1422      	asrs	r2, r4, #16
 8011796:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801179a:	b2a4      	uxth	r4, r4
 801179c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80117a0:	f84e 4b04 	str.w	r4, [lr], #4
 80117a4:	1417      	asrs	r7, r2, #16
 80117a6:	e7e0      	b.n	801176a <__mdiff+0xc6>
 80117a8:	3e01      	subs	r6, #1
 80117aa:	e7ea      	b.n	8011782 <__mdiff+0xde>
 80117ac:	080140b8 	.word	0x080140b8
 80117b0:	0801415f 	.word	0x0801415f

080117b4 <__ulp>:
 80117b4:	b082      	sub	sp, #8
 80117b6:	ed8d 0b00 	vstr	d0, [sp]
 80117ba:	9b01      	ldr	r3, [sp, #4]
 80117bc:	4912      	ldr	r1, [pc, #72]	; (8011808 <__ulp+0x54>)
 80117be:	4019      	ands	r1, r3
 80117c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80117c4:	2900      	cmp	r1, #0
 80117c6:	dd05      	ble.n	80117d4 <__ulp+0x20>
 80117c8:	2200      	movs	r2, #0
 80117ca:	460b      	mov	r3, r1
 80117cc:	ec43 2b10 	vmov	d0, r2, r3
 80117d0:	b002      	add	sp, #8
 80117d2:	4770      	bx	lr
 80117d4:	4249      	negs	r1, r1
 80117d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80117da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80117de:	f04f 0200 	mov.w	r2, #0
 80117e2:	f04f 0300 	mov.w	r3, #0
 80117e6:	da04      	bge.n	80117f2 <__ulp+0x3e>
 80117e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80117ec:	fa41 f300 	asr.w	r3, r1, r0
 80117f0:	e7ec      	b.n	80117cc <__ulp+0x18>
 80117f2:	f1a0 0114 	sub.w	r1, r0, #20
 80117f6:	291e      	cmp	r1, #30
 80117f8:	bfda      	itte	le
 80117fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80117fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8011802:	2101      	movgt	r1, #1
 8011804:	460a      	mov	r2, r1
 8011806:	e7e1      	b.n	80117cc <__ulp+0x18>
 8011808:	7ff00000 	.word	0x7ff00000

0801180c <__b2d>:
 801180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801180e:	6905      	ldr	r5, [r0, #16]
 8011810:	f100 0714 	add.w	r7, r0, #20
 8011814:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011818:	1f2e      	subs	r6, r5, #4
 801181a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801181e:	4620      	mov	r0, r4
 8011820:	f7ff fd52 	bl	80112c8 <__hi0bits>
 8011824:	f1c0 0320 	rsb	r3, r0, #32
 8011828:	280a      	cmp	r0, #10
 801182a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80118a8 <__b2d+0x9c>
 801182e:	600b      	str	r3, [r1, #0]
 8011830:	dc14      	bgt.n	801185c <__b2d+0x50>
 8011832:	f1c0 0e0b 	rsb	lr, r0, #11
 8011836:	fa24 f10e 	lsr.w	r1, r4, lr
 801183a:	42b7      	cmp	r7, r6
 801183c:	ea41 030c 	orr.w	r3, r1, ip
 8011840:	bf34      	ite	cc
 8011842:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011846:	2100      	movcs	r1, #0
 8011848:	3015      	adds	r0, #21
 801184a:	fa04 f000 	lsl.w	r0, r4, r0
 801184e:	fa21 f10e 	lsr.w	r1, r1, lr
 8011852:	ea40 0201 	orr.w	r2, r0, r1
 8011856:	ec43 2b10 	vmov	d0, r2, r3
 801185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801185c:	42b7      	cmp	r7, r6
 801185e:	bf3a      	itte	cc
 8011860:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011864:	f1a5 0608 	subcc.w	r6, r5, #8
 8011868:	2100      	movcs	r1, #0
 801186a:	380b      	subs	r0, #11
 801186c:	d017      	beq.n	801189e <__b2d+0x92>
 801186e:	f1c0 0c20 	rsb	ip, r0, #32
 8011872:	fa04 f500 	lsl.w	r5, r4, r0
 8011876:	42be      	cmp	r6, r7
 8011878:	fa21 f40c 	lsr.w	r4, r1, ip
 801187c:	ea45 0504 	orr.w	r5, r5, r4
 8011880:	bf8c      	ite	hi
 8011882:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011886:	2400      	movls	r4, #0
 8011888:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801188c:	fa01 f000 	lsl.w	r0, r1, r0
 8011890:	fa24 f40c 	lsr.w	r4, r4, ip
 8011894:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011898:	ea40 0204 	orr.w	r2, r0, r4
 801189c:	e7db      	b.n	8011856 <__b2d+0x4a>
 801189e:	ea44 030c 	orr.w	r3, r4, ip
 80118a2:	460a      	mov	r2, r1
 80118a4:	e7d7      	b.n	8011856 <__b2d+0x4a>
 80118a6:	bf00      	nop
 80118a8:	3ff00000 	.word	0x3ff00000

080118ac <__d2b>:
 80118ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118b0:	4689      	mov	r9, r1
 80118b2:	2101      	movs	r1, #1
 80118b4:	ec57 6b10 	vmov	r6, r7, d0
 80118b8:	4690      	mov	r8, r2
 80118ba:	f7ff fc0f 	bl	80110dc <_Balloc>
 80118be:	4604      	mov	r4, r0
 80118c0:	b930      	cbnz	r0, 80118d0 <__d2b+0x24>
 80118c2:	4602      	mov	r2, r0
 80118c4:	4b25      	ldr	r3, [pc, #148]	; (801195c <__d2b+0xb0>)
 80118c6:	4826      	ldr	r0, [pc, #152]	; (8011960 <__d2b+0xb4>)
 80118c8:	f240 310a 	movw	r1, #778	; 0x30a
 80118cc:	f000 fd6a 	bl	80123a4 <__assert_func>
 80118d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80118d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80118d8:	bb35      	cbnz	r5, 8011928 <__d2b+0x7c>
 80118da:	2e00      	cmp	r6, #0
 80118dc:	9301      	str	r3, [sp, #4]
 80118de:	d028      	beq.n	8011932 <__d2b+0x86>
 80118e0:	4668      	mov	r0, sp
 80118e2:	9600      	str	r6, [sp, #0]
 80118e4:	f7ff fd10 	bl	8011308 <__lo0bits>
 80118e8:	9900      	ldr	r1, [sp, #0]
 80118ea:	b300      	cbz	r0, 801192e <__d2b+0x82>
 80118ec:	9a01      	ldr	r2, [sp, #4]
 80118ee:	f1c0 0320 	rsb	r3, r0, #32
 80118f2:	fa02 f303 	lsl.w	r3, r2, r3
 80118f6:	430b      	orrs	r3, r1
 80118f8:	40c2      	lsrs	r2, r0
 80118fa:	6163      	str	r3, [r4, #20]
 80118fc:	9201      	str	r2, [sp, #4]
 80118fe:	9b01      	ldr	r3, [sp, #4]
 8011900:	61a3      	str	r3, [r4, #24]
 8011902:	2b00      	cmp	r3, #0
 8011904:	bf14      	ite	ne
 8011906:	2202      	movne	r2, #2
 8011908:	2201      	moveq	r2, #1
 801190a:	6122      	str	r2, [r4, #16]
 801190c:	b1d5      	cbz	r5, 8011944 <__d2b+0x98>
 801190e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011912:	4405      	add	r5, r0
 8011914:	f8c9 5000 	str.w	r5, [r9]
 8011918:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801191c:	f8c8 0000 	str.w	r0, [r8]
 8011920:	4620      	mov	r0, r4
 8011922:	b003      	add	sp, #12
 8011924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011928:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801192c:	e7d5      	b.n	80118da <__d2b+0x2e>
 801192e:	6161      	str	r1, [r4, #20]
 8011930:	e7e5      	b.n	80118fe <__d2b+0x52>
 8011932:	a801      	add	r0, sp, #4
 8011934:	f7ff fce8 	bl	8011308 <__lo0bits>
 8011938:	9b01      	ldr	r3, [sp, #4]
 801193a:	6163      	str	r3, [r4, #20]
 801193c:	2201      	movs	r2, #1
 801193e:	6122      	str	r2, [r4, #16]
 8011940:	3020      	adds	r0, #32
 8011942:	e7e3      	b.n	801190c <__d2b+0x60>
 8011944:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011948:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801194c:	f8c9 0000 	str.w	r0, [r9]
 8011950:	6918      	ldr	r0, [r3, #16]
 8011952:	f7ff fcb9 	bl	80112c8 <__hi0bits>
 8011956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801195a:	e7df      	b.n	801191c <__d2b+0x70>
 801195c:	080140b8 	.word	0x080140b8
 8011960:	0801415f 	.word	0x0801415f

08011964 <__ratio>:
 8011964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011968:	4688      	mov	r8, r1
 801196a:	4669      	mov	r1, sp
 801196c:	4681      	mov	r9, r0
 801196e:	f7ff ff4d 	bl	801180c <__b2d>
 8011972:	a901      	add	r1, sp, #4
 8011974:	4640      	mov	r0, r8
 8011976:	ec55 4b10 	vmov	r4, r5, d0
 801197a:	f7ff ff47 	bl	801180c <__b2d>
 801197e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011982:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011986:	eba3 0c02 	sub.w	ip, r3, r2
 801198a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801198e:	1a9b      	subs	r3, r3, r2
 8011990:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011994:	ec51 0b10 	vmov	r0, r1, d0
 8011998:	2b00      	cmp	r3, #0
 801199a:	bfd6      	itet	le
 801199c:	460a      	movle	r2, r1
 801199e:	462a      	movgt	r2, r5
 80119a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80119a4:	468b      	mov	fp, r1
 80119a6:	462f      	mov	r7, r5
 80119a8:	bfd4      	ite	le
 80119aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80119ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80119b2:	4620      	mov	r0, r4
 80119b4:	ee10 2a10 	vmov	r2, s0
 80119b8:	465b      	mov	r3, fp
 80119ba:	4639      	mov	r1, r7
 80119bc:	f7ee ff5e 	bl	800087c <__aeabi_ddiv>
 80119c0:	ec41 0b10 	vmov	d0, r0, r1
 80119c4:	b003      	add	sp, #12
 80119c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080119ca <__copybits>:
 80119ca:	3901      	subs	r1, #1
 80119cc:	b570      	push	{r4, r5, r6, lr}
 80119ce:	1149      	asrs	r1, r1, #5
 80119d0:	6914      	ldr	r4, [r2, #16]
 80119d2:	3101      	adds	r1, #1
 80119d4:	f102 0314 	add.w	r3, r2, #20
 80119d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80119dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80119e0:	1f05      	subs	r5, r0, #4
 80119e2:	42a3      	cmp	r3, r4
 80119e4:	d30c      	bcc.n	8011a00 <__copybits+0x36>
 80119e6:	1aa3      	subs	r3, r4, r2
 80119e8:	3b11      	subs	r3, #17
 80119ea:	f023 0303 	bic.w	r3, r3, #3
 80119ee:	3211      	adds	r2, #17
 80119f0:	42a2      	cmp	r2, r4
 80119f2:	bf88      	it	hi
 80119f4:	2300      	movhi	r3, #0
 80119f6:	4418      	add	r0, r3
 80119f8:	2300      	movs	r3, #0
 80119fa:	4288      	cmp	r0, r1
 80119fc:	d305      	bcc.n	8011a0a <__copybits+0x40>
 80119fe:	bd70      	pop	{r4, r5, r6, pc}
 8011a00:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a04:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a08:	e7eb      	b.n	80119e2 <__copybits+0x18>
 8011a0a:	f840 3b04 	str.w	r3, [r0], #4
 8011a0e:	e7f4      	b.n	80119fa <__copybits+0x30>

08011a10 <__any_on>:
 8011a10:	f100 0214 	add.w	r2, r0, #20
 8011a14:	6900      	ldr	r0, [r0, #16]
 8011a16:	114b      	asrs	r3, r1, #5
 8011a18:	4298      	cmp	r0, r3
 8011a1a:	b510      	push	{r4, lr}
 8011a1c:	db11      	blt.n	8011a42 <__any_on+0x32>
 8011a1e:	dd0a      	ble.n	8011a36 <__any_on+0x26>
 8011a20:	f011 011f 	ands.w	r1, r1, #31
 8011a24:	d007      	beq.n	8011a36 <__any_on+0x26>
 8011a26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a2a:	fa24 f001 	lsr.w	r0, r4, r1
 8011a2e:	fa00 f101 	lsl.w	r1, r0, r1
 8011a32:	428c      	cmp	r4, r1
 8011a34:	d10b      	bne.n	8011a4e <__any_on+0x3e>
 8011a36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	d803      	bhi.n	8011a46 <__any_on+0x36>
 8011a3e:	2000      	movs	r0, #0
 8011a40:	bd10      	pop	{r4, pc}
 8011a42:	4603      	mov	r3, r0
 8011a44:	e7f7      	b.n	8011a36 <__any_on+0x26>
 8011a46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a4a:	2900      	cmp	r1, #0
 8011a4c:	d0f5      	beq.n	8011a3a <__any_on+0x2a>
 8011a4e:	2001      	movs	r0, #1
 8011a50:	e7f6      	b.n	8011a40 <__any_on+0x30>

08011a52 <_calloc_r>:
 8011a52:	b513      	push	{r0, r1, r4, lr}
 8011a54:	434a      	muls	r2, r1
 8011a56:	4611      	mov	r1, r2
 8011a58:	9201      	str	r2, [sp, #4]
 8011a5a:	f7fd fd71 	bl	800f540 <_malloc_r>
 8011a5e:	4604      	mov	r4, r0
 8011a60:	b118      	cbz	r0, 8011a6a <_calloc_r+0x18>
 8011a62:	9a01      	ldr	r2, [sp, #4]
 8011a64:	2100      	movs	r1, #0
 8011a66:	f7fd fd13 	bl	800f490 <memset>
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	b002      	add	sp, #8
 8011a6e:	bd10      	pop	{r4, pc}

08011a70 <_realloc_r>:
 8011a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a72:	4607      	mov	r7, r0
 8011a74:	4614      	mov	r4, r2
 8011a76:	460e      	mov	r6, r1
 8011a78:	b921      	cbnz	r1, 8011a84 <_realloc_r+0x14>
 8011a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a7e:	4611      	mov	r1, r2
 8011a80:	f7fd bd5e 	b.w	800f540 <_malloc_r>
 8011a84:	b922      	cbnz	r2, 8011a90 <_realloc_r+0x20>
 8011a86:	f7fd fd0b 	bl	800f4a0 <_free_r>
 8011a8a:	4625      	mov	r5, r4
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a90:	f000 fcf4 	bl	801247c <_malloc_usable_size_r>
 8011a94:	42a0      	cmp	r0, r4
 8011a96:	d20f      	bcs.n	8011ab8 <_realloc_r+0x48>
 8011a98:	4621      	mov	r1, r4
 8011a9a:	4638      	mov	r0, r7
 8011a9c:	f7fd fd50 	bl	800f540 <_malloc_r>
 8011aa0:	4605      	mov	r5, r0
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	d0f2      	beq.n	8011a8c <_realloc_r+0x1c>
 8011aa6:	4631      	mov	r1, r6
 8011aa8:	4622      	mov	r2, r4
 8011aaa:	f7fd fce3 	bl	800f474 <memcpy>
 8011aae:	4631      	mov	r1, r6
 8011ab0:	4638      	mov	r0, r7
 8011ab2:	f7fd fcf5 	bl	800f4a0 <_free_r>
 8011ab6:	e7e9      	b.n	8011a8c <_realloc_r+0x1c>
 8011ab8:	4635      	mov	r5, r6
 8011aba:	e7e7      	b.n	8011a8c <_realloc_r+0x1c>

08011abc <__ssputs_r>:
 8011abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac0:	688e      	ldr	r6, [r1, #8]
 8011ac2:	429e      	cmp	r6, r3
 8011ac4:	4682      	mov	sl, r0
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	4690      	mov	r8, r2
 8011aca:	461f      	mov	r7, r3
 8011acc:	d838      	bhi.n	8011b40 <__ssputs_r+0x84>
 8011ace:	898a      	ldrh	r2, [r1, #12]
 8011ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ad4:	d032      	beq.n	8011b3c <__ssputs_r+0x80>
 8011ad6:	6825      	ldr	r5, [r4, #0]
 8011ad8:	6909      	ldr	r1, [r1, #16]
 8011ada:	eba5 0901 	sub.w	r9, r5, r1
 8011ade:	6965      	ldr	r5, [r4, #20]
 8011ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ae8:	3301      	adds	r3, #1
 8011aea:	444b      	add	r3, r9
 8011aec:	106d      	asrs	r5, r5, #1
 8011aee:	429d      	cmp	r5, r3
 8011af0:	bf38      	it	cc
 8011af2:	461d      	movcc	r5, r3
 8011af4:	0553      	lsls	r3, r2, #21
 8011af6:	d531      	bpl.n	8011b5c <__ssputs_r+0xa0>
 8011af8:	4629      	mov	r1, r5
 8011afa:	f7fd fd21 	bl	800f540 <_malloc_r>
 8011afe:	4606      	mov	r6, r0
 8011b00:	b950      	cbnz	r0, 8011b18 <__ssputs_r+0x5c>
 8011b02:	230c      	movs	r3, #12
 8011b04:	f8ca 3000 	str.w	r3, [sl]
 8011b08:	89a3      	ldrh	r3, [r4, #12]
 8011b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b0e:	81a3      	strh	r3, [r4, #12]
 8011b10:	f04f 30ff 	mov.w	r0, #4294967295
 8011b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b18:	6921      	ldr	r1, [r4, #16]
 8011b1a:	464a      	mov	r2, r9
 8011b1c:	f7fd fcaa 	bl	800f474 <memcpy>
 8011b20:	89a3      	ldrh	r3, [r4, #12]
 8011b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b2a:	81a3      	strh	r3, [r4, #12]
 8011b2c:	6126      	str	r6, [r4, #16]
 8011b2e:	6165      	str	r5, [r4, #20]
 8011b30:	444e      	add	r6, r9
 8011b32:	eba5 0509 	sub.w	r5, r5, r9
 8011b36:	6026      	str	r6, [r4, #0]
 8011b38:	60a5      	str	r5, [r4, #8]
 8011b3a:	463e      	mov	r6, r7
 8011b3c:	42be      	cmp	r6, r7
 8011b3e:	d900      	bls.n	8011b42 <__ssputs_r+0x86>
 8011b40:	463e      	mov	r6, r7
 8011b42:	4632      	mov	r2, r6
 8011b44:	6820      	ldr	r0, [r4, #0]
 8011b46:	4641      	mov	r1, r8
 8011b48:	f000 fc7e 	bl	8012448 <memmove>
 8011b4c:	68a3      	ldr	r3, [r4, #8]
 8011b4e:	6822      	ldr	r2, [r4, #0]
 8011b50:	1b9b      	subs	r3, r3, r6
 8011b52:	4432      	add	r2, r6
 8011b54:	60a3      	str	r3, [r4, #8]
 8011b56:	6022      	str	r2, [r4, #0]
 8011b58:	2000      	movs	r0, #0
 8011b5a:	e7db      	b.n	8011b14 <__ssputs_r+0x58>
 8011b5c:	462a      	mov	r2, r5
 8011b5e:	f7ff ff87 	bl	8011a70 <_realloc_r>
 8011b62:	4606      	mov	r6, r0
 8011b64:	2800      	cmp	r0, #0
 8011b66:	d1e1      	bne.n	8011b2c <__ssputs_r+0x70>
 8011b68:	6921      	ldr	r1, [r4, #16]
 8011b6a:	4650      	mov	r0, sl
 8011b6c:	f7fd fc98 	bl	800f4a0 <_free_r>
 8011b70:	e7c7      	b.n	8011b02 <__ssputs_r+0x46>
	...

08011b74 <_svfiprintf_r>:
 8011b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b78:	4698      	mov	r8, r3
 8011b7a:	898b      	ldrh	r3, [r1, #12]
 8011b7c:	061b      	lsls	r3, r3, #24
 8011b7e:	b09d      	sub	sp, #116	; 0x74
 8011b80:	4607      	mov	r7, r0
 8011b82:	460d      	mov	r5, r1
 8011b84:	4614      	mov	r4, r2
 8011b86:	d50e      	bpl.n	8011ba6 <_svfiprintf_r+0x32>
 8011b88:	690b      	ldr	r3, [r1, #16]
 8011b8a:	b963      	cbnz	r3, 8011ba6 <_svfiprintf_r+0x32>
 8011b8c:	2140      	movs	r1, #64	; 0x40
 8011b8e:	f7fd fcd7 	bl	800f540 <_malloc_r>
 8011b92:	6028      	str	r0, [r5, #0]
 8011b94:	6128      	str	r0, [r5, #16]
 8011b96:	b920      	cbnz	r0, 8011ba2 <_svfiprintf_r+0x2e>
 8011b98:	230c      	movs	r3, #12
 8011b9a:	603b      	str	r3, [r7, #0]
 8011b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba0:	e0d1      	b.n	8011d46 <_svfiprintf_r+0x1d2>
 8011ba2:	2340      	movs	r3, #64	; 0x40
 8011ba4:	616b      	str	r3, [r5, #20]
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8011baa:	2320      	movs	r3, #32
 8011bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bb4:	2330      	movs	r3, #48	; 0x30
 8011bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011d60 <_svfiprintf_r+0x1ec>
 8011bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bbe:	f04f 0901 	mov.w	r9, #1
 8011bc2:	4623      	mov	r3, r4
 8011bc4:	469a      	mov	sl, r3
 8011bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bca:	b10a      	cbz	r2, 8011bd0 <_svfiprintf_r+0x5c>
 8011bcc:	2a25      	cmp	r2, #37	; 0x25
 8011bce:	d1f9      	bne.n	8011bc4 <_svfiprintf_r+0x50>
 8011bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8011bd4:	d00b      	beq.n	8011bee <_svfiprintf_r+0x7a>
 8011bd6:	465b      	mov	r3, fp
 8011bd8:	4622      	mov	r2, r4
 8011bda:	4629      	mov	r1, r5
 8011bdc:	4638      	mov	r0, r7
 8011bde:	f7ff ff6d 	bl	8011abc <__ssputs_r>
 8011be2:	3001      	adds	r0, #1
 8011be4:	f000 80aa 	beq.w	8011d3c <_svfiprintf_r+0x1c8>
 8011be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011bea:	445a      	add	r2, fp
 8011bec:	9209      	str	r2, [sp, #36]	; 0x24
 8011bee:	f89a 3000 	ldrb.w	r3, [sl]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f000 80a2 	beq.w	8011d3c <_svfiprintf_r+0x1c8>
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8011bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c02:	f10a 0a01 	add.w	sl, sl, #1
 8011c06:	9304      	str	r3, [sp, #16]
 8011c08:	9307      	str	r3, [sp, #28]
 8011c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8011c10:	4654      	mov	r4, sl
 8011c12:	2205      	movs	r2, #5
 8011c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c18:	4851      	ldr	r0, [pc, #324]	; (8011d60 <_svfiprintf_r+0x1ec>)
 8011c1a:	f7ee faf9 	bl	8000210 <memchr>
 8011c1e:	9a04      	ldr	r2, [sp, #16]
 8011c20:	b9d8      	cbnz	r0, 8011c5a <_svfiprintf_r+0xe6>
 8011c22:	06d0      	lsls	r0, r2, #27
 8011c24:	bf44      	itt	mi
 8011c26:	2320      	movmi	r3, #32
 8011c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c2c:	0711      	lsls	r1, r2, #28
 8011c2e:	bf44      	itt	mi
 8011c30:	232b      	movmi	r3, #43	; 0x2b
 8011c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c36:	f89a 3000 	ldrb.w	r3, [sl]
 8011c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8011c3c:	d015      	beq.n	8011c6a <_svfiprintf_r+0xf6>
 8011c3e:	9a07      	ldr	r2, [sp, #28]
 8011c40:	4654      	mov	r4, sl
 8011c42:	2000      	movs	r0, #0
 8011c44:	f04f 0c0a 	mov.w	ip, #10
 8011c48:	4621      	mov	r1, r4
 8011c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c4e:	3b30      	subs	r3, #48	; 0x30
 8011c50:	2b09      	cmp	r3, #9
 8011c52:	d94e      	bls.n	8011cf2 <_svfiprintf_r+0x17e>
 8011c54:	b1b0      	cbz	r0, 8011c84 <_svfiprintf_r+0x110>
 8011c56:	9207      	str	r2, [sp, #28]
 8011c58:	e014      	b.n	8011c84 <_svfiprintf_r+0x110>
 8011c5a:	eba0 0308 	sub.w	r3, r0, r8
 8011c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8011c62:	4313      	orrs	r3, r2
 8011c64:	9304      	str	r3, [sp, #16]
 8011c66:	46a2      	mov	sl, r4
 8011c68:	e7d2      	b.n	8011c10 <_svfiprintf_r+0x9c>
 8011c6a:	9b03      	ldr	r3, [sp, #12]
 8011c6c:	1d19      	adds	r1, r3, #4
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	9103      	str	r1, [sp, #12]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	bfbb      	ittet	lt
 8011c76:	425b      	neglt	r3, r3
 8011c78:	f042 0202 	orrlt.w	r2, r2, #2
 8011c7c:	9307      	strge	r3, [sp, #28]
 8011c7e:	9307      	strlt	r3, [sp, #28]
 8011c80:	bfb8      	it	lt
 8011c82:	9204      	strlt	r2, [sp, #16]
 8011c84:	7823      	ldrb	r3, [r4, #0]
 8011c86:	2b2e      	cmp	r3, #46	; 0x2e
 8011c88:	d10c      	bne.n	8011ca4 <_svfiprintf_r+0x130>
 8011c8a:	7863      	ldrb	r3, [r4, #1]
 8011c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8011c8e:	d135      	bne.n	8011cfc <_svfiprintf_r+0x188>
 8011c90:	9b03      	ldr	r3, [sp, #12]
 8011c92:	1d1a      	adds	r2, r3, #4
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	9203      	str	r2, [sp, #12]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	bfb8      	it	lt
 8011c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011ca0:	3402      	adds	r4, #2
 8011ca2:	9305      	str	r3, [sp, #20]
 8011ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011d70 <_svfiprintf_r+0x1fc>
 8011ca8:	7821      	ldrb	r1, [r4, #0]
 8011caa:	2203      	movs	r2, #3
 8011cac:	4650      	mov	r0, sl
 8011cae:	f7ee faaf 	bl	8000210 <memchr>
 8011cb2:	b140      	cbz	r0, 8011cc6 <_svfiprintf_r+0x152>
 8011cb4:	2340      	movs	r3, #64	; 0x40
 8011cb6:	eba0 000a 	sub.w	r0, r0, sl
 8011cba:	fa03 f000 	lsl.w	r0, r3, r0
 8011cbe:	9b04      	ldr	r3, [sp, #16]
 8011cc0:	4303      	orrs	r3, r0
 8011cc2:	3401      	adds	r4, #1
 8011cc4:	9304      	str	r3, [sp, #16]
 8011cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cca:	4826      	ldr	r0, [pc, #152]	; (8011d64 <_svfiprintf_r+0x1f0>)
 8011ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cd0:	2206      	movs	r2, #6
 8011cd2:	f7ee fa9d 	bl	8000210 <memchr>
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	d038      	beq.n	8011d4c <_svfiprintf_r+0x1d8>
 8011cda:	4b23      	ldr	r3, [pc, #140]	; (8011d68 <_svfiprintf_r+0x1f4>)
 8011cdc:	bb1b      	cbnz	r3, 8011d26 <_svfiprintf_r+0x1b2>
 8011cde:	9b03      	ldr	r3, [sp, #12]
 8011ce0:	3307      	adds	r3, #7
 8011ce2:	f023 0307 	bic.w	r3, r3, #7
 8011ce6:	3308      	adds	r3, #8
 8011ce8:	9303      	str	r3, [sp, #12]
 8011cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cec:	4433      	add	r3, r6
 8011cee:	9309      	str	r3, [sp, #36]	; 0x24
 8011cf0:	e767      	b.n	8011bc2 <_svfiprintf_r+0x4e>
 8011cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	2001      	movs	r0, #1
 8011cfa:	e7a5      	b.n	8011c48 <_svfiprintf_r+0xd4>
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	3401      	adds	r4, #1
 8011d00:	9305      	str	r3, [sp, #20]
 8011d02:	4619      	mov	r1, r3
 8011d04:	f04f 0c0a 	mov.w	ip, #10
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d0e:	3a30      	subs	r2, #48	; 0x30
 8011d10:	2a09      	cmp	r2, #9
 8011d12:	d903      	bls.n	8011d1c <_svfiprintf_r+0x1a8>
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d0c5      	beq.n	8011ca4 <_svfiprintf_r+0x130>
 8011d18:	9105      	str	r1, [sp, #20]
 8011d1a:	e7c3      	b.n	8011ca4 <_svfiprintf_r+0x130>
 8011d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d20:	4604      	mov	r4, r0
 8011d22:	2301      	movs	r3, #1
 8011d24:	e7f0      	b.n	8011d08 <_svfiprintf_r+0x194>
 8011d26:	ab03      	add	r3, sp, #12
 8011d28:	9300      	str	r3, [sp, #0]
 8011d2a:	462a      	mov	r2, r5
 8011d2c:	4b0f      	ldr	r3, [pc, #60]	; (8011d6c <_svfiprintf_r+0x1f8>)
 8011d2e:	a904      	add	r1, sp, #16
 8011d30:	4638      	mov	r0, r7
 8011d32:	f3af 8000 	nop.w
 8011d36:	1c42      	adds	r2, r0, #1
 8011d38:	4606      	mov	r6, r0
 8011d3a:	d1d6      	bne.n	8011cea <_svfiprintf_r+0x176>
 8011d3c:	89ab      	ldrh	r3, [r5, #12]
 8011d3e:	065b      	lsls	r3, r3, #25
 8011d40:	f53f af2c 	bmi.w	8011b9c <_svfiprintf_r+0x28>
 8011d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d46:	b01d      	add	sp, #116	; 0x74
 8011d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d4c:	ab03      	add	r3, sp, #12
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	462a      	mov	r2, r5
 8011d52:	4b06      	ldr	r3, [pc, #24]	; (8011d6c <_svfiprintf_r+0x1f8>)
 8011d54:	a904      	add	r1, sp, #16
 8011d56:	4638      	mov	r0, r7
 8011d58:	f000 f9d4 	bl	8012104 <_printf_i>
 8011d5c:	e7eb      	b.n	8011d36 <_svfiprintf_r+0x1c2>
 8011d5e:	bf00      	nop
 8011d60:	080142bc 	.word	0x080142bc
 8011d64:	080142c6 	.word	0x080142c6
 8011d68:	00000000 	.word	0x00000000
 8011d6c:	08011abd 	.word	0x08011abd
 8011d70:	080142c2 	.word	0x080142c2

08011d74 <__sfputc_r>:
 8011d74:	6893      	ldr	r3, [r2, #8]
 8011d76:	3b01      	subs	r3, #1
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	b410      	push	{r4}
 8011d7c:	6093      	str	r3, [r2, #8]
 8011d7e:	da08      	bge.n	8011d92 <__sfputc_r+0x1e>
 8011d80:	6994      	ldr	r4, [r2, #24]
 8011d82:	42a3      	cmp	r3, r4
 8011d84:	db01      	blt.n	8011d8a <__sfputc_r+0x16>
 8011d86:	290a      	cmp	r1, #10
 8011d88:	d103      	bne.n	8011d92 <__sfputc_r+0x1e>
 8011d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d8e:	f7fe bb05 	b.w	801039c <__swbuf_r>
 8011d92:	6813      	ldr	r3, [r2, #0]
 8011d94:	1c58      	adds	r0, r3, #1
 8011d96:	6010      	str	r0, [r2, #0]
 8011d98:	7019      	strb	r1, [r3, #0]
 8011d9a:	4608      	mov	r0, r1
 8011d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011da0:	4770      	bx	lr

08011da2 <__sfputs_r>:
 8011da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011da4:	4606      	mov	r6, r0
 8011da6:	460f      	mov	r7, r1
 8011da8:	4614      	mov	r4, r2
 8011daa:	18d5      	adds	r5, r2, r3
 8011dac:	42ac      	cmp	r4, r5
 8011dae:	d101      	bne.n	8011db4 <__sfputs_r+0x12>
 8011db0:	2000      	movs	r0, #0
 8011db2:	e007      	b.n	8011dc4 <__sfputs_r+0x22>
 8011db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011db8:	463a      	mov	r2, r7
 8011dba:	4630      	mov	r0, r6
 8011dbc:	f7ff ffda 	bl	8011d74 <__sfputc_r>
 8011dc0:	1c43      	adds	r3, r0, #1
 8011dc2:	d1f3      	bne.n	8011dac <__sfputs_r+0xa>
 8011dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011dc8 <_vfiprintf_r>:
 8011dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dcc:	460d      	mov	r5, r1
 8011dce:	b09d      	sub	sp, #116	; 0x74
 8011dd0:	4614      	mov	r4, r2
 8011dd2:	4698      	mov	r8, r3
 8011dd4:	4606      	mov	r6, r0
 8011dd6:	b118      	cbz	r0, 8011de0 <_vfiprintf_r+0x18>
 8011dd8:	6983      	ldr	r3, [r0, #24]
 8011dda:	b90b      	cbnz	r3, 8011de0 <_vfiprintf_r+0x18>
 8011ddc:	f7fe fcda 	bl	8010794 <__sinit>
 8011de0:	4b89      	ldr	r3, [pc, #548]	; (8012008 <_vfiprintf_r+0x240>)
 8011de2:	429d      	cmp	r5, r3
 8011de4:	d11b      	bne.n	8011e1e <_vfiprintf_r+0x56>
 8011de6:	6875      	ldr	r5, [r6, #4]
 8011de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011dea:	07d9      	lsls	r1, r3, #31
 8011dec:	d405      	bmi.n	8011dfa <_vfiprintf_r+0x32>
 8011dee:	89ab      	ldrh	r3, [r5, #12]
 8011df0:	059a      	lsls	r2, r3, #22
 8011df2:	d402      	bmi.n	8011dfa <_vfiprintf_r+0x32>
 8011df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011df6:	f7ff f8da 	bl	8010fae <__retarget_lock_acquire_recursive>
 8011dfa:	89ab      	ldrh	r3, [r5, #12]
 8011dfc:	071b      	lsls	r3, r3, #28
 8011dfe:	d501      	bpl.n	8011e04 <_vfiprintf_r+0x3c>
 8011e00:	692b      	ldr	r3, [r5, #16]
 8011e02:	b9eb      	cbnz	r3, 8011e40 <_vfiprintf_r+0x78>
 8011e04:	4629      	mov	r1, r5
 8011e06:	4630      	mov	r0, r6
 8011e08:	f7fe fb2c 	bl	8010464 <__swsetup_r>
 8011e0c:	b1c0      	cbz	r0, 8011e40 <_vfiprintf_r+0x78>
 8011e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e10:	07dc      	lsls	r4, r3, #31
 8011e12:	d50e      	bpl.n	8011e32 <_vfiprintf_r+0x6a>
 8011e14:	f04f 30ff 	mov.w	r0, #4294967295
 8011e18:	b01d      	add	sp, #116	; 0x74
 8011e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e1e:	4b7b      	ldr	r3, [pc, #492]	; (801200c <_vfiprintf_r+0x244>)
 8011e20:	429d      	cmp	r5, r3
 8011e22:	d101      	bne.n	8011e28 <_vfiprintf_r+0x60>
 8011e24:	68b5      	ldr	r5, [r6, #8]
 8011e26:	e7df      	b.n	8011de8 <_vfiprintf_r+0x20>
 8011e28:	4b79      	ldr	r3, [pc, #484]	; (8012010 <_vfiprintf_r+0x248>)
 8011e2a:	429d      	cmp	r5, r3
 8011e2c:	bf08      	it	eq
 8011e2e:	68f5      	ldreq	r5, [r6, #12]
 8011e30:	e7da      	b.n	8011de8 <_vfiprintf_r+0x20>
 8011e32:	89ab      	ldrh	r3, [r5, #12]
 8011e34:	0598      	lsls	r0, r3, #22
 8011e36:	d4ed      	bmi.n	8011e14 <_vfiprintf_r+0x4c>
 8011e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e3a:	f7ff f8b9 	bl	8010fb0 <__retarget_lock_release_recursive>
 8011e3e:	e7e9      	b.n	8011e14 <_vfiprintf_r+0x4c>
 8011e40:	2300      	movs	r3, #0
 8011e42:	9309      	str	r3, [sp, #36]	; 0x24
 8011e44:	2320      	movs	r3, #32
 8011e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e4e:	2330      	movs	r3, #48	; 0x30
 8011e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012014 <_vfiprintf_r+0x24c>
 8011e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e58:	f04f 0901 	mov.w	r9, #1
 8011e5c:	4623      	mov	r3, r4
 8011e5e:	469a      	mov	sl, r3
 8011e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e64:	b10a      	cbz	r2, 8011e6a <_vfiprintf_r+0xa2>
 8011e66:	2a25      	cmp	r2, #37	; 0x25
 8011e68:	d1f9      	bne.n	8011e5e <_vfiprintf_r+0x96>
 8011e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8011e6e:	d00b      	beq.n	8011e88 <_vfiprintf_r+0xc0>
 8011e70:	465b      	mov	r3, fp
 8011e72:	4622      	mov	r2, r4
 8011e74:	4629      	mov	r1, r5
 8011e76:	4630      	mov	r0, r6
 8011e78:	f7ff ff93 	bl	8011da2 <__sfputs_r>
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	f000 80aa 	beq.w	8011fd6 <_vfiprintf_r+0x20e>
 8011e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e84:	445a      	add	r2, fp
 8011e86:	9209      	str	r2, [sp, #36]	; 0x24
 8011e88:	f89a 3000 	ldrb.w	r3, [sl]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	f000 80a2 	beq.w	8011fd6 <_vfiprintf_r+0x20e>
 8011e92:	2300      	movs	r3, #0
 8011e94:	f04f 32ff 	mov.w	r2, #4294967295
 8011e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e9c:	f10a 0a01 	add.w	sl, sl, #1
 8011ea0:	9304      	str	r3, [sp, #16]
 8011ea2:	9307      	str	r3, [sp, #28]
 8011ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8011eaa:	4654      	mov	r4, sl
 8011eac:	2205      	movs	r2, #5
 8011eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eb2:	4858      	ldr	r0, [pc, #352]	; (8012014 <_vfiprintf_r+0x24c>)
 8011eb4:	f7ee f9ac 	bl	8000210 <memchr>
 8011eb8:	9a04      	ldr	r2, [sp, #16]
 8011eba:	b9d8      	cbnz	r0, 8011ef4 <_vfiprintf_r+0x12c>
 8011ebc:	06d1      	lsls	r1, r2, #27
 8011ebe:	bf44      	itt	mi
 8011ec0:	2320      	movmi	r3, #32
 8011ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ec6:	0713      	lsls	r3, r2, #28
 8011ec8:	bf44      	itt	mi
 8011eca:	232b      	movmi	r3, #43	; 0x2b
 8011ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8011ed6:	d015      	beq.n	8011f04 <_vfiprintf_r+0x13c>
 8011ed8:	9a07      	ldr	r2, [sp, #28]
 8011eda:	4654      	mov	r4, sl
 8011edc:	2000      	movs	r0, #0
 8011ede:	f04f 0c0a 	mov.w	ip, #10
 8011ee2:	4621      	mov	r1, r4
 8011ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ee8:	3b30      	subs	r3, #48	; 0x30
 8011eea:	2b09      	cmp	r3, #9
 8011eec:	d94e      	bls.n	8011f8c <_vfiprintf_r+0x1c4>
 8011eee:	b1b0      	cbz	r0, 8011f1e <_vfiprintf_r+0x156>
 8011ef0:	9207      	str	r2, [sp, #28]
 8011ef2:	e014      	b.n	8011f1e <_vfiprintf_r+0x156>
 8011ef4:	eba0 0308 	sub.w	r3, r0, r8
 8011ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8011efc:	4313      	orrs	r3, r2
 8011efe:	9304      	str	r3, [sp, #16]
 8011f00:	46a2      	mov	sl, r4
 8011f02:	e7d2      	b.n	8011eaa <_vfiprintf_r+0xe2>
 8011f04:	9b03      	ldr	r3, [sp, #12]
 8011f06:	1d19      	adds	r1, r3, #4
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	9103      	str	r1, [sp, #12]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	bfbb      	ittet	lt
 8011f10:	425b      	neglt	r3, r3
 8011f12:	f042 0202 	orrlt.w	r2, r2, #2
 8011f16:	9307      	strge	r3, [sp, #28]
 8011f18:	9307      	strlt	r3, [sp, #28]
 8011f1a:	bfb8      	it	lt
 8011f1c:	9204      	strlt	r2, [sp, #16]
 8011f1e:	7823      	ldrb	r3, [r4, #0]
 8011f20:	2b2e      	cmp	r3, #46	; 0x2e
 8011f22:	d10c      	bne.n	8011f3e <_vfiprintf_r+0x176>
 8011f24:	7863      	ldrb	r3, [r4, #1]
 8011f26:	2b2a      	cmp	r3, #42	; 0x2a
 8011f28:	d135      	bne.n	8011f96 <_vfiprintf_r+0x1ce>
 8011f2a:	9b03      	ldr	r3, [sp, #12]
 8011f2c:	1d1a      	adds	r2, r3, #4
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	9203      	str	r2, [sp, #12]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	bfb8      	it	lt
 8011f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f3a:	3402      	adds	r4, #2
 8011f3c:	9305      	str	r3, [sp, #20]
 8011f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012024 <_vfiprintf_r+0x25c>
 8011f42:	7821      	ldrb	r1, [r4, #0]
 8011f44:	2203      	movs	r2, #3
 8011f46:	4650      	mov	r0, sl
 8011f48:	f7ee f962 	bl	8000210 <memchr>
 8011f4c:	b140      	cbz	r0, 8011f60 <_vfiprintf_r+0x198>
 8011f4e:	2340      	movs	r3, #64	; 0x40
 8011f50:	eba0 000a 	sub.w	r0, r0, sl
 8011f54:	fa03 f000 	lsl.w	r0, r3, r0
 8011f58:	9b04      	ldr	r3, [sp, #16]
 8011f5a:	4303      	orrs	r3, r0
 8011f5c:	3401      	adds	r4, #1
 8011f5e:	9304      	str	r3, [sp, #16]
 8011f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f64:	482c      	ldr	r0, [pc, #176]	; (8012018 <_vfiprintf_r+0x250>)
 8011f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f6a:	2206      	movs	r2, #6
 8011f6c:	f7ee f950 	bl	8000210 <memchr>
 8011f70:	2800      	cmp	r0, #0
 8011f72:	d03f      	beq.n	8011ff4 <_vfiprintf_r+0x22c>
 8011f74:	4b29      	ldr	r3, [pc, #164]	; (801201c <_vfiprintf_r+0x254>)
 8011f76:	bb1b      	cbnz	r3, 8011fc0 <_vfiprintf_r+0x1f8>
 8011f78:	9b03      	ldr	r3, [sp, #12]
 8011f7a:	3307      	adds	r3, #7
 8011f7c:	f023 0307 	bic.w	r3, r3, #7
 8011f80:	3308      	adds	r3, #8
 8011f82:	9303      	str	r3, [sp, #12]
 8011f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f86:	443b      	add	r3, r7
 8011f88:	9309      	str	r3, [sp, #36]	; 0x24
 8011f8a:	e767      	b.n	8011e5c <_vfiprintf_r+0x94>
 8011f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f90:	460c      	mov	r4, r1
 8011f92:	2001      	movs	r0, #1
 8011f94:	e7a5      	b.n	8011ee2 <_vfiprintf_r+0x11a>
 8011f96:	2300      	movs	r3, #0
 8011f98:	3401      	adds	r4, #1
 8011f9a:	9305      	str	r3, [sp, #20]
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	f04f 0c0a 	mov.w	ip, #10
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fa8:	3a30      	subs	r2, #48	; 0x30
 8011faa:	2a09      	cmp	r2, #9
 8011fac:	d903      	bls.n	8011fb6 <_vfiprintf_r+0x1ee>
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d0c5      	beq.n	8011f3e <_vfiprintf_r+0x176>
 8011fb2:	9105      	str	r1, [sp, #20]
 8011fb4:	e7c3      	b.n	8011f3e <_vfiprintf_r+0x176>
 8011fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fba:	4604      	mov	r4, r0
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	e7f0      	b.n	8011fa2 <_vfiprintf_r+0x1da>
 8011fc0:	ab03      	add	r3, sp, #12
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	462a      	mov	r2, r5
 8011fc6:	4b16      	ldr	r3, [pc, #88]	; (8012020 <_vfiprintf_r+0x258>)
 8011fc8:	a904      	add	r1, sp, #16
 8011fca:	4630      	mov	r0, r6
 8011fcc:	f3af 8000 	nop.w
 8011fd0:	4607      	mov	r7, r0
 8011fd2:	1c78      	adds	r0, r7, #1
 8011fd4:	d1d6      	bne.n	8011f84 <_vfiprintf_r+0x1bc>
 8011fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fd8:	07d9      	lsls	r1, r3, #31
 8011fda:	d405      	bmi.n	8011fe8 <_vfiprintf_r+0x220>
 8011fdc:	89ab      	ldrh	r3, [r5, #12]
 8011fde:	059a      	lsls	r2, r3, #22
 8011fe0:	d402      	bmi.n	8011fe8 <_vfiprintf_r+0x220>
 8011fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fe4:	f7fe ffe4 	bl	8010fb0 <__retarget_lock_release_recursive>
 8011fe8:	89ab      	ldrh	r3, [r5, #12]
 8011fea:	065b      	lsls	r3, r3, #25
 8011fec:	f53f af12 	bmi.w	8011e14 <_vfiprintf_r+0x4c>
 8011ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ff2:	e711      	b.n	8011e18 <_vfiprintf_r+0x50>
 8011ff4:	ab03      	add	r3, sp, #12
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	462a      	mov	r2, r5
 8011ffa:	4b09      	ldr	r3, [pc, #36]	; (8012020 <_vfiprintf_r+0x258>)
 8011ffc:	a904      	add	r1, sp, #16
 8011ffe:	4630      	mov	r0, r6
 8012000:	f000 f880 	bl	8012104 <_printf_i>
 8012004:	e7e4      	b.n	8011fd0 <_vfiprintf_r+0x208>
 8012006:	bf00      	nop
 8012008:	08014078 	.word	0x08014078
 801200c:	08014098 	.word	0x08014098
 8012010:	08014058 	.word	0x08014058
 8012014:	080142bc 	.word	0x080142bc
 8012018:	080142c6 	.word	0x080142c6
 801201c:	00000000 	.word	0x00000000
 8012020:	08011da3 	.word	0x08011da3
 8012024:	080142c2 	.word	0x080142c2

08012028 <_printf_common>:
 8012028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801202c:	4616      	mov	r6, r2
 801202e:	4699      	mov	r9, r3
 8012030:	688a      	ldr	r2, [r1, #8]
 8012032:	690b      	ldr	r3, [r1, #16]
 8012034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012038:	4293      	cmp	r3, r2
 801203a:	bfb8      	it	lt
 801203c:	4613      	movlt	r3, r2
 801203e:	6033      	str	r3, [r6, #0]
 8012040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012044:	4607      	mov	r7, r0
 8012046:	460c      	mov	r4, r1
 8012048:	b10a      	cbz	r2, 801204e <_printf_common+0x26>
 801204a:	3301      	adds	r3, #1
 801204c:	6033      	str	r3, [r6, #0]
 801204e:	6823      	ldr	r3, [r4, #0]
 8012050:	0699      	lsls	r1, r3, #26
 8012052:	bf42      	ittt	mi
 8012054:	6833      	ldrmi	r3, [r6, #0]
 8012056:	3302      	addmi	r3, #2
 8012058:	6033      	strmi	r3, [r6, #0]
 801205a:	6825      	ldr	r5, [r4, #0]
 801205c:	f015 0506 	ands.w	r5, r5, #6
 8012060:	d106      	bne.n	8012070 <_printf_common+0x48>
 8012062:	f104 0a19 	add.w	sl, r4, #25
 8012066:	68e3      	ldr	r3, [r4, #12]
 8012068:	6832      	ldr	r2, [r6, #0]
 801206a:	1a9b      	subs	r3, r3, r2
 801206c:	42ab      	cmp	r3, r5
 801206e:	dc26      	bgt.n	80120be <_printf_common+0x96>
 8012070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012074:	1e13      	subs	r3, r2, #0
 8012076:	6822      	ldr	r2, [r4, #0]
 8012078:	bf18      	it	ne
 801207a:	2301      	movne	r3, #1
 801207c:	0692      	lsls	r2, r2, #26
 801207e:	d42b      	bmi.n	80120d8 <_printf_common+0xb0>
 8012080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012084:	4649      	mov	r1, r9
 8012086:	4638      	mov	r0, r7
 8012088:	47c0      	blx	r8
 801208a:	3001      	adds	r0, #1
 801208c:	d01e      	beq.n	80120cc <_printf_common+0xa4>
 801208e:	6823      	ldr	r3, [r4, #0]
 8012090:	68e5      	ldr	r5, [r4, #12]
 8012092:	6832      	ldr	r2, [r6, #0]
 8012094:	f003 0306 	and.w	r3, r3, #6
 8012098:	2b04      	cmp	r3, #4
 801209a:	bf08      	it	eq
 801209c:	1aad      	subeq	r5, r5, r2
 801209e:	68a3      	ldr	r3, [r4, #8]
 80120a0:	6922      	ldr	r2, [r4, #16]
 80120a2:	bf0c      	ite	eq
 80120a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120a8:	2500      	movne	r5, #0
 80120aa:	4293      	cmp	r3, r2
 80120ac:	bfc4      	itt	gt
 80120ae:	1a9b      	subgt	r3, r3, r2
 80120b0:	18ed      	addgt	r5, r5, r3
 80120b2:	2600      	movs	r6, #0
 80120b4:	341a      	adds	r4, #26
 80120b6:	42b5      	cmp	r5, r6
 80120b8:	d11a      	bne.n	80120f0 <_printf_common+0xc8>
 80120ba:	2000      	movs	r0, #0
 80120bc:	e008      	b.n	80120d0 <_printf_common+0xa8>
 80120be:	2301      	movs	r3, #1
 80120c0:	4652      	mov	r2, sl
 80120c2:	4649      	mov	r1, r9
 80120c4:	4638      	mov	r0, r7
 80120c6:	47c0      	blx	r8
 80120c8:	3001      	adds	r0, #1
 80120ca:	d103      	bne.n	80120d4 <_printf_common+0xac>
 80120cc:	f04f 30ff 	mov.w	r0, #4294967295
 80120d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120d4:	3501      	adds	r5, #1
 80120d6:	e7c6      	b.n	8012066 <_printf_common+0x3e>
 80120d8:	18e1      	adds	r1, r4, r3
 80120da:	1c5a      	adds	r2, r3, #1
 80120dc:	2030      	movs	r0, #48	; 0x30
 80120de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80120e2:	4422      	add	r2, r4
 80120e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80120e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80120ec:	3302      	adds	r3, #2
 80120ee:	e7c7      	b.n	8012080 <_printf_common+0x58>
 80120f0:	2301      	movs	r3, #1
 80120f2:	4622      	mov	r2, r4
 80120f4:	4649      	mov	r1, r9
 80120f6:	4638      	mov	r0, r7
 80120f8:	47c0      	blx	r8
 80120fa:	3001      	adds	r0, #1
 80120fc:	d0e6      	beq.n	80120cc <_printf_common+0xa4>
 80120fe:	3601      	adds	r6, #1
 8012100:	e7d9      	b.n	80120b6 <_printf_common+0x8e>
	...

08012104 <_printf_i>:
 8012104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012108:	460c      	mov	r4, r1
 801210a:	4691      	mov	r9, r2
 801210c:	7e27      	ldrb	r7, [r4, #24]
 801210e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012110:	2f78      	cmp	r7, #120	; 0x78
 8012112:	4680      	mov	r8, r0
 8012114:	469a      	mov	sl, r3
 8012116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801211a:	d807      	bhi.n	801212c <_printf_i+0x28>
 801211c:	2f62      	cmp	r7, #98	; 0x62
 801211e:	d80a      	bhi.n	8012136 <_printf_i+0x32>
 8012120:	2f00      	cmp	r7, #0
 8012122:	f000 80d8 	beq.w	80122d6 <_printf_i+0x1d2>
 8012126:	2f58      	cmp	r7, #88	; 0x58
 8012128:	f000 80a3 	beq.w	8012272 <_printf_i+0x16e>
 801212c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012134:	e03a      	b.n	80121ac <_printf_i+0xa8>
 8012136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801213a:	2b15      	cmp	r3, #21
 801213c:	d8f6      	bhi.n	801212c <_printf_i+0x28>
 801213e:	a001      	add	r0, pc, #4	; (adr r0, 8012144 <_printf_i+0x40>)
 8012140:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012144:	0801219d 	.word	0x0801219d
 8012148:	080121b1 	.word	0x080121b1
 801214c:	0801212d 	.word	0x0801212d
 8012150:	0801212d 	.word	0x0801212d
 8012154:	0801212d 	.word	0x0801212d
 8012158:	0801212d 	.word	0x0801212d
 801215c:	080121b1 	.word	0x080121b1
 8012160:	0801212d 	.word	0x0801212d
 8012164:	0801212d 	.word	0x0801212d
 8012168:	0801212d 	.word	0x0801212d
 801216c:	0801212d 	.word	0x0801212d
 8012170:	080122bd 	.word	0x080122bd
 8012174:	080121e1 	.word	0x080121e1
 8012178:	0801229f 	.word	0x0801229f
 801217c:	0801212d 	.word	0x0801212d
 8012180:	0801212d 	.word	0x0801212d
 8012184:	080122df 	.word	0x080122df
 8012188:	0801212d 	.word	0x0801212d
 801218c:	080121e1 	.word	0x080121e1
 8012190:	0801212d 	.word	0x0801212d
 8012194:	0801212d 	.word	0x0801212d
 8012198:	080122a7 	.word	0x080122a7
 801219c:	680b      	ldr	r3, [r1, #0]
 801219e:	1d1a      	adds	r2, r3, #4
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	600a      	str	r2, [r1, #0]
 80121a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80121a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80121ac:	2301      	movs	r3, #1
 80121ae:	e0a3      	b.n	80122f8 <_printf_i+0x1f4>
 80121b0:	6825      	ldr	r5, [r4, #0]
 80121b2:	6808      	ldr	r0, [r1, #0]
 80121b4:	062e      	lsls	r6, r5, #24
 80121b6:	f100 0304 	add.w	r3, r0, #4
 80121ba:	d50a      	bpl.n	80121d2 <_printf_i+0xce>
 80121bc:	6805      	ldr	r5, [r0, #0]
 80121be:	600b      	str	r3, [r1, #0]
 80121c0:	2d00      	cmp	r5, #0
 80121c2:	da03      	bge.n	80121cc <_printf_i+0xc8>
 80121c4:	232d      	movs	r3, #45	; 0x2d
 80121c6:	426d      	negs	r5, r5
 80121c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121cc:	485e      	ldr	r0, [pc, #376]	; (8012348 <_printf_i+0x244>)
 80121ce:	230a      	movs	r3, #10
 80121d0:	e019      	b.n	8012206 <_printf_i+0x102>
 80121d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80121d6:	6805      	ldr	r5, [r0, #0]
 80121d8:	600b      	str	r3, [r1, #0]
 80121da:	bf18      	it	ne
 80121dc:	b22d      	sxthne	r5, r5
 80121de:	e7ef      	b.n	80121c0 <_printf_i+0xbc>
 80121e0:	680b      	ldr	r3, [r1, #0]
 80121e2:	6825      	ldr	r5, [r4, #0]
 80121e4:	1d18      	adds	r0, r3, #4
 80121e6:	6008      	str	r0, [r1, #0]
 80121e8:	0628      	lsls	r0, r5, #24
 80121ea:	d501      	bpl.n	80121f0 <_printf_i+0xec>
 80121ec:	681d      	ldr	r5, [r3, #0]
 80121ee:	e002      	b.n	80121f6 <_printf_i+0xf2>
 80121f0:	0669      	lsls	r1, r5, #25
 80121f2:	d5fb      	bpl.n	80121ec <_printf_i+0xe8>
 80121f4:	881d      	ldrh	r5, [r3, #0]
 80121f6:	4854      	ldr	r0, [pc, #336]	; (8012348 <_printf_i+0x244>)
 80121f8:	2f6f      	cmp	r7, #111	; 0x6f
 80121fa:	bf0c      	ite	eq
 80121fc:	2308      	moveq	r3, #8
 80121fe:	230a      	movne	r3, #10
 8012200:	2100      	movs	r1, #0
 8012202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012206:	6866      	ldr	r6, [r4, #4]
 8012208:	60a6      	str	r6, [r4, #8]
 801220a:	2e00      	cmp	r6, #0
 801220c:	bfa2      	ittt	ge
 801220e:	6821      	ldrge	r1, [r4, #0]
 8012210:	f021 0104 	bicge.w	r1, r1, #4
 8012214:	6021      	strge	r1, [r4, #0]
 8012216:	b90d      	cbnz	r5, 801221c <_printf_i+0x118>
 8012218:	2e00      	cmp	r6, #0
 801221a:	d04d      	beq.n	80122b8 <_printf_i+0x1b4>
 801221c:	4616      	mov	r6, r2
 801221e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012222:	fb03 5711 	mls	r7, r3, r1, r5
 8012226:	5dc7      	ldrb	r7, [r0, r7]
 8012228:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801222c:	462f      	mov	r7, r5
 801222e:	42bb      	cmp	r3, r7
 8012230:	460d      	mov	r5, r1
 8012232:	d9f4      	bls.n	801221e <_printf_i+0x11a>
 8012234:	2b08      	cmp	r3, #8
 8012236:	d10b      	bne.n	8012250 <_printf_i+0x14c>
 8012238:	6823      	ldr	r3, [r4, #0]
 801223a:	07df      	lsls	r7, r3, #31
 801223c:	d508      	bpl.n	8012250 <_printf_i+0x14c>
 801223e:	6923      	ldr	r3, [r4, #16]
 8012240:	6861      	ldr	r1, [r4, #4]
 8012242:	4299      	cmp	r1, r3
 8012244:	bfde      	ittt	le
 8012246:	2330      	movle	r3, #48	; 0x30
 8012248:	f806 3c01 	strble.w	r3, [r6, #-1]
 801224c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012250:	1b92      	subs	r2, r2, r6
 8012252:	6122      	str	r2, [r4, #16]
 8012254:	f8cd a000 	str.w	sl, [sp]
 8012258:	464b      	mov	r3, r9
 801225a:	aa03      	add	r2, sp, #12
 801225c:	4621      	mov	r1, r4
 801225e:	4640      	mov	r0, r8
 8012260:	f7ff fee2 	bl	8012028 <_printf_common>
 8012264:	3001      	adds	r0, #1
 8012266:	d14c      	bne.n	8012302 <_printf_i+0x1fe>
 8012268:	f04f 30ff 	mov.w	r0, #4294967295
 801226c:	b004      	add	sp, #16
 801226e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012272:	4835      	ldr	r0, [pc, #212]	; (8012348 <_printf_i+0x244>)
 8012274:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012278:	6823      	ldr	r3, [r4, #0]
 801227a:	680e      	ldr	r6, [r1, #0]
 801227c:	061f      	lsls	r7, r3, #24
 801227e:	f856 5b04 	ldr.w	r5, [r6], #4
 8012282:	600e      	str	r6, [r1, #0]
 8012284:	d514      	bpl.n	80122b0 <_printf_i+0x1ac>
 8012286:	07d9      	lsls	r1, r3, #31
 8012288:	bf44      	itt	mi
 801228a:	f043 0320 	orrmi.w	r3, r3, #32
 801228e:	6023      	strmi	r3, [r4, #0]
 8012290:	b91d      	cbnz	r5, 801229a <_printf_i+0x196>
 8012292:	6823      	ldr	r3, [r4, #0]
 8012294:	f023 0320 	bic.w	r3, r3, #32
 8012298:	6023      	str	r3, [r4, #0]
 801229a:	2310      	movs	r3, #16
 801229c:	e7b0      	b.n	8012200 <_printf_i+0xfc>
 801229e:	6823      	ldr	r3, [r4, #0]
 80122a0:	f043 0320 	orr.w	r3, r3, #32
 80122a4:	6023      	str	r3, [r4, #0]
 80122a6:	2378      	movs	r3, #120	; 0x78
 80122a8:	4828      	ldr	r0, [pc, #160]	; (801234c <_printf_i+0x248>)
 80122aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80122ae:	e7e3      	b.n	8012278 <_printf_i+0x174>
 80122b0:	065e      	lsls	r6, r3, #25
 80122b2:	bf48      	it	mi
 80122b4:	b2ad      	uxthmi	r5, r5
 80122b6:	e7e6      	b.n	8012286 <_printf_i+0x182>
 80122b8:	4616      	mov	r6, r2
 80122ba:	e7bb      	b.n	8012234 <_printf_i+0x130>
 80122bc:	680b      	ldr	r3, [r1, #0]
 80122be:	6826      	ldr	r6, [r4, #0]
 80122c0:	6960      	ldr	r0, [r4, #20]
 80122c2:	1d1d      	adds	r5, r3, #4
 80122c4:	600d      	str	r5, [r1, #0]
 80122c6:	0635      	lsls	r5, r6, #24
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	d501      	bpl.n	80122d0 <_printf_i+0x1cc>
 80122cc:	6018      	str	r0, [r3, #0]
 80122ce:	e002      	b.n	80122d6 <_printf_i+0x1d2>
 80122d0:	0671      	lsls	r1, r6, #25
 80122d2:	d5fb      	bpl.n	80122cc <_printf_i+0x1c8>
 80122d4:	8018      	strh	r0, [r3, #0]
 80122d6:	2300      	movs	r3, #0
 80122d8:	6123      	str	r3, [r4, #16]
 80122da:	4616      	mov	r6, r2
 80122dc:	e7ba      	b.n	8012254 <_printf_i+0x150>
 80122de:	680b      	ldr	r3, [r1, #0]
 80122e0:	1d1a      	adds	r2, r3, #4
 80122e2:	600a      	str	r2, [r1, #0]
 80122e4:	681e      	ldr	r6, [r3, #0]
 80122e6:	6862      	ldr	r2, [r4, #4]
 80122e8:	2100      	movs	r1, #0
 80122ea:	4630      	mov	r0, r6
 80122ec:	f7ed ff90 	bl	8000210 <memchr>
 80122f0:	b108      	cbz	r0, 80122f6 <_printf_i+0x1f2>
 80122f2:	1b80      	subs	r0, r0, r6
 80122f4:	6060      	str	r0, [r4, #4]
 80122f6:	6863      	ldr	r3, [r4, #4]
 80122f8:	6123      	str	r3, [r4, #16]
 80122fa:	2300      	movs	r3, #0
 80122fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012300:	e7a8      	b.n	8012254 <_printf_i+0x150>
 8012302:	6923      	ldr	r3, [r4, #16]
 8012304:	4632      	mov	r2, r6
 8012306:	4649      	mov	r1, r9
 8012308:	4640      	mov	r0, r8
 801230a:	47d0      	blx	sl
 801230c:	3001      	adds	r0, #1
 801230e:	d0ab      	beq.n	8012268 <_printf_i+0x164>
 8012310:	6823      	ldr	r3, [r4, #0]
 8012312:	079b      	lsls	r3, r3, #30
 8012314:	d413      	bmi.n	801233e <_printf_i+0x23a>
 8012316:	68e0      	ldr	r0, [r4, #12]
 8012318:	9b03      	ldr	r3, [sp, #12]
 801231a:	4298      	cmp	r0, r3
 801231c:	bfb8      	it	lt
 801231e:	4618      	movlt	r0, r3
 8012320:	e7a4      	b.n	801226c <_printf_i+0x168>
 8012322:	2301      	movs	r3, #1
 8012324:	4632      	mov	r2, r6
 8012326:	4649      	mov	r1, r9
 8012328:	4640      	mov	r0, r8
 801232a:	47d0      	blx	sl
 801232c:	3001      	adds	r0, #1
 801232e:	d09b      	beq.n	8012268 <_printf_i+0x164>
 8012330:	3501      	adds	r5, #1
 8012332:	68e3      	ldr	r3, [r4, #12]
 8012334:	9903      	ldr	r1, [sp, #12]
 8012336:	1a5b      	subs	r3, r3, r1
 8012338:	42ab      	cmp	r3, r5
 801233a:	dcf2      	bgt.n	8012322 <_printf_i+0x21e>
 801233c:	e7eb      	b.n	8012316 <_printf_i+0x212>
 801233e:	2500      	movs	r5, #0
 8012340:	f104 0619 	add.w	r6, r4, #25
 8012344:	e7f5      	b.n	8012332 <_printf_i+0x22e>
 8012346:	bf00      	nop
 8012348:	080142cd 	.word	0x080142cd
 801234c:	080142de 	.word	0x080142de

08012350 <_read_r>:
 8012350:	b538      	push	{r3, r4, r5, lr}
 8012352:	4d07      	ldr	r5, [pc, #28]	; (8012370 <_read_r+0x20>)
 8012354:	4604      	mov	r4, r0
 8012356:	4608      	mov	r0, r1
 8012358:	4611      	mov	r1, r2
 801235a:	2200      	movs	r2, #0
 801235c:	602a      	str	r2, [r5, #0]
 801235e:	461a      	mov	r2, r3
 8012360:	f7f0 fa80 	bl	8002864 <_read>
 8012364:	1c43      	adds	r3, r0, #1
 8012366:	d102      	bne.n	801236e <_read_r+0x1e>
 8012368:	682b      	ldr	r3, [r5, #0]
 801236a:	b103      	cbz	r3, 801236e <_read_r+0x1e>
 801236c:	6023      	str	r3, [r4, #0]
 801236e:	bd38      	pop	{r3, r4, r5, pc}
 8012370:	200038c0 	.word	0x200038c0
 8012374:	00000000 	.word	0x00000000

08012378 <nan>:
 8012378:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012380 <nan+0x8>
 801237c:	4770      	bx	lr
 801237e:	bf00      	nop
 8012380:	00000000 	.word	0x00000000
 8012384:	7ff80000 	.word	0x7ff80000

08012388 <__ascii_wctomb>:
 8012388:	b149      	cbz	r1, 801239e <__ascii_wctomb+0x16>
 801238a:	2aff      	cmp	r2, #255	; 0xff
 801238c:	bf85      	ittet	hi
 801238e:	238a      	movhi	r3, #138	; 0x8a
 8012390:	6003      	strhi	r3, [r0, #0]
 8012392:	700a      	strbls	r2, [r1, #0]
 8012394:	f04f 30ff 	movhi.w	r0, #4294967295
 8012398:	bf98      	it	ls
 801239a:	2001      	movls	r0, #1
 801239c:	4770      	bx	lr
 801239e:	4608      	mov	r0, r1
 80123a0:	4770      	bx	lr
	...

080123a4 <__assert_func>:
 80123a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123a6:	4614      	mov	r4, r2
 80123a8:	461a      	mov	r2, r3
 80123aa:	4b09      	ldr	r3, [pc, #36]	; (80123d0 <__assert_func+0x2c>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	4605      	mov	r5, r0
 80123b0:	68d8      	ldr	r0, [r3, #12]
 80123b2:	b14c      	cbz	r4, 80123c8 <__assert_func+0x24>
 80123b4:	4b07      	ldr	r3, [pc, #28]	; (80123d4 <__assert_func+0x30>)
 80123b6:	9100      	str	r1, [sp, #0]
 80123b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80123bc:	4906      	ldr	r1, [pc, #24]	; (80123d8 <__assert_func+0x34>)
 80123be:	462b      	mov	r3, r5
 80123c0:	f000 f80e 	bl	80123e0 <fiprintf>
 80123c4:	f000 f862 	bl	801248c <abort>
 80123c8:	4b04      	ldr	r3, [pc, #16]	; (80123dc <__assert_func+0x38>)
 80123ca:	461c      	mov	r4, r3
 80123cc:	e7f3      	b.n	80123b6 <__assert_func+0x12>
 80123ce:	bf00      	nop
 80123d0:	20000148 	.word	0x20000148
 80123d4:	080142ef 	.word	0x080142ef
 80123d8:	080142fc 	.word	0x080142fc
 80123dc:	0801432a 	.word	0x0801432a

080123e0 <fiprintf>:
 80123e0:	b40e      	push	{r1, r2, r3}
 80123e2:	b503      	push	{r0, r1, lr}
 80123e4:	4601      	mov	r1, r0
 80123e6:	ab03      	add	r3, sp, #12
 80123e8:	4805      	ldr	r0, [pc, #20]	; (8012400 <fiprintf+0x20>)
 80123ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80123ee:	6800      	ldr	r0, [r0, #0]
 80123f0:	9301      	str	r3, [sp, #4]
 80123f2:	f7ff fce9 	bl	8011dc8 <_vfiprintf_r>
 80123f6:	b002      	add	sp, #8
 80123f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80123fc:	b003      	add	sp, #12
 80123fe:	4770      	bx	lr
 8012400:	20000148 	.word	0x20000148

08012404 <_fstat_r>:
 8012404:	b538      	push	{r3, r4, r5, lr}
 8012406:	4d07      	ldr	r5, [pc, #28]	; (8012424 <_fstat_r+0x20>)
 8012408:	2300      	movs	r3, #0
 801240a:	4604      	mov	r4, r0
 801240c:	4608      	mov	r0, r1
 801240e:	4611      	mov	r1, r2
 8012410:	602b      	str	r3, [r5, #0]
 8012412:	f7f0 fa6c 	bl	80028ee <_fstat>
 8012416:	1c43      	adds	r3, r0, #1
 8012418:	d102      	bne.n	8012420 <_fstat_r+0x1c>
 801241a:	682b      	ldr	r3, [r5, #0]
 801241c:	b103      	cbz	r3, 8012420 <_fstat_r+0x1c>
 801241e:	6023      	str	r3, [r4, #0]
 8012420:	bd38      	pop	{r3, r4, r5, pc}
 8012422:	bf00      	nop
 8012424:	200038c0 	.word	0x200038c0

08012428 <_isatty_r>:
 8012428:	b538      	push	{r3, r4, r5, lr}
 801242a:	4d06      	ldr	r5, [pc, #24]	; (8012444 <_isatty_r+0x1c>)
 801242c:	2300      	movs	r3, #0
 801242e:	4604      	mov	r4, r0
 8012430:	4608      	mov	r0, r1
 8012432:	602b      	str	r3, [r5, #0]
 8012434:	f7f0 fa6b 	bl	800290e <_isatty>
 8012438:	1c43      	adds	r3, r0, #1
 801243a:	d102      	bne.n	8012442 <_isatty_r+0x1a>
 801243c:	682b      	ldr	r3, [r5, #0]
 801243e:	b103      	cbz	r3, 8012442 <_isatty_r+0x1a>
 8012440:	6023      	str	r3, [r4, #0]
 8012442:	bd38      	pop	{r3, r4, r5, pc}
 8012444:	200038c0 	.word	0x200038c0

08012448 <memmove>:
 8012448:	4288      	cmp	r0, r1
 801244a:	b510      	push	{r4, lr}
 801244c:	eb01 0402 	add.w	r4, r1, r2
 8012450:	d902      	bls.n	8012458 <memmove+0x10>
 8012452:	4284      	cmp	r4, r0
 8012454:	4623      	mov	r3, r4
 8012456:	d807      	bhi.n	8012468 <memmove+0x20>
 8012458:	1e43      	subs	r3, r0, #1
 801245a:	42a1      	cmp	r1, r4
 801245c:	d008      	beq.n	8012470 <memmove+0x28>
 801245e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012466:	e7f8      	b.n	801245a <memmove+0x12>
 8012468:	4402      	add	r2, r0
 801246a:	4601      	mov	r1, r0
 801246c:	428a      	cmp	r2, r1
 801246e:	d100      	bne.n	8012472 <memmove+0x2a>
 8012470:	bd10      	pop	{r4, pc}
 8012472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801247a:	e7f7      	b.n	801246c <memmove+0x24>

0801247c <_malloc_usable_size_r>:
 801247c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012480:	1f18      	subs	r0, r3, #4
 8012482:	2b00      	cmp	r3, #0
 8012484:	bfbc      	itt	lt
 8012486:	580b      	ldrlt	r3, [r1, r0]
 8012488:	18c0      	addlt	r0, r0, r3
 801248a:	4770      	bx	lr

0801248c <abort>:
 801248c:	b508      	push	{r3, lr}
 801248e:	2006      	movs	r0, #6
 8012490:	f000 f82c 	bl	80124ec <raise>
 8012494:	2001      	movs	r0, #1
 8012496:	f7f0 f9db 	bl	8002850 <_exit>

0801249a <_raise_r>:
 801249a:	291f      	cmp	r1, #31
 801249c:	b538      	push	{r3, r4, r5, lr}
 801249e:	4604      	mov	r4, r0
 80124a0:	460d      	mov	r5, r1
 80124a2:	d904      	bls.n	80124ae <_raise_r+0x14>
 80124a4:	2316      	movs	r3, #22
 80124a6:	6003      	str	r3, [r0, #0]
 80124a8:	f04f 30ff 	mov.w	r0, #4294967295
 80124ac:	bd38      	pop	{r3, r4, r5, pc}
 80124ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80124b0:	b112      	cbz	r2, 80124b8 <_raise_r+0x1e>
 80124b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124b6:	b94b      	cbnz	r3, 80124cc <_raise_r+0x32>
 80124b8:	4620      	mov	r0, r4
 80124ba:	f000 f831 	bl	8012520 <_getpid_r>
 80124be:	462a      	mov	r2, r5
 80124c0:	4601      	mov	r1, r0
 80124c2:	4620      	mov	r0, r4
 80124c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124c8:	f000 b818 	b.w	80124fc <_kill_r>
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	d00a      	beq.n	80124e6 <_raise_r+0x4c>
 80124d0:	1c59      	adds	r1, r3, #1
 80124d2:	d103      	bne.n	80124dc <_raise_r+0x42>
 80124d4:	2316      	movs	r3, #22
 80124d6:	6003      	str	r3, [r0, #0]
 80124d8:	2001      	movs	r0, #1
 80124da:	e7e7      	b.n	80124ac <_raise_r+0x12>
 80124dc:	2400      	movs	r4, #0
 80124de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80124e2:	4628      	mov	r0, r5
 80124e4:	4798      	blx	r3
 80124e6:	2000      	movs	r0, #0
 80124e8:	e7e0      	b.n	80124ac <_raise_r+0x12>
	...

080124ec <raise>:
 80124ec:	4b02      	ldr	r3, [pc, #8]	; (80124f8 <raise+0xc>)
 80124ee:	4601      	mov	r1, r0
 80124f0:	6818      	ldr	r0, [r3, #0]
 80124f2:	f7ff bfd2 	b.w	801249a <_raise_r>
 80124f6:	bf00      	nop
 80124f8:	20000148 	.word	0x20000148

080124fc <_kill_r>:
 80124fc:	b538      	push	{r3, r4, r5, lr}
 80124fe:	4d07      	ldr	r5, [pc, #28]	; (801251c <_kill_r+0x20>)
 8012500:	2300      	movs	r3, #0
 8012502:	4604      	mov	r4, r0
 8012504:	4608      	mov	r0, r1
 8012506:	4611      	mov	r1, r2
 8012508:	602b      	str	r3, [r5, #0]
 801250a:	f7f0 f991 	bl	8002830 <_kill>
 801250e:	1c43      	adds	r3, r0, #1
 8012510:	d102      	bne.n	8012518 <_kill_r+0x1c>
 8012512:	682b      	ldr	r3, [r5, #0]
 8012514:	b103      	cbz	r3, 8012518 <_kill_r+0x1c>
 8012516:	6023      	str	r3, [r4, #0]
 8012518:	bd38      	pop	{r3, r4, r5, pc}
 801251a:	bf00      	nop
 801251c:	200038c0 	.word	0x200038c0

08012520 <_getpid_r>:
 8012520:	f7f0 b97e 	b.w	8002820 <_getpid>

08012524 <_init>:
 8012524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012526:	bf00      	nop
 8012528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801252a:	bc08      	pop	{r3}
 801252c:	469e      	mov	lr, r3
 801252e:	4770      	bx	lr

08012530 <_fini>:
 8012530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012532:	bf00      	nop
 8012534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012536:	bc08      	pop	{r3}
 8012538:	469e      	mov	lr, r3
 801253a:	4770      	bx	lr
